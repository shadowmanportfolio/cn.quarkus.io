# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:1
#, fuzzy, no-wrap
msgid "hubertlewandowski"
msgstr "フーバルトルワンドウスキー"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:1
#, fuzzy, no-wrap
msgid "2020-04-08"
msgstr "2020-04-08"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:1
#, fuzzy, no-wrap
msgid "user-story"
msgstr "ユーザストーリー"

#. type: Title =
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:1
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:10
#, fuzzy, no-wrap
msgid "Why did Payair Technologies switch to Quarkus?"
msgstr "Payair TechnologiesがQuarkusに切り替えた理由は何ですか？"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:14
#, fuzzy
msgid "image:payair_logo_rgb.png[Payair Logo]"
msgstr "image:payair_logo_rgb.png[alt=Payair Logo]"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:17
#, fuzzy
msgid "Developing cloud-ready solutions has become an industry standard, especially in the enterprise world. Sooner or later your application has to face the problem of poor horizontal scalability or high memory usage and we all know it is better to be prepared."
msgstr "クラウド対応のソリューションを開発することは、特にエンタープライズの世界では、業界標準となっています。遅かれ早かれ、アプリケーションは水平方向のスケーラビリティの低下やメモリ使用量の増加といった問題に直面することになりますが、備えあれば憂いなしです。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:19
#, fuzzy
msgid "We understand this at https://www.payair.com[Payair] as well. When we faced the challenge of preparing the backend to our mobile payment app, we decided to use frameworks supporting a serverless approach as much as possible. One of these was Quarkus."
msgstr "このことは link:https://www.payair.com[Payair]でも理解しています。モバイル決済アプリのバックエンドを準備するという課題に直面したとき、私たちはできるだけサーバーレスのアプローチをサポートするフレームワークを使用することにしました。その1つがQuarkusでした。"

#. type: Title ==
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:20
#, no-wrap
msgid "Supersonic Subatomic Java"
msgstr "Supersonic Subatomic Java"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:23
#, fuzzy
msgid "As creators of the framework are describing it, Quarkus is:"
msgstr "フレームワークの制作者が語るように、Quarkusは"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:25
#, fuzzy
msgid "A Kubernetes native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best of breed Java libraries and standards."
msgstr "OpenJDK HotSpotとGraalVMのために作られたKubernetesネイティブのJavaスタックで、最高のJavaライブラリと標準規格から作られています。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:27
#, fuzzy
msgid "On the Quarkus website you can find information that it has been designed around \"container first\" philosophy, meaning that it is optimized for fast boot times and low memory usage. As a result, we should gain near instant scale-up and high-density memory utilization in container orchestration platforms."
msgstr "Quarkusのウェブサイトには、Quarkusが \"コンテナ・ファースト \"の哲学に基づいて設計されているという情報が掲載されています。これは、Quarkusが高速起動と低メモリ使用に最適化されていることを意味します。その結果、コンテナ・オーケストレーション・プラットフォームにおいて、ほぼ瞬時にスケールアップし、高密度のメモリを利用できるようになると考えられます。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:29
#, fuzzy
msgid "The way this has been achieved can be summarized as follows:"
msgstr "その方法は次のようにまとめられます。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:31
#, fuzzy, no-wrap
msgid "*Build time metadata processing.* As much processing as possible is moved into the build process e.g. all of the classes required to perform initial application deployment are used and dropped while building. They are not loaded into final JARs (and JVMs) or native executables. You can say that the framework is tailor-made for you every time you press a build button, without compromising the effectiveness of a declarative approach.\n"
msgstr "*ビルド時のメタデータ処理。*例えば、アプリケーションの初期展開に必要なすべてのクラスは、ビルド中に使用され、削除されます。それらは最終的なJAR（およびJVM）やネイティブ実行可能ファイルにはロードされません。宣言型アプローチの有効性を損なうことなく、ビルドボタンを押すたびに、フレームワークがあなたのためにオーダーメイドされていると言えます。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:33
#, fuzzy, no-wrap
msgid "*Reduction in reflection usage.* Considering the point above, the resulting application contains only direct invocations. All of the fields, methods and classes that are not being called directly are purposefully removed. The same applies to dependencies as well. There is a way to include such calls (register them for reflection), but Quarkus will gently warn you that you may be deflecting from the real purpose of the framework.\n"
msgstr "*リフレクションの使用量の削減。*上記の点を考慮して、出来上がったアプリケーションには直接呼び出しだけが含まれています。直接呼び出されていないフィールド、メソッド、クラスはすべて意図的に削除されています。同じことが依存関係にも当てはまります。そのような呼び出しを含める（リフレクションのために登録する）方法もありますが、Quarkusはフレームワークの本当の目的から逸脱しているかもしれないと優しく警告してくれます。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:35
#, fuzzy, no-wrap
msgid "*Native image pre-boot.* Quarkus supports native executables that can be run with GraalVM. Actually, the creators of Quarkus state that the framework was designed to be run as a native image. The ahead-of-time compilation reduces the need of dynamic scanning and loading classes into a JVM.\n"
msgstr "*ネイティブイメージのプリブート。*Quarkusは、GraalVMで実行可能なネイティブ実行可能ファイルをサポートしています。実際、Quarkusの制作者は、このフレームワークはネイティブイメージとして実行されるように設計されていると述べています。先行コンパイルにより、クラスを動的にスキャンしてJVMにロードする必要性が軽減されます。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:37
#, fuzzy, no-wrap
msgid "*GraalVM.* GraalVM is a native code generator which will compile your project into an executable that can be run without the JVM. You can read more about this superb project here: https://www.graalvm.org.\n"
msgstr "*GraalVMです。*GraalVMは、あなたのプロジェクトをJVMなしで実行可能な実行ファイルにコンパイルするネイティブコードジェネレータです。この優れたプロジェクトについての詳細は、こちらをご覧ください https://www.graalvm.org ."

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:39
#, fuzzy
msgid "Below you can see a comparison of memory usage and boot time of sample applications:"
msgstr "下の図は、サンプルアプリケーションのメモリ使用量と起動時間の比較です。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:40
#, fuzzy, no-wrap
msgid "Performance Chart"
msgstr "パフォーマンスチャート"

#. type: Target for macro image
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:40
#, no-wrap
msgid "perf_black.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:42
#, fuzzy
msgid "source: https://quarkus.io"
msgstr "source: https://quarkus.io"

#. type: Title ==
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:43
#, fuzzy, no-wrap
msgid "Evolution, not revolution"
msgstr "革命ではなく進化"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:46
#, fuzzy
msgid "What is interesting about this framework is that it is not revolutionary. Since some of Payair’s developers had mainly Spring experience, we were concerned that it would be difficult for them to “switch sides”. It turned out that our fear of the unknown was completely unfounded. Quarkus leverages some good old Jakarta EE standards that all Java developers are familiar with. We did not have to learn a bunch of new APIs that are advertised as \"the best way to create REST endpoint\" or \"reinvented database access\". Instead, Quarkus uses Context Dependency Injection for beans, JAX-RS for RESTful web services, JPA for database access and many others."
msgstr "このフレームワークの面白いところは、革命的ではないことです。Payairの開発者の中には主にSpringの経験がある人もいたので、彼らが「鞍替え」するのは難しいのではないかと心配していました。しかし、私たちの未知への不安はまったくの杞憂に終わりました。Quarkusは、すべてのJava開発者がよく知っている古き良きJakarta EE標準を活用しています。RESTエンドポイントを作成するための最良の方法」や「データベースアクセスを再発明した」と宣伝されている新しいAPIをたくさん学ぶ必要はありませんでした。その代わりに、QuarkusではBeansにContext Dependency Injectionを、RESTful WebサービスにJAX-RSを、データベースアクセスにJPAを、その他多くの機能を使用しています。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:48
#, fuzzy
msgid "On top of that, Quarkus extends available Jakarta EE functionalities responding to modern world developers' demands. These are called Quarkus extensions and, to name a few, they contain support for reactive programming (but using the declarative approach), event messaging, etc."
msgstr "それに加えて、Quarkusは、現代の開発者の要求に応えて、利用可能なJakarta EEの機能を拡張しています。これらはQuarkus extensionsと呼ばれ、いくつかの例を挙げると、リアクティブプログラミング（ただし宣言型アプローチを使用）、イベントメッセージングなどのサポートが含まれています。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:50
#, fuzzy
msgid "Apart from a wide variety of available extensions, there is also a way to create your own, based on the library of your choice. Keep in mind though, that if you want to preserve those drastic optimizations that Quarkus offers, you will have to apply them manually to your extension as well."
msgstr "豊富な種類の拡張機能の他に、好みのライブラリをベースにした独自の拡張機能を作成する方法もあります。ただし、Quarkusが提供する大幅な最適化を維持したい場合は、自分の拡張機能にも手動で適用する必要があることに注意してください。"

#. type: Title ==
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:51
#, fuzzy, no-wrap
msgid "Shout-out to MicroProfile"
msgstr "MicroProfileへの拍手"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:54
#, fuzzy
msgid "I would like to stop here for a second and give a big shout-out to the Eclipse MicroProfile initiative. It specifies a collection of APIs and technologies to form a baseline for quick and effective enterprise Java microservices creation. The goal of MicroProfile is to define a specification for building microservices and deliver portable applications across multiple runtime implementations."
msgstr "ここでちょっと立ち止まって、Eclipse MicroProfileイニシアチブに大きな拍手を送りたいと思います。MicroProfileは、エンタープライズJavaのマイクロサービスを迅速かつ効果的に構築するためのベースラインを形成するAPIとテクノロジーのコレクションを規定しています。MicroProfileの目標は、マイクロサービスを構築するための仕様を定義し、複数のランタイム実装にわたってポータブルなアプリケーションを提供することです。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:56
#, fuzzy
msgid "Optimizing enterprise Java for a microservice architecture is a challenging task and, in my opinion, MicroProfile handles it pretty well. As a long term Spring developer I realized that Spring is slowly becoming the very thing it swore to destroy. The initial premises of Spring (which basically can be summed up as a lightweight alternative to Jakarta EE) are way past the expiry date now. Spring is the undisputed heavyweight champion that can handle everything you imagine but is not your best option for fast and light services. And that applies to Spring Boot as well."
msgstr "マイクロサービスアーキテクチャのためにエンタープライズJavaを最適化することは困難な作業ですが、私の意見では、MicroProfileはそれをかなりうまく処理しています。長年Springを開発してきた私は、Springがゆっくりと、それが破壊すると誓ったものになりつつあることに気づきました。Springの当初の前提条件（基本的にはJakarta EEの軽量な代替品としてまとめることができます）は、すでに賞味期限を過ぎています。Springは議論の余地のないヘビー級チャンピオンであり、あなたが想像するすべてのものを扱うことができますが、高速で軽量なサービスのための最良の選択肢ではありません。そしてそれはSpring Bootにも当てはまります。"

#. type: Title ==
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:57
#, fuzzy, no-wrap
msgid "Developer joy"
msgstr "開発者の喜び"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:60
#, fuzzy
msgid "It is worth mentioning how the development process of Quarkus application looks. First of all, you are not forced to use native images from day one. Normal JVM builds are still available. Resulting JARs are not as fast as native images, but still faster than your normal enterprise applications."
msgstr "特筆すべきは、Quarkusアプリケーションの開発プロセスがどのようになっているかです。まず第一に、初日からネイティブイメージの使用を強制されることはありません。通常のJVMビルドも利用可能です。できあがったJARは、ネイティブイメージほど高速ではありませんが、それでも通常のエンタープライズアプリケーションよりは高速です。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:62
#, fuzzy
msgid "This leads us to the most important thing: dev mode. The special Maven plugin allows you to quickly reload classes while you are editing them, leaving an impression of hot deployment. Changing the functionality and testing it right away without further ado is a real joy. No more distracting builds and endless context switching. Pure development mode, hence the name of the plugin."
msgstr "これは、最も重要なことである開発モードにつながります。特別なMavenプラグインにより、編集中のクラスを素早くリロードすることができ、ホットなデプロイメントの印象を残すことができます。機能を変更して、それ以上のことをせずにすぐにテストすることは、本当に楽しいことです。気が散るようなビルドや、延々と続くコンテキストの切り替えはもう必要ありません。純粋な開発モード、それがこのプラグインの名前の由来です。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:64
#, fuzzy
msgid "There is one more benefit of a quick startup time. Writing RESTful applications requires significant amount of integration tests on the API level. With Quarkus on board, running them gives a unit-test-smoothness feeling and if you are even a slight fan of TDD, you will appreciate the difference."
msgstr "起動時間が早いことのメリットはもう一つあります。RESTfulなアプリケーションを書くには、APIレベルでかなりの量の統合テストを行う必要があります。Quarkusを導入すると、それらを実行することでユニットテストのようなスムーズさを感じることができ、TDDが少しでも好きな人なら、その違いを実感できるはずです。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:66
#, fuzzy
msgid "One of my personal concerns when switching from Spring to something based on Jakarta EE was lack of Spring Data JPA. I really like the mix of simplicity and functionality this module provides. But it turned out that Quarkus has my back on this one as well. There is an extension called Hibernate ORM with Panache. It is a layer on top of Hibernate ORM which focuses on simplifying ORM to the maximum without compromising the actual power that ORM gives. Panache has managed to find a sweet spot of making it trivial to work with simple entities without giving up possibilities for handling complicated use case scenarios. Bravo to Panache and adios to Spring Data!"
msgstr "SpringからJakarta EEベースのものに変更したときに個人的に気になったのは、Spring Data JPAがないことでした。このモジュールが提供するシンプルさと機能性の組み合わせがとても気に入っています。しかし、Quarkusはこの点でも私をサポートしてくれることがわかりました。Hibernate ORM with Panacheという拡張機能があります。これは、Hibernate ORMの上のレイヤーで、ORMが与える実際の力を損なうことなく、ORMを最大限に簡素化することに重点を置いています。Panacheは、複雑なユースケースのシナリオを扱う可能性を放棄することなく、単純なエンティティを扱うことを容易にするというスイートスポットを見つけることに成功しました。Panacheにブラボーを、そしてSpring Dataにアディオスを!"

#. type: Title ==
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:67
#, fuzzy, no-wrap
msgid "Simplified maintenance?"
msgstr "メンテナンスの簡略化？"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:70
#, fuzzy
msgid "We are yet to implement the first release of Payair’s Quarkus application into our production environment. Based on our experiences from lower level environments, we just cannot wait for it! CI/CD is no more complex than with any other framework. We only needed vigilance while setting up native build scripts. The differences between JVM and GraalVM runtimes are negligible. Moreover, our initial performance tests are looking very promising."
msgstr "Payair社のQuarkusアプリケーションの最初のリリースを、まだ本番環境に導入していません。低レベルの環境での経験に基づいて、私たちはそれを待つことができません。CI/CDは、他のフレームワークに比べて複雑ではありません。必要なのは、ネイティブのビルドスクリプトをセットアップするときに注意することだけです。JVMとGraalVMのランタイムの違いは、ごくわずかです。さらに、初期のパフォーマンステストでは、非常に有望な結果が得られています。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:72
#, fuzzy
msgid "On the other hand Payair has many demanding customers who happen to be financial institutions. Throughout the years we have learned that they expect global reach, high performance and high availability from our products. Our solutions must be thoroughly tested, reliable and bulletproof. We are in an industry that is very risk averse and although we are aware that others are already using Quarkus in production (https://quarkus.io/blog/tag/user-story), we need to verify this for ourselves since the framework is still considered a new player on the market."
msgstr "一方、Payairには、金融機関をはじめとする多くの厳しいお客様がいらっしゃいます。これまでの経験から、お客様は当社の製品にグローバルリーチ、高性能、高可用性を求めていることがわかりました。私たちのソリューションは、徹底的にテストされ、信頼性が高く、防弾仕様でなければなりません。私たちは非常にリスクを嫌う業界にいます。他社がすでにQuarkusを本番で使用していることは知っていますが https://quarkus.io/blog/tag/user-story 、このフレームワークはまだ市場では新しいプレーヤーと考えられているため、私たち自身で検証する必要があります。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:74
#, fuzzy
msgid "The next step is to push our Quarkus implementation to the limits to see how it behaves under a real and heavy load. For now we believe that everything will work even better than we could have anticipated. We will let you know how it went."
msgstr "次のステップは、Quarkusの実装を限界まで推し進め、実際に高負荷がかかったときにどのように動作するかを確認することです。今のところ、すべてが予想以上にうまくいくと信じています。その様子はまたお知らせします。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:76
#, fuzzy
msgid "For more information about Payair Technologies please visit our website: https://www.payair.com"
msgstr "Payair Technologiesの詳細については、当社ウェブサイト https://www.payair.com ）をご覧ください。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:78
#, fuzzy
msgid "For more information on Quarkus:"
msgstr "Quarkusの詳細については、こちらをご覧ください。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:80
#, fuzzy
msgid "Quarkus website: http://quarkus.io"
msgstr "Quarkusウェブサイト http://quarkus.io"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:81
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "Quarkus GitHubプロジェクト: https://github.com/quarkusio/quarkus"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:82
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "Quarkus Twitter: https://twitter.com/QuarkusIO"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:83
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "Quarkusチャット https://quarkusio.zulipchat.com/"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:84
#, fuzzy
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Quarkusメーリングリスト: https://groups.google.com/forum/#!forum/quarkus-dev"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:85
#, fuzzy
msgid "https://youtube.com/quarkusio[Quarkus YouTube Channel]"
msgstr "link:https://youtube.com/quarkusio[Quarkus YouTubeチャンネル]"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:85
#, fuzzy
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr "link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Quarkusを利用する4つの理由]"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: Why did Payair Technologies switch to Quarkus?\n"
#~ "date: 2020-04-08\n"
#~ "tags: user-story\n"
#~ "author: hubertlewandowski\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Payair TechnologiesがQuarkusに切り替えた理由は何ですか？\n"
#~ "date: 2020-04-08\n"
#~ "tags: user-story\n"
#~ "author: hubertlewandowski\n"
#~ "---\n"
