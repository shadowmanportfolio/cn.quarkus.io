# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "クスコフィエ"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, fuzzy, no-wrap
msgid "2020-09-15"
msgstr "2020-09-15"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, fuzzy, no-wrap
msgid "How to use API using pagination with Mutiny"
msgstr "Mutinyでページネーションを使ったAPIを使う方法"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, fuzzy, no-wrap
msgid "reactive rest mutiny http pagination"
msgstr "リアクティブレストミューティニー httpページネーション"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, fuzzy, no-wrap
msgid "Handling paginated APIs with Mutiny"
msgstr "Mutinyでページ分割されたAPIを扱う"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:17
#, fuzzy
msgid "At the beginning of the Mutiny adventure, my friend Alex came to me with an interesting problem.  Alex wanted to retrieve data from a REST service in a reactive manner.  So far, no problem, we have everything for this in our toolbox.  But, this service, as many services, is using pagination.  Ah! That makes things a bit more spicy.  Alex wanted to retrieve all the items and consume them as a stream, but you can't retrieve the items in one batch.  You need to invoke the service for every page, extract the items and feed the stream."
msgstr "Mutinyの冒険が始まった頃、友人のAlexが面白い問題を抱えて私のところにやってきました。アレックスはRESTサービスからリアクティブな方法でデータを取得したいと考えていました。ここまでは問題ありませんでした。私たちのツールボックスにはこのためのものがすべて揃っています。しかし、このサービスは、多くのサービスと同様に、ページネーションを使用しています。ああ！これで少しスパイシーになりましたね。アレックスはすべてのアイテムを取得してストリームとして消費したかったのですが、アイテムを一括して取得することはできません。ページごとにサービスを起動し、アイテムを抽出してストリームに流す必要があります。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:20
#, fuzzy
msgid "So, how to achieve this in a reactive manner and build a proper stream of items without loosing your sanity? Let's have a look!"
msgstr "では、どのようにすれば、正気を失うことなく、反応的に実現し、適切なアイテムの流れを構築できるのでしょうか？見てみましょう。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:22
#, fuzzy
msgid "## The Punk API"
msgstr "The Punk API"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:27
#, fuzzy
msgid "First, we need an API.  Alex introduced me to the https://punkapi.com/documentation/v2[Punk API], a REST API to retrieve beers.  That's fun, and even better, it uses pagination.  We got our API!"
msgstr "まず、APIが必要です。アレックスは、ビールを検索するREST APIである link:https://punkapi.com/documentation/v2[Punk API]を紹介してくれました。これは楽しいし、さらに良いことに、ページネーションを使用しています。これでAPIが完成しました。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:29
#, fuzzy
msgid "If you call `https://api.punkapi.com/v2/beers?page=1`, you get a JSON array like:"
msgstr "を呼び出すと `<a href=\"https://api.punkapi.com/v2/beers?page=1\" class=\"bare\">https://api.punkapi.com/v2/beers?page=1</a>`のようなJSON配列を得ることができます。"

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:41
#, no-wrap
msgid ""
"[\n"
"    {\n"
"        first beer\n"
"    },\n"
"    {\n"
"        second beer\n"
"    }, \n"
"    // ...\n"
"]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:48
#, fuzzy
msgid "I won't show discuss the content of each object, the documentation page does a great job about that.  Let's focus on the pagination aspect.  First, we passed the `page` query parameter, indicating which page we want.  Generally, when you retrieve a page, the API provides a way to know if there is a next page (a special field in the JSON document, or HTTP header), but the Punk API does not provide any hint.  So, to retrieve all the beers, we need to invoke the service for page 1, 2, 3... until the returned JSON array is empty."
msgstr "各オブジェクトの内容については、ドキュメントのページに詳しく書かれていますので、ここでは触れません。ここでは、ページネーションについて説明します。まず、どのページを取得するかを示す `page` というクエリパラメータを渡しました。一般的に、あるページを取得する際、APIは次のページがあるかどうかを知るための方法（JSONドキュメントの特別なフィールド、またはHTTPヘッダ）を提供しますが、Punk APIは何のヒントも提供しません。そのため、すべてのビールを取得するためには、返されるJSON配列が空になるまで、1ページ目、2ページ目、3ページ目...とサービスを呼び出す必要があります。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:50
#, fuzzy
msgid "In an imperative world, to retrieve all the beers, you would do something like this:"
msgstr "命令型の世界では、すべてのビールを取得するには、次のようにします。"

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:61
#, no-wrap
msgid ""
"List<Beer> beers = ...;\n"
"int page = 1;\n"
"List<Beer> batch = ...\n"
"do {\n"
"  batch= getBeersFromPage(page);\n"
"  beers.addAll(batch);\n"
"  page = page + 1;\n"
"} while (! batch.isEmpty());\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:64
#, fuzzy
msgid "How can we achieve the same in a reactive manner and build a stream of beer?"
msgstr "いかにリアクティブに同じことを実現し、ビールの流れを作ることができるか。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:66
#, fuzzy
msgid "image:/assets/images/posts/mutiny-pagination/mutiny-pagination.png[]"
msgstr "image:/assets/images/posts/mutiny-pagination/mutiny-pagination.png[alt=mutiny pagination]"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:68
#, fuzzy
msgid "Let's proceed step by step."
msgstr "順を追って進めていきましょう。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:70
#, fuzzy
msgid "## Retrieving a single page"
msgstr "単一ページの取得"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:73
#, fuzzy
msgid "First, we need to see how we can retrieve a single page.  I'm going to use the Vert.x Web Client, but you can use any reactive HTTP clients providing a Mutiny API."
msgstr "まず、どのようにして単一のページを取得するかを確認する必要があります。ここではVert.x Web Clientを使用しますが、Mutiny APIを提供する任意のリアクティブHTTPクライアントを使用することができます。"

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:82
#, no-wrap
msgid ""
"// Create the client\n"
"WebClient client = WebClient.create(vertx, new WebClientOptions()\n"
"      .setDefaultHost(\"api.punkapi.com\")\n"
"      .setDefaultPort(443)\n"
"      .setSsl(true)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:87
#, no-wrap
msgid ""
"// Retrieve the first page\n"
"Uni<List<Beer>> uni = client.get(\"/v2/beers?page=1\")\n"
"      .send()\n"
"      .onItem().transform(Pagination::toListOfBeer);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:91
#, fuzzy
msgid "This snippet creates the web client.  Then, we use that client and retrieve the first page."
msgstr "このスニペットは、ウェブクライアントを作成します。そして、そのクライアントを使って、最初のページを取得します。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:93
#, fuzzy
msgid "When we receive the result (`onItem`), we transform the JSON array into a list of beers."
msgstr "結果( `onItem`)を受け取ると、JSON配列をビールのリストに変換します。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:95
#, fuzzy
msgid "Let's extract this code in a method and take the page number as parameter:"
msgstr "このコードをメソッドに展開して、ページ番号をパラメータとして受け取りましょう。"

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:103
#, no-wrap
msgid ""
"private static Uni<List<Beer>> getPage(WebClient client, int page) {\n"
"    return client.get(\"/v2/beers?page=\" + page)\n"
"            .send()\n"
"            .onItem().transform(Pagination::toListOfBeer);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:106
#, fuzzy
msgid "So far, so good."
msgstr "ここまではいいんだけどね。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:108
#, fuzzy
msgid "## Retrieving multiple page"
msgstr "複数ページの取得"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:111
#, fuzzy
msgid "So, now, we know how to retrieve a single page and extract the items from it.  We just need to repeat this operation for every page, and provide a stream."
msgstr "これで、1つのページを取得し、そこからアイテムを抽出する方法がわかりました。あとは、この操作をすべてのページに対して繰り返し、ストリームを提供すればよいのです。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:116
#, fuzzy
msgid "Mutiny provides a method to create a `Multi` by repeating multiple times a `Uni`.  Under the hood, it calls a method returning a `Uni` and subscribe on it.  But we need to make _progress_, and pass the current page.  Mutiny offers the possibility to store a state in order to let the method creating the `Uni` increments the page number:"
msgstr "Mutinyは、 `Uni` を複数回繰り返すことで、 `Multi` を作成する方法を提供します。フードの下では、 `Uni` を返すメソッドを呼び出し、それを購読しています。しかし、私たちは現在のページを渡すために _前進_する必要があります。Mutinyは、 `Uni` を作成するメソッドがページ番号を増やせるように、状態を保存する可能性を提供します。"

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:122
#, no-wrap
msgid ""
"Multi.createBy().repeating().uni(AtomicInteger::new, page ->\n"
"\t\tgetPage(client, page.incrementAndGet())\n"
")\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:127
#, fuzzy
msgid "This code above creates a stream with the item emitted by the `Unis` returned by the `getPage` method.  We increment the page number (stored in an `AtomicInteger`) every time.  So, it retrieves the page 1, 2, 3 ... and every time emits the received `List<Beer>` downstream."
msgstr "上のコードでは、 `getPage` メソッドで返された `Unis` が発するアイテムでストリームを作成しています。ページ番号（ `AtomicInteger` に格納されている）を毎回インクリメントしています。つまり、1、2、3...とページを取得し、その都度、受信した `List<Beer>` を下流に向かって放出しています。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:130
#, fuzzy
msgid "However, at some point, we must stop.  As we said earlier, we can stop when the returned list is empty:"
msgstr "しかし、ある時点で停止しなければなりません。先に述べたように、返されたリストが空になった時点でやめればいいのです。"

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:137
#, no-wrap
msgid ""
"Multi<List<Beer>> multi = Multi.createBy().repeating().uni(AtomicInteger::new, page ->\n"
"     getPage(client, page.incrementAndGet())\n"
")\n"
".until(List::isEmpty);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:142
#, fuzzy
msgid "The `until` clause indicates when the iteration must be stopped.  It receives the retrieved list (produced by `getPage`), and when this list is empty, stops the repetition.  If the list still contains beers, it retrieves the next page."
msgstr "`until` 句は、繰り返しをいつ止めなければならないかを示します。 `getPage` によって作成された）検索されたリストを受け取り、このリストが空になると、繰り返しを停止します。リストにまだビールが含まれている場合は、次のページを取得します。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:144
#, fuzzy
msgid "## Unpacking the beers"
msgstr "ビールの開封"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:148
#, fuzzy
msgid "We now have a stream of list, and each list contain a set of beers.  We are almost there, but Alex wants a stream of beer.  So we need to unpack the beers."
msgstr "これで、リストの流れができ、それぞれのリストにはビールのセットが入っています。これでほぼ完成ですが、Alexはビールのストリームを欲しがっています。そこで、ビールを解凍する必要があります。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:150
#, fuzzy
msgid "The first approach to achieve this uses `transformToMultiAndConcatenate`, i.e. for each list create a new `multi` with the contained beers and concatenate these `multis`:"
msgstr "これを実現するための最初のアプローチは、 `transformToMultiAndConcatenate` を使用します。すなわち、各リストについて、含まれるビールを含む新しい `multi` を作成し、これらの `multis` を連結します。"

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:158
#, no-wrap
msgid ""
"Multi<Beer> multi = Multi.createBy().repeating().uni(AtomicInteger::new, page ->\n"
"        getPage(client, page.incrementAndGet())\n"
"    )\n"
"    .until(List::isEmpty)\n"
"    .onItem().transformToMultiAndConcatenate(l -> Multi.createFrom().iterable(l));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:161
#, fuzzy
msgid "Wondering about `concatenate`? Check out this https://quarkus.io/blog/mutiny-redis/[other blog post]"
msgstr "Wondering about `concatenate`?こちらの link:https://quarkus.io/blog/mutiny-redis/[ブログ記事]をご覧ください。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:163
#, fuzzy
msgid "image:/assets/images/posts/mutiny-pagination/disjoint.png[]"
msgstr "image:/assets/images/posts/mutiny-pagination/disjoint.png[alt=disjoint]"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:165
#, fuzzy
msgid "Because this is a common operation, Mutiny provides the `disjoint` method doing exactly the same:"
msgstr "これは一般的な操作なので、Mutinyは全く同じことを行う `disjoint` メソッドを提供しています。"

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:173
#, no-wrap
msgid ""
"Multi<Beer> multi = Multi.createBy().repeating().uni(AtomicInteger::new, page ->\n"
"    getPage(client, page.incrementAndGet())\n"
")\n"
"  .until(List::isEmpty)\n"
"  .onItem().disjoint();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:176
#, fuzzy
msgid "And we are done!"
msgstr "そして、私たちは終わりました。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:178
#, fuzzy
msgid "## The benefits of reactive"
msgstr "リアクティブのメリット"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:181
#, fuzzy
msgid "We have our stream, it's time to use it! Let's, for example, retrieve the first 10 beers with \"IPA\" (let's be trendy) in their description:"
msgstr "ストリームを手に入れたからには、それを使う時が来ました。例えば、説明文に「IPA」（流行りにのって）が含まれる最初の10種類のビールを検索してみましょう。"

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:187
#, no-wrap
msgid ""
"multi\n"
"    .transform().byFilteringItemsWith(beer -> beer.description.contains(\"IPA\"))\n"
"    .transform().byTakingFirstItems(10);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:193
#, fuzzy
msgid "The advantage of our stream is that we won't retrieve every page.  As soon as we have enough beers, we stop the repetition.  How? Because it informs the upstream that it does not need more items (*cancellation*) and that stops the repetition.  So, retrieving items from paginated APIs this way can reduce the number of requests and, as a consequence the load on the remote service."
msgstr "私たちのストリームの利点は、すべてのページを取得しないことです。十分なビールがあれば、すぐに繰り返しを止めます。どうやって？なぜなら、これ以上アイテムを必要としないことをアップストリームに通知し *（キャンセル）*、それによって繰り返しが止まるからです。このように、ページングされたAPIからアイテムを取得することで、リクエスト数を減らし、結果的にリモートサービスの負荷を軽減することができます。"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:195
#, fuzzy
msgid "## Feel thirsty?"
msgstr "喉の渇きを感じる？"

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:198
#, fuzzy
msgid "Wanna try this code, checkout this https://gist.github.com/cescoffier/18a326a5c057392bec54d95ec5a06ca6[gist].  You can run it immediately with jbang:"
msgstr "このコードを試してみたい方は、この link:https://gist.github.com/cescoffier/18a326a5c057392bec54d95ec5a06ca6[gist]をチェックアウトしてください。jbangですぐに実行できます。"

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:202
#, no-wrap
msgid "jbang https://gist.github.com/cescoffier/18a326a5c057392bec54d95ec5a06ca6\n"
msgstr ""

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: 'Handling paginated APIs with Mutiny'\n"
#~ "date: 2020-09-15\n"
#~ "tags: reactive rest mutiny http pagination\n"
#~ "synopsis: How to use API using pagination with Mutiny\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: 'MutinyでページングされたAPIを扱う'\n"
#~ "date: 2020-09-15\n"
#~ "tags: reactive rest mutiny http pagination\n"
#~ "synopsis: Mutinyでページネーションを使ってAPIを利用する方法\n"
#~ "author: cescoffier\n"
#~ "---\n"
