# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "クスコフィエ"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "2020-09-29"
msgstr "2020-09-29"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "Running concurrent asynchronous actions with Mutiny"
msgstr "Mutinyで非同期アクションを同時進行させる"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny async"
msgstr "リアクティブミューティニー非同期"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "Concurrent asynchronous actions with Mutiny"
msgstr "Mutinyによる非同期アクションの並行処理"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:13
#, fuzzy
msgid "This week, I've been asked about a widespread use case around concurrency.  This user wanted to call two microservices _in parallel_, and when both results are received, join them and continue the processing.  Basically, the following pattern:"
msgstr ""
"今週は、コンカレンシーにまつわる広く使われているユースケースについて聞かれま"
"した。このユーザーは、2つのマイクロサービスを _並行して_呼び出し、両方の結果"
"を受け取ったら、それらを結合して処理を続けたいと考えていました。基本的には次"
"のようなパターンです。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:15
#, fuzzy
msgid "image:/assets/images/posts/mutiny-concurrent-uni/pattern.png[width=50%]"
msgstr ""
"image:/assets/images/posts/mutiny-concurrent-uni/pattern.png[alt=pattern]"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:18
#, fuzzy
msgid "In a non-reactive approach, both calls would block the caller thread, and, except if you use a worker thread pool, the calls are not concurrent.  Even if you use a worker thread pool, these threads are likely blocked, consuming resources for nothing."
msgstr ""
"非反応性のアプローチでは、どちらの呼び出しも呼び出し元のスレッドをブロックし"
"てしまい、ワーカースレッドプールを使用している場合を除き、これらの呼び出しは"
"同時実行されません。ワーカースレッドプールを使用している場合でも、これらのス"
"レッドはブロックされ、無駄にリソースを消費している可能性があります。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:20
#, fuzzy
msgid "But no worries, Quarkus reactive nature and Mutiny have everything to handle this scenario."
msgstr "しかし、心配ありません。Quarkusの反応性とMutinyはこのシナリオに対応するための"
"すべてを持っています。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:22
#, fuzzy
msgid "## Let's call two services"
msgstr "2つのサービスを呼んでみましょう。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:27
#, fuzzy
msgid "In this post, I'm going to use the Vert.x Web Client, a reactive HTTP client.  It leverages non-blocking I/O to be highly performant and truly non-blocking.  It does not rely on a hidden thread pool.  You can also use the Quarkus Rest Client, but, at the moment, it still uses worker threads."
msgstr ""
"この記事では、リアクティブなHTTPクライアントであるVert.x Web "
"Clientを使用します。ノンブロッキングI/Oを活用し、高いパフォーマンスと真のノン"
"ブロッキングを実現しています。隠れたスレッドプールに依存していません。"
"Quarkus Rest Clientを使用することもできますが、現時点ではまだワーカースレッド"
"を使用しています。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:30
#, fuzzy
msgid "No matter which client we use, we need some remote services to call.  Let's use:"
msgstr "どのクライアントを使うにしても、呼び出すためのリモートサービスが必要です。使"
"ってみましょう。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:32
#, fuzzy
msgid "https://programming-quotes-api.herokuapp.com/ - to get a quote about programming"
msgstr "https://programming-quotes-api.herokuapp.com/ - "
"プログラミングに関するお問い合わせ"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:33
#, fuzzy
msgid "https://api.chucknorris.io/ - to get a quote about _Chuck Norris_"
msgstr "https://api.chucknorris.io/ - "
"_チャック・ノリス_についてのお見積りをご希望の方へ"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:38
#, fuzzy
msgid "First thing first, let's see the code required to retrieve our quotes: While both services are similar, the structure of the response differs a little bit.  So we end up with:"
msgstr ""
"まず最初に、見積もりを取得するために必要なコードを見てみましょう。どちらのサ"
"ービスも似ていますが、レスポンスの構造が少しだけ異なります。つまり、最終的に"
"は次のようになります。"

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:47
#, no-wrap
msgid ""
"private static Uni<String> getProgrammingQuote(WebClient client) {\n"
"    return client.getAbs(PROGRAMMING_QUOTE)\n"
"            .as(BodyCodec.jsonObject())\n"
"            .send()\n"
"            .onItem().transform(r -> r.body().getString(\"en\") + \" (\" + r.body().getString(\"author\") + \")\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:54
#, no-wrap
msgid ""
"private static Uni<String> getChuckNorrisQuote(WebClient client) {\n"
"    return client.getAbs(CHUCK_NORRIS_QUOTE)\n"
"            .as(BodyCodec.jsonObject())\n"
"            .send()\n"
"            .onItem().transform(r -> r.body().getString(\"value\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:62
#, fuzzy
msgid "These two methods receive a `WebClient`, invoke the services, retrieve the JSON responses, and extract them.  They both return a `Uni`.  So they are asynchronous.  The result (the quote) is provided _later_ when available.  Also, returning a `Uni` means that the services will only be invoked when someone subscribes to the returned `Uni`.  If you subscribe multiple times, you will call the service multiple times."
msgstr ""
"これらの2つのメソッドは、 `WebClient` を受け取り、サービスを起動し、JSON "
"レスポンスを取得し、抽出します。また、どちらも `Uni` "
"を返します。つまり、非同期なのです。結果（引用文）は、 "
"_後で_利用可能になったときに提供されます。また、 `Uni` を返すということは、"
"誰かが返された `Uni` を購読したときにのみ、サービスが起動されるということです"
"。複数回購読した場合は、複数回サービスを呼び出すことになります。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:64
#, fuzzy
msgid "## Combining Unis"
msgstr "ユニを組み合わせる"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:67
#, fuzzy
msgid "So far, we have two methods to call our services.  But we want to call them concurrently, as depicted above."
msgstr "これまでのところ、サービスを呼び出すための2つのメソッドがあります。しかし、上"
"の図のように、これらを同時に呼び出したいと思います。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:69
#, fuzzy
msgid "Mutiny provides a way to _combine_ items produced by `Unis`:"
msgstr "Mutinyは、 `Unis` で作られたアイテム _を組み合わせる_方法を提供します。"

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:75
#, no-wrap
msgid ""
"Uni<Tuple2<String, String>> tuple = Uni.combine().all()\n"
"    .unis(getProgrammingQuote(client), getChuckNorrisQuote(client))\n"
"    .asTuple();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:79
#, fuzzy
msgid "When someone subscribes to the `Uni tuple`, it subscribes to the `getProgrammingQuote(client)` and `getChuckNorrisQuote(client)` `Unis`, which invoke the services.  So the requests are emitted, and the services are invoked concurrently."
msgstr ""
"誰かが `Uni tuple` を購読すると、サービスを呼び出す "
"`getProgrammingQuote(client)` と `getChuckNorrisQuote(client)` `Unis` を購読"
"します。つまり、リクエストの発行とサービスの呼び出しが同時に行われるのです。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:81
#, fuzzy
msgid "When both responses are available, it combines them into a _Tuple_, a simple structure carrying multiple items."
msgstr "両方の回答がある場合は、それらを "
"_タプル_（複数の項目を持つ単純な構造）にまとめます。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:85
#, fuzzy
msgid "In other words, concurrently calling our services is pretty straightforward.  Just create the `Unis` representing the services or the asynchronous action you want to achieve and combine them using `Uni.combine().all()` You can decide to combine the results using _tuples_ or to use a combinator function."
msgstr ""
"つまり、サービスを同時に呼び出すことは非常に簡単です。"
"実現したいサービスや非同期アクションを表す `Unis` を作成し、 `Uni.combine()."
"all()` を使って組み合わせるだけです。結果を _タプル_を使って組み合わせるか、"
"コンビネータ関数を使うかを決めることができます。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:87
#, fuzzy
msgid "## Putting everything together"
msgstr "すべてをまとめて"

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:92
#, no-wrap
msgid ""
"// Create a Web Client\n"
"WebClient client = WebClient.create(vertx);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:97
#, no-wrap
msgid ""
"// Combine the result of our 2 Unis in a tuple\n"
"Uni.combine().all()\n"
"        .unis(getProgrammingQuote(client), getChuckNorrisQuote(client))\n"
"        .asTuple()\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:104
#, no-wrap
msgid ""
"        // Subscribe (which will trigger the calls)\n"
"        .subscribe().with(tuple -> {\n"
"    System.out.println(\"Programming Quote: \" + tuple.getItem1());\n"
"    System.out.println(\"Chuck Norris Quote: \" + tuple.getItem2());\n"
"});\n"
"----        \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:107
#, no-wrap
msgid ""
"That's it! \n"
"If you want to see this code in action, check this https://gist.github.com/cescoffier/1ed68bef12b798529e10350f77686e9a[gist]. You even can run it directly with JBang:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:109
#, no-wrap
msgid "[source,bash]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:111
#, fuzzy
msgid "jbang https://gist.github.com/cescoffier/1ed68bef12b798529e10350f77686e9a"
msgstr ""
"jbang https://gist.github.com/cescoffier/1ed68bef12b798529e10350f77686e9a"

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:113
#, no-wrap
msgid "Enjoy!\n"
msgstr ""

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: 'Concurrent asynchronous actions with Mutiny'\n"
#~ "date: 2020-09-29\n"
#~ "tags: reactive mutiny async\n"
#~ "synopsis: Running concurrent asynchronous actions with Mutiny\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: 「Mutinyを使った非同期アクションの同時進行\n"
#~ "date: 2020-09-29\n"
#~ "tags: reactive mutiny async\n"
#~ "synopsis: Mutinyで非同期の同時アクションを実行する\n"
#~ "author: cescoffier\n"
#~ "---\n"
