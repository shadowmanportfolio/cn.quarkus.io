# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "クスコフィエ"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "2020-09-08"
msgstr "2020-09-08"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "How to combine reactive messaging, Kafka and the Rest client"
msgstr "リアクティブメッセージング、Kafka、Restクライアントをどのように組み合わせるか"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "reactive kafka rest mutiny http"
msgstr "リアクティブ カフカ レス トミューティニー http"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "Combining Apache Kafka and the Rest client"
msgstr "Apache KafkaとRestクライアントの組み合わせ"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:13
#, fuzzy
msgid "Another week, another interesting question.  This week, someone asks me about combining Kafka and the Rest Client.  That is a recurring subject, and most of the time, the goal is to achieve the following process:"
msgstr "今週も面白い質問がありました。今週は、KafkaとRest Clientの組み合わせについて聞かれています。それは繰り返しのテーマで、ほとんどの場合、次のようなプロセスを実現することが目的です。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:15
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[alt=kafka rest architecture]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:21
#, fuzzy
msgid "In other words, we want to call a remote service for each Kafka message we receive.  Therefore, we have a first topic (\"in\") containing the data we are consuming, for instance, \"transactions\".  Then, we have the central piece of the architecture: the processing component.  It consumes the incoming transactions, and for each of them, calls a remote service.  It also writes the response (produced by the remote service) to another Kafka topic \"out\"."
msgstr "つまり、Kafkaのメッセージを受け取るたびに、リモートサービスを呼び出したいのです。そのため、最初のトピック（「in」）には、消費するデータ（例えば「transaction」）を入れておきます。次に、このアーキテクチャの中心となる部分、すなわち処理コンポーネントがあります。処理コンポーネントは、入力されたトランザクションを消費し、それぞれのトランザクションに対して、リモートサービスを呼び出します。また、（リモートサービスが生成した）レスポンスを別のKafkaトピック「out」に書き込みます。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:24
#, fuzzy
msgid "Implementing this with Quarkus is straightforward, and that's what we will cover in this post.  Thanks to Reactive Messaging and the Rest Client, this should not take more than 20 lines of code!"
msgstr "これをQuarkusで実装するのは簡単で、この記事ではそれを説明します。Reactive MessagingとRest Clientのおかげで、20行以上のコードは必要ありません。"

#. type: Title ==
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:25
#, fuzzy, no-wrap
msgid "The Remote Service"
msgstr "リモートサービス"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:29
#, fuzzy
msgid "Let's start with the remote service.  Quarkus offers multiple ways to invoke a remote HTTP service, but let's use the Rest Client as it provides an excellent way to interact with HTTP services without having to handle the low-level details of HTTP."
msgstr "まずは、リモートサービスから始めましょう。Quarkusには、リモートのHTTPサービスを呼び出す複数の方法がありますが、ここではRest Clientを使用しましょう。Rest Clientは、HTTPの低レベルな詳細を処理することなく、HTTPサービスと対話する優れた方法を提供します。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:31
#, fuzzy
msgid "You can use any HTTP API, but to simplify, let's consider a straightforward remote service, something like:"
msgstr "どんなHTTP APIでも使用できますが、簡単にするために、次のようなわかりやすいリモートサービスを考えてみましょう。"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:38
#, no-wrap
msgid ""
"@RegisterRestClient(configKey = \"transaction-service\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public interface TransactionService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:42
#, no-wrap
msgid ""
"    @Path(\"/transactions\")\n"
"    @POST \n"
"    TransactionResult postSync(Transaction transaction);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:46
#, no-wrap
msgid ""
"    @Path(\"/transactions\")\n"
"    @POST \n"
"    Uni<TransactionResult> postAsync(Transaction transaction);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:48
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:92
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:116
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:147
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:56
#, fuzzy
msgid "This service contains two methods calling the same HTTP endpoint.  The first one is synchronous, and so blocks the caller thread until the response is received.  The second is asynchronous, and the returned `Uni` gets the response when received.  In this case, the caller thread is not blocked and can do something else.  We are going to see how to use these methods later, but first, a bit of configuration.  In the `application.properties` add:"
msgstr "このサービスには、同じHTTPエンドポイントを呼び出す2つのメソッドが含まれています。1つ目のメソッドは同期型で、レスポンスを受信するまで呼び出し元のスレッドをブロックしています。2つ目は非同期型で、返された `Uni` は受信時にレスポンスを取得します。この場合、呼び出し側のスレッドはブロックされず、他のことができます。これらのメソッドの使い方は後ほど説明しますが、その前にちょっとした設定が必要です。 `application.properties` に追加します。"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:61
#, no-wrap
msgid ""
"# Configure the transaction-service (rest client)\n"
"transaction-service/mp-rest/url=http://localhost:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:65
#, fuzzy
msgid "Of course, update the URL.  The https://quarkus.io/guides/rest-client[https://quarkus.io/guides/rest-client] guide gives more details about the usage and configuration of the Rest Client."
msgstr "もちろん、URLも更新します。 link:https://quarkus.io/guides/rest-client[https://quarkus.io/guides/rest-client]ガイドでは、Rest Clientの使用方法と設定について詳しく説明しています。"

#. type: Title ==
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:66
#, fuzzy, no-wrap
msgid "Invoking the service for each incoming transaction"
msgstr "受信トランザクションごとにサービスを呼び出す"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:73
#, fuzzy
msgid "Ok, we can call our service, but remember, we want to invoke it for every incoming transaction, and these transactions come from a Kafka topic.  With Reactive Messaging, there is no need to handle Kafka right now.  We can focus on the logic.  Let's say we have a *channel* (a stream of data), in which to transit our transactions.  We call this first channel `in`."
msgstr "これでサービスを呼び出すことができましたが、覚えておいてほしいのは、入ってくるトランザクションごとにサービスを呼び出したいということです。Reactive Messagingでは、今のところKafkaを扱う必要はありません。ロジックに集中することができます。トランザクションを転送するための *チャンネル*（データのストリーム）があるとします。この最初のチャンネルを `in` と呼びます。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:77
#, fuzzy
msgid "We also want to write the responses from the remote service into another Kafka topic.  Again, no need to handle Kafka right now.  Let's say we write the responses into a channel named `out`."
msgstr "また、リモートサービスからのレスポンスを別のKafkaトピックに書き込みたいと思います。繰り返しになりますが、今はKafkaを扱う必要はありません。レスポンスを `out` という名前のチャンネルに書き込むとしましょう。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:79
#, fuzzy
msgid "So, we have the following (incomplete) code:"
msgstr "そのため、以下のような（不完全な）コードになっています。"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:84
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:102
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:134
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class TransactionProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:90
#, no-wrap
msgid ""
"    @Incoming(\"in\") // The first channel - we read from it\n"
"    @Outgoing(\"out\") // The second channel - we write to it\n"
"    public TransactionResult sendToTransactionService(Transaction transaction) {\n"
"       // Need to call our service here\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:97
#, fuzzy
msgid "`@Incoming` configures the read channel.  `@Outgoing` configures the written channel.  But, something is missing... we need to call our remote service:"
msgstr "`@Incoming` は読み込みチャンネルを設定しています。 `@Outgoing` は書き込みチャンネルを設定しています。しかし、何かが足りません...リモートサービスを呼び出す必要があります。"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:104
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:136
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(\"TransactionProcessor\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:106
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:138
#, no-wrap
msgid "    @Inject @RestClient TransactionService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:114
#, no-wrap
msgid ""
"    @Incoming(\"in\")\n"
"    @Outgoing(\"out\")\n"
"    @Blocking\n"
"    public TransactionResult sendToTransactionService(Transaction transaction) {\n"
"        LOGGER.infof(\"Sending %s transaction service\", transaction);\n"
"        return service.postSync(transaction);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:120
#, fuzzy
msgid "First, we inject the Rest Client.  Then, we just invoke it in our method."
msgstr "まず、Rest Clientを注入します。そして、メソッドの中でそれを呼び出すだけです。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:125
#, fuzzy
msgid "You may wonder about `@Blocking`.  With reactive messaging, you need to indicate when you are using blocking code, as by default, it uses an event loop architecture.  While convenient, you should not abuse `@Blocking`, as it relies on a thread pool limiting your concurrency.  But, it keeps your logic synchronous."
msgstr "`@Blocking` について疑問に思うかもしれません。リアクティブ・メッセージングでは、デフォルトではイベント・ループ・アーキテクチャを使用しているため、ブロッキング・コードを使用する場合には、その旨を示す必要があります。便利ではありますが、 `@Blocking` を乱用してはいけません。なぜなら、スレッドプールに依存して同時実行を制限しているからです。しかし、ロジックの同期性は保たれます。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:127
#, fuzzy
msgid "### Using Asynchronous operations"
msgstr "非同期操作の利用"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:129
#, fuzzy
msgid "We can get rid of `@Blocking` annotation by using the second method provided by the `TransactionService`: `postAsync:`"
msgstr "`@Blocking` のアノテーションは、 `TransactionService` が提供する第二の方法を使うことで解消できます。 `postAsync:`"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:145
#, no-wrap
msgid ""
"    @Incoming(\"in\")\n"
"    @Outgoing(\"out\")\n"
"    public Uni<TransactionResult> sendToTransactionService(Transaction transaction) {\n"
"        LOGGER.infof(\"Sending %s transaction service\", transaction);\n"
"        return service.postAsync(transaction);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:152
#, fuzzy
msgid "Using the *async* variant of the `post` method allows us to remove `@Blocking`.  We return the `Uni` directly.  When that `Uni` receives the remote service's response, it writes the value to the `out` channel."
msgstr "`post` メソッドの *async*バリアントを使用すると、 `@Blocking` を削除することができます。 `Uni` を直接返します。その `Uni` がリモートサービスのレスポンスを受信すると、その値を `out` チャンネルに書き込みます。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:154
#, fuzzy
msgid "### Mapping channel to Kafka"
msgstr "チャネルをKafkaにマッピング"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:160
#, fuzzy
msgid "So far, so good.  It's time to connect our code with Kafka.  With Reactive Messaging, we map channels to _connectors_, here Kafka.  So, we just need to configure the application to indicate that the `in` and `out` channels are Kafka topics.  Once again, edit the `application.properties` file, and add:"
msgstr "ここまでは順調です。いよいよコードをKafkaに接続してみましょう。Reactive Messagingでは、チャンネルを _コネクタ_、ここではKafkaにマッピングします。そこで、 `in` と `out` のチャンネルが Kafka のトピックであることを示すために、アプリケーションを設定する必要があります。もう一度、 `application.properties` ファイルを編集して、以下を追加します。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:167
#, fuzzy
msgid "``` mp.messaging.incoming.in.connector=smallrye-kafka mp.messaging.incoming.in.topic=transactions mp.messaging.incoming.in.value.deserializer=org.acme.model.TransactionDeserializer mp.messaging.incoming.in.auto.offset.reset=earliest mp.messaging.incoming.in.enable.auto.commit=false"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:172
#, fuzzy
msgid "mp.messaging.outgoing.out.connector=smallrye-kafka mp.messaging.outgoing.out.topic=output mp.messaging.outgoing.out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer ```"
msgstr "mp.messaging.outgoing.out.connector=smallry-kafka mp.messaging.outgoing.out.topic=output mp.messaging.outgoing.out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer ```"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:177
#, fuzzy
msgid "The first block is about the `in` channel.  It's connected to the `transactions` Kafka topic.  The data is deserialized with a https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[custom deserializer].  The last other properties disable the auto-commit (Reactive Messaging is handling commits for you) and read the data since the last committed offset."
msgstr "最初のブロックは、 `in` のチャンネルについてです。 `transactions` Kafkaトピックに接続されています。データは link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[カスタムデシリアライザ]でデシリアライズされます。最後の他のプロパティは、自動コミットを無効にし（Reactive Messagingがコミットを処理しています）、最後にコミットされたオフセット以降のデータを読み取ります。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:181
#, fuzzy
msgid "The second block configures the `out` channel.  We connect it with the `output` Kafka topic and configure the value serializer.  For this simple example, we write the data as JSON."
msgstr "2つ目のブロックでは、 `out` のチャンネルを設定します。 `output` Kafkaトピックと接続し、値のシリアライザーを設定します。この簡単な例では、データをJSONとして書き込みます。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:183
#, fuzzy
msgid "So, when a transaction is written to the Kafka `transaction` topic, it gets received by our processing component, sent to the remote service, and the result is written to the `output` Kafka topic:"
msgstr "つまり、トランザクションがKafka `transaction` トピックに書き込まれると、それを処理コンポーネントが受け取り、リモートサービスに送信し、その結果がKafka `output` トピックに書き込まれるのです。"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:190
#, no-wrap
msgid ""
"2020-08-27 10:04:44,141 INFO  [TransactionProcessor] (vert.x-eventloop-thread-0) Sending Transaction{name='MacroHard', amount=20} transaction service\n"
"2020-08-27 10:04:44,196 INFO  [TransactionResource] (executor-thread-2) Handling transaction MacroHard / 20\n"
"2020-08-27 10:04:44,240 INFO  [TransactionProcessor] (vert.x-eventloop-thread-0) Sending Transaction{name='BlueHat', amount=10} transaction service\n"
"2020-08-27 10:04:44,245 INFO  [TransactionResource] (executor-thread-2) Handling transaction BlueHat / 10\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:193
#, fuzzy
msgid "If you look inside the `output` topic, you will see the `TransactionResult` flowing:"
msgstr "`output` トピックの中を見てみると、 `TransactionResult` が流れています。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:195
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/output.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/output.png[alt=output]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:197
#, fuzzy
msgid "### We are done!"
msgstr "私たちは終わりました。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:199
#, fuzzy
msgid "With a few lines of code and a bit of configuration, we can read data from a Kafka topic, call a remote service, and write the result to another Kafka topic. Plain simple."
msgstr "数行のコードとちょっとした設定で、Kafkaトピックからデータを読み込み、リモートサービスを呼び出し、その結果を別のKafkaトピックに書き込むことができます。単純明快。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:202
#, fuzzy
msgid "Want to try by yourself? Check out the code in this https://github.com/cescoffier/quarkus-kafka-rest-client-demo[GitHub repository] and follow the instructions from the readme."
msgstr "自分で試してみたいと思いませんか？この link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo[GitHubリポジトリ]のコードをチェックして、readmeの指示に従ってください。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:204
#, fuzzy
msgid "Reactive Messaging and the Rest client contain other gems, check the related guides and documentation to learn more about them:"
msgstr "Reactive MessagingとRestクライアントには、他のジェムが含まれているので、関連するガイドやドキュメントを確認してください。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:206
#, fuzzy
msgid "https://quarkus.io/guides/rest-client[Using the Rest Client]"
msgstr "link:https://quarkus.io/guides/rest-client[Restクライアントの使用]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:207
#, fuzzy
msgid "https://quarkus.io/guides/kafka[Interacting with Kafka]"
msgstr "link:https://quarkus.io/guides/kafka[Kafkaとのインタラクション]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:207
#, fuzzy
msgid "https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/kafka/kafka.html[The Kafka Connector documentation]"
msgstr "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/kafka/kafka.html[Kafka コネクタのドキュメント]"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: 'Combining Apache Kafka and the Rest client'\n"
#~ "date: 2020-09-08\n"
#~ "tags: reactive kafka rest mutiny http\n"
#~ "synopsis: How to combine reactive messaging, Kafka and the Rest client\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: 'Apache KafkaとRestクライアントの組み合わせ'\n"
#~ "date: 2020-09-08\n"
#~ "tags: reactive kafka rest mutiny http\n"
#~ "synopsis: リアクティブメッセージング、Kafka、Restクライアントの組み合わせ方\n"
#~ "author: cescoffier\n"
#~ "---\n"
