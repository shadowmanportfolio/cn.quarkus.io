# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:1
#, fuzzy, no-wrap
msgid "cesarsaavedra"
msgstr "セサルサベドラ"

#. type: YAML Front Matter: date
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:1
#, fuzzy, no-wrap
msgid "2019-11-06"
msgstr "2019-11-06"

#. type: YAML Front Matter: layout
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: tags
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:1
#, fuzzy, no-wrap
msgid "user-story"
msgstr "ユーザストーリー"

#. type: Title =
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:1
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:10
#, fuzzy, no-wrap
msgid "GoWithFlow chooses Quarkus to deliver fast to production with minimal risk"
msgstr "GoWithFlowがQuarkusを選択し、リスクを最小限に抑えながら迅速に本番稼動を実現"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:13
#, fuzzy, no-wrap
msgid "GoWithFlow logo"
msgstr "GoWithFlowロゴ"

#. type: Target for macro image
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:13
#, no-wrap
msgid "Flow_id.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:16
#, fuzzy
msgid "GoWithFlow, a recent startup based out of Portugal, a spin-off from https://www.ceiia.com/[CEiiA] with https://www.galp.com/corp/en/[Galp] as a majority shareholder, provides integrated mobility solutions that can both provision end-to-end services to new mobility operators (eg. running a scooter-sharing network, managing an EV charging network, managing a fleet), but also gather data from other mobility operators, e.g.car-sharing operators, public transportation, etc, and thus provide a single access to mobility within a city. They consolidate all this data for consumption by citizens via their mobile phone apps that can help them locate the closest shared vehicle, or the most optimal way to get from point A to point B using multiple transportation options, for example."
msgstr "GoWithFlowは、 link:https://www.ceiia.com/[CEiiA]からスピンオフしたポルトガルの新興企業で、 link:https://www.galp.com/corp/en/[Galp]が大株主となっています。新しいモビリティ事業者にエンドツーエンドのサービスを提供するだけでなく、カーシェアリング事業者や公共交通機関など、他のモビリティ事業者のデータを収集し、都市内のモビリティへのアクセスを一本化する統合モビリティソリューションを提供しています。これらのデータを統合し、市民が携帯電話のアプリで利用できるようにすることで、最寄りの共有車の位置を確認したり、複数の交通手段を使ってA地点からB地点まで移動するための最適な方法を見つけたりすることができます。"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:18
#, fuzzy
msgid "They had a monolithic application server to support all their apps and their developers were experiencing 2 to 3-minutes deploy cycles to test any change made to the code. In addition, it was taking them 2 to 3 months to go to production every time there was a change, no matter how small it was, which required them to deploy the entire system - even parts that had not been modified at all - making the whole process highly risky."
msgstr "すべてのアプリケーションをサポートするためにモノリシックなアプリケーションサーバを使用しており、開発者はコードに加えられた変更をテストするために2～3分のデプロイサイクルを経験していました。さらに、どんなに小さな変更であっても、変更のたびに本番環境に移行するのに2〜3ヶ月かかっていました。そのため、まったく変更されていない部分も含めてシステム全体をデプロイする必要があり、プロセス全体が非常にリスクの高いものになっていました。"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:20
#, fuzzy
msgid "GoWithFlow is in the process of moving their workloads to containers on the cloud so cloud resource consumption costs are always top-of-mind and they are always trying to find better ways to optimize memory and compute usage on the cloud."
msgstr "GoWithFlowは、ワークロードをクラウド上のコンテナに移行している最中なので、クラウドのリソース消費コストは常に最重要課題であり、クラウド上のメモリとコンピュートの使用を最適化するためのより良い方法を常に模索しています。"

#. type: Title ==
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:21
#, fuzzy, no-wrap
msgid "Lower cloud resource consumption"
msgstr "クラウドリソースの消費量削減"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:24
#, fuzzy
msgid "When Raul Valdoleiros, Architect and DevOps Leader at GoWithFlow, first heard of Quarkus, he was extremely interested in its capabilities and features. They looked at other similar solutions in the market but after evaluating Quarkus, they decided to move forward with it. In comparing it with their existing monolithic solution, they realized the enormous memory savings introduced by Quarkus, 79% reduction in memory consumption under load, to be exact. The following table shows the results of their evaluation:"
msgstr "GoWithFlowのアーキテクト兼DevOpsリーダーであるRaul Valdoleirosが初めてQuarkusのことを聞いたとき、その機能や特徴に非常に興味を持ちました。市場にある他の類似したソリューションも検討しましたが、Quarkusを評価した後、Quarkusの導入を進めることにしました。既存のモノリシックソリューションと比較したところ、Quarkusによって導入された膨大なメモリの節約、正確には負荷時のメモリ消費量の79%削減を実感しました。次の表は、彼らの評価結果を示しています。"

#. type: Block title
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:25
#, fuzzy, no-wrap
msgid "Evaluation results"
msgstr "評価結果"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:27
#, fuzzy, no-wrap
msgid "Runtime mode"
msgstr "ランタイムモード"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:27
#, fuzzy, no-wrap
msgid "RAM at startup"
msgstr "起動時のRAM"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:29
#, fuzzy, no-wrap
msgid "RAM with load"
msgstr "負荷のかかるRAM"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:30
#, fuzzy, no-wrap
msgid "Monolith"
msgstr "モノリス"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:31
#, fuzzy, no-wrap
msgid "1.3 GB"
msgstr "1.3GB"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:33
#, fuzzy, no-wrap
msgid "1.5 GB"
msgstr "1.5GB"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:34
#, fuzzy, no-wrap
msgid "Quarkus JVM-mode"
msgstr "Quarkus JVM-mode"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:35
#, fuzzy, no-wrap
msgid "90 MB"
msgstr "90 MB"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:37
#, fuzzy, no-wrap
msgid "800 MB"
msgstr "800 MB"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:38
#, fuzzy, no-wrap
msgid "Quarkus native-mode"
msgstr "Quarkusのネイティブモード"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:39
#, fuzzy, no-wrap
msgid "11 MB"
msgstr "11 MB"

#. type: Table
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:40
#, fuzzy, no-wrap
msgid "320 MB"
msgstr "320 MB"

#. type: Title ==
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:42
#, fuzzy, no-wrap
msgid "Rich functionality with small learning curve"
msgstr "豊富な機能と少ない学習曲線"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:45
#, fuzzy
msgid "Besides its low memory consumption and lightning fast startup time, GoWithFlow selected Quarkus because of the rich set of frameworks, extensions, and rich functionality included with it. Raul describes Quarkus as _\"an incredible integration project that includes functionality, like MicroProfile, Vert.x, Kafka, and Keycloak, and many others.\"_"
msgstr "GoWithFlowがQuarkusを選択した理由は、メモリ消費量の少なさと起動時間の速さに加えて、Quarkusに含まれる豊富なフレームワーク、拡張機能、そして豊富な機能性にあります。Raulは、Quarkusを _\"MicroProfile、Vert.x、Kafka、Keycloakなどの機能を含む、信じられないほどの統合プロジェクト \"_と表現しています。"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:47
#, fuzzy
msgid "Because Quarkus extensions are composed of frameworks and functionality that GoWithFlow developers already knew, it was very easy for them to learn and quickly become productive. Although Quarkus introduces innovative technology for running Java on the cloud and containers, developers found it familiar and were able to pick it up with a small learning curve because all its extensions were familiar to them. Nevertheless, they did spend some time familiarizing themselves with aspects related to native images and features for which Quarkus did not yet have extensions."
msgstr "Quarkusの拡張機能は、GoWithFlowの開発者がすでに知っているフレームワークや機能で構成されているため、開発者にとって非常に習得しやすく、すぐに生産性を上げることができました。Quarkusは、クラウドやコンテナ上でJavaを実行するための革新的な技術を導入していますが、開発者はQuarkusのすべての拡張機能に慣れ親しんでいたため、わずかな学習曲線でQuarkusを使いこなすことができました。とはいえ、ネイティブイメージやQuarkusがまだ拡張機能を持っていない機能に関連する部分については、慣れるのに時間がかかりました。"

#. type: Title ==
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:48
#, fuzzy, no-wrap
msgid "The prototype"
msgstr "プロトタイプ"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:51
#, fuzzy
msgid "Once GoWithFlow selected Quarkus for Java development, they started a prototype project, which consisted of the implementation of 4 microservices. Using the Quarkus built-in testing harness, developers implemented automated tests, which are run during build time in both JVM and native modes. They also optimized the pipeline processes to avoid any human intervention during the deployment to production, where the microservices run in native mode. Integration testing consists of launching the application and testing the entire system through the web interface, which invokes the Quarkus microservices. All this work was accomplished by 3 developers from their Architecture team and GoWithFlow is very happy with what they have accomplished so far."
msgstr "GoWithFlowがJavaの開発にQuarkusを選択した後、4つのマイクロサービスの実装で構成されるプロトタイププロジェクトを開始しました。開発者は、Quarkusのビルトインテストハーネスを使用して、JVMモードとネイティブモードの両方でビルド時に実行される自動テストを実装しました。また、マイクロサービスがネイティブモードで実行される本番環境への展開時に、人間が介入しないようにパイプラインプロセスを最適化しました。統合テストでは、アプリケーションを起動し、Quarkusのマイクロサービスを呼び出すWebインターフェイスを通じてシステム全体をテストします。これらの作業はすべて、アーキテクチャチームの3人の開発者によって達成され、GoWithFlowはこれまでの成果に非常に満足しています。"

#. type: Title ==
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:52
#, fuzzy, no-wrap
msgid "Developer Productivity"
msgstr "開発者の生産性"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:55
#, fuzzy
msgid "GoWithFlow had been running their application in a monolithic application server. This meant that they had to roll out the entire application to production even if a small change had been applied to it. Besides being time consuming with releases taking 2 to 3 months, they felt that this was risky because they had to constantly release code that hadn’t been modified. In addition, developers had to wait 2 to 3 minutes to see their changes while they waited for the deployment of their changes to the application server. These lengthened the development process, which negatively impacted developer productivity and their ability to innovate and stay ahead of the competition. They worked on speeding up their development process and a key element that helped them accomplish this was the container-first approach of Quarkus. Now, they no longer have to wait months for production releases. In addition, developers can now use Quarkus live coding capabilities to test their source code changes immediately, which saves a lot of development and troubleshooting time, as described by Raul _“live coding is one of Quarkus best features if not the best one.”_"
msgstr "GoWithFlowは、自社のアプリケーションをモノリシックなアプリケーションサーバで運用していました。つまり、小さな変更を加えただけでも、アプリケーション全体を本番環境に展開しなければならなかったのです。リリースには2〜3ヶ月かかる上に、変更されていないコードを常にリリースしなければならないため、リスクが大きいと感じていました。さらに、開発者は自分が変更した箇所がアプリケーションサーバーにデプロイされるのを2〜3分待たなければならない。これらにより、開発プロセスが長くなり、開発者の生産性や、革新して競争に打ち勝つ能力に悪影響を与えていました。彼らは開発プロセスの高速化に取り組みましたが、これを達成するための重要な要素は、Quarkusのコンテナファーストのアプローチでした。今では、本番リリースを何ヶ月も待つ必要はありません。さらに、開発者はQuarkusのライブコーディング機能を使用して、ソースコードの変更をすぐにテストできるようになり、開発やトラブルシューティングの時間が大幅に短縮されました。"

#. type: Title ==
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:56
#, fuzzy, no-wrap
msgid "Future plans"
msgstr "今後の予定"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:59
#, fuzzy
msgid "GoWithFlow currently delivers every week to production and are working on optimizing their development process with the goal of achieving continuous deployment in the future. As part of this work, they also plan to continue to break their monolith into Quarkus-based microservices by having the entire development team dedicated to this effort, a total of 10 developers. This team will also continue to develop new functionality in Quarkus."
msgstr "GoWithFlowは現在、毎週本番配信を行っていますが、将来的には継続的なデプロイを実現することを目標に、開発プロセスの最適化に取り組んでいます。また、この作業の一環として、総勢10名の開発チームがこの作業に専念することで、モノリスをQuarkusベースのマイクロサービスに分解する作業を継続する予定です。このチームは、Quarkusの新機能の開発も継続して行います。"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:61
#, fuzzy
msgid "_\"Quarkus including MicroProfile was very important to us\"_ Raul mentions when referring to their use of MicroProfile Health, MicroProfile Config, MicroProfile Fault Tolerance and MicroProfile Rest Client extensions. In the future, they plan to use MicroProfile OpenTracing to visualize requests that traverse different microservices and this is a key functionality to them."
msgstr "Raul氏は、MicroProfile Health、MicroProfile Config、MicroProfile Fault Tolerance、MicroProfile Rest Clientエクステンションの使用について、 _「QuarkusにMicroProfileが含まれていることは、我々にとって非常に重要でした」と_述べています。将来的には、MicroProfile OpenTracingを使用して、異なるマイクロサービスを横断するリクエストを可視化することを計画しており、これは彼らにとって重要な機能です。"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:63
#, fuzzy
msgid "GoWithFlow is happy with what they have accomplished so far with Quarkus running in production in native mode and continue to collaborate with the community to foster its innovation."
msgstr "GoWithFlowは、ネイティブモードで本番稼動しているQuarkusでこれまでに達成したことに満足しており、その革新性を育むためにコミュニティとの共同作業を続けています。"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:65
#, fuzzy
msgid "For more information on Quarkus:"
msgstr "Quarkusの詳細については、こちらをご覧ください。"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:67
#, fuzzy
msgid "Quarkus website: http://quarkus.io"
msgstr "Quarkusウェブサイト http://quarkus.io"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:68
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "Quarkus GitHubプロジェクト: https://github.com/quarkusio/quarkus"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:69
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "Quarkus Twitter: https://twitter.com/QuarkusIO"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:70
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "Quarkusチャット https://quarkusio.zulipchat.com/"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:71
#, fuzzy
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Quarkusメーリングリスト: https://groups.google.com/forum/#!forum/quarkus-dev"

#. type: Plain text
#: upstream/_posts/2019-11-06-gowithflow-chooses-quarkus-to-deliver-fast-to-production.adoc:72
#, fuzzy
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr "link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Quarkusを利用する4つの理由]"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: GoWithFlow chooses Quarkus to deliver fast to production with minimal risk\n"
#~ "date: 2019-11-06\n"
#~ "tags: user-story\n"
#~ "author: cesarsaavedra\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: GoWithFlowがQuarkusを選択し、リスクを最小限に抑えながら迅速に本番稼動を実現\n"
#~ "date: 2019-11-06\n"
#~ "tags: user-story\n"
#~ "author: cesarsaavedra\n"
#~ "---\n"
