# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: 2022-04-30 17:12+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, no-wrap
msgid "2021-01-19"
msgstr "2021-01-19"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, no-wrap
msgid "How to build a Quarkus application using Apache Kafka in less than 10 minutes"
msgstr "Apache Kafkaを使用したQuarkusアプリケーションを10分以内に構築する方法"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, no-wrap
msgid "kafka"
msgstr "kafka"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, no-wrap
msgid "Getting Started with Apache Kafka in your Quarkus application"
msgstr "QuarkusアプリケーションでApache Kafkaを開始する"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:15
msgid "https://kafka.apache.org/[Apache] Kafka is a prevalent distributed streaming platform offering a unique set of characteristics such as message retention, replay capabilities, consumer groups, and so on.  Kafka is highly scalable, fault-tolerant, and is becoming the spine of many modern systems.  That being said, Kafka is not the only one out there, and choosing the right messaging technology for your application can be challenging.  There are many articles to help you drive your decision, such as https://medium.com/@graemecolman/mind-your-amqps-or-kafka-or-interconnect-what-is-in-the-red-hat-messaging-box-9ed5aa590e92[this one].  This post is about Kafka, and an equivalent post about AMQP will be published later."
msgstr "link:https://kafka.apache.org/[Apache Kafka] は、メッセージの保持、再生機能、コンシューマーグループなどのユニークな特性を提供する分散型ストリーミングプラットフォームとして広く普及しています。Kafka は非常に拡張性が高く、耐障害性に優れており、多くの近代的なシステムの要になりつつあります。とはいえ、Kafka単体で存在するものではなく、アプリケーションに適したメッセージング技術を選択するのは難しいことです。 link:https://medium.com/@graemecolman/mind-your-amqps-or-kafka-or-interconnect-what-is-in-the-red-hat-messaging-box-9ed5aa590e92[このリンク先] のように、あなたの決定を後押しするために役立つ記事がたくさんあります。この記事は Kafka についてのもので、AMQP についての同等の記事は後日公開される予定です。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:18
msgid "In this post, you will learn how to get started with Apache Kafka in your Quarkus application in less than 10 steps.  We will use https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[Reactive Messaging] - a declarative approach to build event-driven microservices, but you can also use _bare_ Kafka APIs or Kafka Streams."
msgstr "この投稿では、QuarkusアプリケーションでApache Kafkaを10ステップ未満で使い始める方法を学びます。イベント駆動型マイクロサービスを構築するための宣言的アプローチである link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[Reactive Messaging] を使用しますが、 _ベア_ Kafka APIやKafka Streamsを使用することもできます。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:20
msgid "The complete code is available from https://github.com/cescoffier/getting-started-quarkus-kafka[GitHub]."
msgstr "完全なコードは link:https://github.com/cescoffier/getting-started-quarkus-kafka[GitHub]から入手できます。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:21
#, no-wrap
msgid "Step 1 - Generate your project"
msgstr "ステップ 1 - プロジェクトの生成"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:26
msgid "Let's start with the very beginning, getting a new project structure with the right dependencies.  Go to https://code.quarkus.io, enter your group id and artifact id.  Then in the extension list, select:"
msgstr "最初の一歩として、正しい依存関係を持つ新しいプロジェクト構造を取得してみましょう。 https://code.quarkus.io  にアクセスして、グループIDとアーティファクトIDを入力します。そして、エクステンションのリストで以下を選択します:"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:28
msgid "SmallRye Reactive Messaging - Kafka Connector"
msgstr "SmallRye Reactive Messaging - Kafka Connector"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:29
msgid "RESTEasy Jackson"
msgstr "RESTEasy Jackson"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:31
msgid "image:/assets/images/posts/getting-started-kafka/getting-started-kafka-code.png[]"
msgstr "image:/assets/images/posts/getting-started-kafka/getting-started-kafka-code.png[]"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:33
msgid "You can disable the \"Example Code\" to avoid the generated project to contain examples."
msgstr "\"Example Code\"を無効にすることで、生成されたプロジェクトにサンプルコードが含まれないようにすることができます。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:35
msgid "Then, click on __Generate your application__, download the project as a zip file, unzip it, and load it in your favorite IDE."
msgstr "そして、 _Generate your application_ をクリックして、プロジェクトをzipファイルとしてダウンロードし、解凍して、お気に入りのIDEにロードします。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:38
msgid "If you opened the generated `pom.xml`, you would see that the `quarkus-smallrye-reactive-messaging-kafka` and `quarkus-resteasy-jackson` dependencies are declared, so we're ready to write some code."
msgstr "生成された `pom.xml` を開くと、 `quarkus-smallrye-reactive-messaging-kafka` と `quarkus-resteasy-jackson` の依存関係が宣言されていることがわかります。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:39
#, no-wrap
msgid "Step 2 - What are we going to exchange?"
msgstr "ステップ2 - 何を交換するか?"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:44
msgid "We need something to exchange.  Without much originality, let's say we will send and receive `Movie` objects.  In your project, create the `org.acme.Movie` class with the following content:"
msgstr "交換するものが必要です。あまりオリジナリティを持たずに、 `Movie` オブジェクトを送受信するとしましょう。プロジェクトの中で、以下の内容の `org.acme.Movie` クラスを作成します:"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:48
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:107
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:140
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:169
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:50
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:53
#, no-wrap
msgid ""
"    public String title;\n"
"    public int year;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:55
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:60
msgid "In Kafka, we produce and consume records.  A record contains a key and a value.  Let's say we will use the movie's publication year as key and the title as value."
msgstr "Kafka では、レコードを生成、消費します。レコードにはキーと値が含まれています。例えば、映画の公開年をキーにして、タイトルを値にするとします。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:63
msgid "We also need to decide on which topic we are going to send these records.  Let's keep things simple and name our topic __movies__."
msgstr "また、これらのレコードを送信するトピックを決める必要があります。単純化して、トピックを _movies_ としましょう。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:64
#, no-wrap
msgid "Step 3 - Configure the application"
msgstr "ステップ3 - アプリケーションの設定"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:71
msgid "As said above, we will use Reactive Messaging.  When you use Reactive Messaging, you send messages to a channel and receive them from another channel.  These channels are mapped to the underlying messaging technology by configuration.  In our application, we must indicate that our reception and publication channels will use the __movies__ Kafka channel.  In `src/main/resources/application.properties`, add the following content:"
msgstr "上記の通り、Reactive Messagingを使用します。Reactive Messagingを使用する場合、あるチャンネルにメッセージを送信し、別のチャンネルからメッセージを受信します。これらのチャンネルは、基礎となるメッセージング技術に設定によってマッピングされます。このアプリケーションでは、受信および配信チャンネルが _movies_ Kafkaチャンネルを使用することを指定する必要があります。 `src/main/resources/application.properties` で、以下の内容を追加します:"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:76
#, no-wrap
msgid ""
"# The Kafka broker location (defaults to localhost:9092)\n"
"kafka.bootstrap.servers=localhost:9092\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:82
#, no-wrap
msgid ""
"# Configuring the incoming channel (reading from Kafka)\n"
"mp.messaging.incoming.movies-in.connector=smallrye-kafka\n"
"mp.messaging.incoming.movies-in.topic=movies\n"
"mp.messaging.incoming.movies-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer\n"
"mp.messaging.incoming.movies-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:88
#, no-wrap
msgid ""
"# Configuring the outgoing channel (writing to Kafka)\n"
"mp.messaging.outgoing.movies-out.connector=smallrye-kafka\n"
"mp.messaging.outgoing.movies-out.topic=movies\n"
"mp.messaging.outgoing.movies-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n"
"mp.messaging.outgoing.movies-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:91
msgid "After having configured the broker location with `kafka.bootstrap.servers`, we configure our two channels: `movies-in` (receiving the records) and `movies-out` (publishing the records)."
msgstr "ブローカーの場所を `kafka.bootstrap.servers` で設定した後、 `movies-in` (レコードを受信)と `movies-out` (レコードを配信)の 2 つのチャンネルを設定します。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:95
msgid "We use the `mp.messaging.incoming.movies-in` prefix to configure the channel.  The `connector` attribute indicates who's responsible for this channel, here the Kafka connector.  We also need to configure the key and value deserializers."
msgstr "`mp.messaging.incoming.movies-in` というプレフィックスを使ってチャネルを設定します。 `connector` 属性は、このチャネルを担当するコネクタ (ここでは Kafka コネクタ) を示しています。また、キーと値のデシリアライザも設定する必要があります。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:98
msgid "To configure the outbound `movies-out` channel, we use the `mp.messaging.outgoing.movies-out` prefix.  In addition to indicate who's responsible for that channel, we also need to configure the key and value serializers."
msgstr "アウトバウンド `movies-out` チャネルを設定するには、 `mp.messaging.outgoing.movies-out` のプレフィックスを使用します。そのチャネルを担当するコネクタを示すだけでなく、キーと値のシリアライザも設定する必要があります。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:99
#, no-wrap
msgid "Step 4 - Publishing movies to Kafka"
msgstr "ステップ 4 - Kafkaにムービーを公開する"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:103
msgid "Now, it's time to send a record to Kafka.  Create the `org.acme.MovieProducer` class with the following content:"
msgstr "さて、いよいよKafkaにレコードを送信します。以下の内容で `org.acme.MovieProducer` クラスを作成します:"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:111
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.kafka.Record;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:114
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:117
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MovieProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:120
#, no-wrap
msgid ""
"    @Inject @Channel(\"movies-out\")\n"
"    Emitter<Record<Integer, String>> emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:125
#, no-wrap
msgid ""
"    public void sendMovieToKafka(Movie movie) {\n"
"        emitter.send(Record.of(movie.year, movie.title));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:130
msgid "In this class, we inject an `Emitter`, i.e., an object responsible for sending a message to a channel.  This emitter is attached to the `movies-out` channel (and so will send messages to Kafka).  We are sending `Record` objects containing the movie's publication year as key and its title as value."
msgstr "このクラスでは、 `Emitter` 、つまりチャンネルへのメッセージ送信を担当するオブジェクトを注入します。このエミッタは `movies-out` チャンネルにアタッチされています (つまり、Kafka にメッセージを送信します)。映画の公開年をキーに、タイトルを値にして `Record` オブジェクトを送信しています。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:132
msgid "So, the rest of our application can simply use the `sendMovieToKafka` method to send a movie to our Kafka topic."
msgstr "そのため、残りのアプリケーションは `sendMovieToKafka` メソッドを使って、Kafka トピックにムービーを送信するだけです。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:133
#, no-wrap
msgid "Step 5 - Consuming movies"
msgstr "ステップ5 - 映画を消費する"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:136
msgid "Let's now look at the other side and retrieve the movies from Kafka."
msgstr "今度は反対側に目を向けて、Kafkaからムービーを取り出してみましょう。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:144
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.kafka.Record;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:146
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:149
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MovieConsumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:151
#, no-wrap
msgid "    private final Logger logger = Logger.getLogger(MovieConsumer.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:157
#, no-wrap
msgid ""
"    @Incoming(\"movies-in\")\n"
"    public void receive(Record<Integer, String> record) {\n"
"        logger.infof(\"Got a movie: %d - %s\", record.key(), record.value());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:160
msgid "Here, we use the `@Incoming` annotation to indicate to Quarkus to call the `receive` method for every received record."
msgstr "ここでは、 `@Incoming` アノテーションを使用して、受信したレコードごとに `receive` メソッドを呼び出すようにQuarkusに指示しています。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:161
#, no-wrap
msgid "Step 6 - Sending movies from a REST endpoint"
msgstr "ステップ6 - RESTエンドポイントからのムービーの送信"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:165
msgid "It's quite common to send messages to Kafka from a REST endpoint.  To do this, create the `org.acme.MovieResource` class with the following content:"
msgstr "REST エンドポイントから Kafka にメッセージを送信することはよくあることです。そのためには、以下のような内容の `org.acme.MovieResource` クラスを作成します:"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:177
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:182
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class MovieResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:185
#, no-wrap
msgid ""
"    @Inject\n"
"    MovieProducer producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:193
#, no-wrap
msgid ""
"    @POST\n"
"    public Response send(Movie movie) {\n"
"        producer.sendMovieToKafka(movie);\n"
"        // Return an 202 - Accepted response.\n"
"        return Response.accepted().build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:195
#, no-wrap
msgid "Step 7 - Let's get this running!"
msgstr "ステップ7 - これを実行してみましょう!"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:199
msgid "Well, first, we need a Kafka broker.  You can follow the https://kafka.apache.org/quickstart[Apache Kafka quickstart], or use the following `docker-compose.yaml` file:"
msgstr "さて、まずはKafkaブローカーが必要です。 link:https://kafka.apache.org/quickstart[Apache Kafka のクイックスタート] に従うか、以下の `docker-compose.yaml` ファイルを使用してください:"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:203
#, no-wrap
msgid "version: '2'\n"
msgstr "version: '2'\n"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:205
#, no-wrap
msgid "services:\n"
msgstr "services:\n"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:216
#, no-wrap
msgid ""
"  zookeeper:\n"
"    image: strimzi/kafka:0.20.1-kafka-2.6.0\n"
"    command: [\n"
"        \"sh\", \"-c\",\n"
"        \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:232
#, no-wrap
msgid ""
"  kafka:\n"
"    image: strimzi/kafka:0.20.1-kafka-2.6.0\n"
"    command: [\n"
"        \"sh\", \"-c\",\n"
"        \"bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:235
msgid "Copy the `docker-compose.yaml` file in your project, and from a terminal, start your broker with: `docker-compose up -d`"
msgstr "プロジェクト内に `docker-compose.yaml` ファイルをコピーし、ターミナルから、ブローカーを起動します: `docker-compose up -d`"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:237
msgid "Then, run the application using:"
msgstr "そして、アプリケーションを次のように実行します:"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:241
#, no-wrap
msgid "./mvnw quarkus:dev\n"
msgstr "./mvnw quarkus:dev\n"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:245
msgid "The application runs in dev mode, meaning that you can still update the code.  It will reload it automatically."
msgstr "アプリケーションは開発モードで動作します。つまり、コードをまだ変更することが出来、変更した場合、自動的にリロードされます。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:247
msgid "In another terminal, emit a few HTTP POST request such as:"
msgstr "別の端末で、次のようなHTTP POSTリクエストをいくつか送信します:"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:254
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1994, \"title\":\"The Shawshank Redemption\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:259
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1972, \"title\":\"The Godfather\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:264
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":2008, \"title\":\"The Dark Knight\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:269
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1994, \"title\":\"Pulp Fiction\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:274
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":2010, \"title\":\"Inception\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:277
msgid "In the terminal running the application, you will see:"
msgstr "アプリケーションを実行しているターミナルでは、以下のように表示されます:"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:284
#, no-wrap
msgid ""
"...\n"
"2021-01-13 09:29:41,087 INFO  [org.acm.MovieConsumer] (vert.x-eventloop-thread-9) Got a movie: 1994 - Pulp Fiction\n"
"2021-01-13 09:29:41,114 INFO  [org.acm.MovieConsumer] (vert.x-eventloop-thread-9) Got a movie: 2010 - Inception\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:287
msgid "It works!"
msgstr "動いています!"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:288
#, no-wrap
msgid "Step 8 - Native packaging"
msgstr "ステップ8 - ネイティブパッケージ"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:291
msgid "If you have https://quarkus.io/guides/building-native-image[GraalVM installed and configured correctly], you can package this application as a native executable:"
msgstr "link:https://quarkus.io/guides/building-native-image[GraalVMが正しくインストールされ、設定されている場合] 、このアプリケーションをネイティブ実行可能ファイルとしてパッケージ化することができます:"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:295
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr "./mvnw package -Pnative\n"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:298
msgid "Then, execute your native executable with: `./target/getting-started-kafka-1.0.0-SNAPSHOT-runner`, and you get a Quarkus application using Kafka starting in a few milliseconds and consuming a ridiculous amount of memory: less than 30Mb after 100 ingested records!"
msgstr "そして、 `./target/getting-started-kafka-1.0.0-SNAPSHOT-runner` でネイティブ実行可能ファイルを実行すると、Kafkaを使用したQuarkusアプリケーションが数ミリ秒で起動し、消費するメモリー量はとんでもない量:100レコードを取り込んでも30MB未満!になります。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:304
#, no-wrap
msgid ""
"$ rss getting-started-kafka-1.0.0-SNAPSHOT-runner\n"
"PID 0M COMMAND\n"
"49321 30M ./target/getting-started-kafka-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:306
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:309
msgid "In less than 10 minutes, we have a new Quarkus application using Apache Kafka.  If you want to go further, check the https://quarkus.io/guides/kafka[Kafka guide]."
msgstr "10分もしないうちに、Apache Kafkaを使った新しいQuarkusアプリケーションができました。さらに進みたい場合は、 link:https://quarkus.io/guides/kafka[Kafkaガイド]をチェックしてください。"

#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid ""
#~ "layout: post\n"
#~ "title: Getting Started with Apache Kafka in your Quarkus application\n"
#~ "date: 2021-01-19\n"
#~ "tags: kafka\n"
#~ "synopsis: How to build a Quarkus application using Apache Kafka in less than 10 minutes\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: QuarkusアプリケーションでのApache Kafkaの使用を始めるには\n"
#~ "date: 2021-01-19\n"
#~ "tags: kafka\n"
#~ "synopsis: Apache Kafkaを使って10分以内にQuarkusアプリケーションを構築する方法\n"
#~ "author: cescoffier\n"
#~ "---\n"
