# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: 2022-04-30 14:17+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#, no-wrap
msgid "bmeseguer"
msgstr "bmeseguer"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#, no-wrap
msgid "2022-04-05"
msgstr "2022-04-05"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:16
#, no-wrap
msgid "Discover Camel, the swiss-knife of integration brought to Quarkus. The example encourages API best practices, with effortless coding effort showcasing AtlasMap for data transformation."
msgstr "Quarkusに導入されたインテグレーションのスイス・アーミーナイフ、Camelを発見してください。この例では、データ変換用のAtlasMapを紹介する簡単なコーディング作業で、APIのベストプラクティスを奨励しています。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#, fuzzy, no-wrap
msgid "camel openapi api integration atlasmap rest swagger-ui data-mapping web"
msgstr "camel openapi api integration atlasmap rest swagger-ui data-mapping web"

#. type: Title =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:11
#, no-wrap
msgid "Riding Camel Quarkus: effortless APIs"
msgstr "Camel Quarkusに乗る：容易なAPI"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:13
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:70
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:171
#, no-wrap
msgid "Camel"
msgstr "Camel"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:13
#, no-wrap
msgid "camel-quarkus.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:17
#, no-wrap
msgid "Introduction"
msgstr "はじめに"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:20
msgid "Quarkus offers an extensive collection of extensions to connect to web, data and messaging systems, providing the developer fantastic functionality at his disposal. However, in many cases, the problem at hand already belongs to one (or more) of the well-known https://www.enterpriseintegrationpatterns.com/toc.html[enterprise integration patterns^]."
msgstr "Quarkusには、Web、データ、メッセージングシステムに接続するためのエクステンションが豊富に用意されており、開発者が自由に使える素晴らしい機能が提供されています。しかし、多くの場合、手元の問題はすでによく知られた link:https://www.enterpriseintegrationpatterns.com/toc.html[エンタープライズ統合, window=_blank]パターンの1つ（または複数）に属しています。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:22
msgid "Developers often kickstart their projects unaware that Apache Camel has perfected how to best address integration patterns. Camel Quarkus provides https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[hundreds of connectors^] and rich functionality for data mediation: data formats, transformers, templating, custom processors, etc."
msgstr "開発者は、Apache Camelがインテグレーションパターンに対応する最善の方法を完成させていることを知らずにプロジェクトを開始しがちです。Camel Quarkusは、データ形式、トランスフォーマー、テンプレート化、カスタムプロセッサーなど、 link:https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[数百のコネクター, window=_blank] とデータ仲介のための豊富な機能を提供します。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:24
msgid "https://camel.apache.org/camel-quarkus/[Camel Quarkus^] is a subproject in the https://camel.apache.org/[Apache Camel^] community that enables Camel to run on https://developers.redhat.com/products/quarkus/overview[Quarkus^]. Apache Camel, often called the swiss-knife of integration, is the most popular open source community project aimed at solving all things integration."
msgstr "link:https://camel.apache.org/camel-quarkus/[Camel Quarkus, window=_blank]は、 link:https://camel.apache.org/[Apache Camel, window=_blank]コミュニティのサブプロジェクトで、 link:https://developers.redhat.com/products/quarkus/overview[Quarkus, window=_blank]上でCamelを実行できるようにするものです。Apache Camelは、しばしばインテグレーションのスイス・アーミーナイフと呼ばれ、インテグレーションに関するあらゆることを解決することを目的とした、最も人気のあるオープンソースコミュニティプロジェクトです。"

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:27
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:59
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:76
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:133
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:272
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:351
#, no-wrap
msgid "<br>\n"
msgstr "<br>\n"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:29
#, no-wrap
msgid "An OpenAPI example"
msgstr "OpenAPIの例"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:32
msgid "Let’s pick a helpful example that highlights the benefits of using Camel Quarkus in contrast with other development approaches. Implementing and evolving API services sounds like a use case almost every reader can relate to. We’ll use the broadly adopted OpenApi specification."
msgstr "他の開発アプローチと対比して、Camel Quarkusを使用する利点を強調する役に立つ例を選んでみましょう。APIサービスの実装と進化は、ほとんどすべての読者が共感できるユースケースのように聞こえます。ここでは、広く採用されているOpenApiの仕様を使用します。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:33
#, no-wrap
msgid "Piecing together an OpenAPI service"
msgstr "OpenAPIサービスを組み立てる"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:34
#, fuzzy, no-wrap
msgid "Putting"
msgstr "プッティング"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:34
#, no-wrap
msgid "openapi.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:37
msgid "Of course, the example illustrated in this article plays in the context of integration, where you’re enabling access or integrating source systems, performing data processing of some sort, and connecting and sending data to back endpoints."
msgstr "もちろん、この記事の例では、ソースシステムへのアクセスやインテグレーションを可能にし、何らかのデータ処理を行い、バックエンドポイントにデータを接続して送信するという、インテグレーションの文脈で説明されています。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:39
#, fuzzy
msgid "By all means, Camel Quarkus is not a “one to rule them all” solution. It will not be a good fit if your scenario deviates from the above context, for instance, a data access layer with heavy datastore interaction, a web server, a media application, etc."
msgstr "Camel Quarkusは、「1つですべてを解決する」ソリューションではありません。例えば、データストアとのやり取りが多いデータアクセスレイヤー、Webサーバー、メディアアプリケーションなど、シナリオが上記のコンテキストから外れている場合は、うまく適合しないでしょう。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:41
#, fuzzy
msgid "We find many Quarkus (non-Quarkus too) examples showing how to define and implement APIs. They all try to be as helpful as possible and propose the way forward. I realise this article is no different. However, I’m certain Camel Quarkus brings an elegant and effortless approach worth considering."
msgstr "APIをどのように定義し、実装するかを示す多くのQuarkus（Quarkus以外も含む）例があります。それらはすべて、可能な限り役に立ち、進むべき道を提案しようとするものです。この記事もそうだと思います。しかし、Camel Quarkusは、検討する価値のあるエレガントで楽なアプローチをもたらすと確信しています。"

#. type: Title ===
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:43
#, no-wrap
msgid "Code-first vs Contract-first"
msgstr "コード・ファーストと契約・ファースト"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:46
#, fuzzy
msgid "Although these are two different strategies to implement APIs, with their pros and cons, we are sticking to the contract-first approach, that is, when the API specification (the contract) is provided before the code implementation begins."
msgstr "これらはAPIを実装するための2つの異なる戦略で、それぞれ長所と短所がありますが、私たちはコントラクトファースト方式、つまり、コードの実装を始める前にAPIの仕様（コントラクト）を提供する場合にこだわっています。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:48
#, fuzzy
msgid "In our example, the development team does not own the API. Their task is to implement the services to expose and comply with the given API specification. A different team in the organisation is responsible for designing, releasing, and delivering API governance. The picture below illustrates a contract-first approach."
msgstr "この例では、開発チームがAPIを所有することはありません。彼らの仕事は、公開するサービスを実装し、与えられたAPI仕様に準拠することである。組織内の別のチームが、APIガバナンスの設計、リリース、提供を担当する。下図は契約優先のアプローチを示している。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:49
#, no-wrap
msgid "Contract-first approach"
msgstr "契約ファーストのアプローチ"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:50
#, no-wrap
msgid "Contract-first"
msgstr "契約ファースト"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:50
#, no-wrap
msgid "dev-contract-first.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:53
#, fuzzy
msgid "A code-first strategy implies the API specification derives from the implemented code. You can use libraries to auto-generate the specification based on the code the developer has crafted. Code-first would be more appropriate for fast prototyping or simply when you have complete control over the API with a very open, relaxed and flexible approach to your development with little or no impact on others."
msgstr "コードファースト戦略とは、API仕様が実装されたコードに由来することを意味する。開発者が作成したコードを元に、ライブラリを用いて仕様を自動生成することができる。コードファーストは、高速なプロトタイピングや、非常にオープンでリラックスした柔軟なアプローチでAPIを完全に制御し、他にほとんど影響を与えないように開発する場合に適しているだろう。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:54
#, no-wrap
msgid "Code-first approach"
msgstr "コードファーストのアプローチ"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:55
#, no-wrap
msgid "Code-first"
msgstr "コードファースト"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:55
#, no-wrap
msgid "dev-code-first.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:61
#, no-wrap
msgid "Basics about Camel and REST"
msgstr "CamelとRESTに関する基礎知識"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:64
msgid "Here's a speedy summary for those unfamiliar with Camel and how to implement REST APIs."
msgstr "ここでは、CamelとREST APIの実装方法についてよく知らない方のために、スピーディーにまとめてみました。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:66
msgid "Camel has its domain-specific language (DSL) to define processing flows, known as the Camel DSL. You use Camel components (aka. connectors) in the DSL to move data from sources to targets. Camel Quarkus has https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[300+ available extensions^]."
msgstr "Camelには、処理の流れを定義するためのドメイン特化型言語（DSL）があり、Camel DSLと呼ばれています。DSLでCamelコンポーネント（別名：コネクター）を使用して、ソースからターゲットにデータを移動します。Camel Quarkusには、 link:https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[300以上の利用可能なエクステンションが, window=_blank]あります。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:68
#, fuzzy
msgid "Camel provides an additional domain-specific language for specific REST implementations: the REST DSL. When implementing REST services with Camel, you chain both DSLs to define the service’s end-to-end behaviour."
msgstr "Camelには、特定のREST実装のためのドメイン固有の言語であるREST DSLが追加で用意されています。CamelでRESTサービスを実装する場合、両方のDSLを連鎖させて、サービスのエンドツーエンドの動作を定義します。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:69
#, fuzzy, no-wrap
msgid "Camel DSLs chained to process incoming requests."
msgstr "Camel DSLが連鎖して、入ってくるリクエストを処理する。"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:70
#, no-wrap
msgid "camel-basics-dsl.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:73
#, fuzzy
msgid "Camel forwards incoming REST requests from the REST DSL to the main DSL via the Camel ‘direct’ component, which is essentially a connector used for internal invocations, as if calling a Java method from a line of Java code."
msgstr "Camel は、REST DSL から入ってくる REST リクエストを Camel 'direct' コンポーネント経由でメイン DSL に転送します。このコンポーネントは、基本的に内部呼び出しに使用するコネクタで、Java コードの行から Java メソッドを呼び出すようなものです。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:78
#, fuzzy, no-wrap
msgid "Easy ride preparations"
msgstr "イージーライドの準備"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:81
#, fuzzy
msgid "The ultimate goal is to relieve the developer from dealing with API related preparations and configurations and allow him to concentrate on the business logic."
msgstr "最終的な目標は、開発者がAPI関連の準備や設定の対応から解放され、ビジネスロジックに集中できるようにすることです。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:83
#, fuzzy
msgid "To be more specific, in the previous diagram, the REST DSL comes handy when developers adopt a code-first approach. However, its definition feels redundant in a contract-first world since the provided OpenAPI specification already defines all the API details."
msgstr "具体的には、先ほどの図では、開発者がコードファーストのアプローチを採用する場合に、REST DSLが便利であることを示しています。しかし、コントラクトファーストの世界では、提供されているOpenAPI仕様がすでにすべてのAPIの詳細を定義しているため、その定義は冗長に感じられる。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:85
#, fuzzy
msgid "Camel allows you to auto-generate the REST DSL out of an OpenAPI specification. This automation simplifies the work by letting the developer just focus on the processing flow implementation."
msgstr "Camelでは、OpenAPIの仕様からREST DSLを自動生成することができます。この自動化により、開発者は処理フローの実装にのみ集中することができ、作業が簡素化されます。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:86
#, fuzzy, no-wrap
msgid "Automated REST DSL, hand coded Main DSL."
msgstr "REST DSLの自動化、Main DSLのハンドコーディング。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:87
#, fuzzy, no-wrap
msgid "Automated"
msgstr "自動化"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:87
#, no-wrap
msgid "camel-easy-ride.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:90
#, fuzzy
msgid "The automated code generation shown above is enabled via the configuration of the following Maven plugin:"
msgstr "上記の自動コード生成は、以下のMavenプラグインの設定によって可能になります。"

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:110
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.apache.camel</groupId>\n"
"    <artifactId>camel-restdsl-openapi-plugin</artifactId>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>simple</id>\n"
"            <goals>\n"
"                <goal>generate-xml</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <specificationUri>src/main/resources/META-INF/openapi.json</specificationUri>\n"
"                <restConfiguration>false</restConfiguration>\n"
"                <outputDirectory>${project.build.directory}/classes/routes</outputDirectory>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:113
#, fuzzy
msgid "Notice the `+<outputDirectory>+` parameter set to a destination inside the target directory. The setting allows Quarkus to load the Camel REST resource at start-up time and prevents the source directory from being polluted with unnecessary code."
msgstr "`&amp;lt;outputDirectory&amp;gt;` パラメータがターゲットディレクトリ内の保存先に設定されていることに注意してください。この設定により、Quarkusは起動時にCamel RESTリソースをロードし、ソースディレクトリが不要なコードで汚染されるのを防ぐことができます。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:115
#, fuzzy
msgid "Also, you’ll observe we’re picking the OpenApi specification from the project’s source directory. The best practice would be to fetch, via another Maven plugin, the OpenAPI from a remote Service Registry representing the source of truth."
msgstr "また、プロジェクトのソースディレクトリからOpenApiの仕様書を選んでいることがわかります。ベストプラクティスは、別のMavenプラグインを使って、真実のソースを表すリモートサービスレジストリからOpenAPIを取得することでしょう。"

#. type: delimited block =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:119
#, fuzzy
msgid "The OpenApi definition used in our example has been created with https://www.apicur.io/[Apicurio Studio^], a beautiful and intuitive design time visual tool."
msgstr "この例で使用されているOpenApiの定義は、美しく直感的なデザインタイムビジュアルツールである link:https://www.apicur.io/[Apicurio Studioで, window=_blank]作成されています。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:122
#, fuzzy
msgid "Let’s pretend we do fetch the OpenApi definition from a remote server. Under that assumption, the diagram below shows how the project is kept simple and clean. Maven injects both the OpenApi and REST definition into the target directory at compilation time. When packaging the solution, it includes all necessary artefacts to run."
msgstr "OpenApiの定義をリモートサーバーから取得することにしましょう。その前提で、下の図は、プロジェクトがどのようにシンプルできれいに保たれるかを示しています。Mavenは、コンパイル時にOpenApiとRESTの定義の両方をターゲットディレクトリに注入します。ソリューションのパッケージング時に、実行に必要なすべてのアーティファクトを含めます。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:123
#, fuzzy, no-wrap
msgid "Source is clean. Essential artefacts are generated and injected"
msgstr "ソースはクリーン。必要なアーティファクトは生成され、注入される"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:124
#, no-wrap
msgid "Source"
msgstr "ソース"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:124
#, no-wrap
msgid "maven-automation.png"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:129
#, fuzzy
msgid "The best practice is to fetch the OpenAPI specification from a remote https://www.apicur.io/registry/[Service Registry^] (the source of truth). For simplicity, our project already includes the specification."
msgstr "ベストプラクティスは、リモートの link:https://www.apicur.io/registry/[サービスレジストリ, window=_blank]（真実の源）からOpenAPI仕様を取得することです。簡単のために、私たちのプロジェクトにはすでに仕様が含まれています。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:135
#, fuzzy, no-wrap
msgid "Application version 1.0"
msgstr "アプリケーションバージョン1.0"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:138
#, fuzzy
msgid "Let’s look at our chosen (example) API service and see how to drive its implementation in its first iteration. The API Design team has released an OpenApi specification v1.0 for a service called ‘Individual’, and we, the developers, need to implement the service in compliance with its definition."
msgstr "私たちが選んだ（例の）APIサービスを見て、その最初のイテレーションでどのように実装を推進するかを見てみましょう。APIデザインチームは'Individual'というサービスに関するOpenApi仕様v1.0をリリースしており、我々開発者はその定義に準拠してサービスを実装する必要がある。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:140
#, fuzzy
msgid "This first version of the service has a single operation to retrieve the details of an individual. By setting up our project to parse and auto-generate the REST DSL as described in the previous section, we just need to implement a single Camel Route to process incoming service calls, as illustrated below:"
msgstr "この最初のバージョンのサービスでは、個人の詳細を取得するための単一のオペレーションがあります。前のセクションで説明したように、REST DSLを解析して自動生成するようにプロジェクトを設定することで、以下の図のように、受信したサービスコールを処理するために単一のCamel Routeを実装するだけでよくなります。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:141
#, fuzzy, no-wrap
msgid "First version of the service to implement."
msgstr "サービスの最初のバージョンを実装する。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:142
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:388
#, fuzzy, no-wrap
msgid "First"
msgstr "ファースト"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:142
#, no-wrap
msgid "service-version-1.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:145
#, fuzzy
msgid "We’ll keep the use case relatively thin; our focus stays at “Easy APIs with Camel Quarkus”.  But still, we want the scenario to be within an integration context to showcase some Camel Quarkus capabilities."
msgstr "ユースケースは比較的薄く、「らくだのQuarkusでAPIを簡単に」ということにフォーカスしています。しかし、Camel Quarkusの機能をいくつか紹介するために、統合のコンテキストに沿ったシナリオにしたいと思います。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:147
#, fuzzy
msgid "Our Camel route connects with a legacy backend that enables access to ‘individual’ data. The processing logic requires adapting the incoming OpenApi call to the legacy backend system’s interface. This data adaptation requires data transformation both during the request and response flows."
msgstr "私たちのCamelルートは、「個別」データへのアクセスを可能にするレガシーバックエンドと接続しています。処理ロジックは、受信したOpenApiコールをレガシーバックエンドシステムのインターフェースに適合させる必要があります。このデータ適応には、リクエストとレスポンスフローの両方でデータ変換が必要です。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:148
#, fuzzy, no-wrap
msgid "End to end processing flow."
msgstr "エンド・トゥ・エンドの処理フロー。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:149
#, fuzzy, no-wrap
msgid "End"
msgstr "終了"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:149
#, no-wrap
msgid "service-e2e.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:152
#, fuzzy
msgid "In a classic development approach, the developer needs to incorporate a Java data model to operate and handle incoming and outgoing data, for example, by defining Java classes and data structures to represent the data the service needs to manipulate."
msgstr "古典的な開発手法では、開発者は、サービスが操作する必要のあるデータを表すJavaクラスとデータ構造を定義するなどして、受信データと送信データを操作および処理するためのJavaデータモデルを組み込む必要があります。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:154
#, fuzzy
msgid "In our example, the OpenApi contract already predefined the data model describing the inputs and outputs of each operation. Likewise, the backend also defines a contract (or interface) to comply with when triggering calls."
msgstr "この例では、OpenApiのコントラクトが、各オペレーションの入力と出力を記述するデータモデルを既に定義しています。同様に、バックエンドも、呼び出しをトリガーする際に準拠すべきコントラクト（またはインターフェース）を定義しています。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:156
#, fuzzy
msgid "With Apache Camel, we can keep the implementation very clean by using Camel functionality dedicated explicitly to data transformation. In our example, we’ll use the AtlasMap component for various reasons:"
msgstr "Apache Camelでは、データ変換に特化したCamelの機能を使用することで、非常にクリーンな実装を維持することができます。この例では、さまざまな理由から AtlasMap コンポーネントを使用します。"

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:163
#, fuzzy, no-wrap
msgid ""
"<ul>\n"
"  <li>It provides intuitive visual tooling to map source data to target data</li>\n"
"  <li>It performs structural and data transformation (JSON ⇄ XML) in a single action </li>\n"
"  <li>It does not require predefined Java data models</li>\n"
"</ul>\n"
msgstr "&lt;ul&gt; &lt;li&gt;ソース データをターゲット データにマッピングするための直感的な視覚的ツールを提供します&lt;/li&gt; &lt;li&gt;構造およびデータ変換 (JSON ⇄ XML) を 1 つのアクションで実行します&lt;/li&gt; &lt;li&gt; 定義済み Java データ モデルは必要ありません&lt;/li&gt; &lt;/ul&gt; &lt;/table&gt; &lt;/table&gt; &lt;/p&gt; &lt;p&gt; &lt;li&gt;ソース データをターゲット データにマッピングします&lt;/p&gt; &lt;p&gt;ソース データをターゲット データにマッピングします。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:165
#, fuzzy, no-wrap
msgid "AtlasMap combines 2 actions in 1: structural and format transformations."
msgstr "AtlasMapは、構造変換とフォーマット変換の2つのアクションを1つにまとめました。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:166
#, fuzzy, no-wrap
msgid "AtlasMap"
msgstr "アトラスマップ"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:166
#, no-wrap
msgid "map-json-xml.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:169
#, fuzzy
msgid "Let’s start looking at the route definition the developer needs to produce and how Camel links the OpenAPI operation to its code implementation:"
msgstr "まず、開発者が作成する必要のあるルート定義と、CamelがOpenAPI操作とそのコード実装をどのようにリンクさせるかについて見ていきましょう。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:170
#, fuzzy, no-wrap
msgid "Camel uses the `+operationId+` as a link to invoke the Camel route."
msgstr "Camelは、Camelルートを呼び出すためのリンクとして、 `operationId` を使用します。"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:171
#, no-wrap
msgid "openapi-camel-link.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:174
#, fuzzy
msgid "Camel Quarkus uses the `+operationId+` from the OpenAPI specification to trigger an internal call (using the `+direct+` component) and expects a Camel consumer (`+from+` tag) with a matching `+operationId+` value to process the client request."
msgstr "Camel Quarkusは、OpenAPI仕様の `operationId` 、内部呼び出し（ `direct` コンポーネントを使用）をトリガーし、一致する `operationId` 値を持つCamelコンシューマ（ `from` タグ）がクライアント要求を処理することを期待します。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:176
#, fuzzy
msgid "The Camel route couldn’t be simpler:"
msgstr "キャメルルートは、これ以上ないほどシンプルです。"

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:183
#, no-wrap
msgid ""
"from(\"direct:getDetails\")\n"
".to(\"atlasmap:map/request.adm\")\n"
".to(\"direct:call-backend\")\n"
".to(\"atlasmap:map/response.adm\");\n"
msgstr ""

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:193
#, fuzzy, no-wrap
msgid ""
"<ol>\n"
"  <li>The first line declares the route (and matches the `+operationId+`).</li>\n"
"  <li>The second line applies a data adaptation (or mapping) to prepare the back-end call's payload.</li>\n"
"  <li>The third line invokes a Camel route that calls the backend and collects the response.</li>\n"
"  <li>The fourth line maps the response XML into JSON data in compliance with the OpenApi definition.</li>\n"
"</ol>\n"
msgstr "&lt;ol&gt; &lt;li&gt;最初の行はルートを宣言します (および `operationId` に一致します)。&lt;/li&gt; &lt;li&gt;2行目はデータ適合 (またはマッピング) を適用して、バックエンド呼び出しのペイロードを準備します。&lt;/li&gt; &lt;li&gt;3行目はバックエンドを呼び出し、レスポンスを収集する Camel ルートを呼び出します。&lt;/li&gt; &lt;li&gt;4行目はレスポンスの XML を OpenApi の定義に準拠した JSON データにマップします。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:197
#, fuzzy
msgid "You can easily create the data mapping definitions using AtlasMap’s VSCode extension.  When editing the Camel route in VSCode, you’ll find a contextual and actionable hint you can click (over the ‘atlasmap’ code line) that launches the AtlasMap editor with the data mapping definition loaded."
msgstr "AtlasMapのVSCodeエクステンションを使って、データマッピング定義を簡単に作成することができます。VSCode で Camel ルートを編集する際、'atlasmap' コード行の上をクリックすると、データマッピング定義を読み込んだ AtlasMap エディタを起動する、コンテキストとアクションを持つヒントが表示されます。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:198
#, fuzzy, no-wrap
msgid "VSCode prepends an action link to open the visual mapping editor."
msgstr "VSCodeは、ビジュアルマッピングエディターを開くためのアクションリンクを前置します。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:199
#, no-wrap
msgid "VSCode"
msgstr "VSCode"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:199
#, no-wrap
msgid "vscode-codelens.png"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:204
#, fuzzy
msgid "The following https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[blog in the Apache Camel^] community describes how to use the tooling."
msgstr "link:https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[Apache Camel, window=_blank]コミュニティの以下の link:https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[ブログで, window=_blank]、ツールの使い方が紹介されています。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:207
#, fuzzy
msgid "The picture below shows the data mapping definition in AtlasMap for the request flow:"
msgstr "下図は、リクエストフローに対するAtlasMapでのデータマッピングの定義です。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:208
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:239
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:317
#, no-wrap
msgid "Mapping"
msgstr "マッピング"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:208
#, no-wrap
msgid "atlasmap-mapping-request.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:211
#, fuzzy
msgid "The property `+id+` (left) represents the `+{id}+` path parameter from the HTTP URL. It maps to the target XML data structure, connected to the `+id+` node (right). You define mappings with drag and drop actions from left to the right."
msgstr "プロパティ `id` (左) は、HTTP URL の `{id}` パスパラメータを表している。これは、 `id` ノード（右）に接続されているターゲット XML データ構造にマッピングされます。左から右へのドラッグ＆ドロップ操作でマッピングを定義する。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:213
#, fuzzy
msgid "Following the data transformation action, the flow invokes the backend. The snippet below shows the developer's Camel route definition to trigger the HTTP request."
msgstr "データ変換アクションに続いて、フローはバックエンドを呼び出します。以下のスニペットは、HTTP リクエストをトリガーするための開発者の Camel ルート定義を示しています。"

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:221
#, no-wrap
msgid ""
"from(\"direct:call-backend\")\n"
".removeHeaders(\"*\")\n"
".setHeader(Exchange.HTTP_METHOD,  constant(\"POST\"))\n"
".setHeader(Exchange.CONTENT_TYPE, constant(\"application/xml\"))\n"
".to(\"http:{{api.backend1.host}}/camel/individual/details\");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:224
#, fuzzy
msgid "The two main actions in this route are:"
msgstr "このルートでは、主に2つのアクションを行います。"

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:230
#, fuzzy, no-wrap
msgid ""
"<ol>\n"
"  <li>Set headers (ensuring we clean up incoming ones)</li>\n"
"  <li>Trigger the call using Camel’s HTTP component. </li>\n"
"</ol>\n"
msgstr "&lt;ol&gt; &lt;li&gt;ヘッダーを設定する (受信したヘッダーを確実にクリーンアップする)&lt;/li&gt; &lt;li&gt;CamelのHTTPコンポーネントを使用して呼び出しをトリガーする。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:233
#, fuzzy
msgid "The expected XML interaction with the legacy backend system is as follows:"
msgstr "レガシーバックエンドシステムとの間で予想されるXMLのやり取りは次の通りである。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:234
#, fuzzy, no-wrap
msgid "Call from Camel to the backend."
msgstr "Camelからバックエンドへの呼び出し。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:235
#, no-wrap
msgid "Call"
msgstr "呼出"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:235
#, no-wrap
msgid "camel-backend-call.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:238
#, fuzzy
msgid "The response data mapping definition would be defined in AtlasMap as shown below:"
msgstr "レスポンスデータのマッピング定義は、以下のようにAtlasMapで定義することになる。"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:239
#, no-wrap
msgid "atlasmap-mapping-response.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:242
#, fuzzy
msgid "The data structure on the left represents the source XML to map (backend response), and the data structure on the right represents the target JSON data to compose and send back to the client."
msgstr "左側のデータ構造は、マッピングするソースXML（バックエンドのレスポンス）、右側のデータ構造は、合成してクライアントに送り返すターゲットJSONデータである。"

#. type: Title ===
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:243
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:332
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:246
#, fuzzy
msgid "Let’s review the implementation effort the developer needs to undergo in this first iteration of the Individual API:"
msgstr "このIndividual APIの最初のイテレーションで、開発者が受けるべき実装の労力を確認しておこう。"

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:265
#, fuzzy, no-wrap
msgid ""
"<ol>\n"
"    <li>Setup the project (include dependencies, plugins, etc.)</li>\n"
"    <br>\n"
"    <li>Define the Camel routes:</li>\n"
"    <ol type=\"a\">\n"
"        <li><span>The main Camel route<br/>(4 lines of code)</span></li>\n"
"        <li><span>The backend invocation route <br/>(5 lines of code)</span></li>\n"
"    </ol>\n"
"    <br>\n"
"    <li>Define the data transformations:</li>\n"
"    <ol type=\"a\">\n"
"        <li>Request mapping</li>\n"
"        <li>Response mapping</li>\n"
"    </ol>  \n"
"</ol>\n"
"<br>\n"
msgstr "&lt;ol&gt; &lt;li&gt;プロジェクトのセットアップ（依存関係、プラグインなどを含める）。)&lt;/li&gt; &lt;br&gt; &lt;li&gt;Camelルートを定義します。&lt;/li&gt; &lt;ol type=\"a\"&gt; &lt;li&gt;&lt;span&gt;メインの Camel ルート&lt;br/&gt; (4 行のコード)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;Camel ルート&lt;br/&gt; (4 行のコード)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;Camel ルート&lt;/span&gt;を定義します。バックエンドの呼び出しルート&lt;br/&gt;（5行のコード）&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;br&gt; &lt;li&gt;データ変換を定義します。&lt;/li&gt; &lt;ol type=\"a\"&gt; &lt;li&gt;リクエストのマッピング&lt;/li&gt; &lt;li&gt;レスポンスのマッピング&lt;/li&gt; &lt;/ol&gt; &lt;/br&gt; &lt;br&gt; &lt;li&gt;データ変換を定義する。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:269
#, fuzzy
msgid "That’s looks neat to me."
msgstr "私にはそれがすっきりと見えるのです。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:274
#, fuzzy, no-wrap
msgid "Application version 2.0"
msgstr "アプリケーションバージョン2.0"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:277
#, fuzzy
msgid "The real benefit of this development approach, and its simplicity using Camel Quarkus, becomes more evident when the DEV team receives a new version 2.0 of the Individual API, released by the Design team, with a new operation to be implemented."
msgstr "この開発手法の本当のメリット、そしてCamel Quarkusを使ったそのシンプルさは、DEVチームがDesignチームからリリースされたIndividual APIの新しいバージョン2.0を受け取り、新しい操作を実装することでより明らかになるのだそうです。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:279
#, fuzzy
msgid "Version 1.0 was only intended for internal consumption. Now there is a demand to expose the service externally, which requires introducing a level of data protection to ensure the customer’s data is kept confidential."
msgstr "バージョン1.0は社内での利用のみを想定していました。現在では、サービスを外部に公開する要求があり、お客様のデータの機密性を確保するために、データ保護のレベルを導入する必要があります。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:281
#, fuzzy
msgid "Version 2.0 defines a new operation the developer needs to implement. Hopefully, the impact on the current code will not be too significant."
msgstr "バージョン2.0では、開発者が実装する必要のある新しい操作を定義しています。現在のコードへの影響があまり大きくないことを祈ります。"

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:282
#, fuzzy, no-wrap
msgid "Second version of the service with a new operation."
msgstr "新操作によるサービス第2弾。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:283
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:405
#, fuzzy, no-wrap
msgid "Second"
msgstr "第2回"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:283
#, no-wrap
msgid "service-version-2.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:286
#, fuzzy
msgid "The main goal of the new operation is to anonymise sensitive data in the JSON response payload to send back. Other than that, the same logic applies, we prepare and invoke the backend in the same manner to obtain the individual data."
msgstr "この新しい操作の主な目的は、送り返すJSONレスポンスペイロードの機密データを匿名化することです。それ以外は同じロジックが適用され、同じようにバックエンドを準備して呼び出し、個々のデータを取得します。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:288
#, fuzzy
msgid "In version 1.0, we saw the routes implemented using the Java DSL. In version 2.0, we will use the XML DSL."
msgstr "バージョン1.0では、Java DSLを使ったルートの実装を見ました。バージョン2.0では、XML DSLを使用する予定です。"

#. type: delimited block =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:292
#, fuzzy
msgid "The use of one DSL over the other is more of a user preference. The XML DSL helps in keeping Camel routes definitions well organised. In contrast, the Java DSL is placed inside Java classes, at times challenging to locate, along with other regular Java code. Your code can get a bit messy and disorganised. Also, the Java DSL doesn’t enjoy the support of graphical tooling, while XML and YAML are DSLs that allow visual helpers."
msgstr "どちらかのDSLを使用するかは、ユーザーの好みによります。XML DSLは、Camelのルート定義をうまく整理するのに役立ちます。一方、Java DSLはJavaクラスの中に配置され、他の通常のJavaコードと一緒に配置されるため、位置がわかりにくい場合があります。そのため、コードが少し乱雑になり、無秩序になる可能性があります。また、Java DSL はグラフィカルなツールのサポートを受けられませんが、XML と YAML は視覚的なヘルパーを使用できる DSL なのです。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:295
#, fuzzy
msgid "Let’s look at the new Camel route definition the developer has coded in XML:"
msgstr "開発者がXMLでコーディングした新しいCamelルート定義を見てみましょう。"

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:304
#, no-wrap
msgid ""
"<route>\n"
"    <from uri=\"direct:getAnonymousDetails\"/>\n"
"    <to uri=\"atlasmap:map/request.adm\"/>\n"
"    <to uri=\"direct:call-backend\"/>\n"
"    <to uri=\"atlasmap:map/response-anonymous.adm\"/> \n"
"</route>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:307
#, fuzzy
msgid "The new route is almost identical to the first one. You will observe only two differences:"
msgstr "新しいルートは、最初のルートとほぼ同じです。違いは2つだけです。"

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:313
#, fuzzy, no-wrap
msgid ""
"<ol>\n"
"    <li>The <code>‘direct’</code> component matches the new <code>‘operationId’</code> in version 2.0</li>\n"
"    <li>The response data mapping is new</li>\n"
"</ol>\n"
msgstr "&lt;ol&gt; &lt;li&gt;&lt;code&gt;'direct'&lt;/code&gt;コンポーネントは、バージョン 2.0 の新しい &lt;code&gt;'operationId'&lt;/code&gt; と一致します&lt;/li&gt; &lt;li&gt;応答データのマッピングは新しい&lt;/li&gt; &lt;/ol&gt; &lt;li&gt;は、バージョン 2.0 の新しい &lt;code&gt;'operationId'&lt;/code&gt; と一致します。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:316
#, fuzzy
msgid "The data mapping definition from 2) looks as follows in the AtlasMap editor:"
msgstr "2)のデータマッピング定義は、AtlasMapエディタでは以下のようになります。"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:317
#, no-wrap
msgid "atlasmap-mapping-response-anonymous.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:321
#, fuzzy
msgid "The main highlight from above is the definition of an `+‘anonymous’+` constant that maps to the `+‘fullName’+` and `+‘passportId’+` target fields:"
msgstr "上記の主なハイライトは、 `‘fullName’` および `‘passportId’` のターゲットフィールドに対応する `‘anonymous’` 定数の定義である。"

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:327
#, fuzzy, no-wrap
msgid ""
"<ul>\n"
"    <li><code>Name:  anonymous</code></li>\n"
"    <li><code>Value: *********</code></li>\n"
"</ul>\n"
msgstr "&lt;ul&gt; &lt;li&gt;&lt;code&gt;Name: anonymous&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;Value: *&lt;strong&gt;&lt;/strong&gt;****&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:330
#, fuzzy
msgid "The new Camel route and the new mapping definition completes the implementation of the new operation in v2.0. At this stage, the developer is sweating from the enormous effort and the long hours it took to deliver the new version."
msgstr "新しいCamelルートと新しいマッピング定義により、v2.0での新しい操作の実装は完了しました。この段階で、開発者は新しいバージョンを提供するための膨大な努力と長い時間から汗をかいています。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:335
#, fuzzy
msgid "Let’s quickly review the actions required to complete the second iteration of the service:"
msgstr "早速、2回目のイテレーションサービスを完了するために必要なアクションを確認してみましょう。"

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:345
#, fuzzy, no-wrap
msgid ""
"<ol>\n"
"    <li>Replace the OpenApi v1.0 with the new specification v2.0</li>\n"
"    <br/>\n"
"    <li><span>Create the new Camel route<br/>(1-line if you copy/paste)</span></li>\n"
"    <br/>\n"
"    <li><span>Create the new data mapping<br/>(2 drag and drop actions if you copy/paste)</span></li>\n"
"</ol>\n"
"<br>\n"
msgstr "&lt;ol&gt; &lt;li&gt;OpenApi v1.0を新しい仕様v2.0に置き換えます。0&lt;/li&gt; &lt;br/&gt; &lt;li&gt;&lt;span&gt;新しい Camel ルートを作成する&lt;br/&gt;（コピー/貼り付けの場合は 1 行）&lt;/span&gt;&lt;/li&gt; &lt;br/&gt;新しい Camel ルートを作成する&lt;br/&gt;（コピー/貼り付けの場合は 1 行）&lt;/span&gt;&lt;/li&gt;。&lt;li&gt;&lt;span&gt;新しいデータ マッピングを作成する&lt;br/&gt;（コピー/貼り付けの場合、2 つのドラッグ アンド ドロップ操作）&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;br&gt;。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:348
#, fuzzy
msgid "Again, not bad at all. The effort was truly minimal."
msgstr "今回も、まったく悪くない。労力は本当に最小限でした。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:353
#, fuzzy, no-wrap
msgid "Trying out the operations"
msgstr "操作を試してみる"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:356
#, fuzzy
msgid "To discover and explore services in code-first developments, you need to ensure the project auto-generates the specification from the implemented code."
msgstr "コードファーストの開発でサービスを発見し探索するには、プロジェクトが実装されたコードから仕様を自動生成するようにする必要があります。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:358
#, fuzzy
msgid "In our case (contract-first) the specification is already provided. We can easily expose it and embed a Swagger-UI client using the Smallrye OpenApi extension that Quarkus provides. Ensure your POM file includes the following dependency:"
msgstr "私たちの場合（コントラクトファースト）、仕様はすでに提供されています。Quarkusが提供するSmallrye OpenApi拡張を使用して、簡単にそれを公開し、Swagger-UIクライアントを埋め込むことができます。POMファイルに次の依存関係が含まれていることを確認してください。"

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:365
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-openapi</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:368
#, fuzzy
msgid "For more detailed information on how to expose OpenApi definitions, you can read the following section in the Quarkus documentation. There are different settings we can configure to our liking. We’ve configured some of them. If you feel curious, we encourage you to look at the source code provided with the article."
msgstr "OpenApiの定義を公開する方法の詳細については、Quarkusドキュメントの次のセクションを参照してください。私たちの好みに合わせて設定できるさまざまな設定があります。そのうちのいくつかを構成してみました。気になるようであれば、記事で提供されているソースコードを見てみることをお勧めします。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:370
#, fuzzy
msgid "We can compile and run our application locally with the following command:"
msgstr "以下のコマンドで、アプリケーションをローカルにコンパイルし、実行することができます。"

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:374
#, no-wrap
msgid "./mvnw clean quarkus:dev\n"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:380
#, fuzzy
msgid "Remember, our Camel integration invokes a legacy backend. We’ve provided one included in the GitHub project. Ensure you read and follow the ‘Readme.md’ instructions to prepare the stub (legacy backend)."
msgstr "私たちのCamel統合は、レガシーバックエンドを呼び出すことを忘れないでください。GitHubプロジェクトに含まれるものを提供します。スタブ (レガシーバックエンド) を準備するために、'Readme.md' の指示を読み、それに従っていることを確認してください。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:383
#, fuzzy
msgid "Once the application is up and running, open a browser and discover the service by entering the following URL on your address bar:"
msgstr "アプリケーションを起動したら、ブラウザを開き、アドレスバーに以下のURLを入力してサービスを発見してください。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:385
#, no-wrap
msgid "\thttp://localhost:8080/camel/openapi.json\n"
msgstr "\thttp://localhost:8080/camel/openapi.json\n"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:387
#, fuzzy
msgid "Click and try out the v1.0 operation:"
msgstr "クリックして、v1.0の動作をお試しください。"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:388
#, no-wrap
msgid "swagger-op1.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:391
#, fuzzy
msgid "Enter a dummy value for the `+{id}+` parameter, for example, `+‘123’+`. If your legacy system (stub) is up and running, you should obtain the following response:"
msgstr "`{id}` パラメーターにダミーの値、例えば `‘123’` を入力してください。レガシーシステム（スタブ）が稼働している場合、以下のようなレスポンスが得られるはずです。"

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:401
#, no-wrap
msgid ""
"{\n"
"  \"passportId\": \"123456789-A\",\n"
"  \"fullName\": \"Some One\",\n"
"  \"addressLine1\": \"1 Some Street\",\n"
"  \"addressLine2\": \"Somewhere SOME C0D3\",\n"
"  \"addressLine3\": \"UK\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:404
#, fuzzy
msgid "Now, give a go to our v.2.0 operation:"
msgstr "それでは、v.2.0の操作に挑戦してください。"

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:405
#, no-wrap
msgid "swagger-op2.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:408
msgid "You should obtain the following response:"
msgstr "次のような応答が得られるはずです。"

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:418
#, no-wrap
msgid ""
"{\n"
"  \"addressLine1\": \"1 Some Street\",\n"
"  \"addressLine2\": \"Somewhere SOME C0D3\",\n"
"  \"addressLine3\": \"UK\",\n"
"  \"passportId\": \"**********\",\n"
"  \"fullName\": \"**********\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:421
#, fuzzy
msgid "You will observe some of the fields now anonymised as per the mapping settings in AtlasMap."
msgstr "AtlasMapのマッピング設定により、一部のフィールドが匿名化されていることがお分かりになると思います。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:423
#, fuzzy, no-wrap
msgid "Last words"
msgstr "最後の言葉"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:426
#, fuzzy
msgid "This article shows you how choosing Camel Quarkus, and a contract-first implementation approach provides great simplicity and low maintenance cost. It allows rapid functionality growth."
msgstr "この記事では、Camel Quarkusを選択し、契約優先の実装アプローチによって、非常にシンプルで低いメンテナンスコストを実現する方法を紹介します。これにより、迅速な機能拡張が可能になります。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:428
#, fuzzy
msgid "When your processes move data from sources to targets, use Camel Quarkus, probably the best fit for the job when building integration services."
msgstr "プロセスでソースからターゲットにデータを移動する場合は、統合サービスを構築する際におそらく最も適した仕事であるCamel Quarkusを使用します。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:430
#, no-wrap
msgid "Resources:"
msgstr "リソース:"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:433
#, fuzzy
msgid "Here is a list of related resources you may be interested to explore:"
msgstr "ここでは、ご興味のある関連リソースをご紹介します。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:435
#, fuzzy
msgid "https://github.com/brunoNetId/camel-quarkus-api-first[Github project] where the blog's source code lives."
msgstr "ブログのソースコードが置かれている link:https://github.com/brunoNetId/camel-quarkus-api-first[Githubプロジェクト]。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:436
#, fuzzy
msgid "https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1[Article] covering Camel Quarkus and Camel K, also based in Quarkus."
msgstr "キャメル・クォークスと、同じくクォークスを拠点とするキャメルKを取材した link:https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1[記事]です。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:437
#, fuzzy
msgid "https://camel.apache.org/camel-quarkus/next/index.html[Camel Quarkus] home page in Apache Camel."
msgstr "Apache Camelの link:https://camel.apache.org/camel-quarkus/next/index.html[Camel Quarkusの]トップページ。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:438
#, fuzzy
msgid "https://www.atlasmap.io/[AtlasMap] home page, the visual data mapping tool that accelerates your implementation."
msgstr "導入を加速するビジュアルデータマッピングツール「 link:https://www.atlasmap.io/[AtlasMap]」ホームページ。"

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:438
#, fuzzy
msgid "https://www.apicur.io/[Apicurio] home page, the Design time tool to create your OpenAPI contracts."
msgstr "OpenAPIのコントラクトを作成するためのデザインタイムツール、 link:https://www.apicur.io/[Apicurioの]ホームページです。"

#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid ""
#~ "layout: post\n"
#~ "title: 'Riding Camel Quarkus: effortless APIs'\n"
#~ "date: 2022-04-05\n"
#~ "tags: camel openapi api integration atlasmap rest swagger-ui data-mapping web\n"
#~ "synopsis: Discover Camel, the swiss-knife of integration brought to Quarkus. The example encourages API best practices, with effortless coding effort showcasing AtlasMap for data transformation.\n"
#~ "author: bmeseguer\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: 'Camel Quarkusに乗る：容易なAPI'\n"
#~ "date: 2022-04-05\n"
#~ "tags: camel openapi api integration atlasmap rest swagger-ui data-mapping web\n"
#~ "synopsis: Quarkusに導入されたインテグレーションのスイス・アーミーナイフ、Camelを発見してください。この例では、データ変換用のAtlasMapを紹介する簡単なコーディング作業で、APIのベストプラクティスを奨励しています。\n"
#~ "author: bmeseguer\n"
#~ "---\n"
