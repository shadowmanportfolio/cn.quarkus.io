# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "ebernard"
msgstr "エベナール"

#. type: YAML Front Matter: date
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "2019-08-01 14:00:00.000 +0200"
msgstr "2019-08-01 14:00:00.000 +0200"

#. type: YAML Front Matter: layout
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "Hibernate ORM lets you generate or update the database schema. Let's explore when to use such option in combination with live coding."
msgstr "Hibernate ORMでは、データベーススキーマを生成または更新することができます。ライブコーディングと組み合わせて、このようなオプションを使用する場合について検討してみましょう。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "extension hibernate development-tips"
msgstr "拡張機能 hibernate 開発のヒント"

#. type: YAML Front Matter: title
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "Tips to use Hibernate ORM with Quarkus profiles and live coding mode"
msgstr "QuarkusプロファイルとライブコーディングモードでHibernate ORMを使用するためのヒント"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:12
#, fuzzy
msgid "Quarkus live coding (aka dev mode) is really useful for applications that mix front end or services and database access.  There are a few common approaches to make the best of it."
msgstr "フロントエンドやサービスとデータベースアクセスが混在するアプリケーションでは、Quarkus live coding(別名dev mode)が本当に便利です。それを最大限に活用するためには、いくつかの一般的なアプローチがあります。"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:18
#, fuzzy
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`.  That way for every change to your app and in particular to your entities, the database schema will be properly recreated and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.  This is best to perfectly control your environment and works magic with Quarkus live coding mode: your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr "最初の選択肢は、 `quarkus.hibernate-orm.database.generation=drop-and-create` と `import.sql` を併用することです。この方法では、アプリ、特にエンティティーに変更があるたびに、データベーススキーマが適切に再作成され、データフィクスチャ( `import.sql` に保存されている)が使用されて、ゼロから再配置されます。これは、環境を完全にコントロールするのに最適で、Quarkusのライブコーディングモードで魔法のように動作します。エンティティーの変更や `import.sql` への変更は、アプリケーションを再起動することなくすぐにピックアップされ、スキーマが更新されます。"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:23
#, fuzzy
msgid "By default, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).  You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr "デフォルトでは、Hibernate ORM は起動時に `/import.sql` ファイル内の SQL 文を読み込んで実行します (存在する場合)。 `application.properties` のプロパティー `quarkus.hibernate-orm.sql-load-script` を変更することで、ファイル名を変更することができます。"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:33
#, fuzzy
msgid "The second approach is to use `quarkus.hibernate-orm.database.generation=update`.  This approach is best when you do many entity changes but still need to work on a copy of the production data or if you want to reproduce a bug that is based on specific database entries.  `update` is a best effort from Hibernate ORM and will fail in specific situations including altering your database structure which could lead to data loss.  For example if you change structures related to the foreign key, Hibernate ORM might have to bail out.  But for development, these limitations are acceptable."
msgstr "2つ目の方法は、 `quarkus.hibernate-orm.database.generation=update` を使用することです。 `update` は、Hibernate ORM の最善の努力ですが、データベース構造を変更してデータ損失につながる可能性があるなど、特定の状況では失敗します。例えば、外部キーに関連した構造を変更した場合、Hibernate ORMは救済しなければならないかもしれません。しかし、開発者にとっては、これらの制限は許容できるものです。"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:38
#, fuzzy
msgid "The third approach is to use `quarkus.hibernate-orm.database.generation=none`.  This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.  Or if you use a database schema migration tool like https://quarkus.io/guides/flyway[Flyway].  When you make a change to an entity, make sure to adapt the database schema accordingly."
msgstr "3つ目のアプローチは `quarkus.hibernate-orm.database.generation=none` を使用することです。このアプローチは、本番データのコピーで作業しているが、スキーマの進化を完全に制御したい場合に最適です。または、 link:https://quarkus.io/guides/flyway[Flyway] のようなデータベーススキーマ移行ツールを使用する場合です。エンティティーに変更を加える場合は、それに応じてデータベーススキーマを適応させてください。"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:40
#, fuzzy
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment. You have been warned :)"
msgstr "`quarkus.hibernate-orm.database.generation` `drop-and-create` と `update` を本番環境で使用しないでください。警告されました :)"

#. type: Title ==
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:41
#, fuzzy, no-wrap
msgid "Now with Quarkus profiles"
msgstr "Quarkusのプロファイルを使用するようになりました。"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:47
#, fuzzy
msgid "It becomes really powerful when combined with Quarkus configuration profiles.  You can define different https://quarkus.io/guides/config#configuration-profiles[configuration profiles] to select different behaviors depending on your environment.  This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr "Quarkusの設定プロファイルと組み合わせると、本当に強力になります。異なる link:https://quarkus.io/guides/config#configuration-profiles[設定プロファイル] を定義して、環境に応じて異なる動作を選択することができます。これは、現在必要としている開発スタイルにマッチするHibernate ORMプロパティーのさまざまな組み合わせを定義できるので、非常に優れています。"

#. type: Block title
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:49
#, fuzzy, no-wrap
msgid "application.properties"
msgstr "アプリケーションプロパティー"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:54
#, fuzzy
msgid "# By default, use the clean (data) slate approach %dev.quarkus.hibernate-orm.database.generation = drop-and-create %dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql"
msgstr "# By default, use the clean (data) slate approach %dev.quarkus.hibernate-orm.database.generation = drop-and-create %dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:59
#, fuzzy
msgid "# Use this to incrementally work in your app while keeping data # Useful for rapid dev-check cycles with Quarkus dev mode %dev-with-data.quarkus.hibernate-orm.database.generation = update %dev-with-data.quarkus.hibernate-orm.sql-load-script ="
msgstr "# Use this to incrementally work in your app while keeping data # Useful for rapid dev-check cycles with Quarkus dev mode %dev-with-data.quarkus.hibernate-orm.database.generation = update %dev-with-data.quarkus.hibernate-orm.sql-load-script ="

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:63
#, fuzzy
msgid "# Let's make sure we don't wipe the production data by accident! %prod.quarkus.hibernate-orm.database.generation = none %prod.quarkus.hibernate-orm.sql-load-script = no-file"
msgstr "# Let's make sure we don't wipe the production data by accident! %prod.quarkus.hibernate-orm.database.generation = none %prod.quarkus.hibernate-orm.sql-load-script = no-file"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:70
#, fuzzy
msgid "# Rapid prototyping time! mvn compile quarkus:dev -Dquarkus.profile=dev-with-data"
msgstr "# Rapid prototyping time! mvn compile quarkus:dev -Dquarkus.profile=dev-with-data"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:73
#, fuzzy
msgid "# And now, let's be ready for prod mvn clean package -Pnative -Dquarkus.profile=prod"
msgstr "# And now, let's be ready for prod mvn clean package -Pnative -Dquarkus.profile=prod"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:76
#, fuzzy
msgid "I hope you have found this tip useful.  Hibernate ORM schema update, data fixture, Quarkus dev mode and its configuration profiles are a powerful combination!"
msgstr "このヒントがお役に立てたのではないでしょうか。Hibernate ORMスキーマ更新、データフィクスチャ、Quarkus 開発モードとその構成プロファイルは強力な組み合わせです"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: Tips to use Hibernate ORM with Quarkus profiles and live coding mode\n"
#~ "date: 2019-08-01 14:00:00.000 +0200\n"
#~ "synopsis: Hibernate ORM lets you generate or update the database schema. Let's explore when to use such option in combination with live coding.\n"
#~ "tags: extension hibernate development-tips\n"
#~ "author: ebernard\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Hibernate ORMをQuarkusプロファイルとライブコーディングモードで使用するためのヒント\n"
#~ "date: 2019-08-01 14:00:00.000 +0200\n"
#~ "synopsis: Hibernate ORMでは、データベーススキーマを生成したり、更新したりすることができます。このようなオプションをライブコーディングと組み合わせて使うタイミングを探ってみましょう。\n"
#~ "tags: extension hibernate development-tips\n"
#~ "author: ebernard\n"
#~ "---\n"
