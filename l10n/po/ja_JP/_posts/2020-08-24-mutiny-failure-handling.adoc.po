# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "クスコフィエ"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "2020-08-24"
msgstr "2020-08-24"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "Failures are an inherent part of any software. This post explains how you handle them with Mutiny"
msgstr "どんなソフトウェアにも失敗はつきものです。この記事では、Mutinyで失敗を処理する方法について説明します。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny"
msgstr "反動的な反乱"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "How to handle failures with Mutiny"
msgstr "Mutinyで失敗したときの対処法"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:11
#, fuzzy
msgid "In the past week, I got several questions about failure handling with Mutiny. So, maybe it deserves a bit more explanation."
msgstr "先週、Mutinyの失敗処理についていくつか質問を受けました。そのため、もう少し説明が必要かもしれません。"

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:12
#, fuzzy, no-wrap
msgid "Failures are events"
msgstr "失敗はイベント"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:15
#, fuzzy
msgid "First, Mutiny is an event-driven reactive programming library. With Mutiny, you handle events. An upstream `Uni` or `Multi` propagates these events and gives you the possibility to process them. These events can be *item*, *completion*, *cancellation*, and... *failure*:"
msgstr "まず、Mutinyはイベント駆動型のリアクティブ・プログラミング・ライブラリです。Mutinyでは、イベントを処理します。上流の `Uni` または `Multi` がこれらのイベントを伝播し、あなたにイベントを処理する可能性を与えます。これらのイベントには、 *アイテム*、 *完了*、 *キャンセル*、そして... *失敗*があります。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:24
#, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onItem().invoke(i -> System.out.println(\"Received item \" + i))\n"
"    .onCompletion().invoke(() -> System.out.println(\"We are done!\"))\n"
"    .onCancellation().invoke(() -> System.out.println(\n"
"        \"The downstream does not want our items anymore!\")\n"
"    )\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:28
#, no-wrap
msgid ""
"    .onFailure().invoke(t -> System.out.println(\n"
"        \"Oh no! We received a failure: \" + t.getMessage())\n"
"    )\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:30
#, fuzzy, no-wrap
msgid "What can you do when you receive a failure?"
msgstr "失敗作を受け取ったときにはどうすればいいのでしょうか？"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:33
#, fuzzy
msgid "In addition to calling an action, as shown in the previous snippet, there are multiple things you can do when you receive a failure."
msgstr "前のスニペットで示したようにアクションを呼び出す以外にも、失敗を受け取ったときにできることは複数あります。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:35
#, fuzzy
msgid "The most common thing to do is to recover. You can recover by passing a specific item or with another `Uni`:"
msgstr "最も一般的なのは、リカバリーです。特定のアイテムを渡したり、別の `Uni` を使って回復することができます。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:41
#, no-wrap
msgid ""
"upstream\n"
"    .onFailure().recoverWithItem(failure -> \"hello (fallback)\")\n"
"    .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:45
#, no-wrap
msgid ""
"upstream\n"
"    .onFailure().recoverWithUni(failure -> getAnotherUni(failure))\n"
"    .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:48
#, fuzzy
msgid "On Multi, you can also recover by providing another `Multi` or completing the stream:"
msgstr "マルチでは、別の `Multi` を提供したり、ストリームを完成させることで回復することもできます。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:53
#, no-wrap
msgid ""
"upstream\n"
"  .onFailure().recoverWithCompletion();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:56
#, fuzzy
msgid "If you have faith in your system, you can also *retry*. Note that you need to make sure you can retry the operation safely first!"
msgstr "システムを信頼している場合は、 *リトライ*することもできます。ただし、最初に安全にリトライできるかどうかを確認する必要があります。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:63
#, no-wrap
msgid ""
"upstream\n"
"      .onFailure().retry()\n"
"        .withBackOff(Duration.ofSeconds(1), Duration.ofSeconds(10)).atMost(10)\n"
"      .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:66
#, fuzzy
msgid "You can also transform the failure. For example, you can map a low-level failure into something more business-friendly. It propagates that second failure downstream, hiding the low-level failure:"
msgstr "また、失敗を変換することもできます。例えば、低レベルの障害を、よりビジネスに適したものにマッピングすることができます。その2つ目の障害を下流に伝播させ、低レベルの障害を隠します。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:71
#, no-wrap
msgid ""
"Uni.createFrom().failure(new IOException(\"boom\"))\n"
"      .onFailure().transform(t -> new BusinessException(t))\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:73
#, fuzzy, no-wrap
msgid "Failures are terminal"
msgstr "失敗はターミナル"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:76
#, fuzzy
msgid "Failures are terminal events. If your upstream propagates a failure, it means it can't operate normally. For Uni, that's not a problem, as you can only have an item or a failure. But for multi, it's a bit more complicated."
msgstr "故障は末期症状です。上流が失敗を伝播するということは、正常な動作ができないということです。ユニの場合は、アイテムか失敗かのどちらかしかないので、問題ありません。しかし、マルチの場合は少し複雑です。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:78
#, fuzzy
msgid "Even if you recover, by handling the failure, you won't get the rest of the stream. Your upstream is ... *kaputt*."
msgstr "たとえ回復したとしても、失敗を処理することで、残りの流れを手に入れることはできません。あなたの上流は...... *カパット*です。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:80
#, fuzzy
msgid "Let's take the following code:"
msgstr "以下のコードを見てみましょう。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:94
#, no-wrap
msgid ""
"List<String> list = Multi.createFrom().range(0, 10)\n"
"      .onItem().invoke(v -> {\n"
"              if (v == 7) {\n"
"                throw new IllegalArgumentException(\"We don't like seven!\");\n"
"              }\n"
"      })\n"
"      .onFailure().recoverWithItem(7)\n"
"      .map(integer -> integer.toString())\n"
"      .onItem().invoke(s -> System.out.println(s))\n"
"      .collectItems().asList()\n"
"      .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:97
#, fuzzy
msgid "It produces [1, 2, 3, 4, 5, 6, 7] and not the rest of the stream. When the `onItem().invoke()` stage is called with `7`, it produces a failure. That stops the stream. It does not process more items from upstream."
msgstr "1, 2, 3, 4, 5, 6, 7]が生成され、残りのストリームは生成されません。 `onItem().invoke()` ステージが `7` で呼び出されると、失敗が生じます。これにより、ストリームが停止します。上流からのさらなるアイテムは処理されません。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:99
#, fuzzy
msgid "So what can we do? Isolate!"
msgstr "では、どうすればいいのか？孤立せよ"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:101
#, fuzzy
msgid "When a *stage* sends a failure, it sends a failure terminating the stream and cancels its subscription to the upstream (informing that it does not need more items as it's not operating correctly). So, if we need to continue processing the other items from upstream; we just need to isolate that failure and be sure we do not cancel our subscription to the upstream."
msgstr "*ステージ*が失敗を送信すると、ストリームを終了する失敗を送信し、アップストリームへのサブスクリプションをキャンセルします（正常に動作していないため、これ以上のアイテムは必要ないことを通知します）。したがって、アップストリームからの他のアイテムの処理を継続する必要がある場合は、その障害を分離し、アップストリームへのサブスクリプションをキャンセルしないようにする必要があります。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:103
#, fuzzy
msgid "The most common approach to achieve this is the following:"
msgstr "これを実現するための最も一般的な手法は次の通りです。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:121
#, no-wrap
msgid ""
"List<String> list = Multi.createFrom().range(0, 10)\n"
"    .onItem().transformToUniAndConcatenate(i ->\n"
"            // Isolate the failure in this block\n"
"            Uni.createFrom().item(i)\n"
"                    .onItem().invoke(v -> {\n"
"                        if (v == 7) {\n"
"                            throw new IllegalArgumentException(\"We don't like seven!\");\n"
"                        }\n"
"                    })\n"
"                    .onFailure().recoverWithItem(7)\n"
"    )\n"
"    .map(integer -> integer.toString())\n"
"    .onItem().invoke(s -> System.out.println(s))\n"
"    .collectItems().asList()\n"
"    .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:124
#, fuzzy
msgid "Basically, we isolate the potentially failing operation. If it fails, we recover. But the cancellation only cancels that item, not the full stream, meaning we will receive the next one item and so on. This code produces the expected list."
msgstr "基本的には、障害が発生する可能性のある操作を分離します。もし失敗しても回復します。しかし、キャンセルはそのアイテムをキャンセルするだけで、ストリーム全体をキャンセルするわけではないので、次のアイテムを受け取ることになります。このコードは期待通りのリストを生成します。"

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:125
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:128
#, fuzzy
msgid "Here you go, you can now handle failure and continue the streams gracefully."
msgstr "これで、失敗しても潔く流れを継続できるようになりましたね。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:130
#, fuzzy
msgid "If you want to know more about Mutiny, check the following video:"
msgstr "Mutiny」についてもっと知りたい方は、次のビデオをご覧ください。"

#. type: delimited block +
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:133
#, fuzzy, no-wrap
msgid "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kWlrGtwvOxg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n"
msgstr "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kWlrGtwvOxg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: 'How to handle failures with Mutiny'\n"
#~ "date: 2020-08-24\n"
#~ "tags: reactive mutiny\n"
#~ "synopsis: Failures are an inherent part of any software. This post explains how you handle them with Mutiny\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Mutinyでの失敗の対処法」について\n"
#~ "date: 2020-08-24\n"
#~ "tags: reactive mutiny\n"
#~ "synopsis: 失敗はどんなソフトウェアにもつきものです。この記事では、Mutinyでどのように失敗を処理するかを説明します。\n"
#~ "author: cescoffier\n"
#~ "---\n"
