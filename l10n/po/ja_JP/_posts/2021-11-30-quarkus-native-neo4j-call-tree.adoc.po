# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: 2022-04-30 15:51+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, no-wrap
msgid "galderz"
msgstr "galderz"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, no-wrap
msgid "2021-11-30"
msgstr "2021-11-30"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, no-wrap
msgid "Inspect the call paths that get included into a Quarkus Native app with Neo4j"
msgstr "Neo4jでQuarkus Nativeアプリに含まれるコールパスを検査する"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, no-wrap
msgid "development-tips native neo4j"
msgstr "development-tips native neo4j"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, no-wrap
msgid "Inspecting the Quarkus Native call path universe with Neo4j"
msgstr "Neo4jでQuarkus Nativeのコールパスユニバースを検査する"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:17
msgid "This blog post is the culmination of an idea that Sanne (Grinovero) floated to me during some lunch, back at a time when we, remote engineers, would occasionally meet face to face and have the opportunity to share ideas spontaneously.  I'm unsure if the lunch was in Neuchâtel or Barcelona, but essentially Sanne was diagnosing an issue and he struggled with GraalVM's native image analysis call tree text output.  He wondered whether that data could instead be formatted differently and imported into a graph database for easier inspection.  I'm happy to announce that the GraalVM and Mandrel 21.3.0 releases include improvements to address this particular issue."
msgstr "このブログ記事は、私たちリモートエンジニアが時々顔を合わせて、自然にアイデアを共有する機会があった頃に、Sanne (Grinovero) がランチの時に浮かんだアイデアの集大成です。そのランチがヌーシャテルだったかバルセロナだったかは定かではありませんが、基本的にSanneはある問題を診断していて、彼はGraalVMのネイティブな画像解析コールツリーのテキスト出力に苦労していました。彼は、そのデータを別のフォーマットにして、グラフデータベースにインポートして簡単に検査できないかと考えていました。GraalVMとMandrel 21.3.0のリリースには、この問題を解決するための改良が含まれていることを発表できて嬉しいです。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:20
msgid "Essentially, they bring much needed improvements for analysing code paths that get included in the native binary.  Debugging these code paths aims to answer questions such as:"
msgstr "基本的には、ネイティブ・バイナリに含まれるコード・パスを分析するために必要な改良が施されています。これらのコードパスをデバッグすることで、以下のような疑問に答えることができます。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:23
msgid "why does this code path get included in the native binary?"
msgstr "なぜこのコードパスがネイティブ・バイナリに含まれているのか？"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:26
msgid "These code paths can be optionally reported when enabling printing of the analysis call tree.  With Quarkus, this is achieved by passing in the `-Dquarkus.native.enable-reports` option."
msgstr "これらのコードパスは、解析コールツリーの出力を有効にする際に、オプションで報告することができます。Quarkusでは、 `-Dquarkus.native.enable-reports` オプションを渡すことで実現できます。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:30
msgid "Before 21.3.0, when Quarkus instructed a GraalVM distribution to print out the call tree, the resulting output would be a single text file representing the call tree in a https://www.graalvm.org/reference-manual/native-image/Reports[custom tree format].  This text file would contain a lot of duplicated information and could be as big as several gigabytes in size."
msgstr "21.3.0より前のバージョンでは、QuarkusがGraalVMディストリビューションにコールツリーの出力を指示すると、 link:https://www.graalvm.org/reference-manual/native-image/Reports[カスタムツリー形式]のコールツリーを表す1つのテキストファイルが出力されていました。このテキストファイルには、多くの重複した情報が含まれており、サイズは数ギガバイトにもなります。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:42
msgid "GraalVM 21.3.0 introduces the possibility of representing call trees as CSV files instead of a single text file.  These CSV files contain method information and different connections between them (e.g. direct calls, virtual calls, overrides, etc).  One immediate benefit is that there's no information duplication, so the CSV files can be several times smaller in size compared to the corresponding text file.  In some situations, they can be as much as several thousands times smaller.  However, the main reason why this feature was implemented was to make it easier to feed the call tree to other tools, like graph databases such as https://neo4j.com/[Neo4j].  Once imported, a user can execute graph queries over the call tree, which makes it easier to extract relevant information and answer questions like the one above."
msgstr "GraalVM 21.3.0では、コールツリーを単一のテキストファイルではなく、CSVファイルで表現することができるようになりました。これらのCSVファイルには、メソッド情報とメソッド間のさまざまな接続（直接呼び出し、仮想呼び出し、オーバーライドなど）が含まれています。直接的な利点としては、情報の重複がないため、CSVファイルのサイズは対応するテキストファイルに比べて数倍小さくなります。場合によっては、数千倍小さくなることもあります。しかし、この機能が実装された主な理由は、コールツリーを link:https://neo4j.com/[Neo4j]のようなグラフデータベースなどの他のツールに簡単に提供できるようにするためです。インポートされると、ユーザーはコールツリー上でグラフクエリを実行することができ、関連する情報を抽出して上記のような質問に答えることが容易になります。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:44
msgid "In this blog post, you will learn how to:"
msgstr "このブログ記事では、以下の方法をご紹介します。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:46
msgid "Instruct a Quarkus application to generate call tree CSV files."
msgstr "コールツリーのCSVファイルを生成するようにQuarkusアプリケーションに指示"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:47
msgid "Run a Neo4j graph database within a container"
msgstr "コンテナ内でのNeo4jグラフ・データベースの実行"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:48
msgid "Import those CSV files into a Neo4j graph database."
msgstr "それらのCSVファイルをNeo4jグラフデータベースにインポート"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:49
msgid "Run Neo4j cypher queries against the graph database to understand the call paths in the Quarkus application."
msgstr "Quarkusアプリケーションのコールパスを理解するためにグラフデータベースに対してNeo4jサイファークエリを実行"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:54
msgid "This blog post uses the https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-quickstart[Quarkus Hibernate ORM quickstart] as a sample Quarkus application.  Download the application and execute:"
msgstr "このブログ記事では、 link:https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-quickstart[Quarkus Hibernate ORMクイックスタート]をサンプルQuarkusアプリケーションとして使用しています。アプリケーションをダウンロードして実行してください。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:60
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.container-build=true \\\n"
"    -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:21.3-java11 \\\n"
"    -Dquarkus.native.enable-reports\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:63
msgid "The above command will generate a native binary and the CSV files mentioned above."
msgstr "上記のコマンドを実行すると、ネイティブ・バイナリと上記のCSVファイルが生成されます。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:65
msgid "Next, start Neo4j in a container:"
msgstr "次に、Neo4jをコンテナで起動します。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:75
#, no-wrap
msgid ""
"$ export NEO_PASS=...\n"
"$ podman run \\\n"
"    --detach \\\n"
"    --rm \\\n"
"    --name testneo4j \\\n"
"    -p7474:7474 -p7687:7687 \\\n"
"    --env NEO4J_AUTH=neo4j/${NEO_PASS} \\\n"
"    neo4j:latest\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:80
msgid "Once the container is running, you can access the Neo4j browser via http://localhost:7474[http://localhost:7474].  Use `neo4j` as the username and the value of `NEO_PASS` as the password to log in."
msgstr "コンテナが起動したら、 link:http://localhost:7474[http://localhost:7474] から Neo4j ブラウザにアクセスできます。ユーザー名には `neo4j` を、パスワードには `NEO_PASS` の値を使用してログインします。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:82
msgid "To import the CSV files, we need the following cypher script which will import the data within the CSV files and create graph database nodes and edges:"
msgstr "CSVファイルをインポートするためには、CSVファイル内のデータをインポートし、グラフデータベースのノードとエッジを作成する以下のcypherスクリプトが必要です。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:86
#, no-wrap
msgid "include::../assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:91
msgid "You can download the cypher script from link:../assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[this link] or copy and paste it in a file called `import.cypher`."
msgstr "link:../assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[このリンク]からサイファースクリプトをダウンロードするか、 `import.cypher` というファイルにコピー＆ペーストしてください。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:96
msgid "The script above is generic enough to work with any Quarkus application, but it will only work with Mandrel 21.3.0.Final.  GraalVM CE 21.3.0.Final lacks the symbolic links to make the `csv` file references work, so if you're on this GraalVM CE, you'll have to modify the CSV file names with project specific, timestamped, file names."
msgstr "上記のスクリプトは、どのようなQuarkusアプリケーションでも動作するように汎用的なものですが、Mandrel 21.3.0.Finalでのみ動作します。GraalVM CE 21.3.0.Finalでは、 `csv` ファイルの参照を動作させるためのシンボリックリンクがありませんので、このGraalVM CEを使用している場合は、CSVファイル名をプロジェクト固有のタイムスタンプ付きのファイル名に変更する必要があります。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:98
msgid "Next, copy the import cypher script and CSV files into Neo4j's import folder:"
msgstr "次に、インポートサイファースクリプトとCSVファイルをNeo4jのインポートフォルダにコピーします。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:102
#, no-wrap
msgid ""
"$ podman cp target/*-native-image-source-jar/reports testneo4j:/var/lib/neo4j/import\n"
"$ podman cp import.cypher testneo4j:/var/lib/neo4j\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:105
msgid "After copying all the files, invoke the import script:"
msgstr "すべてのファイルをコピーしたら、インポートスクリプトを起動します。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:108
#, no-wrap
msgid "$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} -f import.cypher\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:114
msgid "If you need to reimport the data, you'll need to clear the previously imported data, otherwise you'll get errors.  You can clear the previously imported data by executing:"
msgstr "データを再インポートする必要がある場合は、以前にインポートされたデータをクリアする必要があります。そうしないとエラーが発生してしまいます。以前にインポートしたデータをクリアするには、次のように実行します。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:118
#, no-wrap
msgid ""
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"MATCH(n) DETACH DELETE n\"\n"
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"DROP CONSTRAINT unique_vm_id\"\n"
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"DROP CONSTRAINT unique_method_id\"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:122
msgid "Once the import completes (shouldn't take more than a couple of minutes), go to the Neo4j browser and you'll be able to observe a small summary of the data in the graph:"
msgstr "インポートが完了したら（数分以上かかることはありません）、Neo4jブラウザにアクセスして、データの小さなサマリーをグラフで見ることができます。"

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:123
#, no-wrap
msgid "data-loaded-side.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:127
msgid "The data above shows that there are ~100000 methods, and just over ~300000 edges between them."
msgstr "上のデータを見ると、約100,000のメソッドがあり、それらの間には約300,000のエッジがあることがわかります。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:133
msgid "Next, let's try out some cypher queries to explore the call graph.  I don't know anything about the Quarkus application itself, but given it's a Hibernate ORM application, I can assume that some sort of `persist` method will be called.  Go into the browser and type a query for this:"
msgstr "次に、コールグラフを調べるために、いくつかのサイファークエリを試してみましょう。Quarkusアプリケーション自体については何も知りませんが、Hibernate ORMアプリケーションであることから、ある種の `persist` メソッドが呼び出されることが想定されます。ブラウザにアクセスして、このクエリを入力してください。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:137
#, no-wrap
msgid "match (m:Method) where m.name = \"persist\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:139
#, no-wrap
msgid "persist-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:147
msgid "We got some hits, but the default style for the nodes presented is not very readable.  We can however tweak the stylesheet as shown by https://neo4j.com/developer/neo4j-browser/#browser-styling-adv[this guide].  Two useful modifications for this use case is to increase the default `node` `diameter` value to say, `150px`.  The other modification is to switch `node.Method` `caption` value to `\"{display}\"`."
msgstr "いくつかヒットしましたが、表示されるノードのデフォルトスタイルはあまり読みやすくありません。しかし、 link:https://neo4j.com/developer/neo4j-browser/#browser-styling-adv[このガイド]で紹介されているように、スタイルシートを調整することができます。今回のケースでは、デフォルトの `node` `diameter` の値を `150px` に変更することができます。もう一つの修正は、 `node.Method` `caption` の値を `\"{display}\"` に切り替えることです。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:152
msgid "`display` is a field within each method that shows a shortened id of the method, that includes package and classname (only the first letter of each), and the method name in camel case with single letters.  E.g. `j.p.EM.persist` would be the `display` for the `persist` method in `javax.persistence.EntityManager`."
msgstr "`display` は、各メソッド内のフィールドで、パッケージとクラス名（それぞれの最初の文字のみ）、およびキャメルケースのシングルレターのメソッド名を含む、メソッドの短縮されたIDを示します。例： `j.p.EM.persist` は、 `javax.persistence.EntityManager` の `persist` メソッドの `display` となります。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:154
msgid "Let's repeat the query after modifying the browser style and moving the nodes to clearly view them:"
msgstr "ブラウザのスタイルを変更し、ノードを移動してはっきりと見えるようにしてから、クエリを繰り返してみましょう。"

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:155
#, no-wrap
msgid "persist-query-big-nodes.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:160
msgid "We can see above that one of the `persist` is to `javax.persistence.EntityManager`.  This is the JPA method for persisting entities and the one we'll be exploring further.  Let's narrow the query down to that one to have a clearer view:"
msgstr "上では、 `persist` の一つが `javax.persistence.EntityManager` になっているのがわかります。これはエンティティを永続化するためのJPAのメソッドであり、これからさらに探索していくものです。より明確な情報を得るために、クエリをその1つに絞ってみましょう。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:164
#, no-wrap
msgid "match (m:Method) where m.name = \"persist\" and m.type =~ \".*EntityManager\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:166
#, no-wrap
msgid "entitymanager-persist-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:169
msgid "Note that if we hover over the node we get information about the method itself."
msgstr "なお、ノードの上にカーソルを置くと、メソッド自体の情報が表示されます。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:177
msgid "Going back to the original question, we wanted to find out why a given code path gets included.  One way to do it is to start by the method itself, and then walk backwards to find what links (e.g. direct calls, virtual calls, overrides...etc)  exist to that method within a certain depth.  For example, let's try to find what other methods have a direct link to the `persist` method:"
msgstr "最初の質問に戻りますが、私たちはあるコードパスがなぜ含まれるのかを知りたいと思いました。一つの方法は、メソッド自体から始めて、ある深さの範囲内でそのメソッドにどのようなリンク（例えば、直接呼び出し、仮想呼び出し、オーバーライド...など）が存在するかを逆に探すことです。例えば、 `persist` のメソッドに直接リンクしている他のメソッドを探してみましょう。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:181
#, no-wrap
msgid "match (m:Method) <- [*1..1] - (o) where m.name = \"persist\" and m.type =~ \".*EntityManager\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:183
#, no-wrap
msgid "entitymanager-persist-depth-1-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:187
msgid "Aha, so there's only one path and that's a virtual call (i.e., an interface call) that comes from the `create` method in the `org.acme.hibernate.orm.FruitResource` class, which takes a `org.acme.hibernate.orm.Fruit` parameter and returns a `javax.ws.rs.core.Response`."
msgstr "それは、 `org.acme.hibernate.orm.FruitResource` クラスの `create` メソッドから来る仮想呼び出し（つまり、インターフェース呼び出し）で、 `org.acme.hibernate.orm.Fruit` パラメータを受け取り、 `javax.ws.rs.core.Response` を返します。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:189
msgid "Next, let's expand the query further and try to find all links with a depth of 2 to the `persist` method:"
msgstr "次に、クエリをさらに拡張して、 `persist` メソッドへの深さが2のリンクをすべて探してみましょう。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:193
#, no-wrap
msgid "match (m:Method) <- [*1..2] - (o) where m.name = \"persist\" and m.type =~ \".*EntityManager\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:195
#, no-wrap
msgid "entitymanager-persist-depth-2-query.png"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:197
#, no-wrap
msgid "subclass.png"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:199
#, no-wrap
msgid "reflection-access-holder.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:206
msgid "As we peel further back, we start to see some generated classes that invoke the `create` method in `org.acme.hibernate.orm.FruitResource`.  `org.acme.hibernate.orm.FruitResource_ClientProxy` and `org.acme.hibernate.orm.FruitResource_Subclass` both directly call the method.  One more interesting call comes from the `FruitResource_create_d0...` method in `com.oracle.svm.core.reflect.ReflectionAccessorHolder`.  This essentially means that the `create` method has been registered in GraalVM for access via reflection."
msgstr "さらにさかのぼると、 `org.acme.hibernate.orm.FruitResource` で `create` メソッドを呼び出す生成クラスがいくつか見られます。 `org.acme.hibernate.orm.FruitResource_ClientProxy` と `org.acme.hibernate.orm.FruitResource_Subclass` は、いずれもこのメソッドを直接呼び出しています。さらに興味深いのは、 `com.oracle.svm.core.reflect.ReflectionAccessorHolder` の `FruitResource_create_d0…​` メソッドからの呼び出しです。これは本質的に、 `create` メソッドが、リフレクションによるアクセスのためにGraalVMに登録されていることを意味します。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:210
msgid "If we query for a depth of 3, we'll find that the reflection access is an entry point.  So, we've found the shortest path to the `persist` method, but that's not necessarily the only path:"
msgstr "深度3で照会すると、リフレクションアクセスがエントリーポイントであることがわかります。というわけで、 `persist` メソッドへの最短経路を見つけましたが、必ずしもそれだけではありません。"

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:211
#, no-wrap
msgid "entitymanager-persist-depth-3-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:217
msgid "You can continue going up layers, but unfortunately if you reach a depth with too many nodes, the Neo4j browser will be unable to visualize them all.  When that happens, you can alternatively run the queries directly against the cypher shell. E.g."
msgstr "階層を上がっていくことはできますが、残念ながらノード数が多すぎる深度に達した場合、Neo4jブラウザはそれらすべてを可視化することができません。そのような場合は、代わりにcypher shellに対して直接クエリを実行することができます。例えば、以下のようになります。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:221
#, no-wrap
msgid ""
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \\\n"
"    \"match (m:Method) <- [*1..10] - (o) where m.name = 'persist' and m.type =~ '.*EntityManager' return *\"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:224
msgid "After you are done with the exploration don't forget to shut down (`kill`) the `testneo4j` container:"
msgstr "探査が終わったら、 `testneo4j` コンテナをシャットダウン( `kill`)するのを忘れないでください。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:226
#, no-wrap
msgid "$ podman kill testneo4j\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:228
msgid "Note that this will also remove the container (since we used `--rm` when we created it)."
msgstr "これにより、コンテナも削除されることに注意してください（作成時に `--rm` を使用したため）。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:231
msgid "We've only just started exploring the possibilities of Neo4j for this use case, and so we still have to learn all the tips and tricks to make the most out of it.  As we learn more we'll share any tips or query templates with the community."
msgstr "私たちは、このユースケースのためにNeo4jの可能性を探り始めたばかりなので、それを最大限に活用するためのヒントやトリックをすべて学ばなければなりません。より多くのことが分かったら、ヒントやクエリ・テンプレートをコミュニティで共有します。"

#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid ""
#~ "layout: post\n"
#~ "title: 'Inspecting the Quarkus Native call path universe with Neo4j'\n"
#~ "date: 2021-11-30\n"
#~ "tags: development-tips native neo4j\n"
#~ "synopsis: 'Inspect the call paths that get included into a Quarkus Native app with Neo4j'\n"
#~ "author: galderz\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: 「Neo4jでQuarkus Nativeのコールパスユニバースを検査する\n"
#~ "date: 2021-11-30\n"
#~ "tags: development-tips native neo4j\n"
#~ "synopsis: 'Neo4jでQuarkus Nativeアプリに含まれるコールパスを検査する'\n"
#~ "author: galderz\n"
#~ "---\n"
