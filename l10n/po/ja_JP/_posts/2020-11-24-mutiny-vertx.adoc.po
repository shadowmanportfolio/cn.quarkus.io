# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: 2022-04-30 17:22+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, no-wrap
msgid "2020-11-24"
msgstr "2020-11-24"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, no-wrap
msgid "Discover the Mutiny variant of the Vert.x API"
msgstr "Vert.x API の Mutiny版について"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, no-wrap
msgid "reactive mutiny vert.x"
msgstr "reactive mutiny vert.x"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, no-wrap
msgid "Mutiny and the Reactiverse"
msgstr "MutinyとReactiverse"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:16
msgid "I had the question multiple times: how do I use Eclipse Vert.x in Quarkus? Indeed, you can use Vert.x in Quarkus.  You can deploy _verticles_, communicate with the event bus, or use anything from the Vert.x ecosystem.  But, you can also use the Mutiny variant of Vert.x in Quarkus, and get a seamless experience with the other reactive APIs offered by Quarkus.  Several posts have already mentioned this, but it deserves a specific blog post.  So, here we are."
msgstr "よく次の質問をされます:「QuarkusでEclipse Vert.xを使うにはどうすればいいですか?」確かに、QuarkusではVert.xを使用することができます。 _Verticles_ をデプロイしたり、イベントバスと通信したり、Vert.xエコシステムのものなら何でも使えます。しかし、QuarkusでVert.xのMutinyバリアントを使用して、Quarkusが提供する他のReactive APIとシームレスな体験を得ることもできます。これについてはすでにいくつかの記事で触れていますが、具体的なブログ記事に値する内容です。というわけで、ここで紹介します。"

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:17
#, no-wrap
msgid "Eclipse Vert.x"
msgstr "Eclipse Vert.x"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:24
msgid "https://vertx.io[Vert.x] is a toolkit to build reactive applications.  The Vert.x ecosystem is enormous.  From HTTP and data access abilities to messaging clients via microservice and security facilities, the Vert.x ecosystem is remarkably diverse and versatile.  To understand that variety, just check the https://vertx.io/docs/[Vert.x documentation].  That makes Vert.x popular in many areas such as web applications, IoT gateways, banking applications and so on."
msgstr "https://vertx.io[Vert.x] はリアクティブなアプリケーションを構築するためのツールキットです。Vert.x のエコシステムは膨大です。HTTP やデータアクセス機能からマイクロサービスやセキュリティー機能を介したメッセージングクライアントまで、Vert.x のエコシステムは非常に多様で汎用性に富んでいます。その多様性を理解するには、Vert https://vertx.io/docs/[Vert.xのドキュメント]をチェックしてください。そのため、Vert.xはWebアプリケーション、IoTゲートウェイ、銀行アプリケーションなど、多くの分野で人気があります。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:27
msgid "As you may know, Quarkus is based on Vert.x.  Under the hood, there is a managed Vert.x instance that powers the rest of Quarkus."
msgstr "ご存知のように、QuarkusはVert.xをベースにしています。裏側では、マネージドのVert.xのインスタンスが存在し、Quarkusに力を与えています。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:29
msgid "image:/assets/images/posts/mutiny-vertx/architecture.png[width=50%]"
msgstr "image:/assets/images/posts/mutiny-vertx/architecture.png[width=50%]"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:32
msgid "When Quarkus serves a HTTP endpoint, under the hood, there is a Vert.x HTTP server handling the request and response.  That's also true for messaging, gRPC and almost any I/O."
msgstr "QuarkusがHTTPエンドポイントを提供する場合、フードの下には、リクエストとレスポンスを処理するVert.x HTTPサーバーがあります。これは、メッセージング、gRPC、およびほぼすべてのI/Oにも当てはまります。"

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:33
#, no-wrap
msgid "The Vert.x \"bare\" API and friends"
msgstr "Vert.xの「素の」APIとその仲間たち"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:37
msgid "Vert.x provides multiple APIs.  Let's focus on the \"bare\" one for now."
msgstr "Vert.xは複数のAPIを提供しています。ここでは「素」のものに注目してみましょう。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:40
msgid "Following the reactive nature of Vert.x, the API contains mostly asynchronous methods.  These methods are following a syntax convention:"
msgstr "Vert.x のリアクティブな性質にしたがって、API のほとんどを非同期メソッドが占めています。これらのメソッドは構文規則に従っています:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:46
#, no-wrap
msgid ""
"public void doSomething(param1, param2, Handler<AsyncResult<T>> handler) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:52
msgid "The interesting part is the last parameter.  It's a function, a callback to be more precise, that gets called when the operation completes or fails.  Indeed, the asynchronous nature of Vert.x does not allow using `try/catch` blocks.  So you need to pass a continuation callback, invoked with the outcome."
msgstr "興味深いのは最後のパラメーターです。これは関数、より正確にはコールバックで、操作が完了したときや失敗したときに呼び出されます。実際、Vert.xの非同期の性質上、 `try/catch`  ブロックを使用することはできません。そのため、結果に応じて呼び出される継続コールバックを渡す必要があります。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:55
msgid "`AsyncResult` is a structure capturing this outcome.  It contains the result (of type `<T>`) produced by the operation, or the failure if it failed."
msgstr "`AsyncResult`  は、この結果をキャプチャする構造体です。これは、操作によって生成された結果 ( `<T>`  型)、または失敗した場合の失敗を含みます。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:57
msgid "Let's take an example:"
msgstr "例を挙げてみましょう:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:68
#, no-wrap
msgid ""
"vertx.fileSystem()\n"
"    .readFile(\"my-file.txt\", ar -> {\n"
"        if (ar.failed()) {\n"
"            System.out.println(\"D'oh! Cannot read the file: \" + ar.cause());\n"
"        } else {\n"
"            System.out.println(\"File content is: \" + ar.result());\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:74
msgid "This code reads a file, and as it's an asynchronous operation, invokes the callback when the file is read.  The `readFile` method reads the complete content of the file and accumulates it in a _buffer_.  The callback receives the asynchronous result containing either the file's content (`ar.result()`) or a failure.  Vert.x invokes this callback when the operation has either completed or failed."
msgstr "このコードはファイルを読み込み、非同期操作であるため、ファイルが読み込まれたときにコールバックを呼び出します。 `readFile`  メソッドは、ファイルの完全な内容を読み込み、 _バッファ_ に蓄積します。コールバックは、ファイルの内容 ( `ar.result()` ) または失敗を含む非同期の結果を受け取ります。Vert.x は、操作が完了または失敗したときにこのコールバックを呼び出します。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:81
msgid "Vert.x also supports streams thanks to the `ReadStream` and `WriteStream` classes.  A `ReadStream` represents a stream of data you can read.  So you can attach a callback invoked on every item traversing the stream.  A `WriteStream` is a data source.  You can push items to a `WriteStream.` These items will be consumed by a `ReadStream`:"
msgstr "Vert.x は `ReadStream`  と `WriteStream`  クラスのおかげでストリームもサポートしています。 `ReadStream`  は読み込み可能なデータのストリームを表します。そのため、ストリームを通過するすべての項目で呼び出されるコールバックをアタッチすることができます。 `WriteStream`  はデータソースです。アイテムを `WriteStream.`  にプッシュすることができます。 これらのアイテムは `ReadStream`  によって消費されます。"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:103
#, no-wrap
msgid ""
"vertx.fileSystem()\n"
"    .open(\"my-file.txt\", new OpenOptions().setRead(true), ar -> {\n"
"        if (ar.failed()) {\n"
"            System.out.println(\n"
"                    \"D'oh! Cannot read the file: \" + ar.cause()\n"
"            );\n"
"        } else {\n"
"            AsyncFile file = ar.result();\n"
"            // AsyncFile is a read stream, we can read from it:\n"
"            file\n"
"                    .exceptionHandler(t ->\n"
"                        System.out.println(\"Failure while reading the file: \" + t)\n"
"                    )\n"
"                    // Reads the file chunk by chunk\n"
"                    .handler(buffer ->\n"
"                        System.out.println(\"Received buffer: \" + buffer)\n"
"                    );\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:107
msgid "Vert.x streams do not implement Reactive Streams.  Vert.x provides a different back-pressure protocol."
msgstr "Vert.x ストリームは、Reactive Streams を実装していません。Vert.x は別のバックプレッシャープロトコルを提供します。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:112
msgid "Why are these API shaping rules important? Vert.x does not provide a single API.  The \"bare\" API presented above is just one of the proposed API.  It also provides API in Kotlin, API for RX Java, and so on."
msgstr "なぜこれらの API シェーピングルールが重要なのか?Vert.xは単一のAPIを提供していません。上で紹介した「素の」APIは、提案されているAPIの1つに過ぎません。他にもKotlinでのAPIやRX JavaでのAPIなども提供されています。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:116
msgid "These APIs are **generated**.  Vert.x provides a code generator that _ translates_ the Vert.x \"bare\" API into the other APIs.  Because all methods are well-formed, the generator understands how they should be adapted."
msgstr "これらの API は *生成され* ます。Vert.x は、Vert.x の \"むき出しの\" API を他の API に変換するコード ジェネレーターを提供します。すべてのメソッドは整形されているので、ジェネレータはどのように適応されるべきかを理解しています。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:118
msgid "image:/assets/images/posts/mutiny-vertx/generation.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/generation.png[]"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:121
msgid "The generated code exposes a different API; each method delegating to the \"bare\" API.  Asynchronous methods and streams can follow different transformations, so the resulting API uses the right idioms."
msgstr "生成されたコードは、異なる API を公開しており、各メソッドは「素」の API にデリゲートします。非同期メソッドとストリームは異なる変換を行うことができるので、生成されたAPIは適切なイディオムを使用します。"

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:122
#, no-wrap
msgid "The Vert.x Mutiny API"
msgstr "Vert.x Mutiny API"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:127
msgid "Mutiny is an event-driven reactive programming library.  It's not related to Vert.x.  However, we have written a code generator that generates the Mutiny variant for the Vert.x API:"
msgstr "Mutiny はイベント駆動型のリアクティブプログラミングライブラリです。Vert.xとは関係ありませんが、Vert.x API用のMutiny版を生成するコードジェネレータを書いています。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:129
msgid "image:/assets/images/posts/mutiny-vertx/mutiny.png[]"
msgstr "<span class=\"image\"><img src=\"/assets/images/posts/mutiny-vertx/mutiny.png\" alt=\"mutiny\"></span>"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:131
msgid "The transformations are straightforward:"
msgstr "変換は簡単です。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:133
msgid "`io.vertx` package => `io.vertx.mutiny` package"
msgstr "`io.vertx`  パッケージ ⇒ `io.vertx.mutiny`  パッケージ"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:134
msgid "Asynchronous methods => method returning a `Uni<T>`"
msgstr "非同期メソッド⇒メソッドが返す `Uni<T>`"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:135
msgid "`ReadStreams<T>` => can be consumed as `Multi<T>`"
msgstr "`ReadStreams<T>`  ⇒消費することができます。 `Multi<T>`"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:136
msgid "`WriteStreams<T>` => can be consumed as Reactive Streams `Subscriber<T>`"
msgstr "`WriteStreams<T>` ⇒ リアクティブストリームとして消費することができます。 `Subscriber<T>`"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:138
msgid "It also adapts the Vert.x back pressure protocol to Reactive Streams, as Mutiny implements Reactive Streams."
msgstr "また、MutinyがReactive Streamsを実装しているため、Vert.xのバックプレッシャープロトコルをReactive Streamsに適応させています。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:140
msgid "For example, the first example from above becomes:"
msgstr "例えば、上から1番目の例では、次のようになります:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:146
#, no-wrap
msgid ""
"Uni<Buffer> uni = vertx.fileSystem().readFile(\"my-file.txt\");\n"
"uni.subscribe()\n"
"  .with(it -> System.out.println(\"File content is: \" + it));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:150
msgid "One difference between the two APIs is related to laziness. The Vert.x \"bare\" API triggers the operation as soon as the method is called.  The Mutiny variant expects a subscription to trigger the operation."
msgstr "2つのAPIの違いの1つは、怠惰性に関連しています。Vert.x の \"素の\" API は、メソッドが呼び出されるとすぐに操作をトリガーします。Mutiny 版では、操作をトリガーするためにサブスクリプションを期待しています。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:152
msgid "The stream example from above becomes:"
msgstr "上からのストリームの例は以下のようになります。"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:164
#, no-wrap
msgid ""
"Uni<AsyncFile> uni = vertx.fileSystem()\n"
"        .open(\"my-file.txt\", new OpenOptions().setRead(true));\n"
"uni\n"
"    // Gets a Multi to read the file:\n"
"    .onItem().transformToMulti(asyncFile -> asyncFile.toMulti())\n"
"    // Gets the buffers one by one:\n"
"    .subscribe().with(\n"
"       buffer -> System.out.println(\"Received buffer: \" + buffer)\n"
");\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:166
#, no-wrap
msgid "A bit more than this"
msgstr "もう少し補足"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:170
msgid "The Mutiny variant does not only apply the rules exposed in the previous section.  For asynchronous methods, it also provides:"
msgstr "Mutiny版は、前のセクションで公開されたルールを適用するだけではありません。非同期メソッドに対しても提供します:"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:172
msgid "`xAndAwait()` methods - blocks the caller thread until the outcome is received. In the case of a failure, throws a `RuntimeException`"
msgstr "`xAndAwait()`  メソッド - 結果を受け取るまで呼び出し元のスレッドをブロックします。失敗した場合は `RuntimeException` を発生させます"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:173
msgid "`xAndForget()` methods - triggers the operation, discard the outcome"
msgstr "`xAndForget()`  methods - 操作をトリガし、結果を破棄します。"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:178
#, no-wrap
msgid ""
"// Read the content of the file in a blocking manner:\n"
"Buffer content   = vertx.fileSystem().readFileAndAwait(\"my-file.txt\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:184
#, no-wrap
msgid ""
"// Open and close the file\n"
"// Closing the file is an asynchronous operation (returning a Uni).\n"
"// We trigger the operation and discard the outcome\n"
"vertx.fileSystem().open(\"my-file.txt\", new OpenOptions().setRead(true))\n"
"    .subscribe().with(file -> file.closeAndForget());\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:186
#, no-wrap
msgid "Where can we find this API?"
msgstr "このAPIはどこにありますか?"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:190
msgid "At the moment of writing, we only provide Vert.x core and Vert.x clients (MongoDB, Redis, Web client, Mqtt, and so on).  We are extending the support to cover the full Vert.x stack."
msgstr "執筆時点では、Vert.xコアとVert.xクライアント(MongoDB、Redis、Webクライアント、Mqttなど)のみを提供しています。私たちはVert.x スタック全体をカバーするようにサポートを拡張しているところです。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:193
msgid "To use the Mutiny clients, you need to add the right dependency to your project.  Browse https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[the list of dependency] to pick the one you need."
msgstr "Mutinyクライアントを使用するには、適切な依存関係をプロジェクトに追加する必要があります。 https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[依存関係のリスト]を見て、必要なものを選んでください。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:195
msgid "For example, to you use the Mutiny variant of the Vert.x Web client, add the following dependency:"
msgstr "例えば、Vert.x Web クライアントの Mutiny 版を使用するには、以下の依存関係を追加します:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:203
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"  <version>...</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:206
msgid "Once you have the dependency, just create the web client instance:"
msgstr "依存関係ができたら、あとはWebクライアントのインスタンスを作成するだけです:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:210
#, no-wrap
msgid "@Inject Vertx vertx; // Inject the managed io.vertx.mutiny.core.Vertx instance\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:212
#, no-wrap
msgid "private WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:220
#, no-wrap
msgid ""
"@PostConstruct\n"
"public void init() {\n"
"  client = WebClient.create(vertx, new WebClientOptions()\n"
"    .setDefaultHost(\"localhost\")\n"
"    .setDefaultPort(8082)\n"
"  );\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:226
#, no-wrap
msgid ""
"private Uni<String> call(String path) {\n"
"  return client\n"
"    .get(path).send()\n"
"    .onItem().transform(HttpResponse::bodyAsString);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:229
msgid "Something missing? Open an issue on https://github.com/smallrye/smallrye-reactive-utils/issues[SmallRye Reactive Utils]."
msgstr "何か足りないものがあった場合は、 https://github.com/smallrye/smallrye-reactive-utils/issues[SmallRye Reactive Utils] に課題を提起してください。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:231
msgid "The Javadoc is available http://smallrye.io/smallrye-reactive-utils/apidocs/[here]."
msgstr "Javadocは http://smallrye.io/smallrye-reactive-utils/apidocs/[こちら] にあります。"

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:232
#, no-wrap
msgid "The road ahead: Vert.x 4!"
msgstr "今後の道:Vert.x 4!"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:236
msgid "Vert.x 4 is coming soon! We are already working in Quarkus and the different satellite projects to migrate.  With Vert.x 4, a new generator has been implemented (following the same code generation approach), paving the road to a smooth upgrade."
msgstr "Vert.x 4が間もなく登場します!既にQuarkusと異なるサテライトプロジェクトで移行作業を行っています。Vert.x 4では、新しいジェネレータが実装されており(同じコード生成アプローチを踏襲しています)、スムーズなアップグレードへの道が開かれています。"

#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid ""
#~ "layout: post\n"
#~ "title: Mutiny and the Reactiverse\n"
#~ "date: 2020-11-24\n"
#~ "tags: reactive mutiny vert.x\n"
#~ "synopsis: Discover the Mutiny variant of the Vert.x API\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: MutinyとReactiverse\n"
#~ "date: 2020-11-24\n"
#~ "tags: reactive mutiny vert.x\n"
#~ "synopsis: Vert.x API の Mutiny 版を探索する\n"
#~ "author: cescoffier\n"
#~ "---\n"
