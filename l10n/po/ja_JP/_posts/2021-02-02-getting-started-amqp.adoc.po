# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: 2022-04-30 17:11+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, no-wrap
msgid "2021-02-02"
msgstr "2021-02-02"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, no-wrap
msgid "How to build a Quarkus application using AMQP in less than 10 minutes"
msgstr "AMQPを使用したQuarkusアプリケーションを10分以内に構築する方法"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, no-wrap
msgid "amqp"
msgstr "amqp"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, no-wrap
msgid "Getting Started with AMQP in your Quarkus application"
msgstr "QuarkusアプリケーションでのAMQP入門"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:13
msgid "https://www.amqp.org/[AMQP 1.0] is a standard for passing messages between applications or organizations.  It connects systems, feeds business processes with the information they need, and reliably handles communication between systems.  AMQP is a robust and mature protocol widely used in event-driven applications."
msgstr "link:https://www.amqp.org/[AMQP 1.0] は、アプリケーションや組織間でメッセージを渡すための標準仕様です。AMQP はシステムを接続し、ビジネスプロセスに必要な情報を供給し、システム間の通信を確実に処理します。AMQP は、イベント駆動型のアプリケーションで広く使用されている堅牢で成熟したプロトコルです。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:17
msgid "This post is the equivalent of the https://quarkus.io/blog/getting-started-kafka/[Kafka getting started post], but focuses on the usage of AMQP.  You will learn how to get started with AMQP in your Quarkus application in less than ten steps.  We will use https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[SmallRye Reactive Messaging] - a declarative approach to building event-driven microservices."
msgstr "この投稿は、 link:https://quarkus.io/blog/getting-started-kafka/[Kafkaの入門記事] と同等の内容を説明しますが、AMQPの使用方法に焦点を当てています。QuarkusアプリケーションでAMQPを使い始める方法を10ステップ以内で学ぶことができます。イベント駆動型マイクロサービスを構築するための宣言的アプローチである link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[SmallRye Reactive Messaging] を使用します。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:19
msgid "The complete code is available from https://github.com/cescoffier/getting-started-quarkus-amqp[GitHub]."
msgstr "完全なコードは link:https://github.com/cescoffier/getting-started-quarkus-amqp[GitHub] から入手できます。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:20
#, no-wrap
msgid "Step 1 - Generate your project"
msgstr "ステップ 1 - プロジェクトの生成"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:25
msgid "Let's start with the very beginning, getting a new project structure with the right dependencies.  Go to https://code.quarkus.io, enter your group id and artifact id.  Then in the extension list, select:"
msgstr "最初の一歩として、正しい依存関係を持つ新しいプロジェクト構造を取得してみましょう。 https://code.quarkus.io  にアクセスして、グループIDとアーティファクトIDを入力します。そして、エクステンションのリストで以下を選択します:"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:27
msgid "SmallRye Reactive Messaging - AMQP Connector"
msgstr "SmallRye Reactive Messaging - AMQP コネクタ"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:28
msgid "RESTEasy Jackson"
msgstr "RESTEasy Jackson"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:30
msgid "image:/assets/images/posts/getting-started-amqp/getting-started-amqp-code.png[]"
msgstr "image:/assets/images/posts/getting-started-amqp/getting-started-amqp-code.png[]"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:32
msgid "You can disable the \"Example Code\" to avoid the generated project containing examples."
msgstr "\"Example Code\" を無効にすることで、生成されたプロジェクトにサンプルコードが含まれないようにすることができます。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:34
msgid "Then, click on __Generate your application__, download the project as a zip file, unzip it, and load it in your favorite IDE."
msgstr "そして、 _Generate your application_ をクリックして、プロジェクトをzipファイルとしてダウンロードし、解凍して、お気に入りのIDEにロードします。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:37
msgid "If you opened the generated `pom.xml`, you would see that the `quarkus-smallrye-reactive-messaging-amqp` and `quarkus-resteasy-jackson` dependencies are declared, so we're ready to write some code."
msgstr "生成された `pom.xml` を開くと、 `quarkus-smallrye-reactive-messaging-amqp` と `quarkus-resteasy-jackson` の依存関係が宣言されていることがわかります。なのでコードを書く準備が出来ています。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:38
#, no-wrap
msgid "Step 2 - What are we going to exchange?"
msgstr "ステップ2 - 何を交換するか?"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:43
msgid "We need something to exchange.  Without much originality, let's say we will send and receive `Movie` objects.  In your project, create the `org.acme.Movie` class with the following content:"
msgstr "交換するものが必要です。あまりオリジナリティを持たずに、 `Movie` オブジェクトを送受信するとしましょう。プロジェクトの中で、以下の内容の `org.acme.Movie` クラスを作成します:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:47
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:105
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:140
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:167
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:209
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:49
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:52
#, no-wrap
msgid ""
"    public String title;\n"
"    public int year;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:54
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:59
msgid "With AMQP, we exchange http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format[messages], which can have multiple _data_ sections (or multiple AMQP sequences, or a single AMQP value section).  In our application, as we are exchanging `Movie` object, it encodes the instances as JSON and transfers it in a single _data_ section.  The `content-type` header is set to `application/json`."
msgstr "AMQPでは、複数の _データ_ セクション(または複数のAMQPシーケンス、または単一のAMQP値セクション)を持つことができる link:http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format[メッセージ] を交換します。私たちのアプリケーションでは、 `Movie` オブジェクトを交換しているので、インスタンスを JSON としてエンコードし、単一の _データ_ セクションで転送しています。 `content-type` ヘッダは `application/json` です。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:62
msgid "AMQP messages are sent to a destination.  To keep things simple, let's name it __movies__."
msgstr "AMQPメッセージを送信先に送信します。簡単にするために、 __movies__ という名前にしてみましょう。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:63
#, no-wrap
msgid "Step 3 - Configure the application"
msgstr "ステップ3 - アプリケーションの設定"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:70
msgid "As said above, we will use Reactive Messaging.  When you use Reactive Messaging, you send messages to a channel and receive them from another channel.  These channels are mapped to the underlying messaging technology by configuration.  We must indicate that our reception and publication channels will use the __movies__ address in our application.  In `src/main/resources/application.properties`, add the following content:"
msgstr "上記の通り、Reactive Messagingを使用します。リアクティブメッセージングを使用する場合、あるチャンネルにメッセージを送信し、別のチャンネルからメッセージを受信します。これらのチャンネルは、設定によって基礎となるメッセージング技術にマッピングされます。受信および公開チャンネルがアプリケーションで __movies__ アドレスを使用することを示す必要があります。 `src/main/resources/application.properties` で、次の内容を追加します:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:78
#, no-wrap
msgid ""
"# The AMQP broker location and credentials\n"
"amqp-host=localhost\n"
"amqp-port=5672\n"
"amqp-username=quarkus\n"
"amqp-password=quarkus\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:82
#, no-wrap
msgid ""
"# Configuring the incoming channel (reading from AMQP)\n"
"mp.messaging.incoming.movies-in.connector=smallrye-amqp\n"
"mp.messaging.incoming.movies-in.address=movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:86
#, no-wrap
msgid ""
"# Configuring the outgoing channel (writing to AMQP)\n"
"mp.messaging.outgoing.movies-out.connector=smallrye-amqp\n"
"mp.messaging.outgoing.movies-out.address=movies\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:89
msgid "After having configured the broker location and credentials (`amqp-` properties), we configure our two channels: `movies-in` (receiving the records) and `movies-out` (publishing the records)."
msgstr "ブローカーの場所と資格情報( `amqp-` プロパティー)を設定した後、 `movies-in` (レコードを受信)と `movies-out` (レコードを公開)の2つのチャンネルを設定します。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:93
msgid "We use the `mp.messaging.incoming.movies-in` prefix to configure the channel.  The `connector` attribute indicates who's responsible for this channel, here the AMQP connector.  We also need to specify the consumed destination using the `address` attribute."
msgstr "チャンネルの設定には、 `mp.messaging.incoming.movies-in` というプレフィックスを使用します。 `connector` 属性は、このチャネルの責任者(ここでは AMQP コネクタ)を示します。また、 `address` 属性を使用して、消費先を指定する必要があります。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:96
msgid "To configure the outbound `movies-out` channel, we use the `mp.messaging.outgoing.movies-out` prefix.  In addition to indicating who's responsible for that channel, we also need to configure the address."
msgstr "アウトバウンド `movies-out` チャネルを設定するには、 `mp.messaging.outgoing.movies-out` プレフィックスを使用します。そのチャネルを担当するコネクタを示すだけでなく、アドレスも設定する必要があります。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:97
#, no-wrap
msgid "Step 4 - Publishing movies to AMQP"
msgstr "ステップ4 - AMQPへのムービーの公開"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:101
msgid "Now, it's time to send messages.  Create the `org.acme.MovieProducer` class with the following content:"
msgstr "さて、いよいよメッセージを送信する時が来ました。以下の内容で `org.acme.MovieProducer` クラスを作成します:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:108
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:111
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:114
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MovieProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:118
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"movies-out\")\n"
"    Emitter<Movie> emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:123
#, no-wrap
msgid ""
"    public void send(Movie movie) {\n"
"        emitter.send(movie);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:128
msgid "In this class, we inject an `Emitter,` i.e., an object responsible for sending a message to a channel.  This emitter is attached to the `movies-out` channel (and will send messages to AMQP).  The connector automatically encoded the content as JSON and set the `content-type` header."
msgstr "このクラスでは、 `Emitter,` 、つまりチャンネルへのメッセージ送信を担当するオブジェクトを注入します。このエミッタは `movies-out` チャンネルにアタッチされています (AMQP にメッセージを送信します)。コネクタは自動的にコンテンツを JSON としてエンコードし、 `content-type` ヘッダを設定します。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:130
msgid "You need to make sure your payload can be encoded to JSON."
msgstr "ペイロードが JSON にエンコードできることを確認する必要があります。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:132
msgid "So, the rest of our application can use the `send` method to send a movie to our AMQP destination."
msgstr "そこで、私たちのアプリケーションの残りの部分は、 `send` メソッドを使用して、AMQP の宛先にムービーを送信することができます。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:133
#, no-wrap
msgid "Step 5 - Consuming movies"
msgstr "ステップ5 - 映画を消費する"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:136
msgid "Let's now look at the other side and retrieve the movies from AMQP."
msgstr "今度は反対側に目を向けて、AMQPからムービーを取得してみましょう。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:143
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:145
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:148
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MovieConsumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:150
#, no-wrap
msgid "    private final Logger logger = Logger.getLogger(MovieConsumer.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:156
#, no-wrap
msgid ""
"    @Incoming(\"movies-in\")\n"
"    public void receive(Movie movie) {\n"
"        logger.infof(\"Got a movie: %d - %s\", movie.year, movie.title);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:159
msgid "Here, we use the `@Incoming` annotation to indicate to Quarkus to call the `receive` method for every received record."
msgstr "ここでは、 `@Incoming` アノテーションを使用して、受信したレコードごとに `receive` メソッドを呼び出すようにQuarkusに指示しています。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:161
msgid "Remember, the movie is encoded into JSON, so we need to help the connector produce a `Movie` from the received JSON."
msgstr "ムービーは JSON にエンコードされていることを思い出してください。コネクタが受信した JSON から `Movie` を生成するのを支援する必要があります。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:163
msgid "Create the `org.acme.JsonToObjectConverter` class with the following content:"
msgstr "以下の内容の `org.acme.JsonToObjectConverter` クラスを作成します:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:172
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.MessageConverter;\n"
"import io.smallrye.reactive.messaging.amqp.IncomingAmqpMetadata;\n"
"import io.vertx.core.json.JsonObject;\n"
"import org.eclipse.microprofile.reactive.messaging.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:175
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.lang.reflect.Type;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:178
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class JsonToObjectConverter implements MessageConverter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:184
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean canConvert(Message<?> in, Type target) {\n"
"        return in.getMetadata(IncomingAmqpMetadata.class)\n"
"                .map(meta -> meta.getContentType().equals(\"application/json\")  && target instanceof Class)\n"
"                .orElse(false);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:186
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:192
#, no-wrap
msgid ""
"    @Override\n"
"    public Message<?> convert(Message<?> in, Type target) {\n"
"        return in.withPayload(((JsonObject) in.getPayload()).mapTo((Class<?>) target));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:198
msgid "This class is a _converter_.  It maps the content of a `Message` to another type.  In the `canConvert` method, we verify that the incoming message is coming from AMQP (so contain the `IncomingAmqpMetadata` metadata) and that the content-type is set to `application/json`.  The `convert` method maps the received `JsonObject` into the target type (`Movie` in our case)."
msgstr "このクラスは _converter_ です。 `Message` の内容を別の型にマッピングします。 `canConvert` メソッドでは、受信メッセージが AMQP からのものであること (つまり `IncomingAmqpMetadata` メタデータを含むこと) と、content-type が `application/json` に設定されていることを確認します。 `convert` メソッドは、受信した `JsonObject` をターゲット型 (私たちの場合は `Movie` ) にマッピングします。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:200
msgid "With this converter, our `consume` method will receive the `Movie` objects."
msgstr "このコンバータにより、 `consume` メソッドは `Movie` オブジェクトを受け取ります。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:201
#, no-wrap
msgid "Step 6 - Sending movies from a REST endpoint"
msgstr "ステップ6 - RESTエンドポイントからのムービーの送信"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:205
msgid "It's quite common to send messages to AMQP from a REST endpoint.  To do this, create the `org.acme.MovieResource` class with the following content:"
msgstr "RESTエンドポイントからAMQPにメッセージを送信することはよくあることです。これを行うには、以下の内容で `org.acme.MovieResource` クラスを作成します:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:217
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:222
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class MovieResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:225
#, no-wrap
msgid ""
"    @Inject\n"
"    MovieProducer producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:233
#, no-wrap
msgid ""
"    @POST\n"
"    public Response send(Movie movie) {\n"
"        producer.send(movie);\n"
"        // Return an 202 - Accepted response.\n"
"        return Response.accepted().build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:237
msgid "This class uses the `MovieProducer` we implemented above to send the `movies`.  You could also use an `Emitter` directly."
msgstr "このクラスは、上で実装した `MovieProducer` を使用して `movies` を送信します。 `Emitter` を直接使用することもできます。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:238
#, no-wrap
msgid "Step 7 - Let's get this running!"
msgstr "ステップ7 - これを実行してみましょう!"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:242
msgid "Well, first, we need an AMQP broker, for example http://activemq.apache.org/components/artemis/[Apache ActiveMQ Artemis].  You can follow the http://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Getting Started with Artemis] documentation, or use the following `docker-compose.yaml` file:"
msgstr "まず、AMQPブローカー、例えば link:http://activemq.apache.org/components/artemis/[Apache ActiveMQ Artemis] が必要です。 link:http://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Getting Started with Artemis] のドキュメントに従うか、以下の `docker-compose.yaml` ファイルを使用してください:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:246
#, no-wrap
msgid "version: '2'\n"
msgstr "version: '2'\n"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:248
#, no-wrap
msgid "services:\n"
msgstr "services:\n"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:258
#, no-wrap
msgid ""
"  artemis:\n"
"    image: vromero/activemq-artemis:2-alpine-latest\n"
"    ports:\n"
"      - \"5672:5672\"\n"
"      - \"8161:8161\"\n"
"      - \"61616:61616\"\n"
"    environment:\n"
"      ARTEMIS_USERNAME: quarkus\n"
"      ARTEMIS_PASSWORD: quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:261
msgid "Copy the `docker-compose.yaml` file in your project, and from a terminal, start your broker with: `docker-compose up -d'"
msgstr "プロジェクト内に `docker-compose.yaml` ファイルをコピーし、ターミナルから、ブローカーを起動します: `docker-compose up -d`"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:263
msgid "Then, run the application using:"
msgstr "そして、アプリケーションを次のように実行します:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:267
#, no-wrap
msgid "./mvnw quarkus:dev\n"
msgstr "./mvnw quarkus:dev\n"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:271
msgid "The application runs in dev mode, meaning that you can still update the code.  It will reload it automatically."
msgstr "アプリケーションは開発モードで動作します。つまり、コードをまだ変更することが出来、変更した場合、自動的にリロードされます。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:273
msgid "In another terminal, emit a few HTTP POST request such as:"
msgstr "別の端末で、次のようなHTTP POSTリクエストをいくつか送信します:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:280
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1994, \"title\":\"The Shawshank Redemption\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:285
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1972, \"title\":\"The Godfather\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:290
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":2008, \"title\":\"The Dark Knight\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:295
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1994, \"title\":\"Pulp Fiction\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:300
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":2010, \"title\":\"Inception\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:303
msgid "In the terminal running the application, you will see:"
msgstr "アプリケーションを実行しているターミナルでは、以下のように表示されます:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:310
#, no-wrap
msgid ""
"...\n"
"2021-01-27 09:29:41,087 INFO  [org.acm.MovieConsumer] (vert.x-eventloop-thread-9) Got a movie: 1994 - Pulp Fiction\n"
"2021-01-27 09:29:41,114 INFO  [org.acm.MovieConsumer] (vert.x-eventloop-thread-9) Got a movie: 2010 - Inception\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:313
msgid "It works!"
msgstr "動いています!"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:314
#, no-wrap
msgid "Step 8 - Native packaging"
msgstr "ステップ8 - ネイティブパッケージ"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:317
msgid "If you have https://quarkus.io/guides/building-native-image[GraalVM installed and configured correctly], you can package this application as a native executable:"
msgstr "link:https://quarkus.io/guides/building-native-image[GraalVMが正しくインストールされ、設定されている場合] 、このアプリケーションをネイティブ実行可能ファイルとしてパッケージ化することができます:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:321
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr "./mvnw package -Pnative\n"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:324
msgid "Then, execute your native executable with: `./target/getting-started-amqp-1.0.0-SNAPSHOT-runner`, and you get a Quarkus application using AMQP starting in a few milliseconds and consuming a ridiculous amount of memory: only 33Mb after 100 ingested records!"
msgstr "そして、 `./target/getting-started-amqp-1.0.0-SNAPSHOT-runner` でネイティブ実行可能ファイルを実行すると、AMQPを使用したQuarkusアプリケーションが数ミリ秒で起動し、とんでもない量:100レコードを取り込んでもたったの33MB!になります。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:330
#, no-wrap
msgid ""
"$ rss getting-started-amqp-1.0.0-SNAPSHOT-runner\n"
"PID 0M COMMAND\n"
"54986 33M ./target/getting-started-amqp-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:332
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:335
msgid "In less than 10 minutes, we have a new Quarkus application using AMQP.  If you want to go further, check the https://quarkus.io/guides/amqp[AMQP guide]."
msgstr "10分もしないうちに、AMQPを使った新しいQuarkusアプリケーションができました。もっと詳しく知りたい方は、 link:https://quarkus.io/guides/amqp[AMQPガイド] をチェックしてみてください。"

#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid ""
#~ "layout: post\n"
#~ "title: Getting Started with AMQP in your Quarkus application\n"
#~ "date: 2021-02-02\n"
#~ "tags: amqp\n"
#~ "synopsis: How to build a Quarkus application using AMQP in less than 10 minutes\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: QuarkusアプリケーションでAMQPを使用するには\n"
#~ "date: 2021-02-02\n"
#~ "tags: amqp\n"
#~ "synopsis: AMQPを使用して10分以内にQuarkusアプリケーションを構築する方法\n"
#~ "author: cescoffier\n"
#~ "---\n"
