# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-08-25-backports-application.adoc:1
#, fuzzy, no-wrap
msgid "gastaldi"
msgstr "ガスタルディ"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-08-25-backports-application.adoc:1
#, fuzzy, no-wrap
msgid "2020-08-25"
msgstr "2020-08-25"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-08-25-backports-application.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-08-25-backports-application.adoc:1
#, fuzzy, no-wrap
msgid "user-story"
msgstr "ユーザストーリー"

#. type: Title =
#: upstream/_posts/2020-08-25-backports-application.adoc:1
#: upstream/_posts/2020-08-25-backports-application.adoc:8
#, fuzzy, no-wrap
msgid "From zero to hero on backporting pull requests"
msgstr "プルリクエストをバックポートする際のゼロからヒーローへ"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:14
#, fuzzy
msgid "The Quarkus project moves fast and when we prepare bugfix releases, we usually have several dozens of pull requests to backport.  The number of pull requests to backport is enormous and doing it via the GitHub UI is inconvenient and takes a lot of time (click PR, copy/paste commit hashes to cherry-pick, remove label, assign milestone, assign milestone to all fixed issues, next) plus some limitation of the UI (it's not possible to sort by merge date to avoid conflicts, for example).  So we decided to automate this work, and built an application.  Of course, with Quarkus!"
msgstr ""
"Quarkusプロジェクトの動きは速く、バグフィックスリリースを準備する際には、通常"
"、バックポートに対する数十件のプルリクエストがあります。バックポートするプル"
"リクエストの数は膨大で、GitHubのUIを使って行うのは不便で、多くの時間がかかり"
"ます（PRをクリックし、チェリーピックするためにコミットハッシュをコピー／ペー"
"ストし、ラベルを削除し、マイルストーンを割り当て、すべての修正済みの問題にマ"
"イルストーンを割り当て、次へ）さらにUIの制限もあります（たとえば、競合を避け"
"るためにマージ日でソートすることはできません）。そこで、この作業を自動化しよ"
"うと考え、アプリケーションを作りました。もちろん、Quarkus!"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:16
#, fuzzy
msgid "Before we dig into the solution, let me give you a quick explanation of our release process."
msgstr "ソリューションをご紹介する前に、当社のリリースプロセスを簡単にご説明します。"

#. type: Title ==
#: upstream/_posts/2020-08-25-backports-application.adoc:17
#, fuzzy, no-wrap
msgid "Release process"
msgstr "発売までの流れ"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:20
#, fuzzy
msgid "The Quarkus Team adopts a `Major.Minor.Patch.Classifier` (eg. _1.7.0.CR1_, _1.7.0.Final_) version pattern. Depending on the version bumped, different processes are adopted:"
msgstr ""
"Quarkusチームでは、 `Major.Minor.Patch.Classifier` （例： _1.7.0.CR1_、 _1.7."
"0.Final_）のバージョンパターンを採用しています。バンプされるバージョンによっ"
"て、異なるプロセスが採用されています。"

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:21
#, fuzzy, no-wrap
msgid "Major and Minor bumps"
msgstr "メジャーとマイナーのバンプ"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:23
#, fuzzy
msgid "Our main branch is always ready for the next major or minor release.  This process is usually very smooth and involves no backporting."
msgstr ""
"私たちのメインブランチは、常に次のメジャーまたはマイナーリリースの準備ができ"
"ています。このプロセスは通常非常にスムーズで、バックポーティングは一切行いま"
"せん。"

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:24
#, fuzzy, no-wrap
msgid "Patch or Classifier bumps"
msgstr "パッチまたはクラシファイアのバンプ"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:27
#, fuzzy
msgid "Whenever a new patched version (or a second CR) is about to be released in Quarkus, our Release team starts backporting commits from pull requests that were merged in the master branch.  How do they know which pull request to grab? We have a `triage/backport?` label that our team add to pull requests for features that would be worth having it in the upcoming patch release."
msgstr ""
"新しいパッチ版（または2つ目のCR）がQuarkusでリリースされようとしているとき、"
"私たちのリリースチームはmasterブランチにマージされたプルリクエストのコミット"
"をバックポートし始めます。どのプルリクエストを取得すればいいのか、どうやって"
"判断しているのでしょうか？Quarkusには `triage/backport?` というラベルがあり、"
"チームは次のパッチリリースに含める価値のある機能をプルリクエストに追加してい"
"ます。"

#. type: Title ==
#: upstream/_posts/2020-08-25-backports-application.adoc:28
#, fuzzy, no-wrap
msgid "How do we automate that?"
msgstr "それをどうやって自動化するか。"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:31
#, fuzzy
msgid "The application basically queries a GitHub repository's merged pull requests and closed issues (using https://docs.github.com/en/graphql[the GraphQL API exposed by GitHub]) containing a certain label and changes their milestones to one selected in the UI (and removing the certain label afterwards).  Applying the changes introduced by these pull-requests (aka. _cherry-picking_) is simplified by providing a button next to each pull-request to copy the necessary `git cherry-pick` commands to the clipboard - we prefer this step to be done manually by the Release engineer."
msgstr ""
"このアプリケーションは基本的に、GitHub "
"リポジトリのマージされたプルリクエストとクローズドなイシュー（ "
"link:https://docs.github.com/en/graphql[GitHub が公開している GraphQL API] "
"を使用）に特定のラベルを含むクエリを実行し、それらのマイルストーンを UI で選"
"択したものに変更します（その後、特定のラベルを削除します）。これらのプルリク"
"エストによって導入された変更の適用（別名： "
"_チェリーピッキング_）は、各プルリクエストの横に、必要な `git cherry-pick` "
"コマンドをクリップボードにコピーするボタンを用意することで簡素化されます。"

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:32
#, fuzzy, no-wrap
msgid "Screenshots"
msgstr "スクリーンショット"

#. type: Title ====
#: upstream/_posts/2020-08-25-backports-application.adoc:33
#, fuzzy, no-wrap
msgid "Choosing a milestone"
msgstr "マイルストーンの選択"

#. type: Target for macro image
#: upstream/_posts/2020-08-25-backports-application.adoc:34
#, no-wrap
msgid "https://raw.githubusercontent.com/quarkusio/quarkus-backports/main/documentation/screenshots/index.png"
msgstr ""

#. type: Title ====
#: upstream/_posts/2020-08-25-backports-application.adoc:36
#, fuzzy, no-wrap
msgid "Choosing the pull requests to be backported"
msgstr "バックポートされるプルリクエストの選択"

#. type: Target for macro image
#: upstream/_posts/2020-08-25-backports-application.adoc:37
#, no-wrap
msgid "https://raw.githubusercontent.com/quarkusio/quarkus-backports/main/documentation/screenshots/backports.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-25-backports-application.adoc:39
#, fuzzy, no-wrap
msgid "Our experience with Quarkus"
msgstr "Quarkusでの経験"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:42
#, fuzzy
msgid "Here you can find a summary of the extensions used in the backports application:"
msgstr "ここでは、バックポートアプリケーションで使用されている拡張機能の概要をご覧い"
"ただけます。"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:44
#, fuzzy
msgid "ArC (CDI): Manages the services lifecycle"
msgstr "ArC（CDI）です。サービスのライフサイクルを管理する"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:45
#, fuzzy
msgid "<<microprofile-config>>: To externalize properties"
msgstr "link:#microprofile-config[[microprofile-"
"config]を]使用しています。プロパティを外部化するには"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:46
#, fuzzy
msgid "RESTEasy: Exposes an endpoint the UI can consume. Also serves the UI using Qute's Type-safe templates (see <<qute>>)."
msgstr ""
"RESTEasy: UIが消費できるエンドポイントを公開します。また、QuteのType-"
"safeテンプレート link:#qute[（[qute]]参照）を使用してUIを提供します。"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:47
#, fuzzy
msgid "<<qute>>: Used on all templates (UI and GraphQL query payload)"
msgstr "[ link:#qute[qute]]を使用しています。すべてのテンプレートで使用（UIとGraphQL"
"クエリペイロード）"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:48
#, fuzzy
msgid "<<rest-client>>: To invoke the https://docs.github.com/en/graphql[GitHub's GraphQL endpoint]"
msgstr ""
"link:#rest-client[[rest-client]]を使用しています。 link:https://docs.github."
"com/en/graphql[GitHubのGraphQLエンドポイント]を呼び出すために"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:49
#, fuzzy
msgid "Cache: For https://github.com/quarkusio/quarkus-backports/blob/291868a9480601dd13b71703e7f8f73552109ded/src/main/java/io/quarkus/backports/GitHubService.java#L84[caching open Milestones] from the GitHub's GraphQL endpoint"
msgstr ""
"キャッシュGitHubのGraphQLエンドポイントから link:https://github.com/"
"quarkusio/quarkus-backports/blob/291868a9480601dd13b71703e7f8f73552109ded/"
"src/main/java/io/quarkus/backports/GitHubService."
"java#L84[開いているマイルストーンをキャッシュ]するためのものです。"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:50
#, fuzzy
msgid "Hibernate Validator: For validating input"
msgstr "Hibernate Validatorです。入力を検証する"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:51
#, fuzzy
msgid "Jackson (JSON library): To parse the result from the GitHub GraphQL endpoint"
msgstr "Jackson（JSONライブラリ）を使用しています。GitHub "
"GraphQLエンドポイントからの結果を解析する。"

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:52
#, no-wrap
msgid "Live Coding"
msgstr "ライブコーディング"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:55
#, fuzzy
msgid "The live coding is a killer feature in Quarkus and provided a quick feedback while classes and methods were changed during development. As a rule of thumb, always use `./mvnw quarkus:dev` while developing a Quarkus application."
msgstr ""
"ライブコーディングはQuarkusの強力な機能であり、開発中にクラスやメソッドが変更"
"されても、すぐにフィードバックを得ることができました。経験則として、"
"Quarkusアプリケーションの開発中は常に `./mvnw quarkus:dev` 。"

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:57
#, fuzzy, no-wrap
msgid "MicroProfile Config"
msgstr "MicroProfile Config"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:62
#, fuzzy
msgid "Configuring which GitHub repository to use (to test or even for non-Quarkus repositories) and the GitHub authentication token (plus a different backport label if necessary) should be easy to configure without changing any source code.  Quarkus uses Microprofile Config, so we externalized these properties.  Quarkus also supports `.env` files, which we used while testing. This made local testing easier by not requiring us to change the `application.properties` directly or setting any environment or system property before running the application."
msgstr ""
"どのGitHubリポジトリを使用するか（テストのため、あるいはQuarkus以外のリポジト"
"リのためにも）、GitHub認証トークン（さらに必要に応じて異なるバックポートラベ"
"ル）を設定することは、ソースコードを変更することなく簡単にできるはずです。"
"QuarkusはMicroprofile "
"Configを使用しているので、これらのプロパティを外部化しました。また、"
"Quarkusは `.env` ファイルをサポートしており、テスト時にはこれを使用しました。"
"これにより、アプリケーションを実行する前に、 `application.properties` を直接"
"変更したり、環境やシステムのプロパティを設定したりする必要がなくなり、ローカ"
"ルテストが容易になりました。"

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:64
#, fuzzy, no-wrap
msgid "Qute"
msgstr "キュート"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:68
#, fuzzy
msgid "Qute is a template engine. We used it to generate the UI and to generate GraphQL queries where simply using GraphQL variables are not enough - for example, https://github.com/quarkusio/quarkus-backports/blob/291868a9480601dd13b71703e7f8f73552109ded/src/main/resources/templates/GitHubService/findIssues.txt#L3-L7[getting issue data from a list of issue numbers].  We used https://quarkus.io/guides/qute#type-safe-templates[Type-safe templates] to generate the UI and the GraphQL queries."
msgstr ""
"Quteは、テンプレートエンジンです。Quteは、UIの生成と、GraphQL変数を使用するだ"
"けでは十分でない場合のGraphQLクエリの生成に使用しました（例： "
"link:https://github.com/quarkusio/quarkus-backports/blob/"
"291868a9480601dd13b71703e7f8f73552109ded/src/main/resources/templates/"
"GitHubService/findIssues.txt#L3-L7[課題番号のリストから課題データを取得する]"
"）。UIとGraphQLクエリの生成には、 link:https://quarkus.io/guides/qute#type-"
"safe-templates[Type-safeテンプレート]を使用しました。"

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:69
#, fuzzy, no-wrap
msgid "Rest Client"
msgstr "レストクライアント"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:72
#, fuzzy
msgid "GraphQL, in a nutshell, means POSTing some JSON data to an HTTP endpoint and parsing the result as a JSON document. Simply that. The Microprofile REST Client is a good option to perform this task, so we came up with this:"
msgstr ""
"GraphQLとは、一言で言えば、あるJSONデータをHTTPエンドポイントにPOSTして、その"
"結果をJSONドキュメントとしてパースすること。単にそれだけです。このタスクを実"
"行するには、Microprofile REST "
"Clientが良い選択肢だと思うので、これを考えました。"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:77
#, fuzzy
msgid "```java import javax.ws.rs.HeaderParam; import javax.ws.rs.POST; import javax.ws.rs.core.HttpHeaders;"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:80
#, fuzzy
msgid "import io.vertx.core.json.JsonObject; import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;"
msgstr ""
"import io.vertx.core.json.JsonObject; import org.eclipse.microprofile.rest."
"client.invent.RegisterRestClient;"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:83
#, fuzzy
msgid "@RegisterRestClient(baseUri = \"https://api.github.com/graphql\")  public interface GraphQLClient {"
msgstr ""
"@RegisterRestClient(baseUri = \"https://api.github.com/graphql\") public "
"interface GraphQLClient {."

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:88
#, fuzzy, no-wrap
msgid ""
"    @POST\n"
"    JsonObject graphql(@HeaderParam(HttpHeaders.AUTHORIZATION) String authentication, JsonObject query);\n"
"}\n"
"```\n"
msgstr ""
"<pre>    ＠POST\n"
"    JsonObject graphql(@HeaderParam(HttpHeaders.AUTHORIZATION) String "
"authentication, JsonObject query);\n"
"}</pre>"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:90
#, fuzzy
msgid "In the GitHubService we can now consume the GraphQLClient object:"
msgstr "GitHubServiceでは、GraphQLClientオブジェクトを利用できます。"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:96
#, fuzzy, no-wrap
msgid ""
"```java\n"
"    @Inject\n"
"    @RestClient\n"
"    GraphQLClient graphQLClient;\n"
"```\n"
msgstr ""
"<pre class=\"highlight\"> `@Inject\n"
"    @RestClient\n"
"    GraphQLClient graphQLClient;`</pre>"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:98
#, fuzzy
msgid "You can see how the client is invoked https://github.com/quarkusio/quarkus-backports/blob/291868a9480601dd13b71703e7f8f73552109ded/src/main/java/io/quarkus/backports/GitHubService.java#L85-L101[here]"
msgstr ""
"クライアントがどのように起動されるかは、 link:https://github.com/quarkusio/"
"quarkus-backports/blob/291868a9480601dd13b71703e7f8f73552109ded/src/main/"
"java/io/quarkus/backports/GitHubService.java#L85-L101[こちら]をご覧ください。"

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:100
#, no-wrap
msgid "Next steps"
msgstr "次のステップ"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:103
#, fuzzy
msgid "Given the nature of dynamic queries, we decided to not use the SmallRye GraphQL extension, but that can be changed when the extension supports that feature."
msgstr ""
"動的なクエリの性質を考慮して、SmallRye GraphQLエクステンションを使用しないこ"
"とにしましたが、エクステンションがその機能をサポートするようになれば、変更す"
"ることができます。"

#. type: Title ==
#: upstream/_posts/2020-08-25-backports-application.adoc:104
#, fuzzy, no-wrap
msgid "Thanks"
msgstr "ありがとうございます。"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:107
#, fuzzy
msgid "This application took ~1 week to be developed (learning GraphQL included). That was made possible due to the following Quarkus team members:"
msgstr ""
"このアプリケーションの開発には約1週間かかりました（GraphQLの学習を含む）。そ"
"れを可能にしたのは、以下のQuarkusチームメンバーのおかげです。"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:110
#, fuzzy
msgid "image:https://github.com/gsmet.png?v=3&s=96[48,48] https://github.com/gsmet[Guillaume Smet]: For the beautiful frontend work"
msgstr ""
"image:https://github.com/gsmet.png?v=3&amp;s=96[alt=48] link:https://github."
"com/gsmet[Guillaume Smet]:美しいフロントエンド作品のために"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:111
#, fuzzy
msgid "image:https://github.com/gastaldi.png?v=3&s=96[48,48] https://github.com/gastaldi[George Gastaldi]: For having fun developing the backend and the GraphQL integration"
msgstr ""
"image:https://github.com/gastaldi.png?v=3&amp;s=96[alt=48] "
"link:https://github.com/gastaldi[George Gastaldi]： "
"バックエンドとGraphQLインテグレーションの開発を楽しんでくれたこと。"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:112
#, fuzzy
msgid "image:https://github.com/dmlloyd.png?v=3&s=96[48,48] https://github.com/dmlloyd[David Lloyd]: For the crazy regular expressions needed to extract issue numbers in commit messages."
msgstr ""
"image:https://github.com/dmlloyd.png?v=3&amp;s=96[alt=48] link:https://github"
".com/dmlloyd[David Lloyd]: コミットメッセージ内の課題番号を抽出するために必要"
"な、クレイジーな正規表現を提供してくれました。"

#. type: Title ==
#: upstream/_posts/2020-08-25-backports-application.adoc:113
#, fuzzy, no-wrap
msgid "More information"
msgstr "詳細情報"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:116
#, fuzzy
msgid "Quarkus Backports sources: https://github.com/quarkusio/quarkus-backports"
msgstr "Quarkus Backportsのソース https://github.com/quarkusio/quarkus-backports"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:117
#, fuzzy
msgid "Quarkus website: https://quarkus.io"
msgstr "Quarkusウェブサイト https://quarkus.io"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:118
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "Quarkus GitHubプロジェクト: https://github.com/quarkusio/quarkus"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:119
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "Quarkus Twitter: https://twitter.com/QuarkusIO"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:120
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "Quarkusチャット https://quarkusio.zulipchat.com/"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:121
#, fuzzy
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Quarkusメーリングリスト: https://groups.google.com/forum/#!forum/quarkus-dev"

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:121
#, fuzzy
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr ""
"link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-"
"checklist-f19180cs-201909-en.pdf[Quarkusを利用する4つの理由]"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: From zero to hero on backporting pull requests\n"
#~ "date: 2020-08-25\n"
#~ "tags: user-story\n"
#~ "author: gastaldi\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: プルリクエストをバックポートする際のゼロからヒーローへ\n"
#~ "date: 2020-08-25\n"
#~ "tags: user-story\n"
#~ "author: gastaldi\n"
#~ "---\n"
