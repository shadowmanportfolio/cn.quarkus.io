# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: 2022-04-30 17:22+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, no-wrap
msgid "2020-11-10"
msgstr "2020-11-10"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, no-wrap
msgid "How to observe events without touching the streams."
msgstr "ストリームに触れずにイベントを観察する方法"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, no-wrap
msgid "reactive mutiny"
msgstr "reactive mutiny"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, no-wrap
msgid "Peeking at the streams"
msgstr "ストリームを覗く"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:15
msgid "Mutiny is an event-driven Reactive Programming library.  Like other reactive programming libraries, it uses streams as the primary construct.  These streams convey events, and your code processes these events.  Most of the time, your code is only interested in item and failure events.  But there are other kinds of events such as cancellation, request, completion, and so on."
msgstr "Mutiny はイベント駆動型のリアクティブプログラミングライブラリです。他のリアクティブ・プログラミング・ライブラリと同様に、主要な構成要素としてストリームを使用します。これらのストリームはイベントを伝え、あなたのコードはこれらのイベントを処理します。ほとんどの場合、あなたのコードはアイテムイベントと失敗イベントにしか興味がありません。しかし、キャンセル、リクエスト、完了などの他の種類のイベントもあります。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:17
msgid "It's not rare that you need to look at these various events to understand better what's going on or implement specific side effects. For example, you may need to close a resource after a completion event or log a message on failure or cancellation."
msgstr "何が起こっているのかをよりよく理解したり、特定の副作用を実装したりするために、これらの様々なイベントを見る必要があることは稀ではありません。例えば、完了イベントの後にリソースを閉じたり、失敗やキャンセル時にメッセージをログに記録したりする必要があるかもしれません。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:21
msgid "For each kind of event, there is an associated _group_ providing the methods to handle that specific event: `onItem()`, `onFailure()`, `onCompletion()` and so on.  These groups provide two methods to peek at the various events without impacting its distribution: `invoke` and `call`.  It does not transform the received event; it notifies you that something happened and let you react."
msgstr "イベントの種類ごとに、その特定のイベントを処理するための方法を提供する関連 _グループ_ があります: `onItem()`, `onFailure()`, `onCompletion()` など。これらのグループは、配信に影響を与えずに様々なイベントを覗くための 2 つの方法を提供しています: `invoke` と `call` 。これらのグループは、受信したイベントを変換するのではなく、何かが起こったことを通知して反応させてくれます。"

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:22
#, no-wrap
msgid "The invoke method"
msgstr "invoke メソッド"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:26
msgid "The `invoke` method is synchronous and does not return anything.  Mutiny invokes the configured callback when the observed stream dispatches the event:"
msgstr "`invoke` メソッドは同期で、何も戻りません。Mutinyは、観測されたストリームがイベントをディスパッチするときに、設定されたコールバックを呼び出します。"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:33
#, no-wrap
msgid ""
"Uni<Integer> u = uni.onItem()\n"
"    .invoke(i -> System.out.println(\"Received item: \" + i));    \n"
"Multi<Integer> m = multi.onItem()\n"
"    .invoke(i -> System.out.println(\"Received item: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:37
msgid "As said above, `invoke` is synchronous.  Mutiny invokes the callback and propagates the event downstream when the callback returns. It blocks the dispatching."
msgstr "上で述べたように、 `invoke` は同期です。Mutinyはコールバックを呼び出し、コールバックが戻ってきたらイベントを下流に伝播させます。ディスパッチをブロックします。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:39
msgid "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:41
msgid "Of course, we highly recommend you not to block."
msgstr "もちろん、ブロックしないことを強くお勧めします。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:43
msgid "The following snippets show how you can log the different types of events."
msgstr "次のスニペットは、さまざまな種類のイベントをログに記録する方法を示しています。"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:53
#, no-wrap
msgid ""
"multi\n"
"  .onSubscribe().invoke(() -> System.out.println(\"⬇️ Subscribed\"))\n"
"  .onItem().invoke(i -> System.out.println(\"⬇️ Received item: \" + i))\n"
"  .onFailure().invoke(f -> System.out.println(\"⬇️ Failed with \" + f))\n"
"  .onCompletion().invoke(() -> System.out.println(\"⬇️ Completed\"))\n"
"  .onCancellation().invoke(() -> System.out.println(\"⬆️ Cancelled\"))\n"
"  .onRequest().invoke(l -> System.out.println(\"⬆️ Requested: \" + l))\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:56
msgid "The arrows from the previous code snippet indicate if the event comes from the upstream (source) or downstream (consumer)."
msgstr "前のコードスニペットの矢印は、イベントが上流(ソース)から来るのか、下流(コンシューマ)から来るのかを示しています。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:59
msgid "The `invoke` method does not change the event, except in one case.  If the `invoke` callback throws an exception, the downstream does not get the actual event but get a failure event instead."
msgstr "`invoke` メソッドは、1 つのケースを除いて、イベントを変更しません。 `invoke` コールバックが例外をスローした場合、ダウンストリームは実際のイベントを取得せず、代わりに失敗イベントを取得します。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:61
msgid "When observing the failure event, if the callback throws an exception, Mutiny propagates a `CompositeException` aggregating the original failure and the callback failure."
msgstr "失敗イベントを観測しているときに、コールバックが例外を投げると、Mutinyは元の失敗とコールバックの失敗を集約した `CompositeException` を伝播します。"

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:62
#, no-wrap
msgid "The call method"
msgstr "呼び出し方法"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:65
msgid "Unlike `invoke`, `call` is asynchronous, and the callback returns a `Uni<?>` object."
msgstr "`invoke` とは異なり、 `call` は非同期で、コールバックは `Uni<?>` オブジェクトを返します。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:67
msgid "`call` is often used when you need to implement asynchronous side-effects, such as closing resources."
msgstr "`call` リソースを閉じるなど、非同期の副作用を実装する必要がある場合によく使われます。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:69
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/call.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:71
msgid "Mutiny does not dispatch the original event downstream until the Uni returned by the callback emits an item:"
msgstr "Mutinyは、コールバックによって返されたUniがアイテムを放出するまで、元のイベントを下流にディスパッチしません。"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:80
#, no-wrap
msgid ""
"multi\n"
"    .onItem().call(i -> \n"
"        Uni.createFrom().nullItem()\n"
"            .onItem().delayIt().by(Duration.ofSeconds(1))\n"
"    )\n"
"----                \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:83
#, no-wrap
msgid ""
"As shown in the previous snippet, you can use this approach to delay items. \n"
"But the primary use case is about completing asynchronous actions:\n"
msgstr ""
"前のスニペットが示すように、このアプローチを使用してアイテムを遅らせることもできます。\n"
"ただし、主なユースケースは非同期アクションの完了に関するものです。\n"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:85
#, no-wrap
msgid "[source, java]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:88
#, no-wrap
msgid ""
"multi\n"
"    .onCompletion().call(() -> resource.close())\n"
msgstr ""
"multi\n"
"    .onCompletion().call(() -> resource.close())\n"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:93
#, no-wrap
msgid ""
"Under the hood, Mutiny gets the `Uni` (by invoking the callback) and subscribes to it. \n"
"It observes the item or failure event from that `Uni`. \n"
"It discards the item value as only the emission matters in this case.\n"
msgstr ""
"内部的には、Mutinyは `Uni` を(コールバックを呼び出すことによって)取得し、サブスクライブします。 \n"
"`Uni`からアイテムまたは障害イベントを監視します。\n"
"この場合、排出のみが重要であるため、アイテムの値は破棄されます。\n"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:95
#, no-wrap
msgid "If the callback throws an exception or the produced `Uni` produces a failure, Mutiny propagates that failure (or a `CompositeException`) downstream, replacing the original event. \n"
msgstr "コールバックが例外をスローするか、生成された `Uni` が失敗を生成した場合、Mutinyはその失敗(または `CompositeException` )をダウンストリームに伝播し、元のイベントを置き換えます。\n"

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:96
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:99
msgid "The `invoke` and `call` methods are handy when you need to observe a stream without changing the transiting events."
msgstr "`invoke` と `call` メソッドはストリームをイベントを変更せずに観察するのに便利です。"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:102
msgid "Use `invoke` for implementing synchronous side-effects or logging events.  The asynchronous nature of `call` makes it perfect for implementing asynchronous side-effects, such as closing resources, flushing data, delay items, and so on."
msgstr "`invoke`を同期の副作用操作やイベントのロギングの実装の為に使用してください。 `call`の非同期性は、非同期副作用操作、例えばリソースのクローズ、データのフラッシュ、アイテムの遅延などを実装するのに最適です。"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:104
msgid "The following table highlights the key differences:"
msgstr "以下のテーブルが主な違いを示しています。"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
#, no-wrap
msgid "Method"
msgstr "メソッド"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
#, no-wrap
msgid "`invoke`"
msgstr "`invoke`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, no-wrap
msgid "`call`"
msgstr "`call`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, no-wrap
msgid "Nature"
msgstr "種類"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, no-wrap
msgid "synchronous"
msgstr "同期"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, no-wrap
msgid "asynchronous"
msgstr "非同期"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, no-wrap
msgid "Return type"
msgstr "戻り値の型"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, no-wrap
msgid "`void`"
msgstr "`void`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, no-wrap
msgid "`Uni<?>`"
msgstr "`Uni<?>`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, no-wrap
msgid "Main Use cases"
msgstr "主なユースケース"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, no-wrap
msgid "logging"
msgstr "ロギング"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:115
#, no-wrap
msgid "closing resources, flushing data"
msgstr "リソースのクローズ、データのフラッシュ"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:117
msgid "These methods are available for every kind of event in the associated group."
msgstr "これらのメソッドは、関連するグループ内のあらゆる種類のイベントに対して利用可能です。"

#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid ""
#~ "layout: post\n"
#~ "title: Peeking at the streams\n"
#~ "date: 2020-11-10\n"
#~ "tags: reactive mutiny\n"
#~ "synopsis: How to observe events without touching the streams.\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: 流れを覗き込む\n"
#~ "date: 2020-11-10\n"
#~ "tags: reactive mutiny\n"
#~ "synopsis: 流れに触れずにイベントを観察する方法\n"
#~ "author: cescoffier\n"
#~ "---\n"
