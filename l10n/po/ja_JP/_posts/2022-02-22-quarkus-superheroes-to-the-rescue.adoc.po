# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: 2022-04-30 15:38+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:1
#, no-wrap
msgid "edeandrea"
msgstr "edeandrea"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:1
#, no-wrap
msgid "2022-02-22"
msgstr "2022-02-22"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:1
#, no-wrap
msgid "Introduction to the Quarkus Superheroes sample application, discusses some of the requirements for building it, and illustrates how to run it locally or deploy it to Kubernetes."
msgstr "Quarkus Superheroesのサンプルアプリケーションを紹介し、構築に必要ないくつかの要件を説明し、ローカルで実行する方法やKubernetesにデプロイする方法を説明します。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:1
#, no-wrap
msgid "apicurio avro fault-tolerance kafka messaging metrics openapi reactive resteasy testing web"
msgstr "apicurio avro fault-tolerance kafka messaging metrics openapi reactive resteasy testing web"

#. type: Title =
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:1
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:11
#, no-wrap
msgid "Quarkus Superheroes to the Rescue!"
msgstr "手助けの為のQuarkus Superheroes!"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:13
#, no-wrap
msgid "Duke"
msgstr "Duke"

#. type: Target for macro image
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:13
#, no-wrap
msgid "duke_superhero.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:16
msgid "Are you a developer building microservices? Do you struggle with developing and testing individual microservices that are part of a larger system? Do you want to learn about building REST-based and event-driven applications?"
msgstr "あなたはマイクロサービスを構築する開発者ですか？大きなシステムの一部である個々のマイクロサービスの開発とテストに苦労していますか？RESTベースのアプリケーションやイベントドリブンなアプリケーションの構築について学びたいと思いませんか？"

#. type: Title ==
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:17
#, no-wrap
msgid "Introduction"
msgstr "はじめに"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:20
msgid "Quarkus has excellent https://quarkus.io/guides[documentation^] and https://github.com/quarkusio/quarkus-quickstarts[quickstarts^] to help developers become familiar with various features in the Quarkus ecosystem. However, what was missing was a fully-implemented sample set of real-world applications that use these features, patterns, and best practices while also reflecting problems Quarkus is trying to solve."
msgstr "Quarkusには、開発者がQuarkusエコシステムのさまざまな機能に慣れるための優れた link:https://quarkus.io/guides[ドキュメント, window=_blank]や link:https://github.com/quarkusio/quarkus-quickstarts[クイックスタート, window=_blank]があります。しかし、不足していたのは、これらの機能、パターン、ベストプラクティスを使用しながら、Quarkusが解決しようとしている問題を反映した、完全に実装された実世界のアプリケーションのサンプルセットでした。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:22
msgid "This article introduces the https://github.com/quarkusio/quarkus-super-heroes[Quarkus Superheroes sample application^], discusses some of the requirements for building it, and illustrates how to run it locally or deploy it to https://kubernetes.io[Kubernetes^]. You can also watch the https://youtu.be/7M0Tvlx-GTA[Quarkus Insights episode^] where it was introduced."
msgstr "この記事では、 link:https://github.com/quarkusio/quarkus-super-heroes[Quarkus Superheroesのサンプルアプリケーション, window=_blank]を紹介し、構築するための要件を説明し、ローカルで実行する方法や link:https://kubernetes.io[Kubernetes, window=_blank]にデプロイする方法を説明します。また、このサンプルアプリケーションが紹介された link:https://youtu.be/7M0Tvlx-GTA[Quarkus Insightsのエピソード, window=_blank]もご覧いただけます。"

#. type: Title ===
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:23
#, no-wrap
msgid "Requirements"
msgstr "要件"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:26
msgid "In addition to simply being fun, some other requirements were essential as well:"
msgstr "ただ面白いだけではなく、いくつかの条件が必要でした:"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:28
msgid "The overall architecture should be a multi-service microservices architecture."
msgstr "全体のアーキテクチャは、マルチサービス・マイクロサービス・アーキテクチャであること。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:29
msgid "It needs to be more than “hello world” but not the “kitchen sink,” picking a set of common capabilities, such as https://en.wikipedia.org/wiki/Representational_state_transfer[REST^], https://en.wikipedia.org/wiki/WebSocket[WebSockets^], database interaction, messaging, https://quarkus.io/guides/smallrye-health[health checks^], https://quarkus.io/guides/micrometer[monitoring/metrics^], https://quarkus.io/guides/kafka-schema-registry-avro[Apache Avro^], and https://quarkus.io/guides/openapi-swaggerui[OpenAPI^] integration."
msgstr "link:https://en.wikipedia.org/wiki/Representational_state_transfer[REST, window=_blank]、 link:https://en.wikipedia.org/wiki/WebSocket[WebSocket, window=_blank]、データベースとのやりとり、メッセージング、 link:https://quarkus.io/guides/smallrye-health[ヘルスチェック, window=_blank]、 link:https://quarkus.io/guides/micrometer[モニタリング/メトリクス, window=_blank]、 link:https://quarkus.io/guides/kafka-schema-registry-avro[Apache Avro, window=_blank]、 link:https://quarkus.io/guides/openapi-swaggerui[OpenAPI, window=_blank]の統合など、共通の機能をピックアップして、\"hello world\"以上ではあるが、\"kitchen sink\"ではないこと"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:30
msgid "The applications should be kept up-to-date with each Quarkus version and be part of the https://github.com/quarkusio/quarkus-ecosystem-ci[standard Quarkus ecosystem continuous integration^] and shown on the https://status.quarkus.io[Quarkus status dashboard^]."
msgstr "アプリケーションは、Quarkusの各バージョンで最新の状態に保たれ、 link:https://github.com/quarkusio/quarkus-ecosystem-ci[標準的なQuarkusエコシステムの継続的インテグレーション, window=_blank]の一部となり、 link:https://status.quarkus.io[Quarkusのステータスダッシュボード, window=_blank]に表示されることが望ましい"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:31
msgid "There should be both blocking and reactive examples as much as possible."
msgstr "なるべくブロック型とリアクティブ型の両方の例があることが望ましい"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:32
msgid "The system as a whole should"
msgstr "システム全体としては"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:33
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:37
msgid "Be simple to build, run, deploy, and demo on a local developer machine or in Kubernetes."
msgstr "ローカルの開発者用マシンやKubernetes上で、ビルド、実行、デプロイ、デモが簡単にできること。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:34
msgid "Show how Quarkus can help facilitate local development of independent microservices."
msgstr "独立したマイクロサービスのローカル開発を促進するために、Quarkusがどのように役立つかを紹介していること。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:35
msgid "Be contained in a https://github.com/quarkusio/quarkus-super-heroes[single GitHub repository^] for simplicity, but *NOT* a multi-module project."
msgstr "簡素化のために link:https://github.com/quarkusio/quarkus-super-heroes[単一のGitHubリポジトリ, window=_blank]に含まれているが、マルチモジュールプロジェクト *ではない* こと。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:36
msgid "Each application within the system should"
msgstr "システム内の各アプリケーションは"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:38
msgid "Provide https://quay.io/quarkus-super-heroes[container images^] for Java versions 11 and 17, both JVM and native."
msgstr "Javaバージョン11と17（JVMとネイティブの両方）の link:https://quay.io/quarkus-super-heroes[コンテナイメージ, window=_blank]を提供すること。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:39
msgid "Be fully documented."
msgstr "完全に文書化されていること。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:40
msgid "Have fully automated (and documented) CI/CD practices."
msgstr "完全に自動化された（文書化された）CI/CDプラクティスを持っていること。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:41
msgid "Contain a complete test suite of unit and integration tests."
msgstr "ユニットテストと統合テストの完全なテストスイートを含んでいること。"

#. type: Title ==
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:42
#, no-wrap
msgid "Initial Release"
msgstr "初期リリース"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:45
msgid "The initial version of the Quarkus Superheroes application was released in early February 2022. Several microservices co-exist to form a larger system, communicating synchronously via REST or event-driven via https://kafka.apache.org[Apache Kafka^]. Some of the applications are reactive, while others are more traditional, showcasing how to build each kind."
msgstr "Quarkus Superheroesアプリケーションの初期バージョンは、2022年2月初旬にリリースされました。いくつかのマイクロサービスが共存してより大きなシステムを形成しており、RESTを介して同期的に通信したり、 link:https://kafka.apache.org[Apache Kafka, window=_blank]を介してイベントドリブンで通信したりしています。アプリケーションの中にはリアクティブなものもあれば、伝統的なものもあり、それぞれの種類の構築方法を紹介しています。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:47
msgid "A web-based user interface, shown in Figure 1, allows superheroes to fight against supervillains. Previous fight outcomes are also shown on this page."
msgstr "図1に示すWebベースのユーザーインターフェースで、スーパーヒーローがスーパーヴィランと戦うことができます。過去の戦いの結果もこのページに表示されます。"

#. type: Block title
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:48
#, no-wrap
msgid "Super Heroes User Interface"
msgstr "スーパーヒーローのユーザーインターフェース"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:49
#, no-wrap
msgid "Super"
msgstr "スーパー"

#. type: Target for macro image
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:49
#, no-wrap
msgid "fight_screen.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:52
msgid "An additional user interface, shown in Figure 2, displays previous fight statistics, including the percentage of wins for heroes vs. villains and the top 10 winners and the number of wins for each."
msgstr "図2に示す追加のユーザーインターフェースでは、ヒーロー対ヴィランの勝率や上位10人の勝率とそれぞれの勝数など、過去の対戦統計が表示されます。"

#. type: Block title
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:53
#, no-wrap
msgid "Fight Statistics"
msgstr "対戦統計"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:54
#, no-wrap
msgid "Event"
msgstr "イベント"

#. type: Target for macro image
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:54
#, no-wrap
msgid "event_stats.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:56
#, no-wrap
msgid "Under the Cape!"
msgstr "ケープの裏側"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:59
msgid "Figure 3 shows the overall architecture of the application."
msgstr "図3は、本アプリケーションの全体的なアーキテクチャを示しています。"

#. type: Block title
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:60
#, no-wrap
msgid "Overall Architecture"
msgstr "全体アーキテクチャ"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:61
#, no-wrap
msgid "Overall"
msgstr "全体"

#. type: Target for macro image
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:61
#, no-wrap
msgid "application_architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:64
msgid "There are four Quarkus applications, each of which will be described further below, an http://angular.io/[Angular^] application, and some backing services: https://prometheus.io[Prometheus^], https://www.postgresql.org[PostgreSQL^], https://kafka.apache.org[Apache Kafka^], and https://www.apicur.io/registry[Apicurio Schema Registry^]."
msgstr "4つのQuarkusアプリケーションがあり、それぞれについては後述しますが、 link:http://angular.io/[Angular, window=_blank]アプリケーションと、いくつかのバックエンドサービスがあります。 link:https://prometheus.io[Prometheus, window=_blank]、 link:https://www.postgresql.org[PostgreSQL, window=_blank]、 link:https://kafka.apache.org[Apache Kafka, window=_blank]、 link:https://www.apicur.io/registry[Apicurio Schema Registry, window=_blank]の4つです。"

#. type: Title ===
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:65
#, no-wrap
msgid "Hero Service"
msgstr "ヒーロー・サービス"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:68
msgid "The Hero service is a fully reactive and non-blocking HTTP microservice exposing CRUD operations on a `+Hero+` data model. The REST layer is implemented using https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive^] with reactive endpoints. Data is persisted into a https://www.postgresql.org[PostgreSQL^] database using the https://quarkus.io/guides/hibernate-reactive-panache#solution-2-using-the-repository-pattern[repository pattern^] from https://quarkus.io/guides/hibernate-reactive-panache[Quarkus Hibernate Reactive with Panache^]. Additionally, the Hero service favors https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[constructor injection^] of beans over https://quarkus.io/guides/cdi-reference#qualified-injected-fields[field injection^]. The Hero service contains a full suite of unit and integration tests, using https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[mocking^], https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[spying^], and testing within https://quarkus.io/guides/hibernate-reactive-panache#transactions[isolated transactions^]."
msgstr "Heroサービスは、完全にリアクティブでノンブロッキングなHTTPマイクロサービスで、 `Hero` データモデルに対するCRUD操作を公開しています。REST層は、 link:https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive, window=_blank]を使用してリアクティブなエンドポイントを実装しています。データは、 link:https://quarkus.io/guides/hibernate-reactive-panache[Quarkus Hibernate Reactive with Panache, window=_blank]の link:https://quarkus.io/guides/hibernate-reactive-panache#solution-2-using-the-repository-pattern[リポジトリパターン, window=_blank]を使用して link:https://www.postgresql.org[PostgreSQL, window=_blank]データベースに永続化されます。さらに、Heroサービスは、 link:https://quarkus.io/guides/cdi-reference#qualified-injected-fields[フィールドインジェクション, window=_blank]よりもビーンの link:https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[コンストラクタインジェクション, window=_blank]を優先します。Heroサービスには、ユニットテストと統合テストの完全なスイートが含まれており、 link:https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[モッキング, window=_blank]、 link:https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[スパイ, window=_blank]、 link:https://quarkus.io/guides/hibernate-reactive-panache#transactions[隔離された, window=_blank]トランザクション内でのテストを使用しています。"

#. type: delimited block =
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:72
msgid "To ensure fast startup times, only 100 random heroes from the https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-heroes.sql[3,458 total available heroes^] are loaded into the database. If you'd like to load more data, grab the https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-heroes.sql[`+all-heroes.sql+` from the `+characterdata+` branch in the repo^]. Copy the data into https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-heroes/src/main/resources/import.sql[`+rest-heroes/src/main/resources/import.sql+`^] as well as into https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-heroes/deploy/db-init/initialize-tables.sql[`+rest-heroes/deploy/db-init/initialize-tables.sql+`^]."
msgstr "起動時間を短縮するために、 link:https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-heroes.sql[利用可能な全ヒーロー3,458, window=_blank]体の中から100体のランダムなヒーローだけがデータベースに読み込まれます。より多くのデータをロードしたい場合は、 link:https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-heroes.sql[レポの `characterdata` ブランチから `all-heroes.sql`, window=_blank] を取得してください。そのデータを  link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-heroes/src/main/resources/import.sql[`rest-heroes/src/main/resources/import.sql`, window=_blank]と同様に  link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-heroes/deploy/db-init/initialize-tables.sql[`rest-heroes/deploy/db-init/initialize-tables.sql`, window=_blank] にコピーしてください。"

#. type: Title ===
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:74
#, no-wrap
msgid "Villain Service"
msgstr "ヴィラン・サービス"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:77
msgid "The Villain service is a blocking HTTP microservice exposing CRUD operations on a `+Villain+` data model. In fact, the `+Villain+` data model is identical to the `+Hero+` data model in the <<hero-service,Hero service>> (other than the table's name). It also implements all the same use cases as the Hero service. The only difference is that the Villain service is blocking, and it uses the https://quarkus.io/guides/hibernate-orm-panache#solution-1-using-the-active-record-pattern[active record pattern^] from https://quarkus.io/guides/hibernate-orm-panache[Quarkus Hibernate ORM with Panache^]."
msgstr "Villainサービスは、 `Villain` データモデルに対するCRUD操作を公開するブロッキングHTTPマイクロサービスです。実際、 `Villain` データモデルは、 link:#hero-service[Heroサービス]の `Hero` データモデルと同一です（テーブルの名前以外は）。また、Heroサービスと同じユースケースをすべて実装しています。唯一の違いは、Villainサービスがブロッキングであることと、 link:https://quarkus.io/guides/hibernate-orm-panache[Quarkus Hibernate ORM with Panache, window=_blank]の link:https://quarkus.io/guides/hibernate-orm-panache#solution-1-using-the-active-record-pattern[active recordパターン, window=_blank]を使用していることです。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:79
msgid "The REST layer is implemented using https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive^] with blocking endpoints. Data is persisted into a https://www.postgresql.org[PostgreSQL^] database. The Villain service also creates some custom configurations which show how to use https://quarkus.io/guides/config-mappings[`+ConfigMapping+`^] objects. Additionally, the Villain service favors https://quarkus.io/guides/cdi-reference#qualified-injected-fields[field injection^] of beans over https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[constructor injection^]. The Villain service contains a full suite of unit and integration tests, using https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[mocking^], https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[spying^], and testing within https://quarkus.io/guides/getting-started-testing#tests-and-transactions[isolated transactions^]."
msgstr "REST層は、 link:https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive, window=_blank]を使って、ブロック型のエンドポイントで実装されています。データは link:https://www.postgresql.org[PostgreSQL, window=_blank]データベースに保存されます。Villainサービスはまた、いくつかのカスタム設定を作成して、どのように  link:https://quarkus.io/guides/config-mappings[`ConfigMapping`, window=_blank]オブジェクトを使うかを示すカスタム設定も作成します。さらに、Villainサービスは link:https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[コンストラクタ・インジェクション, window=_blank]よりもビーンの link:https://quarkus.io/guides/cdi-reference#qualified-injected-fields[フィールド・インジェクション, window=_blank]を好みます。Villainサービスはユニットテストと統合テストの完全なスイートを含み、 link:https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[モッキング, window=_blank]、 link:https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[スパイ, window=_blank]、 link:https://quarkus.io/guides/getting-started-testing#tests-and-transactions[隔離された, window=_blank]トランザクション内でのテストを用います。"

#. type: delimited block =
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:83
msgid "To ensure fast startup times, only 100 random villains from the https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-villains.sql[1,797 total available villains^] are loaded into the database. If you'd like to load more data, grab the https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-villains.sql[`+all-villains.sql+` from the `+characterdata+` branch in the repo^]. Copy the data into https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-villains/src/main/resources/import.sql[`+rest-villains/src/main/resources/import.sql+`^] as well as into https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-villains/deploy/db-init/initialize-tables.sql[`+rest-villains/deploy/db-init/initialize-tables.sql+`^]."
msgstr "起動時間を短縮するために、 link:https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-villains.sql[1,797, window=_blank]体の悪役の中から100体のランダムな悪役だけをデータベースにロードしています。もっと多くのデータをロードしたい場合は、 link:https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-villains.sql[レポの `characterdata` ブランチから `all-villains.sql`, window=_blank] を取得してください。そのデータを  link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-villains/src/main/resources/import.sql[`rest-villains/src/main/resources/import.sql`, window=_blank]にコピーし、さらに  link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-villains/deploy/db-init/initialize-tables.sql[`rest-villains/deploy/db-init/initialize-tables.sql`, window=_blank]."

#. type: Title ===
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:85
#, no-wrap
msgid "Fight Service"
msgstr "ファイトサービス"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:88
msgid "The Fight service is a fully reactive and non-blocking HTTP microservice exposing a RESTful API for performing fights between heroes and villains. The REST layer is implemented using https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive^] with reactive endpoints. Fight data is persisted into a MongoDB database using the https://quarkus.io/guides/mongodb-panache#solution-1-using-the-active-record-pattern[active record pattern^] from https://quarkus.io/guides/mongodb-panache#reactive[Quarkus MongoDB Reactive with Panache^]. The Fight service also favors https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[constructor injection^] of beans over https://quarkus.io/guides/cdi-reference#qualified-injected-fields[field injection^]."
msgstr "Fightサービスは、完全にリアクティブでノンブロッキングなHTTPマイクロサービスで、ヒーローとヴィランの間で戦いを実行するためのRESTful APIを公開しています。REST層は link:https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive, window=_blank]を使用して実装されており、リアクティブなエンドポイントを備えています。戦いのデータは、 link:https://quarkus.io/guides/hibernate-reactive-panache[Quarkus Hibernate Reactive with Panache, window=_blank]の link:https://quarkus.io/guides/hibernate-reactive-panache#solution-1-using-the-active-record-pattern[active recordパターン, window=_blank]を使用してPostgreSQLデータベースに永続化されます。また、Fightサービスでは、 link:https://quarkus.io/guides/cdi-reference#qualified-injected-fields[フィールド・インジェクション, window=_blank]よりも link:https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[コンストラクタ・インジェクション, window=_blank]を採用しています。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:90
msgid "The Fight service makes outgoing REST calls to both the Hero and Villain services. Calls to the Hero service use the https://quarkus.io/guides/rest-client-reactive[reactive rest client^] while calls to the Villain service use the https://quarkus.io/guides/resteasy-reactive#resteasy-reactive-client[RESTEasy Reactive client^], a https://download.eclipse.org/microprofile/microprofile-rest-client-3.0/microprofile-rest-client-spec-3.0.html[MicroProfile Rest Client^] implementation of the https://docs.oracle.com/javaee/7/tutorial/jaxrs-client001.htm[JAX-RS client API^] that is non-blocking at its core. All outgoing calls use https://quarkus.io/guides/smallrye-fault-tolerance[resilience patterns^] such as https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-retries[retry^], https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-timeouts[timeout^], https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-fallbacks[fallback^], and https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-circuit-breaker[circuit breaking^]."
msgstr "Fightサービスは、HeroサービスとVillainサービスの両方にREST呼び出しを行います。Heroサービスへの呼び出しは link:https://quarkus.io/guides/rest-client-reactive[reactive rest client, window=_blank]を使用し、Villainサービスへの呼び出しは link:https://quarkus.io/guides/resteasy-reactive#resteasy-reactive-client[RESTEasy Reactive, window=_blank] clientを使用します。RESTEasy link:https://quarkus.io/guides/resteasy-reactive#resteasy-reactive-client[Reactive, window=_blank] clientは、 link:https://docs.oracle.com/javaee/7/tutorial/jaxrs-client001.htm[JAX-RSクライアントAPI, window=_blank]の link:https://download.eclipse.org/microprofile/microprofile-rest-client-3.0/microprofile-rest-client-spec-3.0.html[MicroProfile Rest Client, window=_blank]実装であり、そのコアはノンブロッキングです。すべての発信コールは、 link:https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-retries[リトライ, window=_blank]、 link:https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-timeouts[タイムアウト, window=_blank]、 link:https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-fallbacks[フォールバック, window=_blank]、 link:https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-circuit-breaker[サーキットブレーキング, window=_blank]などの link:https://quarkus.io/guides/smallrye-fault-tolerance[レジリエンスパターン, window=_blank]を使用しています。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:92
msgid "Additionally, the Fight service https://quarkus.io/guides/kafka#integrating-with-kafka-common-patterns[emits^] fight events in https://avro.apache.org/docs/current[Apache Avro^] format to Kafka. The fight schema is automatically registered in an https://www.apicur.io/registry[Apicurio Schema Registry^] by the https://quarkus.io/guides/kafka-schema-registry-avro[Quarkus Apicurio Avro extension^]."
msgstr "さらに、Fightサービスは、 link:https://avro.apache.org/docs/current[Apache Avro, window=_blank]形式のファイトイベントをKafkaに link:https://quarkus.io/guides/kafka#integrating-with-kafka-common-patterns[エミットし, window=_blank]ます。Fightスキーマは、 link:https://quarkus.io/guides/kafka-schema-registry-avro[QuarkusのApicurio Avroエクステンション, window=_blank]によって、 link:https://www.apicur.io/registry[Apicurio Schema Registry, window=_blank]に自動的に登録されます。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:94
msgid "The Fight service contains a full suite of unit and integration tests, using https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[mocking^], https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[spying^], and testing within https://quarkus.io/guides/hibernate-reactive-panache#transactions[isolated transactions^]. It also makes heavy use of https://wiremock.org/[Wiremock^] for mocking downstream REST endpoints, an https://quarkus.io/guides/kafka#testing-without-a-broker[in-memory Kafka connector^] for performing message verification within unit tests. It also shows how to https://quarkus.io/guides/getting-started-testing#testing-dev-services[inject Dev Services information^] to configure test resources, such as a `+KafkaConsumer+`."
msgstr "Fightサービスには、ユニットテストとインテグレーションテストの完全なスイートが含まれており、 link:https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[モッキング, window=_blank]、 link:https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[スパイ, window=_blank]、 link:https://quarkus.io/guides/hibernate-reactive-panache#transactions[隔離された, window=_blank]トランザクション内でのテストを使用しています。また、下流のRESTエンドポイントをモックするための link:https://wiremock.org/[Wiremock, window=_blank]や、ユニット・テスト内でメッセージの検証を行うための link:https://quarkus.io/guides/kafka#testing-without-a-broker[インメモリKafkaコネクタ, window=_blank]を多用しています。また、 link:https://quarkus.io/guides/getting-started-testing#testing-dev-services[Dev Servicesの情報を注入し, window=_blank]て、 `KafkaConsumer`.NETなどのテスト・リソースを設定する方法も紹介しています。"

#. type: Title ===
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:95
#, no-wrap
msgid "Event Statistics Service"
msgstr "イベント統計サービス"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:98
msgid "The Event Statistics Service is an event-driven microservice exposing a https://en.wikipedia.org/wiki/WebSocket[WebSocket^] HTTP layer. It listens for fight events in https://avro.apache.org/docs/current[Apache Avro^] format on a Kafka topic utilizing https://quarkus.io/guides/kafka[SmallRye Reactive Messaging^]. The fight schema is automatically registered in an https://www.apicur.io/registry[Apicurio Schema Registry^] by the https://quarkus.io/guides/kafka-schema-registry-avro[Quarkus Apicurio Avro extension^]."
msgstr "Event Statistics サービスは、 link:https://en.wikipedia.org/wiki/WebSocket[WebSocket, window=_blank]HTTPレイヤーを公開するイベント駆動型のマイクロサービスです。 link:https://quarkus.io/guides/kafka[SmallRye Reactive Messaging, window=_blank]を利用したKafkaトピック上で、 link:https://avro.apache.org/docs/current[Apache Avro, window=_blank]フォーマットの試合イベントをリッスンします。戦いのスキーマは、 link:https://quarkus.io/guides/kafka-schema-registry-avro[Quarkus Apicurio Avro extension, window=_blank]によって link:https://www.apicur.io/registry[Apicurio Schema Registry, window=_blank]に自動的に登録されます。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:100
msgid "Statistic information is presented via a browser-based user interface, shown in Figure 2 above. Team statistics are accumulated as a percentage of wins by heroes vs. villains. Winner statistics are accumulated by the number of wins for each hero or villain, retaining the top 10 winners. The statistics are pushed to the UI over WebSockets."
msgstr "統計情報は、上の図2に示すように、ブラウザベースのユーザーインターフェースで表示されます。チームの統計は、ヒーローとヴィランの勝利数の割合で表示されます。勝者の統計は、ヒーローとヴィランのそれぞれの勝利数で蓄積され、上位10人の勝利数が保持されます。統計情報は、WebSocketを介してUIにプッシュされます。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:102
msgid "The Event Statistics service contains a full suite of unit and integration tests using https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[mocking^] and https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[spying^]. It also shows how to https://quarkus.io/guides/getting-started-testing#testing-dev-services[inject Dev Services information^] to configure test resources, such as a `+KafkaProducer+`."
msgstr "Event Statistics サービスには、 link:https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[モッキング, window=_blank]と link:https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[スパイ, window=_blank]を使用したユニット・テストと統合テストの完全なスイートが含まれています。また、 link:https://quarkus.io/guides/getting-started-testing#testing-dev-services[Dev Services の情報を注入し, window=_blank]て、 `KafkaProducer` のようなテスト・リソースを構成する方法も紹介しています。"

#. type: Title ===
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:103
#, no-wrap
msgid "Super Hero UI"
msgstr "スーパーヒーローUI"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:106
msgid "The Super Hero UI application, shown in Figure 1 above, is an http://angular.io/[Angular^] single-page application deployed via Node.js. It communicates to the Fight service via REST. The focus of the sample application is on the Quarkus applications and not the Angular UI."
msgstr "上の図1に示されているSuper Hero UIアプリケーションは、Node.jsを介してデプロイされた link:http://angular.io/[Angular, window=_blank]シングルページアプリケーションです。このアプリケーションは、RESTを介してFightサービスと通信します。サンプルアプリケーションでは、Angular UIではなくQuarkusアプリケーションに焦点を当てています。"

#. type: Title ==
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:107
#, no-wrap
msgid "Run the Application Locally"
msgstr "アプリケーションをローカルで実行する"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:110
msgid "There are a few ways to run the application locally depending on what your goals are. https://docs.docker.com/compose[Docker Compose^] can be used if you want to run the <<running-the-entire-application,entire application>>, or a <<running-a-subset-of-the-application,subset of it>>, using the https://quay.io/quarkus-super-heroes[pre-built container images^]. Alternatively, each application can be <<running-locally-via-quarkus-dev-mode,run from source>>."
msgstr "アプリケーションをローカルで実行するには、目的に応じていくつかの方法があります。 link:https://docs.docker.com/compose[Docker Compose, window=_blank]は、 link:https://quay.io/quarkus-super-heroes[事前に構築されたコンテナイメージ, window=_blank]を使用して、 link:#running-the-entire-application[アプリケーション全体]または link:#running-a-subset-of-the-application[そのサブセット]を実行したい場合に使用できます。また、各アプリケーションを link:#running-locally-via-quarkus-dev-mode[ソースから実行]することもできます。"

#. type: Title ===
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:111
#, no-wrap
msgid "Running Locally via Docker Compose"
msgstr "Docker Composeでローカルに実行"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:114
msgid "The entire application or a subset of it can be started with a single Docker Compose command."
msgstr "アプリケーション全体またはそのサブセットを、1つのDocker Composeコマンドで起動することができます。"

#. type: Title ====
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:115
#, no-wrap
msgid "Running the Entire Application"
msgstr "アプリケーション全体の実行"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:118
msgid "The https://github.com/quarkusio/quarkus-super-heroes/tree/main/deploy/docker-compose[`+deploy/docker-compose+`^] directory in the https://github.com/quarkusio/quarkus-super-heroes[root of the respository^] contains compose files for each of the four versions of the application: JVM 11, JVM 17, native built with Java 11, and native built with Java 17. Additionally, https://prometheus.io[Prometheus^] monitoring can be started with the https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/docker-compose/prometheus.yml[supplied `+prometheus.yml+` file^]."
msgstr "レスポンダのルートにある  link:https://github.com/quarkusio/quarkus-super-heroes/tree/main/deploy/docker-compose[`deploy/docker-compose`, window=_blank] link:https://github.com/quarkusio/quarkus-super-heroes[レスポンダのルート, window=_blank]にあるディレクトリには、アプリケーションの4つのバージョンそれぞれのコンポーズファイルが含まれています。JVM 11、JVM 17、Java 11で構築されたネイティブ、Java 17で構築されたネイティブの4つのバージョンそれぞれのコンポーズファイルが含まれています。さらに、 link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/docker-compose/prometheus.yml[付属の `prometheus.yml` ファイル, window=_blank]を使って、 link:https://prometheus.io[Prometheus, window=_blank]モニタリングを開始することができます。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:120
msgid "From the +quarkus-super-heroes+ directory, simply run the https://github.com/quarkusio/quarkus-super-heroes#running-locally-via-docker-compose[command based on the version of the application you want to run^]. For example, to run the native Java 17 version, run `+docker-compose -f deploy/docker-compose/native-java17.yml -f deploy/docker-compose/prometheus.yml up+`."
msgstr "quarkus-super-heroesディレクトリから、 link:https://github.com/quarkusio/quarkus-super-heroes#running-locally-via-docker-compose[実行したいアプリケーションのバージョンに応じたコマンド, window=_blank]を実行するだけです。例えば、ネイティブのJava 17バージョンを実行するには、 `docker-compose -f deploy/docker-compose/native-java17.yml -f deploy/docker-compose/prometheus.yml up` を実行します。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:122
msgid "The https://github.com/quarkusio/quarkus-super-heroes/tree/main/scripts[`+scripts+`^] directory contains a https://github.com/quarkusio/quarkus-super-heroes/blob/main/scripts/watch-services.sh[`+watch-services.sh+`^] script that can be run in a separate terminal. This script will watch the startup of all the services and report when they are all up and ready."
msgstr "link:https://github.com/quarkusio/quarkus-super-heroes/tree/main/scripts[`scripts`, window=_blank]ディレクトリには  link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/scripts/watch-services.sh[`watch-services.sh`, window=_blank]スクリプトが含まれており、別のターミナルで実行することができます。このスクリプトは、すべてのサービスの起動を監視し、すべてのサービスが起動して準備が整ったら報告します。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:124
msgid "You may see errors as the applications start up. This may happen if one service completes startup before one of its required services (i.e. a database, Kafka broker, etc). Once everything completes startup things will work as intended."
msgstr "アプリケーションの起動時にエラーが発生することがあります。これは、あるサービスが、そのサービスが必要とするサービス（データベース、Kafkaブローカーなど）よりも先に起動を完了した場合に発生する可能性があります。すべての起動が完了すると、意図したとおりに動作します。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:126
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:150
msgid "The following URLs will be available once everything is ready:"
msgstr "準備が整い次第、以下のURLで利用可能になります。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:128
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:152
msgid "Super Heroes UI: http://localhost:8080[http://localhost:8080^]"
msgstr "Super Heroes UI: http://localhost:8080[http://localhost:8080^]"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:129
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:153
msgid "Event statistics UI: http://localhost:8085[http://localhost:8085^]"
msgstr "イベント統計UI link:http://localhost:8085[： http://localhost:8085, window=_blank]"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:130
msgid "Apicurio Schema Registry: http://localhost:8086[http://localhost:8086^]"
msgstr "Apicurio Schema Registry: link:http://localhost:8086[http://localhost:8086, window=_blank]"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:131
msgid "Prometheus: http://localhost:9090[http://localhost:9090^]"
msgstr "Prometheus: http://localhost:9090[http://localhost:9090^]"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:132
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:154
msgid "Fight service: http://localhost:8082[http://localhost:8082^]"
msgstr "ファイトサービス: http://localhost:8082[http://localhost:8082^]"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:133
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:155
msgid "Hero service: http://localhost:8083[http://localhost:8083^]"
msgstr "ヒーロー・サービス: http://localhost:8083[http://localhost:8083^]"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:134
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:156
msgid "Villain service: http://localhost:8084[http://localhost:8084^]"
msgstr "ヴィラン・サービス: link:http://localhost:8084[： http://localhost:8084, window=_blank]"

#. type: Title ====
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:135
#, no-wrap
msgid "Running a Subset of the Application"
msgstr "アプリケーションのサブセットの実行"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:138
msgid "Each individual service can also be run via Docker Compose."
msgstr "個々のサービスは、Docker Composeを介して実行することもできます。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:140
msgid "Inside each service’s subdirectory in the repository is a `+deploy/docker-compose+` directory containing the compose files for the four versions of the application. Multiple compose files can be combined into a single command."
msgstr "リポジトリ内の各サービスのサブディレクトリの中には、4つのバージョンのアプリケーションのComposeファイルを含む `deploy/docker-compose` ディレクトリがあります。複数のComposeファイルを1つのコマンドにまとめることができます。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:142
msgid "This is useful if you wanted to, for example, work on the Fight service in https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode^] and need to have the Hero and Villain services available. From the `+quarkus-super-heroes+` directory, simply run the https://github.com/quarkusio/quarkus-super-heroes/tree/main/rest-fights#only-downstream-dependencies[command based on the version of the application you want to run^]. For example, to run the native Java 17 version, run `+docker-compose -f rest-heroes/deploy/docker-compose/native-java17.yml -f rest-villains/deploy/docker-compose/native-java17.yml up+`."
msgstr "これは、例えば、 link:https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode, window=_blank]でFightサービスに取り組み、HeroとVillainサービスを利用できるようにする必要がある場合に便利です。 `quarkus-super-heroes` ディレクトリから、 link:https://github.com/quarkusio/quarkus-super-heroes/tree/main/rest-fights#only-downstream-dependencies[実行したいアプリケーションのバージョンに応じたコマンド, window=_blank]を実行するだけです。例えば、ネイティブのJava 17バージョンを実行するには、 `docker-compose -f rest-heroes/deploy/docker-compose/native-java17.yml -f rest-villains/deploy/docker-compose/native-java17.yml up` を実行します。"

#. type: Title ===
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:143
#, no-wrap
msgid "Running Locally via Quarkus Dev Mode"
msgstr "Quarkus 開発モードでローカルに実行"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:146
msgid "Each of the services can also be run via https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode^] simultaneously. For each Quarkus service (`+event-statistics+`, `+rest-fights+`, `+rest-heroes+`, `+rest-villains+`) open a terminal, `+cd+` into the project directory, and run `+./mvnw quarkus:dev+`."
msgstr "各サービスは、 link:https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode, window=_blank]を介して同時に実行することもできます。各Quarkusサービス（ `event-statistics`, `rest-fights`, `rest-heroes`, `rest-villains` ）について、ターミナルを開き、 `cd` をプロジェクトディレクトリに入れて、 `./mvnw quarkus:dev` を実行してください。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:148
msgid "The Super Heroes UI can be https://github.com/quarkusio/quarkus-super-heroes/tree/main/ui-super-heroes#building-the-application[built and run from source^], but since the focus of this article is Quarkus, we will run it as a container image. Open a new terminal and run `+docker run -p 8080:8080 -e API_BASE_URL=http://localhost:8082 quay.io/quarkus-super-heroes/ui-super-heroes:latest+`."
msgstr "Super Heroes UIは link:https://github.com/quarkusio/quarkus-super-heroes/tree/main/ui-super-heroes#building-the-application[ソースからビルドして実行する, window=_blank]ことができますが、この記事の焦点はQuarkusなので、コンテナイメージとして実行します。新しいターミナルを開き、 `docker run -p 8080:8080 -e API_BASE_URL=http://localhost:8082 quay.io/quarkus-super-heroes/ui-super-heroes:latest` を実行します。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:158
msgid "Now you have all the benefits of https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode^] and https://quarkus.io/guides/continuous-testing[Quarkus Continuous Testing^] across the entire application at once! All backing infrastructure (databases, Kafka, Apicurio) is provisioned for you automatically by https://quarkus.io/guides/dev-services[Quarkus Dev Services^]."
msgstr "これで、アプリケーション全体で link:https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode, window=_blank]と link:https://quarkus.io/guides/continuous-testing[Quarkus Continuous Testing, window=_blank]のすべてのメリットを一度に得られるようになりました。すべてのバッキングインフラ（データベース、Kafka、Apicurio）は、 link:https://quarkus.io/guides/dev-services[Quarkus Dev Services, window=_blank]によって自動的にプロビジョニングされます。"

#. type: Title ==
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:159
#, no-wrap
msgid "Deploy the Application to Kubernetes"
msgstr "アプリケーションをKubernetesにデプロイ"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:162
msgid "Kubernetes descriptors are provided for various flavors of Kubernetes: https://www.openshift.com[OpenShift^], https://quarkus.io/guides/deploying-to-kubernetes#deploying-to-minikube[Minikube^], https://knative.dev[KNative^], and “vanilla” https://www.kubernetes.io[Kubernetes^]."
msgstr "Kubernetesディスクリプターは、Kubernetesの様々なフレーバーに対応しています。 link:https://www.openshift.com[OpenShift, window=_blank]、 link:https://quarkus.io/guides/deploying-to-kubernetes#deploying-to-minikube[Minikube, window=_blank]、 link:https://knative.dev[KNative, window=_blank]、そして「バニラ」 link:https://www.kubernetes.io[Kubernetes, window=_blank]です。"

#. type: delimited block =
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:166
msgid "The only real difference between the Minikube and Kubernetes descriptors is that all the application ``Service``s in the Minikube descriptors use `+type: NodePort+` so that a list of all the applications can be obtained simply by running `+minikube service list+`."
msgstr "MinikubeとKubernetesのディスクリプターの唯一の違いは、Minikubeのディスクリプターに含まれる全てのアプリケーション `Service`が `type: NodePort` を使用していることで、 `minikube service list` を実行するだけで全てのアプリケーションのリストを取得することができます。"

#. type: delimited block =
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:168
msgid "The KNative descriptors use https://knative.dev/docs/serving[KNative Serving^] for each of the five applications."
msgstr "KNativeディスクリプタは、5つのアプリケーションのそれぞれに link:https://knative.dev/docs/serving[KNative Serving, window=_blank]を使用しています。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:171
msgid "Similar to Docker Compose, the https://quay.io/quarkus-super-heroes[pre-built container images^] of the entire application, or a subset of it, can be deployed to Kubernetes with a single `+kubectl apply -f+` (or `+oc apply -f+` if using OpenShift)."
msgstr "Docker Composeと同様に、アプリケーション全体またはそのサブセットの link:https://quay.io/quarkus-super-heroes[事前に構築されたコンテナイメージ, window=_blank]を、1つの `kubectl apply -f` （OpenShiftを使用している場合は `oc apply -f` ）でKubernetesにデプロイすることができます。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:173
msgid "The https://github.com/quarkusio/quarkus-super-heroes/tree/main/deploy/k8s[`+deploy/k8s+`^] directory in the https://github.com/quarkusio/quarkus-super-heroes[root of the respository^] contains Kubernetes descriptors for each of the four versions of the application: JVM 11, JVM 17, native built with Java 11, and native built with Java 17."
msgstr "レスポンダのルートにある  link:https://github.com/quarkusio/quarkus-super-heroes/tree/main/deploy/k8s[`deploy/k8s`, window=_blank] link:https://github.com/quarkusio/quarkus-super-heroes[respositoryのルート, window=_blank]にあるディレクトリには、アプリケーションの4つのバージョンそれぞれのKubernetesディスクリプターが含まれています。JVM 11、JVM 17、Java 11で構築されたネイティブ、Java 17で構築されたネイティブの4つのバージョンのKubernetesディスクリプターが含まれています。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:175
msgid "For example, to deploy the native Java 17 version to OpenShift, simply run `+kubectl apply -f deploy/k8s/native-java17-openshift.yml+` (or `+oc apply -f deploy/k8s/native-java17-openshift.yml+`)."
msgstr "例えば、ネイティブのJava 17バージョンをOpenShiftにデプロイするには、単に `kubectl apply -f deploy/k8s/native-java17-openshift.yml` （または `oc apply -f deploy/k8s/native-java17-openshift.yml` ）を実行します。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:177
msgid "To deploy Prometheus monitoring in addition to the application, `+kubectl apply -f+` (or `+oc apply -f+` if using OpenShift) the appropriate Prometheus Kubernetes descriptor based on the target Kubernetes environment: https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-openshift.yml[`+prometheus-openshift.yml+`^], https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-minikube.yml[`+prometheus-minikube.yml+`^], or https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-kubernetes.yml[`+prometheus-kubernetes.yml+`^]."
msgstr "アプリケーションに加えてPrometheusモニタリングをデプロイするには、 `kubectl apply -f` （OpenShiftを使用している場合は `oc apply -f` ）を実行するのに加え、対象となるKubernetes環境に基づいて適切なPrometheus Kubernetes descriptor:  link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-openshift.yml[`prometheus-openshift.yml`, window=_blank],  link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-minikube.yml[`prometheus-minikube.yml`, window=_blank]、または  link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-kubernetes.yml[`prometheus-kubernetes.yml`, window=_blank] を実行します。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:179
msgid "On Minikube or Kubernetes only the Super Heroes UI and the Fights service is exposed outside the cluster. If you want to access Prometheus or the Event Statistics service then you will need to expose it, either by using an `+Ingress+` or doing a `+kubectl port-forward+` of the Pod. On OpenShift, all of the applications have ``Route``s which expose them outside the cluster."
msgstr "MinikubeやKubernetesでは、Super Heroes UIとFightsサービスだけがクラスタの外に公開されています。PrometheusやEvent Statisticsサービスにアクセスしたい場合は、 `Ingress` を使用するか、Podの `kubectl port-forward` を行って公開する必要があります。OpenShiftでは、すべてのアプリケーションに `Route`が用意されており、クラスター外に公開されています。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:181
msgid "Additionally, individual applications can be deployed in a similar manner. Inside each service’s subdirectory in the repository is a `+deploy/k8s+` directory containing a similar matrix of Kubernetes descriptors."
msgstr "さらに、個々のアプリケーションも同様の方法でデプロイできます。リポジトリ内の各サービスのサブディレクトリの中には、同様のKubernetesディスクリプターのマトリックスを含む `deploy/k8s` ディレクトリがあります。"

#. type: delimited block =
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:185
msgid "These descriptors are *NOT* considered to be production-ready. They are basic enough to deploy and run the system with as little configuration as possible. The databases, Kafka broker, and schema registry deployed are not highly-available and do not use any Kubernetes operators for management or monitoring. They also only use ephemeral storage."
msgstr "これらの記述は、本番環境に対応しているとは考えて *いません*。これらは、できるだけ少ない設定でシステムをデプロイして実行するための基本的なものです。デプロイされたデータベース、Kafkaブローカー、スキーマレジストリは、高可用性を備えておらず、管理や監視にKubernetesのオペレータを使用していません。また、エフェメラルストレージのみを使用しています。"

#. type: delimited block =
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:187
msgid "For production-ready Kafka brokers, please see the https://strimzi.io/[Strimzi documentation^] for how to properly deploy and configure production-ready Kafka brokers on Kubernetes. You can also try out a https://developers.redhat.com/products/red-hat-openshift-streams-for-apache-kafka/getting-started[fully hosted and managed Kafka service^]!"
msgstr "本番対応のKafkaブローカーについては、Kubernetes上で本番対応のKafkaブローカーを適切に展開・設定する方法について、 link:https://strimzi.io/[Strimziのドキュメント, window=_blank]をご覧ください。また、 link:https://developers.redhat.com/products/red-hat-openshift-streams-for-apache-kafka/getting-started[完全にホストされ、管理されたKafkaサービス, window=_blank]を試すこともできます!"

#. type: delimited block =
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:189
msgid "For a production-ready Apicurio Schema Registry, please see the https://www.apicur.io/registry/docs/apicurio-registry-operator/1.0.0/index.html[Apicurio Registry Operator documentation^]. You can also try out a https://console.redhat.com/application-services/service-registry[fully hosted and managed Schema Registry service^]!"
msgstr "Apicurio Schema Registryの本番環境については、 link:https://www.apicur.io/registry/docs/apicurio-registry-operator/1.0.0/index.html[Apicurio Registry Operatorのドキュメント, window=_blank]をご覧ください。また、 link:https://console.redhat.com/application-services/service-registry[完全にホストされ、管理されたスキーマ・レジストリ・サービス, window=_blank]を試すこともできます。"

#. type: delimited block =
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:191
msgid "For production-ready Prometheus instances, please see the https://operatorhub.io/operator/prometheus[Prometheus Operator documentation^] for how to properly deploy and configure production-ready instances."
msgstr "本番環境用のPrometheusインスタンスについては、 link:https://operatorhub.io/operator/prometheus[Prometheus Operatorのドキュメント, window=_blank]で、本番環境用のインスタンスの適切な導入・設定方法をご確認ください。"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:194
msgid "The possibilities are endless once deployed to Kubernetes! Reusing the same example above (developing the Fight service), you could use https://quarkus.io/guides/maven-tooling#remote-development-mode[Quarkus Remote Development Mode^] to connect the remote instance to your local machine and get an experience similar to https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode^]. No need to do any port forwarding!"
msgstr "Kubernetesにデプロイされると、可能性は無限に広がります!上記の同じ例（Fightサービスの開発）を再利用すると、 link:https://quarkus.io/guides/maven-tooling#remote-development-mode[Quarkus Remote Development Mode, window=_blank]を使用してリモートインスタンスをローカルマシンに接続し、 link:https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus 開発モード, window=_blank]と同様のエクスペリエンスを得ることができます。ポートフォワーディングの必要はありません。"

#. type: Title ==
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:195
#, no-wrap
msgid "Want to Get Involved?"
msgstr "参加してみませんか？"

#. type: Plain text
#: upstream/_posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc:197
msgid "We’re always looking for involvement from the community! There is always a list of https://github.com/quarkusio/quarkus-super-heroes/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement[enhancements^] and https://github.com/quarkusio/quarkus-super-heroes/issues?q=is%3Aopen+is%3Aissue+label%3Abug[bugs^] to pick from if you’re interested in getting involved."
msgstr "私たちは常にコミュニティからの参加を求めています。 link:https://github.com/quarkusio/quarkus-super-heroes/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement[改良, window=_blank]点や link:https://github.com/quarkusio/quarkus-super-heroes/issues?q=is%3Aopen+is%3Aissue+label%3Abug[バグ, window=_blank]のリストは常に用意されているので、興味のある方はぜひ参加してみてください。"

#~ msgid "---\n"
#~ msgstr "---\n"
