# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "mkouba"
msgstr "マコーバ"

#. type: YAML Front Matter: date
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "2019-07-25 00:00 +0100"
msgstr "2019-07-25 00:00 +0100"

#. type: YAML Front Matter: layout
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "Quarkus ArC is a build-time oriented dependency injection based on CDI 2.0. But what does it actually mean and what benefits does a build-time processing DI bring?"
msgstr "layout: post date: 2019-07-25 00:00 +0100 author: mkouba tags: extension arc development-tips synopsis:Quarkus ArCは、CDI 2.0をベースにしたビルド時処理型の依存性注入です。しかし、実際にはどのような意味があり、ビルド時処理のDIはどのようなメリットをもたらすのでしょうか？---"

#. type: YAML Front Matter: tags
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "extension arc development-tips"
msgstr "エクステンションアーク開発のヒント"

#. type: Title =
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:9
#, fuzzy, no-wrap
msgid "Quarkus Dependency Injection"
msgstr "Quarkusのディペンデンシー・インジェクション"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:13
#, fuzzy
msgid "Quarkus ArC is a build-time oriented dependency injection based on http://cdi-spec.org/[CDI 2.0].  In this blogpost, we're going to explain the relationship to the specification and describe some of the benefits and drawbacks of the build-time processing design."
msgstr "Quarkus ArCは、 link:http://cdi-spec.org/[CDI 2.0]をベースにしたビルドタイム指向の依存性注入方式です。このブログポストでは、仕様との関係を説明し、ビルド時処理設計のメリットとデメリットを説明します。"

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:14
#, no-wrap
msgid "Compatibility"
msgstr "互換性"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:20
#, fuzzy
msgid "It does not make sense to reinvent the wheel, especially when it comes to dependency injection.  There are many frameworks that try to solve similar problems.  A year ago, we made a design decision to build Quarkus DI on top of CDI.  We had some very good reasons to choose CDI:"
msgstr "特に依存性注入に関しては、車輪を再発明することは意味がありません。似たような問題を解決しようとするフレームワークはたくさんあります。1年前、私たちはCDIの上にQuarkus DIを構築することを決定しました。CDIを選択したのにはいくつかの理由がありました。"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:22
#, fuzzy
msgid "CDI is a mature and proven component model"
msgstr "CDIは成熟した、実績のあるコンポーネントモデル"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:23
#, fuzzy
msgid "We at Red Hat have almost ten years of experience with developing http://weld.cdi-spec.org/[Weld - the CDI Reference Implementation]"
msgstr "レッドハットでは、約10年にわたって link:http://weld.cdi-spec.org/[Weld-CDIリファレンス・インプリメンテーション]を開発してきました。"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:24
#, fuzzy
msgid "The CDI API is built on top of `javax.inject` so that it should be easy to migrate from any DI framework compatible with `@Inject`"
msgstr "CDI APIは、 `javax.inject` 上に構築されているため、以下の機能と互換性のあるDIフレームワークから簡単に移行することができます。 `@Inject`"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:28
#, fuzzy
msgid "Our primary goal was to implement a supersonic build-time oriented DI solution compatible with CDI.  This would allow users to continue using CDI in their applications but also leverage Quarkus build-time optimizations.  However, ArC is not a full CDI implementation verified by the TCK - see also the list of https://quarkus.io/guides/cdi-reference#supported_features[supported features] and the list of https://quarkus.io/guides/cdi-reference#limitations[limitations]."
msgstr "私たちの主な目標は、CDIと互換性のある超音速ビルドタイム指向のDIソリューションを実装することでした。これにより、ユーザーは自分のアプリケーションでCDIを使い続けながら、Quarkusのビルドタイム最適化を活用することができます。しかし、ArCはTCKで検証された完全なCDIの実装ではありません - link:https://quarkus.io/guides/cdi-reference#supported_features[サポートされる機能]のリストと link:https://quarkus.io/guides/cdi-reference#limitations[制限]のリストも参照してください。"

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:29
#, fuzzy, no-wrap
msgid "Build-time Processing Benefits and Drawbacks"
msgstr "ビルドタイムプロセッシングのメリットとデメリット"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:31
#, fuzzy, no-wrap
msgid "Fail Fast"
msgstr "フェイルファスト"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:34
#, fuzzy
msgid "Beans and dependencies are validated during the build so that your application can never fail in production with common problems such as `AmbiguousResolutionException` or `UnsatisfiedResolutionException`."
msgstr "ビルド中にBeanと依存関係が検証されるので、 `AmbiguousResolutionException` や `UnsatisfiedResolutionException` のような一般的な問題でアプリケーションが本番で失敗することはありません。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:35
#, fuzzy, no-wrap
msgid "Instant Startup"
msgstr "インスタント・スタートアップ"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:40
#, fuzzy
msgid "When the app starts ArC just loads all the metadata and initializes some internal structures.  There is no need to analyze the application classes again.  This means negligible startup overhead."
msgstr "アプリケーションが起動すると、ArCはすべてのメタデータを読み込み、いくつかの内部構造を初期化するだけです。アプリケーションクラスを再度分析する必要はありません。つまり、起動時のオーバーヘッドはごくわずかなのです。"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:42
#, fuzzy
msgid "This applies to both the GraalVM and OpenJDK HotSpot runtimes."
msgstr "これは、GraalVMとOpenJDK HotSpotの両方のランタイムに適用されます。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:43
#, fuzzy, no-wrap
msgid "Minimized Runtime"
msgstr "ランタイムの最小化"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:48
#, fuzzy
msgid "In Quarkus 0.19, ArC plus integration runtime consist of 72 classes and occupies ~ 140 KB in jars.  http://weld.cdi-spec.org/[Weld 3.1.1] (CDI Reference Implementation) core is roughly 1200 classes and approx. 2 MB jar.  In other words, ArC runtime takes approx. 7% of the Weld runtime in terms of number of classes and jar footprint."
msgstr "Quarkus 0.19では、ArCと統合ランタイムは72のクラスで構成され、約140KBのジャーを使用しています。 link:http://weld.cdi-spec.org/[Weld 3.1.1](CDI Reference Implementation)のコアは約1200クラスで、約2MBのjarです。言い換えれば、クラスの数とjarのフットプリントの点で、ArCランタイムはWeldランタイムの約7％を占めています。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:49
#, fuzzy, no-wrap
msgid "Optimized Code Paths and Metadata Structures"
msgstr "最適化されたコードパスとメタデータ構造"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:53
#, fuzzy
msgid "When generating the metadata classes ArC can sometimes produce leaner and smarter logic because it has the whole application analyzed already.  This is one of the areas where we would like to develop and improve ArC."
msgstr "メタデータクラスを生成する際、ArCはアプリケーション全体を分析済みなので、より無駄のないスマートなロジックを生成できることがあります。これはArCを発展させ、改善していきたい分野のひとつです。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:54
#, fuzzy, no-wrap
msgid "Extension Points"
msgstr "拡張ポイント"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:60
#, fuzzy
msgid "Unfortunately, CDI portable extensions are inherently runtime constructs and therefore cannot be fully supported in Quarkus.  In fact, all CDI extensions are ignored at the moment.  Nevertheless, most of the functionality can be achieved using https://quarkus.io/guides/cdi-reference#build-time-extension-points[Quarkus extensions].  The CDI extensions are encouraged to generalize the code, and if possible provide a Quarkus extension to make full use of build-time metadata processing."
msgstr "残念ながら、CDIポータブルエクステンションは本質的にランタイムコンストラクトであるため、Quarkusで完全にサポートすることはできません。実際、現時点ではすべてのCDI拡張機能は無視されています。とはいえ、ほとんどの機能は link:https://quarkus.io/guides/cdi-reference#build-time-extension-points[Quarkusの拡張機能]を使って実現できます。CDI拡張機能は、コードを一般化し、可能であれば、ビルド時のメタデータ処理を完全に利用するためのQuarkus拡張機能を提供することが推奨されます。"

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:61
#, no-wrap
msgid "Non-standard Features"
msgstr "標準外の機能"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:65
#, fuzzy
msgid "ArC is not limited to standards and we're constantly looking for ways to go beyond and extend the possibilities.  Following are some examples of non-standard features provided by Quarkus DI."
msgstr "ArCは標準にとらわれず、可能性を超えて拡張する方法を常に模索しています。以下は、Quarkus DIで提供されている標準外の機能の例です。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:66
#, no-wrap
msgid "Qualified Injected Fields"
msgstr "修飾された注入フィールド"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:69
#, fuzzy
msgid "Normally, if you declare an injected field you'll always need to use `@Inject` and optionally required qualifiers:"
msgstr "通常、注入されるフィールドを宣言する場合、常に `@Inject` とオプションで必須の修飾子を使用する必要があります。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:75
#, no-wrap
msgid ""
"  @Inject\n"
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""
"  @Inject\n"
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:78
#, fuzzy
msgid "In Quarkus, you can skip the `@Inject` annotation completely if an injected field declares at least one qualifier:"
msgstr "Quarkusでは、注入されたフィールドが少なくとも1つの修飾子を宣言している場合、 `@Inject` アノテーションを完全にスキップすることができます。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:83
#, no-wrap
msgid ""
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:86
#, fuzzy
msgid "`@Inject` is still required for constructor and method injection."
msgstr "`@Inject` は、コンストラクタやメソッドのインジェクションにも必要です。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:87
#, no-wrap
msgid "Simplified Constructor Injection"
msgstr "簡略化されたコンストラクター注入"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:91
#, fuzzy
msgid "In CDI, a normal scoped bean must always declare a no-args constructor (this constructor is normally generated by the compiler unless you declare any other constructor).  However, this requirement complicates constructor injection - you would need to provide a dummy no-args constructor to make things work in CDI."
msgstr "CDIでは、通常のスコープ付きBeanは常にno-argsコンストラクタを宣言する必要があります（このコンストラクタは、他のコンストラクタを宣言しない限り、通常はコンパイラによって生成されます）。しかし、この要件はコンストラクタ・インジェクションを複雑にします。CDI で動作させるためには、ダミーの no-args コンストラクタを提供する必要があります。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:96
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:116
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyCoolService {\n"
msgstr ""
"@ApplicationScoped\n"
"public class MyCoolService {\n"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:98
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:118
#, no-wrap
msgid "  private SimpleProcessor processor;\n"
msgstr "  private SimpleProcessor processor;\n"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:101
#, no-wrap
msgid ""
"  MyCoolService() { // dummy constructor needed\n"
"  }\n"
msgstr ""
"  MyCoolService() { // dummy constructor needed\n"
"  }\n"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:107
#, no-wrap
msgid ""
"  @Inject // constructor injection\n"
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""
"  @Inject // constructor injection\n"
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:111
msgid "There is no need to declare dummy constructors for normal scoped bean in Quarkus - they are generated automatically.  Also if there's only one constructor there is no need for `@Inject`."
msgstr "Quarkusでは、通常のスコープ付き Bean のためにダミーのコンストラクターを宣言する必要はありません。自動的に生成されます。また、コンストラクターが 1 つしかない場合は、`@Inject` の必要性はありません。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:123
#, no-wrap
msgid ""
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:126
#, fuzzy
msgid "We don't generate a no-args constructor automatically if a bean class extends another class that does not declare a no-args constructor."
msgstr "Beanクラスが、無引数コンストラクタを宣言していない別のクラスを継承している場合、無引数コンストラクタは自動的に生成されません。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:127
#, no-wrap
msgid "Default Beans"
msgstr "デフォルトの Bean"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:131
#, fuzzy
msgid "CDI has a feature called https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[alternatives].  Simply said a bean annotated with `@Alternative` and `@Priority` takes precedence over the non-alternative beans during type-safe resolution."
msgstr "CDIには link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[オルタナティブ]と呼ばれる機能があります。簡単に言うと、 `@Alternative` と `@Priority` でアノテーションされたビーンは、型安全解決の間、代替でないビーンよりも優先されます。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:136
#, no-wrap
msgid ""
"class MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:141
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(1)\n"
"class MyAlternativeBean extends MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:144
#, no-wrap
msgid ""
"@Inject // MyAlternativeBean wins and is injected!\n"
"MyBean bean;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:153
#, fuzzy
msgid "So, what if a user wants to override a bean defined by a library/extension? The bean would have to be marked as a CDI `@Alternative` that is enabled using the `@Priority` annotation.  Is there a simpler approach? Yes, there is.  You can use a non-standard feature called \"default beans\".  In this case, a bean that can be overridden should be annotated with `@io.quarkus.arc.DefaultBean`.  And that's it."
msgstr "では、ユーザがライブラリ/拡張機能で定義されたBeanをオーバーライドしたい場合はどうすればよいのでしょうか。そのBeanは、 `@Priority` アノテーションを使用して有効化されたCDI `@Alternative` としてマークされなければなりません。もっと簡単な方法はないのでしょうか？はい、あります。デフォルトビーン」という非標準的な機能を使うことができます。この場合、オーバーライド可能なBeanは、 `@io.quarkus.arc.DefaultBean` でアノテーションする必要があります。これで完成です。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:159
#, no-wrap
msgid ""
"@DefaultBean\n"
"class MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:162
#, no-wrap
msgid ""
"class MyOwnBean extends MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:165
#, no-wrap
msgid ""
"@Inject // MyOwnBean wins and is injected!\n"
"MyBean bean;\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:167
#, no-wrap
msgid "Removing Unused Beans"
msgstr "未使用の Bean の削除"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:173
#, fuzzy
msgid "GraalVM native image does a pretty good job when removing all classes that are not reachable from your application.  However, sometimes checking reachability is not enough.  Sometimes the framework itself must decide whether a component is needed or not.  In standard CDI, all beans are retained by the container no matter whether they're needed or not."
msgstr "GraalVMのネイティブ・イメージは、アプリケーションから到達できないクラスをすべて削除する際に、かなり良い仕事をします。しかし、到達可能性のチェックだけでは不十分な場合があります。時には、フレームワーク自身が、コンポーネントが必要かどうかを判断しなければなりません。標準的なCDIでは、すべてのBeanは、必要かどうかに関わらず、コンテナによって保持されます。"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:180
#, fuzzy
msgid "Let's suppose we have a bean class `org.acme.Foo`.  This bean class imports and uses a lot of various classes.  It's annotated with `@ApplicationScoped` and so Quarkus needs to generate a bean metadata class and a client proxy and register this metadata when the application starts.  But what if nobody ever uses this bean? We would still hold a reference on the generated metadata, and the bean class itself, and its dependencies.  In other words, all these classes would be reachable."
msgstr "例えば、ビーンクラス `org.acme.Foo` があるとします。このBeanクラスは、多くの様々なクラスをインポートして使用しています。 `@ApplicationScoped` でアノテーションされているので、Quarkusはアプリケーションの起動時にBeanメタデータクラスとクライアントプロキシを生成し、このメタデータを登録する必要があります。しかし、もし誰もこのBeanを使わなかったらどうでしょう？生成されたメタデータ、ビーンクラス自体、そしてその依存関係の参照を保持することになります。言い換えれば、これらのクラスはすべて到達可能である。"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:187
#, fuzzy
msgid "Quarkus attempts to remove all *unused beans* during build by default.  This helps to reduce the number of generated classes and also the amount of memory needed at runtime.  But how do we actually detect an unused bean? The rules are described in the https://quarkus.io/guides/cdi-reference#remove_unused_beans[reference guide] but simply said: if a bean is not injected anywhere and cannot be reached in any other standard way (e.g. observer notification) it is removed.  Moreover, users can instruct the container to not remove a bean by annotating the bean class with `@io.quarkus.arc.Unremovable`.  Finally, this optimization can be disabled and fine tuned by using the `quarkus.arc.remove-unused-beans` property."
msgstr "Quarkusでは、デフォルトでビルド時に *未使用のBean*をすべて削除しようとします。これにより、生成されるクラスの数が減り、実行時に必要なメモリの量も減ります。しかし、実際にはどのようにして未使用のBeanを検出するのでしょうか。ルールは link:https://quarkus.io/guides/cdi-reference#remove_unused_beans[リファレンス]ガイドに記載されていますが、簡単に言うと、ビーンがどこにも注入されておらず、他の標準的な方法(オブザーバー通知など)で到達できない場合、そのビーンは削除されます。さらに，ユーザは，Beanクラスに `@io.quarkus.arc.Unremovable` をアノテーションすることにより，Beanを削除しないようにコンテナに指示することができる。最後に、この最適化は、 `quarkus.arc.remove-unused-beans` プロパティを使用して無効にしたり、微調整したりすることができます。"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:188
#, fuzzy
msgid "This feature applies to the JVM mode as well."
msgstr "この機能は、JVMモードにも適用されます。"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"
