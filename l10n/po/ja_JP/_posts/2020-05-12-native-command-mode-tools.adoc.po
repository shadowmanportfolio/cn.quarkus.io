# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:1
#, fuzzy, no-wrap
msgid "dplatz"
msgstr "大広間"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:1
#, fuzzy, no-wrap
msgid "2020-05-12"
msgstr "2020-05-12"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:1
#, fuzzy, no-wrap
msgid "Ideas on how to use Quarkus command-mode to develop native applications with web frontends; built with GitHub Actions."
msgstr "Quarkusのコマンドモードを使用して、Webフロントエンドのあるネイティブアプリケ"
"ーションを開発する方法についてのアイデア。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:1
#, fuzzy, no-wrap
msgid "development-tips"
msgstr "開発秘話"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:1
#, fuzzy, no-wrap
msgid "Ideas on Quarkus command-mode, UI-based apps and releasing via GitHub Actions"
msgstr "Quarkusのコマンドモード、UIベースのアプリ、GitHub "
"Actions経由のリリースに関するアイデア"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:12
#, fuzzy
msgid "Quarkus is advertised as a cloud-native runtime for Microservices but the link:https://quarkus.io/blog/quarkus-1-4-final-released/[introduction of command-mode] might have opened up new and interesting spaces where it could find adoption."
msgstr ""
"QuarkusはMicroservicesのためのクラウド・ネイティブ・ランタイムとして宣伝され"
"ていますが、 link:https://quarkus.io/blog/quarkus-1-4-final-released/[コマン"
"ドモードの導入]は、Quarkusが採用される可能性のある、新しくて面白い空間を開い"
"たかもしれません。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:15
#, fuzzy
msgid "In this blog post I will present a few ideas about the possible usage of command-mode in Quarkus that you might find useful to consider when developing your next tool.  If you have not heard about command-mode, I suggest to start reading link:https://quarkus.io/blog/introducing-command-mode/[this introduction] first and then come back."
msgstr ""
"このブログ記事では、Quarkusにおけるコマンドモードの使い方について、次のツール"
"を開発する際に参考になりそうなアイデアをいくつか紹介します。コマンドモードに"
"ついてご存知でない方は、まず link:https://quarkus.io/blog/"
"introducing-command-mode/"
"[この紹介文]を読んでから戻ってくることをお勧めします。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:17
#, fuzzy
msgid "Ready? Ok, let's continue."
msgstr "いいですか？よし、続けよう。"

#. type: Title ==
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:18
#, fuzzy, no-wrap
msgid "Cross-platform builds via GitHub Actions"
msgstr "GitHub Actionsによるクロスプラットフォームのビルド"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:22
#, fuzzy
msgid "Command-line tools like `kubectl` are often written in languages like C, Go or Rust and compiled to native executables for various target platforms.  This is great because you don't need to rely on Java installed; or being installed in a wrong version."
msgstr ""
"`kubectl` のようなコマンドラインツールは、C、Go、Rust などの言語で書かれてい"
"ることが多く、様々なターゲットプラットフォーム用のネイティブ実行可能ファイル"
"にコンパイルされます。これは、Javaがインストールされていたり、間違ったバージ"
"ョンでインストールされていたりすることに頼る必要がないという点で素晴らしいこ"
"とです。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:25
#, fuzzy
msgid "With GraalVM native-images, this argument against Java does not hold anymore. Quarkus supports the build of native executables via GraalVM; mainly for building natively for Linux containers but there is experimental support for OS X and Windows as well.  Using the native build in combination with command-mode sounds like a very interesting and productive choice to write command-line tools."
msgstr ""
"GraalVMのネイティブイメージでは、Javaに対するこの議論はもう通用しません。Quar"
"kusは、GraalVMによるネイティブ実行可能ファイルのビルドをサポートしています。"
"主にLinuxコンテナ用のネイティブビルドですが、実験的にOS XとWindowsもサポート"
"しています。ネイティブビルドをコマンドモードと組み合わせて使うことは、コマン"
"ドラインツールを書く上で非常に興味深く、生産的な選択となりそうです。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:28
#, fuzzy
msgid "But how do you build your native executables for Linux, Mac and Windows? If you are hosting your sources as a GitHub project, I can tell you that it is super-simple to get started. GitHub offers link:https://help.github.com/en/actions/building-and-testing-code-with-continuous-integration/setting-up-continuous-integration-using-github-actions[ Actions] which is a free service like link:https://travis-ci.org/[Travis CI] but fully integrated into the GitHub experience. Also, it offers runners (i.e. the build agents) for Linux, Mac and Windows."
msgstr ""
"しかし、Linux、Mac、Windows用のネイティブ実行可能ファイルをどうやって作るので"
"しょうか？もしあなたがソースをGitHubプロジェクトとしてホストしているのであれ"
"ば、超簡単に始めることができます。GitHubは link:https://help.github.com/en/"
"actions/building-and-testing-code-with-continuous-integration/setting-up-"
"continuous-integration-using-github-actions[Actions]を提供しています。"
"Actionsは link:https://travis-ci.org/[Travis CI]のような無料のサービスですが"
"、GitHubのエクスペリエンスに完全に統合されています。また、Linux、Mac、Windows"
"用のランナー（ビルドエージェント）も用意されています。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:30
#, fuzzy
msgid "To provide a native release-build for linux, place the following file under `.github/workflows` in your repo:"
msgstr ""
"linux用のネイティブリリースビルドを提供するには、"
"以下のファイルをあなたのレポの `.github/workflows` の下に置いてください。"

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:34
#, no-wrap
msgid "name: release-build\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:38
#, no-wrap
msgid ""
"on:\n"
"  release:\n"
"    types: [created] <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:41
#, no-wrap
msgid ""
"jobs:\n"
"  build:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:43
#, no-wrap
msgid "    runs-on: ubuntu-latest <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:66
#, no-wrap
msgid ""
"    steps:\n"
"    - uses: actions/checkout@v2\n"
"    - name: Install graalvm\n"
"      uses: DeLaGuardo/setup-graalvm@3\n"
"      with:\n"
"        graalvm-version: '20.0.0.java11'\n"
"    - name: Install native-image\n"
"      run: gu install native-image\n"
"    - name: Set version\n"
"      run: ./mvnw versions:set -DnewVersion=\"${{ github.event.release.tag_name }}\" <3>\n"
"    - name: Build native executable\n"
"      run: ./mvnw package -Dnative <4>\n"
"    - name: Upload native executable\n"
"      id: upload-native-executable\n"
"      uses: actions/upload-release-asset@v1\n"
"      env:\n"
"        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n"
"      with:\n"
"        upload_url: ${{ github.event.release.upload_url }}\n"
"        asset_path: ./target/quarkus-ls-${{ github.event.release.tag_name }}-runner <5>\n"
"        asset_name: quarkus-ls-${{ github.event.release.tag_name }}-linux\n"
"        asset_content_type: application/octet-stream\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:68
#, fuzzy
msgid "This build-job is triggered when a new release is triggered. If your are the owner, you will have the button \"Draft a new release\" under link:https://github.com/38leinaD/quarkus-native-app-starter/releases[releases]"
msgstr ""
"このビルドジョブは、新しいリリースがトリガーされたときに起動されます。あなた"
"がオーナーであれば、 link:https://github.com/38leinaD/"
"quarkus-native-app-starter/releases[リリース]の下に「Draft a new "
"release」というボタンがあります。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:69
#, fuzzy
msgid "Uses a ubuntu runner. See link:https://github.com/actions/virtual-environments[GitHub Actions Virtual Environments] for a list of all supported environments/runners."
msgstr ""
"ubuntuのランナーを使用します。サポートされているすべての環境/ランナーのリスト"
"は、 link:https://github.com/actions/virtual-environments[GitHub Actions "
"Virtual Environments]を参照してください。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:70
#, fuzzy
msgid "Set version in `pom.xml` based on specified release version"
msgstr "指定されたリリースバージョンに基づいて `pom.xml` にバージョンを設定する"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:71
#, fuzzy
msgid "Build the native executable"
msgstr "ネイティブ実行可能ファイルをビルドする"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:72
#, fuzzy
msgid "Upload/attach the artifact to the release"
msgstr "リリースへの成果物のアップロード/添付"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:74
#, fuzzy
msgid "Building for Mac just means to provide another job with `runs-on: macos-latest`."
msgstr "Macのために構築することは、 `runs-on: macos-latest` "
"で別の仕事を提供することを意味します。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:77
#, fuzzy
msgid "Windows is essentially the same but requires a little more attention and knowledge about the tooling. Getting it working required some investigation on how the native build depends on Visual Studio. Also,the Windows runners on GitHub Actions have a too small page-file by default. That needs increasing as the memory consumption is rather high when running the GraalVMs `native-image` command.  An full example of a working native-image build under windows can be found link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/.github/workflows/release-build-native-win64.yml[here]."
msgstr ""
"Windowsも基本的には同じですが、ツールに関する知識と注意が必要です。ネイティブ"
"・ビルドがどのようにVisual "
"Studioに依存しているかを調べる必要がありました。また、GitHub Actionsに掲載さ"
"れているWindows版ランナーは、デフォルトではページファイルが小さすぎます。"
"GraalVMs `native-image` コマンドを実行する際にメモリ消費量が多いので、これを"
"増やす必要があります。Windowsでのネイティブ・イメージ・ビルドの例は、 "
"link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/."
"github/workflows/release-build-native-win64.yml[こちら]をご覧ください。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:79
#, fuzzy
msgid "After triggering a release from the GitHub UI, the jobs for all target environments are triggered. The artifacts for all platforms are will be available within minutes and can be consumed by your users. Building, hosting: 100% free and no external service or registration needed."
msgstr ""
"GitHub UIからリリースをトリガーすると、対象となるすべての環境のジョブがトリガ"
"ーされます。すべてのプラットフォームの成果物は数分以内に利用可能となり、ユー"
"ザーはこれを利用することができます。構築、ホスティング。100%無料で、外部サー"
"ビスや登録は必要ありません。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:81
#, fuzzy
msgid "image:github-actions.jpg[]"
msgstr "image:github-actions.jpg[alt=github actions]"

#. type: Title ==
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:82
#, fuzzy, no-wrap
msgid "Command-mode for UI-based applications"
msgstr "UIベースのアプリケーションのためのコマンドモード"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:86
#, fuzzy
msgid "Another exciting thing about command-mode is that it not only allows to write nice command-line tools (using e.g. link:https://picocli.info/[Picocli], link:http://aeshell.github.io/[Aesh] or link:https://commons.apache.org/proper/commons-cli/[Apache Commons CLI]) but in general allows to have more control over the lifecycle of an application.  With the possibility to embed your HTML/Javascript frontend, we can even build link:https://www.electronjs.org/[Electron-style] desktop application with rich user interfaces for our tools. As even JSF most likely will be link:https://github.com/adminfaces/quarkus-admin-starter[coming to Quarkus], there is a great variety of choices on how to build a frontend."
msgstr ""
"コマンドモードのもう一つの魅力は、（ link:https://picocli.info/[Picocli]や "
"link:http://aeshell.github.io/[Aesh]、 link:https://commons.apache.org/"
"proper/commons-cli/[Apache Commons CLI]などを使って）素敵なコマンドラインツー"
"ルを書けるだけでなく、一般的に、アプリケーションのライフサイクルをより細かく"
"コントロールできることです。HTML/"
"Javascriptのフロントエンドを埋め込むことができるので、"
"ツールのためのリッチなユーザーインターフェースを持つ link:https://www."
"electronjs.org/"
"[Electronスタイルの]デスクトップアプリケーションを構築することもできます。"
"JSFも link:https://github.com/adminfaces/quarkus-admin-starter[Quarkusに搭載"
"さ]れる可能性が高いため、フロントエンドの構築方法には非常に多様な選択肢があり"
"ます。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:89
#, fuzzy
msgid "A very simple scaffold does not require much. If you have `quarkus-resteasy` as a dependency, the embedded server will be started on port `8080` just like in any regular Quarkus backend application.  As your tools might be running on a developer system alongside other app-servers or Quarkus instances, it is a good idea to choose a different port to not run into conflicts."
msgstr ""
"非常にシンプルなscaffoldはあまり必要ありません。依存関係として `quarkus-"
"resteasy` "
"を設定している場合、通常のQuarkusバックエンドアプリケーションと同様に、"
"埋め込みサーバーがポート `8080` で開始されます。ツールが他のアプリケーション"
"サーバーやQuarkusインスタンスと一緒に開発者システム上で実行されている可能性が"
"あるため、競合しないように別のポートを選択することをお勧めします。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:92
#, fuzzy
msgid "Configuring `quarkus.http.port=0` in your `application.properties` will make Quarkus choose a random but free port.  How to know from within your application which port it is? When injecting the config-property via `@ConfigProperty(name = \"quarkus.http.port\")`, you will get the assigned port."
msgstr ""
"`application.properties` で `quarkus.http.port=0` を設定すると、Quarkusはラン"
"ダムだが自由なポートを選択します。アプリケーション内でどのポートかを知るには"
"どうすればよいでしょうか？ `@ConfigProperty(name = \"quarkus.http.port\")` "
"を介してconfig-propertyを注入すると、割り当てられたポートが得られます。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:94
#, fuzzy
msgid "Assuming you have your front-end under `src/main/resources/META-INF/resources` (in my example it is plain HTML with Javascript) and using a very old Java API (`Desktop.getDesktop().browse(...)`), you can spin up the default browser to your app like this:"
msgstr ""
"`src/main/resources/META-INF/resources` の下にフロントエンドを置き（私の例で"
"は、プレーンなHTMLにJavascriptを組み合わせています）、非常に古いJava API ( "
"`Desktop.getDesktop().browse(…​)`) を使用しているとすると、次のようにしてアプ"
"リのデフォルトブラウザを立ち上げることができます。"

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:103
#, no-wrap
msgid ""
"import java.awt.Desktop;\n"
"import java.net.URI;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import io.quarkus.runtime.Quarkus;\n"
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:106
#, no-wrap
msgid ""
"@QuarkusMain\n"
"public class HelloMain implements QuarkusApplication {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:109
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"quarkus.http.port\")\n"
"    Integer assignedPort; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:113
#, no-wrap
msgid ""
"    public static void main(String[] args) {\n"
"        Quarkus.run(HelloMain.class, args);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:117
#, no-wrap
msgid ""
"    @Override\n"
"    public int run(String... args) throws Exception {\n"
"        URI webappUri = new URI(\"http://localhost:\" + assignedPort + \"/index.html\"); <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:120
#, no-wrap
msgid ""
"        Desktop.getDesktop().browse(webappUri);\n"
"        Quarkus.waitForExit(); <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:124
#, no-wrap
msgid ""
"        return 0;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:126
#, fuzzy
msgid "Get the assigned port"
msgstr "割り当てられたポートの取得"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:127
#, fuzzy
msgid "Open the `index.html` of your webapp with the default browser."
msgstr "デフォルトのブラウザで、Webアプリの `index.html` を開きます。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:128
#, fuzzy
msgid "Do not exit immediately but wait until the browser/tab is closed. See below for options how to do this."
msgstr "すぐには終了せず、ブラウザやタブが閉じられるまで待ちます。この方法については"
"、以下を参照してください。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:130
#, fuzzy
msgid "There are some more considerations here to make it work reliably."
msgstr "ここでは、確実に動作させるために、さらにいくつかの注意点があります。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:133
#, fuzzy
msgid "Ending the application when the browser window closes requires some feedback. There are simple ways to achieve this in a semi-reliabe way (see the usage of link:https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event[unload] in link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/src/main/resources/META-INF/resources/index.html#L89[index.html] by calling link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/src/main/java/org/acme/LsResource.java#L38[a rest endpoint]).  For Desktop-class applications, one might have to control the browser process more closely; or, like Electron, even package an own version of Chrome."
msgstr ""
"ブラウザのウィンドウが閉じたときにアプリケーションを終了させるには、何らかの"
"フィードバックが必要です。これをセミリライアブルな方法で実現する簡単な方法が"
"あります（ link:https://github.com/38leinaD/quarkus-native-app-starter/blob/"
"master/src/main/java/org/acme/LsResource.java#L38[restエンド]"
"ポイントを呼び出して link:https://github.com/38leinaD/"
"quarkus-native-app-starter/blob/master/src/main/resources/META-INF/resources/"
"index.html#L89[index.html]で link:https://developer.mozilla.org/en-US/docs/"
"Web/API/Window/unload_event[unload]を使用する方法を参照）。デスクトップクラス"
"のアプリケーションでは、ブラウザプロセスをより詳細に制御する必要があるかもし"
"れません。また、Electronのように、独自のバージョンのChromeをパッケージ化する"
"こともできます。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:135
#, fuzzy
msgid "A problem I was facing is that `Desktop.getDesktop().browse(...)` does not seem to work reliably when run in native mode with the GraalVM version I was using (link:https://github.com/oracle/graal/issues/2430[issue]). The alternative, like already stated before, is to control the browser more directly and for example open a Chrome window via link:https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#exec(java.lang.String)[Runtime.exec(...)]. See the link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/src/main/java/org/acme/LsMain.java[main method] of the starter project for some possibilities to experiment with."
msgstr ""
"私が直面していた問題は、私が使用していたGraalVMのバージョン "
"link:https://github.com/oracle/graal/issues/"
"2430[(issue)]でネイティブモードで実行した場合、 `Desktop.getDesktop()."
"browse(…​)` が確実に動作しないように見えることです。代替案としては、先に述べ"
"たように、ブラウザをより直接的に制御し、例えば link:https://docs.oracle.com/"
"javase/7/docs/api/java/lang/Runtime.html#exec(java.lang.String)[Runtime."
"exec(...)]でChromeのウィンドウを開くことです。スタータープロジェクトの "
"link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/src/"
"main/java/org/acme/LsMain."
"java[mainメソッド]で、いくつかの可能性を試してみてください。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:137
#, fuzzy
msgid "image:quarkus-native-webui.gif[]"
msgstr "image:quarkus-native-webui.gif[alt=quarkus native webui]"

#. type: Title ==
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:138
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:142
#, fuzzy
msgid "It will be interesting to see where people are taking command-mode. Maybe we will be seeing Electron-style Desktop applications being developed based on Quarkus? At least to me, this sounds promising and productive. No wasting of time to learn a completely different stack just to write a small tool. Instead, use the same stack and API I am familar with from backend development anyway."
msgstr ""
"人々がコマンドモードをどのように活用していくのか、興味深いところです。もしか"
"したら、QuarkusをベースにしたElectronスタイルのデスクトップアプリケーションが"
"開発されるかもしれません。少なくとも私にとっては、これは有望で生産的なことだ"
"と思います。小さなツールを書くために、まったく別のスタックを学ぶのは時間の無"
"駄です。その代わり、バックエンド開発で慣れ親しんだ同じスタックとAPIを使うこと"
"ができます。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:144
#, fuzzy
msgid "We have seen that making a tool available in a way that is easy to consume by people can be achived with GitHub and GitHub Actions alone."
msgstr "ツールを人々が消費しやすい形で利用できるようにするには、GitHubとGitHub "
"Actionsだけで達成できることがわかりました。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:145
#, fuzzy
msgid "In case you are interested in a more complete tool where I have used the ideas presented here, check out my link:https://github.com/38leinaD/bpmn-diff[bpmn-diff] project which is a Git difftool for BPMN files. As an added benefit, it uses Gradle as opposed to Maven and thus provides additional examples on the use of GitHub Actions."
msgstr ""
"ここで紹介したアイデアを使用したより完全なツールに興味がある場合は、"
"BPMNファイル用のGit difftoolである私の link:https://github.com/38leinaD/bpmn-"
"diff[bpmn-diff]プロジェクトをチェックしてください。さらに、MavenではなくGradl"
"eを使用しているため、GitHub Actionsの使用例も追加されています。"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: 'Ideas on Quarkus command-mode, UI-based apps and releasing via GitHub Actions'\n"
#~ "date: 2020-05-12\n"
#~ "tags: development-tips\n"
#~ "synopsis: Ideas on how to use Quarkus command-mode to develop native applications with web frontends; built with GitHub Actions.\n"
#~ "author: dplatz\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: 'Quarkusのコマンドモード、UIベースのアプリ、GitHub Actionsでのリリースに関するアイデア'\n"
#~ "date: 2020-05-12\n"
#~ "tags: development-tips\n"
#~ "synopsis: Quarkusのコマンドモードを使用して、Webフロントエンドを持つネイティブアプリケーションを開発する方法についてのアイデアです。\n"
#~ "author: dplatz\n"
#~ "---\n"
