# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "kenfinnigan"
msgstr "ケンフイニガン"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-19"
msgstr "2020-10-19"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "Micrometer is the recommended approach for metrics with Quarkus."
msgstr "Quarkusを使用したメトリクスでは、マイクロメータが推奨されるアプローチです。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "metrics announcement micrometer"
msgstr "メトリクス・アナウンス・マイクロメーター"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "Micrometer is recommended for metrics with Quarkus 1.9"
msgstr "Quarkus 1.9でのメトリクスはマイクロメータを推奨"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:13
#, fuzzy
msgid "Though Quarkus offers extensions for MicroProfile, including metrics, we're now recommending the use of the Micrometer extension for metrics in Quarkus with the release of 1.9."
msgstr ""
"Quarkusでは、メトリクスを含むMicroProfileの拡張機能を提供していますが、1.9の"
"リリースに伴い、Quarkusのメトリクス用拡張機能であるMicrometerの使用を推奨して"
"います。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:14
#, fuzzy, no-wrap
msgid "Brief MicroProfile Metrics History"
msgstr "マイクロプロファイル・メトリクスの略歴"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:19
#, fuzzy
msgid "During the creation of the MicroProfile Metrics specification in 2017, Dropwizard Metrics was the most popular metrics library at that time.  It was a natural fit for MicroProfile to use DropWizard Metrics as inspiration for a metrics specification."
msgstr ""
"2017年にMicroProfile Metrics仕様を作成した際、Dropwizard "
"Metricsは当時最も人気のあるメトリクスライブラリでした。"
"MicroProfileがDropWizard Metricsをメトリクス仕様のインスピレーションとして使"
"用するのは自然な流れでした。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:22
#, fuzzy
msgid "The monitoring ecosystem for cloud environments has evolved considerably since then, and that has prompted a re-evaluation of how we approach working with metrics."
msgstr "その後、クラウド環境のモニタリングエコシステムが大きく進化したことで、メトリ"
"クスの扱い方を再検討する必要が出てきました。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:24
#, fuzzy, no-wrap
msgid "Why Micrometer?"
msgstr "なぜマイクロメーターなのか？"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:30
#, fuzzy
msgid "During the last 3-4 years, there's been a growing focus on the needs of Site Reliability Engineers (SREs) in monitoring the operations of many varied services.  This focus leads to driving simplicity and ease of use to the SRE world.  We don't want make the life of an SRE harder!"
msgstr ""
"ここ3～4年の間に、様々なサービスの運用状況を監視するサイト・リライアビリティ"
"・エンジニア（SRE）のニーズが高まってきました。この注目は、SREの世界にシンプ"
"ルさと使いやすさを提供することにつながります。私たちは、SREの生活を困難にした"
"くありません。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:35
#, fuzzy
msgid "The design and development of Micrometer focused on the needs of SREs from the very beginning.  A key aspect to that approach is separating out the metric implementation into the registries, enabling different registries to customize how the metric export, aligning with a specific monitoring tool."
msgstr ""
"Micrometerの設計と開発では、最初からSREのニーズを重視しました。このアプローチ"
"の重要な点は、メトリックの実装をレジストリーに分離することで、レジストリーご"
"とにメトリックのエクスポート方法をカスタマイズし、特定のモニタリングツールに"
"合わせることができます。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:41
#, fuzzy
msgid "Micrometer was built to adapt to the changing cloud native landscape while presenting a steady API for applications and libraries to use.  Each MeterRegistry implementation encapsulates its specific aggregation and reporting requirements.  There are MeterRegistry implementations available for cloud monitoring systems like Prometheus and Statsd, as well as service providers like Datadog, New Relic or Stackdriver.  You can include more than one of these registries at the same time, too."
msgstr ""
"Micrometerは、アプリケーションやライブラリが使用できる安定したAPIを提示しなが"
"ら、変化するクラウドネイティブの状況に適応できるように構築されました。各Meter"
"Registryの実装は、特定の集計やレポートの要件をカプセル化しています。MeterRegi"
"stryの実装には、PrometheusやStatsdなどのクラウド監視システムや、Datadog、New "
"Relic、Stackdriverなどのサービスプロバイダーがあります。これらのレジストリー"
"を同時に複数含めることも可能です。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:46
#, fuzzy
msgid "While Micrometer has an API for applications to use, practical usage is more focused on the MeterBinder abstraction.  MeterBinders allow instrumentation for application libraries to be added later.  It is even better when your application framework can register discovered MeterBinders on your behalf."
msgstr ""
"Micrometerには、アプリケーションが使用するためのAPIがありますが、実際の使用は"
"MeterBinderの抽象化に重点が置かれています。MeterBindersは、後から追加できるア"
"プリケーション・ライブラリのためのインスツルメンテーションを可能にします。ア"
"プリケーション・フレームワークが、発見されたMeterBindersを代行して登録するこ"
"とができれば、さらに良いでしょう。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:52
#, fuzzy
msgid "Micrometer does follow different naming conventions than Dropwizard or MP Metrics, for a few reasons.  First, it uses a dot notation for all metric names, e.g. my.metric.name.  Each registry implementation can then apply its own naming convention to convert that name into something that matches its convention.  The Prometheus MeterRegistry converts my.metric.name into my_metric_name, for example.  Second, Micrometer was built around the notion of dimensional metrics, rather than adapting to it later."
msgstr ""
"Micrometerは、いくつかの理由から、DropwizardやMP Metricsとは異なる命名規則に"
"従っています。まず、すべてのメトリック名にドット表記を使用しています（例：my."
"metric.name）。各レジストリ実装は、独自の命名規則を適用して、その名前をその規"
"則に一致するものに変換することができます。例えば、Prometheus "
"MeterRegistryでは、my.metric.nameをmy_metric_nameに変換します。第二に、Microm"
"eterは次元メトリックの概念を中心に構築されており、後から適応するものではあり"
"ません。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:57
#, fuzzy
msgid "Another benefit to using Micrometer is its usage in the wider Java ecosystem.  Spring Boot and Micronaut both use Micrometer, amongst others.  In an environment where SREs are monitoring instances of different Java frameworks, having them all produce metrics with the same names and dimensions is incredibly beneficial."
msgstr ""
"Micrometerを使用するもう1つの利点は、幅広いJavaエコシステムで使用されているこ"
"とです。Spring BootとMicronautの両方が、とりわけMicrometerを使用しています。S"
"REが異なるJavaフレームワークのインスタンスを監視している環境では、それらすべ"
"てが同じ名前と次元でメトリクスを生成することは非常に有益です。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:59
#, fuzzy
msgid "For example, we likely have a metric for an HTTP endpoint like below:"
msgstr "例えば、以下のようなHTTPエンドポイントのメトリックがあるとします。"

#. type: delimited block -
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:64
#, no-wrap
msgid ""
"http_server_requests{method=\"GET\", uri=\"/hello\", status=\"200\", outcome=\"SUCCESS\"}\n"
"http_server_requests{method=\"GET\", uri=\"/hello\", status=\"500\", outcome=\"SERVER_ERROR\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:70
#, fuzzy
msgid "With Quarkus, the Micrometer extension emits the same HTTP endpoint metric irrespective of whether it was created by JAX-RS, Vert.x, or Undertow without the developer needing to add anything to their code.  The only effort required is to activate metrics."
msgstr ""
"Quarkusでは、Micrometerエクステンションが、JAX-RS、Vert.x、Undertowのいずれで"
"作成されたかにかかわらず、同じHTTPエンドポイントメトリクスを発行しますので、"
"開発者はコードに何も追加する必要がありません。必要な作業は、メトリクスを有効"
"にすることだけです。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:73
#, fuzzy
msgid "The http metrics emitted by the Micrometer extension is the also same as what is emitted by Spring Boot and Micronaut, allowing SREs to work with aggregated http metrics regardless of which Java framework is used."
msgstr ""
"Micrometerエクステンションが出力するhttpメトリクスは、Spring BootやMicronaut"
"が出力するものと同じであるため、SREはどのJavaフレームワークを使用しているかに"
"関わらず、集約されたhttpメトリクスを扱うことができます。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:74
#, fuzzy, no-wrap
msgid "Can I still use MicroProfile Metrics?"
msgstr "MicroProfile Metricsを使用することはできますか？"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:80
#, fuzzy
msgid "The MicroProfile Metrics extension, `quarkus-smallrye-metrics`, is still available and usable by applications.  For all the reasons outlined in <<why-micrometer>>, Quarkus no longer recommends applications use the extension."
msgstr ""
"MicroProfile Metricsエクステンション（ `quarkus-smallrye-metrics` "
"）はまだ利用可能で、アプリケーションで使用できます。 link:#why-micrometer"
"[why-micrometer]]で説明したすべての理由から、Quarkusではアプリケーションがこ"
"の拡張機能を使用することを推奨していません。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:84
#, fuzzy
msgid "In the short to medium term, we will be working with the MicroProfile Metrics community to evolve the specification to be aligned with Micrometer.  What that means for the specification is not likely to be known until some time in 2021."
msgstr ""
"短中期的には、MicroProfile Metricsコミュニティと協力して、仕様をMicrometerに"
"合わせて進化させていく予定です。これが仕様にとってどのような意味を持つのかは"
"、2021年のある時点までわかりそうにありません。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:89
#, fuzzy
msgid "For those that prefer to retain compatibility with MicroProfile Metrics, despite the problems discussed in <<why-micrometer>>, that will remain possible, but at the discretion of application developers to make the informed choice."
msgstr ""
"link:#why-micrometer[why-micrometer]]で説明したような問題があるにもかかわらず"
"、マイクロプロファイル・メトリクスとの互換性を維持したい場合は、今後も可能で"
"すが、アプリケーション開発者が十分な情報に基づいて選択することになります。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:90
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:96
#, fuzzy
msgid "Since 1.8 Quarkus offered two extensions for metrics, `quarkus-micrometer` and `quarkus-smallrye-metrics`.  With the release of 1.9, Quarkus will be recommending `quarkus-micrometer` for use with metrics."
msgstr ""
"1.8以降のQuarkusでは、 `quarkus-micrometer` と `quarkus-smallrye-metrics` "
"という2つのメトリクス用拡張機能が提供されています。1.9のリリースでは、"
"Quarkusはメトリクスでの使用に `quarkus-micrometer` を推奨します。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:99
#, fuzzy
msgid "Come play with the extension, we love it for many reasons and hope you will too.  Reach out if you have any issues using the Micrometer extension in Quarkus!"
msgstr ""
"この拡張機能を使ってみてください。私たちは多くの理由でこの拡張機能を気に入っ"
"ています。QuarkusのMicrometerエクステンションを使用して何か問題があれば、ご連"
"絡ください。"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: Micrometer is recommended for metrics with Quarkus 1.9\n"
#~ "date: 2020-10-19\n"
#~ "tags: metrics announcement micrometer\n"
#~ "synopsis: Micrometer is the recommended approach for metrics with Quarkus.\n"
#~ "author: kenfinnigan\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: マイクロメーターは、Quarkus 1.9での測定を推奨します。\n"
#~ "date: 2020-10-19\n"
#~ "tags: metrics announcement micrometer\n"
#~ "synopsis: Micrometerは、Quarkusでのメトリクスに推奨される手法です。\n"
#~ "author: kenfinnigan\n"
#~ "---\n"
