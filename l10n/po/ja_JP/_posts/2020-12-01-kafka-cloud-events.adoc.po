# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: 2022-04-30 17:21+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, no-wrap
msgid "2020-12-01"
msgstr "2020-12-01"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, no-wrap
msgid "How to send and receive Cloud Events with Quarkus, Kafka and Reactive Messaging"
msgstr "Quarkus、Kafka、Reactive Messagingを使用してクラウドイベントを送受信する方法"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, no-wrap
msgid "reactive kafka"
msgstr "reactive kafka"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, no-wrap
msgid "Sending and Receiving Cloud Events with Kafka"
msgstr "クラウドイベントをKafkaで送受信"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:13
msgid "https://cloudevents.io/[Cloud Events] is a specification for describing events.  It aims to ease interoperability.  With the rise of event-driven architecture, it's not surprising to see Cloud Events gaining popularity."
msgstr "https://cloudevents.io/[クラウドイベントは]、イベントを記述するための仕様です。相互運用性を容易にすることを目的としています。イベント駆動型アーキテクチャの台頭により、Cloud Eventsの人気が高まっているのは驚くに値しません。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:15
msgid "This post explains how you can generate and consume Cloud Events using Quarkus, Kafka, and Reactive Messaging."
msgstr "この記事では、Quarkus、Kafka、Reactive Messagingを使用してクラウドイベントを生成して消費する方法を説明します。"

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:16
#, no-wrap
msgid "What is Cloud Event?"
msgstr "クラウドイベントとは?"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:23
msgid "First, let's look at the why.  Events are everywhere.  Many modern systems are using events one way or another.  Events can be used to implement event sourcing, communicate facts, trigger out-of-band processing, or send notifications.  Events become an essential piece of any system."
msgstr "まずは「なぜ」を見てみましょう。イベントはどこにでもあります。最近のシステムの多くは、何らかの方法でイベントを使用しています。イベントは、イベントソーシングの実装、事実の伝達、帯域外処理のトリガー、通知の送信などに使用できます。イベントはどんなシステムにも欠かせないものとなっています。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:29
msgid "Yet event publishers tend to describe events differently.  I don't mean the content is different, but the envelope and the event's format are heterogeneous, even if these events transit on the same event mesh.  Some applications choose JSON and encode everything in the event's payload; some other systems prefer binary formats, such as Avro or Protobuf, and use the protocol capability, such as headers or properties, to transport metadata about the wrapped payload.  While event-driven architecture claims to ease the integration with external systems, this disparity is doing the opposite.  It's not rare to need a specific event translator with the only purpose to adapt events from one format to another."
msgstr "しかし、イベント発行者はイベントを異なる形で表現する傾向があります。内容が違うという意味ではありませんが、エンベロープとイベントのフォーマットは異種混在で、たとえこれらのイベントが同じイベントメッシュ上を通過するとしてもです。アプリケーションの中には JSON を選択してイベントのペイロードにすべてをエンコードするものもあれば、Avro や Protobuf のようなバイナリー形式を好み、ヘッダやプロパティーのようなプロトコル機能を使って、ラップされたペイロードに関するメタデータを転送するものもあります。イベント駆動型アーキテクチャは外部システムとの統合を容易にすると主張していますが、この不均衡はその逆を行っています。イベントをあるフォーマットから別のフォーマットに適応させることだけを目的とした特定のイベントトランスレータを必要とすることは珍しくありません。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:36
msgid "So, what's Cloud Event? Cloud Event proposes a common way to describe events.  The goal is, obviously, interoperability and easing the integration burden.  Cloud Event 1.0 was released almost a year ago.  Over the past year, many Cloud Providers adopted this format, such as Azure and Oracle.  Several middlewares have also added support for Cloud Events, such as Knative, Kogito, Debezium, and Quarkus."
msgstr "では、クラウドイベントとは何か?クラウドイベントは、イベントを記述するための共通の方法を提案しています。目的は明らかに相互運用性と統合負担の軽減です。クラウドイベント1.0はほぼ1年前にリリースされました。この1年で、AzureやOracleなど、多くのクラウドプロバイダーがこの形式を採用しました。また、Knative、Kogito、Debezium、Quarkusなど、いくつかのミドルウェアがクラウドイベントのサポートを追加しています。"

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:37
#, no-wrap
msgid "Show me some examples!"
msgstr "例を見せてください!"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:40
msgid "Ok, so, how does it look? The easiest way to understand Cloud Event is to look at one of them:"
msgstr "さてさて、どんな感じでしょうか?クラウドイベントを理解する一番簡単な方法は、そのうちの一つを見てみることです:"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:54
#, no-wrap
msgid ""
"{\n"
"    \"specversion\" : \"1.0\",\n"
"    \"id\" : \"O234-345-890\",\n"
"    \"source\" : \"https://reactive-coffee-shop.io/1234/order\",\n"
"    \"type\" : \"me.escoffier.coffee.Order\",\n"
"    \"subject\" : \"order\",\n"
"    \"time\" : \"2020-11-25T09:05:00Z\",\n"
"    \"datacontenttype\" : \"application/json\",\n"
"    \"data\" : \"{\\\"name\\\": \\\"clement\\\", \\\"order\\\":\\\"espresso\\\"}\",\n"
"    \"custom-attribute\" : \"some custom value\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:58
msgid "This event is described in JSON, but that's just one of the possibilities.  Let's look at the fields."
msgstr "このイベントはJSONで記述されていますが、それは可能性の一つに過ぎません。フィールドを見てみましょう。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:68
msgid "First, the `specversion` indicates which version of Cloud Event it is using (1.0).  The `id` field provides an id for that specific event.  The `source` attribute is a URI identifying the event source, i.e., the context in which an event happened or the application that emitted that specific event.  Combining the `id` and the `source` provides a unique identifier.  Such uniqueness is essential to implement idempotence and handle potential duplicates.  The `type` is the last mandatory attribute.  It indicates the _type_ of the event.  Here, I use the fully qualified class name, but you can imagine anything.  It should refer to the kind of event you have defined in your system."
msgstr "まず、 `specversion`  は、使用しているクラウドイベントのバージョン(1.0)を示しています。 `id`  フィールドは、その特定のイベントの ID を提供します。 `source`  属性は、イベントソースを識別する URI であり、イベントが発生したコンテキストや、特定のイベントを発生させたアプリケーションを示します。 `id`  と `source`  を組み合わせることで、一意な識別子が得られます。このような一意性は、冪等性を実装し、潜在的な重複を処理するために不可欠です。 `type`  は最後の必須属性です。これはイベントの _タイプ_ を示します。ここでは完全修飾クラス名を使用していますが、何を想像しても構いません。システムで定義されているイベントの種類を参照する必要があります。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:75
msgid "The other attributes are optional.  `datacontenttype` defines the content-type of the `data` attribute.  `subject` allows passing extra details about the event, such as an additional hint about the context or the type of event.  `time` is a timestamp, generally indicating the creation time.  There is another optional attribute not used in my example.  The `dataschema` attribute lets you pass the schema of the event data."
msgstr "`datacontenttype`  は `data`  属性の content-type を定義します。 `subject`  では、コンテキストやイベントのタイプに関する追加のヒントなど、イベントに関する追加の詳細を渡すことができます。 `time`  はタイムスタンプで、一般的には作成時刻を示します。私の例では使用していない別のオプションの属性があります。 `dataschema`  属性は、イベントデータのスキーマを渡すことができます。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:78
msgid "The `data` attribute contains the wrapped business event.  It is an essential part, and the other attributes are just providing details about that specific business event."
msgstr "`data`  属性には、ラップされたビジネスイベントが含まれています。これは本質的な部分であり、他の属性はその特定のビジネスイベントについての詳細を提供しているだけです。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:81
msgid "You can also define _extensions_.  These extensions would be a set of custom attributes used when the proposed set of attributes is not enough for your use case."
msgstr "_拡張_ を定義することもできます。これらの拡張は、提案された属性のセットがユースケースに十分でない場合に使用されるカスタム属性のセットになります。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:84
msgid "That's it! So, we can summarize Cloud Events as _just enough metadata to understand an event_ - its source, an id, a type, and the business data."
msgstr "これだ!これだ!と思ったイベントをまとめてみました。ということで、クラウドイベントを、 _イベントを理解するために必要な最低限のメタデータ、つまり、イベントの_ ソース、ID、タイプ、ビジネスデータとしてまとめることができます。"

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:85
#, no-wrap
msgid "Cloud Events on the wire - the bindings"
msgstr "転送におけるクラウドイベント - バインディング"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:89
msgid "But, how would these events be encoded? The previous example using JSON is nice, but some protocols may want to leverage their own capabilities to transmit these metadata."
msgstr "しかし、これらのイベントはどのようにエンコードされるのでしょうか?JSON を使った先ほどの例もいいですが、プロトコルによっては、独自の機能を活用してこれらのメタデータを送信したい場合もあるでしょう。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:94
msgid "That's why Cloud Events also proposes bindings.  A binding is a set of recommendations specific to one protocol.  It explains how each protocol should encode Cloud Events.  For example, there is a binding for HTTP, one for Kafka, and another for AMQP."
msgstr "そのため、Cloud Eventsではバインディングも提案しています。バインディングとは、あるプロトコルに固有の推奨事項のセットです。各プロトコルがどのようにCloud Eventsをエンコードすべきかを説明します。例えば、HTTP用のバインディング、Kafka用のバインディング、AMQP用のバインディングがあります。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:96
msgid "Most of these bindings propose two approaches:"
msgstr "これらのバインディングのほとんどは、2つのアプローチを提案しています:"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:98
msgid "structured"
msgstr "structured"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:99
msgid "binary"
msgstr "binary"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:104
msgid "The structured approach keeps event metadata and data together in the payload of the message or request.  It generally uses JSON to encode that data.  If you pass the Cloud Event example (from above), in an HTTP request, it will use the structured mode.  It will also use the structured mode when you write that JSON snippet in a Kafka record's value."
msgstr "構造化されたアプローチは、イベントのメタデータとデータをメッセージやリクエストのペイロードにまとめて保持します。一般的には JSON を使用してデータをエンコードします。Cloud Event の例 (上記) を HTTP リクエストで渡すと、構造化モードを使用します。また、Kafka レコードの値にその JSON スニペットを書き込む場合も構造化モードを使用します。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:107
msgid "The structured approach allows simple forwarding across multiple protocols.  However, it may not be efficient and may constraint the type of business data."
msgstr "構造化されたアプローチでは、複数のプロトコルをまたいで簡単に転送することができます。しかし、効率的でない場合があり、ビジネスデータの種類を制約する場合があります。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:111
msgid "The other approach relies on protocol capabilities and enables efficient transfer and encoding.  If we use the binary mode with Kafka, we will store the `data` attribute value in the Kafka record's value and pass the other attributes using the record's headers.  Consequently, business data can be encoded using binary protocols such as Avro, leading to higher efficiency."
msgstr "もう一つのアプローチはプロトコルの能力に依存しており、効率的な転送とエンコードを可能にします。Kafkaでバイナリーモードを使用する場合、Kafkaレコードの値に `data`  属性の値を格納し、レコードのヘッダを使用して他の属性を渡すことになります。その結果、Avroなどのバイナリープロトコルを使ってビジネスデータをエンコードすることができ、効率化につながります。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:113
msgid "The rest of the post explains how you can send and receive Cloud Events using Quarkus, Kafka, and Reactive Messaging."
msgstr "残りの記事では、Quarkus、Kafka、Reactive Messagingを使用してクラウドイベントを送受信する方法を説明しています。"

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:114
#, no-wrap
msgid "Sending Cloud Events on Kafka"
msgstr "クラウドイベントをKafkaで送信する"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:118
msgid "The Kafka connector used by Quarkus has built-in support for Cloud Events.  It can send and consume Cloud Events using the structured mode (encoding everything in a JSON payload) or the binary mode (using Kafka headers)."
msgstr "Quarkusが使用するKafkaコネクタは、Cloud Eventsをビルトインでサポートしています。構造化モード(JSONペイロードですべてをエンコード)またはバイナリーモード(Kafkaヘッダーを使用)を使用して、クラウドイベントを送信したり消費したりすることができます。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:120
msgid "To write your outgoing messages as Cloud Event, you only need to specify the `cloud-events-type` and `cloud-events-source` attributes on your channel:"
msgstr "送信メッセージをクラウドイベントとして記述するには、チャンネルに `cloud-events-type`  と `cloud-events-source`  属性を指定するだけです。"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:129
#, no-wrap
msgid ""
"mp.messaging.outgoing.generated-price.connector=smallrye-kafka\n"
"mp.messaging.outgoing.generated-price.topic=prices\n"
"mp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n"
"mp.messaging.outgoing.generated-price.cloud-events-source=price-generators\n"
"mp.messaging.outgoing.generated-price.cloud-events-type=price\n"
"mp.messaging.outgoing.generated-price.cloud-events-subject=generated-prices\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:134
msgid "By default, the connector writes Cloud Events using the binary mode.  The connector generates a random `id` for each message.  You can also customize the other Cloud Event attributes using `cloud-events-$attribute`, such as `cloud-events-subject`."
msgstr "デフォルトでは、コネクタはバイナリーモードを使用してクラウドイベントを書き込みます。コネクタはメッセージごとにランダムな `id`  を生成します。 `cloud-events-$attribute`  を使用して、 `cloud-events-subject`  などの他のクラウドイベント属性をカスタマイズすることもできます。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:138
msgid "The configuration shown above is applied to all the outgoing messages.  Sometimes, you want to customize the value for each message individually.  To achieve this, you can also attach `io.smallrye.reactive.messaging.ce.OutgoingCloudEventMetadata` to your message to customize the id, source, type and subject for each message:"
msgstr "上記の設定は、すべての送信メッセージに適用されます。場合によっては、各メッセージの値を個別にカスタマイズしたいこともあるでしょう。これを実現するには、メッセージに `io.smallrye.reactive.messaging.ce.OutgoingCloudEventMetadata`  を添付して、各メッセージの id、ソース、タイプ、件名をカスタマイズすることもできます:"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:149
#, no-wrap
msgid ""
"@Outgoing(\"cloud-events\")\n"
"public Message<String> toCloudEvents(Message<String> in) {\n"
"    return in.addMetadata(OutgoingCloudEventMetadata.builder()\n"
"      .withId(\"id-\" + in.getPayload())\n"
"      .withType(\"greetings\")\n"
"      .withSource(URI.create(\"http://example.com\"))\n"
"      .withSubject(\"greeting-message\") .build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:155
msgid "The connector also supports the _structured_ mode.  You can write structured Cloud Events by setting the `cloud-events-mode` attribute to `structured`.  It only supports JSON at the moment.  The written record gets its `content-type` header set to `application/cloudevents+json; charset=UTF-8`, which allows the receiver to understand that it's a structured Cloud Event."
msgstr "コネクタは _構造化_ モードもサポートしています。 `cloud-events-mode`  属性を `structured`  に設定することで、構造化された Cloud Events を書くことができます。現時点では JSON のみサポートしています。書き込まれたレコードの `content-type`  ヘッダーは `application/cloudevents+json; charset=UTF-8`  に設定され、これにより受信者はそれが構造化されたクラウドイベントであることを理解することができます。"

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:156
#, no-wrap
msgid "Consuming Cloud Event from Kafka"
msgstr "クラウドイベントをKafkaから消費する"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:161
msgid "Naturally, the connector can also consume Cloud Events.  The connector detects Cloud Events automatically by checking the record's headers.  It also determines the mode."
msgstr "当然のことながら、コネクタはクラウドイベントを消費することもできます。コネクタは、レコードのヘッダをチェックすることで、自動的にクラウドイベントを検出します。また、モードも決定します。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:164
msgid "When the connector receives a Cloud Event, it attaches an `IncomingKafkaCloudEventMetadata` to the message metadata.  So, you can retrieve the various attributes as well as the extensions:"
msgstr "コネクタはクラウドイベントを受信すると、メッセージのメタデータに `IncomingKafkaCloudEventMetadata`  をアタッチします。そのため、拡張だけでなく様々な属性を取得することができます。"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:170
#, no-wrap
msgid ""
"public Message<Double> process(Message<Integer> priceInUsd) {\n"
"  IncomingCloudEventMetadata<Integer> cloudEventMetadata = priceInUsd.getMetadata(IncomingCloudEventMetadata.class)\n"
"    .orElseThrow(() -> new IllegalArgumentException(\"Expected a Cloud Event\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:176
#, no-wrap
msgid ""
"  LOGGER.infof(\"Received Cloud Events (spec-version: %s): source:  '%s', type: '%s', subject: '%s' \",\n"
"    cloudEventMetadata.getSpecVersion(),\n"
"    cloudEventMetadata.getSource(),\n"
"    cloudEventMetadata.getType(),\n"
"    cloudEventMetadata.getSubject().orElse(\"no subject\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:179
#, no-wrap
msgid ""
"  return priceInUsd.withPayload(Integer.valueOf(priceInUsd.getPayload()) * CONVERSION_RATE);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:181
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:186
msgid "With the rise of event-driven architecture, Cloud Events are becoming highly popular.  Since Quarkus 1.9, the Kafka Connector used in Quarkus has built-in support for Cloud Events.  This post introduced Cloud Events and showed how you could write and read Cloud Events easily."
msgstr "イベント駆動型アーキテクチャの台頭に伴い、クラウドイベントの人気が高まっています。Quarkus 1.9以降、Quarkusで使用されているKafka ConnectorはCloud Eventsをビルトインでサポートしています。この投稿では、Cloud Eventsを紹介し、Cloud Eventsを簡単に書いたり読んだりする方法を紹介しました。"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:188
#, fuzzy
msgid "Many more options are http://smallrye.io/smallrye-reactive-messaging/3.14.1/kafka/kafka/[available], and Kafka is not the only part of Quarkus with Cloud Events support.  For example, Funqy[https://quarkus.io/guides/funqy#context-injection] also supports Cloud Event out of the box."
msgstr "他にも多くのオプションが http://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.5/kafka/kafka.html[用意]されており、KafkaだけがクラウドイベントをサポートしているQuarkusの一部ではありません。例えば、Funqy https://quarkus.io/guides/funqy#context-injection ]もクラウドイベントをサポートしています。"

#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid ""
#~ "layout: post\n"
#~ "title: Sending and Receiving Cloud Events with Kafka\n"
#~ "date: 2020-12-01\n"
#~ "tags: reactive kafka\n"
#~ "synopsis: How to send and receive Cloud Events with Quarkus, Kafka and Reactive Messaging\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Kafkaでクラウドイベントを送受信する\n"
#~ "date: 2020-12-01\n"
#~ "tags: reactive kafka\n"
#~ "synopsis: Quarkus、Kafka、Reactive Messagingでクラウドイベントを送受信する方法\n"
#~ "author: cescoffier\n"
#~ "---\n"
