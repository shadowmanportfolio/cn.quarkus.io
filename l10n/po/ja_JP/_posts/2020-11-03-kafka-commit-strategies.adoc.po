# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: 2022-04-30 17:23+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, no-wrap
msgid "2020-11-03"
msgstr "2020-11-03"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, no-wrap
msgid "Offset commiting strategies in the Kafka connector"
msgstr "Kafkaコネクターにおけるオフセットコミット戦略"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, no-wrap
msgid "reactive kafka"
msgstr "reactive kafka"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, no-wrap
msgid "Kafka - When to commit?"
msgstr "Kafka - いつコミットするのか？"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:15
msgid "In a https://quarkus.io/blog/kafka-failure-strategy/[previous blog post], we have looked at failure strategies provided by the Reactive Messaging Kafka connector.  But, imagine it's our lucky day, and for once it worked.  We should inform Kafka that the processing succeeded.  In Kafka terminology, we call this: _offset commit_.  This post covers the different strategies to commit offsets with the Reactive Messaging Kafka connector."
msgstr "link:https://quarkus.io/blog/kafka-failure-strategy/[以前のブログ記事]では、Reactive Messaging Kafkaコネクタが提供する失敗戦略を見てきました。しかし、想像してみてください、それは幸運な日で、一度だけ成功しました。処理が成功したことをKafkaに知らせなければなりません。Kafkaの用語では、これを _オフセットコミット_ と呼びます。この記事では、Reactive Messaging Kafka コネクタを使ったオフセットコミットのさまざまな戦略について説明します。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:17
msgid "## Kafka Consumer Group and Offsets"
msgstr "Kafkaコンシューマーグループとオフセット"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:21
msgid "Kafka organizes records (_i.e._ messages) around _topics_.  Each topic has a name, and applications send records to topics and poll records from topics.  So far, nothing out of the ordinary."
msgstr "Kafka は、 _トピックを_ 中心にレコード ( _即ち_ メッセージ) を整理します。各トピックには名前があり、アプリケーションはトピックにレコードを送り、トピックからレコードをポーリングします。今のところ、特別なことは何もありません。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:28
msgid "Topics are divided into partitions.  Each partition is an ordered, immutable sequence of records.  Sending a message to a topic appends it to the selected partition.  Each message from a partition gets a sequential id number called _offset_.  It uniquely identifies each message within the partition.  So, with Kafka, you can identify an individual record using a `<topic, partition, offset>` tuple."
msgstr "トピックはパーティションに分割されます。各パーティションは、順序立てられた不変のレコードのシーケンスです。トピックにメッセージを送信すると、選択したパーティションにメッセージが追加されます。パーティションからの各メッセージは、 _offset_ と呼ばれる連続した ID 番号を取得します。これはパーティション内の各メッセージを一意に識別します。つまり、Kafka を使うと、 `<topic, partition, offset>` タプルを使って個々のレコードを識別することができます。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:30
msgid "image:/assets/images/posts/kafka-commit-strategies/topics-partitions.png[]"
msgstr "image:/assets/images/posts/kafka-commit-strategies/topics-partitions.png[]"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:35
msgid "When an application consumes messages from Kafka, it uses a Kafka consumer.  With this consumer, it polls batches of messages from a specific topic, for example, `movies` or `actors`.  Retrieved messages belong to partitions assigned to this consumer.  And that aspect is essential."
msgstr "アプリケーションが Kafka からのメッセージを消費するとき、アプリケーションは Kafka コンシューマを使用します。このコンシューマでは、特定のトピック、例えば `movies` や `actors` などからのメッセージのバッチをポーリングします。取得したメッセージは、このコンシューマに割り当てられたパーティションに属します。そして、この点が重要です。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:39
msgid "Consumers belong to a consumer group, identified with a name (`A` and `B` in the picture above).  A group contains one or more consumers.  In general, when you scale up your application, it creates a consumer joining the same group."
msgstr "コンシューマーは、名前(上の図では `A` と `B` )で識別されるコンシューマーグループに属しています。1 つのグループには 1 つ以上のコンシューマーが含まれます。一般的に、アプリケーションをスケールアップすると、同じグループに参加するコンシューマーが作成されます。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:41
msgid "image:/assets/images/posts/kafka-commit-strategies/consumer-groups.png[]"
msgstr "image:/assets/images/posts/kafka-commit-strategies/consumer-groups.png[]"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:49
msgid "Each consumer group receives each record from a topic once.  To achieve this, it assigns each consumer from a group to a set of partitions.  For example, in the above picture, the consumer from the application A1 receives the records from the partitions 0 and 1.  A2 receives the records from the partition 2.  App B is the only consumer from its consumer group.  So, it gets the records from all three partitions.  Consequently (ignore rebalance or other subtilities for now), each record from a topic is only received once per consumer group, by a specific consumer from that group."
msgstr "各コンシューマーグループは、トピックから各レコードを一度だけ受け取ります。これを実現するために、グループからの各コンシューマーをパーティションのセットに割り当てます。例えば、上の図では、アプリケーションA1のコンシューマーはパーティション0と1からレコードを受信し、A2はパーティション2からレコードを受信します。アプリBは、そのコンシューマグループからの唯一のコンシューマーです。したがって、3つのパーティションすべてからレコードを取得します。したがって、(今のところリバランスや他のサブユーティリティーは無視して)あるトピックの各レコードは、そのグループの特定のコンシューマーによって、コンシューマーグループごとに 1 回だけ受信されます。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:54
msgid "To orchestrate each consumer group's progress, each consumer periodically informs the broker of its current position - the last processed offset.  It commits the offset, indicating that all the previous records from that partition have been processed.  So, if a consumer stops and comes back later, it restarts from the last committed position (if assigned to that partition again).  Note that this behavior is configurable."
msgstr "各コンシューマーグループの進捗を調整するために、各コンシューマーは定期的に現在の位置、つまり最後に処理されたオフセットをブローカに通知します。コンシューマは、そのパーティションの以前のレコードがすべて処理されたことを示すオフセットをコミットします。つまり、あるコンシューマーが停止して後で戻ってきた場合、最後にコミットされた位置から再スタートします(再びそのパーティションに割り当てられた場合)。この動作は設定可能であることに注意してください。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:61
msgid "What's important to notice is the periodic aspect of the commit.  Offset commit is expensive, and to enhance performance, we should not commit the offset after each processed record.  In this regard, Kafka behaves differently from traditional messaging solutions, such as JMS, which acknowledges each message individually.  Another important characteristic is the positional aspect of the commit.  You commit the position indicating that all the records located before that position are processed.  But is it really the case?"
msgstr "注目すべきは、コミットの周期的な側面です。オフセットコミットはコストがかかるので、パフォーマンスを向上させるためには、処理された各レコードの後にオフセットをコミットするべきではありません。この点で、Kafkaは、JMSのような従来のメッセージングソリューションとは異なる振る舞いをしており、各メッセージを個別に認識します。もう一つの重要な特徴は、コミットの位置的な側面です。位置をコミットすると、その位置より前にあるすべてのレコードが処理されることを示します。しかし、本当にそうなのでしょうか?"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:63
msgid "### The Kafka default behavior"
msgstr "Kafka のデフォルトの動作"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:66
msgid "The Apache Kafka consumer uses an auto-commit approach by default.  Applications using such a consumer are structured around a polling loop:"
msgstr "Apache Kafka のコンシューマーはデフォルトで自動コミットアプローチを使用しています。このようなコンシューマを使うアプリケーションはポーリングループを中心に構成されています:"

#. type: delimited block -
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:73
#, no-wrap
msgid ""
"while(true) {\n"
"    ConsumerRecords records = consumer.poll(Duration.ofMillis(10000));\n"
"    processRetrievedRecords(records);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:77
msgid "Such a program polls a batch of records, processes them, and then polls the next set.  While calling the `poll` method, the consumer periodically commits the last offset of the previous batches transparently."
msgstr "このようなプログラムは、レコードのバッチをポーリングして処理し、次のセットをポーリングします。 `poll` メソッドを呼び出している間、コンシューマーは定期的に前のバッチの最後のオフセットを透過的にコミットします。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:83
msgid "Quite nice, right? If the application fails to process a message, it throws an exception, which either interrupts the while loop or is handled gracefully (within the `processRetrievedRecords` method).  In the first case, it means that it won't commit anymore (as it happens in the `poll` method, not called anymore).  If the application restarts, it resumes from the last committed offset (or apply the `auto.offset.reset` strategy, defaulting to `latest`, if there are no offsets for this group yet).  It may re-process a set of messages (it's the application's responsibility to handle duplicates), but at least nothing is lost."
msgstr "なかなかいいですよね?アプリケーションがメッセージの処理に失敗した場合、アプリケーションは例外をスローし、while ループを中断するか、( `processRetrievedRecords` メソッド内で) 優雅に処理されます。最初のケースでは、それはもうコミットしないことを意味します( `poll` メソッド内で発生するので、もう呼ばれません)。アプリケーションが再起動した場合、最後にコミットされたオフセットから再開します (または `auto.offset.reset` ストラテジーを適用し、このグループのオフセットがまだない場合は `latest` をデフォルトとして使用します)。一連のメッセージを再処理するかもしれませんが(重複を処理するのはアプリケーションの責任です)、少なくとも何も失われることはありません。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:86
msgid "So, is there anything wrong with this? Looks wonderful... until you add a pinch of asynchrony."
msgstr "それで、これに何か問題があるの?見た目は素晴らしい...非同期のピンチを追加するまでは。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:88
msgid "## What if the message's processing is asynchronous"
msgstr "## メッセージの処理が非同期の場合"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:93
msgid "If the message processing is asynchronous (offloaded to another thread, use non-blocking I/O...), failures may not interrupt the while loop from above.  Failure happens asynchronously, outside the polling thread.  If the `poll` method gets called again despite a failed processing, and _auto-commit_ is still enabled, we may commit offsets while something wrong happened.  If some processing of previously retrieved records is not completed yet, while this auto commit happens, it may consider the record as processed correctly, but the outcome is unknown at that point."
msgstr "メッセージ処理が非同期(他のスレッドにオフロードされている、ノンブロッキングI/Oを使用している...)であれば、失敗は上からwhileループを中断しないかもしれません。失敗はポーリングスレッドの外で非同期に起こります。処理に失敗したにもかかわらず `poll` メソッドが再び呼び出され、 _オートコミット_ がまだ有効になっている場合、何か間違ったことが起こっている間にオフセットをコミットすることがあります。このオートコミットが発生している間に、以前に取得したレコードの処理がまだ完了していない場合、そのレコードは正しく処理されたとみなされるかもしれませんが、その時点では結果はわかりません。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:102
msgid "So to handle these case, we can disable the auto-commit and switch to manual commit.  In this case, it's the application's responsibility to commit the offsets regularly.  So, the application needs to track the polled records, their processing, failures, and periodically commits the offsets.  It might not look too tricky, but actually, it can become quite challenging.  Again, in asynchronous scenarios, you may complete the processing of messages in various orders.  For example, if you call a remote service for each record, the responses may not come in the same orders as the records.  You need to track messages individually and only commit the offsets if all the previous messages are processed successfully.  Without this, you may commit offsets while there is processing from previous records still in progress or even failed processing."
msgstr "そこで、これらのケースを処理するために、自動コミットを無効にして手動コミットに切り替えることができます。この場合、定期的にオフセットをコミットするのはアプリケーションの責任です。したがって、アプリケーションはポーリングされたレコード、その処理、失敗を追跡し、定期的にオフセットをコミットする必要があります。これはそれほどトリッキーには見えないかもしれませんが、実際には非常に困難になることがあります。繰り返しになりますが、非同期のシナリオでは、様々な順序でメッセージの処理を完了させることができます。例えば、各レコードに対してリモートサービスを呼び出した場合、レスポンスはレコードと同じ順番で来るとは限りません。メッセージを個別に追跡し、前のすべてのメッセージが正常に処理された場合にのみオフセットをコミットする必要があります。これがないと、前のレコードからの処理がまだ進行中であったり、処理に失敗した場合にオフセットをコミットすることになるかもしれません。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:104
msgid "What can we do about this?"
msgstr "これはどうしたらいいのでしょうか?"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:106
msgid "## Kafka connector commit strategies"
msgstr "## Kafka コネクタのコミット戦略"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:108
msgid "When using Reactive Messaging and the Kafka connector, you entered an asynchronous world."
msgstr "Reactive Messaging と Kafka コネクタを使用すると、非同期の世界に入りました。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:113
msgid "Message processing may not happen synchronously and sequentially.  When a Reactive Messaging `Message` processing completes, it acknowledges the message.  In the case of processing failures, it sends a negative acknowledgment.  The Kafka connector receives these acknowledgments and can decide what needs to be done, basically: to commit or not to commit."
msgstr "メッセージ処理は、同期的・逐次的に行われるとは限りません。リアクティブメッセージング `Message` 処理が完了すると、メッセージを確認します。処理に失敗した場合は、否定的な確認応答を送信します。Kafka コネクタはこれらの確認応答を受信して、コミットするかしないかを決定します。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:115
msgid "You can choose among three strategies:"
msgstr "3つの戦略から選択することができます:"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:117
msgid "throttled (default starting Quarkus 1.10)"
msgstr "スロットル化(Quarkus 1.10からデフォルト)"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:118
msgid "latest (default before Quarkus 1.10)"
msgstr "最新版(Quarkus 1.10未満のデフォルト)"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:119
msgid "ignore (default if `enabled.auto.commit=true` is set)"
msgstr "無視 ( `enabled.auto.commit=true` が設定されている場合のデフォルト)"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:121
msgid "This is configured using the `commit-strategy` attribute:"
msgstr "これは `commit-strategy` 属性を使用して設定します:"

#. type: delimited block -
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:126
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:142
#, no-wrap
msgid ""
"mp.messaging.incoming.my-channel.connector=smallrye-kafka\n"
"mp.messaging.incoming.my-channel.commit-strategy=throttled\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:129
msgid "## The throttled strategy"
msgstr "## スロットル化された戦略"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:134
msgid "The throttled strategy can be seen as an asynchronous variant of the default \"auto-commit\" behavior described above.  When enabled, the connector tracks each received message and monitors their acknowledgment.  When the connector finds out that all messages before a position are processed successfully, it commits that position.  This commit happens periodically to avoid committing too often."
msgstr "スロットル戦略は、上述のデフォルトの「オートコミット」動作の非同期的な変形として見ることができます。有効にすると、コネクタは受信した各メッセージを追跡し、その確認応答を監視します。コネクタは、あるポジションの前のすべてのメッセージが正常に処理されたことを確認すると、そのポジションをコミットします。このコミットは、頻繁にコミットしないように定期的に行われます。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:137
msgid "This strategy provides very good throughput and can handle asynchronous processing.  To enable this strategy configures the channel with:"
msgstr "このストラテジーは非常に優れたスループットを提供し、非同期処理を処理することができます。このストラテジーを有効にするには、チャネルを以下のように設定します:"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:150
msgid "There is one detail to mention.  If an old message is neither acked nor nacked, the strategy cannot commit the position anymore.  It will enqueue messages forever, waiting for that missing ack to happen.  It can lead to out of memory, as the connector would never be able to commit a position and to clear the queue.  Fortunately, the strategy detects this situation and reports a failure to the connector, marking the application unhealthy.  The `throttled.unprocessed-record-max-age.ms` attribute configures the deadline for each message to be acked or nacked before being considered as a poison pill (Default is 1 minute)."
msgstr "一つだけ注意すべき点があります。古いメッセージが ack されず、nack されない場合、ストラテジーはもうポジションをコミットすることができません。それは永遠にメッセージをエンキューし、その欠落したアックが起こるのを待ちます。これは、コネクタがポジションをコミットしてキューをクリアすることができなくなるため、メモリー不足につながる可能性があります。幸いなことに、このストラテジーはこの状況を検出してコネクタに失敗を報告し、アプリケーションが不健全であることをマークします。 `throttled.unprocessed-record-max-age.ms` 属性は、ポイズンピルとみなされる前に、各メッセージが ack されるか nacked されるかの期限を設定します (デフォルトは 1 分です)。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:152
msgid "## The Ignore strategy"
msgstr "## 無視戦略"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:157
msgid "The connector uses this strategy by default if you explicitly enabled Kafka's auto-commit (with the `enable.auto.commit` attribute set to `true`).  In this case, the connector ignores acknowledgment and won't commit the offsets.  The Kafka consumer commits the offset periodically when polling batches, as described above.  This strategy works well if the message processing is synchronous and failures handled gracefully."
msgstr "Kafka の自動コミットを明示的に有効にした場合 ( `enable.auto.commit` 属性を `true` に設定した場合)、コネクタはデフォルトでこのストラテジーを使用します。この場合、コネクタは確認応答を無視してオフセットをコミットしません。Kafka コンシューマは、前述のように、バッチをポーリングする際に定期的にオフセットをコミットします。この方法は、メッセージ処理が同期的で、失敗があっても潔く処理される場合に有効です。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:159
msgid "You can enable this strategy by configured enabled-auto-commit to true:"
msgstr "enabled-auto-commitをtrueに設定することで、このストラテジーを有効にすることができます:"

#. type: delimited block -
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:164
#, no-wrap
msgid ""
"mp.messaging.incoming.my-channel.connector=smallrye-kafka\n"
"mp.messaging.incoming.my-channel.enable.auto.commit=true\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:167
msgid "Be aware that starting Quarkus 1.9, auto commit is disabled by default. So you need to explicitly enable it."
msgstr "Quarkus 1.9からは、オートコミットがデフォルトで無効になっていることに注意してください。そのため、明示的に有効にする必要があります。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:171
msgid "If you don't enable auto-commit, using this strategy is still possible but will never commit the offsets.  In other words, you would restart from the oldest stored records every time.  While there are use cases for this, double-check that's what you want. In this case, enable this strategy with:"
msgstr "オートコミットを有効にしていない場合、この戦略を使用することは可能ですが、オフセットをコミットすることはありません。言い換えれば、保存されている最も古いレコードから毎回再起動することになります。これにはユースケースがありますが、あなたが望むものであることを再確認してください。当てはまる場合、以下のようにこのストラテジーを有効にします:"

#. type: delimited block -
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:176
#, no-wrap
msgid ""
"mp.messaging.incoming.my-channel.connector=smallrye-kafka\n"
"mp.messaging.incoming.my-channel.commit-strategy=ignore\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:179
msgid "## The latest strategy"
msgstr "## 最新の戦略"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:183
#, no-wrap
msgid ""
"This strategy commits the offset every time a message is acknowledged.\n"
"This strategy tends to commit often, and so decrease the throughput.   \n"
"However, it also reduces the risk of duplicates if the messages are processed synchronously. \n"
msgstr ""
"このストラテジーは、メッセージが確認されるたびにオフセットをコミットします。\n"
"このストラテジーは頻繁にコミットする傾向があるため、スループットが低下します。\n"
"しかし、メッセージが同期的に処理されている場合には、重複のリスクを減らすことができます。\n"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:185
msgid "Enable this strategy with:"
msgstr "この戦略を有効にするのは以下の通りです:"

#. type: delimited block -
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:190
#, no-wrap
msgid ""
"mp.messaging.incoming.my-channel.connector=smallrye-kafka\n"
"mp.messaging.incoming.my-channel.commit-strategy=latest\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:193
msgid "## Conclusion"
msgstr "## まとめ"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:198
msgid "In general, use the `throttled` strategy.  It provides high-throughput and handles the asynchronous use cases.  This strategy is becoming the default strategy in Quarkus 1.10.  You can also switch to the `ignore` strategy if the Kafka auto-commit is acceptable for you, or if you want to skip offset commit altogether."
msgstr "一般的には、 `throttled` 戦略を使用します。これはハイスループットを提供し、非同期のユースケースを処理します。このストラテジーは、Quarkus 1.10ではデフォルトのストラテジーになっています。また、Kafkaのオートコミットが許容できる場合や、オフセットコミットを完全にスキップしたい場合は、 `ignore` 戦略に切り替えることもできます。"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:200
msgid "That concludes this blog post.  The next one will discuss how to receive and produce Cloud Events using the Kafka connector."
msgstr "以上でこのブログ記事は終了です。次回は、Kafkaコネクタを使ってクラウドイベントを受信して生成する方法について説明します。"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid ""
#~ "layout: post\n"
#~ "title: Kafka - When to commit?\n"
#~ "date: 2020-11-03\n"
#~ "tags: reactive kafka\n"
#~ "synopsis: Offset commiting strategies in the Kafka connector\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Kafka - いつコミットする?\n"
#~ "date: 2020-11-03\n"
#~ "tags: reactive kafka\n"
#~ "synopsis: Kafka コネクタでのオフセットコミット戦略\n"
#~ "author: cescoffier\n"
#~ "---\n"
