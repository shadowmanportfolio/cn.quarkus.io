# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-04 20:11+0000\n"
"PO-Revision-Date: 2022-04-30 15:53+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:1
#, no-wrap
msgid "michalszynkiewicz"
msgstr "michalszynkiewicz"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:1
#, no-wrap
msgid "2021-11-23"
msgstr "2021-11-23"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:1
#, no-wrap
msgid "Introduction to customizable service discovery and client-side load-balancing with Quarkus and SmallRye Stork"
msgstr "QuarkusとSmallRye Storkによるカスタマイズ可能な サービスディスカバリーとクライアントサイドロードバランシングの紹介"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:1
#, no-wrap
msgid "extension smallrye-stork"
msgstr "extension smallrye-stork"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:1
#, no-wrap
msgid "SmallRye Stork meets Quarkus"
msgstr "SmallRye StorkとQuarkus"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:12
msgid "Last week, the https://www.youtube.com/watch?v=l3mLKU3wR2A[Quarkus Insights] spotlighted a new project called https://smallrye.io/smallrye-stork[SmallRye Stork] and its integration in Quarkus. In this blog post, we're going to give you a concise introduction to Stork."
msgstr "先週の link:https://www.youtube.com/watch?v=l3mLKU3wR2A[Quarkus Insights] では、 link:https://smallrye.io/smallrye-stork[SmallRye Stork]という新しいプロジェクトとそのQuarkusへの統合についてスポットライトを当てました。今回のブログ記事では、Storkについて簡潔にご紹介したいと思います。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:14
#, fuzzy
msgid "This post has been updated to use the `quarkus.` prefix when configuring stork properties. This prefix is required since Quarkus 2.8."
msgstr ""
"この記事は、storkのプロパティを設定する際に、 `quarkus.` "
"プレフィックスを使用するように更新されました。この接頭辞はQuarkus 2."
"8以降で必要となります。"

#. type: Title ==
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:15
#, no-wrap
msgid "What's the problem?"
msgstr "課題"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:18
msgid "Nowadays, systems we build consist of numerous applications, often called microservices. The system's overall behavior emerges from the interactions between all these services. So, a microservice is likely going to invoke other ones. But here is the catch. In dynamic environments, such as Kubernetes, or the Cloud, the locations of these services may change over time. So, how does our microservice locate the services it needs to call?"
msgstr "現在、私たちが構築するシステムは、しばしばマイクロサービスと呼ばれる多数のアプリケーションで構成されています。システムの全体的な動作は、これらすべてのサービス間の相互作用から生まれます。つまり、あるマイクロサービスは、他のマイクロサービスを呼び出すことが多いのです。しかし、ここで問題が発生します。Kubernetesやクラウドのようなダイナミックな環境では、これらのサービスの場所は時間の経過とともに変化する可能性があります。では、マイクロサービスはどのようにして呼び出す必要のあるサービスを見つけるのでしょうか？"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:20
msgid "Service discovery solves that problem, as it provides a mechanism to register and find the services. But it leads to another issue. What happens when there are multiple instances of the same service? How does a microservice select the right one? This scenario typically occurs when there are multiple replicas or versions available at the same time. Thus, in addition to service discovery, we need a way to select the right one."
msgstr "サービスディスカバリーは、サービスを登録して検索する仕組みを提供することで、その問題を解決します。しかし、それは別の問題を引き起こします。同じサービスのインスタンスが複数ある場合はどうなるのか？マイクロサービスはどのようにして正しいサービスを選択するのでしょうか？このシナリオは通常、複数のレプリカやバージョンが同時に利用可能な場合に発生します。そのため、サービスディスカバリーに加えて、正しいサービスを選択する方法が必要になります。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:22
msgid "Some environments, e.g., Kubernetes, provide ways to discover service locations and load-balance the traffic. Some do not. In some cases, the capabilities of the environment are not sufficient for the needs of the system."
msgstr "Kubernetesなどの一部の環境では、サービスの場所を発見し、トラフィックをロードバランスする方法を提供しています。そうでないものもあります。場合によっては、環境の機能がシステムのニーズに対して十分でないこともあります。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:23
#, no-wrap
msgid "SmallRye"
msgstr "SmallRye"

#. type: Target for macro image
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:23
#, no-wrap
msgid "stork.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:26
msgid "To address these issues, we have created https://smallrye.io/smallrye-stork[SmallRye Stork]. Stork provides both features:"
msgstr "これらの問題を解決するために、私たちは link:https://smallrye.io/smallrye-stork[SmallRye Stork]を作りました。Storkは両方の機能を備えています。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:28
msgid "service discovery - it lets you locate the service you need to call;"
msgstr "サービスディスカバリー - 呼び出す必要のあるサービスを見つけることを可能とします。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:29
msgid "service selection - it lets you select the right one when there is more than one instance"
msgstr "サービス選択 - 複数のインスタンスがある場合、適切なものを選択することを可能とします。"

#. type: Title ==
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:30
#, no-wrap
msgid "What is Stork?"
msgstr "Storkとは？"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:32
msgid "SmallRye Stork is a _service discovery and client-side load-balancing framework_."
msgstr "SmallRye Storkは、 _サービスディスカバリーとクライアントサイドロードバランシングのフレームワーク_ です。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:34
msgid "Out of the box, it provides integrations with Hashicorp Consul, Eureka, and Kubernetes and brings in a couple of load-balancer (handling the service selection) implementations, such as round-robin. But the most significant strength of Stork is its extensibility. You can plug your own service discovery mechanism or implement your own, maybe business-related, service selection strategy."
msgstr "最初からHashicorp Consul、Eureka、Kubernetesとの統合が提供されており、ラウンドロビンなどのロードバランサー（サービス選択の処理）の実装もいくつか持ち込まれています。しかし、Storkの最も大きな強みは、その拡張性です。独自のサービス発見メカニズムをプラグインしたり、独自の、おそらくビジネスに関連したサービス選択戦略を実装することができます。"

#. type: Title ==
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:35
#, no-wrap
msgid "Stork and Quarkus"
msgstr "StorkとQuarkus"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:37
msgid "As of Quarkus 2.5.0.Final, Quarkus gRPC and the Quarkus Reactive REST Client can use Stork to handle the discovery and the selection of the services."
msgstr "Quarkus 2.5.0.Finalでは、Quarkus gRPCとQuarkus Reactive REST ClientがStorkを使用してサービスディスカバリーと選択を行うことができます。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:39
msgid "You just need to configure how you want to locate and select your services. The rest will be handled by the clients directly."
msgstr "あなたは、サービスをどのように探索し、選択したいかを設定するだけです。あとはクライアントが直接対応してくれます。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:41
msgid "For example, to use Stork to determine the actual address for REST Client Reactive, set the scheme of your client's URI to `stork`, and the hostname of the URI to the name of the Stork service. If your client's `configKey` is `my-client`, to use it with Hashicorp Consul and the `round-robin` load balancer, put the following in your `application.properties:"
msgstr "例えば、Storkを使ってREST Client Reactiveの実際のアドレスを決定するには、クライアントのURIのスキームを `stork` 、URIのホスト名をStorkのサービス名に設定します。クライアントの `configKey` が `my-client` である場合、Hashicorp Consul と `round-robin` ロードバランサーで使用するためには、以下を `application.properties に追加して下さい:"

#. type: Block title
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:43
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#. type: delimited block -
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:46
#, no-wrap
msgid "quarkus.rest-client.my-client.uri=stork://hello-service\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:51
#, no-wrap
msgid ""
"# configure the discovery and selection of the hello-service\n"
"quarkus.stork.hello-service.service-discovery.type=consul\n"
"quarkus.stork.hello-service.service-discovery.consul-host=<consul host>\n"
"quarkus.stork.hello-service.service-discovery.consul-port=<consul port>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:53
#, no-wrap
msgid "quarkus.stork.hello-service.load-balancer.type=round-robin\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:56
msgid "The http://smallrye.io/smallrye-stork/1.0.0.Beta1/quarkus/[project's documentation] describes step by step how to use Stork with the REST Client, using Consul and round-robin load balancer as examples."
msgstr "link:http://smallrye.io/smallrye-stork/1.0.0.Beta1/quarkus/[プロジェクトのドキュメント]では、Consulとラウンドロビン型ロードバランサーを例に、RESTクライアントでStorkを使用する方法がステップバイステップで説明されています。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:58
msgid "Service selection can be pretty advanced. For instance, the least-response-time strategy monitors the service calls to select the _fastest_ service instance."
msgstr "サービス選択はかなり高度なものになります。例えば、最小応答時間戦略では、サービスコールを監視し、 _最速の_ サービスインスタンスを選択します。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:60
msgid "In Quarkus 2.5, the gRPC extension does not propagate statistics of the calls, such as response time or encountered errors. Therefore, a load balancer that relies on this data, such as least-response-time, will not work correctly. We are working on it and hope to have it in Quarkus 2.6."
msgstr "Quarkus 2.5では、gRPCエクステンションは、応答時間や発生したエラーなどのコールの統計情報を伝搬しません。そのため、最小応答時間など、このデータに依存するロードバランサーは正しく動作しません。現在対応中で、Quarkus 2.6では対応できるようにしたいと考えています。"

#. type: Title ===
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:62
#, no-wrap
msgid "A demo and a lot more!"
msgstr "デモや、更に沢山！"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:64
msgid "Take a look at the https://www.youtube.com/watch?v=l3mLKU3wR2A[70th episode of Quarkus Insights] for a more detailed explanation and examples."
msgstr "より詳細な説明や事例については、 link:https://www.youtube.com/watch?v=l3mLKU3wR2A[Quarkus Insightsの第70回目のエピソード]をご覧ください。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:66
msgid "The demo used https://github.com/michalszynkiewicz/rest-client-reactive-stork[this project] as the client-side, each of the steps has a corresponding commit in the `main` branch. The backend services were instances of https://github.com/michalszynkiewicz/configurable-rest-service[this project], and the custom service discovery server implementation can be found https://github.com/michalszynkiewicz/simple-service-discovery-server[here]."
msgstr "このデモでは、クライアント側に link:https://github.com/michalszynkiewicz/rest-client-reactive-stork[このプロジェクト]を使用しており、各ステップには `main` ブランチに対応するコミットがあります。バックエンドサービスは link:https://github.com/michalszynkiewicz/configurable-rest-service[このプロジェクト] のインスタンスであり、カスタムサービスディスカバリーサーバーの実装は link:https://github.com/michalszynkiewicz/simple-service-discovery-server[こちら]にあります。"

#. type: Title ==
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:67
#, no-wrap
msgid "Conclusion"
msgstr "結論"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:71
msgid "This post briefly introduces SmallRye Stork and its Quarkus integration. Stork provides a way to locate and select services. It's simple and customizable.  We will cover Stork features in more detail shortly."
msgstr "この記事では、SmallRye StorkとそのQuarkus統合について簡単に紹介しました。Storkは、サービスを検索して選択する方法を提供します。シンプルでカスタマイズ可能です。Storkの機能の詳細については、近日中に詳しく説明します。"

#. type: Plain text
#: upstream/_posts/2021-11-23-smallrye-stork-intro.adoc:73
msgid "If you have ideas for new features, or encounter a bug, please let us know by creating a https://github.com/smallrye/smallrye-stork/issues[GitHub issue]."
msgstr "新機能のアイデアをお持ちの場合やバグに直面した場合は、 link:https://github.com/smallrye/smallrye-stork/issues[GitHubのissue]を作成してお知らせください。"

#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid ""
#~ "layout: post\n"
#~ "title: 'SmallRye Stork meets Quarkus'\n"
#~ "date: 2021-11-23\n"
#~ "tags: extension smallrye-stork\n"
#~ "synopsis: Introduction to customizable service discovery and client-side load-balancing with Quarkus and SmallRye Stork\n"
#~ "author: michalszynkiewicz\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: 'SmallRye Stork meets Quarkus'\n"
#~ "date: 2021-11-23\n"
#~ "tags: extension smallrye-stork\n"
#~ "synopsis: QuarkusとSmallRye Storkによるカスタマイズ可能なサービスディスカバリーとクライアントサイドロードバランシングの紹介\n"
#~ "author: michalszynkiewicz\n"
#~ "---\n"
