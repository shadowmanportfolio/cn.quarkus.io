# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:1
#, fuzzy, no-wrap
msgid "kkhan"
msgstr "クハン"

#. type: YAML Front Matter: date
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:1
#, fuzzy, no-wrap
msgid "2019-06-05 14:00:00.000 -0600"
msgstr "2019-06-05 14:00:00.000 -0600"

#. type: YAML Front Matter: layout
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: tags
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:1
#, fuzzy, no-wrap
msgid "development-tips"
msgstr "開発秘話"

#. type: Title =
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:1
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:9
#, fuzzy, no-wrap
msgid "Quarkus and Web UI Development"
msgstr "QuarkusとWeb UI開発"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:12
#, fuzzy
msgid "In this blog post we will take advantage of the respective development modes of both Quarkus and Angular CLI and see how we can develop a zero turnaround web application backed by a RESTful API on Quarkus. While I am using Angular, *the concepts are the same for other modern web application frameworks.*"
msgstr ""
"このブログ記事では、QuarkusとAngular CLIのそれぞれの開発モードを利用して、"
"QuarkusでRESTful APIに裏付けられたゼロターンアラウンドのWebアプリケーションを"
"開発する方法を見ていきます。ここではAngularを使用していますが、 "
"*コンセプトは他の最新のWebアプリケーションフレームワークでも同じです*。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:14
#, fuzzy
msgid "The source code for this blog can be found at https://github.com/kabir/blog-quarkus-ui-development. It contains a README which explains in detail how the application was set up and how we implemented each step, addressing problems we uncovered along our way."
msgstr ""
"このブログのソースコードは https://github.com/kabir/blog-quarkus-ui-"
"development  にあります。READMEには、アプリケーションのセットアップ方法や、各"
"ステップの実装方法、途中で発見した問題への対処方法などが詳細に説明されていま"
"す。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:16
#, fuzzy
msgid "You need to have https://nodejs.org/en/download/package-manager/[Node], https://yarnpkg.com/en/docs/install[Yarn] and https://cli.angular.io[Angular CLI] installed on your system, and familiarity with Angular and Quarkus is assumed."
msgstr ""
"システムに link:https://nodejs.org/en/download/package-manager/[Node]、 "
"link:https://yarnpkg.com/en/docs/install[Yarn]、 link:https://cli.angular.io["
"Angular CLI]がインストールされている必要があり、AngularやQuarkusに精通してい"
"ることが前提となります。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:18
#, fuzzy
msgid "Clone the https://github.com/kabir/blog-quarkus-ui-development[project], and go into its folder. First run:"
msgstr ""
"link:https://github.com/kabir/blog-quarkus-ui-development[プロジェクト]のクロ"
"ーンを作成し、そのフォルダに入ります。最初の実行。"

#. type: delimited block -
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:20
#, no-wrap
msgid "$mvn -Dui.deps compile\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:22
#, fuzzy
msgid "This downloads all the dependencies needed to build our web application. Then run:"
msgstr "これにより、ウェブアプリケーションの構築に必要なすべての依存関係がダウンロー"
"ドされます。その後、実行してください。"

#. type: delimited block -
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:24
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:95
#, no-wrap
msgid "$mvn package -Dui.dev -Dui.proxy quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:26
#, fuzzy
msgid "The `-Dui` system property enables a Maven profile to build the web application. The output directory for the web application `webapp/dist/webapp` gets bundled into the Quarkus application. We will talk about `-Dui.proxy` later on."
msgstr ""
"`-Dui` システムプロパティは、ウェブアプリケーションを構築するためのMavenプロ"
"ファイルを有効にします。ウェブアプリケーションの出力ディレクトリ `webapp/"
"dist/webapp` は、Quarkusアプリケーションにバンドルされます。 `-Dui.proxy` "
"については後ほど説明します。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:28
#, fuzzy
msgid "Go to http://localhost:8080 in your browser and take a look at our sample application. It contains a few different pages. Go to the one called `Rest` which makes a REST call. We can change the return value of the https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/SampleResource.java[`SampleServlet.hello()`] method. If you refresh the page you will see the changes made reflected automatically!"
msgstr ""
"ブラウザで http://localhost:8080 にアクセスし、サンプルアプリケーションを見て"
"みましょう。いくつかの異なるページが含まれています。 `Rest` "
"というページにアクセスし、REST "
"呼び出しを行います。メソッドの戻り値を変更することができます。  "
"link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/"
"main/java/org/kabir/quarkus/ui/SampleResource.java[`SampleServlet.hello()`]メ"
"ソッドの戻り値を変更することができます。ページを更新すると、変更した内容が自"
"動的に反映されているのがわかります!"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:30
#, fuzzy
msgid "With what we have so far, if we were to make changes to the user interface in our web application, we would need to stop Quarkus and run the above command to build the web application again and restart quarkus. This is not what we want, so we take advantage of Angular's https://angular.io/guide/build#proxying-to-a-backend-server[proxy]. https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development[React] and https://cli.vuejs.org/config/#devserver-proxy[Vue] have something similar."
msgstr ""
"これまでの経験では、ウェブアプリケーションのユーザーインターフェイスに変更を"
"加える場合、Quarkusを停止して上記のコマンドを実行し、ウェブアプリケーションを"
"再度構築してQuarkusを再起動する必要がありました。これは私たちが望むことではな"
"いので、Angularの link:https://angular.io/guide/build#proxying-to-a-backend-"
"server[プロキシ]を利用します。 link:https://facebook.github.io/"
"create-react-app/docs/proxying-api-requests-in-development[React]と "
"link:https://cli.vuejs.org/config/#devserver-"
"proxy[Vue]にも同様のものがあります。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:32
#, fuzzy
msgid "In another terminal window go into the `webapp/` folder of the cloned project, and run:"
msgstr "別のターミナル・ウィンドウで、クローンされたプロジェクトの `webapp/` "
"フォルダーに入り、実行してください。"

#. type: delimited block -
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:34
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:99
#, no-wrap
msgid "$yarn proxy\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:36
#, fuzzy
msgid "This will start the Angular development server in proxy mode on port 4200. Go to http://localhost:4200 and you will see the same application as you saw earlier on port 8080, but served by the Angular development server while accessing the REST endpoints from the running Quarkus application. If you make any changes to any of the Angular components set up in https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app.component.ts`] you will see your changes reflected."
msgstr ""
"これにより、Angular開発サーバーがポート4200でプロキシモードで起動します。 "
"http://localhost:4200 にアクセスすると、先ほどポート8080で見たのと同じアプリ"
"ケーションが表示されますが、実行中のQuarkusアプリケーションからRESTエンドポイ"
"ントにアクセスしながら、Angular開発サーバーによって提供されています。で設定し"
"たAngularコンポーネントのいずれかに変更を加えると、その変更が反映されます。  "
"link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/"
"src/app/app.component.ts[`app.component."
"ts`]で設定したAngularコンポーネントに変更を加えると、その変更が反映されます。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:38
#, fuzzy
msgid "This is great!!! We can now be super-productive and make changes in both our front-end and our back-end, and see the changes immediately without needing to rebuild, repackage and restart our application!"
msgstr ""
"これは素晴らしいことです!!!これで、フロントエンドとバックエンドの両方に変更を"
"加えても、アプリケーションをリビルドしたり、リパッケージしたり、再起動したり"
"することなく、すぐに変更を確認することができ、超生産的になることができます。"

#. type: Title ==
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:39
#, fuzzy, no-wrap
msgid "Adjustments Summary"
msgstr "調整の概要"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:42
#, fuzzy
msgid "The example project has already been set up with the needed adjustments to work properly both as a bundled application and in development mode. These are the main tweaks:"
msgstr ""
"サンプルプロジェクトでは、バンドルアプリケーションとしても開発モードとしても"
"適切に動作するよう、必要な調整がすでに設定されています。主な調整点は以下の通"
"りです。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:44
#, fuzzy
msgid "Handle the Angular routes in the UI rather than on the back-end. This is important for the bundled version (running on port 8080)."
msgstr "Angularのルートをバックエンドではなく、UIで処理します。これは、バンドル版（ポ"
"ート8080で動作）では重要です。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:45
#, fuzzy
msgid "Enable the Angular proxy to allow for the UI to call REST endpoints served by Quarkus."
msgstr "Angularのプロキシを有効にして、Quarkusが提供するRESTエンドポイントをUIが呼び"
"出せるようにします。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:46
#, fuzzy
msgid "Signal to the back-end that the front-end is running in a proxy, i.e. not served by us. This is important if the back-end needs to redirect to a page in the front-end."
msgstr ""
"バックエンドに対して、フロントエンドがプロキシで動作していること、つまり我々"
"が提供していないことを伝える。これは、バックエンドがフロントエンドのページに"
"リダイレクトする必要がある場合に重要です。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:48
#, fuzzy
msgid "We will focus on the changes needed to make this work well, and not go into the details of how the application is set up."
msgstr "ここでは、これをうまく機能させるために必要な変更点に焦点を当て、アプリケーシ"
"ョンの設定方法の詳細には触れません。"

#. type: Title ===
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:49
#, fuzzy, no-wrap
msgid "Handle Angular Routes"
msgstr "アンギュラールートの処理"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:51
#, fuzzy
msgid "Add a filter, https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/AngularRouteFilter.java[AngularRouteFilter]. The essence of its `doFilter()` method is:"
msgstr ""
"フィルター、 link:https://github.com/kabir/blog-quarkus-ui-development/blob/"
"master/src/main/java/org/kabir/quarkus/ui/AngularRouteFilter."
"java[AngularRouteFilter]を追加します。その `doFilter()` "
"メソッドのエッセンスをご紹介します。"

#. type: delimited block -
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:54
#, no-wrap
msgid "chain.doFilter(request, response);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:64
#, no-wrap
msgid ""
"if (response.getStatus() == 404) {\n"
"    String path = request.getRequestURI().substring(\n"
"            request.getContextPath().length()).replaceAll(\"[/]+$\", \"\");\n"
"    if (!FILE_NAME_PATTERN.matcher(path).matches()) {\n"
"        // We could not find the resource, i.e. it is not anything known to the server (i.e. it is not a REST\n"
"        // endpoint or a servlet), and does not look like a file so try handling it in the front-end routes.\n"
"        request.getRequestDispatcher(\"/\").forward(request, response);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:67
#, fuzzy
msgid "This filter is only needed when running the application bundled in Quarkus (port 8080). It is not needed when connecting to the application running in Angular (port 4200). It's purpose is to allow us to **bookmark pages** in the application. All the server knows about are things like:"
msgstr ""
"このフィルターは、Quarkusにバンドルされたアプリケーションを実行するときにのみ"
"必要です（ポート8080）。Angularで動作するアプリケーション（ポート4200）に接続"
"する際には必要ありません。このフィルタの目的は、アプリケーション内の *ページ"
"をブックマーク*することです。サーバーが知っているのは、次のようなものだけです"
"。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:69
#, fuzzy
msgid "the REST endpoints"
msgstr "RESTエンドポイント"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:70
#, fuzzy
msgid "deployed servlets"
msgstr "デプロイされたサーブレット"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:71
#, fuzzy
msgid "the resources in the `META-INF/resources/` folder of the application"
msgstr "アプリケーションの `META-INF/resources/` フォルダー内のリソース"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:73
#, fuzzy
msgid "The `META-INF/resources/` in our case contains the application's index.html and the transpiled resources."
msgstr ""
"今回の例では、 `META-INF/resources/` 、アプリケーションのindex."
"htmlとトランスパイルされたリソースが含まれています。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:75
#, fuzzy
msgid "Without this filter, if you go to one of the Angular routes directly (e.g if you try to refresh when on http://localhost:8080/rest which is the `Rest` page we saw earlier) Quarkus will think it is a file, a REST endpoint or a servlet. Since Quarkus has no knowledge of anything called `/rest` you end up with a 404 (Not Found) status. The filter checks the status code of the request after calling `chain.doFilter()`. If the status is 404 and does not seem to be a file, we forward this request to `/`, which in turn serves up the `index.html` file. By doing a forward the path and parameters of the request are preserved. Angular then figures out that `/rest` is one of its known routes and displays the appropriate page of the application. Once the web application is loaded in the browser, Angular takes over and handles all the internal links to other routes in the web application (as an example, if you are on http://localhost:8080 and click on the link taking you to http://localhost:8080/other there is no round-trip to the server)."
msgstr ""
"このフィルターがないと、Angularルートの1つに直接アクセスした場合（例えば、"
"先ほどの `Rest` のページである http://localhost:8080/rest で更新しようとした"
"場合）、Quarkusはそれをファイル、RESTエンドポイント、またはサーブレットと勘違"
"いします。Quarkusは `/rest` というものを知らないので、404（Not "
"Found）ステータスになってしまいます。フィルタは、 `chain.doFilter()` を呼び出"
"した後、リクエストのステータスコードをチェックします。ステータスが404で、ファ"
"イルではないようであれば、このリクエストを `/` に転送し、 `index.html` ファイ"
"ルを提供します。転送を行うことで、リクエストのパスとパラメータが保持されます"
"。Angular は `/rest` が既知のルートの一つであることを理解し、アプリケーション"
"の適切なページを表示します。Webアプリケーションがブラウザに読み込まれると、An"
"gularはWebアプリケーション内の他のルートへのすべての内部リンクを処理します（"
"例として、 http://localhost:8080 にいて、 http://localhost:8080/other "
"へのリンクをクリックした場合、サーバーへのラウンドトリップはありません）。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:77
#, fuzzy
msgid "There are other ways you can handle this too, e.g. by checking the path against a set of hard-coded known paths that are to be handled by the back-end, but for my purposes the above has worked very well. The key is to invoke:"
msgstr ""
"バックエンドで処理されるハードコードされた既知のパスのセットとパスを照合する"
"など、他の方法で処理することもできますが、私の目的では上記の方法が非常にうま"
"くいきました。重要なのは、以下のように"

#. type: delimited block -
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:79
#, no-wrap
msgid "request.getRequestDispatcher(\"/\").forward(request, response);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:81
#, fuzzy
msgid "if it is something that should be handled by Angular."
msgstr "は、それがAngularで処理されるべきものであれば"

#. type: Title ===
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:83
#, fuzzy, no-wrap
msgid "Set up the Angular proxy"
msgstr "Angularのプロキシを設定する"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:85
#, fuzzy
msgid "The proxy is configured in https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/proxy.conf.json[proxy.conf.json]. All REST calls to anything under `/api` will be passed to the back-end running on port 8080. To run the Angular development server with this configuration, we have added a `proxy` configuration to the `scripts` section of https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/package.json[`package.json`]."
msgstr ""
"プロキシの設定は link:https://github.com/kabir/blog-quarkus-ui-development/"
"blob/master/webapp/proxy.conf.json[proxy.conf.json]で行います。 `/api` "
"以下のものに対するすべての REST 呼び出しは、ポート 8080 で実行されているバッ"
"クエンドに渡されます。この構成でAngular開発サーバーを実行するために、 `proxy`"
" の構成を `scripts` のセクションに追加しています。  link:https://github.com/"
"kabir/blog-quarkus-ui-development/blob/master/webapp/package.json[`package."
"json`]."

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:87
#, fuzzy
msgid "In our case, we have a servlet which needs to redirect back to the front-end (something I found I needed to implement OAuth in my main project). That has a check for the `-Dui.proxy` system property we saw earlier when handling the `/callback` path in https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/SampleServlet.java[`SampleServlet`]. If this property is set, we prepend `https://localhost:4200` (the address of the Angular proxy) to the redirect URL if we find the proxy is running on port 4200."
msgstr ""
"今回のケースでは、フロントエンドにリダイレクトする必要のあるサーブレットがあ"
"ります（メインプロジェクトでOAuthを実装するために必要なことがわかりました）。"
"これには、先ほど `/callback` のパスを処理する際に見た `-Dui.proxy` "
"システムプロパティのチェックがあります。  link:https://github.com/kabir/"
"blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/"
"SampleServlet.java[`SampleServlet`].このプロパティが設定されている場合、"
"前置して `<a href=\"https://localhost:4200\" class=\"bare\""
">https://localhost:4200</a>`(Angular プロキシのアドレス)をリダイレクト URL "
"の前に追加します。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:89
#, fuzzy
msgid "Finally, `DefaultComponent` in https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app.component.ts`] has a direct link to our servlet running in the back-end. It has a check to see if the web application is running in the proxy (i.e. its port is 4200), and if this is the case it adjusts the url from `/servlet/make-external-call` to point to the Quarkus back-end running on port 8080."
msgstr ""
"最後に、 `DefaultComponent`  link:https://github.com/kabir/"
"blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app."
"component.ts`]には、バックエンドで動作しているサーブレットへの直接リンクがあ"
"ります。ウェブアプリケーションがプロキシで実行されているかどうか（つまり、ポ"
"ートが4200であるかどうか）をチェックし、そうであれば、 `/servlet/make-"
"external-call` からのURLを調整して、ポート8080で実行されているQuarkusのバック"
"エンドを指すようにしています。"

#. type: Title ==
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:90
#, fuzzy, no-wrap
msgid "Last words"
msgstr "最後の言葉"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:93
#, fuzzy
msgid "We have seen how with a minimum amount of configuration we can have both the back-end and front-end of our application running in Quarkus's and Angular's respective development modes. During development this removes the need to rebuild the application when we change something. You can just code away, and see the changes when you refresh your browser. This is done by starting Quarkus with:"
msgstr ""
"最小限の設定で、アプリケーションのバックエンドとフロントエンドの両方を、Quark"
"usとAngularのそれぞれの開発モードで実行する方法を見てきました。開発中は、何か"
"を変更したときにアプリケーションを再構築する必要がありません。コードを書くだ"
"けで、ブラウザを更新したときに変更を確認することができます。これは、Quarkusを"
"次のように起動して行います。"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:97
#, fuzzy
msgid "and starting the Angular application (from the `webapp/` folder) with"
msgstr "でAngularアプリケーションを（ `webapp/` フォルダから）起動します。"

#. type: Title ===
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:101
#, fuzzy, no-wrap
msgid "Packaging for development"
msgstr "開発用パッケージ"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:103
#, fuzzy
msgid "If you want to do a rebuild now and again to package the application and run it all in Quarkus run"
msgstr "アプリケーションをパッケージ化し、すべてをQuarkusで実行するために、時々リビル"
"ドを行う場合は、以下を実行します。"

#. type: delimited block -
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:105
#, no-wrap
msgid "$mvn package -Dui.dev quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:107
#, fuzzy
msgid "By not passing in -Dui.proxy we disable the checks for whether the front-end runs in a proxy. `-Dui.dev` builds the web application so it is part of the Quarkus application."
msgstr ""
"Dui.proxyを渡さないことで、フロントエンドがプロキシで実行されているかどうかの"
"チェックを無効にしています。 `-Dui.dev` 、ウェブアプリケーションがQuarkusアプ"
"リケーションの一部となるように構築されます。"

#. type: Title ===
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:108
#, fuzzy, no-wrap
msgid "Packaging for production"
msgstr "生産用パッケージ"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:110
#, fuzzy
msgid "To package the application for production, use"
msgstr "アプリケーションを本番用にパッケージ化するには"

#. type: delimited block -
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:112
#, no-wrap
msgid "$mvn package -Dui\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:114
#, fuzzy
msgid "`-Dui` builds the web application just like `-Dui.dev`, but it does more optimisations for production. Those optimisations take some time."
msgstr ""
"`-Dui` は、 `-Dui.dev` と同様に Web アプリケーションを構築しますが、本番用に"
"はより多くの最適化を行います。これらの最適化には時間がかかります。"

#. type: Title ===
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:115
#, fuzzy, no-wrap
msgid "Packaging for cloud native"
msgstr "クラウドネイティブのパッケージング"

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:117
#, fuzzy
msgid "Finally to build a native image, make sure you have set up GraalVM as outlined https://quarkus.io/guides/building-native-image[here]. Then build the application to generate the native executable."
msgstr ""
"最後に、ネイティブイメージを構築するために、 link:https://quarkus.io/guides/"
"building-native-image[ここで]説明したようにGraalVMを設定していることを確認し"
"てください。その後、アプリケーションをビルドしてネイティブ実行可能ファイルを"
"生成します。"

#. type: delimited block -
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:119
#, no-wrap
msgid "$mvn package -Dui -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:121
#, fuzzy
msgid "Running this we see the super-fast startup time Quarkus gives us in native mode:"
msgstr "これを実行すると、ネイティブモードでのQuarkusの超高速な起動時間がわかります。"

#. type: delimited block -
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:125
#, no-wrap
msgid ""
"$./target/blog-quarkus-ui-development-0.1.0-runner\n"
"2019-06-06 10:57:02,254 INFO  [io.quarkus] (main) Quarkus 0.15.0 started in 0.005s. Listening on: http://[::]:8080\n"
"2019-06-06 10:57:02,464 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb]\n"
msgstr ""

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: Quarkus and Web UI Development\n"
#~ "date: 2019-06-05 14:00:00.000 -0600\n"
#~ "tags: development-tips\n"
#~ "author: kkhan\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: QuarkusとWeb UI開発\n"
#~ "date: 2019-06-05 14:00:00.000 -0600\n"
#~ "tags: development-tips\n"
#~ "author: kkhan\n"
#~ "---\n"
