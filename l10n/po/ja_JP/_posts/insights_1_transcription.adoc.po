# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-05 12:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:2
#, fuzzy, no-wrap
msgid "**Emmanuel**: Quarkus Inside number one. Test.\n"
msgstr "*エマニュエル* Quarkus・インサイド・ナンバーワン。テスト。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:4
#, fuzzy
msgid "Well, Hello everyone. And we're cheap on the budget right now."
msgstr "さて、皆さんこんにちは。今は予算が安いし"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:6
#, fuzzy
msgid "Alright, so I'm not alone in this madness. Welcome to this new episode of Quarkus Inside. It's an official one, in the sense that it's not a meta subject. We're gonna have real conversations around test today and to have conversation here. I do have Max, my colegue and partner in crime, but also Georgios which has been a massive contributor to Quarkus, being left and right, so maybe Georgios, do you wanna introduce yourself?"
msgstr "この狂気は私だけじゃないのよQuarkus・インサイドの新しいエピソードへようこそメタな話題ではないという意味で、公式のものです。私たちは今日、テストの周りに本当の会話をするつもりだし、ここで会話をするために。私の共同研究者であり犯罪のパートナーでもあるマックスがいますが、Quarkusへの大規模な貢献者でもあるゲオルギオスもいます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:8
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, thanks, thanks, you Emmanuel.\n"
msgstr "*ゲオルギオス* ええ、ありがとう、ありがとう、エマニュエル。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:10
#, fuzzy
msgid "Yeah, my name is Georgios or George as it would be spelled in English. I've been with Red Hat for a couple of years, but my life really changed when the great folks that started Quarkus really announced it internally, and I had a massive way. Oh man, I gotta jump on to this thing. It's beyond what I could ever imagine. So yeah, I started contributing nesting for spring stuff and then just took it from there basically. Now trying to do, like you said, things left or right."
msgstr "私の名前はGeorgios(ジョージ)です。Red Hatには2年ほど勤めていましたが、Quarkusを立ち上げた偉大な人たちが社内で発表したときに、私の人生は大きく変わりました。これには飛びつかないといけませんね。私が想像していた以上のものです。だから、私は春に向けてネスティングに貢献し始めてから、基本的にはそこからスタートしました。今は君が言ったように、右往左往している。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:12
#, fuzzy, no-wrap
msgid "**Emmanuel**: So I guess to... I'll speak in the name of the great folks of Quarkus it's like \"Thanks God, Georgios is here\", 'cause you jump on every trouble we have. It's been a great, great experience.\n"
msgstr "*エマニュエル* :だから... Quarkusの偉大な人々の名前で話すと、「神に感謝します、ゲオルギオスがここにいます」みたいな感じですね。素晴らしい経験でした。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:14
#, fuzzy, no-wrap
msgid "**Georgios**: Thank you thinking very much.\n"
msgstr "*ゲオルギオス* 考えてくれてありがとう"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:16
#, fuzzy, no-wrap
msgid "**Emmanuel**: Alright, so, Max, do you wanna say a few things before we... We go to the...\n"
msgstr "マックス、ちょっと言いたいことがある *ん* だけど..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:18
#, fuzzy, no-wrap
msgid "**Max**: So, yes, a few things. I hopefully should have fixed my sound now and Emmanuel should have stopped sending out my sound twice.\n"
msgstr "*Max* : そう、そう、いくつかのことだ。エマニュエルは私の音を2回も出すのを止めるべきだった。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:20
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yes.\n"
msgstr "*エマニュエル* :はい。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:22
#, fuzzy, no-wrap
msgid "**Max**: That's less weird.\n"
msgstr "*マックス* :その方が変なのは少ないですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:24
#, fuzzy
msgid "And other thing is that we actually, over the weekends, our channel actually went from around 8-900 to, now past a thousand that's cool."
msgstr "もう一つは、週末の間に、チャンネルが8-900から1000を超えました。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:26
#, fuzzy
msgid "Yeah, so we need to do this. And over the weekend we had another thing: Tim Fox started thread a about how you pronounced Quarkus and since it's a long, a long thread. So I'm just wondering how you guys pronouncing it. So mine is Quarkus."
msgstr "うん、だからこれをする必要があります。週末にはもう一つのことがありました。ティム・フォックスがQuarkusの発音についてのスレッドを立ち上げましたが、長い長い長いスレッドなので、皆さんはQuarkusをどう発音しているのでしょうか?皆さんはどう発音しているのか気になっていました。私のはQuarkusです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:28
#, fuzzy
msgid "What's yours Emmanuel?"
msgstr "エマニュエルは?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:30
#, fuzzy, no-wrap
msgid "**Emmanuel**: To me it's like, \"Spartakus\" or it's Quarkus. But I'm Frensh so who knows.\n"
msgstr "*エマニュエル* :私にとっては「スパルタクス」というか、「Quarkus」なんですよ。でも僕はフレンシュだから、誰にもわからないよ。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:32
#, fuzzy, no-wrap
msgid "**Georgios**: And I was on a, I say, Quarkus.\n"
msgstr "*ゲオルギオス* そして、私はQuarkusに乗っていました。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:34
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yeah, 1.02k you guys send that? And that's the Tim Fox threat for the conversation. And I love when British talks to British about pronunciation, or can... Yeah, I always just love it.\n"
msgstr "*エマニュエル* :ええ、1.02Kあなたたちはそれを送ってきたの?そして、それは会話のためのティム・フォックスの脅威です。そして、イギリス人がイギリス人に発音のことを話すのが大好きなんだ、とか、できるかな... うん、いつも大好きなんだ。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:36
#, fuzzy, no-wrap
msgid "**Max**: It was tomato tomato, data, data. Yeah, the whole thing. Anyway, I accept all pronunciation of Quarkus, it's fine.\n"
msgstr "*マックス* :それはトマトトマト、データ、データでした。ええ、全体的に。とにかく、私はQuarkusのすべての発音を受け入れる、それは大丈夫です。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:38
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yes, it's. You know the worst was Cylon. Exactly this one was like really difficult so we did better for Quarkus... Alright.\n"
msgstr "*エマニュエル* :そうですね。最悪だったのはサイロンこれは本当に難しかったから、Quarkusの方が良かったんだ..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:40
#, fuzzy, no-wrap
msgid "**Max**: The last thing I had was: So we published an article, like a blog with the video, that we did last time and we added the transcription in there, which I think works pretty nice, like last time, is we didn't talk about technical hopefully today, George gonna tell us all good things you have to know about testing. So it might be more useful. If anyone wanna say that's useful or we should keep doing that! All done by Markus Eisele. He volunteered to do it. So pretty awesome. It's also actually the sub-titles.\n"
msgstr "*マックス* :最後に私が持っていたものです。前回のように技術的な話はしませんでしたが、今日はジョージがテストについて知っておくべき良いことを教えてくれると思います。だから、もっと役に立つかもしれません。役に立つと言いたい人や、これからも続けていくべきだと言いたい人がいたら教えてください。全てMarkus Eiseleによるものです。彼が志願してくれたんだすごいですね。サブタイトルもあるんだ"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:42
#, fuzzy
msgid "So if you go and you don't standing neither Emmanuel's French English or my mumbling Danish. There's now sub-titles!"
msgstr "エマニュエルのフランス語の英語も 私のつぶやきのデンマーク語も 邪魔にならないようにしてねサブタイトルがあります!"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:44
#, fuzzy, no-wrap
msgid "**Emmanuel**: Transcripts here and subtitles in the video itself you mean?\n"
msgstr "*エマニュエル* :こちらのトランスクリプトと、動画自体に字幕が入っているということですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:46
#, fuzzy, no-wrap
msgid "**Max**: Yeah, so if you go to the videos, there is one whatever Google recognize which I kept there just for entertainment value, the one that I...\n"
msgstr "*マックス* :ええ、動画を見に行くと、Googleが認識しているものがありますが、これはエンターテイメントとしての価値があるので、そこに置いておきましたが、私は..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:48
#, fuzzy, no-wrap
msgid "**Emmanuel**: Where do I go, I guess, videos...\n"
msgstr "*エマニュエル* :どこに行けばいいのかというと、動画...。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:50
#, fuzzy, no-wrap
msgid "**Max**: Yeah you click on the video and then you see the... the CC, in the corner. So you just dump in the text and then Google figure out where the timestamps are. I was pretty impressed it's... Is it good? Would be good if the time spent... is something that people like to for that was...\n"
msgstr "*マックス* : 動画をクリックすると、隅にCCが表示されます。テキストを入力するだけで、Googleがタイムスタンプの位置を把握してくれます。私はかなり感銘を受けました。過ごした時間が...人々が好きな何かであれば良いのですが..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:52
#, fuzzy, no-wrap
msgid "**Emmanuel**: Anyway, that was the production of things here. Receiving our stuff are... Yeah, alright, so we're ready. We can share the screen of Georgios, but today we're going to talk about tests in Quarkus. So Is a Java framework, so I just use JUnit and off I go right? Or is it a bit more complicated?\n"
msgstr "*エマニュエル* :とにかく、それがここでの演出だったんだ。私たちのものを受け取ることは... うん、よし、準備ができた。Georgiosの画面を共有することができますが、今日はQuarkusでのテストについて話します。Javaフレームワークだから、JUnitを使えばいいのかな?それとももう少し複雑ですか?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:54
#, fuzzy
msgid "What do you guys think?"
msgstr "皆さんはどう思いますか?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:56
#, fuzzy
msgid "0:05:35 S1:"
msgstr "0:05:35 S1:"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:58
#, fuzzy, no-wrap
msgid "**Georgios**: Well, like all things in life. I think it's a little more complicated but not too much, not too much. If you're a regular enterprise Java developer no problem at all, it usesall the stuff you already know. So yeah, you'll have to use a couple of new annotations or whatever, but you just pick up the regular libraries, you already know we'll show QuarKito we'll show WireMock, AssertJ. So all good, you just have to understand how these fit in with the Quarkus ecosystem, but other that, all good.\n"
msgstr "*ゲオルギオス* まあ、人生のすべてのことがそうであるように。私はそれが少し複雑だと思いますが、多すぎず、多すぎず、ではありません。通常のエンタープライズJava開発者であれば、全く問題ありません。だから、いくつか新しいアノテーションを使う必要があるかもしれませんが、通常のライブラリを使うだけです。これらがQuarkusのエコシステムにどのようにフィットするかを理解する必要がありますが、それ以外は問題ありません。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:60
#, fuzzy, no-wrap
msgid "**Emmanuel**: Okay, by the way. So here, it's not about Test, but John says, \"Hey how do you pronouce pronouciation?\" ;]\n"
msgstr "*Emmanuel* : オーケー、ところで。で、ここではテストのことではなくて、ヨハネが「おい、発音はどうやって発音するんだ」と言っているんですよ ;]"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:62
#, fuzzy
msgid "So it says \"prononciation\" in French, so there you go to not... But, more seriously, if you have questions, what we are having conversation with Georgios around test, so we're gonna pretend we're having... Well, not that pretending actually, but we're gonna have questions to Georgios and ask questions, but if you do have questions on your own, just send them to the comments and will push a few selected ones, and then you know, ask Georges for the answer hopefully."
msgstr "でも、もっと真面目な話、質問がある場合は、テスト前後にグルジオスと会話をしているので、そのふりをして...まあ、そのふりをしているわけではありませんが、グルジオスに質問をしたり、質問をしたりしていますが、自分で質問がある場合は、コメント欄に送って、いくつか選んだものを押して、ジョルジュに答えを聞いてみるといいでしょう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:64
#, fuzzy
msgid "So something I wanted to say is if you want a plain unit test with like no dependencies with the infrastrcuture you just can go and use your unit or whatever is your preferred framework. I think we have to say we did settle on JUnit 5, as the default framework to do testing, so we recommend you keep that for Quarkus, but then Quarkus has this interesting model where it's fast enough or really fast to get started, to start itself therefore we can run the whole application in each of your tests, and then you can run in real life situation, right, is that correct?"
msgstr "私が言いたかったのは、インフラストラクチャーに依存しないプレーンなユニットテストをしたい場合は、ユニットでも何でもいいので、お好みのフレームワークを使ってください。しかし、Quarkusには面白いモデルがあり、起動するのに十分に速く、起動するのが本当に速いので、それぞれのテストでアプリケーション全体を実行することができます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:66
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah.\n"
msgstr "*ジョージオス* そうだな"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:68
#, fuzzy, no-wrap
msgid "**Emmanuel**: You want me to share your screen. So, you show that a little bit or?\n"
msgstr "*エマニュエル* :画面を共有してほしいということですね。それで、それを少し見せるのか、それとも?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:70
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, whatever you think.\n"
msgstr "*ジョージオス* ええ、あなたが思うように"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:72
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yeah, sure, let's get started with it. Unless you guys have some more introduction on the testing or would you...\n"
msgstr "*Emmanuel* : ええ、そうですね、さっそく始めましょう。テストについてもう少し紹介がなければ..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:74
#, fuzzy, no-wrap
msgid "**Max**: No, sounds good to me!\n"
msgstr "*マックス* :いや、いいね!"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:76
#, fuzzy, no-wrap
msgid "**Georgios**: No, I'm good.\n"
msgstr "*ゲオルギオス* いいえ、私は大丈夫です。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:78
#, fuzzy, no-wrap
msgid "**Emmanuel**: So there you go, Yeah, I do Skype. So this is a Quarkus app, right?\n"
msgstr "*Emmanuel* : そうそう、スカイプはやってますよ。これはQuarkusのアプリなんですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:80
#, fuzzy, no-wrap
msgid "**Georgios**: Yes, this is a Quarkus application that I generated using my Maven tooling, so I haven't changed anything, just created a Quarkus application opened it in IntelliJ which I'm using throughout this present. [unaudible, scattered] So you wanna talk about what these two-generated tests are?\n"
msgstr "*Georgios* です。はい、これは私のMavenツールを使って生成したQuarkusアプリケーションですので、何も変更していません。それで、この2つの生成されたテストが何なのかを話したいですか?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:82
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yeah, let's start with the first one.\n"
msgstr "*エマニュエル* :ええ、最初の方から始めましょう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:84
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, got it, so, okay, cool. So like Emmanuel said, when we use JUnit 5 with Quarkus, our integration with Quarkus, what it does is that it starts Quarkus itself. The whole Quarkus application. And we envision like you run actual, hit the actual endpoints that your application uses, that's not the only thing you can do. Of course, you can do a whole bunch of other stuff. But that's like the main way we see it being used. So here you see the Quarkus test is our integration point with JUnit 5, and that's all you need to do just to start your Quarkus application inside the test. And here is like you just write your regular test. We're using REST-assured here, with Quarkus supports out of the box, so you're hitting the Hallo endpoint expecting it...\n"
msgstr "*ジョージオス* はい、わかりました。エマニュエルが言ったように、JUnit 5をQuarkusと一緒に使うと、Quarkusとの統合により、Quarkus自体が起動します。Quarkusアプリケーション全体を起動します。実際に実行して、アプリケーションが使用する実際のエンドポイントをヒットさせることを想定していますが、できることはそれだけではありません。もちろん、他にもたくさんのことができます。しかし、これが私たちが使用している主な方法です。QuarkusテストはJUnit 5との統合ポイントで、テストの中でQuarkusアプリケーションを起動するために必要なことはこれだけです。そして、ここでは通常のテストを書いています。ここではRESTを使用していますが、Quarkusはすぐにサポートしているので、期待してHalloのエンドポイントを打つことになります。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:86
#, fuzzy, no-wrap
msgid "**Emmanuel**: You don't have to, by the way, but I think we integrate right away, the port and host that the Quarkus app is running with REST-assured. It's like a total transparent experience for you.\n"
msgstr "*Emmanuel* : ちなみに、そうする必要はありませんが、私たちはすぐに統合していると思います、Quarkusアプリが動作しているポートとホストをREST-assuredで提供しています。それはあなたのための完全な透明な体験のようなものです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:88
#, fuzzy, no-wrap
msgid "**Georgios**: Exactly, yeah, if we didn't integrate out of the box, you would have to select here. You have to do port, like 8081 or whatever. Yeah, we do that out of the box. So it's the experiences with no friction at all.\n"
msgstr "*ジョージオス* そうですね、もし箱から出して統合しなかったら、ここで選択しなければなりません。あなたはポートをする必要があります 8081または何かのように。そうですね、箱から出してやるんです。だから、それは全く摩擦のない経験です。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:90
#, fuzzy, no-wrap
msgid "**Emmanuel**: Oh, speaking of... So you put 8081 for a reason. So the default port, in Quarkus is 8080, so that's how we start.\n"
msgstr "*Emmanuel* : そういえば、8081と書いたのには理由があるんですね。Quarkusのデフォルトポートは8080なんですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:92
#, fuzzy
msgid "So historically, from WildFly and even before... But for test we've decided to bump the port to one, so that you can run your test and while having your life application running, right?"
msgstr "歴史的にはWildFlyから、そしてそれ以前からですが、テストのためにポートを1つにすることにしました。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:94
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah exactly, so exactly our default port for running the regular applications is 8080 but you bring your test 8081. so, we envision... You can do multiple things in... also the dev mode runs in 8080, so you can have your dev mode running and then your test like running separately. But just the way we have to that to make things.\n"
msgstr "*ジョージオス* そうですね、正確に言うと、通常のアプリケーションを実行するためのデフォルトのポートは808080ですが、あなたはテスト用の8081を持ってきています。しかし、私たちは物事を作るためにそれをしなければならない方法だけを考えています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:96
#, fuzzy, no-wrap
msgid "**Emmanuel**: Can I change it?\n"
msgstr "*エマニュエル* :変えてもいいですか?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:98
#, fuzzy, no-wrap
msgid "**Georgios**: Yes, absolutely. You go here to Quarkus, well, this my... IntelliJ Ultimate doesn't have a property completion yet.\n"
msgstr "*ジョージオス* はい、絶対に。あなたはここでQuarkusに行って、まあ、これは私の... IntelliJ Ultimateはまだ物件が完成していません。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:100
#, fuzzy
msgid "I know Max is working on it but there's also a community plug-in, but I haven't installed it yet... But anyway, http port would be like 8080, say 9090 for the regular one."
msgstr "Maxが動いているのは知っていますが、コミュニティプラグインもありますが、私はまだインストールしていません...が、とにかくhttpポートは8080、普通のものだと9090と言ったところでしょうか。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:102
#, fuzzy, no-wrap
msgid "**Max**: Just get to clarify: IntelliJ, if you install the community Quarkus plug-in you should have...\n"
msgstr "*Max* : はっきりさせておきます:IntelliJ、コミュニティQuarkusプラグインをインストールすると..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:104
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, yeah, yeah, exactly. I haven't installed that, but IntelliJ Ultimate out-of-the-box doesn't have that, but I haven't installed it so, if I wanted to change the port, Like let's say 8082, I would just do this set Quarkus http.test-port. So like Emmanuel like to say a lot and I think it's a great decision is that, everything in Quarkus is configured through the application properties so a whole bunch of our frameworks and libraries that we use are controlled in this manner. So you just have to learn a set of properties and you can figure out all the properties, like You go Quarkus... Even if I.\n"
msgstr "*ゲオルギオス* ええ、ええ、ええ、ええ、その通りです。私はインストールしていませんが、IntelliJ Ultimateにはありませんが、私はインストールしていないので、ポートを変更したい場合は、例えば8082とします。エマニュエルがよく言っていたように、これは素晴らしい決断だと思います。Quarkusのすべてはアプリケーションのプロパティーを通して設定されているので、私たちが使用しているフレームワークやライブラリのすべてがこの方法で制御されています。ですから、プロパティーのセットを学ぶだけで、すべてのプロパティーを把握することができます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:106
#, fuzzy
msgid "I don't have the IDE integration, but if I go to http reference on our web page we can see what all the properties are or not here, maybe like Quarkus testing, I usually just open the source code. So anyway, I'm not sure exactly where they are now. You remember that be great but usually the... The properties are right on the site, so you can see exactly what you're actually..."
msgstr "私はIDEの統合を持っていませんが、私は私たちのWebページのhttpリファレンスに行けば、私たちはここですべてのプロパティーがあるかどうかを確認することができます、多分Quarkusのテストのように、私は通常、ソースコードを開くだけです。だから、とにかく、私は彼らが今どこにあるか正確にはわかりません。あなたは偉大であることを覚えていますが、通常は... プロパティーはサイト上にあるので、あなたが実際に何をしているかを正確に見ることができます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:108
#, fuzzy
msgid "0:12:24 S1:"
msgstr "0:12:24 S1:"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:110
#, fuzzy, no-wrap
msgid "**Emmanuel**: You can to me, let me take the... One thing I liked and have to admit I went really kicking and screaming for that, but what I thought was really the best solution was for each guide to have the list of properties for it. So if you go to... Sorry my network is suffering a bit apparently, so if I go to configuring data sources, here at some point, you see, here's how I configure the data source and you might even have the complete list somewhere, I think, towards the end?\n"
msgstr "*エマニュエル* : あなたは私にできます、私にやらせてください... 私が好きなことの一つは、私はそれのために本当に蹴って叫んで行ったことを認めなければなりませんが、私が本当に最善の解決策だと思ったのは、各ガイドのプロパティーのリストを持っていることです。だから、もしあなたが...すみません、私のネットワークが少し苦しんでいるようで、データソースの設定に行けば、どこかの時点で、ここに、私がデータソースを設定する方法があります。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:112
#, fuzzy
msgid "Yeah, there you go, you get a full page, here and we did two things. So one is this list here is actually generated from the list of properties we have in each of the in this specific extension. And you can filter stuff here. So if I am only looking for health check, then it doesn't work."
msgstr "そうですね、ここに行くと全ページが表示されますが、2つのことをしました。一つは、このリストは実際にこのエクステンションのそれぞれにあるプロパティーのリストから生成されています。ここでフィルタリングすることができます。もし私がヘルスチェックだけを探しているのであれば、それは機能しません。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:114
#, fuzzy
msgid "Don't know what's going on... Yeah, they go. So you got the filtering of the list of properties, so that's useful too, if you got a big list of properties, but another one that is usedful is if you go back to quarkus.io/guides, here the second one. So Hey, the first one is, \"Hey how do I continue my app? But the second one is, \"Give me all of the possible quotes configurations ever\"."
msgstr "何が起こっているのかわからない... そう、彼らは行く。プロパティーのリストのフィルタリングがあるので、大きなプロパティーのリストを持っている場合は、それも便利ですが、もう一つ便利なのは、quarkus.io/guidesに戻ると、ここに2つ目のものがあります。最初の「Hey」は「Hey How do I continue my app?というものですが、2つ目は「これまでに可能な引用符の設定をすべて教えてくれ」というものです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:116
#, fuzzy
msgid "And here you've got the massive list of properties, and you can really quick search something. So yeah, if I look for, I don't know, SQL because I want the Hibernate way to find things where... I guess I should have used... you that there's a bit too many here, but I should be able to find somehow fast enough. The... There you go Hibernate ORM, then you see how do I get the logs?"
msgstr "ここには膨大なプロパティーのリストがあり、何かを素早く検索することができます。だから、もしSQLを探すなら、わからないけど、Hibernateの方法で検索したいから... ここにはちょっと多すぎるけど、なんとか早く見つけられるはず。そこにHibernate ORMがあるんだけど、どうやってログを取るのかな?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:118
#, fuzzy
msgid "So I log creator would have been been better."
msgstr "だからログクリエーターの方が良かったんじゃないかな。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:120
#, fuzzy
msgid "So it's a nice way to get all of the properties and filter them out very quickly. And I was against that. But since we have automated it, we said, Hey, why not? And it was actually, it is a very good, very good solution. So, back to Georgios now..."
msgstr "だから、すべてのプロパティーを取得して、非常に素早くフィルターをかけることができるのはいい方法です。私はそれに反対していました。しかし、私たちはそれを自動化したので、私たちはこう言いました。実際に、それは非常に良い、非常に良い解決策です。では、ジョージオスの話に戻りますが..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:122
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, thanks for that. Yeah, I was looking for those. But yeah, that's exactly, yeah. How we envison people would find it more with the IDE integration, like VS code has it out of box and stuff like that.\n"
msgstr "*ジョージオス* ああ、ありがとうああ、それを探していたんだ。でも、まさにその通りですね。私たちが想定しているのは、人々がIDEとの統合によって、VSのコードには箱から出して使うようなものがあるように、より多くの人がそれを見つけることです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:124
#, fuzzy
msgid "So let's go in like run a first test, right? So for my need it should just work. I'll just hit it right here."
msgstr "最初のテストをしてみようか?私の必要性のために、それはちょうど動作するはずです。ここに打つよ"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:126
#, fuzzy
msgid "And what this will do is it will start the Quarkus application and will actually perform an http request, against the Hello endpoint. So if I go and change this to below here, then obviously my test fail, or then again, my test will fail because I expected \"hello\", and that's it for the REST-assured stuff. So, REST-assured stuff integration out of the box."
msgstr "これが何をするかというと、Quarkusアプリケーションを起動して、実際にHelloエンドポイントに対してhttpリクエストを実行します。これを以下のように変更すると、明らかにテストは失敗しますが、「Hello」を期待していたのでテストは失敗します。つまり、REST 保証されたものは、箱から出して統合されています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:128
#, fuzzy
msgid "This is a regular JVM application. When we write a Quarkus test, now we have another sort of test which we call the \"native image test\". Now, what this does is that it gives you the ability to build the GraalVM native image and run tests against that. So it's like one... Just one quick here, I can run and I can build the test that and both sorry. Yeah."
msgstr "これは通常のJVMアプリケーションです。Quarkusのテストを書くときに、「ネイティブイメージテスト」と呼ばれる別の種類のテストがあります。これは、GraalVMのネイティブイメージを構築し、それに対してテストを実行する機能を提供します。つまり、1つのようなものです... ここで1つだけ素早く実行して、テストをビルドすることができます、そして両方とも申し訳ありません。そうですね"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:130
#, fuzzy
msgid "I haven't configured IntelliJ to properly find everything here, but if I do mvn -verify -pNative what it will do after running the reading resource test it'll run this test with Maven fail-safe if it's an actual integration test and build the GraalVM native image as we're seeing here."
msgstr "私はIntelliJを適切にここですべてを見つけるように設定していませんが、私がmvn -verify -pNativeを実行すると、読み取りリソーステストを実行した後に何をするかを実行すると、実際の統合テストであれば、Mavenのフェイルセーフでこのテストを実行し、ここで見ているようにGraalVMネイティブイメージを構築します。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:132
#, fuzzy
msgid "And once it builds that it'll start it and execute in this case it'll execute the same rest endpoint; the same http request against the rest endpoint of the native image."
msgstr "一度ビルドすると、それを起動して実行します。この場合は、ネイティブイメージの残りのエンドポイントに対して同じ http リクエストを実行します。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:134
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yeah, so if you're unsure about the nature image that's how you would do your extra smoke tests to make sure the native image is not doing something funky compared to the actual Java code.\n"
msgstr "*Emmanuel* : そうですね。ネイチャーイメージに自信がない場合は、ネイチャーイメージが実際のJavaコードに比べて何か変なことをしていないかどうかを確認するために、追加のスモークテストを行う方法です。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:136
#, fuzzy, no-wrap
msgid "**Georgios**: Exactly... Yeah, that's exactly... We see it as a black-box testing thing, where you can only test the parts of the application that are available from the outside, like http or messaging, or anything like that.\n"
msgstr "*ジョージオス* httpやメッセージングなど、外部から利用可能なアプリケーションの部分だけをテストすることができるブラックボックステストのようなものだと考えています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:138
#, fuzzy, no-wrap
msgid "**Emmanuel**: By the way you said you forgot to configure your stuff in IntelliJ. I think it's to export a property, which is GraalVM home, something like that...\n"
msgstr "*Emmanuel* : ところで、IntelliJでの設定を忘れていると言っていましたね。プロパティーをエクスポートすることだと思うのですが、これはGraalVMのホームとかそんな感じですね...。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:140
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, exactly.\n"
msgstr "*ジョージオス* ええ、その通りです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:142
#, fuzzy, no-wrap
msgid "**Emmanuel**: So you edit your test and you set an environment viable, which is GraalVM home, which will point to the native image generator, forgot the name of it.\n"
msgstr "*Emmanuel* : テストを編集して、実行可能な環境を設定します。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:144
#, fuzzy, no-wrap
msgid "**Georgios**: Native yeah, native image, yeah. So yeah, exactly... I configure it here, and then I would figure it out, and then everything would just work, but I didn't do that now, but okay.\n"
msgstr "ジョージ *オス* ネイティブだね、ネイティブイメージだね。ここで設定して、それを理解して、すべてがうまくいくようにしていましたが、今はしていませんが、わかりました。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:146
#, fuzzy, no-wrap
msgid "**Emmanuel**: He we got one question from ____. Let's try to extract something out of it so \"Guys, please make a guide to test driven development and post from controller, service and repos in these video. Thank you for helping me, I have coffee on my POM, but inject more kind of return some error. I'm not sure what inject mock. Oh, I guess we gonna go and address the whole mock as a bit later. Maybe that would be a good time to dive into this.\n"
msgstr "*Emmanuel* : 彼は私たちが ____ から1つの質問を得た。みんな、これらのビデオでは、コントローラ、サービス、レポからテスト駆動開発とポストへのガイドを作ってください\"ので、それから何かを抽出しようとしましょう。助けてくれてありがとう、私は私のPOMにコーヒーを持っているが、より多くの種類の注入は、いくつかのエラーを返す。私は何を注入モックがわからない。ああ、私たちは行くつもりだと思いますし、少し後に全体のモックとして対処します。多分、それはこれに飛び込むのに良い時間になるだろう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:148
#, fuzzy, no-wrap
msgid "**Georgios**: Sure, sure, yeah, sounds good.\n"
msgstr "*ジョージオス* 確かに、確かに、そうだな。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:150
#, fuzzy, no-wrap
msgid "**Max**: I do think the point here is the POST part. I think the point here is the post part, I assume, 'cause the GET part is easy, it's more the post, the to...\n"
msgstr "*Max* : 私はここでのポイントはpostの部分だと思っています。私はここでのポイントはpostの部分だと思います、私は推測します、なぜならGETの部分は簡単だからです、それはもっとpost、to..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:152
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, well, the post flow isn't anything specific to Quarkus just you would use your rest assured, you just configure rest assured the rest assured test to do whatever it needs to do with POST.\n"
msgstr "*Georgios* .そうですね。postのフローはQuarkusに特化したものではなく、rest assuredを使うだけです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:154
#, fuzzy
msgid "Also, we can do that. Yeah, we can do that later but another thing we should mention is that our quick starts have most of this stuff implemented, already. So looking at the Quarkus quick starts is which I'll pull up right here is a great way to see all the stuff that we envision as the proper way of doing things or have a lot of examples. So here it is: quarkus.io. quick starts, we have all the quite starts here. If I go for \"POST\" I'm pretty sure let's find something."
msgstr "また、私たちはそれをすることができます。後からでもいいのですが、もう一つ言及しておきたいのは、Quarkusのクイックスタートにはこのようなことがほとんど実装されているということです。ここにあるQuarkusのクイックスタートを見ることで、私たちが想定している適切なやり方や、多くの例を見ることができます。quarkus.io.quarkus.quickstartでは、ここですべてのクイックスタートを見ることができます。私は\"post\"のために行く場合は、私はかなり確信してみましょう何かを見つけることができます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:156
#, fuzzy
msgid "Yeah, so it would be here, like the validation right here you can see an example of how you would do POST. So it's here like you, it's just rest assured there's nothing Quarkus specific to this. But yeah, we can try it out."
msgstr "ここにあるのは、検証のようなもので、POSTを行う方法の例を見ることができます。あなたのようにここにありますが、Quarkus特有のものは何もありませんのでご安心ください。でも、試してみることはできます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:158
#, fuzzy
msgid "So how, how we move on to something that..."
msgstr "それで、どうやって、どうやって..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:160
#, fuzzy, no-wrap
msgid "**Emmanuel**: So we got one question from Recardo... Is there a way, as the test runs the Quarkus app to automate the bootstrap of dependent system, which I think is gonna be a nice connection to test containers and how you can integrate it. So whenever you wanna jump on that we can...\n"
msgstr "*Emmanuel* : Recardoから一つ質問がありました... Quarkusアプリでテストを実行する際に、依存システムのブートストラップを自動化する方法はありますか?だから、あなたがそれに飛びつきたいときはいつでも私たちはすることができます..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:162
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, not exactly sure what Recardo means here, 'cause it could mean various things in the Quarkus space.\n"
msgstr "*ゲオルギオス* ええ、レカルドが何を意味するのかはよくわからないわ。Quarkus空間ではいろいろな意味があるかもしれないからね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:164
#, fuzzy, no-wrap
msgid "**Emmanuel**: I suppose it's not a dependent system of the internal of the application here, we will see how you do mock, which would be a way to walk around that, but I assume he wants to start an external database.\n"
msgstr "*エマニュエル* :私はそれがここでは、アプリケーションの内部の依存システムではないと仮定し、我々はあなたがどのようにモックを行う方法を参照してください、これは、それを回避するための方法であろうが、私は彼が外部データベースを開始したいと仮定します。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:166
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, yeah, We'll show that. Yeah, we'll definitely show that. That's one of the points that we really want to cover test containers.\n"
msgstr "*ジョージオス* ええ、ええ、見せますよええ、絶対に見せますよ。それがテストコンテナーをどうしてもカバーしたいポイントの1つです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:168
#, fuzzy
msgid "So let's start with something that we really hear a lot."
msgstr "では、本当によく耳にすることから始めましょう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:170
#, fuzzy
msgid "A lot of people wanna mock the REST client because we wanna start using REST client and then start testing it."
msgstr "多くの人がRESTクライアントをモックしたがるのは、私たちがRESTクライアントを使い始めてからテストを始めたいからです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:172
#, fuzzy
msgid "REST client is like super useful because every micro-service has to do http requests sooner or later, so anybody ends up using the REST client."
msgstr "RESTクライアントは、すべてのマイクロサービスが遅かれ早かれhttpリクエストをしなければならないので、誰もがRESTクライアントを使うことになってしまうので、とても便利です。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:174
#, fuzzy
msgid "Let's go ahead and start with creating an example. REST client, we wanna do. I wanna have a... I'm gonna hit an external country service, so the first thing I wanna do is create a country let's say, DTO, I give it two fields \"name\" and \"capital\"."
msgstr "まずは例題を作るところから始めてみましょう。RESTクライアント、やってみましょう。外部の国のサービスをヒットさせたいので、まず最初に国を作成します...例えばDTOとします。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:176
#, fuzzy
msgid "Okay, let me just go ahead and use JSON B, so import as we support JSON, B and Jackson. Both for marshelling and marshelling Jason, I'm just gonna use this on here just for no particular reason. So let's set up... What can I do?"
msgstr "さて、私はちょうど私が先に行って、私たちは、JSON、Bとジャクソンをサポートしているので、インポートして、JSON Bを使用してみましょう。両方ともマースシェル用とマースシェル用のジェイソン、特に理由もなくここで使うだけだからね。では設定してみましょう・・・何をすればいいのでしょうか?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:178
#, fuzzy, no-wrap
msgid "**Max**: You could have done that with add-extension?\n"
msgstr "*マックス* :add-extensionでできたんですか?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:180
#, fuzzy, no-wrap
msgid "**Georgios**: Yes I could have done mvn add-extension. But since I'm already in the IDE, I just copy&paste to here.\n"
msgstr "*ゲオルギオス* はい、mvn add-extensionを実行することができました。しかし、私はすでにIDEに入っているので、ここにコピー&ペーストするだけです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:182
#, fuzzy
msgid "So, I'm just doing..."
msgstr "だから、私はただ..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:184
#, fuzzy, no-wrap
msgid "**Emmanuel**: It just means that adding an extension is literally adding something in the POM, so that's...\n"
msgstr "*Emmanuel* : エクステンションを追加するということは、文字通りPOMに何かを追加するということなので、それは..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:186
#, fuzzy, no-wrap
msgid "**Georgios**: Yes, no magic, yeah. So we have tooling to automate this.\n"
msgstr "*ゲオルギオス* はい、魔法ではありません。これを自動化するツールがあるんですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:188
#, fuzzy
msgid "So everybody's work flow is different. My workflow is so for me it's just easier to copy paste into pom.xml."
msgstr "ですから、作業の流れは人それぞれです。私のワークフローは、pom.xmlにコピーペーストする方が簡単です。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:190
#, fuzzy
msgid "Other people couldn't do it a lot differently."
msgstr "他の人は、あまり違うことができませんでした。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:192
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yeah, I used to develop with X. so do you then...\n"
msgstr "*エマニュエル* :そうですね、以前はXで開発していたので、その時は......。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:194
#, fuzzy, no-wrap
msgid "**Georgios**: So, no I've always been an IntelliJ fan. So, we set up our DTO and now it's actually set up with the REST client would look like. So, it's a country services, so the REST client is declared. The whole idea is that you declare an interface, and then Quarkus will automatically implement that interface for you in order by generating a code that will use a http request. So what we're gonna do here we're gonna hit an external - we're gonna try to use an external service. I'm gonna use this REST country service, right?\n"
msgstr "*ゲオルギオス* 私はずっとIntelliJのファンでした。それで、私たちはDTOを設定して、今、それは実際にRESTクライアントで設定されているように見えます。つまり、国のサービスなので、RESTクライアントが宣言されています。インターフェースを宣言すると、Quarkusが自動的にそのインターフェースを実装し、httpリクエストを使用するコードを生成します。ここでは、外部サービスを利用してみましょう。このRESTの国のサービスを使ってみますね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:196
#, fuzzy
msgid "____ And I'm just gonna use one end point, which is the name endpoint which, as you can see here, what I wanna hit is this REST v2 main name, so that's what I'm gonna try to set up here."
msgstr "このエンドポイントは名前のエンドポイントです 見ての通り、このREST v2のメインの名前です _。_"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:198
#, fuzzy
msgid "Country import... get by name... String name... Yeah, this will be a GET as I can see here. Well, it doesn't say it, but it is a GET anyway and return produces an application JSON and the path will see the whole path for the country for the version of the country service. I'm using under v2 as we see here."
msgstr "Country import...get by name...String name...そう、これはここを見てもわかるようにGETになります。まあ、書いてないけど、とにかくGETで、returnはアプリケーションJSONを生成して、パスは国のサービスのバージョンの国の全体パスを見ることになります。私はここで見るようにv2以下を使用しています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:200
#, fuzzy
msgid "And the path for ____ class is a name as ____ So that sets it up. I'm just gonna copy paste the URL. So like we said earlier, we can figure a lot of things through application properties. And since I wanna type this whole thing here, this is what you would configure. So basically when you're building a REST client, Quarkus is building a REST client it needs to know what the base URL is and this is how we set the base URL so this is the name of the class."
msgstr "で、_ _クラスの _ パスは_という名前になっているので、これで設定しています。URLをコピペするだけです。先ほども言ったように、アプリケーションのプロパティーでいろいろなことがわかるようになっています。そして、ここに全てを入力したいので、これはあなたが設定するものです。基本的には、RESTクライアントを構築するときに、QuarkusがRESTクライアントを構築するときには、ベースとなるURLを知る必要があります。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:202
#, fuzzy
msgid "Oh, I and you said this is the suffix of the property that we use in order to configure the base URL. So base URL is ____."
msgstr "あ、そういえばこれはベースURLを設定するために使うプロパティーのサフィックスなんですよね。ということで、ベースURLは ____ です。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:204
#, fuzzy
msgid "And now, how we're gonna call, how we're gonna supposed to use this so; Well, I'm just gonna expose this as a rest API, so run building anything with business logic here, we just gonna fill the rest endpoint that will delegate to hitting don't get to the REST client, to hit the rest endpoint of ____."
msgstr "さて、どうやって呼び出すか、どうやって使うか、これはレストAPIとして公開しますので、ビジネスロジックで何かを構築する際には、レストエンドポイントを埋めて、RESTクライアントに到達しないように、 ____ のレストエンドポイントを打つように委任します。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:206
#, fuzzy
msgid "I don't know Emmanuel, I don't know what your thoughts are on what this is supposed to call in the Spring world. We call this controller. I guess, here, in Quarkus we've been using resource, but I know talking to Stephane he didn't really like that name. So I know what you guys think what your opinion is."
msgstr "エマニュエルは知らないが、Springの世界ではこれを何と呼ぶのか、君の考えは知らない。私たちはこれをコントローラと呼んでいます。ここでは、Quarkusではresourceを使っていますが、ステファンと話していると、彼はその名前が好きではなかったようです。だから、あなたたちがどう思っているのか、あなたたちの意見を知っています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:208
#, fuzzy, no-wrap
msgid "**Emmanuel**: I don't have opinions really so.\n"
msgstr "*エマニュエル* :本当にそうなのか、意見はないですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:210
#, fuzzy, no-wrap
msgid "**Georgios**: How about you, Max?\n"
msgstr "*ゲオルギオス* 君はどうだ、マックス?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:212
#, fuzzy, no-wrap
msgid "**Max**: A control for me, it's something I'd used.\n"
msgstr "*マックス* :私のためのコントロール、それは私が使用していたものです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:214
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yeah, I think, I'd use controller in my Play days.\n"
msgstr "*エマニュエル* :そうですね、プレイ時代はコントローラーを使っていたと思います。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:216
#, fuzzy, no-wrap
msgid "**Georgios**: Oh, okay, so that's how Play did it, well, Okay. Here we go. So we're injecting the country service, the interface into the... We call it a resource here but when a partner is created at the REST client CDI qualifier. So when we're injecting we have to use that qualifyer as well and this is done, because you might wanna create your own but in this case, we're just using the qualifier to disambiquate if there are multiple services, multiple implementations of the country service. So I'm just gonna copy this here, and go and let's see, this is GET... And I'll say, path name - name and ____.\n"
msgstr "*ゲオルギオス* ああ、そうか、そうか、プレイはこうやってやったのかここではリソースと呼んでいますが、パートナーがRESTクライアントのCDI修飾子で作成されます。注入するときには、この修飾子も使用しなければなりません。これで完了です。自分で作成したほうがいいかもしれませんが、この場合は、複数のサービスや国のサービスの実装がある場合に、修飾子を使用するだけです。これをコピーして、これをGETしてみましょう... そして、パス名 - 名前と ____ と言います。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:218
#, fuzzy
msgid "Okay, so now what I've done to set up a resource which will hit the REST client, but now I wanna test it, right, so I just... I'll create a new test."
msgstr "さて、これでリソースをセットアップしてRESTクライアントにヒットするようにしましたが、今はテストをしたいので、新しいテストを作成します。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:220
#, fuzzy
msgid "I'll say regular country resource test is gonna be a Quarkus test. And I'm just gonna copy this here."
msgstr "普通の国のリソーステストはQuarkusのテストになりそうだなで、これをここにコピペすると"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:222
#, fuzzy
msgid "So I basically have to do similar things is test ____. So ____."
msgstr "だから私は基本的に似たようなことをしなければならないのは、テスト __ _ です。 _だから _ _。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:224
#, fuzzy, no-wrap
msgid "**Emmanuel**: ____.\n"
msgstr "*エマニュエル* _: __._"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:226
#, fuzzy, no-wrap
msgid "**Georgios**: No we're out of the IMF.\n"
msgstr "*ゲオルギオス* いいえ、我々はIMFから出ています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:228
#, fuzzy, no-wrap
msgid "**Emmanuel**: Well everybody is in at some point.\n"
msgstr "*エマニュエル* :そうですね......誰もがどこかのタイミングで参加しています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:230
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, I agree ____ away that behind us. So now what I'm gonna do here I'm gonna try and show what I expect it to return. So this is just standard rest assured syntax, so this will be the size here I expected to be one because when I hit the REST service it'll give me one only. If I added like ____ return a lot more results, and I'll go and I'll say, the first result name is, the name is \"Greece\"\n"
msgstr "*ジョージオス* ええ、私は同意します 私 _たちの背後にあることを離れてさて、ここで何をするかというと、何が返ってくるのかを示してみます。これは標準的なrest assuredの構文ですので、これは私が期待していたサイズになります 1つのRESTサービスをヒットすると、それは私に1つだけを与えるからです。 のように追加した場合、 _ 私は多くの結果を返します、と私は行くと、私は言うでしょう、最初の結果の名前は、名前は \"ギリシャ\"です"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:232
#, fuzzy, no-wrap
msgid "**Max**: ____ path, right?\n"
msgstr "*Max* _: ___ パスですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:234
#, fuzzy, no-wrap
msgid "**Georgios**: Yes, yes, it's ____. Rest assured uses Jetty.\n"
msgstr "*ゲオルギオス* 。はい、はい、それは ____ です。安心してJettyを使う。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:236
#, fuzzy, no-wrap
msgid "**Emmanuel**: Let me ask a question to the readers \"Does anybody know why we started the video with the music from Star Wars? You can carry on on a... Somebody picks that up.\n"
msgstr "*Emmanuel* :読者の皆さんに質問させてください「スターウォーズの音楽でビデオを始めた理由を知っている人はいますか?続けてもいいよ・・・誰かが拾ってくれたんだから。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:238
#, fuzzy, no-wrap
msgid "**Georgios**: Okay, so now I'm starting the test inside my browser... Ah, we made a mistake here and I think I made a mistake.\n"
msgstr "*ゲオルギオス* さてさて、今ブラウザの中でテストを開始しているのですが...あ、ここで間違えてしまったようで、私も間違えてしまったようです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:240
#, fuzzy
msgid "Did I not add JSON on the REST client? JSON V could not find MessageBodyWriter... ah... Obviously I made a mistake. Produces then... Yeah, I think it's also I made a mistake here. I didn't... You gotta should have caught that returning Jason."
msgstr "RESTクライアントにJSONを追加しなかったのかな?JSON V は MessageBodyWriter が見つかりませんでした......あぁ......明らかに間違えました。プロデュースしたら... ああ、ここも間違えたんだと思う。帰ってきたジェイソンに気付くべきだったな。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:242
#, fuzzy, no-wrap
msgid "**Max**: What was the error?\n"
msgstr "*マックス* :何のエラーだったんですか?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:244
#, fuzzy, no-wrap
msgid "**Georgios**: The error was that it told me that it couldn't return an octet stream because I didn't have his produces. So by default it is using ocetet stream and it couldn't figure that out.\n"
msgstr "*ジョージオス* エラーは、私が彼のプロデュースを持っていないので、オクテットストリームを返せないと言われたことでした。だからデフォルトではオクテットストリームを使っていて、それを理解することができませんでした。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:246
#, fuzzy, no-wrap
msgid "**Emmanuel**: May the fourth, so that's why we had the sound...\n"
msgstr "*エマニュエル* :5月4日だから音が......。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:248
#, fuzzy, no-wrap
msgid "**Georgios**: Oh, so I made another mistake, I didn't add getters here.\n"
msgstr "*ゲオルギオス* あ、そうそう、ここにゲッターを追加していなかったので、またミスをしてしまいました。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:250
#, fuzzy, no-wrap
msgid "**Emmanuel**: While you figure that out, there was a question for Antony. \"Hey gang, I can't find a saved update ____ in Panache TTbase what's wrong?\"\n"
msgstr "*Emmanuel* : あなたがそれを理解している間に、アントニーに質問がありました。\"おいギャング、Panache TTbaseに保存されたアップデートが見つからない _ん_ だが、どうしたんだ?\""

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:252
#, fuzzy
msgid "So it's a joke because Antony is a long time contributor and team member of the Hibernate before he went into the darker side of support, and then later training and certification. But it is a very good question and it's a more complex than one could think, there is an open issue, but I suppose let's keep that question for later in a specific Panache presentation that would be probably a good to exchange."
msgstr "Antonyは長い間Hibernateの貢献者であり、チームメンバーでもありましたが、彼がサポートの暗黒面に入り、その後トレーニングや認定を受ける前は、冗談のようなものでした。しかし、それは非常に良い質問であり、それは1つが考えることができるよりも複雑であり、未解決の問題がありますが、私はおそらく交換するのが良いだろう特定のPanacheのプレゼンテーションで後でのためにその質問を保持してみましょうと仮定します。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:254
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, you probably have to break it Stephane here and get in to describe all the nitty gritty of Panache.\n"
msgstr "*ジョージオス* そうですね。ここでステファンさんに、パナシェの細かいところまで説明してもらわないといけませんね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:256
#, fuzzy, no-wrap
msgid "**Max**: So there's a new question about the constructor...\n"
msgstr "*Max* : ということで、コンストラクタについての新しい質問が...。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:258
#, fuzzy, no-wrap
msgid "**Emmanuel**: So I, yeahm is there any difference of injecting REST client in constructor instead of the instance variable?\n"
msgstr "*Emmanuel* : So I, yeahm is there is any difference of the REST client in constructor instead of instance variable?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:260
#, fuzzy, no-wrap
msgid "**Georgios**: No, there is not.\n"
msgstr "*ゲオルギオス* いいえ、ありません。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:262
#, fuzzy
msgid "I just wanted to show it because I wanted to show... Because in the CDI world or the Java EE world, whatever you wanna call it. A lot of people don't use constructor injection. That was folks for the Spring world, think that, \"Oh yeah, JavaEE doesn't have constructor injection and all that weird stuff, but it's been around forever. It's just in all tutorials and stuff, you don't see it being used that much. That's just why I want to make the point here its just working out of the box, right..."
msgstr "CDIの世界でも、Java EEの世界でも、何と呼ぼうと何でもいいので、それを見せたかっただけです。多くの人はコンストラクタ・インジェクションを使わない。Springの世界では、「JavaEEにはコンストラクタ・インジェクションはないけど、昔からあるんだ」と思っている人が多いようです。ただ、チュートリアルなどではあまり使われていません。だからこそ、ここでポイントを押さえておきたいのですが、それは箱から出してすぐに使えるということです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:264
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yeah, that's a good point, and it's all done at compile time, so there's no reflection really it's all figured out at compile time. And we generate the right class to actually populate those either constructor or the setter and getter.\n"
msgstr "*Emmanuel* : ええ、それが良い点です。コンパイル時にすべての処理が行われているので、反映はありません。コンストラクタ、セッター、ゲッターのいずれかを実際に実装するための適切なクラスを生成しています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:266
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, that's a huge differentiator.\n"
msgstr "*ジョージオス* ええ、それが大きな差別化要因になっています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:268
#, fuzzy
msgid "So getting back to the test, I should actually get to work up. The assertion, was failing it was saying that the name wasn't great and that was my fault 'cause I didn't have getters hopefully now, but I should get everything working."
msgstr "テストに戻って、私は実際に動作するようにしなければなりません。アサーションが失敗していたのは 名前が良くなかったと言っていました それは私のせいです '今はうまくいけばゲッターを持っていなかったからですが、すべてを動作させる必要があります。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:270
#, fuzzy
msgid "Pretty sure I will. All right, yeah, everything's working. So as a super easy thing to do, I just wrote a REST client here. And I verified that it works, but what we were hearing from everybody was like, \"Oh yeah, you know what, that's cool, but... And a lot of times I wanna mock this out. I don't want to hit the real service. And that's a very, very."
msgstr "そうするよ分かった、ええ、全てうまくいったわ超簡単な事として、ここにRESTクライアントを書きました動作することを確認しましたが、みんなから聞いていたのは、「ああ、そうだね、それはいいね、でも...そして、何度もこれを真似したくなるんだ。本当のサービスを叩きたくないんです。と、それはとても、とても。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:272
#, fuzzy, no-wrap
msgid "**Max**: Just two things: I saw, I think ____ Or you couldn't put regress client on this, right? Instead of putting it on a injection.\n"
msgstr "*マックス* :2つだけ。私が見たのは、私が思うに ____ または、これにregressクライアントを置くことはできませんでしたよね?インジェクションに乗せるのではなく"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:274
#, fuzzy, no-wrap
msgid "**Georgios**: Oh yeah, I should have, yeah, actually I usually... Yeah, I registered clients ____ you're right.\n"
msgstr "*ゲオルギオス* ああ、そうだな、そうだな、実はいつもは... ああ、顧客を登録していたんだが _..._"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:276
#, fuzzy, no-wrap
msgid "**Max**: But it's equal to the same thing, right?\n"
msgstr "*マックス* :でもイコールですよね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:278
#, fuzzy, no-wrap
msgid "**Georgios**: I... Yeah, it's the same thing, is the same thing as same thing. Actually, it's a good point because I'm gonna have to update in order for the mocking to work that I'm gonna show it, I'm gonna have to update this, which is... And I would have to make it application scope. I'll explain exactly when we do that.\n"
msgstr "*ゲオルギオス* ええ、同じことです、同じことと同じことです。実際には、それは良い点ですね。モックが動作するためには、これを更新しなければなりません。その時に具体的に説明しますね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:280
#, fuzzy, no-wrap
msgid "**Emmanuel**: While you do that, I can explain a little bit, before we go into marketing. So here, so far, most of our tests have been kind of black box, so we say, \"Hey we go and connect to that URL and we do something. And what not, but Quarkus tests actually is a being inside your app, so you can literally inject other beans so you can do what I would call more like your gray box kind of test where you can inject one of the bean to do some more surgery into deciding what you wanna test, and going on. So, I suppose by side effect will show that inside mocking but I wanted to present that because even as you don't do mocking its actual a very, very useful feature set.\n"
msgstr "*Emmanuel* : その間に、マーケティングの話に入る前に、少し説明します。ここでは、これまでのところ、ほとんどのテストはブラックボックスのようなものでした。しかし、Quarkusのテストは、実際にはアプリの中に存在しています。文字通り他のBeanを注入することができるので、グレーボックスのようなテストを行うことができます。だから、私は副作用で、モッキングの中に表示されると思いますが、私はそれを提示したいと思いました あなたはモッキングをしないので、実際には非常に非常に便利な機能セットです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:282
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, exactly, so in here, yeah, we in the test, if I did this ____ on free in this country sure with object and the REST client, then that's exactly as Emmanuel was describing if I did this, I could use this inside the test anyway I wanted because exactly, like I mentioned this is a B, so we're gonna show something a little different. So we wanna mock this right, so we want in... When I do, when I hit ____, I wanna have my own thing instead of hitting the REST service. So the whole idea here is that I added Quarkus JUnit 5 Mockito which integrates Mockito in JUnit 5 with our Quarkus CDI stuff.\n"
msgstr "*ゲオルギオス* ええ、正確には、ここでは、ええ、私たちのテストでは、私は _オブジェクトとRESTクライアントを使用して確かにこの国で無料でこの_ _ を行った場合、 _それは私がこれを行った場合、それはまさにエマニュエルが説明していたように、私はこれを行う場合、私は私が望んでいたとにかくテスト内でこれを使用することができますので、正確には、私が言ったように、これはBですので、我々は少し異なる何かを表示するつもりだから _ です。これを _正しくモックしたいので、この中に...を押す _ と、RESTサービスの代わりに自分のものが欲しいと思います。Quarkus JUnit 5 Mockitoを追加して、JUnit 5のMockitoをQuarkus CDIのものと統合しました。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:284
#, fuzzy
msgid "So what you do here, when you call country service, and you would instead of inject you do inject mock, and because we need the qualifier, we'll do REST Client. Like I said, same reason, we injected the... We use the qualifier in the injection point here, this is another injection point, so we're gonna use the qualifier but now we wanna control it so this will give us a mock of country service, a mock that we can control with Mockito."
msgstr "ここで何をするかというと、国のサービスを呼び出すときに、注入の代わりにモックを注入して、修飾子が必要なので、RESTクライアントを注入します。同じ理由で注入したのですが、ここでは修飾子を使って注入していますが、ここは別の注入ポイントです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:286
#, fuzzy
msgid "That's the great part, ups, sorry... And then its, you just use Mockito the same way you've always been using it. Like I do not been using Mockito for a long time, and I always loved it and never, never thought to use any other mocking library."
msgstr "それが素晴らしいところだよ、アップス、ごめんね... それから、Mockitoをいつも使ってきたのと同じように使うんだ。私は長い間Mockitoを使っていませんでしたが、ずっと気に入っていて、他のモッキングライブラリを使おうと思ったことは一度もありませんでした。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:288
#, fuzzy
msgid "So what I would do here, like I do Mockito when country service getByName please. And I would say, then the return collection ____ and let's say new country, and instead of Greece let's say ____ And ____ So now what I've done here is basically country service will be the mock and it will replace the regular CDI bean, but only for this task. And that's a very important part that this test will continue to use the regular external URL when we're hitting this test here is the only one that's gonna use the mock and that's really what mocks are for, like per test, let's say, alteration of your application."
msgstr "ここで何をするかというと、Mockitoと同じように、国別サービスが getByNameをお願いします。そして、戻り値のコレクションを __ とし、新しい国としましょう、ギリシャの代わりに、 And _ としましょう _ 。これは非常に重要な部分で、このテストは通常の外部URLを使い続けるということです。このテストを実行しているとき、モックを使うのはここだけです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:290
#, fuzzy
msgid "So if I go here, I expect to get ____ and I..."
msgstr "だから、ここに行けば、 _○○_ を期待して、私は・・・。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:292
#, fuzzy, no-wrap
msgid "**Max**: That's probably a good what you run it. Just be clear that inject mock is actually a Quarkus annotation, right?\n"
msgstr "*Max* : それはおそらくあなたがそれを実行することは良いことです。ただ、inject mockは実際にはQuarkusのアノテーションであることを明確にしておきましょう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:294
#, fuzzy, no-wrap
msgid "**Georgios**: yes, yes exactly. I open imports here, it's quarkus.test.junit5.mockito.inject.mock And now it's failed, and I wanted it to fail because I need to explain why wait in this inject mock thing works. So inject mock works on normal scope CDI beans. Normal scope CDI beans are usually either application scope or request scope.\n"
msgstr "*Georgios* : はい、はい、はい、その通りです。インポートを開くと quarkus.test.junit5.mockito.inject.mock で失敗しました。ということで、inject mockは通常のスコープのCDI Beanで動作します。通常のスコープのCDI Beanは、アプリケーションスコープかリクエストスコープのどちらかです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:296
#, fuzzy
msgid "So, the Microprofile spec defines that when you create a REST client like this, and you don't define a CDI scope that it's dependent, it's the dependent scope which practically means that in every injection point, you get a new instant self this country service, and that doesn't allow us to create... it doesn't allow us to create a mock because it's already a JDK dynamic proxy and Mockito can't already mock dynamic. So we have to do... We have to make this an application. So, by making this application scope this inject mock here will work and when I do and being clean test again, I should see all my tests passing now and they all pass."
msgstr "Microprofile の仕様では、このような REST クライアントを作成する際に CDI スコープを定義していない場合、依存性のあるスコープを定義する必要があると定義されています。だから、これをアプリケーションにしなければなりません。だから、このアプリケーションスコープを作ることで、この注入モックが機能するようになります。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:298
#, fuzzy, no-wrap
msgid "**Emmanuel**: Somehow couldn't we or ____ detect that hey, it's dependent scope. But then in some tests we wanna do a mock. So let's actually have some sort of fake different scope.\n"
msgstr "*Emmanuel* : どうにかして、私たちや ____ が検出することができませんでした......おい、それは依存するスコープです。しかし、いくつかのテストではモックを行いたいと思っています。そこで、実際にある種の偽の別のスコープを作ってみましょう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:300
#, fuzzy, no-wrap
msgid "**Georgios**: Yes, I got a... Basically, we discuss this with Steward and Martin and... Yeah, what we're thinking is that we have some kind of bit code transformer that will be used and when you have this kind of inject mock thing, that will be used in it will alter the code of... Of the country service itself to actually take the mock into account. So that's something that... That we'll probably do sometimes soon...\n"
msgstr "*ゲオルギオス* スチュワードやマーティンと話し合って... 我々が考えているのは ビットコード変換器を使って 模擬を注入して...それが何かというと..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:302
#, fuzzy, no-wrap
msgid "**Emmanuel**: Okay, awesome. So we are 22 minutes before we end, so just a checkmark.\n"
msgstr "*エマニュエル* : オーケー、最高だよ。終了まであと22分ですので、チェックマークをつけておきましょう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:304
#, fuzzy, no-wrap
msgid "**Georgios**: Okay, good. One more thing about the mock. So let's say I do since I'm using Mockito, Mockito by default, when you don't define something, or turn a default response.\n"
msgstr "*ジョージオス* よし いいぞモックについてもう一つ。私はMockitoを使っているので そうするとしましょう Mockitoはデフォルトで何かを定義しないと デフォルトのレスポンスになってしまいます"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:306
#, fuzzy
msgid "So if I do like country France and since I have it mocked, I haven't told it what to do for France. What it will do is, it will return an empty list. So that's just a Mockito thing I wanted everybody to be aware of."
msgstr "だから私は国フランスのような場合と私はそれを嘲笑しているので、私はそれを言っていないフランスのために何をすべきか。何をするかというと、空のリストを返します。だから、モッキートのことをみんなに知ってもらいたかったのです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:308
#, fuzzy, no-wrap
msgid "**Emmanuel**: I just... I wanted to clarify, to Igor. This problem with the mock that cannot be the dependent type that cannot be mocked. So the workaround is to use application scope on your service, and that will be the workaround right now until we have a proper solution inside Quarkus, but that works actually that should have been application scope most likely anyways.\n"
msgstr "*エマニュエル* :私はただ...はっきりさせたかったのです、イゴールさんに。この問題は、モックすることができない依存型にすることができないモックの問題です。だから、回避策は、あなたのサービスでアプリケーションスコープを使用することです、そしてそれは、私たちがQuarkusの内部で適切なソリューションを持っているまで、今すぐに回避策になりますが、それは実際に動作します、それは可能性が最も高いいずれにせよ、アプリケーションスコープでなければならなかったはずです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:310
#, fuzzy, no-wrap
msgid "**Georgios**: Yes exactly, yeah the only reason it wasn't is the spec defines that it should be dependent scope by default. Otherwise, I would have just made it application scope.\n"
msgstr "*Georgios* .そうですね、そうですね、そうではなかった唯一の理由は、仕様上、デフォルトでは従属スコープであるべきだと定義されているからです。そうでなければ、アプリケーションスコープにしていたでしょう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:312
#, fuzzy, no-wrap
msgid "**Max**: So, we got another one. Georgio. Wanna take that, Emmanuel? How to mock REST client?\n"
msgstr "*マックス* :では、別のものを手に入れた。ジョルジオ:エマニュエル、それを取るか?RESTクライアントをモックするには?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:314
#, fuzzy, no-wrap
msgid "**Emmanuel**: How do I mock REST client test object to throw a 500 exception, http 500, but not using Mockito on his Quarkus annotation @mock and Eclipse Microprofile register client?\n"
msgstr "*Emmanuel* :どのように私は500例外、http 500を投げるためにRESTクライアントのテストオブジェクトをモックしますが、彼のQuarkusアノテーション@mockとEclipse Microprofile登録クライアント上のMockitoを使用していませんか?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:316
#, fuzzy, no-wrap
msgid "**Georgios**: I don't think you can... Like with a mock, right?\n"
msgstr "*ゲオルギオス* 模擬戦みたいなのは無理だと思いますよ?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:318
#, fuzzy
msgid "I don't think you can mock it to tail it, to return a 500. Well, what you can always do with Marketo is to tell it to throw an exception, but through annotations is... I don't think you can do that. I don't have anything, I can't recall of anything but I would argue that if you were going to test something like that, you probably want to do what I wanna do now."
msgstr "500を返すように仕向けることはできないと思います。まあ、Marketoでいつでもできることは例外を投げるように指示することですが、アノテーションを介して... それはできないと思います。私は何も持っていませんし、何も思い出せませんが、もしあなたがそのような何かをテストしようとしているのであれば、おそらく私が今したいことをしたいのではないかと思います。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:320
#, fuzzy
msgid "Oh, which is to actually use, to have the... Not mock the REST client, but to mock the external service."
msgstr "RESTクライアントをモックするのではなく、外部サービスをモックするのです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:322
#, fuzzy
msgid "So, what I planned to show now is that we continue to use the regular REST client, but instead of using the external rest countries service that I was using, I want to start a service like a proxy let's say, that will intercept all the request to that service and in there, I can make it return 500, I can make it return 404, I can make it return any kind of error I want in order to test my actual integration. So in my view, that would be the proper way to test like http errors."
msgstr "そこで、私が計画していたのは、通常のRESTクライアントを使い続けますが、使用していた外部の国別サービスの代わりに、例えばプロキシーのようなサービスを起動して、そのサービスへのすべてのリクエストをインターセプトして、500を返したり、404を返したり、任意の種類のエラーを返したりして、実際の統合をテストしたいと思います。私の考えでは、これがhttpエラーのようなテストをするための適切な方法だと思います。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:324
#, fuzzy, no-wrap
msgid "**Emmanuel**: That also answers ____ sorry about butchering our first name, which is... Inject mock is grateful functionality test, but is there a way to verify that the correct annotations are used on the REST client and that would be exactly that. So you would have your server being a custom one and you redirect to that server and then you can run the properties, with the REST client in a fully control environment.\n"
msgstr "*Emmanuel* : これも答えになっています _。_ インジェクトモックはありがたい機能性テストですが、正しいアノテーションがRESTクライアントで使用されているかどうかを確認する方法はありますか?あなたのサーバーをカスタムサーバーにして、そのサーバーにリダイレクトして、完全に制御された環境でRESTクライアントでプロパティーを実行することができます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:326
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, I think that's the best way to test the end to end integration. That's what I'm gonna do.\n"
msgstr "*ジョージオス* ええ、エンド・ツー・エンドの統合をテストするにはそれが一番いい方法だと思います。私もそうしようと思っています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:328
#, fuzzy
msgid "Okay, so let's go like country service. If we do create a test to country service, this would be a Quarkus test and I'll say ____."
msgstr "それでは、国のサービスのように行ってみましょう。カントリーサービスへのテストを作成する場合、これはQuarkusのテストになりますので、私は ____ と言います。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:330
#, fuzzy
msgid "And I say, country service, inject client. Not the Junit assertions, I want the AssertJ assertions, are for that country service."
msgstr "そして、私は、国のサービスは、クライアントを注入すると言います。Junitのアサーションではなく、AssertJのアサーションが欲しいのですが、その国のサービスのためのものです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:332
#, fuzzy
msgid "____ Unaudible typing! ! ____. So this test, I haven't been adding anything special to this test yet. I just wanted to set it up to show you that, what we're gonna do here is that we're gonna use the country service, but we're gonna hit an external end point that will be controlled by us. Once I said once I get this going..."
msgstr "_\"私たちは、このような状況下では、何をしているのでしょうか?!_ _ .このテストは、まだ何も追加していません国のサービスを使いますが、外部のエンドポイントにアクセスして制御します一度言っておいたが、これを起動したら..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:334
#, fuzzy
msgid "I passed the test... Now, we're gonna introduce one more concept that is specific to Quarkus, then we're gonna use WireMock in order to demonstrate."
msgstr "合格しました... さて、もう一つQuarkus特有の概念を紹介してから、WireMockを使ってデモをしていきます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:336
#, fuzzy
msgid "So like Emmanuel said earlier, we run, we boot Quarkus once and then we run all the tests, against it. And what that means is that when you want to do something before you boot Quarkus you need as a developer, you need an integration point."
msgstr "先ほどEmmanuelが言ったように、Quarkusを一度起動して、それに対してすべてのテストを実行します。つまり、Quarkusを起動する前に何かをしたい場合は、開発者として統合ポイントが必要になります。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:338
#, fuzzy
msgid "Well, the Quarkus test resource is that integration point that you're looking for."
msgstr "まあ、Quarkusのテストリソースは、あなたが探している統合ポイントです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:340
#, fuzzy
msgid "So wiremock contries... So I gotta create such an integration point or what I'm planning to do is now I'm planning to create a WireMock server where I mock, I set up basically the endpoints that I care about, and our test is actually gonna hit that server. How we do that? So we... We at this Quarkus test annotation test resource annotation we create a class that implements this Quarkus test resource lifecycle manager."
msgstr "そのためには、このような統合ポイントを作成する必要があります。どうやって?Quarkusのテストアノテーションテストリソースアノテーションで、Quarkusのテストリソースライフサイクルマネージャーを実装したクラスを作成します。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:342
#, fuzzy
msgid "The stuff we care about, the methods with care. Are in here, or start which basically is the method that Quarkus calls back into the Quarkus test calls back into before it launches the Quarkus application, and what it returns is a set of properties that's runtime properties that Quarkus, That will affect how Quarkus runs. This call is when Quarkus finishes, all the tests finish. So what we do here is a WireMock server."
msgstr "私たちが気にしていること、気にしているメソッドはここにあります。これは基本的にQuarkusがQuarkusアプリケーションを起動する前にQuarkusテストを呼び出すメソッドで、Quarkusが返すのは、Quarkusの実行時のプロパティーのセットです。この呼び出しは、Quarkusが終了すると、すべてのテストが終了します。ここでは、WireMockサーバーを使用しています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:344
#, fuzzy
msgid "WireMock server = new WireMockServer ____;"
msgstr "WireMock server = new WireMockServer ___._"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:346
#, fuzzy
msgid "server.start ____;"
msgstr "server.start ___._"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:348
#, fuzzy
msgid "And now, since we're actually kinda running out of time, I just gonna copy&paste the actual mocking part."
msgstr "もう時間がないので実際にコケた部分をコピーして貼り付けます"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:350
#, fuzzy
msgid "I copied it from the stuff that I have already. And we'll share with you being in the presentation so you can follow along. I'm gonna make this a Java 14, I'm on 14 now. I also have to..."
msgstr "私はすでに持っているものからそれをコピーしました。そして プレゼンに参加しているあなたと共有するので フォローできるようにしておきますこれをJava14にしようと思っています、今は14にしています。また、私は..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:352
#, fuzzy, no-wrap
msgid "**Emmanuel**: You wanna use the multi line, the the text which is.\n"
msgstr "*Emmanuel* : あなたは複数の行を使用したい場合は、テキストを使用しています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:354
#, fuzzy, no-wrap
msgid "**Georgios**: Exactly exactly, that's exactly what I wanna use because as I hate writing JSON inside the little... , the regular Java stuff is just terrible.\n"
msgstr "*ジョージオス* まさにその通り、それはまさに私が使いたいものです。 なぜなら、私は小さな...中にJSONを書くのが嫌いなので、通常のJavaのものはひどいものです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:356
#, fuzzy
msgid "So in order to do that, I need to enable some previews stuff."
msgstr "そのためには、いくつかのプレビューを有効にする必要があります。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:358
#, fuzzy
msgid "So, Maven compile... This stuff isn't actually important for the actual test, but it's cool to see, show with Quarkus we have all the... all the flexibility to do anything you're used to with Maven, or whatever to a..."
msgstr "これは実際のテストでは重要ではありませんが、Quarkusを使うことで、Mavenで慣れていることであれば何でもできる柔軟性があることを示すことができます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:360
#, fuzzy, no-wrap
msgid "**Emmanuel**: So it works with Java 14?\n"
msgstr "*Emmanuel* : Java 14で動作するんですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:362
#, fuzzy, no-wrap
msgid "**Georgios**: Oh yeah, absolutely, absolutely.\n"
msgstr "*ジョージオス* そうそう、絶対に、絶対に。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:364
#, fuzzy
msgid "It doesn't work with records just yet, but we have a PR ready for that, so it should be working very soon."
msgstr "まだレコードでは動かないんですが、そのためのPRが用意されているので、すぐに動くはずです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:366
#, fuzzy, no-wrap
msgid "**Max**: So you basically show what people can use in like four or five years in the production, so to...\n"
msgstr "*マックス* :基本的には、4、5年の制作期間で使えるものを見せているわけですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:368
#, fuzzy, no-wrap
msgid "**Georgios**: No, no, they can use it right now.\n"
msgstr "*ゲオルギオス* いや、いや、今すぐにでも使える。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:370
#, fuzzy, no-wrap
msgid "**Emmanuel**: Quarkus goes very well with the production, guys.\n"
msgstr "*エマニュエル* Quarkusは演出と相性がいいんだよ、みんな。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:372
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, why not? So I have to enable preview both to compile and for surefire while running otherwise it will work, and I have to tell IntelliJ to use it causes not smart enough to figure out how I configure it.\n"
msgstr "*ジョージオス* ええ、なぜですか?だから、コンパイル時にプレビューを有効にしなければならないし、実行中にfirmfireを有効にしなければ動作しないし、IntelliJにそれを使うように言わなければならないし、どうやって設定するかを理解するほど賢くないからだ。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:374
#, fuzzy
msgid "So basically what I'm doing here is that I was subbing out the... the end point that this method is looking for and I'm saying when you see \"gr\" don't return the regular green stuff, but return the same name, angry. So I'm actually just actually wrote Greek. And the other thing I did is that here, I told it to forward all the stuff that didn't match here, I told it to forward to the actual, actual service and I need to do one more thing to get this working I need to tell Quarkus to use this actual, this server."
msgstr "基本的に私はここで何をしているのかというと... この方法が探している終着点と \"gr\"を見たときに言っています 通常の緑のものを返すのではなく 同じ名前を返しています 怒っていますだから実際にギリシャ語で書いてみましたそしてもう一つは、ここでは一致しないものを全て転送するように言いました。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:376
#, fuzzy
msgid "So, this serverm, once it started, it'll start at some URL, some port... I don't know which, but don't really care because all I have to do in order to make the country service work, I need to tell it where the URL is, but wiremock base URL gives me that information. So what this does is that it overrides the property that I have here, which is the default. Let's say this gets overridden by when I start here, because like I said, these properties that are returned by start or runtime properties that override, what's in application properties."
msgstr "このサーバーは、一度起動すると、URLやポート...どれかで起動します。国別サービスを動作させるためには、URLの場所を教える必要がありますが、ワイヤーモックのベースURLはその情報を教えてくれます。これはデフォルトのプロパティーを上書きします。このプロパティーは、起動時にオーバーライドされます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:378
#, fuzzy, no-wrap
msgid "**Emmanuel**: One of the question is, Is there a doc somewhere that goes into details at everybody's own pace, that's a lot of information that.\n"
msgstr "*エマニュエル* :一つの疑問は、どこかに、みんなのマイペースで詳細に突っ込んでいくドクがあるのか、それは情報量が多いということです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:380
#, fuzzy, no-wrap
msgid "**Georgios**: Yes, I know, no, because I just came up with this when I was preparing for this.\n"
msgstr "*ゲオルギオス* はい、そうですね、いや、これは準備をしているときに思いついたことなので。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:382
#, fuzzy, no-wrap
msgid "**Emmanuel**: There you go YouTube like driven features.\n"
msgstr "*エマニュエル* :そこにあなたはYouTubeのような駆動機能を行く。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:384
#, fuzzy, no-wrap
msgid "**Max**: The feature is there it's just the example is new.\n"
msgstr "*Max* : 機能はそこにありますが、例が新しいだけです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:386
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, I need to write down the example. Yeah, because this is a lot of information that it's not...\n"
msgstr "*ゲオルギオス* うん、例を書いておかないと。ええ、これは情報量が多いので、それはそれで"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:388
#, fuzzy, no-wrap
msgid "**Max**: Once you're done here, take this code and commit into a repo and push it, then we can go.\n"
msgstr "*Max* : ここでの作業が終わったら、このコードをレポにコミットしてプッシュしてください。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:390
#, fuzzy, no-wrap
msgid "**Georgios**: I've already done that I'll share once this is done, I'll show you the URL.\n"
msgstr "*ゲオルギオス* です。これが終わったら共有します、URLをお見せします、ということはすでにやっています。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:392
#, fuzzy, no-wrap
msgid "**Max**: What's the thing that... Like this start? What was the thing that made it whats the thing that made that being picked up? The lifecycle manager?\n"
msgstr "*マックス* :何がきっかけで・・・このスタートみたいな?何をしていたかというと...何をしていたかというと...ライフサイクルマネージャー?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:394
#, fuzzy, no-wrap
msgid "**Georgios**: Yes, the Quarkus test resource and it picks up these life cycle managers and I could have multiple lifecycle managers, I have one for database or whatever and they all run before Quarkus starts. That's the important part. They run before Quarkus starts and they can override runtime properties.\n"
msgstr "*Georgios* .Quarkusのテストリソースは、これらのライフサイクルマネージャーをピックアップします。複数のライフサイクルマネージャーを持つことができます。これが重要な部分です。これらはQuarkusが起動する前に実行され、ランタイムプロパティーをオーバーライドすることができます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:396
#, fuzzy, no-wrap
msgid "**Max**: Very cool. So I was wondering about that.\n"
msgstr "*マックス* :とてもかっこいいですね。だから気になっていたんです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:398
#, fuzzy, no-wrap
msgid "**Emmanuel**: We have 10 minutes left, we haven't showed the test containers, which is one of the questions we had. So let's go do that.\n"
msgstr "*エマニュエル* :残り10分ですが、質問の一つである試験容器を見せていません。では、それをやってみましょう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:400
#, fuzzy, no-wrap
msgid "**Georgios**: Yes, yes let's do that really quick okay. So, I stay ____ and going to test containers, I wanna copy paste the dependencies from here, I need to get to to do, let's see, okay.\n"
msgstr "*ジョージオス* はい、はい、はい、すぐにやってみましょう。だから、私は ____ に滞在し、コンテナーをテストするために行く、私はここから依存関係をコピーして貼り付けたい、私はするために取得する必要があります、見てみましょう、大丈夫です。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:402
#, fuzzy, no-wrap
msgid "**Emmanuel**: ____ this is getting awkward.\n"
msgstr "*エマニュエル* _: ___ 気まずくなってきた。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:404
#, fuzzy
msgid "Test containers for information for people that don't know is... Well, it's a way to start from your, to control by your test life cycle, starting a set of resources inside a Docker container, on the same machine. And maybe on other machines like I don't quite know, but the idea is you control the Docker start and stop of a database or JMS queue, or whatever you want to run your integration test. That's very, very useful for that."
msgstr "知らない人のための情報のためのテストコンテナーとは... これは、テストのライフサイクルを制御して、同じマシン上でDockerコンテナー内のリソースを起動することから始める方法です。他のマシンにも使えるかもしれませんが、データベースやJMSキューなど、統合テストを実行するためのリソースをDockerで起動したり停止したりするのを制御することができます。これはとても便利ですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:406
#, fuzzy, no-wrap
msgid "**Georgios**: Absolutely, absolutely. Yeah, we get that question a lot. So we really need to show this. So I just copy&pasted the Hibernate Panache ORM dependency, postgresql driver.\n"
msgstr "*ジョージオス* 絶対に、絶対に。ええ、私たちはその質問をよく受けます。だから、これを見せる必要があります。そこで、Hibernate Panache ORMの依存関係、postgresqlドライバーをコピー&ペーストしました。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:408
#, fuzzy
msgid "Oh, well, probably Panache, mock out for later. So you can talk about that when you have Stephane on the show. Since this is a feature coming in 1.5, it's not in yet."
msgstr "まあ、たぶんパナシェ、後でモックアウトするんだろうな。この件については、Stephaneが出演している時に話しましょう。これは1.5で予定されている機能なので、まだ入っていません。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:410
#, fuzzy
msgid "Okay, so let's go create an entity \"route\". So that entity ____."
msgstr "それでは、エンティティー「ルート」を作成してみましょう。ということで、そのエンティティー ___。_"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:412
#, fuzzy, no-wrap
msgid "**Emmanuel**: And here's a good one. So, Antonio sais: what about debugging your test? I find it cumbersome to attache the debugger in IntelliJ, I think I see... Yeah, that's for the test, okay, put it in on. It's not... ____ any applications running any testing running in IntelliJ to run the plain Java application from IntelliJ and attach the debugger... Now that we have the command mode that's much easier. I don't know about test like what would you...\n"
msgstr "*Emmanuel* : そして、ここに良いものがあります。だから、アントニオはサイス:あなたのテストのデバッグはどうですか?IntelliJでデバッガーをアタッチするのは面倒だと思います、私は見ています...ええ、それはテストのためのものです、オーケー、それをオンに入れてください。それは _...___ IntelliJからプレーンなJavaアプリケーションを実行して、デバッガーをアタッチするのは、IntelliJで実行している任意のアプリケーションのテストではありません... 今はコマンドモードがあるので、はるかに楽になりました。私はあなたが何をするようなテストを知らない..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:414
#, fuzzy, no-wrap
msgid "**Georgios**: This will work if I do this, let me hit, okay, I'm at Country service, if I go to country resource like yeah.\n"
msgstr "*ジョージオス* これは、私がこれを行う場合は、私がヒットさせて、大丈夫、私は国のサービスにいる場合は、私は国のリソースに行く場合は、ええのように動作します。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:416
#, fuzzy, no-wrap
msgid "**Max**: If you're in a test just click that debug in anything.\n"
msgstr "*Max* : テスト中の場合は、何でもいいからデバッグをクリックしてください。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:418
#, fuzzy, no-wrap
msgid "**Georgios**: ____ you don't work well now I've had it a bunch, of dependencies, but yeah, I got this thing. A regular testing out delete anyway, so let's say I did this now I have all the Hibernate stuff inside, let me take-out Hibernate, so I then... So the.\n"
msgstr "*ゲオルギオス* 今はうまく動作していません _、_ 依存関係の束を持っています、しかし、ええ、これを手に入れました。定期的に削除をテストしていて、Hibernateの中身を全部持っていて、Hibernateを取り出すことができたとすると、それで..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:420
#, fuzzy, no-wrap
msgid "**Max**: Are you trying, just to add the test containers on top or what are your...\n"
msgstr "*Max* : テストコンテナーを上に追加したり、何をしようとしているのですか?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:422
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, I was, I was starting the test containers thing. Yeah, exactly, but now I wanna show the actual debug...\n"
msgstr "*ジョージオス* ええ、テストコンテナーを始めたところです。ええ、その通りですが、今は実際のデバッグを見せたいと思います..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:424
#, fuzzy
msgid "See, debugging works just like any other Java application JUnit test, it'll work because the idea, it works because it's in the same JVM, I mean the test runs inside the same, the application and the test run inside the same JVM."
msgstr "ほら、デバッグは他のJavaアプリケーションのJUnitテストと同じように動作します、それはアイデア、それが同じJVM内にあるので、動作します、つまり、テストは同じ、アプリケーションとテストは同じJVM内で実行されます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:426
#, fuzzy
msgid "So debugging, just works."
msgstr "デバッグはうまくいく"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:428
#, fuzzy
msgid "What is a little cumbersome at the moment is dev mode inside the IDE. So with dev mode the easiest way to do it is you do mvn quarkus: dev and then you attach a remote debugger later on."
msgstr "今のところ少し面倒なのはIDE内の開発モードです。そのため、開発モードを使う最も簡単な方法はmvn quarkus: devを実行して、後でリモートデバッガーをアタッチすることです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:430
#, fuzzy
msgid "And most people are used to that work flow because they're used to running their java-jar from the IDE or wherever, all the time. But with Quarkus dev mode, it's a little different."
msgstr "ほとんどの人は、IDEなどからjava-jarを常に実行することに慣れているので、このワークフローに慣れています。しかし、Quarkusの開発モードでは少し違います。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:432
#, fuzzy
msgid "You just start it on the command line, you forget about it and you attach a remote debugger."
msgstr "コマンドラインで起動して、忘れてリモートデバッガーをアタッチするだけ。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:434
#, fuzzy
msgid "And that's how I..."
msgstr "そうやって私は..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:436
#, fuzzy, no-wrap
msgid "**Max**: So I just... You to add to that, VS code actually does it when you do, it sets up a default launch, the you press F5, it will start quarkus dev and connect a debugger for you, so you don't... And I didn't actually realize this until Fred told me that its so lightweight and I think we've got... I wanna see that we have the same thing to IntelliJ and Eclipse... 'cause it's just, it's nice 'cause I...\n"
msgstr "*Max* : それに加えて、VS のコードは、デフォルトの起動を設定して、F5 を押すと quarkus dev を起動し、デバッガーを接続してくれるので、そうする必要はありません...そして、フレッドがこれはとても軽量で、私たちが持っていると思います...私は、IntelliJ と Eclipse にも同じことができるようにしてほしいと思っています...それは、私はそれでいいと思います..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:438
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, it's awesome 'cause people expect it to work, they don't understand that it's not obvious, like when you start Quarkus dev mode then a different process starts and that's the process you have to connect the debugger to. Yeah, it's not exactly obvious. So yeah, having... That would be great IntelliJ as well.\n"
msgstr "*Georgios* .人々はそれが動作することを期待していますが、明らかではないことを理解していません。例えば、Quarkusの開発モードを起動すると、別のプロセスが開始され、それがデバッガーに接続するプロセスになります。そうですね、はっきりとはわかりません。IntelliJも素晴らしいですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:440
#, fuzzy, no-wrap
msgid "**Emmanuel**: Alright, let's go back to test containers.\n"
msgstr "*エマニュエル* :よし、テストコンテナーに戻ろう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:442
#, fuzzy, no-wrap
msgid "**Georgios**: Yes, yes, yes, I... Let's finish that up. So, fruit resource I can, I created a fruit entity. With Panache I obviously don't have to write almost any code, so everything will just work out of the box. So, I go public List fruit.\n"
msgstr "*ゲオルギオス* はい、はい、はい、最後までやってみましょう。それで、フルーツリソースができるので、フルーツの実体を作りました。Panacheを使えば、コードを書く必要はほとんどありません。それで、フルーツを公開してみましょう。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:444
#, fuzzy, no-wrap
msgid "**Emmanuel**: By the way, we should have even less code at some points in the near future, so just as a teaser... From a resource talking to Panache entity.\n"
msgstr "*Emmanuel* : ところで、近い将来、いくつかの時点でさらに少ないコードを持っているはずなので、お誘いとして... Panacheエンティティーと話しているリソースから。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:446
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, you know what's coming.\n"
msgstr "*ジョージオス* ああ、何が起こるか分かってるな。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:448
#, fuzzy, no-wrap
msgid "**Emmanuel**: I don't know when, that's the problem... I live in the future.\n"
msgstr "*エマニュエル* :いつになるかわからない、それが問題なんだよ...私は未来に生きているんだから。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:450
#, fuzzy, no-wrap
msgid "**Georgios**: The PR I think, is pretty much raised. Stephane is reviewing it but we should be close. Ahhh fruit listAll... Okay, so this will just list all... And I now I need to do create fruit resource test... And this would be a Quarkus test and now when I add a different test resource, a Quarkus test resource. So I need to start the database before Quarkus starts, right?\n"
msgstr "*ゲオルギオス* PRはかなり上がっていると思います。ステファンがレビューしていますが、もうすぐです。フルーツリソースのテストを作成する必要があります...これはQuarkusのテストで、別のテストリソースを追加すると、Quarkusのテストリソースが作成されます。Quarkusが起動する前にデータベースを起動する必要がありますよね?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:452
#, fuzzy
msgid "So if I go here, and d test containers, database.class, create a class then again will be a Quarkus resource manager, and since we don't have much time I'm gonna copy&paste it."
msgstr "だから私はここに行けば、dのテストコンテナー、dのテストコンテナー、database.class、クラスを作成し、再びQuarkusリソースマネージャーになります、と我々はあまり時間がないので、私はそれをコピー&ペーストするつもりです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:454
#, fuzzy
msgid "So what it does here basically is I'll write this real quick and then explain what does... So the idea is, the resource with a test resource lifecycle manager will start a it'll start a test containers postgress skill database."
msgstr "これは基本的に何をするのかというと、テストリソースのライフサイクルマネージャーを持つリソースが、テストコンテナーのpostgressスキルデータベースを起動するというものです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:456
#, fuzzy
msgid "So here I've told it version 11.7 with database name, username, password, thats just some simple defaults and the important part here that start, I start the database, and then I define the Quarkus runtime properties, so that would be the data source runtime properties. That be the user name, the password in the URL and just like WireMock did same way post the test containers gives me a JDBC URL that I can just use."
msgstr "ここではバージョン11.7とし、データベース名、ユーザー名、パスワードを指定していますが、これは簡単なデフォルト値です。これがデータソースのランタイムプロパティーになります。ユーザー名とパスワードをURLに入れて、WireMockが同じようにテストコンテナーを投稿したのと同じように、JDBCのURLを指定して使用することができます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:458
#, fuzzy
msgid "So this way I just, I don't have to configure anything with darker and pom.xml or have a Docker container, running anywhere other way I just integrated with Quarkus test containers and it'll just work. I need to fix a few more things to make this work out of the box, the, this is the test specific that I'm telling it, it's a database, Postgress databas, drop and create the database for the test. I'm gonna seed the database but some data and you just... So, fruit and I need to copy like let's say this that because the..."
msgstr "この方法では、darkerとpom.xmlで何かを設定する必要はありませんし、Dockerコンテナーを持っている必要もありません。これをすぐに動作させるためには、もう少し修正する必要がありますが、これは私が言っているテスト固有のもので、データベース、Postgress databasをドロップして、テスト用のデータベースを作成します。私は、データベースをシードするつもりだが、いくつかのデータとあなただけ... だから、果物と私はコピーする必要があるので、このように言うことができます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:460
#, fuzzy, no-wrap
msgid "**Max**: That is just using test containers? And I guess the only thing I had to do is used a wiring up with the Quarkus test resource.\n"
msgstr "*マックス* :それはテストコンテナーを使っているだけなんですね。で、Quarkusのテストリソースを使って配線しただけなんですね。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:462
#, fuzzy, no-wrap
msgid "**Georgios**: Yes, exactly, Yeah, to start test containers before Quarkus starts.\n"
msgstr "*ゲオルギオス* はい、正確には、ええ、Quarkusが始まる前にテストコンテナーを開始するために。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:464
#, fuzzy
msgid "So this should be always plain. I seeded the database with three fruits and that's why in my test I said that I'm expecting three... I'm definitely... Okay..."
msgstr "だからこれは常にプレーンであるべきです。データベースに3つの果物を種付けしました だからテストでは3つの果物を期待していると言ったのですが・・・ 私は間違いなく・・・わかった・・・。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:466
#, fuzzy, no-wrap
msgid "**Max**: Java 14...\n"
msgstr "*最大* :Java 14..."

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:468
#, fuzzy, no-wrap
msgid "**Georgios**: So sdk man, I totally endorse it as the way to use Java 14. and now just running again and let's see. So, test containers starting here, we saw it did we started, test passed and it was not easy, right? So you saw it... All I need is a test resource start the database on the important thing is to set the property, the runtime properties, I need and it just works.\n"
msgstr "*ゲオルギオス* sdkマン、Java 14の使い方としては全面的に支持するよ。で、ここでテストコンテナーを起動してみたんだけど、起動してみて、テストがパスして、簡単にはいかなかったよね?だから、あなたはそれを見ました...私が必要とするのは、テストリソースを起動し、データベース上で重要なのは、プロパティーを設定することですが、実行時のプロパティーは、私が必要とし、それだけで動作します。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:470
#, fuzzy, no-wrap
msgid "**Emmanuel**: So just quickly taking the ____ sdkman.io and it's a way to select the Java you want and a few other things.\n"
msgstr "*Emmanuel* : だからすぐに ____ sdkman.ioを取って、それはあなたが欲しいJavaと他のいくつかのものを選択する方法です。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:472
#, fuzzy
msgid "You got a bunch of options here, but if you jumped from one JDK to another, the GraalVM one or just hte non-GraalVM one. A very useful tool."
msgstr "ここにはたくさんのオプションがありますが、あるJDKから別のJDKにジャンプした場合、GraalVMのもの、またはGraalVMではないものだけを選択することができます。非常に便利なツールです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:474
#, fuzzy
msgid "You also show the test containers. And I wanted to show that it's not limited to databases you've got quite a bunch of other things like Kafka, elastic search, ____ etcetera, etcetera. So that's quite good. And integrate with JUnit 5, which is the one thing we're using right now, so that's... There is one tiny things, they don't do which is really sad, is they do require the Docker demon, which means we can not use that with podman, which is a bit of a shame 'cause that would be super useful... But otherwise it... It's working great yep."
msgstr "テストコンテナーも表示されています。データベースだけでなく、Kafka、弾性検索、 ____ などなど、他にもたくさんのものがあります。これは非常に良いことです。そして、JUnit 5と統合していますが、これは今使っているもので、これは... 1つだけ小さなことがありますが、これは本当に悲しいことに、Docker demonを必要としていることです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:476
#, fuzzy, no-wrap
msgid "**Georgios**: Yeah, hopefully that will restriction will be lifted... We may be lifting soon, who knows., well, we have...\n"
msgstr "*ジョージオス* うん、うまくいけばその制限が解除されるといいんだけど・・・もうすぐ解除されるかもしれないし、誰にもわからないけど・・・。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:478
#, fuzzy, no-wrap
msgid "**Max**: We hit the hour. Is there anything else you wanna do?\n"
msgstr "*1* 時間を切った他にやりたいことは?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:480
#, fuzzy, no-wrap
msgid "**Georgios**: Well, yeah, basically the URL for all the code I showed you can find it. I know how it is posed to share. Do I just post it in the chat?\n"
msgstr "*ジョージオス* まあ、ええ、基本的には私が示したすべてのコードのURLはあなたがそれを見つけることができます。私はそれがどのように共有するために提起されているかを知っています。チャットに投稿すればいいのかな?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:482
#, fuzzy, no-wrap
msgid "**Max**: Yeah, I just toss it in chat, and then we will put in the blog when it's coming out, yeah.\n"
msgstr "*マックス* :うん、チャットで投げて、それが出たらブログに載せるよ。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:484
#, fuzzy, no-wrap
msgid "**Georgios**: Oh, okay, great, great, you on.\n"
msgstr "*ジョージオス* ああ、オーケイ、素晴らしい、素晴らしい、あなたの上に。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:486
#, fuzzy, no-wrap
msgid "**Emmanuel**: Okay, and tell us how you felt. Was it too technical, not technical, enough, too fast, too small to be perfect, to perfect or... And then on the chat live, when it's still alive, otherwise go to the video, post comments in there and don't forget to subscribe to the Quarkus challenge or YouTube.com/quarkusio. I realize you don't need the \"c\" here, So let me remove it, click here, there you go... YouTube.com/quarkusio - hit subscribe and I'm not sure if it's gonna be a weekly event, or bi-weekly event bi-weekly meaning every two weeks for the confusing English. People like me.\n"
msgstr "*Emmanuel* : さて、そしてあなたが感じたことを教えてください。それはあまりにも技術的でしたか、技術的ではありませんでしたか、十分でしたか、速すぎましたか、完璧にするには小さすぎましたか、完璧にするには...そして、チャットライブで、それがまだ生きているとき、それ以外の場合は、ビデオに行き、そこにコメントを投稿し、QuarkusチャレンジまたはYouTube.com/quarkusioを購読することを忘れないでください。私はあなたがここで \"c\"を必要としないことを実現し、だから私はそれを削除してみましょう、ここをクリックして、そこに行く... YouTube.com/quarkusio - 購読を押すと、私はそれが毎週のイベントになるだろうかどうかわからない、または隔週イベント隔週の意味は、紛らわしい英語のために2週間ごとに意味します。私のような人は"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:488
#, fuzzy, no-wrap
msgid "**Max**: No questions?\n"
msgstr "*マックス* :質問は?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:490
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yeah, there's one question, so let me go back to... \"So why did you prefer Maven over Gradle?\n"
msgstr "*Emmanuel* : ええ、一つ質問があるので、話を戻しますが...「では、なぜGradleよりもMavenを選んだのですか?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:492
#, fuzzy, no-wrap
msgid "**Georgios**: For the simple reason that I'm more familiar with it, right?\n"
msgstr "*ゲオルギオス* 単純に私の方が詳しいからでしょ?"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:494
#, fuzzy
msgid "Quarkus works with both let's say some of the edge cases like the very edge cases, work better with Maven, the Gradle support is being looked into it's going to get way better over time. But the reason I used it is because I'm more familiar with Maven."
msgstr "Quarkusは両方で動作します。エッジケースのようなエッジケースのいくつかは、Mavenでよりよく動作し、Gradleのサポートは時間の経過とともに改善されていきます。しかし、私がQuarkusを使った理由は、私がMavenをよりよく知っているからです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:496
#, fuzzy, no-wrap
msgid "**Max**: The essence of the Maven/Gradle discussion is, So there's some issues we can't fully handle in Gradle yet but we are hoping to fix it, but I also wanna say as far as we know, right now, about 70% of the people who goes to code.quarkus.io of chose Maven and the other chose Gradle.\n"
msgstr "*Max* : Maven/Gradleの議論の本質は、Gradleではまだ完全に扱えない問題がありますが、それを解決したいと思っています。しかし、私たちが知っている限りでは、現在、code.quarkus.ioに行く人の70%がMavenを選び、残りの70%がGradleを選んでいます。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:498
#, fuzzy
msgid "So yeah, it's a bit... They'll be improved, yeah."
msgstr "だから、そうですね、ちょっと・・・改善されるでしょうね、ええ。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:500
#, fuzzy, no-wrap
msgid "**Emmanuel**: And Georgios was too fast, so we need slower coders.\n"
msgstr "*エマニュエル* :そして、ゲオルギオスは速すぎたので、もっと遅いコーダーが必要です。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:502
#, fuzzy
msgid "Indeed there is a little bit of a lag with YouTube Live, hopefully it won't be too visible in the actual final video once it's all fully uploaded and properly run, but although it... Good feedback on that."
msgstr "確かにYouTube Liveでは少しラグがありますが、うまくいけば、それはすべて完全にアップロードされ、適切に実行された後、実際の最終的なビデオではあまり目立たないことを願っていますが、しかし、それは...それについての良いフィードバックです。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:504
#, fuzzy, no-wrap
msgid "**Max**: Alright, we're good.\n"
msgstr "*マックス* :よし、いいぞ。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:506
#, fuzzy, no-wrap
msgid "**Emmanuel**: Yeah, we're good, thank you everyone and see you, well, sometime in the future sees ____ what we're gonna try and do, but who knows? And happy May the Fourth to everyone.\n"
msgstr "*エマニュエル* :うん、私たちは大丈夫だよ、みんなに感謝して、また会おうね、まあ、いつか将来的には _私_ たちが何をしようとしているのかを見ているよ、でも誰が知っているの?そして、みんなに5月4日の幸せを。"

#. type: Plain text
#: upstream/_posts/insights_1_transcription.adoc:507
#, fuzzy, no-wrap
msgid "**Georgios**: Thank you everybody!\n"
msgstr "*ゲオルギオス* 皆さんありがとうございます!"
