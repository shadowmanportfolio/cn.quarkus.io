# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-29 21:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "geoand"
msgstr "ジオアンド"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "2020-04-28"
msgstr "2020-04-28"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "ポスト"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "Quarkus 1.4 introduces some interesting new capabilities for mocking CDI beans."
msgstr "Quarkus 1.4では、CDI Beanをモックするための興味深い新機能がいくつか導入されています。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "testing"
msgstr "テスティング"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "Mocking CDI beans in Quarkus"
msgstr "Quarkus 1.5のその他のモッキング"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:17
#, fuzzy
msgid "Testing Quarkus applications has been an important part of the Quarkus Developer Joy, which is why `@QuarkusTest` for testing JVM applications and `@NativeTest` for black-box testing of the native images have been part of Quarkus since the first release.  A recurring request however amongst our community members has been to have Quarkus allow them to selectively mock certain CDI beans for specific tests. This post will introduce the new mocking capabilities that `1.4` brings which aim to address those concerns, while also providing a glimpse of additional improvements in this are that will be part of `1.5`."
msgstr "そのため、JVMアプリケーションをテストするための `@QuarkusTest` や、ネイティブイメージのブラックボックステストのための `@NativeTest` は、最初のリリースからQuarkusの一部となっています。しかし、コミュニティメンバーの間では、特定のテストのために特定のCDIビーンズを選択的にモックすることができるようにしてほしいという要望が繰り返されてきました。この記事では、 `1.4` がもたらす新しいモック機能を紹介し、これらの懸念に対処することを目的としています。また、 `1.5` に含まれるこの分野の追加の改善点についても紹介します。"

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:18
#, fuzzy, no-wrap
msgid "Old approach"
msgstr "古い手法"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:21
#, fuzzy
msgid "Let us assume that a Quarkus application contains the following (purely contrived) bean:"
msgstr "ここでは、Quarkusのアプリケーションに次のような（純粋に作られた）Beanが含まれていると仮定します。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:26
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class OrderService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:29
#, no-wrap
msgid ""
"    private final InvoiceService invoiceService;\n"
"    private final InvoiceNotificationService invoiceNotificationService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:34
#, no-wrap
msgid ""
"    public OrderService(InvoiceService invoiceService, InvoiceNotificationService invoiceNotificationService) {\n"
"        this.invoiceService = invoiceService;\n"
"        this.invoiceNotificationService = invoiceNotificationService;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:45
#, no-wrap
msgid ""
"    public Invoice generateSendInvoice(Long orderId) {\n"
"        final Invoice invoice = invoiceService.generateForOrder(orderId);\n"
"        if (invoice.isAlreadySent()) {\n"
"            invoiceNotificationService.sendInvoice(invoice);\n"
"        } else {\n"
"            invoiceNotificationService.notifyInvoiceAlreadySent(invoice);\n"
"        }\n"
"        return invoice;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:50
#, fuzzy
msgid "When testing the `generateSendInvoice` method we most likely don't want to use the actual `InvoiceNotificationService` as it would result in sending real notifications. With the old Quarkus approach one could \"override\" the `InvoiceNotificationService` in tests by adding the following bean in the test sources:"
msgstr "`generateSendInvoice` メソッドをテストする場合、実際の `InvoiceNotificationService` を使用したくないことがほとんどですが、それは実際の通知を送信することになるからです。古いQuarkusのアプローチでは、テストソースに以下のBeanを追加することで、テストで `InvoiceNotificationService` を「オーバーライド」することができました。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:55
#, no-wrap
msgid ""
"@Mock\n"
"public class MockInvoiceNotificationService implements InvoiceNotificationService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:57
#, no-wrap
msgid "    public void sendInvoice(Invoice invoice) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:59
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:61
#, no-wrap
msgid "    public void notifyInvoiceAlreadySent(Invoice invoice) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:64
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:69
#, fuzzy
msgid "When Quarkus scanned this code, the use of `@Mock` would result in `MockInvoiceNotificationService` being used as the implementation of `InvoiceNotificationService` in every place where a `InvoiceNotificationService` bean was injected (in CDI terms this is called an injection point)."
msgstr "Quarkusがこのコードをスキャンすると、 `@Mock` を使用すると、 `InvoiceNotificationService` Beanが注入されるすべての場所で、 `MockInvoiceNotificationService` が `InvoiceNotificationService` の実装として使用されることになります（CDI用語では、これを注入ポイントと呼びます）。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:71
#, fuzzy
msgid "Although this mechanism is fairly straightforward to use, it nonetheless suffers from a few problems:"
msgstr "この仕組みは非常にわかりやすいのですが、いくつかの問題があります。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:74
#, fuzzy
msgid "A new class (or a new CDI producer method) needs to be used for each bean type that requires a mock. In a large application where a lot of mocks are needed, the amount of boilerplate code increases unacceptably."
msgstr "モックを必要とするBeanタイプごとに、新しいクラス(または新しいCDIプロデューサーメソッド)を使用する必要があります。多くのモックを必要とする大規模なアプリケーションでは、定型的なコードの量が許容できないほど増えてしまいます。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:77
#, fuzzy
msgid "There is no way for a mock to be used for certain tests only. This is due to the fact that beans that are annotated with `@Mock` are normal CDI beans (and are therefore used throughout the application).  Depending on what needs to be tested, this can be very problematic."
msgstr "モックを特定のテストのみに使用する方法はありません。これは、 `@Mock` でアノテーションされたビーンは、通常の CDI ビーンである (つまり、アプリケーション全体で使用される) という事実によるものです。テストする内容によっては、これは非常に大きな問題となります。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:80
#, fuzzy
msgid "There is a no out of the box integration with https://site.mockito.org/[Mockito], which is the de-facto standard for mocking in Java applications. Users can certainly use Mockito (most commonly by using a CDI producer method), but there is boilerplate code involved."
msgstr "Javaアプリケーションにおけるモッキングのデファクト・スタンダードである link:https://site.mockito.org/[Mockito]との統合は行われていません。ユーザーはMockitoを使用することができますが、CDIプロデューサー・メソッドを使用するのが一般的です。"

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:81
#, fuzzy, no-wrap
msgid "New approach"
msgstr "新しいアプローチ"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:86
#, fuzzy
msgid "Starting with Quarkus `1.4`, users have the ability to create and inject per-test mocks for normal scoped CDI beans using `io.quarkus.test.junit.QuarkusMock`. Moreover, Quarkus provides out of the box integration with Mockito allowing for zero effort mocking of CDI beans using the `io.quarkus.test.junit.mockito.@InjectMock` annotation."
msgstr "Quarkus `1.4` からは、 `io.quarkus.test.junit.QuarkusMock` を使用して、通常のスコープのCDIビーンに対するテストごとのモックを作成し、注入することができます。さらに、QuarkusはMockitoとの統合をすぐに提供しており、 `io.quarkus.test.junit.mockito.@InjectMock` アノテーションを使用してCDI Beanのモックをゼロエフォートで作成できます。"

#. type: Title ===
#: upstream/_posts/2020-04-29-mocking.adoc:87
#, fuzzy, no-wrap
msgid "Using QuarkusMock"
msgstr "QuarkusMockの使用"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:91
#, fuzzy
msgid "`QuarkusMock` provides the foundation for mocking normal scoped CDI beans and is also used under the hood by `@InjectMock`, so let us examine it first. The best way to do this is using an example:"
msgstr "`QuarkusMock` は、通常のスコープ付きCDI Beanをモックするための基礎を提供し、 `@InjectMock` でも使用されているので、まずこれを調べてみましょう。そのためには、例を使ってみるのが一番です。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:96
#: upstream/_posts/2020-04-29-mocking.adoc:228
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:99
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean1 mockableBean1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:102
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:109
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        MockableBean1 mock = Mockito.mock(MockableBean1.class);  // <1>\n"
"        Mockito.when(mock.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\");\n"
"        QuarkusMock.installMockForType(mock, MockableBean1.class);  // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:115
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBeforeAll() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));  // <3>\n"
"        Assertions.assertEquals(\"Hello Stuart\", mockableBean2.greet(\"Stuart\")); // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:122
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPerTestMock() {\n"
"        QuarkusMock.installMockForInstance(new BonjourMockableBean2(), mockableBean2); // <5>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));  // <6>\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\")); // <7>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:125
#: upstream/_posts/2020-04-29-mocking.adoc:255
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean1 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:130
#: upstream/_posts/2020-04-29-mocking.adoc:138
#: upstream/_posts/2020-04-29-mocking.adoc:260
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:133
#: upstream/_posts/2020-04-29-mocking.adoc:263
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean2 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:146
#, no-wrap
msgid ""
"    public static class BonjourMockableBean2 extends MockableBean2 {\n"
"        @Override\n"
"        public String greet(String name) {\n"
"            return \"Bonjour \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:148
#, fuzzy
msgid "This part of the example uses Mockito for convenience's sake only. `QuarkusMock` is not tied to Mockito in any way."
msgstr "`QuarkusMock` はMockitoとは何の関係もありません。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:150
#, fuzzy
msgid "We use `QuarkusMock.installMockForType()` because the injected bean instance is not yet available. Very important to note is that the mock setup in a JUnit `@BeforeAll` method, is used for *all* test methods of the class (other test classes are *not* affected by this)."
msgstr "`QuarkusMock.installMockForType()` を使用しているのは、注入されたBeanのインスタンスがまだ利用できないからです。非常に重要なのは、JUnit `@BeforeAll` のメソッドで設定されたモックは、そのクラスの *すべての*テストメソッドで使用されるということです (他のテストクラスはこの影響を *受けませ*ん)。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:151
#: upstream/_posts/2020-04-29-mocking.adoc:154
#, fuzzy
msgid "The mock for `MockableBean1` is being used as it was defined for all test methods of the class."
msgstr "`MockableBean1` のモックは、クラスのすべてのテストメソッドに定義された通りに使用されています。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:152
#, fuzzy
msgid "Since no mock has been set up for `MockableBean2`, the CDI bean is being used."
msgstr "`MockableBean2` にはモックが設定されていないため、CDI Bean が使用されています。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:153
#, fuzzy
msgid "We use `QuarkusMock.installMockForInstance()` here because inside the test method, the injected bean instance is available."
msgstr "ここで `QuarkusMock.installMockForInstance()` を使用しているのは、テストメソッド内では注入されたBeanインスタンスが利用可能だからです。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:155
#, fuzzy
msgid "As we used `BonjourMockableBean2` as a mock `MockableBean2`, this class is now used."
msgstr "`BonjourMockableBean2` をモック `MockableBean2` として使用していたので、このクラスが使用されています。"

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:160
#, fuzzy
msgid "`QuarkusMock` can be used for any normal scoped CDI bean - the most common of which are `@ApplicationScoped` and `@RequestScoped`.  This means that beans with `@Singleton` and `@Dependent` scope *cannot* be used with `QuarkusMock`."
msgstr "`QuarkusMock` は、通常のスコープの CDI Bean (最も一般的なものは `@ApplicationScoped` と `@RequestScoped`) に使用できます。つまり、 `@Singleton` および `@Dependent` スコープのビーンは `QuarkusMock` で使用すること *はできません*。"

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:162
#, fuzzy
msgid "Furthermore, `QuarkusMock` will not work properly when it's used in tests that run parallel in the same JVM."
msgstr "さらに、 `QuarkusMock` は、同じ JVM で並行して実行されるテストで使用すると正しく動作しません。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:166
#, fuzzy
msgid "Returning to the original example of the blog post, we could get rid of the `MockInvoiceNotificationService` class and instead use something like the following:"
msgstr "ブログ記事の最初の例に戻ると、 `MockInvoiceNotificationService` クラスを取り除き、代わりに以下のようなものを使用することができます。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:170
#: upstream/_posts/2020-04-29-mocking.adoc:288
#, no-wrap
msgid "public class OrderServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:173
#, no-wrap
msgid ""
"    @Inject\n"
"    OrderService orderService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:181
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        MockableBean1 mock = Mockito.mock(InvoiceNotificationService.class);\n"
"        Mockito.doNothing().when(mock).sendInvoice(any());\n"
"        Mockito.doNothing().when(mock).notifyInvoiceAlreadySent(any());\n"
"        QuarkusMock.installMockForType(mock, MockableBean1.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:184
#: upstream/_posts/2020-04-29-mocking.adoc:303
#, no-wrap
msgid ""
"    public void testGenerateSendInvoice() {\n"
"        // perform some setup\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:186
#: upstream/_posts/2020-04-29-mocking.adoc:305
#, no-wrap
msgid "        Invoice invoice = orderService.generateSendInvoice(1L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:190
#: upstream/_posts/2020-04-29-mocking.adoc:309
#, no-wrap
msgid ""
"        // perform some assertions\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:194
#, fuzzy
msgid "Note that in this case we don't need to create a new class implementing `InvoiceNotificationService`.  Moreover, we have full and per test control over the mock, something which grants up a lot of flexibility when writing tests."
msgstr "この場合、 `InvoiceNotificationService` を実装した新しいクラスを作成する必要はないことに注意してください。さらに、テストごとにモックを完全に制御することができるので、テストを書く際の柔軟性が向上します。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:197
#, fuzzy
msgid "For example, if we had some other test where we did want to use the real `InvoiceNotificationService`, then in that test we would simply not do any mocking of `InvoiceNotificationService`."
msgstr "例えば、本物の `InvoiceNotificationService` を使いたいテストがあったとしたら、そのテストでは `InvoiceNotificationService` のモックを一切行わないようにします。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:200
#, fuzzy
msgid "If yet another test needed to mock `InvoiceNotificationService` in some other way, then it would be perfectly free to do so, using the same method `OrderServiceTest` uses, without causing any problems to the other tests."
msgstr "もし、別のテストが他の方法で `InvoiceNotificationService` を模倣する必要がある場合、 `OrderServiceTest` が使用するのと同じ方法で、他のテストに何の問題も発生させずに、完全に自由にそれを行うことができます。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:202
#, fuzzy
msgid "Finally, note in the example above we didn't mock `InvoiceService`, which meant that the real `InvoiceService` was being used in `OrderServiceTest`."
msgstr "最後に、上の例では `InvoiceService` をモックしていないことに注意してください。これは、実際の `InvoiceService` が `OrderServiceTest` で使用されていることを意味しています。"

#. type: Title ===
#: upstream/_posts/2020-04-29-mocking.adoc:203
#, fuzzy, no-wrap
msgid "Using @InjectMock"
msgstr "@InjectMockの使用"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:208
#, fuzzy
msgid "Hopefully the previous section convinced you of the merits of `QuarkusMock` over the old approach. You might also be wondering however if there is a way to reduce boilerplate code even further and provide tighter integration with Mockito. That is where `@InjectMock` comes in handy."
msgstr "前のセクションでは、 `QuarkusMock` の利点を理解していただけたと思います。しかし、さらに定型的なコードを減らし、Mockitoとの統合をより強固にする方法がないかと考えているかもしれません。そこで、 `@InjectMock` が役に立つのです。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:210
#, fuzzy
msgid "To demonstrate `@InjectMock` let's rewrite the `MockTestCase` from the previous section."
msgstr "`@InjectMock` を示すために、前節の `MockTestCase` を書き換えてみましょう。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:212
#, fuzzy
msgid "First of all, we need to add the following dependency:"
msgstr "まず、以下の依存関係を追加する必要があります。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:220
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:223
#, fuzzy
msgid "Now we can rewrite the `MockTestCase` like so:"
msgstr "ここで、 `MockTestCase` を次のように書き換えます。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:231
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean1 mockableBean1; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:234
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:239
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Mockito.when(mockableBean1.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\"); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:245
#, no-wrap
msgid ""
"    @Test\n"
"    public void firstTest() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(null, mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:252
#, no-wrap
msgid ""
"    @Test\n"
"    public void secondTest() {\n"
"        Mockito.when(mockableBean2.greet(\"Stuart\")).thenReturn(\"Bonjour Stuart\"); // <3>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:269
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:271
#, fuzzy
msgid "`@InjectMock` results in a mock being created and being available in *all* test methods of the test class (other test classes are *not* affected by this)"
msgstr "`@InjectMock` その結果、モックが作成され、テストクラスの *すべての*テストメソッドで利用できるようになります（他のテストクラスはこの影響を受け *ませ*ん）。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:272
#, fuzzy
msgid "The `mockableBean1` is configured here for all test methods of the class"
msgstr "ここでは、クラスのすべてのテストメソッドに対して `mockableBean1` を設定しています。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:273
#, fuzzy
msgid "Configure `mockableBean2` for this test only"
msgstr "`mockableBean2` を今回のテストのみに設定"

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:277
#, fuzzy
msgid "Since `@InjectMock` uses `QuarkusMock` under the hood, the same limitations apply to its use."
msgstr "`@InjectMock` は `QuarkusMock` をフードの下で使用しているので、その使用には同じ制限が適用されます。"

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:281
#, fuzzy
msgid "Additionally, `@InjectMock` works like an injection point for the bean, so for it to work properly when the target bean uses CDI qualifiers, those qualifiers also need to be added to the field.  We will see an example of this in next section about mocking a `@RestClient` bean."
msgstr "さらに、 `@InjectMock` はBeanの注入ポイントのように機能するので、ターゲットBeanがCDI修飾子を使用するときに正しく動作するためには、それらの修飾子もフィールドに追加する必要があります。この例は、次の `@RestClient` ビーンのモックについてのセクションで説明します。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:284
#, fuzzy
msgid "As a final example, we can rewrite the `OrderServiceTest` test like so:"
msgstr "最後の例として、 `OrderServiceTest` のテストを次のように書き換えてみましょう。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:291
#, no-wrap
msgid ""
"    @Inject\n"
"    private OrderService orderService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:294
#, no-wrap
msgid ""
"    @InjectMock\n"
"    private InvoiceNotificationService invoiceNotificationService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:300
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        doNothing().when(invoiceNotificationService).sendInvoice(any());\n"
"        doNothing().when(invoiceNotificationService).notifyInvoiceAlreadySent(any());\n"
"    }\n"
msgstr ""

#. type: Title ====
#: upstream/_posts/2020-04-29-mocking.adoc:311
#, fuzzy, no-wrap
msgid "Using @InjectMock with @RestClient"
msgstr "InjectMockと@RestClientの併用"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:315
#, fuzzy
msgid "A very common need is to mock `@RestClient` beans. Thankfully it's a need well covered by `@InjectMock` - as long as two principles are followed:"
msgstr "非常に一般的なニーズとして、 `@RestClient` 豆のモックがあります。ありがたいことに、このニーズは `@InjectMock` によって十分にカバーされています - 2つの原則に従う限りにおいて。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:317
#, fuzzy
msgid "The bean is made `@ApplicationScoped` (instead of accepting the default scope which `@RegisterRestClient` implies, i.e. `@Dependent`)"
msgstr "そのビーンは， `@ApplicationScoped` （ `@RegisterRestClient` が示唆するデフォルトの範囲，すなわち `@Dependent` を受け入れるのではなく）とされる。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:318
#, fuzzy
msgid "The `@RestClient` CDI qualifier is used when injecting the bean into the test."
msgstr "`@RestClient` CDI qualifier は、Bean をテストに注入する際に使用されます。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:320
#, fuzzy
msgid "As usual, an example best demonstrates these requirements. Say we have a `GreetingService` which we wish to use to build a rest client:"
msgstr "いつものように、これらの要件を最もよく示す例があります。例えば、レストクライアントを構築するために使用したい `GreetingService` 。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:327
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped  // <1>\n"
"@RegisterRestClient\n"
"public interface GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:333
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/hello\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String hello();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:335
#, fuzzy
msgid "`@ApplicationScoped` needs to be used to make `GreetingService` mockable."
msgstr "`@ApplicationScoped` は、 `GreetingService` をモック可能にするために使用する必要があります。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:337
#, fuzzy
msgid "An example test class could be:"
msgstr "テストクラスの例としては"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:342
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:346
#, no-wrap
msgid ""
"    @InjectMock\n"
"    @RestClient // <1>\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:350
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        Mockito.when(greetingService.hello()).thenReturn(\"hello from mockito\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:357
#, no-wrap
msgid ""
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello from mockito\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:359
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:361
#, fuzzy
msgid "We need to use the `@RestClient` CDI qualifier, since Quarkus creates the `GreetingService` bean with this qualifier."
msgstr "Quarkusはこの修飾子で `GreetingService` Beanを作成するので、 `@RestClient` CDI修飾子を使用する必要があります。"

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:362
#, fuzzy, no-wrap
msgid "More Mocking in Quarkus 1.5"
msgstr "Quarkus 1.5のその他のモッキング"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:366
#, fuzzy
msgid "Quarkus 1.5 will ship with a new testing module (`quarkus-panache-mock`) that will make mocking Panache entities a breeze.  If you are eager to see what this feature is all about, check out https://github.com/quarkusio/quarkus/blob/3a5680ea367c5dad60655dcef0ca9765f14d5efe/docs/src/main/asciidoc/getting-started-testing.adoc#73-mocking-with-panache[this] and feel free to give us early feedback."
msgstr "Quarkus 1.5には新しいテストモジュール( `quarkus-panache-mock`)が搭載されており、Panacheエンティティのモックを簡単に行うことができます。この機能がどのようなものか知りたい方は、 link:https://github.com/quarkusio/quarkus/blob/3a5680ea367c5dad60655dcef0ca9765f14d5efe/docs/src/main/asciidoc/getting-started-testing.adoc#73-mocking-with-panache[こちら]をご覧になり、お気軽にご意見をお聞かせください。"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: 'Mocking CDI beans in Quarkus'\n"
#~ "date: 2020-04-28\n"
#~ "tags: testing\n"
#~ "synopsis: Quarkus 1.4 introduces some interesting new capabilities for mocking CDI beans.\n"
#~ "author: geoand\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: 「QuarkusでのCDIビーンズのモッキング\n"
#~ "date: 2020-04-28\n"
#~ "tags: testing\n"
#~ "synopsis: Quarkus 1.4では、CDI Beanをモックするための興味深い新機能が導入されました。\n"
#~ "author: geoand\n"
#~ "---\n"
