# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 07:14+0000\n"
"PO-Revision-Date: 2021-12-03 23:52+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0\n"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:7
msgid "For years, the client-server architecture has been the de-facto standard to build applications. But a significant shift happened. The <em>one model rules them all</em> age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, and serverless are now central players in modern systems."
msgstr "長年、アプリケーションを構築する際には、クライアント・サーバ・アーキテクチャがデファクト・スタンダードとなっていました。しかし、大きな変化が起こりました。<em>1つのモデルがすべてを支配する</em>時代は終わりました。新しい種類のアプリケーションやアーキテクチャスタイルが登場し、コードの書き方やアプリケーションのデプロイ方法、実行方法を一変させました。HTTPマイクロサービス、リアクティブアプリケーション、イベント駆動型アーキテクチャ、サーバーレスなどが、現代のシステムの中心的な担い手となっています。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:10
msgid "Quarkus has been designed with this new world in mind and provides first-class support for these different paradigms. That does not mean you cannot build monoliths with Quarkus; you can do it smoothly. On the contrary, it means that the Quarkus development model morphs to adapt itself to the type of application you are developing, monolith, microservice, reactive, event-driven, functions…"
msgstr "Quarkusは、この新しい世界を念頭に置いて設計されており、これらの異なるパラダイムに対して一級のサポートを提供しています。それは、Quarkusでモノリスを構築できないということではなく、スムーズに構築することができます。それどころか、Quarkusの開発モデルは、モノリス、マイクロサービス、リアクティブ、イベントドリブン、ファンクションなど、開発しているアプリケーションの種類に合わせて変化します。"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:11
msgid "<a class=\"anchor\" href=\"#http-microservices\"></a>HTTP microservices"
msgstr "<a class=\"anchor\" href=\"#http-microservices\"></a>HTTP マイクロサービス"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:12
msgid "Let’s start with the basics: HTTP microservices. In this context, you need to develop an HTTP endpoint, often called REST or CRUD. You process incoming HTTP requests, and to do so you often need to rely on other services, such as databases, or another HTTP service."
msgstr "まず、基本的なことから始めましょう。HTTPマイクロサービスです。ここでは、RESTやCRUDと呼ばれるHTTPエンドポイントを開発する必要があります。受信したHTTPリクエストを処理しますが、そのためにはデータベースなどの他のサービスや別のHTTPサービスに依存する必要があります。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:13
msgid "For this type of application, Quarkus relies on well-known standards such as JAX-RS, JPA and MicroProfile Rest Client, but also Hibernate with Panache to simplify interactions with databases."
msgstr "この種のアプリケーションでは、QuarkusはJAX-RS、JPA、MicroProfile Rest Clientなどのよく知られた標準に加えて、データベースとのやり取りを簡素化するためにHibernate with Panacheにも依存しています。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:14
msgid "Let’s take a very simple application handling <em>elements</em> from the periodic table. The code would be something like:"
msgstr "周期表の<em>元素</em>を扱う非常にシンプルなアプリケーションを考えてみましょう。コードは次のようなものになります。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:15
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Element&gt; <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">()</span> </span>{\n"
"        <span class=\"hljs-keyword\">return</span> Element.listAll();\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">getOne</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        Element element = Element.find(<span class=\"hljs-string\">\"position\"</span>, position).firstResult();\n"
"        <span class=\"hljs-keyword\">if</span> (element == <span class=\"hljs-keyword\">null</span>) {\n"
"            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> WebApplicationException(<span class=\"hljs-string\">\"Element with position \"</span> + position + <span class=\"hljs-string\">\" does not exist.\"</span>, <span class=\"hljs-number\">404</span>);\n"
"        }\n"
"        <span class=\"hljs-keyword\">return</span> element;\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@POST</span>\n"
"    <span class=\"hljs-meta\">@Transactional</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(Element element)</span> </span>{\n"
"        element.persist();\n"
"        <span class=\"hljs-keyword\">return</span> Response.ok(element).status(<span class=\"hljs-number\">201</span>).build();\n"
"    }\n"
"\n"
"    <span class=\"hljs-comment\">//...</span>\n"
"}</code>"
msgstr ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-"
"meta\">@Path</span>（<span class=\"hljs-string\">\"/elements\"</span>）<span "
"class=\"hljs-keyword\">。public</span> <span class=\"hljs-class\"><span class"
"=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</"
"span> </span>{。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:42
msgid "If you are a Java EE or Spring user, this development model should look familiar.  You expose a resource containing methods annotated with <code>@GET</code>, <code>@POST</code>…&ZeroWidthSpace;&ZeroWidthSpace; to handle the different requests.  The path is specified using the <code>@Path</code> annotation.  Quarkus also supports <a href=\"https://quarkus.io/guides/spring-web\">Spring controller</a> annotations such as <code>@GetMapping</code> or <code>@RestController</code>."
msgstr "Java EEやSpringのユーザーであれば、この開発モデルは見覚えがあるはずです。異なるリクエストを処理するために、<code>@GET</code>、<code>@POST</code>...でアノテーションされたメソッドを含むリソースを公開します。パスは、<code>@Path</code>アノテーションを使用して指定します。Quarkusは、<code>@GetMapping</code>や<code>@RestController</code>のような<a href=\"https://quarkus.io/guides/spring-web\">Spring controller</a>アノテーションもサポートしています。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:47
msgid "You can use the JPA entity manager directly.  Panache proposes an alternative removing boilerplate and exposing an active record and repository models."
msgstr "JPAのエンティティマネージャーを直接使用することができます。Panacheは、ボイラープレートを取り除き、アクティブなレコードとリポジトリモデルを公開するという代替案を提示します。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:50
msgid "With Panache, the <code>Element</code> class would be as simple as:"
msgstr "Panacheでは、<code>Element</code>クラスは、次のように簡単です。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:53
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Entity</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Element</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PanacheEntity</span> </span>{\n"
"\n"
"    <span class=\"hljs-keyword\">public</span> String name;\n"
"    <span class=\"hljs-keyword\">public</span> String symbol;\n"
"    <span class=\"hljs-meta\">@Column</span>(unique = <span class=\"hljs-keyword\">true</span>)\n"
"    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> position;\n"
"}</code>"
msgstr ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-"
"meta\">@Entity</span> <span class=\"hljs-keyword\">public</span> <span class"
"=\"hljs-class\"><span class=\"hljs-keyword\"> </spanクラス</span> <span class"
"=\"hljs-title\">Element</span> <span class=\"hljs-keyword\">extends</span> "
"<span class=\"hljs-title\">PanacheEntity</span> </span>{。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:62
msgid "Microservices tend to come in systems.  Let’s now imagine you need to access another HTTP endpoint.  You can use an HTTP client directly; this is nothing more than repeating boilerplate code.  Quarkus provides a way to call HTTP endpoints easily using the <a href=\"https://quarkus.io/guides/rest-client\">MicroProfile Rest Client API</a>."
msgstr "マイクロサービスはシステムとして提供されることが多いです。ここで、別のHTTPエンドポイントにアクセスする必要があるとしましょう。HTTPクライアントを直接使用することもできますが、これはお決まりのコードを繰り返すだけです。Quarkusでは、<a href=\"https://quarkus.io/guides/rest-client\">MicroProfile Rest Client API</a>を使用して、HTTPエンドポイントを簡単に呼び出す方法を提供しています。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:67
msgid "First declare your service as follows:"
msgstr "まず、次のように自分のサービスを宣言します。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:69
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Element <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-"
"meta\">@Path</span>(<span class=\"hljs-string\">?\"/elements\"</span>） "
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class"
"=\"hljs-string\">)\"element-service\"</span>) <span class=\"hljs-keyword\""
">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\""
">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:78
msgid "For each call you are intending to do, add a method and use annotations to describe the behavior.  You can combine the REST Client with the <a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\">fault tolerance extension</a> to handle failure gracefully.  Then, in your resource, just use the <code>ElementService</code> interface:"
msgstr "意図している各呼び出しに対して、メソッドを追加し、アノテーションを使用して動作を記述します。RESTクライアントと<a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\">fault tolerance エクステンション</a>を組み合わせることで、失敗をグレースフルに処理することができます。そして、リソースでは <code>ElementService</code> インターフェースを使用するだけです。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:82
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elem\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@RestClient</span>\n"
"    ElementService elements;\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        <span class=\"hljs-keyword\">return</span> elements.getElement(position);\n"
"    }\n"
"}</code>"
msgstr ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-"
"meta\">@Path</span>（<span class=\"hljs-string\">\"/elem\"</span>）<span "
"class=\"hljs-keyword\">。public</span> <span class=\"hljs-class\"><span class"
"=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</"
"span> </span>{。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:94
msgid "But you may be wondering where the URL is configured as it’s not in the code. Remember, it must not be hard-coded because the URL likely depends on the environment. The URL is configured in the application configuration:"
msgstr "しかし、URLがコードに含まれていないため、どこで設定されているのか疑問に思うかもしれません。URLは環境に依存する可能性が高いので、ハードコーディングしてはいけないことを覚えておいてください。URLの設定は、アプリケーションの設定で行います。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:96
#, fuzzy, no-wrap
msgid "<code class=\"language-text hljs\" data-lang=\"text\">element-service/mp-rest/url=http://localhost:9001</code>"
msgstr ""
"<code class=\"language-text hljs\" data-lang=\"text\">element-service/"
"mp-rest/url=http://localhost:9001</code>"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:98
msgid "The URL can now be updated during the deployment or at launch time using system properties or environment variables."
msgstr "システムプロパティや環境変数を使って、デプロイ時や起動時にURLを更新できるようになりました。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:100
msgid "Quarkus is not limited to HTTP.  You can use <a href=\"https://quarkus.io/guides/grpc-getting-started\">gRPC</a> or <a href=\"https://quarkus.io/guides/smallrye-graphql\">GraphQL</a>, two prominent alternatives in the microservice space."
msgstr "Quarkusは、HTTPに限定されません。マイクロサービス分野の2つの有力な選択肢である<a href=\"https://quarkus.io/guides/grpc-getting-started\">gRPC</a>や<a href=\"https://quarkus.io/guides/smallrye-graphql\">GraphQL</a>を使用することができます。"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:103
msgid "<a class=\"anchor\" href=\"#being-reactive\"></a>Being reactive"
msgstr "<a class=\"anchor\" href=\"#being-reactive\"></a>リアクティブであること"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:105
msgid "Application requirements have changed drastically over the last few years.  For any application to succeed in the era of cloud computing, Big Data, or IoT, going reactive is increasingly becoming the architecture style to follow."
msgstr "アプリケーションの要件は、ここ数年で大きく変化しています。クラウドコンピューティング、ビッグデータ、IoTの時代にアプリケーションを成功させるためには、リアクティブにすることが、従うべきアーキテクチャのスタイルになりつつあります。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:108
#, fuzzy
msgid "Today’s users embrace applications with milliseconds of response time, 100% uptime, lower latency, push data instead of pull, higher throughput, and elasticity. However, these features are nearly impossible to achieve using yesterday’s software architecture without a considerable investment in resources, infrastructure, and tooling. The world changed, and having dozens of servers, long response times (&gt; 500 ms), downtime due to maintenance or waterfalls of failures does not meet the expected user experience."
msgstr ""
"今日のユーザーは、ミリ秒単位の応答時間、100%のアップタイム、低レイテンシー、"
"プル型ではなくプッシュ型のデータ、高いスループット、そして弾力性を備えたアプ"
"リケーションを求めています。しかし、これらの機能を以前のソフトウェアアーキテ"
"クチャで実現するには、リソース、インフラ、ツールに多大な投資をしなければほぼ"
"不可能です。世界は変わりました。何十台ものサーバー、長い応答時間（500ms以上）"
"、メンテナンスによるダウンタイム、滝のような障害などは、期待されるユーザーエ"
"クスペリエンスを満たすものではありません。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:110
msgid "Quarkus aids you on your journey to reactive.  Quarkus is based on a <a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\">reactive core</a> allowing your application to mix reactive and imperative components.  As an example, you can implement reactive HTTP endpoint using the <a href=\"https://quarkus.io/guides/resteasy-reactive\">RESTEasy Reactive extension</a> as follows:"
msgstr "Quarkusは、リアクティブへの道のりをサポートします。Quarkusは、<a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\">リアクティブコア</a>をベースにしており、アプリケーションにリアクティブ型コンポーネントと命令型コンポーネントを混在させることができます。例として、<a href=\"https://quarkus.io/guides/resteasy-reactive\">RESTEasy Reactive エクステンション</a>を使用して、以下のようにリアクティブなHTTPエンドポイントを実装できます。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:113
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements/{position}\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"    <span class=\"hljs-keyword\">return</span> elements.getElement(position)\n"
"        .onFailure().recoverWithItem(FALLBACK);\n"
"}</code>"
msgstr ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-"
"meta\">@GET</span> <span class=\"hljs-meta\">@Path</span>(<?span class"
"=\"hljs-string\">\"/elements/{position}\"</span>) <span class=\"hljs-"
"function\"><span class=\"hljs-keyword\">public</span> Uni<?要素> <span class"
"=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam("
"<span class=\"hljs-string\">\"position\"<?/span>)</span> <span class=\"hljs-"
"keyword\">int</span> position) </span>{ <span class=\"hljs-keyword\">return</"
"span> elements.getElement(position) .onFailure().recoverWithItem(FALLBACK); "
"}</code>。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:119
msgid "Thanks to the <a href=\"https://quarkus.io/version/main/guides/mutiny-primer\">Mutiny Reactive API</a> , you can compose asynchronous operations and complete the result when everything is done without blocking the I/O threads.  This greatly improves resource consumption and elasticity.  Most Quarkus APIs are available in both imperative and reactive.  As example, you can use the reactive version of the REST Client:"
msgstr "<a href=\"https://quarkus.io/version/main/guides/mutiny-primer\">Mutiny Reactive API</a>のおかげで、非同期操作を構成し、I/Oスレッドをブロックすることなく、すべてが完了したときに結果を完了することができます。これにより、リソース消費量と弾力性が大幅に向上します。ほとんどのQuarkus APIは、命令型とリアクティブ型の両方で利用できます。例えば、REST Clientのリアクティブバージョンを使用することができます。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:123
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-"
"meta\">@Path</span>(<span class=\"hljs-string\">?\"/elements\"</span>） "
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class"
"=\"hljs-string\">)\"element-service\"</span>) <span class=\"hljs-keyword\""
">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\""
">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:131
msgid "But, what about streams? Generating a <em>server-sent event</em> response with Quarkus is just as simple:"
msgstr "しかし、ストリームについてはどうでしょうか？Quarkusで<em>server-sent event</em>レスポンスを生成するのは、次のようにとても簡単です。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:132
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Produces</span>(MediaType.SERVER_SENT_EVENTS)\n"
"<span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/events\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Multi&lt;String&gt; <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">()</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> kafka.toMulti();\n"
"}</code>"
msgstr ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-"
"meta\">@Produces</span>(MediaType.SERVER_SENT_EVENTS） <span class=\"hljs-"
"meta\">@GET</span> <span class=\"hljs-meta\">@Path</span>(<?span class"
"=\"hljs-string\">\"/events\"</span>） <span class=\"hljs-function\"><span "
"class=\"hljs-keyword\"> <span class=\"hljs-keyword\"> パブリック</span> "
"マルチ<STRONG> </span> </span>。public</span> Multi<String> <span class"
"=\"hljs-title\">stream</span><span class=\"hljs-params\">()</span> </span>{ "
"<span class=\"hljs-keyword\">return</span> kafka.toMulti(); }</code>。"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:138
msgid "<a class=\"anchor\" href=\"#event-driven-architectures\"></a>Event-driven Architectures"
msgstr "<a class=\"anchor\" href=\"#event-driven-architectures\"></a> イベントドリブンなアーキテクチャー"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:139
msgid "However, HTTP characteristics prohibit implementing <a href=\"https://www.reactivemanifesto.org/\">reactive systems</a>, where all the components interact using asynchronous messages passing."
msgstr "しかし、HTTPの特性上、すべてのコンポーネントが非同期のメッセージパッシングを使って相互に作用するような<a href=\"https://www.reactivemanifesto.org/\">リアクティブシステム</a>を実装することはできません。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:140
msgid "First, you can consume messages from various brokers such as AMQP or Apache Kafka, and process these messages smoothly:"
msgstr "まず、AMQPやApache Kafkaなどの各種ブローカーからのメッセージを消費し、そのメッセージをスムーズに処理することができます。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:141
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@ApplicationScoped</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyEventProcessor</span> </span>{\n"
"\n"
"  <span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"  <span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"heartbeat\"</span>)\n"
"  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">extractHeartbeat</span><span class=\"hljs-params\">(Health health)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> health.getHeartbeat();\n"
"  }\n"
"}</code>"
msgstr ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-"
"meta\">@ApplicationScoped</span> <span class=\"hljs-keyword\">public<?/span> "
"<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">class</span> <span "
"class=\"hljs-title\">MyEventProcessor</span> </span>{。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:150
msgid "The <code>@Incoming</code> and <code>@Outgoing</code> annotations are part of <a href=\"https://www.smallrye.io/smallrye-reactive-messaging\">Reactive Messaging</a>.  They are used to express from which <em>channel</em> you are consuming and to which <em>channel</em> you are sending.  Thanks to Reactive Messaging you can consume and send messages from and to different brokers and transports such as HTTP, Kafka, or <a href=\"http://camel.apache.org\">Apache Camel</a>."
msgstr "<code>@Incoming</code>と<code>@Outgoing</code>のアノテーションは、<a href=\"https://www.smallrye.io/smallrye-reactive-messaging\">Reactive Messaging</a>の一部です。これらは、どの<em>チャネル</em>から消費しているか、どの<em>チャネル</em>に送信しているかを表現するために使用されます。Reactive Messaging のおかげで、HTTP、Kafka、<a href=\"http://camel.apache.org\">Apache Camel</a>など、さまざまなブローカーやトランスポートからメッセージを受信したり、それらに送信したりすることができます。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:153
msgid "Sometimes you need more than just handling messages one by one.  You can also express your message processing logic using reactive programming as illustrated in the following snippet:"
msgstr "メッセージを1つ1つ処理するだけでは不十分な場合があります。次の例のように、メッセージ処理ロジックをリアクティブ・プログラミングで表現することもできます。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:155
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"<span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"output\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> Multi&lt;<span class=\"hljs-function\">Record&lt;String, Measure&gt; <span class=\"hljs-title\">filterState</span><span class=\"hljs-params\">(Multi&lt;Capture&gt; input)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> input\n"
"        .drop().repetitions()\n"
"        .select().where(capture -&gt; capture.value &gt; <span class=\"hljs-number\">0</span>)\n"
"        .onItem().transform(capture -&gt; <span class=\"hljs-keyword\">new</span> Measure(capture.sensor, capture.value, capture.unit))\n"
"        .onItem().transform(measure -&gt; Record.of(measure.sensor, measure));\n"
"}</code>"
msgstr ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-"
"meta\">@着信</span>(<span class=\"hljs-string\">\"health\"<./span>) <span "
"class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"output\""
"</span>) <span class=\"hljs-keyword\">public</span> Multi<<span class=\"hljs-"
"function\">Record<String, Measure> <span class=\"hljs-title\">filterState</"
"span><span class=\"hljs-params\">(Multi<Capture> input)</span> </span>{ "
"<span class=\"hljs-keyword\">return</span> input .drop().repetitions()."
"select().where(capture -> capture.value > <span class=\"hljs-number\""
">0</span>) .onItem().transform(capture -> <span class=\"hljs-keyword\">new</"
"span> Measure(capture.sensor, capture.value, capture.unit)) .onItem()."
"transform(measure -> Record.of(measure.sensor, measure)); }</code>。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:164
msgid "As for the reactive APIs exposed by Quarkus, stream manipulation uses the Mutiny API."
msgstr "Quarkusが公開しているリアクティブAPIについては、ストリーム操作にMutiny APIを使用しています。"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:165
msgid "<a class=\"anchor\" href=\"#functions-as-a-service-and-serverless\"></a>Functions as a Service and Serverless"
msgstr "<a class=\"anchor\" href=\"#functions-as-a-service-and-serverless\"></a>Functions as a Service とサーバーレス"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:166
msgid "Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments.  Quarkus provides Funqy, an approach to writing functions that are deployable to various FaaS environments like AWS Lambda, Azure Functions, Knative, and Knative Events (Cloud Events). It is also usable as a standalone service."
msgstr "驚異的な起動時間と低いメモリ使用量のおかげで、Quarkusを使って関数を実装し、サーバーレス環境で使用することができます。Quarkusは、関数を書くためのアプローチであるFunqyを提供しており、AWS Lambda、Azure Functions、Knative、Knative Events（Cloud Events）など、さまざまなFaaS環境にデプロイ可能です。また、スタンドアロンのサービスとしても使用可能です。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:168
msgid "With Funqy, a function is just:"
msgstr "Funqyでは、関数は単に次のようになります。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:169
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-keyword\">import</span> io.quarkus.funqy.Funq;\n"
"\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GreetingFunction</span> </span>{\n"
"    <span class=\"hljs-meta\">@Funq</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(String name)</span> </span>{\n"
"       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + name;\n"
"    }\n"
"}</code>"
msgstr ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-"
"keyword\">import</span> io.quarkus.funqy.Funq;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:177
msgid "You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language."
msgstr "関数内でQuarkusのあらゆる機能を使用することができ、高速起動と低メモリ使用の恩恵を受けることができます。Quarkusでは、プログラミング言語を変更することなく、この新しい世界を受け入れることができます。"
