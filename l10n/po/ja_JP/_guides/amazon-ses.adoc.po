# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-11-24 10:04+0000\n"
"PO-Revision-Date: 2022-02-03 10:13+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amazon-ses.adoc:6
#, no-wrap
msgid "Amazon SES Client"
msgstr "Amazon SESクライアント"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:13
msgid "Amazon Simple Email Service (SES) is a flexible and highly-scalable email sending and receiving service.  Using SES, you can send emails with any type of correspondence. You can find more information about SES at https://aws.amazon.com/ses/[the Amazon SES website]."
msgstr "Amazon Simple Email Service(SES)は、柔軟で拡張性の高いメール送受信サービスです。SESを利用することで、あらゆる対応でメールを送信することができます。SESの詳細については、 link:https://aws.amazon.com/ses/[Amazon SESのウェブサイト] で確認できます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:16
msgid "The SES extension is based on https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html[AWS Java SDK 2.x].  It's a major rewrite of the 1.x code base that offers two programming models (Blocking & Async)."
msgstr "SESのエクステンションは link:https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html[AWS Java SDK 2.x] をベースにしており、2つのプログラミングモデル(Blocking & Async)を提供し、1.xのコードベースを大幅に書き換えています。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:20
msgid "The Quarkus extension supports two programming models:"
msgstr "Quarkusエクステンションは、2つのプログラミングモデルをサポートしています:"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:22
msgid "Blocking access using URL Connection HTTP client (by default) or the Apache HTTP Client"
msgstr "URL Connection HTTP クライアント (デフォルト) または Apache HTTP クライアントを使ったブロッキングアクセス"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:23
msgid "https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html[Asynchronous programming] based on JDK's `CompletableFuture` objects and the Netty HTTP client."
msgstr "JDK の `CompletableFuture` オブジェクトと Netty HTTP クライアントをベースにした link:https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html[非同期プログラミング]"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:25
msgid "In this guide, we see how you can get your REST services to use SES locally and on AWS."
msgstr "このガイドでは、RESTサービスを利用してローカルおよびAWS上でSESを利用する方法を見ていきます。"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:26
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:29
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:31
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11+ がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:32
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:33
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:34
msgid "An AWS Account to access the SES service"
msgstr "SESサービスにアクセスするためのAWSアカウント"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:35
msgid "Docker for your system to run SES locally for testing purposes"
msgstr "手元のシステムでテスト目的でローカルにSESを実行するためのDocker"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:36
#, no-wrap
msgid "Set up SES locally"
msgstr "ローカルでSESをセットアップ"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:40
msgid "The easiest way to start working with SES is to run a local instance as a container.  However, local instance of SES is only mocks the SES APIs without the actual email sending capabilities. You can still use it for this guide to verify an API communication or integration test purposes."
msgstr "SESを使い始める最も簡単な方法は、コンテナーとしてローカルインスタンスを実行することです。しかし、SESのローカルインスタンスは、実際のメール送信機能を持たずにSESのAPIをモックしているに過ぎません。それでも、このガイドではAPI通信の検証や統合テストの目的で使用することができます。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:44
#, no-wrap
msgid "docker run --rm --name local-ses -p 8012:4579 -e SERVICES=ses -e START_WEB=0 -d localstack/localstack:0.11.1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:46
msgid "This starts a SES instance that is accessible on port `8012`."
msgstr "これは、ポート `8012` でアクセス可能な SES インスタンスを起動します。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:48
msgid "Create an AWS profile for your local instance using AWS CLI:"
msgstr "AWS CLIを使ってローカルインスタンスのAWSプロファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:55
#, no-wrap
msgid ""
"$ aws configure --profile localstack\n"
"AWS Access Key ID [None]: test-key\n"
"AWS Secret Access Key [None]: test-secret\n"
"Default region name [None]: us-east-1\n"
"Default output format [None]: text\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:57
#, no-wrap
msgid "Using SES on your AWS account"
msgstr "AWSアカウントでSESを使用"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:61
msgid "Amazon applies certain restrictions to new Amazon SES accounts, mainly to prevent fraud and abuse. All new accounts are in the Amazon SES *sandbox*.  All the features of the Amazon SES are still available while in sandbox, but a following restrictions applies:"
msgstr "Amazonは、主に詐欺や悪用を防ぐために、Amazon SESの新規アカウントに一定の制限を適用しています。新規アカウントはすべてAmazon SESの *サンドボックス* に入っています。サンドボックスにいる間もAmazon SESの機能はすべて利用できますが、以下の制限が適用されます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:62
msgid "You can send mail to verified email addresses and domains or to the https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-simulator.html[Amazon SES mailbox simulator]"
msgstr "検証済みのメールアドレスやドメイン、 link:https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-simulator.html[Amazon SESのメールボックスシミュレータ] にメールを送信することができます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:63
msgid "You can only send mail from verified email addresses and domains"
msgstr "検証済みのメールアドレスとドメインからのみメールを送信することができます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:64
msgid "You can send a maximum of 1 message per second."
msgstr "1秒間に最大1メッセージまで送信することができます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:66
msgid "Going production, you'd need to get your account of the sandbox following the https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html[Amazon procedure]."
msgstr "本番では、 link:https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html[Amazonの手順] に沿ってサンドボックスのアカウントを取得する必要があります。"

#. type: Title ===
#: upstream/_guides/amazon-ses.adoc:67
#, no-wrap
msgid "Set up AWS SES"
msgstr "AWS SESのセットアップ"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:71
msgid "We assume you are going to use AWS SES sandbox for the sake of this guide. But before sending any email, you must verify sender and recipient email addresses using AWS CLI.  You can use your personal email or any temporary email service available if you wish."
msgstr "このガイドでは、AWS SESサンドボックスを使用することを想定しています。しかし、メールを送信する前に、AWS CLIを使って送信者と受信者のメールアドレスを確認する必要があります。必要に応じて、個人のメールや利用可能な一時的なメールサービスを利用することができます。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:76
#, no-wrap
msgid ""
"aws ses verify-email-identity --email-address <sender@email.address>\n"
"aws ses verify-email-identity --email-address <recipient@email.address>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:78
msgid "Now, you need to open a mailboxes of those email addresses in order to follow confirmation procedure. Once email is approved you can use it in your application."
msgstr "ここで、確認のためにメールアドレスのメールボックスを開く必要があります。メールが承認されれば、アプリケーションに使用することができます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:81
msgid "If you are using local SES you still need to verify email addresses, otherwise your send email in order to let local SES accepting your request.  However, no emails to be send as it only mocks the service APIs."
msgstr "ローカルSESを使用している場合でも、メールアドレスを確認する必要があります。確認ができない場合は、ローカルSESにリクエストを受け付けるためにメールを送信します。ただし、サービスのAPIをモックするだけなので、メールは送信されません。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:86
#, no-wrap
msgid ""
"aws ses verify-email-identity --email-address <sender@email.address> --profile localstack --endpoint-url=http://localhost:8012\n"
"aws ses verify-email-identity --email-address <recipient@email.address> --profile localstack --endpoint-url=http://localhost:8012\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:88
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:90
msgid "The application built here allows sending text emails to the recipients that are verified on AWS SES."
msgstr "ここで構築したアプリケーションでは、AWS SES上で確認された受信者にテキストメールを送信することができます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:93
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:95
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:97
msgid "The solution is located in the `amazon-ses-quickstart` {quickstarts-tree-url}/amazon-ses-quickstart[directory]."
msgstr "ソリューションは `amazon-ses-quickstart` {quickstarts-tree-url}/amazon-ses-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:98
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:101
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:111
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amazon-ses-quickstart \\\n"
"    -DclassName=\"org.acme.ses.QuarkusSesSyncResource\" \\\n"
"    -Dpath=\"/sync\" \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson,amazon-ses,resteasy-mutiny\"\n"
"cd amazon-ses-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:115
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS, Mutiny and Amazon SES Client extensions.  After this, the `amazon-ses` extension has been added to your `pom.xml` as well as the Mutiny support for RESTEasy."
msgstr "このコマンドは、RESTEasy/JAX-RS、Mutiny、Amazon SES ClientエクステンションをインポートするMavenディレクトリ構造を生成します。 この後、RESTEasyのMutinyサポートと同様に、 `amazon-ses` エクステンションが `pom.xml` に追加されています。"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:116
#, no-wrap
msgid "Creating JSON REST service"
msgstr "JSON RESTサービスの作成"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:119
msgid "Lets create a `org.acme.ses.QuarkusSesSyncResource` that will provide an API to send emails using the synchronous client."
msgstr "同期クライアントを使用して電子メールを送信するためのAPIを提供する `org.acme.ses.QuarkusSesSyncResource` を作成しましょう。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:123 upstream/_guides/amazon-ses.adoc:229
#, no-wrap
msgid "package org.acme.ses;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:132
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.acme.ses.model.Email;\n"
"import software.amazon.awssdk.services.ses.SesClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:137
#, no-wrap
msgid ""
"@Path(\"/sync\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class QuarkusSesSyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:140
#, no-wrap
msgid ""
"    @Inject\n"
"    SesClient ses;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:152
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/email\")\n"
"    public String encrypt(Email data) {\n"
"        return ses.sendEmail(req -> req\n"
"            .source(data.getFrom())\n"
"            .destination(d -> d.toAddresses(data.getTo()))\n"
"            .message(msg -> msg\n"
"                .subject(sub -> sub.data(data.getSubject()))\n"
"                .body(b -> b.text(txt -> txt.data(data.getBody()))))).messageId();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:154
#, no-wrap
msgid "Configuring SES clients"
msgstr "SESクライアントの設定"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:159
msgid "Both SES clients (sync and async) are configurable via the `application.properties` file that can be provided in the `src/main/resources` directory.  Additionally, you need to add to the classpath a proper implementation of the sync client. By default the extension uses the URL connection HTTP client, so you need to add a URL connection client dependency to the `pom.xml` file:"
msgstr "SES クライアント (sync と async) は、 `src/main/resources` ディレクトリーにある `application.properties` ファイルを介して設定可能です。さらに、同期クライアントの適切な実装をクラスパスに追加する必要があります。デフォルトでは、エクステンションは URL connection HTTP クライアントを使用するので、URL connection クライアントの依存関係を `pom.xml` ファイルに追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:166
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>url-connection-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:169
msgid "If you want to use Apache HTTP client instead, configure it as follows:"
msgstr "代わりにApache HTTPクライアントを使用したい場合は、以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:172
#, no-wrap
msgid "quarkus.ses.sync-client.type=apache\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:175
msgid "And add the following dependency to the application `pom.xml`:"
msgstr "そして、以下の依存関係をアプリケーションの `pom.xml` に追加します"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:185
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>apache-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-apache-httpclient</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:188
msgid "If you're going to use a local SES instance, configure it as follows:"
msgstr "ローカルのSESインスタンスを使用する場合は、以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:192
#, no-wrap
msgid "quarkus.ses.endpoint-override=http://localhost:8012\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:197
#, no-wrap
msgid ""
"quarkus.ses.aws.region=us-east-1\n"
"quarkus.ses.aws.credentials.type=static\n"
"quarkus.ses.aws.credentials.static-provider.access-key-id=test-key\n"
"quarkus.ses.aws.credentials.static-provider.secret-access-key=test-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:200
msgid "`quarkus.ses.aws.region` - It's required by the client, but since you're using a local SES instance use `us-east-1` as it's a default region of localstack's SES."
msgstr "`quarkus.ses.aws.region` - クライアントによって必要とされますが、ローカルのSESインスタンスを使用しているので、ローカルスタックのSESのデフォルトリージョンである `us-east-1` を使用してください。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:201
msgid "`quarkus.ses.aws.credentials.type` - Set `static` credentials provider with any values for `access-key-id` and `secret-access-key`"
msgstr "`quarkus.ses.aws.credentials.type` - `static` の資格情報プロバイダを `access-key-id` と `secret-access-key` について任意の値で設定します。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:202
msgid "`quarkus.ses.endpoint-override` - Override the SES client to use a local instance instead of an AWS service"
msgstr "`quarkus.ses.endpoint-override` - SES クライアントをオーバーライドして AWS サービスの代わりにローカルインスタンスを使うようにします"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:205
msgid "If you want to work with an AWS account, you can simply remove or comment out all Amazon SES related properties. By default, the SES client extension will use the `default` credentials provider chain that looks for credentials in this order:"
msgstr "AWSアカウントで作業したい場合は、Amazon SES関連のプロパティーをすべて削除するかコメントアウトするだけです。デフォルトでは、SESクライアントエクステンションは、次の順番でクレデンシャルを探す `default` クレデンシャルプロバイダチェーンを使用します:"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:209
msgid "And the region from your AWS CLI profile will be used."
msgstr "そして、AWS CLIプロファイルからのリージョンが使用されます。"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:210
#, no-wrap
msgid "Next steps"
msgstr "次のステップ"

#. type: Title ===
#: upstream/_guides/amazon-ses.adoc:212
#, no-wrap
msgid "Packaging"
msgstr "パッケージング"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:216
msgid "Packaging your application is as simple as `./mvnw clean package`.  It can be run with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "アプリケーションのパッケージ化は `./mvnw clean package` するだけと簡単です。 `java -jar target/amazon-ses-quickstart-1.0-SNAPSHOT-runner.jar` で実行できます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:219
msgid "With GraalVM installed, you can also create a native executable binary: `./mvnw clean package -Dnative`.  Depending on your system, that will take some time."
msgstr "GraalVMをインストールした状態であれば、ネイティブの実行バイナリーを作成することもできます: `./mvnw clean package -Dnative` 。お使いのシステムにもよりますが、多少時間が掛かります。"

#. type: Title ===
#: upstream/_guides/amazon-ses.adoc:220
#, no-wrap
msgid "Going asynchronous"
msgstr "非同期に"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:223
msgid "Thanks to the AWS SDK v2.x used by the Quarkus extension, you can use the asynchronous programming model out of the box."
msgstr "Quarkusのエクステンションで使われているAWS SDK v2.xのおかげで、非同期プログラミングモデルをすぐに使えるようになりました。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:225
msgid "Create a `org.acme.ses.QuarkusSesAsyncResource` REST resource that will be similar to our `QuarkusSesSyncResource` but using an asynchronous programming model."
msgstr "`org.acme.ses.QuarkusSesAsyncResource` RESTリソースを作成します。 `QuarkusSesSyncResource` と似ていますが、非同期プログラミングモデルを使用しています。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:240
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.acme.ses.model.Email;\n"
"import software.amazon.awssdk.services.ses.SesAsyncClient;\n"
"import software.amazon.awssdk.services.ses.model.SendEmailResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:245
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class QuarkusSesAsyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:248
#, no-wrap
msgid ""
"    @Inject\n"
"    SesAsyncClient ses;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:263
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/email\")\n"
"    public Uni<String> encrypt(Email data) {\n"
"        return Uni.createFrom()\n"
"            .completionStage(\n"
"                ses.sendEmail(req -> req\n"
"                    .source(data.getFrom())\n"
"                    .destination(d -> d.toAddresses(data.getTo()))\n"
"                    .message(msg -> msg\n"
"                        .subject(sub -> sub.data(data.getSubject()))\n"
"                        .body(b -> b.text(txt -> txt.data(data.getBody()))))))\n"
"            .onItem().apply(SendEmailResponse::messageId);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:265
msgid "We create `Uni` instances from the `CompletionStage` objects returned by the asynchronous SES client, and then transform the emitted item."
msgstr "非同期SESクライアントから返された `CompletionStage` オブジェクトから `Uni` インスタンスを作成し、生成されたアイテムを変換します。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:267
msgid "And we need to add the Netty HTTP client dependency to the `pom.xml`:"
msgstr "そして、Netty HTTPクライアント依存関係を `pom.xml` に追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:274
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>netty-nio-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:276
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
