# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2022-02-03 10:14+0900\n"
"Last-Translator: Hiroshi Yamanaka <hyamanak@redhat.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/scheduler.adoc:6
#, no-wrap
msgid "Scheduling Periodic Tasks"
msgstr "定期的なタスクのスケジューリング"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:12
msgid "Modern applications often need to run specific tasks periodically.  In this guide, you learn how to schedule periodic tasks."
msgstr "最近のアプリケーションでは、定期的に特定のタスクを実行する必要があります。このガイドでは、定期的なタスクのスケジュール方法を説明します。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:14
msgid "If you need a clustered scheduler use the xref:quartz.adoc[Quartz extension]."
msgstr "クラスター化されたスケジューラーが必要な場合は、 link:quartz[Quartzエクステンション] を使用してください。"

#. type: Title ==
#: upstream/_guides/scheduler.adoc:15
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/scheduler.adoc:19 upstream/_guides/scheduler.adoc:24
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:23
msgid "In this guide, we create a straightforward application accessible using HTTP to get the current value of a counter.  This counter is periodically (every 10 seconds) incremented."
msgstr "このガイドでは、カウンタの現在値を取得するために HTTP を使用してアクセスできる簡単なアプリケーションを作成します。このカウンタは定期的に (10 秒ごとに) インクリメントされます。"

#. type: Target for macro image
#: upstream/_guides/scheduler.adoc:24
#, fuzzy, no-wrap
msgid "scheduling-task-architecture.png"
msgstr "image:scheduling-task-architecture.png[alt=Architecture]"

#. type: Title ==
#: upstream/_guides/scheduler.adoc:26
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:30
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションの指示に従い、手順を追ってアプリを作成することをお勧めします。完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:32
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Git レポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:34
msgid "The solution is located in the `scheduler-quickstart` {quickstarts-tree-url}/scheduler-quickstart[directory]."
msgstr "ソリューションは `scheduler-quickstart` {quickstarts-tree-url}/scheduler-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/scheduler.adoc:35
#, no-wrap
msgid "Creating the Maven project"
msgstr "Maven プロジェクトの作成"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:38
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:44
#, fuzzy
msgid "It generates a new project including:"
msgstr "を含む新しいプロジェクトを生成します。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:46
msgid "a landing page accessible on `http://localhost:8080`"
msgstr "ランディングページは、`http://localhost:8080` でアクセス可能です。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:47
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr "`native` と `jvm` の両方のモードに対応した `Dockerfile` ファイルの例"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:48
msgid "the application configuration file"
msgstr "アプリケーション設定ファイル"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:50
#, fuzzy
msgid "The project also imports the RESTEasy Reactive and scheduler extensions."
msgstr "Maven プロジェクトは、Quarkus scheduler エクステンションもインポートします。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:53
msgid "If you already have your Quarkus project configured, you can add the `scheduler` extension to your project by running the following command in your project base directory:"
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `scheduler` エクステンションを追加することができます。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:58
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます。"

#. type: Block title
#: upstream/_guides/scheduler.adoc:60
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:66
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-scheduler</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/scheduler.adoc:69
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:72
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-scheduler\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/scheduler.adoc:75
#, no-wrap
msgid "Creating a scheduled job"
msgstr "スケジュールされたジョブの作成"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:78
msgid "In the `org.acme.scheduler` package, create the `CounterBean` class, with the following content:"
msgstr "`org.acme.scheduler` パッケージで、以下の内容の `CounterBean` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:82 upstream/_guides/scheduler.adoc:142
#, no-wrap
msgid "package org.acme.scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:87
#, no-wrap
msgid ""
"import java.util.concurrent.atomic.AtomicInteger;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import io.quarkus.scheduler.Scheduled;\n"
"import io.quarkus.scheduler.ScheduledExecution;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:90
#, no-wrap
msgid ""
"@ApplicationScoped              // <1>\n"
"public class CounterBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:92
#, no-wrap
msgid "    private AtomicInteger counter = new AtomicInteger();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:96
#, no-wrap
msgid ""
"    public int get() {  // <2>\n"
"        return counter.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:101
#, no-wrap
msgid ""
"    @Scheduled(every=\"10s\")     // <3>\n"
"    void increment() {\n"
"        counter.incrementAndGet(); // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:107
#, no-wrap
msgid ""
"    @Scheduled(cron=\"0 15 10 * * ?\") <5>\n"
"    void cronJob(ScheduledExecution execution) {\n"
"        counter.incrementAndGet();\n"
"        System.out.println(execution.getScheduledFireTime());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:114
#, no-wrap
msgid ""
"    @Scheduled(cron = \"{cron.expr}\") <6>\n"
"    void cronJobWithExpressionInConfig() {\n"
"       counter.incrementAndGet();\n"
"       System.out.println(\"Cron expression configured in application.properties\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler.adoc:116
msgid "Declare the bean in the _application_ scope"
msgstr "_application_ スコープでの Bean の宣言"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:117
msgid "The `get()` method allows retrieving the current value."
msgstr "`get()` メソッドでは、現在の値を取得することができます。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:120
msgid "Use the `@Scheduled` annotation to instruct Quarkus to run this method every 10 seconds provided a worker thread is available (Quarkus is using 10 worker threads for the scheduler). If it is not available the method invocation should be re-scheduled by default i.e it should be invoked as soon as possible. The invocation of the scheduled method does not depend on the status or result of the previous invocation."
msgstr "`@Scheduled` アノテーションを使用して、ワーカースレッドが利用可能であれば 10 秒ごとにこのメソッドを実行するように Quarkus に指示します (Quarkus はスケジューラーに10個のワーカースレッドを使用しています)。ワーカースレッドが利用できない場合は、メソッドの呼び出しをデフォルトで再スケジューリングする必要があります。スケジュールされたメソッドの呼び出しは、前回の呼び出しのステータスや結果には依存しません。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:121
msgid "The code is pretty straightforward. Every 10 seconds, the counter is incremented."
msgstr "コードはとても簡単です。10 秒ごとにカウンターがインクリメントされます。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:122
msgid "Define a job with a cron-like expression. The annotated method is executed at 10:15am every day."
msgstr "cron のような式でジョブを定義します。アノテーションされたメソッドは毎日午前 10 時 15 分に実行されます。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:123
msgid "Define a job with a cron-like expression `cron.expr` which is configurable in `application.properties`."
msgstr "`application.properties` で設定可能な`cron.expr` で cron のような式でジョブを定義します。"

#. type: Title ==
#: upstream/_guides/scheduler.adoc:124
#, no-wrap
msgid "Updating the application configuration file"
msgstr "アプリケーション設定ファイルの更新"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:127
msgid "Edit the `application.properties` file and add the `cron.expr` configuration:"
msgstr "`application.properties` ファイルを編集し、 `cron.expr` の設定を追加します:"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:133
#, no-wrap
msgid ""
"# By default, the syntax used for cron expressions is based on Quartz - http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html\n"
"# You can change the syntax using the following property:\n"
"# quarkus.scheduler.cron-type=unix\n"
"cron.expr=*/5 * * * * ?\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/scheduler.adoc:135
#, fuzzy, no-wrap
msgid "Creating the REST resource"
msgstr "Maven プロジェクトの作成"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:138
#, fuzzy
msgid "Create the `CountResource` class as follows:"
msgstr "`CountResource` クラスを編集して、内容を更新します。"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:148
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:151
#, no-wrap
msgid ""
"@Path(\"/count\")\n"
"public class CountResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:154
#, no-wrap
msgid ""
"    @Inject\n"
"    CounterBean counter;            // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:162
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"count: \" + counter.get();  // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler.adoc:164
msgid "Inject the `CounterBean`"
msgstr "`CounterBean` の注入"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:165
msgid "Send back the current counter value"
msgstr "現在のカウンターの値の返却"

#. type: Title ==
#: upstream/_guides/scheduler.adoc:166
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションのパッケージ化と実行"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:169
#, fuzzy
msgid "Run the application with:"
msgstr "アプリケーションのパッケージ化と実行"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:174
#, fuzzy
msgid "In another terminal, run `curl localhost:8080/count` to check the counter value.  After a few seconds, re-run `curl localhost:8080/count` to verify the counter has been incremented."
msgstr "`./mvnw compile quarkus:dev` でアプリケーションを実行してください。別のターミナルで `curl localhost:8080/count` を実行して、カウンターの値を確認します。数秒後に `curl localhost:8080/count` を再実行して、カウンターがインクリメントされていることを確認します。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:177
msgid "Observe the console to verify that the message `Cron expression configured in application.properties` has been displayed indicating that the cron job using an expression configured in `application.properties` has been triggered."
msgstr "コンソールを見て、 `application.properties` で構成された式を使用する cron ジョブがトリガーされたことを示すメッセージ `Cron expression configured in application.properties` が表示されたことを確認します。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:179
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:183
#, fuzzy
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして、 `java -jar target/quarkus-app/quarkus-run.jar` で実行しました。"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:185
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#. type: Title ==
#: upstream/_guides/scheduler.adoc:189
#, no-wrap
msgid "Scheduler Configuration Reference"
msgstr "スケジューラー設定リファレンス"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です。"

#~ msgid "less than 10 minutes"
#~ msgstr "10 分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "It generates:"
#~ msgstr "以下が生成されます。"

#~ msgid "the Maven structure"
#~ msgstr "Maven の構造"

#~ msgid "an `org.acme.scheduler.CountResource` resource"
#~ msgstr "`org.acme.scheduler.CountResource` リソース"

#~ msgid "an associated test"
#~ msgstr "関連するユニットテスト"

#~ msgid "Updating the resource and the test"
#~ msgstr "リソースとテストの更新"

#~ msgid "We also need to update the tests. Edit the `CountResourceTest` class to match:"
#~ msgstr "テストも更新する必要があります。`CountResourceTest` クラスを一致するように編集します。"

#~ msgid "}\n"
#~ msgstr "}\n"

#~ msgid "Ensure that the response contains `count`"
#~ msgstr "レスポンスに `count` が含まれていることを確認"

#~ msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `target/quarkus-app/quarkus-run.jar` file.  You can also generate the native executable with `./mvnw clean package -Pnative`."
#~ msgstr "通常通り、 `./mvnw clean package` を使ってアプリケーションをパッケージ化し、 `target/quarkus-app/quarkus-run.jar` ファイルを使って実行することができます。また、 `./mvnw clean package -Pnative` でネイティブ実行可能ファイルを生成することも可能です。"
