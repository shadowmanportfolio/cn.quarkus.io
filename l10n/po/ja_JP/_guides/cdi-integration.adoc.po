# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-02-04 01:50+0900\n"
"PO-Revision-Date: 2022-02-03 16:26+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/cdi-integration.adoc:6
#, no-wrap
msgid "CDI Integration Guide"
msgstr "CDIインテグレーションガイド"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:16
msgid "ArC, the CDI container, is bootstrapped at build time.  The downside of this approach is that CDI Portable Extensions cannot be supported.  Nevertheless, the functionality can be achieved using the Quarkus-specific extensions API."
msgstr "CDI コンテナーである ArC はビルド時にブートストラップされます。このアプローチの欠点は、CDI Portable Extensionsをサポートできないことです。それにもかかわらず、Quarkus固有のエクステンションAPIを使用して機能を実現することができます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:19
msgid "The container is bootstrapped in multiple phases.  From a high level perspective these phases go as follows:"
msgstr "コンテナーは複数のフェーズでブートストラップされます。高レベルの視点から見ると、これらのフェーズは以下のようになります。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:21
msgid "Initialization"
msgstr "初期化"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:22
msgid "Bean discovery"
msgstr "Beanの発見"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:23
msgid "Registration of synthetic components"
msgstr "合成コンポーネントの登録"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:24
msgid "Validation"
msgstr "バリデーション"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:31
msgid "In the _initialization_ phase the preparatory work is being carried out and custom contexts are registered.  _Bean discovery_ is then the process where the container analyzes all application classes, identifies beans and wires them all together based on the provided metadata.  Subsequently, the extensions can register _synthetic components_.  Attributes of these components are fully controlled by the extensions, i.e. are not derived from an existing class.  Finally, the _deployment is validated_.  For example, the container validates every injection point in the application and fails the build if there is no bean that satisfies the given required type and qualifiers."
msgstr "_初期化_ フェーズでは、準備作業が行われ、カスタムコンテキストが登録されます。その後、コンテナーがすべてのアプリケーションクラスを分析し、Beanを識別し、提供されたメタデータに基づいてそれらをすべて繋ぎ合わせるプロセスがBean _ディスカバリ_ です。その後、エクステンションは _合成コンポーネント_ を登録することができます。これらのコンポーネントの属性はエクステンションによって完全に制御されます。最後に、 _デプロイメントが検証されます_ 。例えば、コンテナーはアプリケーション内のすべての注入ポイントを検証し、与えられた必要な型と修飾子を満たすBeanがない場合はビルドを失敗させます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:33
msgid "You can see more information about the bootstrap by enabling additional logging. Simply run the Maven build with `-X` or `--debug` and grep the lines that contain `io.quarkus.arc`. In the <<cdi-reference.adoc#dev-mode,development mode>>, you can use `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG` and two special endpoints are also registered automatically to provide some basic debug info in the JSON format."
msgstr "追加のロギングを有効にすることで、ブートストラップに関するより多くの情報を見ることができます。 `-X` または `--debug` で Maven ビルドを実行し、 `io.quarkus.arc` を含む行を grep するだけです。 link:cdi-reference.html#dev-mode[開発モード] では、 `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG` を使用することができ、2つの特別なエンドポイントも自動的に登録され、JSON形式でいくつかの基本的なデバッグ情報を提供します。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:36
msgid "Quarkus build steps can produce and consume various build items and hook into each phase.  In the following sections we will describe all the relevant build items and common scenarios."
msgstr "Quarkusのビルドステップでは、さまざまなビルドアイテムを生成したり消費したりして、各フェーズにフックすることができます。以下のセクションでは、関連するすべてのビルド項目と一般的なシナリオについて説明します。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:37
#, no-wrap
msgid "Metadata Sources"
msgstr "メタデータソース"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:44
msgid "Classes and annotations are the primary source of bean-level metadata.  The initial metadata are read from the _bean archive index_, an immutable https://github.com/wildfly/jandex[Jandex index, window=\"_blank\"] which is built from various sources during <<cdi-reference.adoc#bean_discovery,bean discovery>>.  However, extensions can add, remove or transform the metadata at certain stages of the bootstrap.  Moreover, extensions can also register <<synthetic_beans,synthetic components>>.  This is an important aspect to realize when integrating CDI components in Quarkus."
msgstr "クラスとアノテーションは、Beanレベルのメタデータの主要なソースです。初期のメタデータは、Beanの link:cdi-reference.html#bean_discovery[ディスカバリ] 時に様々なソースから構築される不変の link:https://github.com/wildfly/jandex[Jandexインデックス, window=\"_blank\"] である _Beanアーカイブインデックス_ から読み込まれます。しかし、エクステンションは、ブートストラップの特定の段階でメタデータを追加、削除、変換することができます。さらに、エクステンションは link:#synthetic_beans[合成コンポーネント] を登録することもできます。これは、CDIコンポーネントをQuarkusに統合する際に実現すべき重要な側面です。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:47
msgid "This way, extensions can turn classes, that would be otherwise ignored, into beans and vice versa.  For example, a class that declares a `@Scheduled` method is always registered as a bean even if it is not annotated with a bean defining annotation and would be normally ignored."
msgstr "このようにして、エクステンションは、そうでなければ無視されていたクラスをBeanに変えたり、その逆を行ったりすることができます。例えば、 `@Scheduled` メソッドを宣言するクラスは、たとえそれがBean定義アノテーションでアノテーションされておらず、通常は無視されるようなクラスであっても、常にBeanとして登録されます。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:51
#, no-wrap
msgid "Use Case - My Class Is Not Recognized as a Bean"
msgstr "ユースケース - クラスがBeanとして認識されません"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:57
msgid "An `UnsatisfiedResolutionException` indicates a problem during <<cdi.adoc#typesafe_resolution,typesafe resolution>>.  Sometimes an injection point cannot be satisfied even if there is a class on the classpath that appears to be eligible for injection.  There are several reasons why a class is not recognized and also several ways to fix it.  In the first step we should identify the _reason_."
msgstr "`UnsatisfiedResolutionException` は、 link:cdi.html#typesafe_resolution[タイプセーフ解決] 時に問題があることを示しています。クラスパス上にインジェクションが可能なクラスがあっても、インジェクションポイントを満たすことができないことがあります。クラスが認識されない理由はいくつかありますが、それを解決する方法もいくつかあります。最初のステップでは、その _理由_ を特定する必要があります。"

#. type: Title ===
#: upstream/_guides/cdi-integration.adoc:59
#, no-wrap
msgid "_Reason 1_: Class Is Not discovered "
msgstr "_理由1_ :クラスが発見されない"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:64
msgid "Quarkus has a <<cdi-reference.adoc#bean_discovery,simplified discovery>>.  It might happen that the class is not part of the application index.  For example, classes from the _runtime module_ of a Quarkus extension are not indexed automatically."
msgstr "Quarkusには link:cdi-reference.html#bean_discovery[簡易ディスカバリー] があります。クラスがアプリケーションのインデックスに含まれていないことが起こるかもしれません。例えば、Quarkusエクステンションの _実行時モジュール_ のクラスは自動的にインデックス化されません。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:68
msgid "_Solution_: Use the `AdditionalBeanBuildItem`.  This build item can be used to specify one or more additional classes to be analyzed during the discovery.  Additional bean classes are transparently added to the application index processed by the container."
msgstr "_解決策_ 。 `AdditionalBeanBuildItem` .このビルド項目は、ディスカバリー中に解析する1つ以上の追加クラスを指定するために使用することができます。追加のBean・クラスは、コンテナーによって処理されるアプリケーション・インデックスに透過的に追加されます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:70
msgid "It is not possible to conditionally enable/disable additional beans via the `@IfBuildProfile`, `@UnlessBuildProfile`, `@IfBuildProperty` and `@UnlessBuildProperty` annotations as described in <<cdi-reference.adoc#enable_build_profile>> and <<cdi-reference.adoc#enable_build_properties>>. Extensions should inspect the configuration or the current profile and only produce an `AdditionalBeanBuildItem` if really needed."
msgstr "<<cdi-reference.adoc#enable_build_profile>>および <<cdi-reference.adoc#enable_build_properties>> で説明されているように、 `@IfBuildProfile`, `@UnlessBuildProfile`, `@IfBuildProperty` および `@UnlessBuildProperty` アノテーションを介して、条件付きで追加のBeanを有効化/無効化することはできません。エクステンションは、設定または現在のプロファイルを検査し、本当に必要な場合にのみ `AdditionalBeanBuildItem` を生成するべきです。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:71
#, no-wrap
msgid "`AdditionalBeanBuildItem` Example"
msgstr "`AdditionalBeanBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:78
#, no-wrap
msgid ""
"@BuildStep\n"
"AdditionalBeanBuildItem additionalBeans() {\n"
"     return new AdditionalBeanBuildItem(SmallRyeHealthReporter.class, HealthServlet.class)); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:80
msgid "`AdditionalBeanBuildItem.Builder` can be used for more complex use cases."
msgstr "`AdditionalBeanBuildItem.Builder` は、より複雑なユースケースに使用することができます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:85
msgid "Bean classes added via `AdditionalBeanBuildItem` are _removable_ by default.  If the container considers them <<cdi-reference.adoc#remove_unused_beans,unused>>, they are just ignored.  However, you can use `AdditionalBeanBuildItem.Builder.setUnremovable()` method to instruct the container to never remove bean classes registered via this build item.  See also <<cdi-reference.adoc#remove_unused_beans,Removing Unused Beans>> and <<unremovable_builditem>> for more details."
msgstr "`AdditionalBeanBuildItem` 経由で追加された Bean クラスは、デフォルトでは _取り外し可能です_ 。コンテナーがそれらを link:cdi-reference.html#remove_unused_beans[未使用] とみなした場合、それらはただ無視されます。しかし、 `AdditionalBeanBuildItem.Builder.setUnremovable()` メソッドを使用して、このビルド項目を介して登録されたBeanクラスを絶対に削除しないようにコンテナーに指示することができます。詳細は、未使用のBeanの link:cdi-reference.html#remove_unused_beans[削除] と link:#unremovable_builditem[[unremovable_builditem]] も参照してください。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:88
msgid "It is aso possible to set the default scope via `AdditionalBeanBuildItem.Builder#setDefaultScope()`.  The default scope is only used if there is no scope declared on the bean class."
msgstr "`AdditionalBeanBuildItem.Builder#setDefaultScope()` からデフォルトのスコープを設定することも可能です。デフォルトのスコープは、Beanクラスにスコープが宣言されていない場合にのみ使用されます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:90
#: upstream/_guides/cdi-integration.adoc:132
msgid "If no default scope is specified the `@Dependent` pseudo-scope is used."
msgstr "デフォルトスコープが指定されていない場合は `@Dependent` 擬似スコープが使用されます。"

#. type: Title ===
#: upstream/_guides/cdi-integration.adoc:91
#, no-wrap
msgid "_Reason 2_: Class Is Discovered but Has No Bean Defining Annotation"
msgstr "_理由2_ : クラスは発見されたが、Beanを定義するアノテーションがない"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:96
#, fuzzy
msgid "In Quarkus, the application is represented by a single bean archive with the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#default_bean_discovery[bean discovery mode `annotated`, window=\"_blank\"].  Therefore, bean classes that don't have a https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#bean_defining_annotations[bean defining annotation, window=\"_blank\"] are ignored.  Bean defining annotations are declared on the class-level and include scopes, stereotypes and `@Interceptor`."
msgstr ""
"Quarkusでは、アプリケーションは、 link:https://jakarta.ee/specifications/cdi/"
"2.0/cdi-spec-2.0.html#default_bean_discovery[ビーン発見モード `annotated`, "
"window=_blank] の単一のビーンアーカイブによって表されます。したがって、 "
"link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0."
"html#bean_defining_annotations[Bean定義アノテーション, window=_blank]を持たな"
"いBeanクラスは無視されます。Bean定義アノテーションは，クラスレベルで宣言され"
"，スコープ，ステレオタイプおよび `@Interceptor` を含む。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:98
msgid "_Solution 1_: Use the `AutoAddScopeBuildItem`. This build item can be used to add a scope to a class that meets certain conditions."
msgstr "_解決策1_ : `AutoAddScopeBuildItem` の使用。このビルドアイテムを使用すると、特定の条件を満たすクラスにスコープを追加することができます。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:99
#, no-wrap
msgid "`AutoAddScopeBuildItem` Example"
msgstr "`AutoAddScopeBuildItem` の例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:108
#, no-wrap
msgid ""
"@BuildStep\n"
"AutoAddScopeBuildItem autoAddScope() {\n"
"   return AutoAddScopeBuildItem.builder().containsAnnotations(SCHEDULED_NAME, SCHEDULES_NAME) <1>\n"
"      .defaultScope(BuiltinScope.SINGLETON) <2>\n"
"      .build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:110
msgid "Find all classes annotated with `@Scheduled`."
msgstr "`@Scheduled` でアノテーションされたすべてのクラスを検索"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:111
msgid "Add `@Singleton` as default scope. Classes already annotated with a scope are skipped automatically."
msgstr "デフォルトのスコープとして `@Singleton` を追加。既にスコープでアノテーションされているクラスは自動的にスキップされます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:113
#, fuzzy
msgid "_Solution 2_: If you need to process classes annotated with a specific annotation then it's possible to extend the set of bean defining annotations via the `BeanDefiningAnnotationBuildItem`."
msgstr ""
"_解決策2_: "
"特定のアノテーションでアノテーションされたクラスを処理する必要がある場合は、 "
"`BeanDefiningAnnotationBuildItem` "
"を通じて、ビーン定義アノテーションのセットを拡張することができます。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:114
#, no-wrap
msgid "`BeanDefiningAnnotationBuildItem` Example"
msgstr "`BeanDefiningAnnotationBuildItem` の例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:121
#, no-wrap
msgid ""
"@BuildStep\n"
"BeanDefiningAnnotationBuildItem additionalBeanDefiningAnnotation() {\n"
"   return new BeanDefiningAnnotationBuildItem(Annotations.GRAPHQL_API); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:123
#, fuzzy
msgid "Add `org.eclipse.microprofile.graphql.GraphQLApi` to the set of bean defining annotations."
msgstr "ビーン定義アノテーションのセットに `org.eclipse.microprofile.graphql."
"GraphQLApi` を追加します。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:127
#, fuzzy
msgid "Bean classes added via `BeanDefiningAnnotationBuildItem` are _not removable_ by default, i.e. the resulting beans must not be removed even if they are considered unused.  However, you can change the default behavior.  See also <<cdi-reference.adoc#remove_unused_beans,Removing Unused Beans>> and <<unremovable_builditem>> for more details."
msgstr ""
"`AdditionalBeanBuildItem` 経由で追加された Bean クラスは、デフォルトでは "
"_取り外し可能です_ 。コンテナーがそれらを link:cdi-reference."
"html#remove_unused_beans[未使用] "
"とみなした場合、それらはただ無視されます。しかし、 `AdditionalBeanBuildItem."
"Builder.setUnremovable()` メソッドを使用して、このビルド項目を介して登録され"
"たBeanクラスを絶対に削除しないようにコンテナーに指示することができます。詳細"
"は、未使用のBeanの link:cdi-reference.html#remove_unused_beans[削除] と "
"link:#unremovable_builditem[[unremovable_builditem]] も参照してください。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:130
#, fuzzy
msgid "It is also possible to specify the default scope.  The default scope is only used if there is no scope declared on the bean class."
msgstr ""
"`AdditionalBeanBuildItem.Builder#setDefaultScope()` からデフォルトのスコープ"
"を設定することも可能です。デフォルトのスコープは、Beanクラスにスコープが宣言"
"されていない場合にのみ使用されます。"

#. type: Title ===
#: upstream/_guides/cdi-integration.adoc:134
#, fuzzy, no-wrap
msgid "_Reason 3_: Class Was Discovered and Has a Bean Defining Annotation but Was Removed"
msgstr "_理由2_ : クラスは発見されたが、Beanを定義するアノテーションがない"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:141
#, fuzzy
msgid "The container attempts to <<cdi-reference.adoc#remove_unused_beans,remove all unused beans>> during the build by default.  This optimization allows for _framework-level dead code elimination_.  In few special cases, it's not possible to correctly identify an unused bean.  In particular, Quarkus is not able to detect the usage of the `CDI.current()` static method yet.  Extensions can eliminate possible false positives by producing an `UnremovableBeanBuildItem`."
msgstr ""
"コンテナは、デフォルトでは、ビルド中に link:cdi-reference.html#remove_unused_"
"beans[すべての未使用のBeanを削除]しようとします。この最適化により、 _フレーム"
"ワークレベルのデッドコードを排除_することができます。いくつかの特殊なケースで"
"は、未使用のBeanを正しく識別することができません。特に、Quarkusでは、 `CDI."
"current()` "
"のスタティックメソッドの使用をまだ検出できません。エクステンションは、 "
"`UnremovableBeanBuildItem` "
"を作成することで、誤検出の可能性を排除することができます。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:142
#, no-wrap
msgid "`UnremovableBeanBuildItem` Example"
msgstr "`UnremovableBeanBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:149
#, no-wrap
msgid ""
"@BuildStep\n"
"UnremovableBeanBuildItem unremovableBeans() {\n"
"   return UnremovableBeanBuildItem.targetWithAnnotation(STARTUP_NAME); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:151
msgid "Make all classes annotated with `@Startup` unremovable."
msgstr "`@Startup` でアノテーションされたすべてのクラスを削除できないようにする。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:152
#, fuzzy, no-wrap
msgid "Use Case - My Annotation Is Not Recognized as a Qualifier or an Interceptor Binding"
msgstr "ユースケース - クラスがBeanとして認識されません"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:156
#, fuzzy
msgid "It is likely that the annotation class is not part of the application index.  For example, classes from the _runtime module_ of a Quarkus extension are not indexed automatically."
msgstr ""
"Quarkusには link:cdi-reference.html#bean_discovery[簡易ディスカバリー] があり"
"ます。クラスがアプリケーションのインデックスに含まれていないことが起こるかも"
"しれません。例えば、Quarkusエクステンションの _実行時モジュール_ "
"のクラスは自動的にインデックス化されません。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:158
#, fuzzy
msgid "_Solution_: Use the `AdditionalBeanBuildItem` as described in <<additional_bean_build_item>>."
msgstr ""
"_解決策_です。 link:#additional_bean_build_item[additional_bean_build_item]]"
"で説明しているように、 `AdditionalBeanBuildItem` 。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:160
#, no-wrap
msgid "Use Case - I Need To Transform Metadata"
msgstr "ユースケース - メタデータを変換する必要があります"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:165
#, fuzzy
msgid "In some cases, it's useful to be able to modify the metadata.  Quarkus provides a powerful alternative to https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#process_annotated_type[`javax.enterprise.inject.spi.ProcessAnnotatedType`, window=\"_blank\"].  With an `AnnotationsTransformerBuildItem` it's possible to override the annotations that exist on bean classes."
msgstr ""
"場合によっては、メタデータを変更できると便利です。Quarkusは、強力な代替手段を"
"提供します。  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0."
"html#process_annotated_type[`javax.enterprise.inject.spi."
"ProcessAnnotatedType`, window=_blank]. `AnnotationsTransformerBuildItem` "
"、Beanクラスに存在するアノテーションをオーバーライドすることができます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:168
#, fuzzy
msgid "For example, you might want to add an interceptor binding to a specific bean class.  Here is how to do it:"
msgstr "たとえば、特定のBeanクラスにインターセプターバインディングを追加したい場合が"
"あります。ここではその方法を紹介します。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:169
#, no-wrap
msgid "`AnnotationsTransformerBuildItem` Example"
msgstr "`AnnotationsTransformerBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:175
#, no-wrap
msgid ""
"@BuildStep\n"
"AnnotationsTransformerBuildItem transform() {\n"
"   return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:179
#, no-wrap
msgid ""
"      public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n"
"         return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS; <1>\n"
"      }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:187
#, no-wrap
msgid ""
"      public void transform(TransformationContext context) {\n"
"         if (context.getTarget().asClass().name().toString().equals(\"org.acme.Bar\")) {\n"
"            context.transform().add(MyInterceptorBinding.class).done(); <2>\n"
"         }\n"
"      }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:189
msgid "The transformer is only applied to classes."
msgstr "トランスフォーマーはクラスにのみ適用されます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:190
#, fuzzy
msgid "If the class name equals to `org.acme.Bar` then add `@MyInterceptorBinding`. Don't forget to invoke `Transformation#done()`."
msgstr ""
"クラス名が `org.acme.Bar` に等しい場合は、 `@MyInterceptorBinding` "
"を追加します。 `Transformation#done()` を起動することを忘れないでください。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:192
msgid "Keep in mind that annotation transformers must be produced _before_ the bean discovery starts."
msgstr "アノテーショントランスフォーマーは、Beanディスカバリが始まる _前に_ 生成されなければならないことを覚えておいてください。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:194
#, fuzzy
msgid "Build steps can query the transformed annotations for a given annotation target via the `TransformedAnnotationsBuildItem`."
msgstr ""
"ビルドステップでは、 `TransformedAnnotationsBuildItem` を通じて、指定されたア"
"ノテーションターゲットに対して変換されたアノテーションを照会することができま"
"す。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:195
#, no-wrap
msgid "`TransformedAnnotationsBuildItem` Example"
msgstr "`TransformedAnnotationsBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:205
#, no-wrap
msgid ""
"@BuildStep\n"
"void queryAnnotations(TransformedAnnotationsBuildItem transformedAnnotations, BuildProducer<MyBuildItem> myBuildItem) {\n"
"   ClassInfo myClazz = ...;\n"
"   if (transformedAnnotations.getAnnotations(myClazz).isEmpty()) { <1>\n"
"     myBuildItem.produce(new MyBuildItem());\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:207
#, fuzzy
msgid "`TransformedAnnotationsBuildItem.getAnnotations()` will return a possibly transformed set of annotations."
msgstr ""
"`TransformedAnnotationsBuildItem.getAnnotations()` "
"は、おそらく変換されたアノテーションのセットを返します。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:209
#, fuzzy
msgid "There are other build items specialized in transformation: <<additional_interceptor_bindings>> and <<injection_point_transformation>>."
msgstr ""
"変形に特化したビルドアイテムは他にもあります。[ "
"link:#additional_interceptor_bindings[additional_interceptor_bindings]]と "
"link:#injection_point_transformation[[injection_point_transformation]]です。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:211
#, no-wrap
msgid "Use Case - Inspect Beans, Observers and Injection Points"
msgstr "使用例 - Bean、オブザーバー、インジェクションポイントの検査"

#. type: Title ===
#: upstream/_guides/cdi-integration.adoc:213
#, no-wrap
msgid "_Solution 1_: `BeanDiscoveryFinishedBuildItem`"
msgstr "_解決策1._ `BeanDiscoveryFinishedBuildItem`"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:217
#, fuzzy
msgid "Consumers of `BeanDiscoveryFinishedBuildItem` can easily inspect all class-based beans, observers and injection points registered in the application.  However, synthetic beans and observers are _not included_ because this build item is produced _before_ the synthetic components are registered."
msgstr ""
"`BeanDiscoveryFinishedBuildItem` の消費者は、アプリケーションに登録されている"
"すべてのクラスベースのビーン、オブザーバー、インジェクションポイントを簡単に"
"調べることができます。ただし、合成コンポーネントが登録される "
"_前に_このビルドアイテムが作成されるため、合成ビーンとオブザーバーは "
"_含ま_れません。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:219
#, fuzzy
msgid "Additionaly, the bean resolver returned from `BeanDiscoveryFinishedBuildItem#getBeanResolver()` can be used to apply the type-safe resolution rules, e.g. to find out whether there is a bean that would satisfy certain combination of required type and qualifiers."
msgstr ""
"さらに， `BeanDiscoveryFinishedBuildItem#getBeanResolver()` から返されたBean"
"リゾルバは，型安全解決規則を適用するために使用することができる。例えば，必要"
"な型と修飾子の特定の組み合わせを満たすBeanがあるかどうかを調べることができる"
"。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:220
#, no-wrap
msgid "`BeanDiscoveryFinishedBuildItem` Example"
msgstr "`BeanDiscoveryFinishedBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:228
#, no-wrap
msgid ""
"@BuildStep\n"
"void doSomethingWithNamedBeans(BeanDiscoveryFinishedBuildItem beanDiscovery, BuildProducer<NamedBeansBuildItem> namedBeans) {\n"
"   List<BeanInfo> namedBeans = beanDiscovery.beanStream().withName().collect(toList())); <1>\n"
"   namedBeans.produce(new NamedBeansBuildItem(namedBeans));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:230
#, fuzzy
msgid "The resulting list will not contain `@Named` synthetic beans."
msgstr "できあがったリストには、 `@Named` 合成豆は含まれません。"

#. type: Title ===
#: upstream/_guides/cdi-integration.adoc:231
#, no-wrap
msgid "_Solution 2_: `SynthesisFinishedBuildItem`"
msgstr "_解決策2_ : `SynthesisFinishedBuildItem`"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:234
#, fuzzy
msgid "Consumers of `SynthesisFinishedBuildItem` can easily inspect all beans, observers and injection points registered in the application. Synthetic beans and observers are included because this build item is produced _after_ the synthetic components are registered."
msgstr ""
"`SynthesisFinishedBuildItem` の消費者は、アプリケーションに登録されているすべ"
"てのビーン、オブザーバー、インジェクションポイントを簡単に検査することができ"
"ます。合成コンポーネントが登録され _た後に_このビルドアイテムが生成されるため"
"、合成ビーンとオブザーバーが含まれます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:236
#, fuzzy
msgid "Additionaly, the bean resolver returned from `SynthesisFinishedBuildItem#getBeanResolver()` can be used to apply the type-safe resolution rules, e.g. to find out whether there is a bean that would satisfy certain combination of required type and qualifiers."
msgstr ""
"さらに， `SynthesisFinishedBuildItem#getBeanResolver()` から返されたBeanリゾ"
"ルバは，型安全解決規則を適用するために使用することができる。例えば，必要な型"
"と修飾子の特定の組み合わせを満たすBeanがあるかどうかを調べることができる。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:237
#, no-wrap
msgid "`SynthesisFinishedBuildItem` Example"
msgstr "`SynthesisFinishedBuildItem` の例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:245
#, no-wrap
msgid ""
"@BuildStep\n"
"void doSomethingWithNamedBeans(SynthesisFinishedBuildItem synthesisFinished, BuildProducer<NamedBeansBuildItem> namedBeans) {\n"
"   List<BeanInfo> namedBeans = synthesisFinished.beanStream().withName().collect(toList())); <1>\n"
"   namedBeans.produce(new NamedBeansBuildItem(namedBeans));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:247
#, fuzzy
msgid "The resulting list will contain `@Named` synthetic beans."
msgstr "できあがったリストには、 `@Named` の合成豆が含まれます。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:249
#, fuzzy, no-wrap
msgid "Use Case - The Need for Synthetic Beans"
msgstr "ユースケース - メタデータを変換する必要があります"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:255
#, fuzzy
msgid "Sometimes it is practical to be able to register a _synthetic bean_.  Bean attributes of a synthetic bean are not derived from a Java class, method or field.  Instead, all the attributes are defined by an extension.  In regular CDI, this could be achieved using the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#after_bean_discovery[`AfterBeanDiscovery.addBean()`, window=\"_blank\"] methods."
msgstr ""
"時には、 _合成Bean_を登録できることが実用的である。合成BeanのBean属性は，Java"
"クラス，メソッド又はフィールドから派生するものではない。代わりに，すべての属"
"性は，拡張子によって定義される。通常のCDIでは，これは，次のものを使用して達成"
"できる。  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0."
"html#after_bean_discovery[`AfterBeanDiscovery.addBean()`, "
"window=_blank]メソッドを使用します。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:257
#, fuzzy
msgid "_Solution_: If you need to register a synthetic bean then use the `SyntheticBeanBuildItem`."
msgstr "_解決策_です。合成豆を登録する必要がある場合は、 `SyntheticBeanBuildItem` "
"を使用してください。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:258
#, no-wrap
msgid "`SyntheticBeanBuildItem` Example 1"
msgstr "`SyntheticBeanBuildItem` 例1"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:268
#, no-wrap
msgid ""
"@BuildStep\n"
"SyntheticBeanBuildItem syntheticBean() {\n"
"   return SyntheticBeanBuildItem.configure(String.class)\n"
"             .qualifiers(new MyQualifierLiteral())\n"
"             .creator(mc -> mc.returnValue(mc.load(\"foo\"))) <1>\n"
"             .done();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:270
#, fuzzy
msgid "Generate the bytecode of the `javax.enterprise.context.spi.Contextual#create(CreationalContext<T>)` implementation."
msgstr ""
"`javax.enterprise.context.spi.Contextual#create(CreationalContext<T>)` "
"の実装のバイトコードを生成します。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:274
#, fuzzy
msgid "The output of a bean configurator is recorded as bytecode.  Therefore, there are some limitations in how a synthetic bean instance is created at runtime.  You can:"
msgstr ""
"Beanコンフィギュレータの出力はバイトコードとして記録されます。そのため、実行"
"時に合成Beanインスタンスを作成する方法には制限があります。できます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:276
#, fuzzy
msgid "Generate the bytecode of the `Contextual#create(CreationalContext<T>)` method directly via `ExtendedBeanConfigurator.creator(Consumer<MethodCreator>)`."
msgstr ""
"`Contextual#create(CreationalContext<T>)` メソッドのバイトコードを "
"`ExtendedBeanConfigurator.creator(Consumer<MethodCreator>)` "
"経由で直接生成します。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:277
#, fuzzy
msgid "Pass a `io.quarkus.arc.BeanCreator` implementation class via `ExtendedBeanConfigurator#creator(Class<? extends BeanCreator<U>>)`, and possibly specify some parameters via `ExtendedBeanConfigurator#param()`."
msgstr ""
"`io.quarkus.arc.BeanCreator` の実装クラスを "
"`ExtendedBeanConfigurator#creator(Class<? extends BeanCreator<U>>)` で渡し、"
"場合によっては `ExtendedBeanConfigurator#param()` "
"でいくつかのパラメータを指定します。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:278
#, fuzzy
msgid "Produce the runtime instance through a proxy returned from a <<writing-extensions.adoc#bytecode-recording,`@Recorder` method>> and set it via `ExtendedBeanConfigurator#runtimeValue(RuntimeValue<?>)` or `ExtendedBeanConfigurator#supplier(Supplier<?>)`."
msgstr ""
"link:writing-extensions.html#bytecode-recording[`@Recorder`]メソッドから返さ"
"れたプロキシを介してランタイムインスタンスを生成し、 "
"`ExtendedBeanConfigurator#runtimeValue(RuntimeValue<?>)` または "
"`ExtendedBeanConfigurator#supplier(Supplier<?>)` を介して設定します。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:279
#, no-wrap
msgid "`SyntheticBeanBuildItem` Example 2"
msgstr "`SyntheticBeanBuildItem` 例2"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:289
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(STATIC_INIT) <1>\n"
"SyntheticBeanBuildItem syntheticBean(TestRecorder recorder) {\n"
"   return SyntheticBeanBuildItem.configure(Foo.class).scope(Singleton.class)\n"
"                .runtimeValue(recorder.createFoo()) <2>\n"
"                .done();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:291
#, fuzzy
msgid "By default, a synthetic bean is initialized during `STATIC_INIT`."
msgstr "デフォルトでは、シンセティック・ビーンは `STATIC_INIT` 中に初期化されます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:292
#, fuzzy
msgid "The bean instance is supplied by a value returned from a recorder method."
msgstr "ビーンのインスタンスは、レコーダーのメソッドから返された値によって供給されま"
"す。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:295
#, fuzzy
msgid "It is possible to mark a synthetic bean to be initialized during `RUNTIME_INIT`.  See the <<writing-extensions.adoc#bootstrap-three-phases,Three Phases of Bootstrap and Quarkus Philosophy>> for more information about the difference between `STATIC_INIT` and `RUNTIME_INIT`."
msgstr ""
"`RUNTIME_INIT` 中に初期化される合成ビーンをマークすることは可能である。 "
"`STATIC_INIT` と `RUNTIME_INIT` の違いについては、「 link:writing-extensions."
"html#bootstrap-three-phases[Bootstrap の 3 段階」と「Quarkus "
"の哲学]」を参照してください。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:296
#, fuzzy, no-wrap
msgid "`RUNTIME_INIT` `SyntheticBeanBuildItem` Example"
msgstr "`SyntheticBeanBuildItem` 例1"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:307
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(RUNTIME_INIT) <1>\n"
"SyntheticBeanBuildItem syntheticBean(TestRecorder recorder) {\n"
"   return SyntheticBeanBuildItem.configure(Foo.class).scope(Singleton.class)\n"
"                .setRuntimeInit() <2>\n"
"                .runtimeValue(recorder.createFoo())\n"
"                .done();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:309
#, fuzzy
msgid "The recorder must be executed in the `ExecutionTime.RUNTIME_INIT` phase."
msgstr "レコーダーは、 `ExecutionTime.RUNTIME_INIT` の段階で実行する必要があります。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:310
#, fuzzy
msgid "The bean instance is initialized during `RUNTIME_INIT`."
msgstr "Bean インスタンスは `RUNTIME_INIT` で初期化されます。"

#. type: delimited block =
#: upstream/_guides/cdi-integration.adoc:314
#, fuzzy
msgid "Synthetic beans initialized during `RUNTIME_INIT` must not be accessed during `STATIC_INIT`. `RUNTIME_INIT` build steps that access a runtime-init synthetic bean should consume the `SyntheticBeansRuntimeInitBuildItem`:"
msgstr ""
"`RUNTIME_INIT` で初期化されたシンセティック・ビーンは、 `STATIC_INIT` "
"でアクセスしてはいけません。ランタイム・イニット・シンセティック・"
"ビーンにアクセスする `RUNTIME_INIT` ビルド・ステップは、 "
"`SyntheticBeansRuntimeInitBuildItem` を消費する必要があります。"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:323
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(RUNTIME_INIT) \n"
"@Consume(SyntheticBeansRuntimeInitBuildItem.class) <1>\n"
"void accessFoo(TestRecorder recorder) {\n"
"   recorder.foo(); <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:325
#, fuzzy
msgid "This build step must be executed after `syntheticBean()` completes."
msgstr "このビルドステップは、 `syntheticBean()` "
"が完了した後に実行する必要があります。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:326
#, fuzzy
msgid "This recorder method results in an invocation upon the `Foo` bean instance and thus we need to make sure that the build step is executed after all synthetic beans are initialized."
msgstr ""
"このレコーダーメソッドは、 `Foo` ビーンインスタンスへの呼び出しとなるため、す"
"べての合成ビーンが初期化された後にビルドステップが実行されるようにする必要が"
"あります。"

#. type: delimited block =
#: upstream/_guides/cdi-integration.adoc:329
#, fuzzy
msgid "It is also possible to use the `BeanRegistrationPhaseBuildItem` to register a synthetic bean. However, we recommend extension authors to stick with `SyntheticBeanBuildItem` which is more idiomatic for Quarkus."
msgstr ""
"また、 `BeanRegistrationPhaseBuildItem` を使用して合成ビーンを登録することも"
"可能です。しかし、エクステンションの作成者には、Quarkusでより慣用的な "
"`SyntheticBeanBuildItem` を使用することをお勧めします。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:331
#, fuzzy, no-wrap
msgid "Use Case - Synthetic Observers"
msgstr "使用例 - 合成観測装置"

#. type: delimited block =
#: upstream/_guides/cdi-integration.adoc:334
#, fuzzy
msgid "Similar to <<synthetic_beans,synthetic beans>>, the attributes of a synthetic observer method are not derived from a Java method. Instead, all the attributes are defined by an extension."
msgstr ""
"link:#synthetic_beans[シンセティック・ビーンズ]と同様に、シンセティック・オブ"
"ザーバー・メソッドの属性は、Javaのメソッドから派生したものではありません。代"
"わりに、すべての属性がエクステンションによって定義されます。"

#. type: delimited block =
#: upstream/_guides/cdi-integration.adoc:336
#, fuzzy
msgid "_Solution_: If you need to register a synthetic observer, use the `ObserverRegistrationPhaseBuildItem`."
msgstr "_解決します_。合成オブザーバーを登録する必要がある場合は、 "
"`ObserverRegistrationPhaseBuildItem`."

#. type: delimited block =
#: upstream/_guides/cdi-integration.adoc:338
#, fuzzy
msgid "A build step that consumes the `ObserverRegistrationPhaseBuildItem` should always produce an `ObserverConfiguratorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr ""
"`ObserverRegistrationPhaseBuildItem` を消費するビルドステップは、"
"常にこのビルドアイテムに対して `ObserverConfiguratorBuildItem` を生成するか、"
"少なくとも `BuildProducer` を注入しなければなりません。そうしないと、無視され"
"たり、間違ったタイミングで処理されたりする可能性があります（例：正しい CDI "
"のブートストラップフェーズの後）。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:339
#, no-wrap
msgid "`ObserverRegistrationPhaseBuildItem` Example"
msgstr "`ObserverRegistrationPhaseBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:355
#, no-wrap
msgid ""
"@BuildStep\n"
"void syntheticObserver(ObserverRegistrationPhaseBuildItem observerRegistrationPhase,\n"
"            BuildProducer<MyBuildItem> myBuildItem, \n"
"            BuildProducer<ObserverConfiguratorBuildItem> observerConfigurationRegistry) {\n"
"   observerConfigurationRegistry.produce(new ObserverConfiguratorBuildItem(observerRegistrationPhase.getContext()\n"
"       .configure()\n"
"       .beanClass(DotName.createSimple(MyBuildStep.class.getName()))\n"
"       .observedType(String.class)\n"
"       .notify(mc -> {\n"
"           // do some gizmo bytecode generation...\n"
"       })));\n"
"   myBuildItem.produce(new MyBuildItem());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:360
#, fuzzy
msgid "The output of a `ObserverConfigurator` is recorded as bytecode.  Therefore, there are some limitations in how a synthetic observer is invoked at runtime.  Currently, you must generate the bytecode of the method body directly."
msgstr ""
"`ObserverConfigurator` の出力はバイトコードとして記録されます。そのため、実行"
"時に合成オブザーバーを呼び出す方法にはいくつかの制限があります。現状では、メ"
"ソッドボディのバイトコードを直接生成する必要があります。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:362
#, fuzzy, no-wrap
msgid "Use Case - I Have a Generated Bean Class"
msgstr "ユースケース - 生成されたBeanクラスがあります。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:366
#, fuzzy
msgid "No problem.  You can generate the bytecode of a bean class manually and then all you need to do is to produce a `GeneratedBeanBuildItem` instead of `GeneratedClassBuildItem`."
msgstr ""
"問題ありません。手動でBeanクラスのバイトコードを生成して、あとは "
"`GeneratedClassBuildItem` の代わりに `GeneratedBeanBuildItem` "
"を生成するだけでいいのではないでしょうか。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:367
#, no-wrap
msgid "`GeneratedBeanBuildItem` Example"
msgstr "`GeneratedBeanBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:379
#, no-wrap
msgid ""
"@BuildStep\n"
"void generatedBean(BuildProducer<GeneratedBeanBuildItem> generatedBeans) {\n"
"    ClassOutput beansClassOutput = new GeneratedBeanGizmoAdaptor(generatedBeans); <1>\n"
"    ClassCreator beanClassCreator = ClassCreator.builder().classOutput(beansClassOutput)\n"
"                .className(\"org.acme.MyBean\")\n"
"                .build();\n"
"    beanClassCreator.addAnnotation(Singleton.class);\n"
"    beanClassCreator.close(); <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:381
#, fuzzy
msgid "`io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor` makes it easy to produce ``GeneratedBeanBuildItem``s from Gizmo constructs."
msgstr ""
"`io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor` 、"
"Gizmoのコンストラクトから "
"`GeneratedBeanBuildItem`sを簡単に生成することができます。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:382
#, fuzzy
msgid "The resulting bean class is something like `public class @Singleton MyBean { }`."
msgstr "出来上がったビーンクラスは `public class @Singleton MyBean { }` "
"のようなものです。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:383
#, fuzzy, no-wrap
msgid "Use Case - I Need to Validate the Deployment"
msgstr "ユースケース - メタデータを変換する必要があります"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:386
#, fuzzy
msgid "Sometimes extensions need to inspect the beans, observers and injection points, then perform additional validations and fail the build if something is wrong."
msgstr ""
"エクステンションでは、ビーン、オブザーバー、インジェクションポイントを検査し"
"、さらに検証を行い、何か問題があればビルドを失敗させる必要がある場合がありま"
"す。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:388
#, fuzzy
msgid "_Solution_: If an extension needs to validate the deployment it should use the `ValidationPhaseBuildItem`."
msgstr ""
"_解決策_です。エクステンションがデプロイメントを検証する必要がある場合は、 "
"`ValidationPhaseBuildItem` を使用する必要があります。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:390
#, fuzzy
msgid "A build step that consumes the `ValidationPhaseBuildItem` should always produce a `ValidationErrorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr ""
"`ValidationPhaseBuildItem` を消費するビルドステップは、"
"常にこのビルドアイテムに対して `ValidationErrorBuildItem` を生成するか、"
"少なくとも `BuildProducer` を注入しなければなりません。そうしないと、無視され"
"たり、間違ったタイミングで処理されたりする可能性があります（例：正しい CDI "
"ブートストラップフェーズの後）。"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:402
#, no-wrap
msgid ""
"@BuildStep\n"
"void validate(ValidationPhaseBuildItem validationPhase,\n"
"            BuildProducer<MyBuildItem> myBuildItem, \n"
"            BuildProducer<ValidationErrorBuildItem> errors) {\n"
"   if (someCondition) {\n"
"     errors.produce(new ValidationErrorBuildItem(new IllegalStateException()));\n"
"     myBuildItem.produce(new MyBuildItem());\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:405
#, fuzzy
msgid "You can easily filter all registered beans via the convenient `BeanStream` returned from the `ValidationPhaseBuildItem.getContext().beans()` method."
msgstr ""
"`ValidationPhaseBuildItem.getContext().beans()` メソッドから返される便利な "
"`BeanStream` を介して、登録されているすべてのビーンを簡単にフィルタリングする"
"ことができます。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:407
#, no-wrap
msgid "Use Case - Register a Custom CDI Context"
msgstr "ユースケース - カスタム CDI コンテキストの登録"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:410
msgid "Sometimes extensions need to extend the set of built-in CDI contexts."
msgstr "時々、エクステンションは組み込みCDI コンテキストのセットを拡張する必要があります。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:412
#, fuzzy
msgid "_Solution_: If you need to register a custom context, use the `ContextRegistrationPhaseBuildItem`."
msgstr "_解決します_。カスタムコンテキストを登録する必要がある場合は、 "
"`ContextRegistrationPhaseBuildItem`."

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:414
#, fuzzy
msgid "A build step that consumes the `ContextRegistrationPhaseBuildItem` should always produce a `ContextConfiguratorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr ""
"`ContextRegistrationPhaseBuildItem` を消費するビルドステップは、"
"常にこのビルドアイテムに対して `ContextConfiguratorBuildItem` を生成するか、"
"少なくとも `BuildProducer` を注入しなければなりません。そうしないと、無視され"
"たり、間違ったタイミングで処理されたりする可能性があります（例：正しい CDI "
"ブートストラップフェーズの後）。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:416
msgid "`ContextRegistrationPhaseBuildItem` Example"
msgstr "`ContextRegistrationPhaseBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:422
#, no-wrap
msgid ""
"@BuildStep\n"
"ContextConfiguratorBuildItem registerContext(ContextRegistrationPhaseBuildItem phase) {\n"
"      return new ContextConfiguratorBuildItem(phase.getContext().configure(TransactionScoped.class).normal().contextClass(TransactionContext.class));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:425
#, fuzzy
msgid "Additionally, each extension that registers a custom CDI context via `ContextRegistrationPhaseBuildItem` should also produce the `CustomScopeBuildItem` in order to contribute the custom scope annotation name to the set of bean defining annotations."
msgstr ""
"さらに、 `ContextRegistrationPhaseBuildItem` を通じてカスタム CDI "
"コンテキストを登録する各エクステンションは、"
"カスタムスコープアノテーション名を Bean "
"定義アノテーションのセットに貢献するために、 `CustomScopeBuildItem` "
"も生成する必要がある。"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:427
msgid "`CustomScopeBuildItem` Example"
msgstr "`CustomScopeBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:433
#, no-wrap
msgid ""
"@BuildStep\n"
"CustomScopeBuildItem customScope() {\n"
"   return new CustomScopeBuildItem(DotName.createSimple(TransactionScoped.class.getName()));\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-integration.adoc:435
#, fuzzy, no-wrap
msgid "What if I Need to Know All the Scopes Used in the Application?"
msgstr "アプリケーションで使用されているすべてのスコープを把握する必要がある場合は？"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:438
#, fuzzy
msgid "_Solution_: You can inject the `CustomScopeAnnotationsBuildItem` in a build step and use the convenient methods such as `CustomScopeAnnotationsBuildItem.isScopeDeclaredOn()`."
msgstr ""
"_解決方法_ビルドステップで `CustomScopeAnnotationsBuildItem` を注入し、 "
"`CustomScopeAnnotationsBuildItem.isScopeDeclaredOn()` "
"のような便利なメソッドを使用することができます。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:440
#, fuzzy, no-wrap
msgid "Use Case - Additional Interceptor Bindings"
msgstr "使用例 - 追加の修飾子"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:445
#, fuzzy
msgid "In rare cases it might be handy to programmatically register an existing annotation that is not annotated with `@javax.interceptor.InterceptorBinding` as an interceptor binding.  This is similar to what CDI achieves through `BeforeBeanDiscovery#addInterceptorBinding()`.  We are going to use `InterceptorBindingRegistrarBuildItem` to get it done."
msgstr ""
"時には、 `@javax.inject.Qualifier` でアノテーションされていない既存のアノテー"
"ションをCDI修飾子として登録しておくと便利かもしれません。これは CDI が "
"`BeforeBeanDiscovery#addQualifier()` を通して実現していることに似ています。"
"ここでは `QualifierRegistrarBuildItem` を使ってそれを実現しようとしています。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:446
#, no-wrap
msgid "`InterceptorBindingRegistrarBuildItem` Example"
msgstr "`InterceptorBindingRegistrarBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:458
#, no-wrap
msgid ""
"@BuildStep\n"
"InterceptorBindingRegistrarBuildItem addInterceptorBindings() {\n"
"    return new InterceptorBindingRegistrarBuildItem(new InterceptorBindingRegistrar() {\n"
"        @Override\n"
"        public List<InterceptorBinding> getAdditionalBindings() {\n"
"            return List.of(InterceptorBinding.of(NotAnInterceptorBinding.class));\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:460
#, no-wrap
msgid "Use Case - Additional Qualifiers"
msgstr "使用例 - 追加の修飾子"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:465
msgid "Sometimes it might be useful to register an existing annotation that is not annotated with `@javax.inject.Qualifier` as a CDI qualifier.  This is similar to what CDI achieves through `BeforeBeanDiscovery#addQualifier()`.  We are going to use `QualifierRegistrarBuildItem` to get it done."
msgstr "時には、 `@javax.inject.Qualifier` でアノテーションされていない既存のアノテーションをCDI修飾子として登録しておくと便利かもしれません。これは CDI が `BeforeBeanDiscovery#addQualifier()` を通して実現していることに似ています。ここでは `QualifierRegistrarBuildItem` を使ってそれを実現しようとしています。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:466
#, no-wrap
msgid "`QualifierRegistrarBuildItem` Example"
msgstr "`QualifierRegistrarBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:479
#, no-wrap
msgid ""
"@BuildStep\n"
"QualifierRegistrarBuildItem addQualifiers() {\n"
"    return new QualifierRegistrarBuildItem(new QualifierRegistrar() {\n"
"        @Override\n"
"        public Map<DotName, Set<String>> getAdditionalQualifiers() {\n"
"            return Collections.singletonMap(DotName.createSimple(NotAQualifier.class.getName()),\n"
"                                        Collections.emptySet());\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:482
#, fuzzy, no-wrap
msgid "Use Case - Injection Point Transformation"
msgstr "InjectionPointsTransformer"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:487
#, fuzzy
msgid "Every now and then it is handy to be able to change the qualifiers of an injection point programmatically.  You can do just that with `InjectionPointTransformerBuildItem`.  The following sample shows how to apply transformation to injection points with type `Foo` that contain qualifier `MyQualifier`:"
msgstr ""
"インジェクションポイントの修飾子をプログラムで変更できると便利な場合がありま"
"す。 `InjectionPointTransformerBuildItem` "
"を使えば、それが可能です。次のサンプルでは、 `MyQualifier` "
"という修飾子を持つ `Foo` "
"タイプの注入ポイントに変換を適用する方法を示しています。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:488
#, no-wrap
msgid "`InjectionPointTransformerBuildItem` Example"
msgstr "`InjectionPointTransformerBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:494
#, no-wrap
msgid ""
"@BuildStep\n"
"InjectionPointTransformerBuildItem transformer() {\n"
"    return new InjectionPointTransformerBuildItem(new InjectionPointsTransformer() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:498
#, no-wrap
msgid ""
"        public boolean appliesTo(Type requiredType) {\n"
"            return requiredType.name().equals(DotName.createSimple(Foo.class.getName()));\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:510
#, no-wrap
msgid ""
"        public void transform(TransformationContext context) {\n"
"            if (context.getQualifiers().stream()\n"
"                    .anyMatch(a -> a.name().equals(DotName.createSimple(MyQualifier.class.getName())))) {\n"
"                context.transform()\n"
"                        .removeAll()\n"
"                        .add(DotName.createSimple(MyOtherQualifier.class.getName()))\n"
"                        .done();\n"
"            }\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:513
#, fuzzy
msgid "In theory, you can use <<annotations_transformer_build_item,an `AnnotationsTransformer`>> to achieve the same goal. However, there are few differences that make `InjectionPointsTransformer` more suitable for this particular task: (1) annotation transformers are applied to all classes during bean discovery, whereas `InjectionPointsTransformer` is only applied to discovered injection points after bean discovery; (2) with `InjectionPointsTransformer` you don't need to handle various types of injection points (field, parameters of initializer methods, etc.)."
msgstr ""
"理論的には、 link:#annotations_transformer_build_item[`AnnotationsTransformer"
"`]を使って同じ目的を達成することができます。しかし、この特定のタスクに "
"`InjectionPointsTransformer` "
"がより適していると思われるいくつかの違いがあります。(1) "
"アノテーション変換は，ビーン発見時にすべてのクラスに適用されるのに対し， "
"`InjectionPointsTransformer` "
"は，ビーン発見後に発見された注入ポイントにのみ適用される。 (2) "
"`InjectionPointsTransformer` では，さまざまなタイプの注入ポイント "
"(フィールド，イニシャライザメソッドのパラメータなど) を処理する必要がない。"

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:514
#, fuzzy, no-wrap
msgid "Use Case - Resource Annotations and Injection"
msgstr "使用例 - Bean、オブザーバー、インジェクションポイントの検査"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:518
#, fuzzy
msgid "The `ResourceAnnotationBuildItem` can be used to specify resource annotations that make it possible to resolve non-CDI injection points, such as Jakarta EE resources.  An integrator must also provide a corresponding `io.quarkus.arc.ResourceReferenceProvider` service provider implementation."
msgstr ""
"`ResourceAnnotationBuildItem` は、Jakarta EE リソースなど、CDI 以外の注入ポイ"
"ントの解決を可能にするリソースのアノテーションを指定するために使用することが"
"できます。インテグレータは、対応する `io.quarkus.arc."
"ResourceReferenceProvider` "
"サービスプロバイダの実装も提供しなければなりません。"

#. type: Block title
#: upstream/_guides/cdi-integration.adoc:519
#, no-wrap
msgid "`ResourceAnnotationBuildItem` Example"
msgstr "`ResourceAnnotationBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-integration.adoc:528
#, no-wrap
msgid ""
"@BuildStep\n"
"void setupResourceInjection(BuildProducer<ResourceAnnotationBuildItem> resourceAnnotations, BuildProducer<GeneratedResourceBuildItem> resources) {\n"
"    resources.produce(new GeneratedResourceBuildItem(\"META-INF/services/io.quarkus.arc.ResourceReferenceProvider\",\n"
"        MyResourceReferenceProvider.class.getName().getBytes()));\n"
"    resourceAnnotations.produce(new ResourceAnnotationBuildItem(DotName.createSimple(MyAnnotation.class.getName())));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cdi-integration.adoc:531
#, no-wrap
msgid "Available Build Time Metadata"
msgstr "利用可能なビルド時メタデータ"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:535
msgid "Any of the above extensions that operates with `BuildExtension.BuildContext` can leverage certain build time metadata that are generated during build.  The built-in keys located in `io.quarkus.arc.processor.BuildExtension.Key` are:"
msgstr "`BuildExtension.BuildContext` で動作する上記のエクステンションはいずれも、ビルド時に生成される特定のビルド時メタデータを利用することができます。 `io.quarkus.arc.processor.BuildExtension.Key` にある組込キーは以下の通りです。"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:536
#, no-wrap
msgid "ANNOTATION_STORE"
msgstr "ANNOTATION_STORE"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:537
#, fuzzy
msgid "Contains an `AnnotationStore` that keeps information about all `AnnotationTarget` annotations after application of annotation transformers"
msgstr ""
"アノテーション・トランスフォーマー適用後のすべての `AnnotationTarget` "
"アノテーションに関する情報を保持する `AnnotationStore` を含みます。"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:537
#, no-wrap
msgid "INJECTION_POINTS"
msgstr "INJECTION_POINTS"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:538
msgid "`Collection<InjectionPointInfo>` containing all injection points"
msgstr "`Collection<InjectionPointInfo>` すべての注入ポイントを含む"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:538
#, no-wrap
msgid "BEANS"
msgstr "BEANS"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:539
msgid "`Collection<BeanInfo>` containing all beans"
msgstr "`Collection<BeanInfo>` すべてのBeanを含む"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:539
#, no-wrap
msgid "REMOVED_BEANS"
msgstr "REMOVED_BEANS"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:540
msgid "`Collection<BeanInfo>` containing all the removed beans; see <<cdi-reference.adoc#remove_unused_beans,Removing unused beans>> for more information"
msgstr "`Collection<BeanInfo>` 削除されたすべての link:cdi-reference.html#remove_unused_beans[Bean] を含む"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:540
#, no-wrap
msgid "OBSERVERS"
msgstr "OBSERVERS"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:541
msgid "`Collection<ObserverInfo>` containing all observers"
msgstr "`Collection<ObserverInfo>` 全observerを含む"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:541
#, no-wrap
msgid "SCOPES"
msgstr "SCOPES"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:542
msgid "`Collection<ScopeInfo>` containing all scopes, including custom ones"
msgstr "`Collection<ScopeInfo>` カスタムスコープを含むすべてのスコープを含む"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:542
#, no-wrap
msgid "QUALIFIERS"
msgstr "QUALIFIERS"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:543
msgid "`Map<DotName, ClassInfo>` containing all qualifiers"
msgstr "`Map<DotName, ClassInfo>` すべての修飾子を含む"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:543
#, no-wrap
msgid "INTERCEPTOR_BINDINGS"
msgstr "INTERCEPTOR_BINDINGS"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:544
msgid "`Map<DotName, ClassInfo>` containing all interceptor bindings"
msgstr "`Map<DotName, ClassInfo>` すべてのインターセプターバインディングを含む"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:544
#, no-wrap
msgid "STEREOTYPES"
msgstr "STEREOTYPES"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:545
msgid "`Map<DotName, StereotypeInfo>` containing all stereotypes"
msgstr "`Map<DotName, StereotypeInfo>` すべてのステレオタイプを含む"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:550
msgid "To get hold of these, simply query the extension context object for given key.  Note that these metadata are made available as build proceeds which means that extensions can only leverage metadata that were built before the extensions are invoked.  If your extension attempts to retrieve metadata that wasn't yet produced, `null` will be returned.  Here is a summary of which extensions can access which metadata:"
msgstr "これらのメタデータを取得するには、そのキーのエクステンションコンテキストオブジェクトをクエリするだけ可能です。これらのメタデータはビルドが進むにつれて利用可能になることに注意してください。エクステンションがまだ生成されていないメタデータを取得しようとすると、 `null` が返されます。どのエクステンションがどのメタデータにアクセスできるかをまとめてみました。"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:551
#, no-wrap
msgid "AnnotationsTransformer"
msgstr "AnnotationsTransformer"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:552
msgid "Shouldn't rely on any metadata as it could be used at any time in any phase of the bootstrap"
msgstr "ブートストラップのどのフェーズでもいつでも使えるので、メタデータに頼るべきではありません。"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:552
#, no-wrap
msgid "ContextRegistrar"
msgstr "ContextRegistrar"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:553
#: upstream/_guides/cdi-integration.adoc:554
#: upstream/_guides/cdi-integration.adoc:555
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`"
msgstr "`ANNOTATION_STORE` , `QUALIFIERS` , `INTERCEPTOR_BINDINGS` . `STEREOTYPES` にアクセスできます。"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:553
#, no-wrap
msgid "InjectionPointsTransformer"
msgstr "InjectionPointsTransformer"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:554
#, no-wrap
msgid "ObserverTransformer"
msgstr "ObserverTransformer"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:555
#, no-wrap
msgid "BeanRegistrar"
msgstr "BeanRegistrar"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:556
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS` (class-based beans only), `OBSERVERS` (class-based observers only), `INJECTION_POINTS`"
msgstr "`ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS` (class-based beans only), `OBSERVERS` (class-based observers only), `INJECTION_POINTS` にアクセスできます。"

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:556
#, no-wrap
msgid "ObserverRegistrar"
msgstr "ObserverRegistrar"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:557
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS`, `OBSERVERS` (class-based observers only), `INJECTION_POINTS`"
msgstr "`ANNOTATION_STORE` , `QUALIFIERS` , `INTERCEPTOR_BINDINGS` , `STEREOTYPES` , `BEANS` , `OBSERVERS` (クラスベースのオブザーバーのみ), `INJECTION_POINTS` にアクセス可能です。 "

#. type: Labeled list
#: upstream/_guides/cdi-integration.adoc:557
#, no-wrap
msgid "BeanDeploymentValidator"
msgstr "BeanDeploymentValidator"

#. type: Plain text
#: upstream/_guides/cdi-integration.adoc:557
msgid "Has access to all build metadata"
msgstr "すべてのビルドメタデータにアクセスできます"
