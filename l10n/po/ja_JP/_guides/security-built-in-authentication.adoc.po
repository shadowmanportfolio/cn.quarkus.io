# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-02-04 01:50+0900\n"
"PO-Revision-Date: 2021-03-09 22:07+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-built-in-authentication.adoc:6
#, fuzzy, no-wrap
msgid "Built-In Authentication Support"
msgstr "ベーシック認証"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:11
msgid "This document describes the Quarkus built-in authentication mechanisms for HTTP based FORM, BASIC and Mutual TLS authentication as well as the proactive authentication."
msgstr "このドキュメントでは、HTTPベースのFORM認証、BASIC認証、相互TLS認証、およびプロアクティブ認証のためのQuarkusの組み込み認証メカニズムについて説明します。"

#. type: Title ==
#: upstream/_guides/security-built-in-authentication.adoc:13
#, no-wrap
msgid "Basic Authentication"
msgstr "ベーシック認証"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:17
#, fuzzy
msgid "To enable basic authentication set `quarkus.http.auth.basic=true`. You must also have at least one extension installed that provides a username/password based `IdentityProvider`, such as xref:security-jdbc.adoc[Elytron JDBC]."
msgstr ""
"ベーシック認証を有効にするには、 `quarkus.http.auth.basic=true` "
"を設定します。また、 link:security-jdbc.html[Elytron JDBC] など、ユーザー名/"
"パスワードベースの `IdentityProvider` を提供するエクステンションが少なくとも1"
"つインストールされている必要があります。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:19
#, fuzzy
msgid "Please see xref:security.adoc#identity-providers[Security Identity Providers] for more information."
msgstr ""
"詳しくは「 link:security.html#identity-providers[Security Identity "
"Providers]」をご覧ください。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:21
#, fuzzy
msgid "Please also see xref:security-testing.adoc#configuring-user-information[Configuring User Information in application.properties] section."
msgstr ""
"また、「 link:security-testing.html#configuring-user-information[application."
"propertiesでユーザー情報を設定する]」も参照してください。"

#. type: Title ==
#: upstream/_guides/security-built-in-authentication.adoc:23
#, no-wrap
msgid "Form Based Authentication"
msgstr "フォームベース認証"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:29
msgid "Quarkus provides form based authentication that works in a similar manner to traditional Servlet form based auth. Unlike traditional form authentication, the authenticated user is not stored in an HTTP session, as Quarkus does not provide clustered HTTP session support. Instead the authentication information is stored in an encrypted cookie, which can be read by all members of the cluster (provided they all share the same encryption key)."
msgstr "Quarkusは、従来のサーブレットのフォームベースの認証と同様の方法で動作するフォームベースの認証を提供します。従来のフォーム認証とは異なり、Quarkusはクラスター化されたHTTPセッションをサポートしていないため、認証されたユーザーはHTTPセッションに保存されません。代わりに、認証情報は暗号化されたCookieに保存され、クラスターのすべてのメンバーが読み取ることができます(すべてのメンバーが同じ暗号化キーを共有している場合)。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:35
msgid "The encryption key can be set using the `quarkus.http.auth.session.encryption-key` property, and it must be at least 16 characters long. This key is hashed using SHA-256 and the resulting digest is used as a key for AES-256 encryption of the cookie value. This cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their clocks synchronized. At one minute intervals a new cookie will be generated with an updated expiry time if the session is in use."
msgstr "暗号化キーは `quarkus.http.auth.session.encryption-key` プロパティーを使って設定でき、少なくとも 16 文字の長さでなければなりません。このキーは SHA-256 を使ってハッシュ化され、その結果のダイジェストがクッキー値の AES-256 暗号化のキーとして使用されます。このクッキーは暗号化された値の一部として有効期限を含んでいますので、クラスター内のすべての ノードはクロックを同期させなければなりません。1 分間隔で、セッションが使用中であれば、更新された有効期限時間を持つ新しいクッキーが生成されます。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:37
msgid "The following properties can be used to configure form based auth:"
msgstr "以下のプロパティーを使用して、フォームベース認証を設定することができます。"

#. type: Title ==
#: upstream/_guides/security-built-in-authentication.adoc:41
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr "相互TLS認証"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:44
msgid "Quarkus provides mTLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr "QuarkusはmTLS認証を提供しているので、X.509証明書に基づいてユーザーを認証できます。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:46
#, fuzzy
msgid "To use this authentication method, you should first enable SSL for your application. For more details, check the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] guide."
msgstr ""
"この認証方法を使用するには、まずアプリケーションでSSLを有効にする必要がありま"
"す。詳しくは、 link:http-reference.html#ssl[「Supporting secure connections "
"with SSL]」をご覧ください。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:50
msgid "Once your application is accepting secure connections, the next step is to configure a `quarkus.http.ssl.certificate.trust-store-file` holding all the certificates that your application should trust as well as how your application should ask for certificates when a client (e.g.: browser or another service) tries to access one of its protected resources."
msgstr "アプリケーションが安全な接続を受け入れたら、次のステップは、アプリケーションが信頼すべきすべての証明書を保持する `quarkus.http.ssl.certificate.trust-store-file` を設定し、クライアント(例: ブラウザや他のサービス)が保護されたリソースにアクセスしようとしたときに、アプリケーションがどのように証明書を要求するかを設定します。"

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:58
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks            <1>\n"
"quarkus.http.ssl.certificate.key-store-password=the_key_store_secret\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks        <2>\n"
"quarkus.http.ssl.certificate.trust-store-password=the_trust_store_secret\n"
"quarkus.http.ssl.client-auth=required                                      <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:61
#, no-wrap
msgid ""
"quarkus.http.auth.permission.default.paths=/*                              <4>\n"
"quarkus.http.auth.permission.default.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:63
msgid "Configures a key store where the server's private key is located."
msgstr "サーバーの秘密鍵が置かれている鍵ストアを設定します。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:64
msgid "Configures a trust store from where the trusted certificates are going to be loaded from."
msgstr "信頼された証明書がロードされるトラストストアを構成します。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:67
msgid "Defines that the server should *always* ask certificates from clients. You can relax this behavior by using `REQUEST` so that the server should still accept requests without a certificate. Useful when you are also supporting authentication methods other than mTLS."
msgstr "サーバーが *常に*クライアントからの証明書を要求することを定義します。 `REQUEST` を使用することで、この動作を緩和することができます。mTLS 以外の認証方法もサポートしている場合に便利です。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:68
msgid "Defines a policy where only authenticated users should have access to resources from your application."
msgstr "認証されたユーザーのみがアプリケーションからリソースにアクセスできるようにするポリシーを定義します。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:71
msgid "Once the incoming request matches a valid certificate in the truststore, your application should be able to obtain the subject by just injecting a `SecurityIdentity` as follows:"
msgstr "受信したリクエストがトラストストアの有効な証明書と一致したら、アプリケーションは以下のように `SecurityIdentity` を注入するだけでサブジェクトを取得できるようになるはずです。"

#. type: Block title
#: upstream/_guides/security-built-in-authentication.adoc:73
#, no-wrap
msgid "Obtaining the subject"
msgstr "subjectの取得"

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:78
#, no-wrap
msgid ""
"@Inject\n"
"SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:84
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello() {\n"
"    return String.format(\"Hello, %s\", identity.getPrincipal().getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:87
msgid "You should also be able to get the certificate as follows:"
msgstr "また、以下のように証明書を取得できるようにしておきましょう:"

#. type: Block title
#: upstream/_guides/security-built-in-authentication.adoc:89
#, no-wrap
msgid "Obtaining the certificate"
msgstr "証明書の取得"

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:94
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:97
#, no-wrap
msgid ""
"CertificateCredential credential = identity.getCredential(CertificateCredential.class);\n"
"X509Certificate certificate = credential.getCertificate();\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-built-in-authentication.adoc:99
#, no-wrap
msgid "Authorization"
msgstr "認可"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:103
#, fuzzy
msgid "The information from the client certificate can be used to enhance Quarkus `SecurityIdentity`. For example, one can add new roles after checking a client certificate subject name, etc.  Please see the xref:security-customization.adoc#security-identity-customization[SecurityIdentity Customization] section for more information about customizing Quarkus `SecurityIdentity`."
msgstr ""
"クライアント証明書の情報は、Quarkus `SecurityIdentity` を強化するために使用で"
"きます。例えば、クライアント証明書のサブジェクト名を確認した後に新しいロール"
"を追加することなどができます。Quarkusのカスタマイズの詳細については、 link"
":security-customization.html#security-identity-customization["
"SecurityIdentity Customization]のセクションを参照してください。 "
"`SecurityIdentity` 。"

#. type: Title ==
#: upstream/_guides/security-built-in-authentication.adoc:105
#, no-wrap
msgid "Proactive Authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:109
msgid "By default Quarkus does what we call proactive authentication. This means that if an incoming request has a credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr "デフォルトでは、Quarkusはプロアクティブ認証と呼ばれる認証を行います。これは、受信したリクエストにクレデンシャルがある場合、そのリクエストは常に認証されます(ターゲットページが認証を必要としない場合でも)。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:112
msgid "This means that requests with an invalid credential will always be rejected, even for public pages. You can change this behavior and only authenticate when required by setting `quarkus.http.auth.proactive=false`."
msgstr "これは、公開ページであっても、無効なクレデンシャルを持つリクエストは常に拒否されることを意味します。この動作を変更して、 `quarkus.http.auth.proactive=false` を設定することで必要な場合のみ認証を行うことができます。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:116
#, fuzzy
msgid "If you disable proactive authentication then the authentication process will only be run when an identity is requested, either because there are security rules that requires the user to be authenticated, or due to programmatic access to the current identity."
msgstr ""
"プロアクティブ認証を無効にすると、ユーザの認証を必要とするセキュリティルール"
"がある場合や、現在のIDへのプログラムによるアクセスがある場合など、IDが要求さ"
"れた場合にのみ認証プロセスが実行されます。"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:124
msgid "Note that if proactive authentication is in use accessing the `SecurityIdentity` is a blocking operation. This is because authentication may not have happened yet, and accessing it may require calls to external systems such as databases that may block. For blocking applications this is no problem, however if you are have disabled authentication in a reactive application this will fail (as you cannot do blocking operations on the IO thread). To work around this you need to `@Inject` an instance of `io.quarkus.security.identity.CurrentIdentityAssociation`, and call the `Uni<SecurityIdentity> getDeferredIdentity();` method. You can then subscribe to the resulting `Uni` and will be notified when authentication is complete and the identity is available."
msgstr "プロアクティブ認証を使用している場合、 `SecurityIdentity` へのアクセスはブロック操作になることに注意してください。これは、認証がまだ行われていない可能性があるためで、アクセスする際にデータベースなどの外部システムへの呼び出しが必要となり、ブロックされる可能性があるからです。ブロッキングアプリケーションの場合は問題ありませんが、リアクティブアプリケーションで認証を無効にしている場合は失敗します (IO スレッドでブロッキング操作を行うことができないため)。これを回避するには、 `io.quarkus.security.identity.CurrentIdentityAssociation` のインスタンスを `@Inject` し、 `Uni<SecurityIdentity> getDeferredIdentity();` メソッドを呼び出す必要があります。そして、結果として得られる `Uni` を購読し、認証が完了して ID が利用可能になったときに通知を受けることができます。"

#. type: Title ===
#: upstream/_guides/security-built-in-authentication.adoc:125
#, fuzzy, no-wrap
msgid "How to customize authentication exception responses"
msgstr "認証の例外応答をカスタマイズする方法"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:129
#, fuzzy
msgid "By default the authentication security constraints are enforced before the JAX-RS chain starts.  Disabling the proactive authentication effectively shifts this process to the moment when the JAX-RS chain starts running thus making it possible to use JAX-RS `ExceptionMapper` to capture Quarkus Security authentication exceptions such as `io.quarkus.security.AuthenticationFailedException`, for example:"
msgstr ""
"デフォルトでは、認証セキュリティ制約は、JAX-"
"RSチェーンが開始される前に実施されます。プロアクティブ認証を無効にすると"
"、このプロセスがJAX-RSチェーンの実行開始時に効果的に移行されるため、JAX-RS "
"`ExceptionMapper` を使用して、例えば `io.quarkus.security."
"AuthenticationFailedException` などのQuarkus "
"Security認証の例外を捕捉することが可能になります。"

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:133
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:139
#, no-wrap
msgid ""
"import javax.annotation.Priority;\n"
"import javax.ws.rs.Priorities;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.ext.ExceptionMapper;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:141
#, no-wrap
msgid "import io.quarkus.security.AuthenticationFailedException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:145
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class AuthenticationFailedExceptionMapper implements ExceptionMapper<AuthenticationFailedException> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:148
#, no-wrap
msgid ""
"    @Context\n"
"    UriInfo uriInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-built-in-authentication.adoc:154
#, no-wrap
msgid ""
"    @Override\n"
"    public Response toResponse(AuthenticationFailedException exception) {\n"
"        return Response.status(401).header(\"WWW-Authenticate\", \"Basic realm=\\\"Quarkus\\\"\").build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-built-in-authentication.adoc:156
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-built-in-authentication.adoc:158
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"
