# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2021-12-01 14:14+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenID Connect (OIDC) to Protect Service Applications using Bearer Token Authorization"
msgstr "OpenID Connect（OIDC）を利用したベアラ・トークン認証によるサービスアプリケーションの保護"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:12
#, fuzzy
msgid "This guide demonstrates how to use Quarkus OpenID Connect (OIDC) Extension to protect your JAX-RS applications using Bearer Token Authorization where Bearer Tokens are issued by OpenID Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org[Keycloak]."
msgstr "このガイドでは、Quarkus OpenID Connect (OIDC) Extensionを使用して、Bearer Token Authorizationを使用してJAX-RSアプリケーションを保護する方法を説明します。Bearer TokenはOpenID Connectおよび link:https://www.keycloak.org[Keycloak]などのOAuth 2.0準拠の認証サーバーによって発行されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:14
msgid "Bearer Token Authorization is the process of authorizing HTTP requests based on the existence and validity of a Bearer Token which provides valuable information to determine the subject of the call as well as whether or not an HTTP resource can be accessed."
msgstr "ベアラートークン認可とは、ベアラートークンの存在と有効性に基づいて HTTP リクエストを認証するプロセスで、HTTP リソースにアクセスできるかどうかだけでなく、呼び出しの対象を決定するための価値のある情報を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:16
#, fuzzy
msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize the users using OpenID Connect Authorization Code Flow."
msgstr "OpenID Connect Authorization Code Flowを使用してユーザーを認証・許可する必要がある場合は、「 link:security-openid-connect-web-authentication.html[Using OpenID Connect to Protect Web]Applications」をお読みください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:18
#, fuzzy
msgid "If you use Keycloak and Bearer tokens then also see the xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization] guide."
msgstr "KeycloakとBearerトークンを使用している場合は、「 link:security-keycloak-authorization.html[Using Keycloak to Centralize Authorization]」も参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:20
#, fuzzy
msgid "Please read the xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr "複数のテナントをサポートする方法については、 link:security-openid-connect-multitenancy.html[Using OpenID Connect Multi-Tenancy]ガイドをご覧ください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect.adoc:21
#, no-wrap
msgid "Quickstart"
msgstr "クイックスタート"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:23
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:28
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:29
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:32
msgid "In this example, we build a very simple microservice which offers two endpoints:"
msgstr "この例では、2つのエンドポイントを提供する非常にシンプルなマイクロサービスを構築します:"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:34
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:35
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:37
msgid "These endpoints are protected and can only be accessed if a client is sending a bearer token along with the request, which must be valid (e.g.: signature, expiration and audience) and trusted by the microservice."
msgstr "これらのエンドポイントは保護されており、クライアントがリクエストと一緒にベアラートークンを送信している場合にのみアクセスすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:39
msgid "The bearer token is issued by a Keycloak Server and represents the subject to which the token was issued for. For being an OAuth 2.0 Authorization Server, the token also references the client acting on behalf of the user."
msgstr "ベアラートークンは、Keycloakサーバーによって発行され、トークンが発行された対象を表します。OAuth 2.0 認可サーバーであるため、トークンはユーザーの代わりに動作するクライアントも参照します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:41
msgid "The `/api/users/me` endpoint can be accessed by any user with a valid token. As a response, it returns a JSON document with details about the user where these details are obtained from the information carried on the token."
msgstr "`/api/users/me` エンドポイントは、有効なトークンを持つ任意のユーザーがアクセスできます。レスポンスとして、トークンに記録されている情報から取得したユーザーの詳細を含む JSON ドキュメントを返します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:43
msgid "The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint."
msgstr "`/api/admin` エンドポイントは RBAC (Role-Based Access Control) で保護されており、 `admin` ロールで許可されたユーザーのみがアクセスできます。このエンドポイントでは、 `@RolesAllowed` アノテーションを使用して、アクセス制約を宣言的に強制します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:44
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:48
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:50
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:52
msgid "The solution is located in the `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-quickstart[ディレクトリ] にあります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:53
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:56
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:63
#, fuzzy
msgid "This command generates a Maven project, importing the `oidc` extension which is an implementation of OIDC for Quarkus."
msgstr "このコマンドは、Quarkus用のOIDCの実装である `oidc` 拡張をインポートして、Mavenプロジェクトを生成します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:66
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `oidc` エクステンションを追加することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:71
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_guides/security-openid-connect.adoc:73
#: upstream/_guides/security-openid-connect.adoc:582
#: upstream/_guides/security-openid-connect.adoc:609
#: upstream/_guides/security-openid-connect.adoc:733
#: upstream/_guides/security-openid-connect.adoc:825
#: upstream/_guides/security-openid-connect.adoc:936
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:79
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-openid-connect.adoc:82
#: upstream/_guides/security-openid-connect.adoc:597
#: upstream/_guides/security-openid-connect.adoc:619
#: upstream/_guides/security-openid-connect.adoc:743
#: upstream/_guides/security-openid-connect.adoc:835
#: upstream/_guides/security-openid-connect.adoc:946
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:85
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:87
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:90
msgid "Let's start by implementing the `/api/users/me` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/api/users/me` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:94
#: upstream/_guides/security-openid-connect.adoc:137
#: upstream/_guides/security-openid-connect.adoc:323
#: upstream/_guides/security-openid-connect.adoc:772
#: upstream/_guides/security-openid-connect.adoc:806
#, no-wrap
msgid "package org.acme.security.openid.connect;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:99
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:102
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.NoCache;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:105
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UsersResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:108
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:116
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/me\")\n"
"    @RolesAllowed(\"user\")\n"
"    @NoCache\n"
"    public User me() {\n"
"        return new User(securityIdentity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:118
#, no-wrap
msgid "    public static class User {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:120
#, no-wrap
msgid "        private final String userName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:124
#, no-wrap
msgid ""
"        User(SecurityIdentity securityIdentity) {\n"
"            this.userName = securityIdentity.getPrincipal().getName();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:130
#, no-wrap
msgid ""
"        public String getUserName() {\n"
"            return userName;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:133
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。ここでの主な違いは、 `admin` ロールで付与されたユーザーだけがエンドポイントにアクセスできるように `@RolesAllowed` アノテーションを使用していることです:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:143
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:146
#: upstream/_guides/security-openid-connect.adoc:334
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:154
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:157
msgid "Injection of the `SecurityIdentity` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "`SecurityIdentity` のインジェクションは、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:158
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:161
msgid "The OpenID Connect extension allows you to define the adapter configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr "OpenID Connect エクステンションを使用すると、`src/main/resources` ディレクトリーに配置される `application.properties` ファイルを使用してアダプター設定を定義することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:165
msgid "Example configuration:"
msgstr "設定例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:171
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.client-secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:174
#, no-wrap
msgid ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:176
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:179
#, fuzzy
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in a dev mode. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information."
msgstr "`quarkus.oidc.auth-server-url` に `%prod.` プロファイルのプレフィックスを追加すると、アプリケーションが開発モードで実行されたときに `Dev Services for Keycloak` がコンテナを起動するようになります。詳しくは、後述の link:#keycloak-dev-mode[「アプリケーションを開発モードで実行する]」をご覧ください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:180
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloakサーバーの起動と設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:183
#, fuzzy
msgid "Do not start the Keycloak server when you run the application in a dev mode - `Dev Services for Keycloak` will launch a container. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information."
msgstr "アプリケーションを開発モードで実行するときは、Keycloakサーバーを起動しないでください - `Dev Services for Keycloak` はコンテナを起動します。詳細については、下記の link:#keycloak-dev-mode[「アプリケーションを開発モードで実行する]」セクションを参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:185
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:189
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:192
#, fuzzy
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、 `keycloak.version` は、 `17.0.0` 以降に設定する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:194
#, fuzzy
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "Keycloakサーバーには、 link:http://localhost:8180/auth[localhost:8180/auth] でアクセスできるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:196
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:198
msgid "Import the {quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "新しいレルムを作成するには、{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm設定ファイル] をインポートします。 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムを作成する] 方法について詳しくはKeycloakのドキュメントを参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:201
#, fuzzy
msgid "If you want to use the Keycloak Admin Client to configure your server from your application you need to include the either `quarkus-keycloak-admin-client` or the `quarkus-keycloak-admin-client-reactive` (if the application uses `quarkus-rest-client-reactive`) extension."
msgstr "Keycloak Admin Clientを使用して、アプリケーションからサーバーを設定したい場合は、 `quarkus-keycloak-admin-client` エクステンションを含める必要があります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:203
#, fuzzy, no-wrap
msgid "Running the Application in Dev mode"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:206
#, fuzzy
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:210
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr "アプリケーションを開発モードで実行するには、 `./mvnw clean compile quarkus:dev`. link:security-openid-connect-dev-services.html[Dev Services for Keycloak]は、Keycloakコンテナを起動し、 `quarkus-realm.json` をインポートします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:212
#, fuzzy
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev[/q/dev] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr "link:http://localhost:8080/q/dev[/q/dev]にある link:dev-ui.html[Dev UI]を開き、 `OpenID Connect` `Dev UI` カードの `Provider: Keycloak` リンクをクリックします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:214
#, fuzzy
msgid "You will be asked to login into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr "`OpenID Connect Dev UI` が提供する `Single Page Application` へのログインを求められます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:216
#, fuzzy
msgid "Login as `alice` (password: `alice`) who has a `user` role"
msgstr "`user` の役割を持つ `alice` (パスワード: `alice`)としてログインします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:217
#, fuzzy
msgid "accessing `/api/admin` will return `403`"
msgstr "`/api/admin` にアクセスすると、次のようになります。 `403`"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:218
#: upstream/_guides/security-openid-connect.adoc:221
#, fuzzy
msgid "accessing `/api/users/me` will return `200`"
msgstr "`/api/users/me` にアクセスすると、次のようになります。 `200`"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:219
#, fuzzy
msgid "Logout and login as `admin` (password: `admin`) who has both `admin` and `user` roles"
msgstr "`admin` と `user` の両方のロールを持つ `admin` (パスワード: `admin`)としてログアウトし、ログインする。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:220
#, fuzzy
msgid "accessing `/api/admin` will return `200`"
msgstr "`/api/admin` にアクセスすると、次のようになります。 `200`"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:222
#, fuzzy, no-wrap
msgid "Running the Application in JVM mode"
msgstr "JVMモードでの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:225
#, fuzzy
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr "`dev` モード」での遊びが終わったら、標準的なJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:227
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:231
msgid "Then run it:"
msgstr "そして、以下のように実行します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:235
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:237
#, fuzzy, no-wrap
msgid "Running the Application in Native Mode"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:240
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:244
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:247
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:251
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:255
#, no-wrap
msgid "./target/security-openid-connect-quickstart-runner\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:257
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:260
#, fuzzy
msgid "See <<keycloak-dev-mode, Running the Application in Dev mode>> section above about testing your application in a dev mode."
msgstr "開発モードでのアプリケーションのテストについては、上記の「 link:#keycloak-dev-mode[Running the Application in Dev mode]」セクションを参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:262
#, fuzzy
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "JVMまたはNativeモードで起動したアプリケーションのテストは、 `curl` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:265
msgid "The application is using bearer token authorization and the first thing to do is obtain an access token from the Keycloak Server in order to access the application resources:"
msgstr "アプリケーションはベアラートークン認可を使用しており、まず最初に行うべきことは、アプリケーションのリソースにアクセスするためにKeycloak サーバーからアクセストークンを取得することです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:274
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:277
msgid "The example above obtains an access token for user `alice`."
msgstr "上記の例では、ユーザー `alice` のアクセストークンを取得しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:281
msgid "Any user is allowed to access the `http://localhost:8080/api/users/me` endpoint which basically returns a JSON payload with details about the user."
msgstr "どのユーザーでも `http://localhost:8080/api/users/me` エンドポイントで、基本的にはユーザーに関する詳細な情報を含む JSON ペイロードを返します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:287
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/api/users/me \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:292
#, no-wrap
msgid ""
"The `http://localhost:8080/api/admin` endpoint can only be accessed by users with the `admin` role. If you try to access this endpoint with the\n"
" previously issued access token, you should get a `403` response\n"
" from the server.\n"
msgstr "`http://localhost:8080/api/admin` エンドポイントは、 `admin` ロールを持つユーザーのみがアクセスできます。以前に発行されたアクセストークンを使用してこのエンドポイントにアクセスしようとすると、サーバーから `403` 応答が返ってくるはずです。\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:298
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"   http://localhost:8080/api/admin \\\n"
"   -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:301
msgid "In order to access the admin endpoint you should obtain a token for the `admin` user:"
msgstr "admin エンドポイントにアクセスするには、 `admin` ユーザーのトークンを取得する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:310
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST https://localhost:8543/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:313
#, fuzzy
msgid "Please also see the <<integration-testing-keycloak-devservices, Dev Services for Keycloak>> section below about writing the integration tests which depend on `Dev Services for Keycloak`."
msgstr "`Dev Services for Keycloak` に依存する統合テストの記述については、以下の「 link:#integration-testing-keycloak-devservices[Keycloak の開発サービス]」のセクションも参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect.adoc:314
#, fuzzy, no-wrap
msgid "Reference Guide"
msgstr "参照"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:316
#, no-wrap
msgid "Accessing JWT claims"
msgstr "JWTクレームへのアクセス"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:319
#, fuzzy
msgid "If you need to access JWT token claims then you can inject `JsonWebToken`:"
msgstr "JWTトークン・クレームにアクセスする必要がある場合は、 `JsonWebToken` を注入することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:331
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import javax.inject.Inject;\n"
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:337
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:345
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"Access for subject \" + jwt.getSubject() + \" is granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:348
#, fuzzy
msgid "Injection of `JsonWebToken` is supported in `@ApplicationScoped`, `@Singleton` and `@RequestScoped` scopes however the use of `@RequestScoped` is required if the individual claims are injected as simple types, please see xref:security-jwt.adoc#supported-injection-scopes[Support Injection Scopes for JsonWebToken and Claims] for more details."
msgstr "`JsonWebToken` の注入は、 `@ApplicationScoped` 、 `@Singleton` 、 `@RequestScoped` のスコープでサポートされていますが、個々の請求項が単純な型として注入される場合は、 `@RequestScoped` の使用が必要となります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:350
#, no-wrap
msgid "User Info"
msgstr "ユーザー情報"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:355
#, fuzzy
msgid "Set `quarkus.oidc.authentication.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.  A request will be sent to the OpenID Provider UserInfo endpoint and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created.  `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "OIDC userinfo エンドポイントから UserInfo JSON オブジェクトを要求する必要がある場合は、 `quarkus.oidc.authentication.user-info-required=true` を設定します。OpenID Provider UserInfo エンドポイントにリクエストが送信され、 `io.quarkus.oidc.UserInfo` （シンプルな `javax.json.JsonObject` ラッパー）オブジェクトが作成されます。 `io.quarkus.oidc.UserInfo` は、SecurityIdentity `userinfo` 属性として注入またはアクセスすることができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:357
#, no-wrap
msgid "Configuration Metadata"
msgstr "設定メタデータ"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:360
#, fuzzy
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントが発見した link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata]は、 `io.quarkus.oidc.OidcConfigurationMetadata` で表され、 `SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:362
#, fuzzy
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントが公開されている場合は、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:363
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr "トークンクレームとセキュリティーアイデンティティロール"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:366
msgid "SecurityIdentity roles can be mapped from the verified JWT access tokens as follows:"
msgstr "SecurityIdentity ロールは、検証済みの JWT アクセストークンから以下のようにマッピングすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:369
#, fuzzy
msgid "If `quarkus.oidc.roles.role-claim-path` property is set and matching array or string claims are found then the roles are extracted from these claims.  For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`, etc."
msgstr "`quarkus.oidc.roles.role-claim-path` プロパティが設定され、一致する配列または文字列のクレームが見つかった場合、これらのクレームからロールが抽出されます。例えば、 `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`, などです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:370
msgid "If `groups` claim is available then its value is used"
msgstr "`groups` クレームが利用可能な場合は、その値が使用されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:372
msgid "If `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available then its value is used.  This check supports the tokens issued by Keycloak"
msgstr "`realm_access/roles` または `resource_access/client_id/roles` (ここで `client_id` は `quarkus.oidc.client-id` プロパティーの値)クレームが利用可能な場合は、その値が使用されます。このチェックは、Keycloakが発行するトークンをサポートします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:374
msgid "If the token is opaque (binary) then a `scope` property from the remote token introspection response will be used."
msgstr "トークンが不透明(バイナリー)の場合は、リモートトークンイントロスペクションレスポンスの `scope` プロパティーが使用されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:376
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "UserInfoがロールのソースである場合は、 `quarkus.oidc.authentication.user-info-required=true` と `quarkus.oidc.roles.source=userinfo` 、必要に応じて `quarkus.oidc.roles.role-claim-path` を設定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:378
#, fuzzy
msgid "Additionally a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented xref:security.adoc#security-identity-customization[here]."
msgstr "さらに、カスタム `SecurityIdentityAugmentor` を使用してロールを追加することもできます（ link:security.html#security-identity-customization[こちら]を参照）。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:380
#, fuzzy, no-wrap
msgid "Token Verification And Introspection "
msgstr "トークンの検証とイントロスペクション"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:385
#, fuzzy
msgid "If the token is a JWT token then, by default, it will be verified with a `JsonWebKey` (JWK) key from a local `JsonWebKeySet` retrieved from the OpenID Connect Provider's JWK endpoint. The token's key identifier `kid` header value will be used to find the matching JWK key.  If no matching `JWK` is available locally then `JsonWebKeySet` will be refreshed by fetching the current key set from the JWK endpoint. The `JsonWebKeySet` refresh can be repeated again only after the `quarkus.oidc.token.forced-jwk-refresh-interval` (default is 10 minutes) expires.  If no matching `JWK` is available after the refresh then the JWT token will be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr "トークンがJWTトークンの場合、デフォルトでは、OpenID Connect ProviderのJWKエンドポイントから取得したローカル `JsonWebKeySet` 、 `JsonWebKey` （JWK）キーで検証されます。トークンのキー識別子 `kid` のヘッダー値は、一致する JWK キーを見つけるために使用されます。一致する `JWK` がローカルにない場合は、JWK エンドポイントから現在のキーセットを取得して `JsonWebKeySet` をリフレッシュします。 `JsonWebKeySet` の更新は、 `quarkus.oidc.token.forced-jwk-refresh-interval` (デフォルトは 10 分) の期限が切れた後にのみ、再び繰り返すことができます。リフレッシュ後にマッチする `JWK` がない場合、JWTトークンはOpenID Connect Providerのトークンイントロスペクションエンドポイントに送信されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:387
#, fuzzy
msgid "If the token is opaque (it can be a binary token or an encrypted JWT token) then it will always be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr "トークンが不透明な場合（バイナリートークンや暗号化されたJWTトークンの場合もあります）、常にOpenID Connect Providerのトークンイントロスペクションエンドポイントに送られます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:389
#, fuzzy
msgid "If you work with JWT tokens only and expect that a matching `JsonWebKey` will always be available (possibly after a key set refresh) then you should disable the token introspection:"
msgstr "もしあなたがJWTトークンのみを扱い、マッチする `JsonWebKey` が常に利用可能であることを期待しているなら（おそらくキーセットの更新後）、トークンのイントロスペクションを無効にすべきです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:394
#, no-wrap
msgid ""
"quarkus.oidc.token.allow-jwt-introspection=false\n"
"quarkus.oidc.token.allow-opaque-token-introspection=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:397
#, fuzzy
msgid "However, there could be cases where JWT tokens must be verified via the introspection only. It can be forced by configuring an introspection endpoint address only, for example, in case of Keycloak you can do it like this:"
msgstr "しかし、JWTトークンがイントロスペクションだけで検証されなければならないケースもあるでしょう。これはintrospectionのエンドポイントアドレスのみを設定することで強制することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:404
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:407
#, fuzzy
msgid "Note that `io.quarkus.oidc.TokenIntrospection` (a simple `javax.json.JsonObject` wrapper) object will be created and can be either injected or accessed as a SecurityIdentity `introspection` attribute if either JWT or opaque token has been successfully introspected."
msgstr "`io.quarkus.oidc.TokenIntrospection` （シンプルな `javax.json.JsonObject` ラッパー）オブジェクトが作成され、JWT または opaque token のいずれかが正常にイントロスペクトされた場合、SecurityIdentity `introspection` 属性として注入またはアクセスできることに注意してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:409
#, fuzzy, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr "トークンのイントロスペクションとUserInfo Cache"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:412
#, fuzzy
msgid "All opaque and sometimes JWT Bearer access tokens have to be remotely introspected. If `UserInfo` is also required then the same access token will be used to do a remote call to OpenID Connect Provider again. So, if `UserInfo` is required and the current access token is opaque then for every such token there will be 2 remote calls done - one to introspect it and one to get UserInfo with it, and if the token is JWT then usually only a single remote call will be needed - to get UserInfo with it."
msgstr "不透明なアクセストークンや、場合によってはJWT Bearerアクセストークンは、すべてリモートでイントロスペクトする必要があります。 `UserInfo` も必要な場合は、同じアクセストークンを使用して、OpenID Connect Provider へのリモートコールが再度行われます。つまり、 `UserInfo` が必要で、現在のアクセストークンが不透明な場合は、そのようなトークンごとに2回のリモートコールが行われます。1回はイントロスペクトを行い、1回はそのトークンでUserInfoを取得します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:414
#, fuzzy
msgid "The cost of making up to 2 remote calls per every incoming bearer or code flow access token can sometimes be problematic."
msgstr "着信ベアラやコードフローアクセストークン1つにつき、最大2つのリモートコールを行うためのコストが問題になることがあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:416
#, fuzzy
msgid "If it is the case in your production then it can be recommended that the token introspection and `UserInfo` data are cached for a short period of time, for example, for 3 or 5 minutes."
msgstr "本番環境では、トークンのイントロスペクションと `UserInfo` のデータを3分や5分などの短い時間でキャッシュすることをお勧めします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:418
#, fuzzy
msgid "`quarkus-oidc` provides `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces which can be used to implement `@ApplicationScoped` cache implementation which can be used to store and retrieve `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` objects, for example:"
msgstr "`quarkus-oidc` は、 `quarkus.oidc.TokenIntrospectionCache` および `quarkus.oidc.UserInfoCache` インターフェースを提供しています。これらは、例えば、 `quarkus.oidc.TokenIntrospection` および/または `quarkus.oidc.UserInfo` オブジェクトを保存および取得するために使用することができる `@ApplicationScoped` キャッシュの実装に使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:426
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@AlternativePriority(1)\n"
"public class CustomIntrospectionUserInfoCache implements TokenIntrospectionCache, UserInfoCache {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:429
#, fuzzy
msgid "Each OIDC tenant can either permit or deny storing its `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` data with boolean `quarkus.oidc.\"tenant\".allow-token-introspection-cache` and `quarkus.oidc.\"tenant\".allow-user-info-cache` properties."
msgstr "各OIDCテナントは、 `quarkus.oidc.TokenIntrospection` および/または `quarkus.oidc.UserInfo` データの保存を、ブーリアン型の `quarkus.oidc.\"tenant\".allow-token-introspection-cache` および `quarkus.oidc.\"tenant\".allow-user-info-cache` プロパティで許可または拒否することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:431
#, fuzzy
msgid "Additionally, `quarkus-oidc` provides a simple default memory based token cache which implements both `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces."
msgstr "さらに、 `quarkus-oidc` は、 `quarkus.oidc.TokenIntrospectionCache` と `quarkus.oidc.UserInfoCache` の両方のインターフェイスを実装した、シンプルなデフォルトのメモリベースのトークンキャッシュを提供しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:433
#, fuzzy
msgid "It can be activated and configured as follows:"
msgstr "以下のように起動して設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:442
#, no-wrap
msgid ""
"# 'max-size' is 0 by default so the cache can be activated by setting 'max-size' to a positive value.\n"
"quarkus.oidc.token-cache.max-size=1000\n"
"# 'time-to-live' specifies how long a cache entry can be valid for and will be used by a clean up timer.\n"
"quarkus.oidc.token-cache.time-to-live=3M\n"
"# 'clean-up-timer-interval' is not set by default so the clean up timer can be activated by setting 'clean-up-timer-interval'.\n"
"quarkus.oidc.token-cache.clean-up-timer-interval=1M\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:445
#, fuzzy
msgid "The default cache uses a token as a key and each entry can have `TokenIntrospection` and/or `UserInfo`. It will only keep up to a `max-size` number of entries. If the cache is full when a new entry is to be added then an attempt will be made to find a space for it by removing a single expired entry. Additionally, the clean up timer, if activated, will periodically check for the expired entries and remove them."
msgstr "デフォルトのキャッシュでは、トークンをキーとして使用し、各エントリには `TokenIntrospection` および/または `UserInfo` を設定できます。 `max-size` までの数のエントリーしか保持しません。新しいエントリが追加されたときにキャッシュがいっぱいになっていた場合、期限切れのエントリを1つ削除することで、そのエントリのためのスペースを確保しようとします。さらに、クリーンアップタイマーが作動していれば、定期的に期限切れのエントリーをチェックし、削除します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:447
#, fuzzy
msgid "Please experiment with the default cache implementation or register a custom one."
msgstr "デフォルトのキャッシュ実装を試したり、カスタムのキャッシュを登録したりしてください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:449
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr "JSON Web Tokenクレーム検証"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:452
msgid "Once the bearer JWT token's signature has been verified and its `expires at` (`exp`) claim has been checked, the `iss` (`issuer`) claim value is verified next."
msgstr "ベアラのJWTトークンの署名が検証され、 `expires at` ( `exp`) のクレームが確認されると、次に `iss` ( `issuer`) クレーム値が検証されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:455
msgid "By default, the `iss` claim value is compared to the `issuer` property which may have been discovered in the well-known provider configuration.  But if `quarkus.oidc.token.issuer` property is set then the `iss` claim value is compared to it instead."
msgstr "デフォルトでは、 `iss` クレーム値は、well-knownプロバイダの設定で発見された `issuer` プロパティと比較されます。しかし、 `quarkus.oidc.token.issuer` プロパティが設定されている場合は、代わりに `iss` クレーム値がそれと比較されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:457
msgid "In some cases, this `iss` claim verification may not work. For example, if the discovered `issuer` property contains an internal HTTP/IP address while the token `iss` claim value contains an external HTTP/IP address. Or when a discovered `issuer` property contains the template tenant variable but the token `iss` claim value has the complete tenant-specific issuer value."
msgstr "場合によっては、この `iss` クレームの検証がうまくいかないことがあります。例えば、発見された `issuer` プロパティに内部の HTTP/IP アドレスが含まれている一方で、トークン `iss` クレーム値に外部の HTTP/IP アドレスが含まれている場合です。あるいは、発見された `issuer` プロパティにテンプレートのテナント変数が含まれているが、トークン `iss` クレーム値には完全なテナント固有の発行者の値が含まれている場合です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:459
msgid "In such cases you may want to consider skipping the issuer verification by setting `quarkus.oidc.token.issuer=any`. Please note that it is not recommended and should be avoided unless no other options are available:"
msgstr "このような場合には、 `quarkus.oidc.token.issuer=any` を設定して、issuer認証を省略することを検討してください。なお、この設定は推奨されておらず、他に選択肢がない場合を除き、避けるべきです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:461
msgid "If you work with Keycloak and observe the issuer verification errors due to the different host addresses then configure Keycloak with a `KEYCLOAK_FRONTEND_URL` property to ensure the same host address is used."
msgstr "Keycloakを使用していて、ホストアドレスが異なるために発行者検証エラーが発生する場合は、Keycloakに `KEYCLOAK_FRONTEND_URL` プロパティを設定して、同じホストアドレスが使用されるようにしてください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:462
msgid "If the `iss` property is tenant specific in a multi-tenant deployment then you can use the `SecurityIdentity` `tenant-id` attribute to check the issuer is correct in the endpoint itself or the custom JAX-RS filter, for example:"
msgstr "マルチテナント展開で `iss` プロパティがテナント固有のものである場合は、 `SecurityIdentity` `tenant-id` 属性を使用して、エンドポイント自体やカスタム JAX-RS フィルタなどでissuerが正しいかどうかを確認することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:469
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:473
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:478
#, no-wrap
msgid ""
"@Provider\n"
"public class IssuerValidator implements ContainerRequestFilter {\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:481
#, no-wrap
msgid ""
"    @Inject JsonWebToken jwt;\n"
"    @Inject SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:489
#, no-wrap
msgid ""
"    public void filter(ContainerRequestContext requestContext) {\n"
"        String issuer = configMetadata.getIssuer().replace(\"{tenant-id}\", identity.getAttribute(\"tenant-id\"));\n"
"        if (!issuer.equals(jwt.getIssuer())) {\n"
"            requestContext.abortWith(Response.status(401).build());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:492
msgid "Note it is also recommended to use `quarkus.oidc.token.audience` property to verify the token `aud` (`audience`) claim value."
msgstr "なお、トークン `aud` ( `audience`) のクレーム値を検証するために `quarkus.oidc.token.audience` プロパティを使用することも推奨します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:494
#, no-wrap
msgid "Single Page Applications"
msgstr "シングルページアプリケーション"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:498
#, fuzzy
msgid "Single Page Application (SPA) typically uses `XMLHttpRequest`(XHR) and the Java Script utility code provided by the OpenID Connect provider to acquire a bearer token and use it to access Quarkus `service` applications."
msgstr "シングルページアプリケーション（SPA）では、通常、 `XMLHttpRequest` （XHR）とOpenID Connectプロバイダが提供するJava Scriptユーティリティコードを使用してベアラートークンを取得し、それを使用してQuarkus `service` アプリケーションにアクセスします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:500
msgid "For example, here is how you can use `keycloak.js` to authenticate the users and refresh the expired tokens from the SPA:"
msgstr "例えば、 `keycloak.js` を使用してユーザーを認証し、SPA から期限切れのトークンをリフレッシュする方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:539
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"    <title>keycloak-spa</title>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n"
"    <script src=\"http://localhost:8180/js/keycloak.js\"></script>\n"
"    <script>\n"
"        var keycloak = new Keycloak();\n"
"        keycloak.init({onLoad: 'login-required'}).success(function () {\n"
"            console.log('User is now authenticated.');\n"
"        }).error(function () {\n"
"            window.location.reload();\n"
"        });\n"
"        function makeAjaxRequest() {\n"
"            axios.get(\"/api/hello\", {\n"
"                headers: {\n"
"                    'Authorization': 'Bearer ' + keycloak.token\n"
"                }\n"
"            })\n"
"            .then( function (response) {\n"
"                console.log(\"Response: \", response.status);\n"
"            }).catch(function (error) {\n"
"                console.log('refreshing');\n"
"                keycloak.updateToken(5).then(function () {\n"
"                    console.log('Token refreshed');\n"
"                }).catch(function () {\n"
"                    console.log('Failed to refresh token');\n"
"                    window.location.reload();\n"
"                });\n"
"            });\n"
"    }\n"
"    </script>\n"
"</head>\n"
"<body>\n"
"    <button onclick=\"makeAjaxRequest()\">Request</button>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:541
#, fuzzy, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr "クロスオリジンのリソース共有"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:544
#, fuzzy
msgid "If you plan to consume your OpenID Connect `service` application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more details."
msgstr "OpenID Connect `service` アプリケーションを、別のドメイン上で動作するSingle Page Applicationから消費する予定の場合、CORS（Cross-Origin Resource Sharing）を設定する必要があります。詳細については、 link:http-reference.html#cors-filter[HTTP CORSのドキュメント]を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:545
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr "プロバイダーエンドポイント設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:548
#, fuzzy
msgid "OIDC `service` application needs to know OpenID Connect provider's token, `JsonWebKey` (JWK) set and possibly `UserInfo` and introspection endpoint addresses."
msgstr "OIDC `service` アプリケーションは、OpenID Connect プロバイダーのトークン、 `JsonWebKey` (JWK) セット、そしておそらく `UserInfo` とイントロスペクションのエンドポイントアドレスを知る必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:550
msgid "By default they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc.auth-server-url` に `/.well-known/openid-configuration` パスを追加することで検出されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:552
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure them with relative path values, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、相対パスの値で設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:565
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:567
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:570
#, fuzzy
msgid "Please see xref:security-openid-connect-client.adoc#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr "下流のサービスへのベアラアクセストークンの伝搬については、 link:security-openid-connect-client.html#token-propagation[「トークンの伝搬]」の項を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:572
#, fuzzy, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr "プロバイダーエンドポイント設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:575
#, fuzzy
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. If the bearer token has to be introspected then `OidcProviderClient` has to authenticate to the OpenID Connect Provider. Please see xref:security-openid-connect-web-authentication.adoc#oidc-provider-client-authentication[OidcProviderClient Authentication] for more information about all the supported authentication options."
msgstr "`quarkus.oidc.runtime.OidcProviderClient` は、OpenID Connect Provider へのリモートリクエストが必要な場合に使用されます。ベアラートークンをイントロスペクトしなければならない場合、 `OidcProviderClient` はOpenID Connect Providerを認証しなければなりません。サポートされているすべての認証オプションの詳細については、「 link:security-openid-connect-web-authentication.html#oidc-provider-client-authentication[OidcProviderClient Authentication]」を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:577
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:580
#, fuzzy
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:594
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:601
#, no-wrap
msgid ""
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect.adoc:604
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:607
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:616
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:622
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:625
#: upstream/_guides/security-openid-connect.adoc:864
msgid "Prepare the REST test endpoint, set `application.properties`, for example:"
msgstr "RESTテストエンドポイントを用意し、例えば以下のように `application.properties` を設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:632
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.application-type=service\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:635
#: upstream/_guides/security-openid-connect.adoc:875
msgid "and finally write the test code, for example:"
msgstr "最後に、例えば次のようにテストコードを書きます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:639
#, no-wrap
msgid "import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:642
#, no-wrap
msgid ""
"import java.util.Arrays;\n"
"import java.util.HashSet;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:645
#: upstream/_guides/security-openid-connect.adoc:883
#, no-wrap
msgid ""
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:651
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
"import io.restassured.RestAssured;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:655
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:665
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\", new HashSet<>(Arrays.asList(\"user\"))))\n"
"            .when().get(\"/api/users/preferredUserName\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:674
#, no-wrap
msgid ""
"    private String getAccessToken(String userName, Set<String> groups) {\n"
"        return Jwt.preferredUserName(userName)\n"
"                .groups(groups)\n"
"                .issuer(\"https://server.example.com\")\n"
"                .audience(\"https://service.example.com\")\n"
"                .sign();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:677
#, fuzzy
msgid "Note that the `quarkus-test-oidc-server` extension includes a signing RSA private key file in a `JSON Web Key` (`JWK`) format and points to it with a `smallrye.jwt.sign.key.location` configuration property. It allows to use a no argument `sign()` operation to sign the token."
msgstr "`quarkus-test-oidc-server` エクステンションには、 `JSON Web Key` ( `JWK`) 形式の署名用 RSA 秘密鍵ファイルが含まれており、 `smallrye.jwt.sign.key.location` 構成プロパティでそれを指すことに注意してください。これにより、引数なしの `sign()` 操作を使用して、トークンに署名することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:680
msgid "Testing your `quarkus-oidc` `service` application with `OidcWiremockTestResource` provides the best coverage as even the communication channel is tested against the Wiremock HTTP stubs.  `OidcWiremockTestResource` will be enhanced going forward to support more complex Bearer token test scenarios."
msgstr "`quarkus-oidc` `service` アプリケーションを `OidcWiremockTestResource` でテストすると、通信チャネルが Wiremock HTTP スタブに対してテストされるため、最高のカバレッジが得られます。 `OidcWiremockTestResource` は、より複雑な Bearer トークンのテストシナリオをサポートするために、今後強化される予定です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:683
#, fuzzy
msgid "If there is an immediate need for a test to define Wiremock stubs not currently supported by `OidcWiremockTestResource` one can do so via a `WireMockServer` instance injected into the test class, for example:"
msgstr "もし、現在 `OidcWiremockTestResource` がサポートしていない Wiremock スタブをテストですぐに定義する必要がある場合は、例えば、テストクラスに注入された `WireMockServer` インスタンスを介して定義することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:687
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:690
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:692
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:695
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:701
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWireMock;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:705
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class CustomOidcWireMockStubTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:708
#, no-wrap
msgid ""
"    @OidcWireMock\n"
"    WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:714
#, no-wrap
msgid ""
"    @Test\n"
"    public void testInvalidBearerToken() {\n"
"        wireMockServer.stubFor(WireMock.post(\"/realms/quarkus/protocol/openid-connect/token/introspect\")\n"
"                .withRequestBody(matching(\".*token=invalid_token.*\"))\n"
"                .willReturn(WireMock.aResponse().withStatus(400)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:722
#, no-wrap
msgid ""
"        RestAssured.given().auth().oauth2(\"invalid_token\").when()\n"
"                .get(\"/api/users/me/bearer\")\n"
"                .then()\n"
"                .statusCode(401)\n"
"                .header(\"WWW-Authenticate\", equalTo(\"Bearer\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect.adoc:725
#, fuzzy, no-wrap
msgid "Dev Services for Keycloak"
msgstr "Keycloakの開発サービス"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:729
#, fuzzy
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "`Dev Services for Keycloak` は、テストコンテナを起動して初期化します。 `quarkus` レルム、 `quarkus-app` クライアント（ `secret` secret）を作成し、 `alice` （ `admin` and `user` role）と `bob` （ `user` role）のユーザーを追加します。これらのプロパティはすべてカスタマイズ可能です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:731
#, fuzzy
msgid "First you need to add the following dependency:"
msgstr "まず、以下の依存関係を追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:740
#: upstream/_guides/security-openid-connect.adoc:832
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:746
#: upstream/_guides/security-openid-connect.adoc:838
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:749
#, fuzzy
msgid "which provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` you can use in tests for acquiring the access tokens."
msgstr "で、アクセストークンを取得するためのテストで使用できるユーティリティクラス `io.quarkus.test.keycloak.client.KeycloakTestClient` を提供しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:751
#, fuzzy
msgid "Next prepare your `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "次に、 `application.properties` を準備します。完全に空の `application.properties` から始めることができます。 `Dev Services for Keycloak` は、実行中のテストコンテナを指す `quarkus.oidc.auth-server-url` を、 `quarkus.oidc.client-id=quarkus-app` と `quarkus.oidc.credentials.secret=secret` と同様に登録します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:753
#, fuzzy
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "しかし、すでに必要な `quarkus-oidc` プロパティがすべて設定されている場合は、 `quarkus.oidc.auth-server-url` と `prod` プロファイルを関連付けるだけで、たとえば「Dev Services for Keycloak」のコンテナを起動することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:757
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:760
#, fuzzy
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルをKeycloakにインポートしなければならない場合、 `Dev Services for Keycloak` を以下のように設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:765
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:768
#, fuzzy
msgid "Finally write your test which will be executed in JVM mode:"
msgstr "最後に、JVMモードで実行されるテストを書きます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:777
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:780
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class BearerTokenAuthenticationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:782
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:794
#, no-wrap
msgid ""
"    @Test\n"
"    public void testAdminAccess() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(200);\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"bob\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(403);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:799
#, no-wrap
msgid ""
"    protected String getAccessToken(String userName) {\n"
"        return keycloakClient.getAccessToken(userName);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:802
#, fuzzy
msgid "and in native mode:"
msgstr "とネイティブモードでは"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:808
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:812
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class NativeBearerTokenAuthenticationIT extends BearerTokenAuthenticationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:815
#, fuzzy
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "初期化や設定の方法については、 link:security-openid-connect-dev-services.html[Dev Services for Keycloak]をご覧ください。"

#. type: Title ====
#: upstream/_guides/security-openid-connect.adoc:817
#, fuzzy, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr "KeycloakTestResourceLifecycleManager"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:821
#, fuzzy
msgid "If you need to do some integration testing against Keycloak then you are encouraged to do it with <<integration-testing-keycloak-devservices,Dev Services For Keycloak>>.  Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr "Keycloakに対して統合テストを行う必要がある場合は、 link:#integration-testing-keycloak-devservices[Keycloak用の開発サービス]で行うことをお勧めします。テストに `KeycloakTestResourceLifecycleManager` を使用するのは、 `Dev Services for Keycloak` を使用できない正当な理由がある場合のみです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:823
#, fuzzy
msgid "Start with adding the following dependency:"
msgstr "まず、以下の依存関係を追加します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:841
#, fuzzy
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "`io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - Keycloakコンテナを起動する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装を提供しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:843
#, fuzzy
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "そして、Maven Surefireプラグインを以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:859
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:862
#, fuzzy
msgid "(and similarly `maven.failsafe.plugin` when testing in native image)."
msgstr "(また、ネイティブイメージでテストした場合も同様に `maven.failsafe.plugin` ）。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:872
#, no-wrap
msgid ""
"# keycloak.url is set by KeycloakTestResourceLifecycleManager\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.credentials=secret\n"
"quarkus.oidc.application-type=service\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:880
#, no-wrap
msgid ""
"import static io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager.getAccessToken;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:888
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:892
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:902
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))))\n"
"            .when().get(\"/api/users/preferredUserName\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:904
#: upstream/_guides/security-openid-connect.adoc:993
#: upstream/_guides/security-openid-connect.adoc:1065
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:907
#, fuzzy
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` は、 `alice` と `admin` のユーザーを登録します。ユーザー `alice` は、デフォルトでは `user` ロールのみを持っています。 `keycloak.token.user-roles` システムプロパティでカスタマイズすることができます。ユーザー `admin` は、デフォルトで `user` と `admin` の役割を持っています - `keycloak.token.admin-roles` のシステムプロパティでカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:910
#, fuzzy
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-service-app` - set `keycloak.realm` and `keycloak.service.client` system properties to customize the values if needed."
msgstr "デフォルトでは、 `KeycloakTestResourceLifecycleManager` は Keycloak インスタンスの初期化に HTTPS を使用しますが、これは `keycloak.use.https=false` で無効にできます。デフォルトのレルム名は `quarkus` 、クライアントIDは `quarkus-service-app` です。必要に応じて `keycloak.realm` と `keycloak.service.client` のシステムプロパティを設定し、値をカスタマイズしてください。"

#. type: Title ====
#: upstream/_guides/security-openid-connect.adoc:912
#, no-wrap
msgid "Local Public Key"
msgstr "ローカル公開鍵"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:915
msgid "You can also use a local inlined public key for testing your `quarkus-oidc` `service` applications:"
msgstr "また、 `quarkus-oidc` `service` アプリケーションのテストに、ローカルのインライン公開鍵を使用することもできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:920
#, no-wrap
msgid ""
"quarkus.oidc.client-id=test\n"
"quarkus.oidc.public-key=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5eUF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9xnQIDAQAB\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:922
#, no-wrap
msgid "smallrye.jwt.sign.key.location=/privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:925
msgid "copy `privateKey.pem` from the `integration-tests/oidc-tenancy` in the `main` Quarkus repository and use a test code similar to the one in the `Wiremock` section above to generate JWT tokens. You can use your own test keys if preferred."
msgstr "`integration-tests/oidc-tenancy` から `main` のQuarkusリポジトリに `privateKey.pem` をコピーし、上記 `Wiremock` のセクションと同様のテストコードを使用してJWTトークンを生成します。必要であれば、独自のテストキーを使用することもできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:927
msgid "This approach provides a more limited coverage compared to the Wiremock approach - for example, the remote communication code is not covered."
msgstr "このアプローチは、Wiremockのアプローチと比較して、より限定された範囲をカバーします。例えば、リモート通信コードはカバーされません。"

#. type: Title ====
#: upstream/_guides/security-openid-connect.adoc:929
#, fuzzy, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurityアノテーション"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:932
#, fuzzy
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations for testing the `service` application endpoint code which depends on the injected `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "`@TestSecurity` および `@OidcSecurity` アノテーションは、注入された `JsonWebToken` や `UserInfo` および `OidcConfigurationMetadata` に依存する `service` アプリケーション・エンドポイント・コードのテストに使用できます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:934
#, fuzzy
msgid "Add the following dependency:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:943
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security-oidc</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:949
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-security-oidc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:952
#, fuzzy
msgid "and write a test code like this one:"
msgstr "のようなテストコードを書いてみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:966
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.Claim;\n"
"import io.quarkus.test.security.oidc.ConfigMetadata;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.test.security.oidc.UserInfo;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:970
#: upstream/_guides/security-openid-connect.adoc:1051
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(ProtectedResource.class)\n"
"public class TestSecurityAuthTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:977
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    public void testOidc() {\n"
"        RestAssured.when().get(\"test-security-oidc\").then()\n"
"                .body(is(\"userOidc:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:991
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(claims = {\n"
"            @Claim(key = \"email\", value = \"user@gmail.com\")\n"
"    }, userinfo = {\n"
"            @UserInfo(key = \"sub\", value = \"subject\")\n"
"    }, config = {\n"
"            @ConfigMetadata(key = \"issuer\", value = \"issuer\")\n"
"    })\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:user@gmail.com:subject:issuer\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:996
#: upstream/_guides/security-openid-connect.adoc:1068
#, fuzzy
msgid "where `ProtectedResource` class may look like this:"
msgstr "`ProtectedResource` のクラスは次のようになります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1002
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.oidc.UserInfo;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1006
#: upstream/_guides/security-openid-connect.adoc:1077
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1013
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
"    @Inject\n"
"    UserInfo userInfo;\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1019
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc\")\n"
"    public String testSecurityOidc() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1029
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-claims-userinfo-metadata\")\n"
"    public String testSecurityOidcWithClaimsUserInfoMetadata() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next()\n"
"                + \":\" + accessToken.getClaim(\"email\")\n"
"                + \":\" + userInfo.getString(\"sub\")\n"
"                + \":\" + configMetadata.get(\"issuer\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1034
#, fuzzy
msgid "Note that `@TestSecurity` annotation must always be used and its `user` property is returned as `JsonWebToken.getName()` and `roles` property - as `JsonWebToken.getGroups()`.  `@OidcSecurity` annotation is optional and can be used to set the additional token claims, as well as `UserInfo` and `OidcConfigurationMetadata` properties.  Additionally, if `quarkus.oidc.token.issuer` property is configured then it will be used as an `OidcConfigurationMetadata` `issuer` property value."
msgstr "なお、 `@TestSecurity` アノテーションは常に使用する必要があり、その `user` プロパティは `JsonWebToken.getName()` として、 `roles` プロパティは `JsonWebToken.getGroups()` として返されます。 `@OidcSecurity` アノテーションはオプションであり、追加のトークン クレームや `UserInfo` および `OidcConfigurationMetadata` プロパティを設定するために使用できます。さらに、 `quarkus.oidc.token.issuer` プロパティが設定されている場合、それは `OidcConfigurationMetadata` `issuer` プロパティの値として使用されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1036
#, fuzzy
msgid "If you work with the opaque tokens then you can test them as follows:"
msgstr "不透明なトークンを扱う場合は、次のようにしてテストすることができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1047
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.TokenIntrospection;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1063
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:userOidc:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1073
#, no-wrap
msgid ""
"import io.quarkus.oidc.TokenIntrospection;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1082
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
"    @Inject\n"
"    TokenIntrospection introspection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1092
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-opaque-token\")\n"
"    public String testSecurityOidcOpaqueToken() {\n"
"        return securityIdentity.getPrincipal().getName() + \":\" + securityIdentity.getRoles().iterator().next()\n"
"            + \":\" + introspection.getString(\"username\")\n"
"            + \":\" + introspection.getString(\"scope\")\n"
"            + \":\" + introspection.getString(\"email\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1095
#, fuzzy
msgid "Note that `@TestSecurity` `user` and `roles` attributes are available as `TokenIntrospection` `username` and `scope` properties and you can use `io.quarkus.test.security.oidc.TokenIntrospection` to add the additional introspection response properties such as an `email`, etc."
msgstr "なお、 `@TestSecurity` `user` と `roles` の属性は、 `TokenIntrospection` `username` と `scope` のプロパティとして利用できます。また、 `io.quarkus.test.security.oidc.TokenIntrospection` を使用して、 `email` 、などの追加のイントロスペクション・レスポンス・プロパティを追加できます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:1096
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1099
#, fuzzy
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr "トークン検証エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` レベルのロギングを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1104
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1107
#, fuzzy
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr "OidcProviderのクライアント初期化エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` レベルのロギングを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1112
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:1114
#, fuzzy, no-wrap
msgid "External and Internal Access to OpenID Connect Provider"
msgstr "OpenID Connectプロバイダへの外部および内部からのアクセス"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1117
#, fuzzy
msgid "Note that the OpenID Connect Provider externally accessible token and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL. For example, if your SPA acquires a token from an external token endpoint address and sends it to Quarkus as a Bearer token then an issuer verification failure may be reported by the endpoint."
msgstr "OpenID Connect Providerの外部からアクセス可能なトークンやその他のエンドポイントは、 `quarkus.oidc.auth-server-url` 内部URLに関連して自動検出または設定されたURLとは異なるHTTP(S)URLを持つ場合があることに注意してください。例えば、SPAが外部のトークンエンドポイントのアドレスからトークンを取得し、それをBearerトークンとしてQuarkusに送信した場合、エンドポイントから発行者検証の失敗が報告されることがあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1120
#, fuzzy
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "このような場合、Keycloakを使用している場合は、 `KEYCLOAK_FRONTEND_URL` システムプロパティに外部からアクセス可能なベースURLを設定して起動してください。他のOpenid Connectプロバイダを使用している場合は、各プロバイダのドキュメントを確認してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect.adoc:1121
#, fuzzy, no-wrap
msgid "How to use 'client-id' property"
msgstr "client-id」プロパティの使用方法"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1124
#, fuzzy
msgid "`quarkus.oidc.client-id` property identifies an OpenID Connect Client which requested the current bearer token. It can be an SPA application running in a browser or a Quarkus `web-app` confidential client application propagating the access token to the Quarkus `service` application."
msgstr "`quarkus.oidc.client-id` プロパティは、現在のベアラートークンを要求したOpenID Connectクライアントを識別します。これは、ブラウザで実行されているSPAアプリケーション、またはアクセストークンをQuarkus `service` アプリケーションに伝達するQuarkus `web-app` の機密クライアントアプリケーションである可能性があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1127
#, fuzzy
msgid "This property is required if the `service` application is expected to introspect the tokens remotely - which is always the case for the opaque tokens.  This property is optional if the local Json Web Key token verification only is used."
msgstr "このプロパティは、 `service` アプリケーションがトークンをリモートでイントロスペクトすることが期待される場合に必要です。このプロパティは、ローカルのJson Web Keyトークンの検証のみを使用する場合はオプションです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1129
#, fuzzy
msgid "Nonetheless, setting this property is encouraged even if the endpoint does not require an access to the remote introspection endpoint. The reasons behind it that `client-id`, if set, can be used to verify the token audience and will also be included in the logs when the token verification fails for the better traceability of the tokens issued to specific clients to be analyzed over a longer period of time."
msgstr "しかし、エンドポイントがリモートイントロスペクションエンドポイントへのアクセスを必要としない場合でも、このプロパティを設定することが推奨されます。その理由は、 `client-id` が設定されていれば、トークンのオーディエンスを検証するために使用することができ、また、特定のクライアントに発行されたトークンのより良いトレーサビリティのために、トークンの検証が失敗したときには、より長い期間にわたって分析するために、ログに含まれます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1131
#, fuzzy
msgid "For example, if your OpenID Connect provider sets a token audience then the following configuration pattern is recommended:"
msgstr "例えば、OpenID Connectのプロバイダーがトークンのオーディエンスを設定する場合、以下の構成パターンが推奨されます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect.adoc:1138
#, no-wrap
msgid ""
"# Set client-id\n"
"quarkus.oidc.client-id=quarkus-app\n"
"# Token audience claim must contain 'quarkus-app'\n"
"quarkus.oidc.token.audience=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1141
#, fuzzy
msgid "If you set `quarkus.oidc.client-id` but your endpoint does not require a remote access to one of OpenID Connect Provider endpoints (introspection, token acquisition, etc) then do not set a client secret with the `quarkus.oidc.credentials` or similar properties as it will not be used."
msgstr "`quarkus.oidc.client-id` を設定しても、エンドポイントがOpenID Connect Providerエンドポイントのいずれかへのリモートアクセスを必要としない場合（イントロスペクション、トークンの取得など）、クライアントシークレットは使用されないため、 `quarkus.oidc.credentials` などのプロパティを設定しないでください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1143
#, fuzzy
msgid "Note Quarkus `web-app` applications always require `quarkus.oidc.client-id` property."
msgstr "注記 Quarkus `web-app` アプリケーションは、常に `quarkus.oidc.client-id` プロパティを必要とします。"

#. type: Title ==
#: upstream/_guides/security-openid-connect.adoc:1144
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1147
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloakのドキュメント]"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1148
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1149
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1150
#, fuzzy
msgid "xref:security-openid-connect-client.adoc[Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens]"
msgstr "link:security-openid-connect-client.html[Quarkus - OpenID ConnectおよびOAuth2クライアントとフィルタを使用したアクセストークンの管理]"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1151
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1152
#, fuzzy
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr "link:security-jwt-build.html[SmallRye JWT BuildによるJWTトークンの署名と暗号化]"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1153
#, fuzzy
msgid "xref:security.adoc#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"
msgstr "link:security.html#oidc-jwt-oauth2-comparison[QuarkusのOIDC、JWT、OAuth2機能の概要]"

#. type: Plain text
#: upstream/_guides/security-openid-connect.adoc:1153
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

#~ msgid "This command generates a Maven project, importing the `keycloak` extension which is an implementation of a Keycloak Adapter for Quarkus applications and provides all the necessary capabilities to integrate with a Keycloak Server and perform bearer token authorization."
#~ msgstr "このコマンドは、Quarkusアプリケーション用のKeycloakアダプターの実装であり、Keycloakサーバーと統合してベアラートークン認証を実行するために必要なすべての機能を提供する `keycloak` エクステンションをインポートして、Mavenプロジェクトを生成します。"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 15 minutes"
#~ msgstr "15分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Docker"
#~ msgstr "Docker"

#~ msgid "./mvnw package -Pnative\n"
#~ msgstr "./mvnw package -Pnative\n"

#~ msgid "Injection of the `JsonWebToken` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
#~ msgstr "`JsonWebToken` のインジェクションは、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#~ msgid "Configuring using the application.properties file"
#~ msgstr "application.propertiesファイルを使った設定"

#~ msgid "Configuring CORS"
#~ msgstr "CORSの設定"

#~ msgid "Running in Developer Mode"
#~ msgstr "デベロッパーモードでの実行"

#~ msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
#~ msgstr "マイクロサービスを開発モードで実行するには、 `./mvnw clean compile quarkus:dev` を使用します。"
