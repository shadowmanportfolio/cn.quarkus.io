# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-06 18:13+0000\n"
"PO-Revision-Date: 2022-04-12 11:33+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-jwt.adoc:6
#, no-wrap
msgid "Using JWT RBAC"
msgstr "JWT RBACの使用"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:15
msgid "This guide explains how your Quarkus application can utilize https://github.com/smallrye/smallrye-jwt/[SmallRye JWT] to verify https://tools.ietf.org/html/rfc7519[JSON Web Token]s, represent them as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken` and provide secured access to the Quarkus HTTP endpoints using Bearer Token Authorization and https://en.wikipedia.org/wiki/Role-based_access_control[Role-Based Access Control]."
msgstr "このガイドでは、Quarkusアプリケーションが https://github.com/smallrye/smallrye-jwt/[SmallRye JWT] を利用して、 link:https://tools.ietf.org/html/rfc7519[JSON Web Token] を検証し、MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken` として表現し、Bearer Token Authorizationと link:https://en.wikipedia.org/wiki/Role-based_access_control[Role-Based Access Control] を使用してQuarkus HTTPエンドポイントへのセキュアなアクセスを提供する方法について説明します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:18
msgid "Quarkus OpenID Connect `quarkus-oidc` extension also supports Bearer Token Authorization and uses `smallrye-jwt` to represent the bearer tokens as `JsonWebToken`, please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide for more information.  OpenID Connect extension has to be used if the Quarkus application needs to authenticate the users using OIDC Authorization Code Flow, please read xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide for more information."
msgstr "Quarkus OpenId Connect `quarkus-oidc` エクステンションは、ベアラートークン認可もサポートしており、 `smallrye-jwt` を使用してベアラートークンを `JsonWebToken` として表現します。詳しくは link:security-openid-connect[Using OpenID Connect to Protect Service Applications] ガイドをご覧ください。OpenId Connect extensionは、QuarkusアプリケーションがOIDC Authorization Code Flowを使用してユーザーを認証する必要がある場合に使用する必要があります。詳しくは link:security-openid-connect-web-authentication[Using OpenID Connect to Protect Web Applications] ガイドをご覧ください。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:23
#, no-wrap
msgid "Quickstart"
msgstr "クイックスタート"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:25
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:29
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、すぐに完成した例に飛んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:31
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:33
msgid "The solution is located in the `security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[directory]."
msgstr "ソリューションは `security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[ディレクトリ] にあります。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:34
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:37
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:43
msgid "This command generates the Maven project and imports the `smallrye-jwt` extension, which includes the {mp-jwt} support."
msgstr "このコマンドは、RESTエンドポイントを持つMavenプロジェクトを生成し、{mp-jwt}サポートを含む `smallrye-jwt` エクステンションをインポートします。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:46
msgid "If you already have your Quarkus project configured, you can add the `smallrye-jwt` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `smallrye-jwt` エクステンションを追加することができます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:51
msgid "This will add the following to your build file:"
msgstr "これにより、ビルドファイルに以下が追加されます:"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:53 upstream/_guides/security-jwt.adoc:838
#: upstream/_guides/security-jwt.adoc:943
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:63
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-jwt</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-jwt-build</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-jwt.adoc:66 upstream/_guides/security-jwt.adoc:848
#: upstream/_guides/security-jwt.adoc:952
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:70
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-smallrye-jwt\")\n"
"implementation(\"io.quarkus:quarkus-smallrye-jwt-build\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:72
#, no-wrap
msgid "Examine the JAX-RS resource"
msgstr "JAX-RSリソースを調べる"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:75
msgid "Create a REST endpoint in `src/main/java/org/acme/security/jwt/TokenSecuredResource.java` with the following content:"
msgstr "RESTエンドポイントを`src/main/java/org/acme/security/jwt/TokenSecuredResource.java` に以下の内容で作成します。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:76
#, no-wrap
msgid "REST Endpoint V1"
msgstr "REST エンドポイント V1"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:80 upstream/_guides/security-jwt.adoc:187
#: upstream/_guides/security-jwt.adoc:327
#: upstream/_guides/security-jwt.adoc:472
#: upstream/_guides/security-jwt.adoc:625
#, no-wrap
msgid "package org.acme.security.jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:82
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:93
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.enterprise.context.RequestScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.InternalServerErrorException;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:95 upstream/_guides/security-jwt.adoc:201
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:98
#, no-wrap
msgid ""
"@Path(\"/secured\")\n"
"public class TokenSecuredResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:101
#: upstream/_guides/security-jwt.adoc:208
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:109
#, no-wrap
msgid ""
"    @GET()\n"
"    @Path(\"permit-all\")\n"
"    @PermitAll // <2>\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx); // <3>\n"
"    }\n"
msgstr ""
"    @GET()\n"
"    @Path(\"permit-all\")\n"
"    @PermitAll // <2>\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx); // <3>\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:125
#, no-wrap
msgid ""
"    private String getResponseString(SecurityContext ctx) {\n"
"        String name;\n"
"        if (ctx.getUserPrincipal() == null) { // <4>\n"
"            name = \"anonymous\";\n"
"        } else if (!ctx.getUserPrincipal().getName().equals(jwt.getName())) { // <5>\n"
"            throw new InternalServerErrorException(\"Principal and JsonWebToken names do not match\");\n"
"        } else {\n"
"            name = ctx.getUserPrincipal().getName(); // <6>\n"
"        }\n"
"        return String.format(\"hello + %s,\"\n"
"            + \" isHttps: %s,\"\n"
"            + \" authScheme: %s,\"\n"
"            + \" hasJWT: %s\",\n"
"            name, ctx.isSecure(), ctx.getAuthenticationScheme(), hasJwt()); // <7>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:130
#: upstream/_guides/security-jwt.adoc:245
#: upstream/_guides/security-jwt.adoc:543
#, no-wrap
msgid ""
"    private boolean hasJwt() {\n"
"        return jwt.getClaimNames() != null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:132
#, fuzzy
msgid "Here we inject the JsonWebToken interface, an extension of the java.security.Principal interface that provides access to the claims associated with the current authenticated token."
msgstr ""
"ここでは、java.security.Principalインターフェイスの拡張であるJsonWebTokenイン"
"ターフェイスを注入し、現在認証されているトークンに関連するクレームへのアクセ"
"スを提供します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:133
#, fuzzy
msgid "@PermitAll is a JSR 250 common security annotation that indicates that the given endpoint is accessible by any caller, authenticated or not."
msgstr ""
"PermitAllは、JSR250共通のセキュリティアノテーションで、指定されたエンドポイン"
"トが、認証されているかどうかにかかわらず、どの呼び出し元からでもアクセス可能"
"であることを示します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:134
#, fuzzy
msgid "Here we inject the JAX-RS SecurityContext to inspect the security state of the call and use a `getResponseString()` function to populate a response string."
msgstr ""
"ここでは、JAX-RS "
"SecurityContextを注入して呼び出しのセキュリティ状態を検査し、 "
"`getResponseString()` の関数を使用して応答文字列を入力しています。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:135
#, fuzzy
msgid "Here we check if the call is insecure by checking the request user/caller `Principal` against null."
msgstr "ここでは、リクエストのユーザー/発信者 `Principal` を null "
"と照合することで、通話が安全でないかどうかを確認します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:136
#, fuzzy
msgid "Here we check that the Principal and JsonWebToken have the same name since JsonWebToken does represent the current Principal."
msgstr ""
"ここでは、JsonWebTokenが現在のPrincipalを表しているので、PrincipalとJsonWebTo"
"kenが同じ名前であることを確認します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:137
#, fuzzy
msgid "Here we get the Principal name."
msgstr "ここでは、プリンシパルの名前を取得します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:138
#, fuzzy
msgid "The reply we build up makes use of the caller name, the `isSecure()` and `getAuthenticationScheme()` states of the request `SecurityContext`, and whether a non-null `JsonWebToken` was injected."
msgstr ""
"私たちが構築する応答は、発信者名、リクエストの `isSecure()` と "
"`getAuthenticationScheme()` の状態 `SecurityContext` 、非NULLの "
"`JsonWebToken` が注入されたかどうかを利用します。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:139
#, no-wrap
msgid "Run the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:142
msgid "Now we are ready to run our application. Use:"
msgstr "これで、アプリケーションを実行する準備が整いました。以下を使用してください。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:146
msgid "and you should see output similar to:"
msgstr "以下のような出力が表示されるはずです。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:147
#, no-wrap
msgid "quarkus:dev Output"
msgstr "quarkus:dev Output"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:160
#, no-wrap
msgid ""
"[INFO] Scanning for projects...\n"
"[INFO]\n"
"[INFO] ----------------------< org.acme:security-jwt-quickstart >-----------------------\n"
"[INFO] Building security-jwt-quickstart 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"...\n"
"Listening for transport dt_socket at address: 5005\n"
"2020-07-15 16:09:50,883 INFO  [io.quarkus] (Quarkus Main Thread) security-jwt-quickstart 1.0.0-SNAPSHOT on JVM (powered by Quarkus 999-SNAPSHOT) started in 1.073s. Listening on: http://0.0.0.0:8080\n"
"2020-07-15 16:09:50,885 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.\n"
"2020-07-15 16:09:50,885 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, mutiny, resteasy-reactive, resteasy-reactive-jackson, security, smallrye-context-propagation, smallrye-jwt, vertx, vertx-web]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:163
msgid "Now that the REST endpoint is running, we can access it using a command line tool like curl:"
msgstr "REST エンドポイントが実行されているので、curl のようなコマンドラインツールを使ってアクセスすることができます。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:164
#, no-wrap
msgid "curl command for /secured/permit-all"
msgstr " /secured/permit-all に対するcurl コマンド"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:169
#, no-wrap
msgid ""
"$ curl http://127.0.0.1:8080/secured/permit-all; echo\n"
"hello + anonymous, isHttps: false, authScheme: null, hasJWT: false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:173
msgid "We have not provided any JWT in our request, so we would not expect that there is any security state seen by the endpoint, and the response is consistent with that:"
msgstr "このリクエストではJWTを設定していませんので、エンドポイントから見たセキュリティーステートがあるとは期待できず、レスポンスもそれに沿ったものとなっています。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:175
msgid "user name is anonymous"
msgstr "ユーザー名は anonymous (匿名) です。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:176
msgid "isHttps is false as https is not used"
msgstr "isHttps は https を使用しないので false です。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:177
msgid "authScheme is null"
msgstr "authScheme は null です。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:178
msgid "hasJWT is false"
msgstr "hasJWTは false です。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:180
msgid "Use Ctrl-C to stop the Quarkus server."
msgstr "Ctrl-Cを使用してQuarkusサーバーを停止します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:182
msgid "So now let's actually secure something. Take a look at the new endpoint method `helloRolesAllowed` in the following:"
msgstr "では実際に何かを保護してみましょう。下記の新しいエンドポイントメソッド `helloRolesAllowed` を見てみましょう。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:183
#, no-wrap
msgid "REST Endpoint V2"
msgstr "REST エンドポイント V2"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:199
#: upstream/_guides/security-jwt.adoc:484
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.annotation.security.RolesAllowed;\n"
"import javax.enterprise.context.RequestScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.InternalServerErrorException;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:205
#: upstream/_guides/security-jwt.adoc:492
#: upstream/_guides/security-jwt.adoc:633
#, no-wrap
msgid ""
"@Path(\"/secured\")\n"
"@RequestScoped\n"
"public class TokenSecuredResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:216
#: upstream/_guides/security-jwt.adoc:506
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"permit-all\")\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:224
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"roles-allowed\") // <2>\n"
"    @RolesAllowed({ \"User\", \"Admin\" }) // <3>\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String helloRolesAllowed(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx) + \", birthdate: \" + jwt.getClaim(\"birthdate\").toString(); // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:240
#: upstream/_guides/security-jwt.adoc:538
#, no-wrap
msgid ""
"    private String getResponseString(SecurityContext ctx) {\n"
"        String name;\n"
"        if (ctx.getUserPrincipal() == null) {\n"
"            name = \"anonymous\";\n"
"        } else if (!ctx.getUserPrincipal().getName().equals(jwt.getName())) {\n"
"            throw new InternalServerErrorException(\"Principal and JsonWebToken names do not match\");\n"
"        } else {\n"
"            name = ctx.getUserPrincipal().getName();\n"
"        }\n"
"        return String.format(\"hello + %s,\"\n"
"            + \" isHttps: %s,\"\n"
"            + \" authScheme: %s,\"\n"
"            + \" hasJWT: %s\",\n"
"            name, ctx.isSecure(), ctx.getAuthenticationScheme(), hasJwt());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:247
#, fuzzy
msgid "Here we inject `JsonWebToken`"
msgstr "ここでは注入 `JsonWebToken`"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:248
#, fuzzy
msgid "This new endpoint will be located at /secured/roles-allowed"
msgstr "この新しいエンドポイントは、/secured/roles-allowedに配置されます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:250
#, fuzzy
msgid "@RolesAllowed is a JSR 250 common security annotation that indicates that the given endpoint is accessible by a caller if they have either a \"User\" or \"Admin\" role assigned."
msgstr ""
"RolesAllowedは、JSR 250共通のセキュリティアノテーションで、「User」または「Ad"
"min」のロールが割り当てられている場合に、指定されたエンドポイントに呼び出し側"
"がアクセスできることを示します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:251
#, fuzzy
msgid "Here we build the reply the same way as in the `hello` method but also add a value of the JWT `birthdate` claim by directly calling the injected `JsonWebToken`."
msgstr ""
"ここでは、 `hello` メソッドと同じ方法で返信を作成しますが、注入された "
"`JsonWebToken` を直接呼び出すことで、JWT `birthdate` 請求の値を追加します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:253
#, fuzzy
msgid "After you make this addition to your `TokenSecuredResource`, rerun the `./mvnw compile quarkus:dev` command, and then try `curl -v http://127.0.0.1:8080/secured/roles-allowed; echo` to attempt to access the new endpoint. Your output should be:"
msgstr ""
"`TokenSecuredResource` にこの追加を行った後、 `./mvnw compile quarkus:dev` "
"コマンドを再実行し、新しいエンドポイントへのアクセスを試みます。 `curl -v <a "
"href=\"http://127.0.0.1:8080/secured/roles-allowed\" class=\"bare\""
">http://127.0.0.1:8080/secured/roles-allowed</a>; "
"echo`新しいエンドポイントへのアクセスを試みます。出力は次のようになります。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:254
#, fuzzy, no-wrap
msgid "curl command for /secured/roles-allowed"
msgstr " /secured/permit-all に対するcurl コマンド"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:274
#, no-wrap
msgid ""
"$ curl -v http://127.0.0.1:8080/secured/roles-allowed; echo\n"
"*   Trying 127.0.0.1...\n"
"* TCP_NODELAY set\n"
"* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n"
"> GET /secured/roles-allowed HTTP/1.1\n"
"> Host: 127.0.0.1:8080\n"
"> User-Agent: curl/7.54.0\n"
"> Accept: */*\n"
">\n"
"< HTTP/1.1 401 Unauthorized\n"
"< Connection: keep-alive\n"
"< Content-Type: text/html;charset=UTF-8\n"
"< Content-Length: 14\n"
"< Date: Sun, 03 Mar 2019 16:32:34 GMT\n"
"<\n"
"* Connection #0 to host 127.0.0.1 left intact\n"
"Not authorized\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:277
#, fuzzy
msgid "Excellent, we have not provided any JWT in the request, so we should not be able to access the endpoint, and we were not. Instead we received an HTTP 401 Unauthorized error. We need to obtain and pass in a valid JWT to access that endpoint. There are two steps to this, 1) configuring our {extension-name} extension with information on how to validate a JWT, and 2) generating a matching JWT with the appropriate claims."
msgstr ""
"素晴らしい！リクエストにJWTを提供していないので、エンドポイントにアクセスでき"
"ないはずですが、そうはなりませんでした。代わりに、HTTP 401 Unauthorizedエラー"
"が発生しました。このエンドポイントにアクセスするためには、有効なJWTを取得して"
"渡す必要があります。これには2つのステップがあります。1）JWTを検証する方法につ"
"いての情報を{extension-name}エクステンションに設定すること、2）適切なクレーム"
"を持つマッチするJWTを生成することです。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:278
#, fuzzy, no-wrap
msgid "Configuring the {extension-name} Extension Security Information"
msgstr "エクステンション{{extension-name}}のセキュリティ情報を設定する"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:281
#, fuzzy
msgid "Create a `security-jwt-quickstart/src/main/resources/application.properties` with the following content:"
msgstr ""
"以下の内容で `security-jwt-quickstart/src/main/resources/application."
"properties` を作成します。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:282
#, fuzzy, no-wrap
msgid "application.properties for TokenSecuredResource"
msgstr "TokenSecuredResourceのapplication.properties"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:287
#, no-wrap
msgid ""
"mp.jwt.verify.publickey.location=publicKey.pem #<1>\n"
"mp.jwt.verify.issuer=https://example.com/issuer #<2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:289
#, no-wrap
msgid "quarkus.native.resources.includes=publicKey.pem #<3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:291
#, fuzzy
msgid "We are setting public key location to point to a classpath publicKey.pem location. We will add this key in part B, <<Adding a Public Key>>."
msgstr ""
"公開鍵の場所をクラスパスのpublicKey."
"pemの場所を指すように設定しています。この鍵の追加は、パートBの link:#Adding "
"a Public Key[「公開鍵の追加」]で行います。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:292
#, fuzzy
msgid "We are setting the issuer to the URL string `https://example.com/issuer`."
msgstr ""
"発行者をURL文字列に設定しています。 `<a href=\"https://example.com/issuer\" "
"class=\"bare\">https://example.com/issuer</a>`."

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:293
#, fuzzy
msgid "We are including the public key as a resource in the native executable."
msgstr "ネイティブ実行可能ファイルに公開鍵をリソースとして含めています。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:294
#, fuzzy, no-wrap
msgid "Adding a Public Key"
msgstr "ローカル公開鍵"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:302
#, fuzzy
msgid "The https://tools.ietf.org/html/rfc7519[JWT specification] defines various levels of security of JWTs that one can use.  The {mp-jwt} specification requires that JWTs that are signed with the RSA-256 signature algorithm. This in turn requires a RSA public key pair. On the REST endpoint server side, you need to configure the location of the RSA public key to use to verify the JWT sent along with requests. The `mp.jwt.verify.publickey.location=publicKey.pem` setting configured previously expects that the public key is available on the classpath as `publicKey.pem`. To accomplish this, copy the following content to a `security-jwt-quickstart/src/main/resources/publicKey.pem` file."
msgstr ""
"link:https://tools.ietf.org/html/"
"rfc7519[JWT仕様]では、使用可能なJWTの様々なセキュリティレベルを定義しています"
"。mp-jwt}仕様では、RSA-256署名アルゴリズムで署名されたJWTが必要です。これには"
"、RSA公開鍵ペアが必要です。RESTエンドポイントのサーバー側では、リクエストと一"
"緒に送信されるJWTの検証に使用するRSA公開鍵の場所を設定する必要があります。"
"先に設定した `mp.jwt.verify.publickey.location=publicKey.pem` の設定では、"
"公開鍵がクラスパス上に `publicKey.pem` "
"として用意されていることを想定しています。これを実現するには、以下の内容を "
"`security-jwt-quickstart/src/main/resources/publicKey.pem` "
"ファイルにコピーします。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:303
#, fuzzy, no-wrap
msgid "RSA Public Key PEM Content"
msgstr "RSA 公開鍵 PEM コンテンツ"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:315
#, no-wrap
msgid ""
"-----BEGIN PUBLIC KEY-----\n"
"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEq\n"
"Fyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwR\n"
"TYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5e\n"
"UF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9\n"
"AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYn\n"
"sIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9x\n"
"nQIDAQAB\n"
"-----END PUBLIC KEY-----\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:317
#, fuzzy, no-wrap
msgid "Generating a JWT"
msgstr "JWTの生成"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:320
#, fuzzy
msgid "Often one obtains a JWT from an identity manager like https://www.keycloak.org/[Keycloak], but for this quickstart we will generate our own using the JWT generation API provided by `smallrye-jwt` (see xref:smallrye-jwt-build.adoc[Generate JWT tokens with SmallRye JWT] for more information)."
msgstr ""
"多くの場合、 link:https://www.keycloak.org/[Keycloak]のようなアイデンティティ"
"・マネージャーからJWTを取得しますが、このクイックスタートでは、 `smallrye-"
"jwt` が提供するJWT生成APIを使用して独自のJWTを生成します（詳細については、 "
"link:smallrye-jwt-build.html[SmallRye "
"JWTによるJWTトークンの生成]を参照してください）。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:322
#, fuzzy
msgid "Take the code from the following listing and place into `security-jwt-quickstart/src/test/java/org/acme/security/jwt/GenerateToken.java`:"
msgstr ""
"以下のリストのコードを `security-jwt-quickstart/src/main/java/org/acme/"
"security/jwt/GenerateToken.java` に入れてください。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:323
#, fuzzy, no-wrap
msgid "GenerateToken main Driver Class"
msgstr "GenerateToken のメインドライバークラス"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:330
#, no-wrap
msgid ""
"import java.util.Arrays;\n"
"import java.util.HashSet;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:332
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.Claims;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:334
#, no-wrap
msgid "import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:349
#, no-wrap
msgid ""
"public class GenerateToken {\n"
"    /**\n"
"     * Generate JWT token\n"
"     */\n"
"    public static void main(String[] args) {\n"
"        String token =\n"
"           Jwt.issuer(\"https://example.com/issuer\") // <1>\n"
"             .upn(\"jdoe@quarkus.io\") // <2>\n"
"             .groups(new HashSet<>(Arrays.asList(\"User\", \"Admin\"))) // <3>\n"
"             .claim(Claims.birthdate.name(), \"2001-07-13\") // <4>\n"
"           .sign();\n"
"        System.out.println(token);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:353
#, fuzzy
msgid "The `iss` claim is the issuer of the JWT. This needs to match the server side `mp.jwt.verify.issuer`.  in order for the token to be accepted as valid."
msgstr ""
"`iss` 主張は、JWT の発行者です。トークンが有効であると認められるためには、"
"これがサーバー側の `mp.jwt.verify.issuer` と一致する必要があります。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:355
#, fuzzy
msgid "The `upn` claim is defined by the {mp-jwt} spec as preferred claim to use for the `Principal` seen via the container security APIs."
msgstr ""
"`upn` の主張は、{mp-jwt}仕様において、"
"コンテナセキュリティAPIを介して見られる `Principal` "
"に使用する優先的な主張として定義されています。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:356
#, fuzzy
msgid "The `group` claim provides the groups and top-level roles associated with the JWT bearer."
msgstr "`group` claim は、JWT "
"ベアラに関連するグループとトップレベルのロールを提供します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:357
#, fuzzy
msgid "The `birthday` claim. It can be considered to be a sensitive claim so you may want to consider encrypting the claims, see xref:smallrye-jwt-build.adoc[Generate JWT tokens with SmallRye JWT]."
msgstr ""
"`birthday` のクレームです。これは機密性の高いクレームと考えられますので、クレ"
"ームの暗号化を検討した方がよいでしょう。 link:smallrye-jwt-build.html["
"SmallRye JWTを使ったJWTトークンの生成]を参照してください。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:359
#, fuzzy
msgid "Note for this code to work we need the content of the RSA private key that corresponds to the public key we have in the TokenSecuredResource application. Take the following PEM content and place it into `security-jwt-quickstart/src/test/resources/privateKey.pem`:"
msgstr ""
"このコードを動作させるには、TokenSecuredResource "
"アプリケーションにある公開鍵に対応する RSA 秘密鍵の内容が必要です。以下の "
"PEM コンテンツを `security-jwt-quickstart/src/test/resources/privateKey.pem` "
"に入れてください。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:360
#, fuzzy, no-wrap
msgid "RSA Private Key PEM Content"
msgstr "RSA秘密鍵 PEMコンテンツ"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:391
#, no-wrap
msgid ""
"-----BEGIN PRIVATE KEY-----\n"
"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCWK8UjyoHgPTLa\n"
"PLQJ8SoXLLjpHSjtLxMqmzHnFscqhTVVaDpCRCb6e3Ii/WniQTWw8RA7vf4djz4H\n"
"OzvlfBFNgvUGZHXDwnmGaNVaNzpHYFMEYBhE8VGGiveSkzqeLZI+Y02G6sQAfDtN\n"
"qqzM/l5QX8X34oQFaTBW1r49nftvCpITiwJvWyhkWtXP9RP8sXi1im5Vi3dhupOh\n"
"nelk5n0BfajUYIbfHA6ORzjHRbt7NtBl0L2J+0/FUdHyKs6KMlFGNw8O0Dq88qnM\n"
"uXoLJiewhg9332W3DFMeOveel+//cvDnRsCRtPgd4sXFPHh+UShkso7+DRsChXa6\n"
"oGGQD3GdAgMBAAECggEAAjfTSZwMHwvIXIDZB+yP+pemg4ryt84iMlbofclQV8hv\n"
"6TsI4UGwcbKxFOM5VSYxbNOisb80qasb929gixsyBjsQ8284bhPJR7r0q8h1C+jY\n"
"URA6S4pk8d/LmFakXwG9Tz6YPo3pJziuh48lzkFTk0xW2Dp4SLwtAptZY/+ZXyJ6\n"
"96QXDrZKSSM99Jh9s7a0ST66WoxSS0UC51ak+Keb0KJ1jz4bIJ2C3r4rYlSu4hHB\n"
"Y73GfkWORtQuyUDa9yDOem0/z0nr6pp+pBSXPLHADsqvZiIhxD/O0Xk5I6/zVHB3\n"
"zuoQqLERk0WvA8FXz2o8AYwcQRY2g30eX9kU4uDQAQKBgQDmf7KGImUGitsEPepF\n"
"KH5yLWYWqghHx6wfV+fdbBxoqn9WlwcQ7JbynIiVx8MX8/1lLCCe8v41ypu/eLtP\n"
"iY1ev2IKdrUStvYRSsFigRkuPHUo1ajsGHQd+ucTDf58mn7kRLW1JGMeGxo/t32B\n"
"m96Af6AiPWPEJuVfgGV0iwg+HQKBgQCmyPzL9M2rhYZn1AozRUguvlpmJHU2DpqS\n"
"34Q+7x2Ghf7MgBUhqE0t3FAOxEC7IYBwHmeYOvFR8ZkVRKNF4gbnF9RtLdz0DMEG\n"
"5qsMnvJUSQbNB1yVjUCnDAtElqiFRlQ/k0LgYkjKDY7LfciZl9uJRl0OSYeX/qG2\n"
"tRW09tOpgQKBgBSGkpM3RN/MRayfBtmZvYjVWh3yjkI2GbHA1jj1g6IebLB9SnfL\n"
"WbXJErCj1U+wvoPf5hfBc7m+jRgD3Eo86YXibQyZfY5pFIh9q7Ll5CQl5hj4zc4Y\n"
"b16sFR+xQ1Q9Pcd+BuBWmSz5JOE/qcF869dthgkGhnfVLt/OQzqZluZRAoGAXQ09\n"
"nT0TkmKIvlza5Af/YbTqEpq8mlBDhTYXPlWCD4+qvMWpBII1rSSBtftgcgca9XLB\n"
"MXmRMbqtQeRtg4u7dishZVh1MeP7vbHsNLppUQT9Ol6lFPsd2xUpJDc6BkFat62d\n"
"Xjr3iWNPC9E9nhPPdCNBv7reX7q81obpeXFMXgECgYEAmk2Qlus3OV0tfoNRqNpe\n"
"Mb0teduf2+h3xaI1XDIzPVtZF35ELY/RkAHlmWRT4PCdR0zXDidE67L6XdJyecSt\n"
"FdOUH8z5qUraVVebRFvJqf/oGsXc4+ex1ZKUTbY0wqY1y9E39yvB3MaTmZFuuqk8\n"
"f3cg+fr8aou7pr9SHhJlZCU=\n"
"-----END PRIVATE KEY-----\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:394
#, fuzzy
msgid "We will use a `smallrye.jwt.sign.key.location` property to point to this private signing key."
msgstr "`smallrye.jwt.sign.key.location` "
"プロパティを使用して、この秘密署名キーを指定します。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:396
#, fuzzy, no-wrap
msgid "Generating Keys with OpenSSL"
msgstr "OpenSSLによる鍵の生成"

#. type: delimited block =
#: upstream/_guides/security-jwt.adoc:399
#, fuzzy
msgid "It is also possible to generate a public and private key pair using the OpenSSL command line tool."
msgstr "また、OpenSSLのコマンドラインツールを使って公開鍵と秘密鍵のペアを生成すること"
"も可能です。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:400
#, fuzzy, no-wrap
msgid "openssl commands for generating keys"
msgstr "鍵を生成するためのopensslコマンド"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:405
#, no-wrap
msgid ""
"openssl genrsa -out rsaPrivateKey.pem 2048\n"
"openssl rsa -pubout -in rsaPrivateKey.pem -out publicKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:408
#, fuzzy
msgid "An additional step is needed for generating the private key for converting it into the PKCS#8 format."
msgstr "PKCS#8形式に変換するための秘密鍵の生成には、さらにステップが必要です。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:409
#, fuzzy, no-wrap
msgid "openssl command for converting private key"
msgstr "秘密鍵を変換するためのopensslコマンド"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:413
#, no-wrap
msgid "openssl pkcs8 -topk8 -nocrypt -inform pem -in rsaPrivateKey.pem -outform pem -out privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:416
#, fuzzy
msgid "You can use the generated pair of keys instead of the keys used in this quickstart."
msgstr "このクイックスタートで使用したキーの代わりに、生成されたキーのペアを使用する"
"ことができます。"

#. type: delimited block =
#: upstream/_guides/security-jwt.adoc:419
#, fuzzy
msgid "Now we can generate a JWT to use with `TokenSecuredResource` endpoint. To do this, run the following command:"
msgstr "次に、 `TokenSecuredResource` エンドポイントで使用するJWTを生成します。これを"
"行うには、次のコマンドを実行します。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:420
#, fuzzy, no-wrap
msgid "Command to Generate JWT"
msgstr "JWTを生成するコマンド"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:422
#, fuzzy, no-wrap
msgid "Sample JWT Generation Output"
msgstr "JWT生成の出力例"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:426
#, no-wrap
msgid "$ mvn exec:java -Dexec.mainClass=org.acme.security.jwt.GenerateToken -Dexec.classpathScope=test -Dsmallrye.jwt.sign.key.location=privateKey.pem\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:428
#, no-wrap
msgid "eyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF90aW1lIjoxNTUxNjU5Njc2LCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmctand0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIsImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3RlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZSIsImV4cCI6MTU1MTY1OTk3NiwiaWF0IjoxNTUxNjU5Njc2LCJqdGkiOiJhLTEyMyJ9.O9tx_wNNS4qdpFhxeD1e7v4aBNWz1FCq0UV8qmXd7dW9xM4hA5TO-ZREk3ApMrL7_rnX8z81qGPIo_R8IfHDyNaI1SLD56gVX-NaOLS2OjfcbO3zOWJPKR_BoZkYACtMoqlWgIwIRC-wJKUJU025dHZiNL0FWO4PjwuCz8hpZYXIuRscfFhXKrDX1fh3jDhTsOEFfu67ACd85f3BdX9pe-ayKSVLh_RSbTbBPeyoYPE59FW7H5-i8IE-Gqu838Hz0i38ksEJFI25eR-AJ6_PSUD0_-TV3NjXhF3bFIeT4VSaIZcpibekoJg0cQm-4ApPEcPLdgTejYHA-mupb8hSwg\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:432
#, fuzzy
msgid "The JWT string is the Base64 URL encoded string that has 3 parts separated by '.' characters.  First part - JWT headers, second part - JWT claims, third part - JWT signature."
msgstr ""
"JWT 文字列は、Base64 で URL エンコードされた文字列で、「.」文字で区切られた "
"3 つの部分から構成されています。第一の部分 - JWT ヘッダー、第二の部分 - JWT "
"クレーム、第三の部分 - JWT シグネチャー。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:433
#, fuzzy, no-wrap
msgid "Finally, Secured Access to /secured/roles-allowed"
msgstr "最後に、/secured/roles-allowedへのSecured Accessです。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:435
#, fuzzy
msgid "Now let's use this to make a secured request to the /secured/roles-allowed endpoint. Make sure you have the Quarkus server still running in dev mode, and then run the following command, making sure to use your version of the generated JWT from the previous step:"
msgstr ""
"次に、これを使用して、/secured/roles-"
"allowedエンドポイントへのセキュアなリクエストを行ってみましょう。 `./mvnw "
"compile quarkus:dev` コマンドを使用してQuarkusサーバが稼働していることを確認"
"し、次のコマンドを実行します。その際、前のステップで生成したJWTのバージョンを"
"使用するようにしてください。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:439
#, no-wrap
msgid "curl -H \"Authorization: Bearer eyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF90aW1lIjoxNTUxNjUyMDkxLCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmctand0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIsImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3RlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZSIsImV4cCI6MTU1MTY1MjM5MSwiaWF0IjoxNTUxNjUyMDkxLCJqdGkiOiJhLTEyMyJ9.aPA4Rlc4kw7n_OZZRRk25xZydJy_J_3BRR8ryYLyHTO1o68_aNWWQCgpnAuOW64svPhPnLYYnQzK-l2vHX34B64JySyBD4y_vRObGmdwH_SEufBAWZV7mkG3Y4mTKT3_4EWNu4VH92IhdnkGI4GJB6yHAEzlQI6EdSOa4Nq8Gp4uPGqHsUZTJrA3uIW0TbNshFBm47-oVM3ZUrBz57JKtr0e9jv0HjPQWyvbzx1HuxZd6eA8ow8xzvooKXFxoSFCMnxotd3wagvYQ9ysBa89bgzL-lhjWtusuMFDUVYwFqADE7oOSOD4Vtclgq8svznBQ-YpfTHfb9QEcofMlpyjNA\" http://127.0.0.1:8080/secured/roles-allowed; echo\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-jwt.adoc:441
#, fuzzy, no-wrap
msgid "curl Command for /secured/roles-allowed With JWT"
msgstr " /secured/permit-all に対するcurl コマンド"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:446
#, no-wrap
msgid ""
"$ curl -H \"Authorization: Bearer eyJraWQ...\" http://127.0.0.1:8080/secured/roles-allowed; echo\n"
"hello + jdoe@quarkus.io, isHttps: false, authScheme: Bearer, hasJWT: true, birthdate: 2001-07-13\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:449
msgid "Success! We now have:"
msgstr "成功! これで、以下が得られます"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:451
#, fuzzy
msgid "a non-anonymous caller name of jdoe@quarkus.io"
msgstr ""
"a non-anonymous caller name of link:mailto:jdoe@quarkus.io[jdoe@quarkus.io]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:452
#, fuzzy
msgid "an authentication scheme of Bearer"
msgstr "の認証スキームは、Bearer"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:453
#, fuzzy
msgid "a non-null JsonWebToken"
msgstr "非NULLのJsonWebToken"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:454
#, fuzzy
msgid "birthdate claim value"
msgstr "生年月日 請求額"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:455
#, fuzzy, no-wrap
msgid "Using the JsonWebToken and Claim Injection"
msgstr "JsonWebTokenとClaim Injectionの使用について"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:462
#, fuzzy
msgid "Now that we can generate a JWT to access our secured REST endpoints, let's see what more we can do with the `JsonWebToken` interface and the JWT claims. The `org.eclipse.microprofile.jwt.JsonWebToken` interface extends the `java.security.Principal` interface, and is in fact the type of the object that is returned by the `javax.ws.rs.core.SecurityContext#getUserPrincipal()` call we used previously. This means that code that does not use CDI but does have access to the REST container `SecurityContext` can get hold of the caller `JsonWebToken` interface by casting the `SecurityContext#getUserPrincipal()`."
msgstr ""
"JWT を生成してセキュアな REST "
"エンドポイントにアクセスできるようになったので、 `JsonWebToken` "
"インターフェースと JWT クレームを使ってさらに何ができるか見てみましょう。 "
"`org.eclipse.microprofile.jwt.JsonWebToken` インターフェイスは `java.security"
".Principal` インターフェイスを拡張したもので、実際、以前使用した `javax.ws.rs"
".core.SecurityContext#getUserPrincipal()` "
"呼び出しによって返されるオブジェクトのタイプです。これは、CDI "
"を使用していないが、REST コンテナ `SecurityContext` "
"にアクセスできるコードは、 `SecurityContext#getUserPrincipal()` "
"をキャストすることで、呼び出し元の `JsonWebToken` "
"インターフェイスを取得できることを意味します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:465
#, fuzzy
msgid "The `JsonWebToken` interface defines methods for accessing claims in the underlying JWT. It provides accessors for common claims that are required by the {mp-jwt} specification as well as arbitrary claims that may exist in the JWT."
msgstr ""
"`JsonWebToken` インターフェースは、基礎となる JWT "
"内のクレームにアクセスするためのメソッドを定義します。mp-jwt}仕様で要求されて"
"いる一般的なクレームや、JWTに存在する可能性のある任意のクレームに対するアクセ"
"サを提供します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:468
#, fuzzy
msgid "All the JWT claims can also be injected. Let's expand our `TokenSecuredResource` with another endpoint /secured/roles-allowed-admin which uses the injected `birthdate` claim (as opposed to getting it from `JsonWebToken`):"
msgstr ""
"すべての JWT クレームは注入することができます。 `TokenSecuredResource` "
"を別のエンドポイント /secured/roles-allowed-admin "
"で拡張してみましょう。このエンドポイントでは、注入された `birthdate` "
"のクレームを使用します（ `JsonWebToken` から取得するのではありません）。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:488
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.Claim;\n"
"import org.eclipse.microprofile.jwt.Claims;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:498
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt; // <1>\n"
"    @Inject\n"
"    @Claim(standard = Claims.birthdate)\n"
"    String birthdate; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:514
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"roles-allowed\")\n"
"    @RolesAllowed({ \"User\", \"Admin\" })\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String helloRolesAllowed(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx) + \", birthdate: \" + jwt.getClaim(\"birthdate\").toString();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:522
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"roles-allowed-admin\")\n"
"    @RolesAllowed(\"Admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String helloRolesAllowedAdmin(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx) + \", birthdate: \" + birthdate; // <3>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:545
#, fuzzy
msgid "Here we inject the JsonWebToken."
msgstr "ここでは、JsonWebTokenを注入します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:546
#, fuzzy
msgid "Here we inject the `birthday` claim as `String` - this is why the `@RequestScoped` scope is now required."
msgstr ""
"ここでは、 `birthday` の主張を `String` として注入しています。これが、 "
"`@RequestScoped` のスコープが必要になった理由です。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:547
#, fuzzy
msgid "Here we use the injected `birthday` claim to build the final reply."
msgstr "ここでは、注入された `birthday` の主張を利用して、最終的な回答を構築します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:549
#, fuzzy
msgid "Now generate the token again and run:"
msgstr "ここで再度トークンを生成して実行します。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:553
#, no-wrap
msgid "curl -H \"Authorization: Bearer eyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF90aW1lIjoxNTUxNjUyMDkxLCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmctand0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIsImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3RlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZSIsImV4cCI6MTU1MTY1MjM5MSwiaWF0IjoxNTUxNjUyMDkxLCJqdGkiOiJhLTEyMyJ9.aPA4Rlc4kw7n_OZZRRk25xZydJy_J_3BRR8ryYLyHTO1o68_aNWWQCgpnAuOW64svPhPnLYYnQzK-l2vHX34B64JySyBD4y_vRObGmdwH_SEufBAWZV7mkG3Y4mTKT3_4EWNu4VH92IhdnkGI4GJB6yHAEzlQI6EdSOa4Nq8Gp4uPGqHsUZTJrA3uIW0TbNshFBm47-oVM3ZUrBz57JKtr0e9jv0HjPQWyvbzx1HuxZd6eA8ow8xzvooKXFxoSFCMnxotd3wagvYQ9ysBa89bgzL-lhjWtusuMFDUVYwFqADE7oOSOD4Vtclgq8svznBQ-YpfTHfb9QEcofMlpyjNA\" http://127.0.0.1:8080/secured/roles-allowed-admin; echo\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:559
#, no-wrap
msgid ""
"$ curl -H \"Authorization: Bearer eyJraWQ...\" http://127.0.0.1:8080/secured/roles-allowed-admin; echo\n"
"hello + jdoe@quarkus.io, isHttps: false, authScheme: Bearer, hasJWT: true, birthdate: 2001-07-13\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:561
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:564
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:568
#, fuzzy
msgid "And executed using `java -jar target/quarkus-app/quarkus-run.jar`:"
msgstr "そして、 `java -jar target/quarkus-app/quarkus-run.jar` を使って実行します。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:569
#, no-wrap
msgid "Runner jar Example"
msgstr "Runner jarの例"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:575
#, no-wrap
msgid ""
"$ java -jar target/quarkus-app/quarkus-run.jar\n"
"2019-03-28 14:27:48,839 INFO  [io.quarkus] (main) Quarkus {quarkus-version} started in 0.796s. Listening on: http://[::]:8080\n"
"2019-03-28 14:27:48,841 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive, resteasy-reactive-jackson, security, smallrye-jwt]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:578
#, fuzzy
msgid "You can also generate the native executable with:"
msgstr "`./mvnw clean package -Pnative` "
"でネイティブ実行可能ファイルを生成することもできます。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:581
#, no-wrap
msgid "Native Executable Example"
msgstr "ネイティブ実行可能ファイル例"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:600
#, no-wrap
msgid ""
"[INFO] Scanning for projects...\n"
"...\n"
"[security-jwt-quickstart-runner:25602]     universe:     493.17 ms\n"
"[security-jwt-quickstart-runner:25602]      (parse):     660.41 ms\n"
"[security-jwt-quickstart-runner:25602]     (inline):   1,431.10 ms\n"
"[security-jwt-quickstart-runner:25602]    (compile):   7,301.78 ms\n"
"[security-jwt-quickstart-runner:25602]      compile:  10,542.16 ms\n"
"[security-jwt-quickstart-runner:25602]        image:   2,797.62 ms\n"
"[security-jwt-quickstart-runner:25602]        write:     988.24 ms\n"
"[security-jwt-quickstart-runner:25602]      [total]:  43,778.16 ms\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] BUILD SUCCESS\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] Total time:  51.500 s\n"
"[INFO] Finished at: 2019-03-28T14:30:56-07:00\n"
"[INFO] ------------------------------------------------------------------------\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:604
#, no-wrap
msgid ""
"$ ./target/security-jwt-quickstart-runner\n"
"2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.12.0 started in 0.006s. Listening on: http://[::]:8080\n"
"2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive, resteasy-reactive-jackson, security, smallrye-jwt]\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:606
#, fuzzy, no-wrap
msgid "Explore the Solution"
msgstr "ソリューションを見る"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:612
#, fuzzy
msgid "The solution repository located in the `security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[directory] contains all of the versions we have worked through in this quickstart guide as well as some additional endpoints that illustrate subresources with injection of ``JsonWebToken``s and their claims into those using the CDI APIs. We suggest that you check out the quickstart solutions and explore the `security-jwt-quickstart` directory to learn more about the {extension-name} extension features."
msgstr ""
"`security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[dire"
"ctory]にあるソリューションリポジトリには、このクイックスタートガイドで扱った"
"すべてのバージョンのほか、CDI APIを使用したものに `JsonWebToken`sとそのクレー"
"ムを注入したサブリソースを説明するいくつかの追加エンドポイントが含まれていま"
"す。クイックスタートソリューションをチェックし、 `security-jwt-quickstart` "
"ディレクトリを探索して {extension-name} "
"エクステンションの詳細を確認することをお勧めします。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:613
#, no-wrap
msgid "Reference Guide"
msgstr "リファレンスガイド"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:616
#, fuzzy, no-wrap
msgid "Supported Injection Scopes"
msgstr "サポートされているインジェクションスコープ"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:619
#, fuzzy
msgid "`@ApplicationScoped`, `@Singleton` and `@RequestScoped` outer bean injection scopes are all supported when an `org.eclipse.microprofile.jwt.JsonWebToken` is injected, with the `@RequestScoped` scoping for `JsonWebToken` enforced to ensure the current token is represented."
msgstr ""
"`@ApplicationScoped`, `@Singleton` および `@RequestScoped` "
"アウター・ビーン・インジェクション・スコープは、 `org.eclipse.microprofile."
"jwt.JsonWebToken` がインジェクションされるときにすべてサポートされており、 "
"`JsonWebToken` の `@RequestScoped` "
"スコーピングは、現在のトークンが確実に表現されるように強制されます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:621
#, fuzzy
msgid "However, `@RequestScoped` must be used when the individual token claims are injected as simple types such as `String`, for example:"
msgstr ""
"ただし、個々のトークン・クレームが `String` "
"などの単純な型として注入される場合は、 `@RequestScoped` "
"を使用する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:629
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.Claim;\n"
"import org.eclipse.microprofile.jwt.Claims;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:638
#, no-wrap
msgid ""
"    @Inject\n"
"    @Claim(standard = Claims.birthdate)\n"
"    String birthdate;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:641
#, fuzzy
msgid "Note you can also use the injected `JsonWebToken` to access the individual claims in which case setting `@RequestScoped` is not necessary."
msgstr ""
"なお、注入された `JsonWebToken` "
"を使用して個々の請求項にアクセスすることもでき、その場合は `@RequestScoped` "
"を設定する必要はありません。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:643
#, fuzzy
msgid "Please see link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.html#_cdi_injection_requirements[MP JWT CDI Injection Requirements] for more details."
msgstr ""
"link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/"
"microprofile-jwt-auth-spec-1.2.html[MP JWT 1.2 HTML]"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:644
#, fuzzy, no-wrap
msgid "Supported Public Key Formats"
msgstr "対応する公開鍵フォーマット"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:648
#, fuzzy
msgid "Public Keys may be formatted in any of the following formats, specified in order of precedence:"
msgstr "公開鍵のフォーマットは、以下の優先順位で指定されたいずれかのフォーマットであ"
"る。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:650
#, fuzzy
msgid "Public Key Cryptography Standards #8 (PKCS#8) PEM"
msgstr "PKCS#8（Public Key Cryptography Standards #8） PEM"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:651
msgid "JSON Web Key (JWK)"
msgstr "JSON Web Key (JWK)"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:652
msgid "JSON Web Key Set (JWKS)"
msgstr "JSON Web Key Set (JWKS)"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:653
msgid "JSON Web Key (JWK) Base64 URL encoded"
msgstr "JSON Web Key (JWK) Base64 URLエンコード"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:654
msgid "JSON Web Key Set (JWKS) Base64 URL encoded"
msgstr "JSON Web Key Set (JWKS) Base64 URLエンコード"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:655
#, fuzzy, no-wrap
msgid "Dealing with the verification keys"
msgstr "検証キーへの対応"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:658
#, fuzzy
msgid "If you need to verify the token signature using the assymetric RSA or Elliptic Curve (EC) key then use the `mp.jwt.verify.publickey.location` property to refer to the local or remote verification key."
msgstr ""
"トークンの署名をアシメトリックRSAまたは楕円曲線（EC）キーを使用して検証する必"
"要がある場合は、 `mp.jwt.verify.publickey.location` "
"プロパティを使用して、ローカルまたはリモートの検証キーを参照します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:660
#, fuzzy
msgid "Use `mp.jwt.verify.publickey.algorithm` to customize the verification algorithm (default is `RS256`), for example, set it to `ES256` when working with the EC keys."
msgstr ""
"検証アルゴリズムをカスタマイズするには `mp.jwt.verify.publickey.algorithm` "
"を使用します（デフォルトは `RS256` ）。例えば、ECキーを扱う場合は `ES256` "
"に設定します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:662
#, fuzzy
msgid "If you need to verify the token signature using the symmetric secret key then either a `JSON Web Key` (JWK) or `JSON Web Key Set` (JWK Set) format must be used to represent this secret key, for example:"
msgstr ""
"対称秘密鍵を用いてトークンの署名を検証する必要がある場合は、"
"この秘密鍵を表すために `JSON Web Key` (JWK) または `JSON Web Key Set` (JWK "
"Set) のいずれかのフォーマットを使用する必要があります（例）。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:674
#, fuzzy, no-wrap
msgid ""
"```json\n"
"{\n"
" \"keys\": [\n"
"   {\n"
"     \"kty\":\"oct\",\n"
"     \"kid\":\"secretKey\",\n"
"     \"k\":\"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\"\n"
"   }\n"
" ]\n"
"}\n"
"```\n"
msgstr ""
"<pre class=\"highlight\"> `{\n"
" \"keys\": [\n"
"   {\n"
"     \"kty\":\"oct\",\n"
"     \"kid\":\"secretKey\",\n"
"     \"k\":\"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-"
"1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\"\n"
"   }\n"
" ]\n"
"}`</pre>"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:677
#, fuzzy
msgid "This secret key JWK will also need to be referred to with `smallrye.jwt.verify.key.location`.  `smallrye.jwt.verify.algorithm` should be set to `HS256`/`HS384`/`HS512`."
msgstr ""
"この秘密鍵 JWK も `smallrye.jwt.verify.key.location` "
"で参照する必要があります。 `smallrye.jwt.verify.algorithm` は `HS256`/ "
"`HS384`/ `HS512` に設定してください。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:679
#, fuzzy, no-wrap
msgid "Parse and Verify JsonWebToken with JWTParser"
msgstr "JWTParserによるJsonWebTokenの解析と検証"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:682
#, fuzzy
msgid "If the JWT token can not be injected, for example, if it is embedded in the service request payload or the service endpoint acquires it out of band, then one can use `JWTParser`:"
msgstr ""
"JWTトークンを注入できない場合、例えば、サービスリクエストのペイロードに埋め込"
"まれていたり、サービスエンドポイントが帯域外で取得したりする場合は、 "
"`JWTParser` を使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:689
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.smallrye.jwt.auth.principal.JWTParser;\n"
"...\n"
"@Inject JWTParser parser;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:691
#, no-wrap
msgid "String token = getTokenFromOidcServer();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:694
#, no-wrap
msgid ""
"// Parse and verify the token\n"
"JsonWebToken jwt = parser.parse(token);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:697
#, fuzzy
msgid "You can also use it to customize the way the token is verified or decrypted. For example, one can supply a local `SecretKey`:"
msgstr ""
"また、これを利用して、トークンの検証や復号化の方法をカスタマイズすることもで"
"きます。例えば、ローカルの `SecretKey` を供給することができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:707
#, no-wrap
msgid ""
"import javax.crypto.SecretKey;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.core.NewCookie;\n"
"import javax.ws.rs.core.Response;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.smallrye.jwt.auth.principal.JWTParser;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:712
#, no-wrap
msgid ""
"@Path(\"/secured\")\n"
"public class SecuredResource {\n"
"  @Inject JWTParser parser;\n"
"  private String secret = \"AyM1SysPpbyDfgZld3umj1qzKObwVMko\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:731
#, no-wrap
msgid ""
"  @GET\n"
"  @Produces(\"text/plain\")\n"
"  public Response getUserName(@CookieParam(\"jwt\") String jwtCookie) {\n"
"    Response response = null;\n"
"    if (jwtCookie == null) {\n"
"        // Create a JWT token signed using the 'HS256' algorithm\n"
"        String newJwtCookie = Jwt.upn(\"Alice\").signWithSecret(secret);\n"
"        // or create a JWT token encrypted using the 'A256KW' algorithm\n"
"        // Jwt.upn(\"alice\").encryptWithSecret(secret);\n"
"        return Response.ok(\"Alice\").cookie(new NewCookie(\"jwt\", newJwtCookie)).build();\n"
"    } else {\n"
"        // All mp.jwt and smallrye.jwt properties are still effective, only the verification key is customized.\n"
"        JsonWebToken jwt = parser.verify(jwtCookie, secret);\n"
"        // or jwt = parser.decrypt(jwtCookie, secret);\n"
"        return Response.ok(jwt.getName()).build();\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:734
#, fuzzy
msgid "Please also see the <<add-smallrye-jwt, How to Add SmallRye JWT directly>> section about using `JWTParser` without the `HTTP` support provided by `quarkus-smallrye-jwt`."
msgstr ""
"`quarkus-smallrye-jwt` が提供する `HTTP` のサポートなしに `JWTParser` "
"を使用することについては、 link:#add-smallrye-jwt[「SmallRye JWT "
"を直接追加する方法]」のセクションも参照してください。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:735
#, no-wrap
msgid "Token Decryption"
msgstr "トークン復号化"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:739
#, fuzzy
msgid "If your application needs to accept the tokens with the encrypted claims or with the encrypted inner signed claims then all you have to do is to set `smallrye.jwt.decrypt.key.location` pointing to the decryption key."
msgstr ""
"もしアプリケーションが、暗号化された請求項または暗号化された内部署名付きの請"
"求項を持つトークンを受け入れる必要がある場合は、 `smallrye.jwt.decrypt.key."
"location` に復号化キーを設定するだけです。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:743
#, fuzzy
msgid "If this is the only key property which is set then the incoming token is expected to contain the encrypted claims only.  If either `mp.jwt.verify.publickey` or `mp.jwt.verify.publickey.location` verification properties are also set then the incoming token is expected to contain the encrypted inner-signed token."
msgstr ""
"もしこれが唯一のキー・プロパティであれば、入力されるトークンには暗号化された"
"請求項のみが含まれることになります。 `mp.jwt.verify.publickey` または `mp.jwt"
".verify.publickey.location` 検証プロパティが設定されている場合、受信したトー"
"クンには暗号化された内部署名されたトークンが含まれていると考えられます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:745
#, fuzzy
msgid "See xref:smallrye-jwt-build.adoc[Generate JWT tokens with SmallRye JWT] and learn how to generate the encrypted or inner-signed and then encrypted tokens fast."
msgstr ""
"link:smallrye-jwt-build.html[Generate JWT tokens with SmallRye JWT]」を参照し"
"て、暗号化されたトークンや内部署名された後に暗号化されたトークンを高速に生成"
"する方法をご覧ください。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:746
#, no-wrap
msgid "Custom Factories"
msgstr "カスタムファクトリー"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:750
#, fuzzy
msgid "`io.smallrye.jwt.auth.principal.DefaultJWTCallerPrincipalFactory` is used by default to parse and verify JWT tokens and convert them to `JsonWebToken` principals.  It uses `MP JWT` and `smallrye-jwt` properties listed in the `Configuration` section to verify and customize JWT tokens."
msgstr ""
"`io.smallrye.jwt.auth.principal.DefaultJWTCallerPrincipalFactory` は、JWT "
"トークンを解析・検証し、 `JsonWebToken` "
"プリンシパルに変換するためにデフォルトで使用されます。 `MP JWT` と `smallrye-"
"jwt` `Configuration` セクションに記載されているプロパティを使用して、JWT "
"トークンの検証とカスタマイズを行います。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:752
#, fuzzy
msgid "If you need to provide your own factory, for example, to avoid verifying the tokens again which have already been verified by the firewall, then you can either use a `ServiceLoader` mechanism by providing a `META-INF/services/io.smallrye.jwt.auth.principal.JWTCallerPrincipalFactory` resource or simply have an `Alternative` CDI bean implementation like this one:"
msgstr ""
"例えば、ファイアウォールで既に検証されたトークンを再度検証することを避けるた"
"めに、独自のファクトリーを提供する必要がある場合は、 `META-INF/services/io."
"smallrye.jwt.auth.principal.JWTCallerPrincipalFactory` "
"リソースを提供することで `ServiceLoader` メカニズムを使用するか、"
"または単にこのような `Alternative` CDI Bean の実装を持つことができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:767
#, no-wrap
msgid ""
"import java.nio.charset.StandardCharsets;\n"
"import java.util.Base64;\n"
"import javax.annotation.Priority;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Alternative;\n"
"import org.jose4j.jwt.JwtClaims;\n"
"import org.jose4j.jwt.consumer.InvalidJwtException;\n"
"import io.smallrye.jwt.auth.principal.DefaultJWTCallerPrincipal;\n"
"import io.smallrye.jwt.auth.principal.JWTAuthContextInfo;\n"
"import io.smallrye.jwt.auth.principal.JWTCallerPrincipal;\n"
"import io.smallrye.jwt.auth.principal.JWTCallerPrincipalFactory;\n"
"import io.smallrye.jwt.auth.principal.ParseException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:772
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Alternative\n"
"@Priority(1)\n"
"public class TestJWTCallerPrincipalFactory extends JWTCallerPrincipalFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:784
#, no-wrap
msgid ""
"    @Override\n"
"    public JWTCallerPrincipal parse(String token, JWTAuthContextInfo authContextInfo) throws ParseException {\n"
"        try {\n"
"            // Token has already been verified, parse the token claims only\n"
"            String json = new String(Base64.getUrlDecoder().decode(token.split(\"\\\\.\")[1]), StandardCharsets.UTF_8);\n"
"            return new DefaultJWTCallerPrincipal(JwtClaims.parse(json));\n"
"        } catch (InvalidJwtException ex) {\n"
"            throw new ParseException(ex.getMessage());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:786
#, fuzzy, no-wrap
msgid "Token Propagation"
msgstr "トークン復号化"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:789
#, fuzzy
msgid "Please see xref:security-openid-connect-client.adoc#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr ""
"下流のサービスへのベアラアクセストークンの伝搬については、 link:security-"
"openid-connect-client.html#token-"
"propagation[「トークンの伝搬]」の項を参照してください。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:791
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Title ====
#: upstream/_guides/security-jwt.adoc:794
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:797
#, fuzzy
msgid "If you configure `mp.jwt.verify.publickey.location` to point to HTTPS or HTTP based JsonWebKey (JWK) set then you can use the same approach as described in the xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] `Wiremock` section but only change the `application.properties` to use MP JWT configuration properties instead:"
msgstr ""
"HTTPSまたはHTTPベースのJsonWebKey（JWK）セットを指すように `mp.jwt.verify."
"publickey.location` を設定している場合は、 link:security-openid-connect.html"
"#integration-testing[OpenID Connect Bearer Token Integration testing] "
"`Wiremock` のセクションで説明したのと同じ方法を使用できますが、 `application."
"properties` を変更して、代わりにMP JWT構成プロパティを使用するだけです。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:803
#: upstream/_guides/security-jwt.adoc:815
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"mp.jwt.verify.publickey.location=${keycloak.url}/realms/quarkus/protocol/openid-connect/certs\n"
"mp.jwt.verify.issuer=${keycloak.url}/realms/quarkus\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-jwt.adoc:806
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:809
#, fuzzy
msgid "If you work with Keycloak and configure `mp.jwt.verify.publickey.location` to point to HTTPS or HTTP based JsonWebKey (JWK) set then you can use the same approach as described in the xref:security-openid-connect.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] `Keycloak` section but only change the `application.properties` to use MP JWT configuration properties instead:"
msgstr ""
"Keycloakを使用し、HTTPSまたはHTTPベースのJsonWebKey（JWK）セットを指すように "
"`mp.jwt.verify.publickey.location` を設定している場合は、 link:security-"
"openid-connect.html#integration-testing-keycloak[OpenID Connect Bearer Token "
"Integration testing] `Keycloak` "
"のセクションで説明したのと同じ方法を使用できますが、 `application.properties`"
" を変更して、代わりにMP JWTの構成プロパティを使用するだけです。"

#. type: Title ====
#: upstream/_guides/security-jwt.adoc:818
#, no-wrap
msgid "Local Public Key"
msgstr "ローカル公開鍵"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:821
#, fuzzy
msgid "You can use the same approach as described in the xref:security-openid-connect#integration-testing.adoc[OpenID Connect Bearer Token Integration testing] `Local Public Key` section but only change the `application.properties` to use MP JWT configuration properties instead:"
msgstr ""
"link:security-openid-connect.html#integration-testing.adoc[OpenID Connect "
"Bearer Token Integration testing] `Local Public Key` "
"のセクションで説明したのと同じアプローチを使うことができますが、 `application"
".properties` を変更するだけで、代わりに MP JWT "
"の構成プロパティを使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:827
#, no-wrap
msgid ""
"mp.jwt.verify.publickey=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5eUF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9xnQIDAQAB\n"
"# set it to the issuer value which is used to generate the tokens\n"
"mp.jwt.verify.issuer=${keycloak.url}/realms/quarkus\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:830
#, no-wrap
msgid ""
"# required to sign the tokens\n"
"smallrye.jwt.sign.key.location=privateKey.pem\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-jwt.adoc:833
#, fuzzy, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurityアノテーション"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:836
#, fuzzy
msgid "Add the following dependency:"
msgstr "以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:845
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security-jwt</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:851
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-security-jwt\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:854
#, fuzzy
msgid "and write a test code like this one:"
msgstr "のようなテストコードを書いてみましょう。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:865
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.jwt.Claim;\n"
"import io.quarkus.test.security.jwt.JwtSecurity;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:869
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(ProtectedResource.class)\n"
"public class TestSecurityAuthTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:876
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userJwt\", roles = \"viewer\")\n"
"    public void testJwt() {\n"
"        RestAssured.when().get(\"test-security-jwt\").then()\n"
"                .body(is(\"userJwt:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:886
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userJwt\", roles = \"viewer\")\n"
"    @JwtSecurity(claims = {\n"
"            @Claim(key = \"email\", value = \"user@gmail.com\")\n"
"    })\n"
"    public void testJwtWithClaims() {\n"
"        RestAssured.when().get(\"test-security-jwt-claims\").then()\n"
"                .body(is(\"userJwt:viewer:user@gmail.com\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:888
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:891
#, fuzzy
msgid "where `ProtectedResource` class may look like this:"
msgstr "`ProtectedResource` のクラスは次のようになります。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:897
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:900
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:906
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-jwt\")\n"
"    public String testSecurityOidc() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:914
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-jwt-claims\")\n"
"    public String testSecurityOidcUserInfoMetadata() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next()\n"
"                + \":\" + accessToken.getClaim(\"email\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:918
#, fuzzy
msgid "Note that `@TestSecurity` annotation must always be used and its `user` property is returned as `JsonWebToken.getName()` and `roles` property - as `JsonWebToken.getGroups()`.  `@JwtSecurity` annotation is optional and can be used to set the additional token claims."
msgstr ""
"`@TestSecurity` アノテーションは必ず使用する必要があり、その `user` "
"プロパティは `JsonWebToken.getName()` として、 `roles` プロパティは - "
"`JsonWebToken.getGroups()` として返されます。 `@JwtSecurity` "
"アノテーションはオプションで、追加のトークン "
"クレームを設定するために使用できます。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:919
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:922
#, fuzzy
msgid "Please enable `io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator` `TRACE` level logging to see more details about the token verification or decryption errors:"
msgstr ""
"`io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator` `TRACE` レベルのロギン"
"グを有効にして、トークンの検証や復号化のエラーについての詳細を確認してくださ"
"い。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:927
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:929
#, no-wrap
msgid "Proactive Authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:932
#, fuzzy
msgid "If you'd like to skip the token verification when the public endpoint methods are invoked then please disable the xref:security-built-in-authentication.adoc#proactive-authentication[proactive authentication]."
msgstr ""
"パブリックエンドポイントのメソッドを呼び出す際に、トークンの検証を省略したい"
"場合は、 link:security-built-in-authentication.html#proactive-"
"authentication[プロアクティブ認証]を無効にしてください。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:934
#, fuzzy
msgid "Note that you can't access the injected `JsonWebToken` in the public methods if the token verification has not been done."
msgstr "トークンの検証が行われていない場合、パブリックメソッドで注入された "
"`JsonWebToken` にアクセスできないことに注意してください。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:936
#, fuzzy, no-wrap
msgid "How to Add SmallRye JWT directly"
msgstr "SmallRye JWTを直接追加する方法"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:939
#, fuzzy
msgid "If you work with Quarkus extensions which do not support `HTTP` (for example, `Quarkus GRPC`) or provide their own extension specific `HTTP` support conflicting with the one offered by `quarkus-smallrye-jwt` and `Vert.x HTTP` (example, `Quarkus Amazon Lambda`) and you would like to <<jwt-parser, Parse and Verify JsonWebToken with JWTParser>> then please use `smallrye-jwt` directly instead of `quarkus-smallrye-jwt`."
msgstr ""
"`HTTP` "
"をサポートしていないQuarkusのエクステンションを使用している場合（たとえば、 `"
"Quarkus GRPC` ）、または、 `quarkus-smallrye-jwt` および `Vert.x HTTP` "
"が提供するものと競合する独自のエクステンション固有の `HTTP` "
"サポートを提供している場合（たとえば、 `Quarkus Amazon Lambda` ）、 link"
":#jwt-parser[JWTParserを使用してJsonWebTokenを解析および]検証したい場合は、 "
"`quarkus-smallrye-jwt` の代わりに `smallrye-jwt` を直接使用してください。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:941
#, fuzzy
msgid "Add this dependency:"
msgstr "このMavenの依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:949
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye</groupId>\n"
"    <artifactId>smallrye-jwt</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:955
#, no-wrap
msgid "implementation(\"io.smallrye:smallrye-jwt\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:958
#, fuzzy
msgid "and update `application.properties` to get all the CDI producers provided by `smallrye-jwt` included as follows:"
msgstr ""
"で、 `application.properties` を更新して、 `smallrye-jwt` が提供するすべての "
"CDI プロデューサーを次のように含めます。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:963
#, no-wrap
msgid ""
"quarkus.index-dependency.smallrye-jwt.group-id=io.smallrye\n"
"quarkus.index-dependency.smallrye-jwt.artifact-id=smallrye-jwt\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:966
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:968
#, no-wrap
msgid "Quarkus configuration"
msgstr "Quarkusの設定"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:972
#, no-wrap
msgid "MicroProfile JWT configuration"
msgstr "MicroProfile JWT設定"

#. type: Table
#: upstream/_guides/security-jwt.adoc:976
#: upstream/_guides/security-jwt.adoc:993
#, no-wrap
msgid "Property Nam"
msgstr "プロパティ名"

#. type: Table
#: upstream/_guides/security-jwt.adoc:976
#: upstream/_guides/security-jwt.adoc:993
#, no-wrap
msgid "Default"
msgstr "デフォルト"

#. type: Table
#: upstream/_guides/security-jwt.adoc:977
#: upstream/_guides/security-jwt.adoc:994
#, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_guides/security-jwt.adoc:977
#, no-wrap
msgid "mp.jwt.verify.publickey"
msgstr "mp.jwt.verify.publickey"

#. type: Table
#: upstream/_guides/security-jwt.adoc:977
#: upstream/_guides/security-jwt.adoc:978
#: upstream/_guides/security-jwt.adoc:980
#: upstream/_guides/security-jwt.adoc:981
#: upstream/_guides/security-jwt.adoc:982
#: upstream/_guides/security-jwt.adoc:984
#: upstream/_guides/security-jwt.adoc:1000
#: upstream/_guides/security-jwt.adoc:1003
#: upstream/_guides/security-jwt.adoc:1004
#: upstream/_guides/security-jwt.adoc:1006
#: upstream/_guides/security-jwt.adoc:1007
#: upstream/_guides/security-jwt.adoc:1008
#: upstream/_guides/security-jwt.adoc:1010
#: upstream/_guides/security-jwt.adoc:1014
#: upstream/_guides/security-jwt.adoc:1015
#: upstream/_guides/security-jwt.adoc:1016
#: upstream/_guides/security-jwt.adoc:1018
#: upstream/_guides/security-jwt.adoc:1019
#: upstream/_guides/security-jwt.adoc:1021
#: upstream/_guides/security-jwt.adoc:1022
#, no-wrap
msgid "non"
msgstr "non"

#. type: Table
#: upstream/_guides/security-jwt.adoc:978
#, fuzzy, no-wrap
msgid "The `mp.jwt.verify.publickey` config property allows the Public Key text itself to be supplied as a string.  The Public Key will be parsed from the supplied string in the order defined in section <<Supported Public Key Formats>>."
msgstr ""
"`mp.jwt.verify.publickey` config プロパティでは、公開鍵のテキスト自体を文字列"
"として提供することができます。公開鍵は、 link:#Supported Public Key Formats["
"「サポートされる公開鍵の形式」]で定義されている順序で、提供された文字列から解"
"析されます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:978
#, no-wrap
msgid "mp.jwt.verify.publickey.location"
msgstr "mp.jwt.verify.publickey.location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:979
#, fuzzy, no-wrap
msgid "Config property allows for an external or internal location of Public Key to be specified.  The value may be a relative path or a URL. If the value points to an HTTPS based JWK set then, for it to work in native mode, the `quarkus.ssl.native` property must also be set to `true`, see xref:native-and-ssl.adoc[Using SSL With Native Executables] for more details."
msgstr ""
"公開鍵の外部または内部の場所を指定するためのコンフィグ・プロパティです。この"
"値は、相対パスまたは URL です。値がHTTPSベースのJWKセットを指している場合、ネ"
"イティブモードで動作させるためには、 `quarkus.ssl.native` プロパティも `true`"
" に設定する必要があります。詳細は、 link:native-and-ssl."
"html[「ネイティブ実行可能ファイルでSSLを使用する]」を参照してください。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:979
#, no-wrap
msgid "mp.jwt.verify.publickey.algorith"
msgstr "mp.jwt.verify.publickey.algorith"

#. type: Table
#: upstream/_guides/security-jwt.adoc:979
#, no-wrap
msgid "`RS256`"
msgstr "`RS256`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:980
#, no-wrap
msgid "Signature algorithm. Set it to `ES256` to support the Elliptic Curve signature algorithm."
msgstr "署名アルゴリズム。 `ES256` に設定して、楕円曲線署名アルゴリズムをサポートします。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:980
#, no-wrap
msgid "mp.jwt.decrypt.key.location"
msgstr "mp.jwt.decrypt.key.location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:981
#, fuzzy, no-wrap
msgid "Config property allows for an external or internal location of Private Decryption Key to be specified."
msgstr "コンフィグプロパティでは、プライベート復号鍵の外部または内部の場所を指定する"
"ことができます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:981
#, no-wrap
msgid "mp.jwt.verify.issuer"
msgstr "mp.jwt.verify.issuer"

#. type: Table
#: upstream/_guides/security-jwt.adoc:982
#, fuzzy, no-wrap
msgid "Config property specifies the value of the `iss` (issuer) claim of the JWT that the server will accept as valid."
msgstr "コンフィグプロパティは、サーバーが有効と認めるJWTの `iss` "
"（発行者）クレームの値を指定する。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:982
#, no-wrap
msgid "mp.jwt.verify.audience"
msgstr "mp.jwt.verify.audience"

#. type: Table
#: upstream/_guides/security-jwt.adoc:983
#, fuzzy, no-wrap
msgid "Comma separated list of the audiences that a token `aud` claim may contain."
msgstr "トークン `aud` "
"クレームに含まれる可能性のあるオーディエンスのコンマ区切りリスト。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:983
#, no-wrap
msgid "mp.jwt.token.header"
msgstr "mp.jwt.token.header"

#. type: Table
#: upstream/_guides/security-jwt.adoc:983
#: upstream/_guides/security-jwt.adoc:999
#, no-wrap
msgid "`Authorization`"
msgstr "`Authorization`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:984
#, fuzzy, no-wrap
msgid "Set this property if another header such as `Cookie` is used to pass the token."
msgstr "`Cookie` のような別のヘッダーがトークンの受け渡しに使用される場合、このプロパ"
"ティを設定します。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:984
#, no-wrap
msgid "mp.jwt.token.cooki"
msgstr "mp.jwt.token.cooki"

#. type: Table
#: upstream/_guides/security-jwt.adoc:985
#, fuzzy, no-wrap
msgid "Name of the cookie containing a token. This property will be effective only if `mp.jwt.token.header` is set to `Cookie`."
msgstr ""
"トークンを含むクッキーの名前。このプロパティは、 `mp.jwt.token.header` が "
"`Cookie` に設定されている場合にのみ有効です。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:987
#, no-wrap
msgid "Additional SmallRye JWT configuration"
msgstr "SmallRye JWT 追加設定"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:990
msgid "SmallRye JWT provides more properties which can be used to customize the token processing:"
msgstr "SmallRye JWTには、トークン処理をカスタマイズするために使用できる、より多くのプロパティーが用意されています。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:994
#, no-wrap
msgid "smallrye.jwt.verify.key.location"
msgstr "smallrye.jwt.verify.key.location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:994
#, no-wrap
msgid "NONE"
msgstr "NONE"

#. type: Table
#: upstream/_guides/security-jwt.adoc:995
#, fuzzy, no-wrap
msgid "Location of the verification key which can point to both public and secret keys. Secret keys can only be in the JWK format. Note that 'mp.jwt.verify.publickey.location' will be ignored if this property is set."
msgstr ""
"公開鍵と秘密鍵の両方を指し示すことができる検証鍵の位置。秘密鍵は、JWK "
"形式でのみ指定できます。このプロパティが設定されていると、 "
"'mp.jwt.verify.publickey.location' は無視されることに注意してください。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:995
#, no-wrap
msgid "smallrye.jwt.verify.algorith"
msgstr "smallrye.jwt.verify.algorithm"

#. type: Table
#: upstream/_guides/security-jwt.adoc:996
#, fuzzy, no-wrap
msgid "Signature algorithm. This property should only be used for setting a required symmetric algorithm such as `HS256`. It is deprecated for setting asymmetric algorithms such as `ES256` - use 'mp.jwt.verify.publickey.algorithm' instead."
msgstr ""
"署名のアルゴリズム。このプロパティは、 `HS256` "
"のような必須の対称型アルゴリズムの設定にのみ使用する必要があります。 `ES256` "
"のような非対称アルゴリズムを設定するためには、非推奨です。代わりに "
"'mp.jwt.verify.publickey.algorithm' を使用してください。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:996
#, no-wrap
msgid "smallrye.jwt.verify.key-format"
msgstr "smallrye.jwt.verify.key-format"

#. type: Table
#: upstream/_guides/security-jwt.adoc:996
#, no-wrap
msgid "`ANY`"
msgstr "`ANY`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:997
#, fuzzy, no-wrap
msgid "Set this property to a specific key format such as `PEM_KEY`, `PEM_CERTIFICATE`, `JWK` or `JWK_BASE64URL` to optimize the way the verification key is loaded."
msgstr ""
"このプロパティを `PEM_KEY`, `PEM_CERTIFICATE`, `JWK`, `JWK_BASE64URL` などの"
"特定のキーフォーマットに設定することで、検証キーの読み込み方法を最適化するこ"
"とができます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:997
#, no-wrap
msgid "smallrye.jwt.verify.relax-key-validation"
msgstr "smallrye.jwt.verify.relax-key-validation"

#. type: Table
#: upstream/_guides/security-jwt.adoc:997
#: upstream/_guides/security-jwt.adoc:998
#: upstream/_guides/security-jwt.adoc:1001
#: upstream/_guides/security-jwt.adoc:1020
#, fuzzy, no-wrap
msgid "fals"
msgstr "fals"

#. type: Table
#: upstream/_guides/security-jwt.adoc:998
#, fuzzy, no-wrap
msgid "Relax the validation of the verification keys, setting this property to `true` will allow public RSA keys with the length less than 2048 bit."
msgstr "検証鍵の検証を容易にするために、このプロパティを `true` "
"に設定すると、2048ビット以下の長さのRSA公開鍵が許可されます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:998
#, no-wrap
msgid "smallrye.jwt.verify.certificate-thumbprint"
msgstr "smallrye.jwt.verify.certificate-thumbprint"

#. type: Table
#: upstream/_guides/security-jwt.adoc:999
#, fuzzy, no-wrap
msgid "If this property is enabled then a signed token must contain either 'x5t' or 'x5t#S256' X509Certificate thumbprint headers. Verification keys can only be in JWK or PEM Certificate key formats in this case. JWK keys must have a 'x5c' (Base64-encoded X509Certificate) property set."
msgstr ""
"このプロパティを有効にした場合、署名済みトークンには、「x5t」または「x5t#S256"
"」の X509Certificate "
"サムプリント・ヘッダのいずれかを含める必要があります。検証キーは、この場合、"
"JWK または PEM 証明書キー形式のみとなります。JWK キーには、'x5c' (Base64 "
"エンコードされた X509Certificate) プロパティが設定されている必要があります。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:999
#, no-wrap
msgid "smallrye.jwt.token.header"
msgstr "smallrye.jwt.token.header"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1000
#, fuzzy, no-wrap
msgid "Set this property if another header such as `Cookie` is used to pass the token. This property is deprecated - use 'mp.jwt.token.header'."
msgstr ""
"`Cookie` のような別のヘッダがトークンの受け渡しに使用される場合、このプロパテ"
"ィを設定します。このプロパティは推奨されません - 'mp.jwt.token.header' "
"を使用してください。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1000
#, no-wrap
msgid "smallrye.jwt.token.cooki"
msgstr "smallrye.jwt.token.cooki"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1001
#, fuzzy, no-wrap
msgid "Name of the cookie containing a token. This property will be effective only if `smallrye.jwt.token.header` is set to `Cookie`. This property is deprecated - use 'mp.jwt.token.cookie`."
msgstr ""
"トークンを含むクッキーの名前。このプロパティは、 `smallrye.jwt.token.header` "
"が `Cookie` に設定されている場合にのみ有効です。このプロパティは非推奨です - "
"'mp.jwt.token.cookie` を使用してください。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1001
#, no-wrap
msgid "smallrye.jwt.always-check-authorization"
msgstr "smallrye.jwt.always-check-authorization"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1002
#, fuzzy, no-wrap
msgid "Set this property to `true` for `Authorization` header be checked even if the `smallrye.jwt.token.header` is set to `Cookie` but no cookie with a `smallrye.jwt.token.cookie` name exists."
msgstr ""
"このプロパティを `true` に設定すると、 `smallrye.jwt.token.header` が "
"`Cookie` に設定されていても、 `smallrye.jwt.token.cookie` "
"の名前を持つクッキーが存在しない場合でも、 `Authorization` "
"ヘッダがチェックされます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1002
#, no-wrap
msgid "smallrye.jwt.token.scheme"
msgstr "smallrye.jwt.token.scheme"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1002
#, no-wrap
msgid "`Bearer`"
msgstr "`Bearer`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1003
#, fuzzy, no-wrap
msgid "Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`."
msgstr "コンマで区切られたリストには、代替となる単一または複数のスキームが含まれてい"
"ます。例えば、 `DPoP`."

#. type: Table
#: upstream/_guides/security-jwt.adoc:1003
#, no-wrap
msgid "smallrye.jwt.token.ki"
msgstr "smallrye.jwt.token.ki"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1004
#, fuzzy, no-wrap
msgid "Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching `kid` header."
msgstr "鍵の識別子。これが設定されている場合、検証用のJWKキーおよびすべてのJWTトーク"
"ンは、一致する `kid` ヘッダーを持つ必要があります。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1004
#, no-wrap
msgid "smallrye.jwt.time-to-liv"
msgstr "smallrye.jwt.time-to-liv"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1005
#, fuzzy, no-wrap
msgid "The maximum number of seconds that a JWT may be issued for use. Effectively, the difference between the expiration date of the JWT and the issued at date must not exceed this value. Setting this property to a non-positive value relaxes the requirement for the token to have a valid 'iat' (issued at) claim."
msgstr ""
"JWT を発行して使用することができる最大秒数。実質的に、JWT の有効期限と "
"issued at の日付の差がこの値を超えてはなりません。このプロパティを非正の値に"
"設定すると、トークンが有効な「iat」（issued "
"at）の主張を持つという要件が緩和されます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1005
#, no-wrap
msgid "smallrye.jwt.require.named-principa"
msgstr "smallrye.jwt.require.named-principa"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1005
#, no-wrap
msgid "`true`"
msgstr "`true`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1006
#, fuzzy, no-wrap
msgid "If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in SmallRye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name."
msgstr ""
"アプリケーションが `java.security.Principal` "
"が名前を返すことに依存している場合、トークンは `upn` または "
"`preferred_username` または `sub` "
"のクレームセットを持つ必要があります。このプロパティを設定すると、SmallRye "
"JWT は、アプリケーションコードが非 null の `Principal` 名を確実に処理するため"
"にこれらのクレームのいずれも利用できない場合、例外をスローします。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1006
#, no-wrap
msgid "smallrye.jwt.path.sub"
msgstr "smallrye.jwt.path.sub"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1007
#, fuzzy, no-wrap
msgid "Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims."
msgstr ""
"サブジェクト名を含むクレームへのパス。これはトップレベルのJSONオブジェクトか"
"ら始まり、複数のセグメントを含むことができ、各セグメントはJSONオブジェクト名"
"のみを表します（例： `realms/subject` ）。このプロパティは、トークンに「サブ"
"」クレームがなく、サブジェクトが別のクレームに設定されている場合に使用できま"
"す。名前空間修飾されたクレームには二重引用符を使用します。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1007
#, no-wrap
msgid "smallrye.jwt.claims.sub"
msgstr "smallrye.jwt.claims.sub"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1008
#, fuzzy, no-wrap
msgid "This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set."
msgstr ""
"このプロパティは、現在のトークンに標準またはカスタムの `sub` クレームが利用で"
"きない場合に、デフォルトのサブクレーム値を設定するために使用できます。事実上"
"、このプロパティは、 `upn` 、 `preferred_username` 、 `sub` "
"のクレームが設定されていない場合に、 `java.security.Principal` "
"の名前をカスタマイズするために使用できます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1008
#, no-wrap
msgid "smallrye.jwt.path.group"
msgstr "smallrye.jwt.path.group"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1009
#, fuzzy, no-wrap
msgid "Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims."
msgstr ""
"グループを含むクレームへのパス。これはトップレベルのJSONオブジェクトから始ま"
"り、複数のセグメントを含むことができます。各セグメントはJSONオブジェクトの名"
"前のみを表します（例： `realm/groups` ）。このプロパティは、トークンに "
"'groups' クレームがなく、別のクレームにグループが設定されている場合に使用でき"
"ます。名前空間修飾されたクレームには二重引用符を使用します。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1009
#, no-wrap
msgid "smallrye.jwt.groups-separator"
msgstr "smallrye.jwt.groups-separator"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1009
#, no-wrap
msgid "' '"
msgstr "' '"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1010
#, fuzzy, no-wrap
msgid "Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence."
msgstr ""
"複数のグループ値を含む可能性のある文字列を分割するためのセパレータです。これ"
"は、 `smallrye.jwt.path.groups` プロパティが、値が文字列であるカスタムクレー"
"ムを指している場合にのみ使用されます。標準的な OAuth2 `scope` クレームには、"
"スペースで区切られたシーケンスが含まれている可能性があるため、デフォルト値は1"
"つのスペースです。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1010
#, no-wrap
msgid "smallrye.jwt.claims.group"
msgstr "smallrye.jwt.claims.group"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1011
#, fuzzy, no-wrap
msgid "This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available."
msgstr ""
"このプロパティは、現在のトークンに標準またはカスタムのグループクレームが利用"
"できない場合に、デフォルトのグループクレーム値を設定するために使用できます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1011
#, no-wrap
msgid "smallrye.jwt.jwks.refresh-interva"
msgstr "smallrye.jwt.jwks.refresh-interva"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1011
#: upstream/_guides/security-jwt.adoc:1013
#, no-wrap
msgid "60"
msgstr "60"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1012
#, fuzzy, no-wrap
msgid "JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTP or HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint."
msgstr ""
"JWK キャッシュの更新間隔（分）。 `mp.jwt.verify.publickey.location` が HTTP "
"または HTTPS URL ベースの JWK セットを指し、正の `max-age` "
"パラメータ値を持つ HTTP `Cache-Control` 応答ヘッダーが JWK HTTPS "
"エンドポイントから返されない限り、無視されます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1012
#, no-wrap
msgid "smallrye.jwt.jwks.forced-refresh-interva"
msgstr "smallrye.jwt.jwks.forced-refresh-interva"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1012
#, no-wrap
msgid "30"
msgstr "30"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1013
#, fuzzy, no-wrap
msgid "Forced JWK cache refresh interval in minutes which is used to restrict the frequency of the forced refresh attempts which may happen when the token verification fails due to the cache having no JWK key with a `kid` property matching the current token's `kid` header. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTP or HTTPS URL based JWK set."
msgstr ""
"これは、現在のトークンの `kid` ヘッダーに一致する `kid` プロパティを持つ JWK "
"キーがキャッシュに存在しないためにトークンの検証が失敗したときに発生する可能"
"性のある強制更新の頻度を制限するために使用されます（分単位）。 `mp.jwt.verify"
".publickey.location` が HTTP または HTTPS URL ベースの JWK "
"セットを指していなければ無視されます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1013
#, no-wrap
msgid "smallrye.jwt.expiration.grac"
msgstr "smallrye.jwt.expiration.grac"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1014
#, fuzzy, no-wrap
msgid "Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time."
msgstr "有効期限の猶予を秒単位で指定します。デフォルトでは、現在の時刻がトークンの有"
"効期限から1分以内であれば、期限切れのトークンも受け入れられます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1014
#, no-wrap
msgid "smallrye.jwt.verify.au"
msgstr "smallrye.jwt.verify.au"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1015
#, fuzzy, no-wrap
msgid "Comma separated list of the audiences that a token `aud` claim may contain. This property is deprecated - use `mp.jwt.verify.audiences`."
msgstr ""
"トークン `aud` クレームが含むことのできるオーディエンスのコンマ区切りリスト。"
"このプロパティは推奨されません。 `mp.jwt.verify.audiences` "
"を使用してください。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1015
#, no-wrap
msgid "smallrye.jwt.required.claim"
msgstr "smallrye.jwt.required.claim"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1016
#, fuzzy, no-wrap
msgid "Comma separated list of the claims that a token must contain."
msgstr "トークンが含まなければならないクレームのコンマ区切りリスト。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1016
#, no-wrap
msgid "smallrye.jwt.decrypt.key.location"
msgstr "smallrye.jwt.decrypt.key.location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1017
#, fuzzy, no-wrap
msgid "Config property allows for an external or internal location of Private Decryption Key to be specified. This property is deprecated - use 'mp.jwt.decrypt.key.location'."
msgstr ""
"プライベート復号化キーの外部または内部の場所を指定するためのコンフィグプロパ"
"ティです。このプロパティは推奨されません - 'mp.jwt.decrypt.key.location' "
"を使用してください。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1017
#, no-wrap
msgid "smallrye.jwt.decrypt.algorith"
msgstr "smallrye.jwt.decrypt.algorith"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1017
#, no-wrap
msgid "`RSA_OAEP`"
msgstr "`RSA_OAEP`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1018
#, no-wrap
msgid "Decryption algorithm."
msgstr "復号化アルゴリズム。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1018
#, no-wrap
msgid "smallrye.jwt.token.decryption.ki"
msgstr "smallrye.jwt.token.decryption.ki"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1019
#, fuzzy, no-wrap
msgid "Decryption Key identifier. If it is set then the decryption JWK key as well every JWT token must have a matching `kid` header."
msgstr "復号鍵の識別子。これが設定されている場合、復号化JWKキーおよびすべてのJWTトー"
"クンは、一致する `kid` ヘッダーを持つ必要があります。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1019
#, fuzzy, no-wrap
msgid "smallrye.jwt.client.tls.certificate.pat"
msgstr "smallrye.jwt.verify.certificate-thumbprint"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1020
#, fuzzy, no-wrap
msgid "Path to TLS trusted certificate which may need to be configured if the keys have to be fetched over `HTTPS`."
msgstr "TLS の信頼できる証明書へのパス。鍵を `HTTPS` "
"から取得する必要がある場合は、このパスが設定されることがある。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1020
#, fuzzy, no-wrap
msgid "smallrye.jwt.client.tls.trust-al"
msgstr "smallrye.jwt.claims.group"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1021
#, fuzzy, no-wrap
msgid "Trust all the hostnames. If the keys have to be fetched over `HTTPS` and this property is set to `true` then all the hostnames are trusted by default."
msgstr ""
"すべてのホスト名を信頼する。鍵を `HTTPS` で取得する必要があり、"
"このプロパティを `true` "
"に設定すると、デフォルトですべてのホスト名が信頼されます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1021
#, fuzzy, no-wrap
msgid "smallrye.jwt.client.tls.trusted.host"
msgstr "smallrye.jwt.claims.group"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1022
#, fuzzy, no-wrap
msgid "Set of trusted hostnames. If the keys have to be fetched over `HTTPS` and `smallrye.jwt.client.tls.trust-all` is set to `false` then this property can be used to configure the trusted hostnames."
msgstr ""
"信頼できるホスト名のセット。鍵が `HTTPS` で取得される必要があり、 `smallrye."
"jwt.client.tls.trust-all` が `false` に設定されている場合、このプロパティを使"
"用して信頼できるホスト名を設定することができる。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1022
#, fuzzy, no-wrap
msgid "smallrye.jwt.http.proxy.host"
msgstr "smallrye.jwt.path.group"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1023
#, fuzzy, no-wrap
msgid "HTTP proxy host."
msgstr "HTTPプロキシホストです。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1023
#, fuzzy, no-wrap
msgid "smallrye.jwt.http.proxy.port"
msgstr "smallrye.jwt.path.group"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1023
#, fuzzy, no-wrap
msgid "80"
msgstr "80"

#. type: Table
#: upstream/_guides/security-jwt.adoc:1024
#, fuzzy, no-wrap
msgid "HTTP proxy port."
msgstr "HTTPプロキシポート。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:1026
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:1029
msgid "link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.html[MP JWT 1.2 HTML]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.html[MP JWT 1.2 HTML]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:1030
msgid "link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.pdf[MP JWT 1.2 PDF]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.pdf[MP JWT 1.2 PDF]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:1031
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:1032
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:1033
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:1034
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:1035
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:1036
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr "link:security-jwt-build.html[SmallRye JWT BuildによるJWTトークンの署名と暗号化]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:1037
msgid "xref:security.adoc#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"
msgstr "link:security.html#oidc-jwt-oauth2-comparison[QuarkusのOIDC、JWT、OAuth2機能の概要]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:1037
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

#~ msgid "Basic REST Endpoint"
#~ msgstr "基本的なRESTエンドポイント"

#~ msgid ""
#~ "import javax.ws.rs.GET;\n"
#~ "import javax.ws.rs.Path;\n"
#~ "import javax.ws.rs.Produces;\n"
#~ "import javax.ws.rs.core.MediaType;\n"
#~ msgstr ""
#~ "import javax.ws.rs.GET;\n"
#~ "import javax.ws.rs.Path;\n"
#~ "import javax.ws.rs.Produces;\n"
#~ "import javax.ws.rs.core.MediaType;\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    @Produces(MediaType.TEXT_PLAIN)\n"
#~ "    public String hello() {\n"
#~ "        return \"hello\";\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    @Produces(MediaType.TEXT_PLAIN)\n"
#~ "    public String hello() {\n"
#~ "        return \"hello\";\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "This is a basic REST endpoint that does not have any of the {extension-name} specific features, so let's add some."
#~ msgstr "これは {extension-name} 特有の機能を持たない基本的なRESTエンドポイントなので、いくつか追加してみましょう。"

#~ msgid "./mvnw compile quarkus:dev\n"
#~ msgstr "./mvnw compile quarkus:dev\n"

#~ msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `target/quarkus-app/quarkus-run.jar` file:"
#~ msgstr "いつものように、 `./mvnw clean package` を使ってパッケージ化し、 `target/quarkus-app/quarkus-run.jar` ファイルを使ってアプリケーションを実行することができます。"

#, fuzzy
#~ msgid "Signature algorithm. Set it to `ES256` to support the Elliptic Curve signature algorithm. This property is deprecated, use `mp.jwt.verify.publickey.algorithm`."
#~ msgstr "署名アルゴリズム。 `ES256` に設定して、楕円曲線署名アルゴリズムをサポートします。"
