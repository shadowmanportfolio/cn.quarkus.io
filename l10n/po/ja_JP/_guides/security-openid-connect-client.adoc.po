# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-19 17:18+0000\n"
"PO-Revision-Date: 2021-04-30 16:54+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-client.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenID Connect (OIDC) and OAuth2 Client and Filters to manage access tokens"
msgstr "OpenID Connect（OIDC）とOAuth2 Client and Filtersを使ったアクセストークンの管理"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:12
msgid "This guide explains how to use:"
msgstr "このガイドでは以下の使い方を解説しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:14
#, fuzzy
msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org[Keycloak]"
msgstr "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter`, `quarkus-oidc-client-filter` エクステンションにより、OpenID Connect や link:https://www.keycloak.org[Keycloak]などの OAuth 2.0 準拠の認証サーバーからアクセストークンを取得し、リフレッシュすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:15
#, fuzzy
msgid "`quarkus-oidc-token-propagation` and `quarkus-oidc-token-propagation-reactive` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr "`quarkus-oidc-token-propagation` 現在の `Bearer` または `Authorization Code Flow` のアクセストークンを伝搬させるためのエクステンション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:17
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:18
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:21
#, fuzzy
msgid "Add the following dependency:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:28
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:31
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:33
#, fuzzy
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
msgstr "`OidcClient` はビルド時に IDP トークンエンドポイントの URL で初期化され、このエンドポイントを使用して `client_credentials` や `password` などのトークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:34
#, fuzzy, no-wrap
msgid "Token Endpoint Configuration"
msgstr "トークンエンドポイントの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:37
msgid "By default the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` のパスを追加することで、トークンのエンドポイントアドレスが検出されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:39
#, fuzzy
msgid "For example, given this Keycloak URL:"
msgstr "例えば、このKeycloakのURLが与えられた場合。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:43
#, fuzzy, no-wrap
msgid "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:46
#, fuzzy
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr "`OidcClient` は、トークンのエンドポイントURLが `<a href=\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\" class=\"bare\">http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens</a>`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:48
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、トークンエンドポイントのアドレスを相対パスの値で設定することができます。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:55
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
"quarkus.oidc-client.token-path=/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:58
#, fuzzy
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "ディスカバリーを行わずにトークンのエンドポイントURLを設定するよりコンパクトな方法は、 `quarkus.oidc-client.token-path` を絶対的なURLに設定することです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:62
#, fuzzy, no-wrap
msgid "quarkus.oidc-client.token-path=http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:65
#, fuzzy
msgid "Setting 'quarkus.oidc-client.auth-server-url' and 'quarkus.oidc-client.discovery-enabled' is not required in this case."
msgstr "この場合、「quarkus.oidc-client.auth-server-url」と「quarkus.oidc-client.discovery-enabled」の設定は必要ありません。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:66
#, fuzzy, no-wrap
msgid "Supported Token Grants"
msgstr "支援されたトークンの助成金"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:69
#, fuzzy
msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:70
#, fuzzy, no-wrap
msgid "Client Credentials Grant"
msgstr "クライアントクレデンシャルグラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:73
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:79
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:82
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr "`client_credentials` グラントにより、`quarkus.oidc-client.grant-options.client.<param-name>=<value>` を介してトークンリクエストに追加のパラメータを設定できます。 `audience` パラメータを使用して目的のトークン受信者を設定する方法は次のとおりです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:91
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"# 'client' is a shortcut for `client_credentials`\n"
"quarkus.oidc-client.grant.type=client\n"
"quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:93
#, fuzzy, no-wrap
msgid "Password Grant"
msgstr "パスワード付与"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:96
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:105
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:108
#, fuzzy
msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
msgstr "クライアント認証情報付与のカスタマイズと同様に、 `quarkus.oidc-client.grant-options.password` 構成プレフィックスを使用してさらにカスタマイズすることができます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:109
#, fuzzy, no-wrap
msgid "Other Grants"
msgstr "その他の助成金"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:112
#, fuzzy
msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which can not be captured in the configuration. These grants are `refresh token` (with the external refresh token), `token exchange` and `authorization code`."
msgstr "`OidcClient` は、設定では取得できない追加の入力パラメータを必要とするグラントを使用して、トークンの取得を支援することもできます。これらのグラントは、 `refresh token` （外部リフレッシュトークンを使用）、 `token exchange` 、 `authorization code` です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:114
#, fuzzy
msgid "Using the `refresh_token` grant which uses an out of band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
msgstr "帯域外のリフレッシュトークンを使用して新しいトークンを取得する `refresh_token` グラントを使用すると、既存のリフレッシュトークンが現在のQuarkusエンドポイントにポストされている場合、アクセストークンを取得する必要があります。この場合、 `OidcClient` を以下のように設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:121
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=refresh\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:124
#, fuzzy
msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "で、提供されたリフレッシュ・トークンを使って `OidcClient.refreshTokens` メソッドでアクセストークンを取得します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:126
#, fuzzy
msgid "Using the `token exchange` grant may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see <<token-propagation,Token Propagation in MicroProfile RestClient client filter>> for more details."
msgstr "複雑なマイクロサービスアプリケーションを構築しており、同じ `Bearer` トークンが複数のサービスに伝搬されて使用されるのを避けたい場合は、 `token exchange` グラントの使用が必要になることがあります。詳細については、 link:#token-propagation[MicroProfile RestClient client filterのToken Propagation]を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:128
#, fuzzy
msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reasons you can not use the xref:security-openid-connect-web-authentication.adoc[Quarkus OpenID Connect extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
msgstr "何らかの理由で link:security-openid-connect-web-authentication.html[Quarkus OpenID Connect extension]を使用してAuthorization Code Flowをサポートできない場合、 `OidcClient` を使用して `authorization code` の付与をサポートする必要があるかもしれません。Authorization Code Flowを実装する正当な理由がある場合は、 `OidcClient` を以下のように設定してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:135
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=code\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:138
#, fuzzy
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "そして、追加のプロパティのMapを受け付ける `OidcClient.accessTokens` メソッドを使用し、現在の `code` と `redirect_uri` のパラメータを渡して、認証コードとトークンを交換することができます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:139
#, fuzzy, no-wrap
msgid "Grant scopes"
msgstr "グラントスコープ"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:143
#, fuzzy
msgid "You may need to request that a specific set of scopes is associated with an issued access token.  Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "発行されたアクセストークンに特定のスコープのセットが関連付けられていることを要求する必要がある場合があります。その場合は、専用の `quarkus.oidc-client.scopes` list プロパティなどを使用します。 `quarkus.oidc-client.scopes=email,phone`"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:144
#, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClientの直接使用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:147
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:153
#: upstream/_guides/security-openid-connect-client.adoc:193
#, no-wrap
msgid ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:156
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"
msgstr ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:159
#: upstream/_guides/security-openid-connect-client.adoc:198
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"
msgstr ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:162
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""
"    @Inject\n"
"    OidcClient client;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:164
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr "    volatile Tokens currentTokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:169
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public void init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:172
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""
"    @GET\n"
"    public String getResponse() {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:182
#, no-wrap
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // Use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:184
#, fuzzy, no-wrap
msgid "Inject Tokens"
msgstr "トークンの注入"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:187
#, fuzzy
msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr "`OidcClient` を内部的に使用する `Tokens` を注入することができます。 `Tokens` はアクセストークンを取得し、必要に応じてリフレッシュするために使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:195
#: upstream/_guides/security-openid-connect-client.adoc:467
#, fuzzy, no-wrap
msgid "import io.quarkus.oidc.client.Tokens;\n"
msgstr ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:200
#, fuzzy, no-wrap
msgid "    @Inject Tokens tokens;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:208
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        //  Get the access token which may have been refreshed.\n"
"        String accessToken = tokens.getAccessToken();\n"
"        // Use the access token to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:210
#, fuzzy, no-wrap
msgid "Use OidcClients"
msgstr "OidcClient"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:213
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は、 `OidcClient`のコンテナです。デフォルトの `OidcClient` と、以下のように設定できる名前付きクライアントが含まれています。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:217
#, no-wrap
msgid "quarkus.oidc-client.client-enabled=false\n"
msgstr "quarkus.oidc-client.client-enabled=false\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:221
#, no-wrap
msgid ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:224
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:230
#: upstream/_guides/security-openid-connect-client.adoc:257
#: upstream/_guides/security-openid-connect-client.adoc:288
#: upstream/_guides/security-openid-connect-client.adoc:326
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:233
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:236
#: upstream/_guides/security-openid-connect-client.adoc:264
#: upstream/_guides/security-openid-connect-client.adoc:297
#: upstream/_guides/security-openid-connect-client.adoc:329
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:239
#: upstream/_guides/security-openid-connect-client.adoc:300
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:246
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:251
#, fuzzy
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "また、 link:security-openid-connect-multitenancy.html[OIDCマルチテナンシー]を使用し、各OIDCテナントが独自の関連する `OidcClient` 、Vert.x `RoutingContext` `tenantId` 属性を使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:261
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:269
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:278
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:282
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:292
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:294
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:312
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\");\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(cfg);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:315
#, fuzzy, no-wrap
msgid "Inject named OidcClient and Tokens"
msgstr ""
"    @Inject\n"
"    OidcClient client;\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:318
#, fuzzy
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "複数の `OidcClient`が設定されている場合、 `OidcClients` を使用する代わりに、追加の修飾子 `@NamedOidcClient` で `OidcClient` の注入対象を指定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:322
#, no-wrap
msgid "package io.quarkus.oidc.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:333
#, fuzzy, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    OidcClient client;\n"
msgstr ""
"    @Inject\n"
"    OidcClient client;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:339
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        // use client to get the token\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public String getResponse() {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:342
#, fuzzy
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "同じ修飾子を使って、 `Tokens` の注入に使われる `OidcClient` を指定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:349
#, fuzzy, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"@RequestScoped\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:353
#, fuzzy, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    Tokens tokens;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:359
#: upstream/_guides/security-openid-connect-client.adoc:480
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:362
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "RestClientのReactive ClientFilterでのOidcClientの使用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:365
#: upstream/_guides/security-openid-connect-client.adoc:406
#: upstream/_guides/security-openid-connect-client.adoc:938
#, fuzzy
msgid "Add the following Maven Dependency:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:372
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:375
#: upstream/_guides/security-openid-connect-client.adoc:416
#, fuzzy
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "また、 `io.quarkus:quarkus-oidc-client` をもたらします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:377
#, fuzzy
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:379
#, fuzzy
msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter, Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
msgstr "`OidcClientRequestFilter` と同様に動作します（ link:#oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter] 参照）。アクセストークンを取得するために `OidcClient` を使用し、必要に応じてリフレッシュし、HTTP `Authorization` `Bearer` スキーム値として設定します。違いは、 link:rest-client-reactive.html[Reactive RestClient]で動作し、トークンを取得またはリフレッシュするときに、現在のIOスレッドをブロックしないノンブロッキングクライアントフィルタを実装することです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:381
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread and it currently can only be registered with `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:388
#, fuzzy, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:393
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:397
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    Uni<String> getUserName();\n"
"}\n"
msgstr ""
"    @GET\n"
"    String getUserName();\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:400
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property."
msgstr "`OidcClientRequestReactiveFilter` は、デフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、 `quarkus.oidc-client-reactive-filter.client-name` の設定プロパティで選択できます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:403
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "RestClientのClientFilterでOidcClientを使用する。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:413
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:418
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、`OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:420
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、`quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:422
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:427
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:432
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:436
#: upstream/_guides/security-openid-connect-client.adoc:454
#: upstream/_guides/security-openid-connect-client.adoc:828
#: upstream/_guides/security-openid-connect-client.adoc:845
#: upstream/_guides/security-openid-connect-client.adoc:889
#: upstream/_guides/security-openid-connect-client.adoc:906
#, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
msgstr ""
"    @GET\n"
"    String getUserName();\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:439
#: upstream/_guides/security-openid-connect-client.adoc:512
#: upstream/_guides/security-openid-connect-client.adoc:830
#: upstream/_guides/security-openid-connect-client.adoc:891
msgid "or"
msgstr "或いは"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:445
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:450
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:457
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:459
#, fuzzy
msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property."
msgstr "`OidcClientRequestFilter` は、デフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、 `quarkus.oidc-client-filter.client-name` の設定プロパティで選択できます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:460
#, fuzzy, no-wrap
msgid "Use Custom RestClient ClientFilter"
msgstr "カスタムRestClient ClientFilterの使用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:463
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:471
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:474
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:483
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:485
#, fuzzy
msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
msgstr "`Tokens` という名前で注入することもできます。「 link:#named-oidc-clients[Inject named OidcClient and Tokens]」を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:487
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr "アクセストークンの更新"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:491
#, fuzzy
msgid "`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr "`OidcClientRequestReactiveFilter` 、 `OidcClientRequestFilter` 、 `Tokens` プロデューサーは、リフレッシュトークンが利用可能な場合、現在の期限切れアクセストークンをリフレッシュします。さらに、 `quarkus.oidc-client.refresh-token-time-skew` プロパティは、HTTP 401 エラーの原因となる期限切れ間近のアクセストークンの送信を避けるために、アクセストークンのリフレッシュを先取りするために使用できます。例えば、このプロパティが `3S` に設定されていて、アクセストークンが3秒以内に期限切れになる場合、このトークンは自動的にリフレッシュされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:493
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:495
#, fuzzy
msgid "Please note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr "OpenID Connect Providersの中には、 `client_credentials` grantレスポンスでリフレッシュトークンを返さないものがあることに注意してください。たとえば、Keycloak 12以降、 `client_credentials` ではデフォルトでリフレッシュ・トークンが返されません。また、プロバイダによっては、リフレッシュ・トークンの使用回数が制限されている場合があります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:497
#, no-wrap
msgid "OidcClient Authentication"
msgstr "Oidcクライアント認証"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:501
#, fuzzy
msgid "`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` 、 `client_credentials` 、その他のグラントリクエストを成功させるためには、OpenID Connect Providerに対して認証を行う必要があります。すべての link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDCクライアント認証]オプションがサポートされています（例）。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:503
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:509
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:518
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:521
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "または link:credentials-provider.html[CredentialsProvider]から取得したシークレットを使用しています。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:526
#: upstream/_guides/security-openid-connect-client.adoc:558
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:531
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentails returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:534
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:541
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:544
#, fuzzy
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr "`client_secret_jwt` 、署名アルゴリズムは `HS256` です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:550
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:553
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "または link:credentials-provider.html[CredentialsProvider]から取得した秘密を用いて、署名アルゴリズムを `HS256` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:563
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:566
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` PEMキーファイルで、署名アルゴリズムは `RS256` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:572
#: upstream/_guides/security-openid-connect-client.adoc:601
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:575
#, fuzzy
msgid "`private_key_jwt` with the key store file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` キーストアファイルで、署名アルゴリズムは `RS256` です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:583
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:586
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc-client.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:589
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントの秘密がワイヤー上を通過することはありません。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:590
#, fuzzy, no-wrap
msgid "Additional JWT Authentication options"
msgstr "JWT認証の追加オプション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:593
#, fuzzy
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "`client_secret_jwt` または `private_key_jwt` のいずれかの認証方法を使用する場合、JWT 署名アルゴリズム、キー識別子、オーディエンス、サブジェクト、および発行者をカスタマイズすることができます（例）。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:597
#, fuzzy, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr "Oidcクライアント認証"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:606
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc-client.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc-client.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:609
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:612
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc-client.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:615
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc-client.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:618
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc-client.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:620
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:623
#, fuzzy
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
msgstr "Apple OpenID Connect Provider は `client_secret_post` 方式を採用しており、secret は `private_key_jwt` 認証方式で作成された JWT であるが、Apple アカウント固有の issuer および subject プロパティを持つ。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:625
#, fuzzy
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr "`quarkus-oidc-client` は、非標準の `client_secret_post_jwt` 認証方法をサポートしており、以下のように設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:631
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${apple.url}\n"
"quarkus.oidc-client.client-id=${apple.client-id}\n"
"quarkus.oidc-client.credentials.client-secret.method=post-jwt\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:636
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=ES256\n"
"quarkus.oidc-client.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc-client.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:638
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "相互のTLS"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:641
#, fuzzy
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
msgstr "OpenID Connectプロバイダによっては、 `Mutual TLS` ( `MTLS`) 認証プロセスの一環として、クライアントの認証を要求する場合があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:643
#, fuzzy
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr "`quarkus-oidc-client` は、 `MTLS` をサポートするために以下のように構成することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:647
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:651
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.client.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.client.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:655
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.client.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.client.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:661
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc.client.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc.client.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.client.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:664
#: upstream/_guides/security-openid-connect-client.adoc:929
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:667
#, fuzzy
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:680
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>org.awaitility</groupId>\n"
"    <artifactId>awaitility</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:683
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:686
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:694
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:697
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Wiremockベースの `QuarkusTestResourceLifecycleManager` を例えば以下のように書きます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:700
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:703
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:706
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:710
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
"import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:712
#, no-wrap
msgid "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:715
#, no-wrap
msgid ""
"public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
"    private WireMockServer server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:718
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
msgstr ""
"    @Override\n"
"    public Map<String, String> start() {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:721
#, no-wrap
msgid ""
"        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
"        server.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:736
#, no-wrap
msgid ""
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:742
#, no-wrap
msgid ""
"        Map<String, String> conf = new HashMap<>();\n"
"        conf.put(\"keycloak.url\", server.baseUrl());\n"
"        return conf;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:751
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (server != null) {\n"
"            server.stop();\n"
"            server = null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:754
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:756
msgid "Set `application.properties`, for example:"
msgstr "`application.properties` を次のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:768
#, fuzzy, no-wrap
msgid ""
"# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
"quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"quarkus.oidc-client.token-path=/tokens\n"
"quarkus.oidc-client.client-id=quarkus-service-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:771
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:772
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:775
#, fuzzy
msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-openid-connect#integration-testing-keycloak.adoc[OpenID Connect Bearer Token Integration testing] `Keycloak` section."
msgstr "Keycloakを使用している場合は、 link:security-openid-connect.html#integration-testing-keycloak.adoc[OpenID Connect Bearer Token Integration testing] `Keycloak` のセクションで説明されているのと同じ方法を使用できます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:776
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:779
#, fuzzy
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "`io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` レベルのロギングを有効にして、トークンの取得とリフレッシュのエラーについての詳細を確認してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:784
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:787
#, fuzzy
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "OidcClientの初期化エラーの詳細を確認するには、 `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` レベルのロギングを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:792
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:795
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:800
#, fuzzy
msgid "The `quarkus-oidc-token-propagation` extension provides two JAX-RS `javax.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.  `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-openid-connect.adoc[Bearer] token present in the current active request or the token acquired from the xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow], as the HTTP `Authorization` header's `Bearer` scheme value.  The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、認証情報の伝搬を簡略化する2つのJAX-RS `javax.ws.rs.client.ClientRequestFilter` クラスの実装を提供しています。 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` は、現在のアクティブなリクエストに存在する link:security-openid-connect.html[Bearer]トークン、または link:security-openid-connect-web-authentication.html[Authorization Code Flow]から取得したトークンを、HTTP `Authorization` ヘッダーの `Bearer` スキーム値として伝搬します。 `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` は、同じ機能を提供しますが、加えて JWT トークンをサポートします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:802
#, fuzzy
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "現在のAuthorization Code Flowアクセストークンを伝搬させる必要がある場合は、即時のトークン伝搬がうまくいきます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:804
#, fuzzy
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr "しかし、エンド・ツー・エンドでベアラー・トークンを直接伝搬させることは、可能な限り避けるべきです。例えば、 `Client → Service A → Service B` 、 `Client` が `Service A` に送ったトークンを `Service B` が受け取るような場合です。このような場合、 `Service B` は、トークンが `Service A` から来たのか、それとも `Client` から直接来たのかを区別することができません。 `Service B` がトークンが `Service A` から来たものであることを確認するためには、新しい発行者と視聴者の主張を行うことができなければなりません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:806
#, fuzzy
msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
msgstr "さらに、複雑なアプリケーションでは、トークンを伝播する前に、トークンを交換または更新する必要があるかもしれません。例えば、 `Service A` が `Service B` にアクセスしているときに、アクセス・コンテキストが異なる場合があります。この場合、 `Service A` は、 `Service B` にアクセスするためのスコープが狭くなったり、全く異なるスコープが付与されたりするかもしれません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:808
#, fuzzy
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "以下のセクションでは、 `AccessTokenRequestFilter` と `JsonWebTokenRequestFilter` がどのように役立つかを紹介します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:809
#, fuzzy, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "アクセストークンの更新"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:812
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:814
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:819
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:824
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:836
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:841
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:848
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:849
#, fuzzy, no-wrap
msgid "Exchange Token Before Propagation"
msgstr "伝播前のトークンの交換"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:852
#, fuzzy
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr "伝播する前に現在のアクセストークンを交換する必要があり、 link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak]や link:https://tools.ietf.org/html/rfc8693[Token Exchange]トークングラントをサポートする他のOpenID Connect Providerを使用している場合、 `AccessTokenRequestFilter` を以下のように設定できます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:860
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=exchange\n"
"quarkus.oidc-client.grant-options.exchange.audience=quarkus-app-exchange\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:862
#, no-wrap
msgid "quarkus.oidc-token-propagation.exchange-token=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:865
#, fuzzy
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "注意 `AccessTokenRequestFilter` は、 `OidcClient` を使用して現在のトークンを交換し、 `quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダが期待する追加の交換プロパティを設定することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:867
#, fuzzy
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` は、デフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、 `quarkus.oidc-token-propagation.client-name` の設定プロパティで選択できます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:868
#, fuzzy, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:871
#, fuzzy
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "`JsonWebTokenRequestFilter` を使用することは、ベアラ JWT トークンを扱う場合に推奨されます。これらのトークンは、 `issuer` や `audience` などのクレームを修正し、更新されたトークンを再度保護することができます（例えば、再署名）。これは、注入された `org.eclipse.microprofile.jwt.JsonWebToken` を想定しているため、不透明なトークンでは動作しません。また、OpenID ConnectプロバイダがToken Exchangeプロトコルをサポートしている場合は、代わりに `AccessTokenRequestFilter` を使用することをお勧めします。JWTトークンと不透明なベアラートークンの両方が、 `AccessTokenRequestFilter` で安全に交換できるからです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:873
#, fuzzy
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` は、 `Service A` の実装が、注入された `org.eclipse.microprofile.jwt.JsonWebToken` を新しい `issuer` と `audience` の主張値で更新し、更新されたトークンを新しい署名で再度保護することを容易にします。唯一の難しいステップは、 `Service A` に署名鍵があることを確認することです。署名鍵は、安全なファイルシステムまたは Vault などのリモートの安全なストレージからプロビジョニングする必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:875
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:880
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:885
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@JsonWebToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:897
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:902
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:909
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client.adoc:910
#, fuzzy, no-wrap
msgid "Update Token Before Propagation"
msgstr "伝播前のトークンの更新"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:913
#, fuzzy
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "注入されたトークンが、その `iss` （発行者）および/または `aud` （オーディエンス）の主張を更新し、新しい署名で再度安全性を確保する必要がある場合は、 `JsonWebTokenRequestFilter` を以下のように構成することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:924
#, no-wrap
msgid ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"
msgstr ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:927
#, fuzzy
msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
msgstr "すでに述べたように、Token ExchangeプロトコルをサポートするKeycloakまたはOpenID Connect Providerを使用している場合は、 `AccessTokenRequestFilter` を使用してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:933
#, fuzzy
msgid "You can generate the tokens as described in xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:935
#, fuzzy, no-wrap
msgid "Token Propagation Reactive"
msgstr "トークンの伝播"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:945
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:948
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "`quarkus-oidc-token-propagation` 現在の `Bearer` または `Authorization Code Flow` のアクセストークンを伝搬させるためのエクステンション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:951
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.  However these features may be added in the future."
msgstr "`quarkus-oidc-token-propagation-reactive` 拡張機能（非反応性の `quarkus-oidc-token-propagation` 拡張機能とは対照的に）は、現在のところ、伝播の前にトークンを交換したり辞めたりすることをサポートしていません。しかし、これらの機能は将来的に追加される可能性があります。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:952
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:955
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:956
#, fuzzy
msgid "xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr "link:security-openid-connect.html[Quarkus - OpenID Connectを使用したベアラートークン認証によるサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:956
#, fuzzy
msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr "link:security-openid-connect-web-authentication.html[Quarkus - OpenID Connectを使用した認証コードフローによるWebアプリケーションの保護]"

#~ msgid "In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
#~ msgstr "どちらの場合も、 `OidcClient` はトークンのエンドポイントURLを自動検出し、それを使ってトークンを取得します。"

#~ msgid "See also the previous section about delaying the token acquisition in some cases."
#~ msgstr "トークンの取得を遅らせる場合があることについては、前のセクションも参照してください。"

#~ msgid "`client_secret_jwt`:"
#~ msgstr "`client_secret_jwt`:"

#~ msgid "Token Propagation in MicroProfile RestClient client filter"
#~ msgstr "MicroProfile RestClient クライアントフィルターでのトークンの伝播"

#~ msgid "`quarkus-oidc-token-propagation` extension provide `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` and `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` JAX-RS ClientRequestFilters which propagates the current link:security-openid-connect[Bearer] or link:security-openid-connect-web-authentication[Authorization Code Flow] access token as an HTTP `Authorization` `Bearer` scheme value."
#~ msgstr "`quarkus-oidc-token-propagation` エクステンションは、 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` と `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` JAX-RS ClientRequestFilters を提供します。これは、現在のベアラーまたは認証コードフローのアクセストークンを HTTP `Authorization` `Bearer` スキーム値として伝播します。"

#~ msgid "This filter will be additionally enhanced in the future to support exchanging the access tokens before propagating them."
#~ msgstr "このフィルタは将来的に強化され、アクセストークンを伝播する前に再署名や交換をサポートするようになる予定です。"
