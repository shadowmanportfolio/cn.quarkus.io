# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-11 10:12+0000\n"
"PO-Revision-Date: 2021-04-13 23:32+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "OpenID Connect（OIDC）のマルチテナンシーの利用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:12
#, fuzzy
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr ""
"このガイドでは、OpenID Connect（OIDC）アプリケーションがマルチテナントに対応"
"し、1つのアプリケーションから複数のテナントにサービスを提供できることを説明し"
"ます。テナントは、同じOpenIDプロバイダー内の異なるレルムやセキュリティドメイ"
"ンであったり、異なるOpenIDプロバイダーであったりします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:14
#, fuzzy
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr ""
"同じアプリケーションで複数の顧客にサービスを提供する場合（例：SaaS）、各顧客"
"はテナントとなります。アプリケーションのマルチテナント対応を有効にすると、各"
"テナントごとに異なる認証ポリシーをサポートすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:16
#, fuzzy
msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr ""
"Bearer Token Authorizationを使用してテナントを認証する必要がある場合は、「 "
"link:security-openid-connect.html[Using OpenID Connect to Protect "
"Service]Applications」を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:18
#, fuzzy
msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow."
msgstr ""
"OpenID Connect Authorization Code "
"Flowを使用してテナントを認証・許可する必要がある場合は、ガイド「 link"
":security-openid-connect-web-authentication.html[Using OpenID Connect to "
"Protect Web]Applications」をお読みください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:24
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:25
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:28
msgid "In this example, we build a very simple application which offers a single land page:"
msgstr "この例では、単一のランディングページを提供する非常にシンプルなアプリケーションを構築しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:30
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:32
msgid "The land page is served by a JAX-RS Resource and shows information obtained from the OpenID Provider about the authenticated user and the current tenant."
msgstr "ランディングページはJAX-RSリソースによって提供され、認証されたユーザーと現在のテナントに関するOpenIDプロバイダから取得した情報を表示します。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:33
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:37
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:39
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:41
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-multi-tenancy` {quickstarts-tree-url}/security-openid-connect-multi-tenancy[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:42
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:45
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:52
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `oidc` エクステンションを追加することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:57
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_guides/security-openid-connect-multitenancy.adoc:59
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:65
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-openid-connect-multitenancy.adoc:68
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:71
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:73
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:76
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/{tenant}` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:80
#: upstream/_guides/security-openid-connect-multitenancy.adoc:125
#: upstream/_guides/security-openid-connect-multitenancy.adoc:159
#: upstream/_guides/security-openid-connect-multitenancy.adoc:474
#, no-wrap
msgid "package org.acme.quickstart.oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:85
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:87
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:89
#, no-wrap
msgid "import io.quarkus.oidc.IdToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:92
#, no-wrap
msgid ""
"@Path(\"/{tenant}\")\n"
"public class HomeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:99
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider \n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:110
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose these tokens in a real application.\n"
"     * \n"
"     * @return the landing page HTML\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    public String getHome() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\").append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:113
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:117
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:121
#, fuzzy
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantResolver` interface."
msgstr ""
"受信したリクエストからテナントを解決し、application.propertiesで特定の "
"`quarkus-oidc` テナントの構成にマッピングするためには、 `io.quarkus.oidc."
"TenantResolver` インターフェースの実装を作成する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:127
#: upstream/_guides/security-openid-connect-multitenancy.adoc:161
#: upstream/_guides/security-openid-connect-multitenancy.adoc:478
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:130
#: upstream/_guides/security-openid-connect-multitenancy.adoc:164
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:133
#: upstream/_guides/security-openid-connect-multitenancy.adoc:167
#: upstream/_guides/security-openid-connect-multitenancy.adoc:485
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:138
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:143
#: upstream/_guides/security-openid-connect-multitenancy.adoc:421
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant configuration\n"
"            return null;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:147
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:150
#, fuzzy
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""
"上記の実装では、テナントはリクエストパスから解決され、テナントが推測できない"
"場合には、デフォルトのテナント構成を使用することを示すために、 `null` "
"が返されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:152
#: upstream/_guides/security-openid-connect-multitenancy.adoc:188
#: upstream/_guides/security-openid-connect-multitenancy.adoc:191
#: upstream/_guides/security-openid-connect-multitenancy.adoc:206
#, fuzzy, no-wrap
msgid "===\n"
msgstr "==="

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:155
#, fuzzy
msgid "When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.  Therefore, when working with mulltiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""
"現在のテナントがOIDC `web-app` アプリケーションを表している場合、カスタムテナ"
"ントリゾルバがコード認証フローを完了したすべてのリクエストと、すでに認証され"
"たリクエストに対して呼び出されるまでに、テナント固有のステートまたはセッショ"
"ンクッキーのいずれかがすでに存在している場合、現在の `io.vertx.ext.web."
"RoutingContext` には `tenant-id` 属性が含まれています。したがって、"
"複数のOpenID Connect Providersを使用する場合は、例えば、 `RoutingContext` に "
"`tenant-id` 属性が設定されていない場合に、テナントIDを解決するためのパス固有"
"のチェックのみが必要となります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:177
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = context.get(\"tenant-id\");\n"
"        if (tenantId != null) {\n"
"            return tenantId;\n"
"        } else {\n"
"            // Initial login request\n"
"            String path = context.request().path();\n"
"            String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:186
#, no-wrap
msgid ""
"            if (parts.length == 0) {\n"
"                // resolve to default tenant configuration\n"
"                return null;\n"
"            }\n"
"            return parts[1];\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:193
#, fuzzy
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr ""
"link:hibernate-orm.html#multitenancy[Hibernate "
"ORMマルチテナンシー]も使用していて、OIDCとHibernate "
"ORMの両方のテナントIDが同じで、Vert.x `RoutingContext` "
"から抽出する必要がある場合は、OIDC Tenant ResolverからHibernate ORM Tenant "
"Resolverに、 `RoutingContext` 属性としてテナントIDを渡すことができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:197
#, no-wrap
msgid "public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:205
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = extractTenantId(context);\n"
"        context.put(\"tenantId\", tenantId);\n"
"        return tenantId;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:208
#, fuzzy, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの記述"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:216
#, no-wrap
msgid ""
"# Default Tenant Configuration\n"
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=multi-tenant-client\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:221
#, no-wrap
msgid ""
"# Tenant A Configuration\n"
"quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/realms/tenant-a\n"
"quarkus.oidc.tenant-a.client-id=multi-tenant-client\n"
"quarkus.oidc.tenant-a.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:225
#, no-wrap
msgid ""
"# HTTP Security Configuration\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:228
#, fuzzy
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. This configuration is using a Keycloak instance to authenticate users."
msgstr ""
"最初の設定は、リクエストからテナントが推測できない場合に使用されるデフォルト"
"のテナント設定です。この構成では、Keycloakインスタンスを使用してユーザーを認"
"証しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:230
#, fuzzy
msgid "The second configuration is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr "2つ目の設定は、受信したリクエストがテナントにマッピングされたときに使用される"
"設定です。 `tenant-a` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:232
#, fuzzy
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "なお、どちらの構成も同じKeycloakサーバーインスタンスにマッピングされますが、 "
"`realms` は別のものを使用しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:234
#, fuzzy
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr ""
"設定ファイルで複数のテナントを定義することができますが、 `TenantResolver` の"
"実装からテナントを解決する際に適切にマッピングできるよう、一意のエイリアスを"
"持つことを確認してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:235
#, fuzzy, no-wrap
msgid "Google OpenID Provider Configuration"
msgstr "Google OpenIDプロバイダの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:238
#, fuzzy
msgid "In order to set-up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here]."
msgstr ""
"Google OpenID Providerを使用するために `tenant-a` の設定を行うには、 "
"link:https://developers.google.com/identity/protocols/"
"OpenIDConnect[ここで]説明するようにプロジェクトを作成する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:240
#, fuzzy
msgid "Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:"
msgstr ""
"プロジェクトを作成して、プロジェクトの `client_id` と `client_secret` "
"を用意したら、次のようにしてテナントを設定してみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:250
#, no-wrap
msgid ""
"# Tenant configuration using Google OpenID Provider\n"
"quarkus.oidc.tenant-b.auth-server-url=https://accounts.google.com\n"
"quarkus.oidc.tenant-b.application-type=web-app\n"
"quarkus.oidc.tenant-b.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.tenant-b.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.tenant-b.token.issuer=https://accounts.google.com\n"
"quarkus.oidc.tenant-b.authentication.scopes=email,profile,openid\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:252
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloakサーバーの起動と設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:255
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak Serverを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:259
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:262
#, fuzzy
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、 `keycloak.version` は、 `17.0.0` 以降に設定する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:264
#, fuzzy
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr ""
"Keycloakサーバーには、 link:http://localhost:8180/auth[localhost:8180/auth] "
"でアクセスできるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:266
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` でしょう。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:268
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr "さて、以下の手順に従って、2つのテナントのためのレルムをインポートします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:270
#, fuzzy
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr ""
"{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/"
"config/default-tenant-realm.json[default-tenant-realm."
"json]をインポートして、デフォルトのレルムを作成します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:271
#, fuzzy
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr ""
"{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/"
"config/tenant-a-realm.json[tenant-a-realm.json]をインポートして、"
"テナント用のレルムを作成します `tenant-a`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:273
#, fuzzy
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""
"詳細については、Keycloakのドキュメントの link:https://www.keycloak.org/docs/"
"latest/server_admin/index.html#_create-"
"realm[新しいレルムの作成]方法を参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:274
#, no-wrap
msgid "Running and Using the Application"
msgstr "アプリケーションの実行と使用"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:276
#, no-wrap
msgid "Running in Developer Mode"
msgstr "デベロッパーモードでの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:279
#, fuzzy
msgid "To run the microservice in dev mode, use:"
msgstr "マイクロサービスを開発モードで実行するには、 `./mvnw clean compile "
"quarkus:dev` を使用します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:282
#, no-wrap
msgid "Running in JVM Mode"
msgstr "JVMモードでの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:285
#, fuzzy
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr "\"dev-mode\" "
"で遊び終わったら、通常のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:287
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:291
msgid "Then run it:"
msgstr "それから実行してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:295
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:297
#, no-wrap
msgid "Running in Native Mode"
msgstr "ネイティブモードでの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:300
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:304
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:307
#, fuzzy
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the native build:"
msgstr ""
"コンパイルには少し時間がかかるので、このステップはデフォルトで無効になってい"
"ます。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:311
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲んでから、このバイナリーを直接実行してみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:315
#, no-wrap
msgid "./target/security-openid-connect-multi-tenancy-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:317
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:320
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "テストするには、ブラウザを開いて以下のURLにアクセスする必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:322
#, fuzzy
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:325
#, fuzzy
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr ""
"すべてが期待通りに動作していれば、認証のためにKeycloakサーバにリダイレクトさ"
"れるはずです。要求されたパスは、設定ファイルにマッピングされていない "
"`default` テナントを定義していることに注意してください。この場合、デフォルト"
"の設定が使用されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:327
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "アプリケーションを認証するためには、Keycloakのログインページで以下の認証情報を入力する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:329
msgid "Username: *alice*"
msgstr "Username: *alice*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:330
msgid "Password: *alice*"
msgstr "Password: *alice*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:332
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "`Login` ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:334
#, fuzzy
msgid "If you try now to access the application at the following URL:"
msgstr "今、以下のURLでアプリケーションにアクセスしようとすると"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:336
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:338
#, fuzzy
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr "再びKeycloakのログインページにリダイレクトされるはずです。しかし、今度は別の "
"`realm` を使って認証することになります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:341
#, fuzzy
msgid "In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr ""
"どちらの場合も、ユーザーの認証に成功すると、ランディングページにユーザーの名"
"前とEメールが表示されます。ユーザー `alice` が両方のテナントに存在していても"
"、アプリケーション上では異なる領域/テナントに属する別のユーザーとなります。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:342
#, fuzzy, no-wrap
msgid "Resolving Tenant Identifiers with Annotations"
msgstr "テナント設定を無効にする"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:347
#, fuzzy
msgid "You can use the annotations and CDI interceptors for resolving the tenant identifiers as an alternative to using `quarkus.oidc.TenantResolver`. This can be done by setting the value for the key `OidcUtils.TENANT_ID_ATTRIBUTE` on the current `RoutingContext`."
msgstr ""
"`quarkus.oidc.TenantResolver` を使用する代わりに、テナント識別子の解決にアノ"
"テーションとCDIインターセプターを使用することができます。これは、現在の "
"`RoutingContext` のキー `OidcUtils.TENANT_ID_ATTRIBUTE` "
"に値を設定することで可能です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:350
#, fuzzy
msgid "Assuming your application supports two OIDC tenants (`hr`, and default) first you need to define one annotation per tenant ID other than default:"
msgstr ""
"アプリケーションが2つのOIDCテナント（ `hr` 、およびデフォルト）をサポートする"
"と仮定すると、まず、デフォルト以外のテナントIDごとに1つのアノテーションを定義"
"する必要があります。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:355
#, fuzzy
msgid "Proactive HTTP authentication needs to be disabled (`quarkus.http.auth.proactive=false`) for this to work. See xref:security-built-in-authentication.adoc#proactive-authentication[Proactive Authentication] section for further details."
msgstr ""
"この機能を使用するには、Proactive HTTP 認証を無効にする必要があります ( "
"`quarkus.http.auth.proactive=false`)。詳しくは link:security-built-in-"
"authentication.html#proactive-authentication[Proactive "
"Authenticationの]項をご覧ください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:365
#, no-wrap
msgid ""
"@Inherited\n"
"@InterceptorBinding\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target({ElementType.METHOD, ElementType.TYPE})\n"
"public @interface HrTenant {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:368
#, fuzzy
msgid "Next, you'll need one interceptor for each of those annotations:"
msgstr "次に、それらのアノテーションに対応するインターセプターを1つずつ用意します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:376
#, no-wrap
msgid ""
"@Interceptor\n"
"@HrTenant\n"
"public class HrTenantInterceptor {\n"
"    @Inject\n"
"    RoutingContext routingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:383
#, no-wrap
msgid ""
"    @AroundInvoke\n"
"    Object setTenant(InvocationContext context) throws Exception {\n"
"        routingContext.put(OidcUtils.TENANT_ID_ATTRIBUTE, \"hr\");\n"
"        return context.proceed();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:388
#, fuzzy
msgid "Now all methods and classes carrying `@HrTenant` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default OIDC provider."
msgstr ""
"これで、 `@HrTenant` を持つすべてのメソッドとクラスは、 `quarkus.oidc.hr."
"auth-server-url` で設定された OIDC "
"プロバイダを使用して認証され、他のすべてのクラスとメソッドは、デフォルトの "
"OIDC プロバイダを使用して認証されるようになります。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:390
#, no-wrap
msgid "Programmatically Resolving Tenants Configuration"
msgstr "テナントの設定をプログラムで解決"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:394
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "サポートしたいさまざまなテナントに対して、より動的な設定が必要で、設定ファイルに複数のエントリーを入れたくない場合は、 `io.quarkus.oidc.TenantConfigResolver` が利用出来ます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:396
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "このインターフェイスを使用すると、実行時にテナント設定を動的に作成することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:400
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:403
#, fuzzy, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:408
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:411
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantConfigResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:416
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, TenantConfigResolver.TenantConfigRequestContext requestContext) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:427
#, no-wrap
msgid ""
"        if (\"tenant-c\".equals(parts[1])) {\n"
"            // Do 'return requestContext.runBlocking(createTenantConfig());'\n"
"            // if a blocking call is required to create a tenant config\n"
"            return Uni.createFromItem(createTenantConfig());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:431
#, no-wrap
msgid ""
"        // resolve to default tenant configuration\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:434
#, no-wrap
msgid ""
"    private Supplier<OidcTenantConfig> createTenantConfig() {\n"
"        final OidcTenantConfig config = new OidcTenantConfig();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:439
#, no-wrap
msgid ""
"        config.setTenantId(\"tenant-c\");\n"
"        config.setAuthServerUrl(\"http://localhost:8180/realms/tenant-c\");\n"
"        config.setClientId(\"multi-tenant-client\");\n"
"        OidcTenantConfig.Credentials credentials = new OidcTenantConfig.Credentials();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:441
#, no-wrap
msgid "        credentials.setSecret(\"my-secret\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:443
#, no-wrap
msgid "        config.setCredentials(credentials);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:445
#, no-wrap
msgid "        // any other setting support by the quarkus-oidc extension\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:449
#, no-wrap
msgid ""
"        return () -> config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:452
#, fuzzy
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr ""
"このメソッドから返される `OidcTenantConfig` は、 `application.properties` "
"から `oidc` 名前空間の構成を解析するために使用されるものと同じです。 "
"`quarkus-oidc` 拡張機能でサポートされている設定のいずれかを使用して、この設定"
"を入力することができます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:453
#, no-wrap
msgid "Tenant Resolution for OIDC 'web-app' applications"
msgstr "OIDCの \"web-app\" アプリケーションのためのテナント解決"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:456
#, fuzzy
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr ""
"`service` と `web-app` の OIDC アプリケーションの現在の HTTP リクエストを保護"
"するために使用するテナント構成を選択するために、いくつかのオプションが用意さ"
"れています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:458
#, fuzzy
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr ""
"例えば、「/service」のパスには `tenant-service` の設定を、「/management」"
"のパスには `tenant-manage` の設定を使用するなど、URL パスを確認してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:459
#, fuzzy
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help selecting between the `tenant-service` and `tenant-manage` configurations"
msgstr ""
"例えば、URLパスが常に「/service」となっている場合、「Realm: "
"service」または「Realm: management」などのヘッダーを確認することで、 `tenant-"
"service` と `tenant-manage` の構成を選択することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:460
#, fuzzy
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr "URLのクエリパラメータの確認 - "
"テナントの構成を選択するためにヘッダーを使用する方法と同様に動作します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:462
#, fuzzy
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr ""
"これらのオプションはすべて、OIDC `service` アプリケーションのカスタム "
"`TenantResolver` および `TenantConfigResolver` の実装で簡単に実装できます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:464
#, fuzzy
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr ""
"ただし、OIDC `web-app` アプリケーションのコード認証フローを完了するために "
"HTTP リダイレクトが必要なため、このリダイレクト要求の前後で同じテナント構成を"
"選択するために、カスタム HTTP クッキーが必要になる場合があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:466
#, fuzzy
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the the tenant configuration is resolved"
msgstr ""
"OIDCプロバイダに1つのリダイレクトURLが登録されている場合、"
"リダイレクトリクエスト後にURLパスが同じにならないことがあります - 元のリクエ"
"ストパスに戻すことはできますが、テナントの設定が解決された後になります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:467
#, fuzzy
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr "元のリクエストで使われていたHTTPヘッダは、リダイレクト後には使用できません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:468
#, fuzzy
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr "カスタムURLのクエリパラメータがリダイレクト後に復元されるが、テナントの設定が"
"解決された後に復元される"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:470
#, fuzzy
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr ""
"`web-app` アプリケーションのテナント構成を解決するための情報を、リダイレクト"
"の前後で確実に利用できるようにするには、例えば、クッキーを使用するという方法"
"があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:476
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:482
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.core.http.Cookie;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:496
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        List<String> tenantIdQuery = context.queryParam(\"tenantId\");\n"
"        if (!tenantIdQuery.isEmpty()) {\n"
"            String tenantId = tenantIdQuery.get(0);\n"
"            context.addCookie(Cookie.cookie(\"tenant\", tenantId));\n"
"            return tenantId;\n"
"        } else if (context.cookieMap().containsKey(\"tenant\")) {\n"
"            return context.getCookie(\"tenant\").getValue();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:500
#, no-wrap
msgid ""
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:503
#, no-wrap
msgid "Disabling Tenant Configurations"
msgstr "テナント設定を無効にする"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:506
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "カスタムの `TenantResolver` および `TenantConfigResolver` の実装では、現在のリクエストからテナントを推測できず、デフォルトのテナント設定へのフォールバックが必要な場合は `null` を返すことがあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:508
msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
msgstr "カスタムリゾルバが常にテナントを推論することが予想される場合、デフォルトのテナント設定は必要ありません。 `quarkus.oidc.tenant-enabled=false` の設定で無効にすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:510
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "テナント固有の設定を無効にすることもできます。例: `quarkus.oidc.tenant-a.tenant-enabled=false`"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:511
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:515
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:518
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:519
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:520
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:521
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:521
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 15 minutes"
#~ msgstr "15分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Docker"
#~ msgstr "Docker"

#~ msgid "./mvnw package -Pnative\n"
#~ msgstr "./mvnw package -Pnative\n"
