# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2022-04-12 14:30+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/tests-with-coverage.adoc:7
#, no-wrap
msgid "Measuring the coverage of your tests"
msgstr "テストのカバレッジの測定"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:23
msgid "Learn how to measure the test coverage of your application. This guide covers:"
msgstr "アプリケーションのテストカバレッジを測定する方法をご紹介します。このガイドでは、以下の内容をカバーしています。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:25
msgid "Measuring the coverage of your Unit Tests"
msgstr "ユニットテストのカバレッジを測定する"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:26
msgid "Measuring the coverage of your Integration Tests"
msgstr "統合テストのカバレッジを測定する"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:27
msgid "Separating the execution of your Unit Tests and Integration Tests"
msgstr "ユニットテストと統合テストの実行を分離する"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:28
msgid "Consolidating the coverage for all your tests"
msgstr "すべてのテストのカバレッジを統合"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:30
msgid "Please note that code coverage is not supported in native mode."
msgstr "ネイティブモードではコードカバレッジはサポートされていませんのでご注意ください。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:31
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:35
msgid "Having completed the xref:getting-started-testing.adoc[Testing your application guide]"
msgstr "link:https://quarkus.io/guides/getting-started-testing[アプリケーションのテストガイド] が完了済であること"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:36
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:40
msgid "The application built in this guide is just a JAX-RS endpoint (hello world) that relies on dependency injection to use a service.  The service will be tested with JUnit 5 and the endpoint will be annotated via a `@QuarkusTest` annotation."
msgstr "このガイドで構築されたアプリケーションは、サービスを使用するために依存性インジェクションに依存した JAX-RS エンドポイント (hello world) に過ぎません。サービスは JUnit 5 でテストされ、エンドポイントには `@QuarkusTest` のアノテーションが付けられます。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:41
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:45
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example.  Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。しかし、完成した例にすぐに進むことができます。Git リポジトリをクローンします: `git clone {quickstarts-clone-url}` 、または {quickstarts-archive-url}[archive] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:47
msgid "The solution is located in the `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[directory]."
msgstr "ソリューションは `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:48
#, no-wrap
msgid "Starting from a simple project and two tests"
msgstr "簡単なプロジェクトと2つのテストから始める"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:51
msgid "Let's start from an empty application created with the Quarkus Maven plugin:"
msgstr "Quarkus Mavenプラグインで作成した空のアプリケーションから始めてみましょう。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:57
msgid "Now we'll be adding all the elements necessary to have an application that is properly covered with tests."
msgstr "ここで、アプリケーションをテストで適切にカバーするために必要な要素をすべて追加していきます。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:59
msgid "First, a JAX-RS resource serving a hello endpoint:"
msgstr "まず、helloエンドポイントを提供するアプリケーション:"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:63
#: upstream/_guides/tests-with-coverage.adoc:100
#: upstream/_guides/tests-with-coverage.adoc:118
#, no-wrap
msgid "package org.acme.testcoverage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:69
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:72
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:74
#, no-wrap
msgid "    private final GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:79
#, no-wrap
msgid ""
"    @Inject\n"
"    public GreetingResource(GreetingService service) {\n"
"        this.service = service;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:86
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:93
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:96
msgid "This endpoint uses a greeting service:"
msgstr "このエンドポイントは、グリーティングサービスを利用しています。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:102
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:105
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:109
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:111
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:114
msgid "The project will also need a test:"
msgstr "プロジェクトにはテストも必要です。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:122
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Tag;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:124
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:127
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:130
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:139
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:151
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:153
#, fuzzy, no-wrap
msgid "Setting up JaCoCo"
msgstr "Jacocoの設定"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:156
#, fuzzy
msgid "Now we need to add JaCoCo to our project. To do this we need to add the following to the build file:"
msgstr "次に、Jacocoをプロジェクトに追加する必要があります。そのために、ビルドファイ"
"ルに以下を追加する必要があります。"

#. type: Block title
#: upstream/_guides/tests-with-coverage.adoc:158
#: upstream/_guides/tests-with-coverage.adoc:196
#: upstream/_guides/tests-with-coverage.adoc:352
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:165
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-jacoco</artifactId>\n"
"  <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/tests-with-coverage.adoc:168
#: upstream/_guides/tests-with-coverage.adoc:230
#: upstream/_guides/tests-with-coverage.adoc:405
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:171
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-jacoco\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:175
#, fuzzy
msgid "This Quarkus extension takes care of everything that would usually be done via the JaCoCo Maven plugin, so no additional config is required."
msgstr ""
"このQuarkusのエクステンションは、通常はJacoco Mavenプラグインで行われることを"
"すべて行いますので、追加の設定は必要ありません。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:178
msgid "Using both the extension and the plugin requires special configuration, if you add both you will get lots of errors about classes already being instrumented. The configuration needed is detailed below."
msgstr "エクステンションとプラグインの両方を使用するには、特別な設定が必要です。両方を追加すると、すでにインスツルメンテーションされているクラスに関する多くのエラーが発生します。必要な設定の詳細は以下のとおりです。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:179
#, no-wrap
msgid "Running the tests with coverage"
msgstr "カバレッジ付きテストの実行"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:183
#, fuzzy
msgid "Run `mvn verify`, the tests will be run and the results will end up in `target/jacoco-reports`. This is all that is needed, the `quarkus-jacoco` extension allows JaCoCo to just work out of the box."
msgstr ""
"`mvn verify` を実行すると、テストが実行され、その結果が `target/jacoco-"
"reports` に反映されます。必要なのはこれだけで、 `quarkus-jacoco` "
"のエクステンションを使えば、Jacoco はすぐに動作します。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:185
msgid "There are some config options that affect this:"
msgstr "これにはいくつかの設定オプションがあります。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:188
#, no-wrap
msgid "Coverage for tests not using @QuarkusTest"
msgstr "QuarkusTestを使用していないテストのカバレッジ"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:192
#, fuzzy
msgid "The Quarkus automatic JaCoCo config will only work for tests that are annotated with `@QuarkusTest`. If you want to check the coverage of other tests as well then you will need to fall back to the JaCoCo maven plugin."
msgstr ""
"Quarkusの自動Jacoco設定は、 `@QuarkusTest` でアノテーションされたテストに対し"
"てのみ機能します。他のテストのカバレッジもチェックしたい場合は、Jacoco "
"mavenプラグインを利用する必要があります。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:194
#, fuzzy
msgid "In addition to including the `quarkus-jacoco` extension in your `pom.xml` you will need the following config:"
msgstr "`quarkus-jacoco` "
"エクステンションをpomに含めるのに加えて、以下のような設定が必要になります。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:225
#, no-wrap
msgid ""
"<project>\n"
"    <build>\n"
"        <plugins>\n"
"            ...\n"
"            <plugin>\n"
"                <groupId>org.jacoco</groupId>\n"
"                <artifactId>jacoco-maven-plugin</artifactId>\n"
"                <version>${jacoco.version}</version>\n"
"                <executions>\n"
"                   <execution>\n"
"                      <id>default-prepare-agent</id>\n"
"                      <goals>\n"
"                           <goal>prepare-agent</goal>\n"
"                      </goals>\n"
"                      <configuration>\n"
"                        <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>  <1>\n"
"                        <destFile>${project.build.directory}/jacoco-quarkus.exec</destFile>\n"
"                        <append>true</append>\n"
"                      </configuration>\n"
"                   </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:227
#: upstream/_guides/tests-with-coverage.adoc:249
msgid "This config tells it to ignore `@QuarkusTest` related classes, as they are loaded by `QuarkusClassLoader`"
msgstr "この設定では、 `@QuarkusTest` 関連のクラスを無視するようになっています。これらのクラスは `QuarkusClassLoader` で読み込まれる為です。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:237
#, no-wrap
msgid ""
"plugins {\n"
"    id 'jacoco' <1>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:246
#, no-wrap
msgid ""
"test {\n"
"    finalizedBy jacocoTestReport\n"
"    jacoco {\n"
"        excludeClassLoaders = [\"*QuarkusClassLoader\"] <2>\n"
"        destinationFile = layout.buildDirectory.file(\"jacoco-quarkus.exec\").get().asFile <2>\n"
"    }\n"
"    jacocoTestReport.enabled = false <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:248
msgid "Add the `jacoco` gradle plugin"
msgstr "`jacoco` gradleプラグインの追加"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:250
msgid "Set this config to `false` if you are also using the `quarkus-jacoco` extension and have at least one `@QuarkusTest`.  The default `jacocoTestReport` task can be skipped since `quarkus-jacoco` will generate the combined report of regular unit tests and `@QuarkusTest` classes since the execution data is recorded in the same file."
msgstr "`quarkus-jacoco` エクステンションも使用していて、少なくとも 1 つの `@QuarkusTest` がある場合は、このコンフィグを `false` に設定します。デフォルトの `jacocoTestReport` タスクは省略できます。なぜなら `quarkus-jacoco` は通常のユニットテストと `@QuarkusTest` クラスの実行データが同じファイルに記録されているため、それらを組み合わせたレポートを生成するからです。"

#. type: delimited block *
#: upstream/_guides/tests-with-coverage.adoc:254
#, fuzzy
msgid "This config will only work if at least one `@QuarkusTest` is being run. If you are not using `@QuarkusTest` then you can simply use the JaCoCo plugin in the standard manner with no additional config."
msgstr ""
"この設定は、少なくとも1つの `@QuarkusTest` "
"が実行されている場合にのみ機能します。 `@QuarkusTest` "
"を使用していない場合は、追加の設定をすることなく、通常の方法で Jacoco "
"プラグインを使用することができます。"

#. type: Title ===
#: upstream/_guides/tests-with-coverage.adoc:255
#, no-wrap
msgid "Coverage for Integration Tests"
msgstr "結合テストのカバレッジ"

#. type: delimited block *
#: upstream/_guides/tests-with-coverage.adoc:258
#, fuzzy
msgid "To get code coverage data from integration tests, the following requirements need to be met:"
msgstr "結合テストからコードカバレッジデータを取得するには、次の要件が満たされる必要"
"があります:"

#. type: delimited block *
#: upstream/_guides/tests-with-coverage.adoc:260
msgid "The built artifact is a jar (and not a container or native binary)."
msgstr "ビルドされたアーティファクトがjarであること（コンテナやネイティブバイナリではないこと）。"

#. type: delimited block *
#: upstream/_guides/tests-with-coverage.adoc:261
#, fuzzy
msgid "JaCoCo needs to be configured in your build tool."
msgstr "Jacocoがビルドツールで設定されていること。"

#. type: delimited block *
#: upstream/_guides/tests-with-coverage.adoc:262
msgid "The application must have been built with `quarkus.package.write-transformed-bytecode-to-build-output` set to `true`"
msgstr "アプリケーションは、 `quarkus.package.write-transformed-bytecode-to-build-output` が `true` に設定してビルドされていること"

#. type: delimited block *
#: upstream/_guides/tests-with-coverage.adoc:264
#, fuzzy
msgid "Setting `quarkus.package.write-transformed-bytecode-to-build-output=true` should be done with caution and only if subsequent builds are done in a clean environment - i.e. the build tool's output directory has been completely cleaned."
msgstr ""
"`quarkus.package.write-transformed-bytecode-to-build-output=true` の設定は、"
"後続のビルドがクリーンな環境で行われる場合のみ、つまりビルドツールの出力ディ"
"レクトリが完全にクリーンな状態で行われる場合のみ、慎重に設定を行う必要があり"
"ます。"

#. type: delimited block *
#: upstream/_guides/tests-with-coverage.adoc:267
#, fuzzy
msgid "In the `pom.xml`, you can add the following plugin configuration for JaCoCo. This will append integration test data into the same destination file as unit tests, re-build the JaCoCo report after the integration tests are complete, and thus produce a comprehensive code-coverage report."
msgstr ""
"`pom.xml` で、Jacocoのプラグイン設定を以下のように追加します。これにより、結"
"合テストのデータをユニットテストと同じ保存先のファイルに追加し、結合テストが"
"完了した後にjacocoレポートを再構築することで、包括的なコードカバレッジレポー"
"トを作成します。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:280
#: upstream/_guides/tests-with-coverage.adoc:366
#, no-wrap
msgid ""
"<build>\n"
"    ...\n"
"    <plugins>\n"
"        ...\n"
"        <plugin>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>jacoco-maven-plugin</artifactId>\n"
"            <version>${jacoco.version}</version>\n"
"            <executions>\n"
"                ... <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:308
#, no-wrap
msgid ""
"                <execution>\n"
"                    <id>default-prepare-agent-integration</id>\n"
"                    <goals>\n"
"                        <goal>prepare-agent-integration</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <destFile>${project.build.directory}/jacoco-quarkus.exec</destFile>\n"
"                        <append>true</append>\n"
"                    </configuration>\n"
"                </execution>\n"
"                <execution>\n"
"                    <id>report</id>\n"
"                    <phase>post-integration-test</phase>\n"
"                    <goals>\n"
"                        <goal>report</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>\n"
"                        <outputDirectory>${project.build.directory}/jacoco-report</outputDirectory>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:310
#: upstream/_guides/tests-with-coverage.adoc:402
#, fuzzy
msgid "All executions should be in the same `<plugin>` definition so make sure you concatenate all of them."
msgstr "すべての実行は同じ `&amp;lt;plugin&amp;gt;` "
"の定義にあるはずなので、すべて連結してください。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:312
#, fuzzy
msgid "In order to run the integration tests as a jar with the JaCoCo agent, add the following to your `pom.xml`."
msgstr "結合テストをjarとしてJacocoエージェントと共に実行するためには、 `pom.xml` "
"に以下を追加します。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:341
#, no-wrap
msgid ""
"<build>\n"
"    ...\n"
"    <plugins>\n"
"        ...\n"
"        <plugin>\n"
"            <artifactId>maven-failsafe-plugin</artifactId>\n"
"            <version>${surefire-plugin.version}</version>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>integration-test</goal>\n"
"                        <goal>verify</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <systemPropertyVariables>\n"
"                            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                            <maven.home>${maven.home}</maven.home>\n"
"                            <quarkus.test.arg-line>${argLine}</quarkus.test.arg-line>\n"
"                        </systemPropertyVariables>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:345
#, fuzzy
msgid "Sharing the same value for `quarkus.test.arg-line` might break integration test runs that test different types of Quarkus artifacts. In such cases, the use of Maven profiles is advised."
msgstr ""
"`quarkus.test.arg-line` で同じ値を共有すると、異なるタイプのQuarkusアーティフ"
"ァクトをテストする結合テストが壊れる可能性があります。このような場合には、mav"
"enプロファイルの使用をお勧めします。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:346
#, no-wrap
msgid "Setting coverage thresholds"
msgstr "カバレッジの閾値を設定"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:350
#, fuzzy
msgid "You can set thresholds for code coverage using the JaCoCo Maven plugin. Note the element `<dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>`.  You must set it matching your choice for `quarkus.jacoco.data-file`."
msgstr ""
"コードカバレッジの閾値は、Jacoco "
"Mavenプラグインを使って設定することができます。 `<dataFile>${project.build."
"directory}/jacoco-quarkus.exec</dataFile>` という要素に注意してください。 "
"`quarkus.jacoco.data-file` の選択に合わせて設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:400
#, no-wrap
msgid ""
"                <execution>\n"
"                    <id>jacoco-check</id>\n"
"                    <goals>\n"
"                        <goal>check</goal>\n"
"                    </goals>\n"
"                    <phase>post-integration-test</phase>\n"
"                    <configuration>\n"
"                        <dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>\n"
"                        <rules>\n"
"                            <rule>\n"
"                                <element>BUNDLE</element>\n"
"                                <limits>\n"
"                                    <limit>\n"
"                                        <counter>LINE</counter>\n"
"                                        <value>COVEREDRATIO</value>\n"
"                                        <minimum>0.8</minimum>\n"
"                                    </limit>\n"
"                                    <limit>\n"
"                                        <counter>BRANCH</counter>\n"
"                                        <value>COVEREDRATIO</value>\n"
"                                        <minimum>0.72</minimum>\n"
"                                    </limit>\n"
"                                </limits>\n"
"                            </rule>\n"
"                        </rules>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:427
#, no-wrap
msgid ""
"jacocoTestCoverageVerification {\n"
"    executionData.setFrom(\"$project.buildDir/jacoco-quarkus.exec\")\n"
"    violationRules {\n"
"        rule {\n"
"            limit {\n"
"                counter = 'INSTRUCTION'\n"
"                value = 'COVEREDRATIO'\n"
"                minimum = 0.80\n"
"            }\n"
"            limit {\n"
"                counter = 'BRANCH'\n"
"                value = 'COVEREDRATIO'\n"
"                minimum = 0.72\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
"check.dependsOn jacocoTestCoverageVerification\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:430
msgid "Excluding classes from the verification task can be configured as following:"
msgstr "検証タスクからクラスを除外するには、以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:442
#, no-wrap
msgid ""
"jacocoTestCoverageVerification {\n"
"    afterEvaluate { <1>\n"
"        classDirectories.setFrom(files(classDirectories.files.collect { <2>\n"
"            fileTree(dir: it, exclude: [\n"
"                    \"org/example/package/**/*\" <3>\n"
"            ])\n"
"        }))\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:444
msgid "`classDirectories` needs to be read after evaluation phase in Gradle"
msgstr "`classDirectories` は、Gradle の評価フェーズの後に読み込まれる必要があります。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:445
msgid "Currently, there is a bug in Gradle JaCoCo which requires the `excludes` to be specified in this manner - https://github.com/gradle/gradle/issues/14760.  Once this issue is fixed, excludes"
msgstr "現在、Gradle JaCoCoには、 `excludes` をこのように指定しなければならないというバグがあります https://github.com/gradle/gradle/issues/14760 。この問題が修正されれば、excludes"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:446
msgid "Exclude all classes in `org/example/package` package"
msgstr "`org/example/package` パッケージのすべてのクラスを除外します。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:448
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: delimited block *
#: upstream/_guides/tests-with-coverage.adoc:451
msgid "You now have all the information you need to study the coverage of your tests! But remember, some code that is not covered is certainly not well tested. But some code that is covered is not necessarily *well* tested. Make sure to write good tests!"
msgstr "これで、テストのカバレッジを研究するために必要なすべての情報を手に入れることができました!しかし、カバーされていないコードは、確かに十分にテストされていないものがありますが、カバーされているコードの中には、必ずしも *十分に* テストされていないものもあることを覚えておいてください。良いテストを書くようにしましょう!"

#~ msgid "This is only needed if you are using Failsafe to run integration tests"
#~ msgstr "これは、Failsafeを使って統合テストを実行する場合にのみ必要です。"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 15 minutes"
#~ msgstr "15分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with JAVA_HOME configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "If you are using Gradle, add this to your `build.gradle`:"
#~ msgstr "Gradleを使用している場合は、 `build.gradle` に以下を追加します。"

#~ msgid "Quarkus - Measuring the coverage of your tests"
#~ msgstr "テストのカバレッジを測定"

#~ msgid "Because Quarkus uses class file transformation it is not possible to use online transformation with the Jacoco agent.  Instead we need to use offline transformation."
#~ msgstr "Quarkusはクラスファイル変換を使用しているため、Jacocoエージェントでオンライン変換を使用することはできません。代わりにオフライン変換を使用する必要があります。"

#~ msgid "It also requires a small change in the Surefire configuration. Note below that we specified `jacoco-agent.destfile` as a system property in the default case (unit tests) and for the integration tests."
#~ msgstr "また、Surefireの設定を少し変更する必要があります。デフォルトの場合(ユニットテスト)と統合テストでは、システムのプロパティーとして `jacoco-agent.destfile` を指定していることに注意してください。"

#~ msgid "Measuring the coverage of JUnit tests using JaCoCo"
#~ msgstr "JaCoCo を使って JUnit テストのカバレッジを測定する"

#~ msgid "Measuring separately the coverage of each test type"
#~ msgstr "各テストタイプのカバレッジを個別に測定"

#~ msgid "The coverage does not seem to correspond to the reality"
#~ msgstr "カバレッジが現実と一致していないように見える"

#~ msgid "During the report generation, you may have noticed a warning:"
#~ msgstr "レポート生成中に警告が表示されることがあります。"
