# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-26 17:18+0000\n"
"PO-Revision-Date: 2021-04-01 13:53+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-keycloak-authorization.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenID Connect (OIDC) and Keycloak to Centralize Authorization"
msgstr "OpenID Connect（OIDC）とKeycloakを使った認証の一元化"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:11
msgid "This guide demonstrates how your Quarkus application can authorize a bearer token access to protected resources using https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services]."
msgstr "このガイドでは、Quarkusアプリケーションが link:https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services] を使用して保護されたリソースへのベアラートークンアクセスを認証する方法を説明します。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:15
#, fuzzy
msgid "The `quarkus-keycloak-authorization` extension is based on `quarkus-oidc` and provides a policy enforcer that enforces access to protected resources based on permissions managed by Keycloak and currently can only be used with the Quarkus xref:security-openid-connect.adoc[OIDC service applications].  It provides a flexible and dynamic authorization capability based on Resource-Based Access Control.  In other words, instead of explicitly enforcing access based on some specific access control mechanism (e.g.: RBAC), you just check whether or not a request is allowed to access a resource based on its name, identifier or URI."
msgstr ""
"`quarkus-keycloak-authorization` エクステンションは、 `quarkus-oidc` に基づい"
"ており、Keycloakによって管理される権限に基づいて保護されたリソースへのアクセ"
"スを強制するポリシーエンフォーサーを提供しており、現在はQuarkus link"
":security-openid-connect.html[OIDCサービスアプリケーション]でのみ使用すること"
"ができます。Keycloakは、リソースベースアクセスコントロールに基づいた、柔軟で"
"動的な認証機能を提供します。つまり、特定のアクセス制御メカニズム（RBACなど）"
"に基づいて明示的にアクセスを強制するのではなく、リソースの名前、識別子、また"
"はURIに基づいて、リクエストがリソースへのアクセスを許可されているかどうかをチ"
"ェックするだけです。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:17
msgid "By externalizing authorization from your application, you are allowed to protect your applications using different access control mechanisms as well as avoid re-deploying your application every time your security requirements change, where Keycloak will be acting as a centralized authorization service from where your protected resources and their associated permissions are managed."
msgstr "アプリケーションから認証を外部化することで、異なるアクセス制御メカニズムを使用してアプリケーションを保護することができ、セキュリティー要件が変更されるたびにアプリケーションを再デプロイする必要がなくなります。Keycloakは、保護されたリソースおよび関連する権限が管理される一元化された認可サービスとして機能します。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:19
#, fuzzy
msgid "See the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide for more information about `Bearer Token` authentication mechanism. It is important to realize that it is the `Bearer Token` authentication mechanism which does the authentication and creates a security identity - while the `quarkus-keycloak-authorization` extension is responsible for applying a Keycloak Authorization Policy to this identity based on the current request path and other policy settings."
msgstr ""
"`Bearer Token` 認証メカニズムの詳細については、ガイド「 link:security-openid-"
"connect.html[Using OpenID Connect to Protect Service]Applications」を参照して"
"ください。認証を行い、セキュリティIDを作成するのは、 `Bearer Token` "
"認証メカニズムであり、一方、 `quarkus-keycloak-authorization` "
"拡張機能は、現在のリクエストパスやその他のポリシー設定に基づいて、"
"このIDにKeycloak Authorization "
"Policyを適用する責任があることを認識することが重要です。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:22
msgid "If you are already familiar with Keycloak, you’ll notice that the extension is basically another adapter implementation but specific for Quarkus applications.  Otherwise, you can find more information in the Keycloak https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_overview[documentation]."
msgstr "すでにKeycloakに慣れ親しんでいる方は、このエクステンションは基本的にはアダプターの別実装ですが、Quarkusアプリケーションに特化したものであることにお気づきでしょう。それ以外の場合は、Keycloakの link:https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_overview[ドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:23
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:28
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:29
msgid "https://www.keycloak.org/docs/latest/server_installation/index.html[Keycloak]"
msgstr "https://www.keycloak.org/docs/latest/server_installation/index.html[Keycloak]"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:30
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:33
msgid "In this example, we build a very simple microservice which offers two endpoints:"
msgstr "この例では、2つのエンドポイントを提供する非常にシンプルなマイクロサービスを構築しています。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:35
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:36
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:38
msgid "These endpoints are protected and can only be accessed if a client is sending a bearer token along with the request, which must be valid (e.g.: signature, expiration and audience) and trusted by the microservice."
msgstr "これらのエンドポイントは保護されており、クライアントがリクエストと一緒にベアラートークンを送信している場合にのみアクセスすることができます。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:41
msgid "The bearer token is issued by a Keycloak Server and represents the subject to which the token was issued for.  For being an OAuth 2.0 Authorization Server, the token also references the client acting on behalf of the user."
msgstr "ベアラートークンは、Keycloakサーバーによって発行され、トークンが発行された対象を表します。OAuth 2.0 認可サーバーであるため、トークンはユーザーの代わりに動作するクライアントも参照します。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:45
msgid "The `/api/users/me` endpoint can be accessed by any user with a valid token.  As a response, it returns a JSON document with details about the user where these details are obtained from the information carried on the token.  This endpoint is protected with RBAC (Role-Based Access Control) and only users granted with the `user` role can access this endpoint."
msgstr "`/api/users/me` エンドポイントは、有効なトークンを持つ任意のユーザーがアクセスできます。応答として、ユーザーに関する詳細が記載された JSON ドキュメントを返却します。このエンドポイントは RBAC (Role-Based Access Control) で保護されており、 `user` のロールで許可されたユーザーのみがこのエンドポイントにアクセスできます。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:47
msgid "The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) and only users granted with the `admin` role can access it."
msgstr "`/api/admin` エンドポイントは RBAC (役割ベースのアクセス制御) で保護されており、 `admin` の役割を付与されたユーザーのみがアクセスできます。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:51
msgid "This is a very simple example using RBAC policies to govern access to your resources.  However, Keycloak supports other types of policies that you can use to perform even more fine-grained access control.  By using this example, you'll see that your application is completely decoupled from your authorization policies with enforcement being purely based on the accessed resource."
msgstr "これは、RBACポリシーを使用してリソースへのアクセスを制御する非常にシンプルな例です。しかし、Keycloakは他のタイプのポリシーをサポートしており、より詳細なアクセス制御を行うために使用することができます。この例を使用すると、アプリケーションが認可ポリシーから完全に切り離されており、エンフォースメントは純粋にアクセスされたリソースに基づいていることがわかるでしょう。"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:52
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:56
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:58
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:60
msgid "The solution is located in the `security-keycloak-authorization-quickstart` {quickstarts-tree-url}/security-keycloak-authorization-quickstart[directory]."
msgstr "ソリューションは `security-keycloak-authorization-quickstart` {quickstarts-tree-url}/security-keycloak-authorization-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:61
#, no-wrap
msgid "Creating the Project"
msgstr "プロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:65
msgid "First, we need a new project.  Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:71
#, fuzzy
msgid "This command generates a project, importing the `keycloak-authorization` extension which is an implementation of a Keycloak Adapter for Quarkus applications and provides all the necessary capabilities to integrate with a Keycloak Server and perform bearer token authorization."
msgstr ""
"このコマンドは、Quarkusアプリケーション用のKeycloakアダプターの実装であり、Ke"
"ycloakサーバーと統合してベアラートークン認証を実行するために必要なすべての機"
"能を提供する `keycloak-authorization` "
"エクステンションをインポートして、Mavenプロジェクトを生成します。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:74
msgid "If you already have your Quarkus project configured, you can add the `oidc` and `keycloak-authorization` extensions to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで次のコマンドを実行することで、 `oidc` と `keycloak-authorization` のエクステンションをプロジェクトに追加できます。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:79
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_guides/security-keycloak-authorization.adoc:81
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:91
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-keycloak-authorization</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-keycloak-authorization.adoc:94
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:98
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-oidc\")\n"
"implementation(\"io.quarkus:quarkus-keycloak-authorization\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:102
msgid "Let's start by implementing the `/api/users/me` endpoint.  As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/api/users/me` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:106
#: upstream/_guides/security-keycloak-authorization.adoc:148
#, no-wrap
msgid "package org.acme.security.keycloak.authorization;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:110
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:112
#, no-wrap
msgid "import org.jboss.resteasy.annotations.cache.NoCache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:114
#, no-wrap
msgid "import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:117
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UsersResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:120
#: upstream/_guides/security-keycloak-authorization.adoc:342
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:127
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/me\")\n"
"    @NoCache\n"
"    public User me() {\n"
"        return new User(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:129
#, no-wrap
msgid "    public static class User {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:131
#, no-wrap
msgid "        private final String userName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:135
#, no-wrap
msgid ""
"        User(SecurityIdentity identity) {\n"
"            this.userName = identity.getPrincipal().getName();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:141
#, no-wrap
msgid ""
"        public String getUserName() {\n"
"            return userName;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:144
msgid "The source code for the `/api/admin` endpoint is also very simple:"
msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:153
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:155
#, no-wrap
msgid "import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:159
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"@Authenticated\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:166
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:170
#, fuzzy
msgid "Note that we did not define any annotation such as `@RolesAllowed` to explicitly enforce access to a resource.  The extension will be responsible to map the URIs of the protected resources you have in Keycloak and evaluate the permissions accordingly, granting or denying access depending on the permissions that will be granted by Keycloak."
msgstr ""
"リソースへのアクセスを明示的に強制するために、 `@RolesAllowed` のようなアノテ"
"ーションを定義していないことに注意してください。拡張機能は、Keycloakにある保"
"護されたリソースのURIをマッピングし、それに応じて許可を評価し、Keycloakによっ"
"て付与される許可に応じてアクセスを許可または拒否する責任を負います。"

#. type: Title ===
#: upstream/_guides/security-keycloak-authorization.adoc:171
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:174
msgid "The OpenID Connect extension allows you to define the adapter configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr "OpenID Connect エクステンションを使用すると、`src/main/resources` ディレクトリーに配置される `application.properties` ファイルを使用してアダプター設定を定義することができます。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:182
#, no-wrap
msgid ""
"# OIDC Configuration\n"
"%prod.quarkus.oidc.auth-server-url=https://localhost:8543/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.tls.verification=none\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:185
#, no-wrap
msgid ""
"# Enable Policy Enforcement\n"
"quarkus.keycloak.policy-enforcer.enable=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:189
#, no-wrap
msgid ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:192
#, fuzzy
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in a dev mode. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information."
msgstr ""
"`quarkus.oidc.auth-server-url` に `%prod.` "
"プロファイルのプレフィックスを追加すると、"
"アプリケーションが開発モードで実行されたときに `Dev Services for Keycloak` "
"がコンテナを起動するようになります。詳しくは、後述の link:#keycloak-dev-"
"mode[「アプリケーションを開発モードで実行する]」をご覧ください。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:194
#, fuzzy
msgid "By default, applications using the `quarkus-oidc` extension are marked as a `service` type application (see `quarkus.oidc.application-type`). This extension also supports only `web-app` type applications but only if the access token returned as part of the authorization code grant response is marked as a source of roles: `quarkus.oidc.roles.source=accesstoken` (`web-app` type applications check ID token roles by default)."
msgstr ""
"デフォルトでは、 `quarkus-oidc` "
"エクステンションを使用するアプリケーションは、 `service` "
"タイプのアプリケーションとしてマークされます（ `quarkus.oidc.application-"
"type` 参照）。また、この拡張機能は、 `web-app` タイプのアプリケーションのみを"
"サポートしますが、認可コード付与応答の一部として返されたアクセストークンが、"
"ロールのソースとしてマークされている場合に限ります： `quarkus.oidc.roles."
"source=accesstoken` ( `web-app` "
"タイプのアプリケーションは、デフォルトでIDトークンのロールをチェックします)。"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:195
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloakサーバーの起動と設定"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:198
#, fuzzy
msgid "Do not start the Keycloak server when you run the application in a dev mode - `Dev Services for Keycloak` will launch a container. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information."
msgstr ""
"アプリケーションを開発モードで実行するときは、"
"Keycloakサーバーを起動しないでください - `Dev Services for Keycloak` "
"はコンテナを起動します。詳細については、下記の link:#keycloak-dev-mode[「アプ"
"リケーションを開発モードで実行する]」セクションを参照してください。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:200
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak Serverを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:204
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8543:8443 -v \"$(pwd)\"/config/keycloak-keystore.jks:/etc/keycloak-keystore.jks quay.io/keycloak/keycloak:{keycloak.version} start  --hostname-strict=false --https-key-store-file=/etc/keycloak-keystore.jks\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:207
#, fuzzy
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、 `keycloak.version` は、 `17.0.0` 以降に設定する必要があります。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:209
#, fuzzy
msgid "You should be able to access your Keycloak Server at https://localhost:8543[localhost:8543]."
msgstr ""
"Keycloakサーバーには、 link:http://localhost:8180/auth[localhost:8180/auth] "
"または link:https://localhost:8543/auth[localhost:8543/auth] "
"でアクセスできるはずです。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:212
msgid "Log in as the `admin` user to access the Keycloak Administration Console.  Username should be `admin` and password `admin`."
msgstr "Keycloak 管理 Consoleにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:215
msgid "Import the {quickstarts-tree-url}/security-keycloak-authorization-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.  For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "{quickstarts-tree-url}/security-keycloak-authorization-quickstart/config/quarkus-realm.json[realm設定ファイル]をインポートして、新しいrealmを作成します。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムを作成する] 方法についてのKeycloakのドキュメントを参照してください。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:217
#, fuzzy
msgid "After importing the realm you can see the resource permissions:"
msgstr "レルムをインポートすると、リソースのパーミッションが表示されます。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-keycloak-authorization.adoc:218
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Target for macro image
#: upstream/_guides/security-keycloak-authorization.adoc:218
#, no-wrap
msgid "keycloak-authorization-permissions.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:221
#, fuzzy
msgid "It explains why the endpoint has no `@RolesAllowed` annotations - the resource access permissions are set directly in Keycloak."
msgstr ""
"これは、エンドポイントに `@RolesAllowed` のアノテーションがない理由を説明して"
"います。リソースのアクセス許可は、Keycloakで直接設定されます。"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:223
#, fuzzy, no-wrap
msgid "Running the Application in Dev mode"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:226
#, fuzzy
msgid "To run the application in dev mode, use:"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:230
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr ""
"アプリケーションを開発モードで実行するには、 `./mvnw clean compile "
"quarkus:dev`. link:security-openid-connect-dev-services.html[Dev Services "
"for Keycloak]は、Keycloakコンテナを起動し、 `quarkus-realm.json` "
"をインポートします。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:232
#, fuzzy
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev[/q/dev] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr ""
"link:http://localhost:8080/q/dev[/q/dev]にある link:dev-ui.html[Dev "
"UI]を開き、 `OpenID Connect` `Dev UI` カードの `Provider: Keycloak` "
"リンクをクリックします。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:234
#, fuzzy
msgid "You will be asked to login into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr "`OpenID Connect Dev UI` が提供する `Single Page Application` "
"へのログインを求められます。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:236
#, fuzzy
msgid "Login as `alice` (password: `alice`) who only has a `User Permission` to access the `/api/users/me` resource"
msgstr ""
"`/api/users/me` リソースにアクセスするために `User Permission` のみを持つ "
"`alice` (パスワード: `alice`) としてログインします。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:237
#, fuzzy
msgid "accessing `/api/admin` will return `403`"
msgstr "`/api/admin` にアクセスすると、次のようになります。 `403`"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:238
#: upstream/_guides/security-keycloak-authorization.adoc:241
#, fuzzy
msgid "accessing `/api/users/me` will return `200`"
msgstr "`/api/users/me` にアクセスすると、次のようになります。 `200`"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:239
#, fuzzy
msgid "Logout and login as `admin` (password: `admin`) who has both `Admin Permission` to access the `/api/admin` resource and `User Permission` to access the `/api/users/me` resource"
msgstr ""
"`/api/admin` リソースにアクセスするための `Admin Permission` と `/api/users/"
"me` リソースにアクセスするための `User Permission` の両方を持っている `admin`"
" (パスワード: `admin`)としてログアウトし、ログインする。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:240
#, fuzzy
msgid "accessing `/api/admin` will return `200`"
msgstr "`/api/admin` にアクセスすると、次のようになります。 `200`"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:242
#, fuzzy, no-wrap
msgid "Running the Application in JVM mode"
msgstr "JVMモードでの実行"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:245
#, fuzzy
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr "`dev` モード」での遊びが終わったら、標準的なJavaアプリケーションとして実行す"
"ることができます。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:247
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:251
msgid "Then run it:"
msgstr "そして、以下のように実行します。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:255
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:257
#, fuzzy, no-wrap
msgid "Running the Application in Native Mode"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:260
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:262
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:264
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:268
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲んでから、このバイナリーを直接実行してみましょう。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:272
#, no-wrap
msgid "./target/security-keycloak-authorization-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:274
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:277
#, fuzzy
msgid "See <<keycloak-dev-mode, Running the Application in Dev mode>> section above about testing your application in a dev mode."
msgstr ""
"開発モードでのアプリケーションのテストについては、上記の「 link:#keycloak-"
"dev-mode[Running the Application in Dev mode]」セクションを参照してください。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:279
#, fuzzy
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "JVMまたはNativeモードで起動したアプリケーションのテストは、 `curl` 。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:281
msgid "The application is using bearer token authorization and the first thing to do is obtain an access token from the Keycloak Server in order to access the application resources:"
msgstr "アプリケーションはベアラートークン認可を使用しており、まず最初に行うべきことは、アプリケーションのリソースにアクセスするためにKeycloak Serverからアクセストークンを取得することです。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:290
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST https://localhost:8543/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:293
msgid "The example above obtains an access token for user `alice`."
msgstr "上記の例では、ユーザー `alice` のアクセストークンを取得しています。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:297
msgid "Any user is allowed to access the `http://localhost:8080/api/users/me` endpoint which basically returns a JSON payload with details about the user."
msgstr "どのユーザーでも `http://localhost:8080/api/users/me` エンドポイントで、ユーザーに関する詳細情報を含む JSON ペイロードを取得することが出来ます。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:303
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/api/users/me \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:307
msgid "The `http://localhost:8080/api/admin` endpoint can only be accessed by users with the `admin` role.  If you try to access this endpoint with the previously issued access token, you should get a `403` response from the server."
msgstr "`http://localhost:8080/api/admin` エンドポイントは、 `admin` ロールを持つユーザーのみがアクセスできます。先程発行されたアクセストークンを使用してこのエンドポイントにアクセスしようとすると、サーバーから `403` 応答が返ってくるはずです。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:313
#, no-wrap
msgid ""
" curl -v -X GET \\\n"
"   http://localhost:8080/api/admin \\\n"
"   -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:316
msgid "In order to access the admin endpoint you should obtain a token for the `admin` user:"
msgstr "admin エンドポイントにアクセスするには、 `admin` ユーザーのトークンを取得する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:325
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST https://localhost:8543/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:327
#, no-wrap
msgid "Checking Permissions Programmatically"
msgstr "プログラムで権限をチェックする"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:331
msgid "In some cases, you may want to programmatically check whether or not a request is granted to access a protected resource. By injecting a `SecurityIdentity` instance in your beans, you are allowed to check permissions as follows:"
msgstr "場合によっては、保護されたリソースにアクセスするためのリクエストが許可されているかどうかを プログラムでチェックしたいこともあるでしょう。Beanに `SecurityIdentity` インスタンスを注入することで、以下のようにパーミッションをチェックすることができます。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:336
#, no-wrap
msgid ""
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:339
#, no-wrap
msgid ""
"@Path(\"/api/protected\")\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:355
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<List<Permission>> get() {\n"
"        return identity.checkPermission(new AuthPermission(\"{resource_name}\")).onItem()\n"
"                .transform(granted -> {\n"
"                    if (granted) {\n"
"                        return identity.getAttribute(\"permissions\");\n"
"                    }\n"
"                    throw new ForbiddenException();\n"
"                });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:357
#, fuzzy, no-wrap
msgid "Injecting the Authorization Client"
msgstr "認証クライアントのインジェクション"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:362
#, fuzzy
msgid "In some cases, you may want to use the https://www.keycloak.org/docs/latest/authorization_services/#_service_client_api[Keycloak Authorization Client Java API] to perform specific operations like managing resources and obtaining permissions directly from Keycloak. For that, you can inject a `AuthzClient` instance into your beans as follows:"
msgstr ""
"場合によっては、 link:https://www.keycloak.org/docs/latest/"
"authorization_services/#_service_client_api[Keycloak Authorization Client "
"Java API]を使用して、Keycloakから直接リソースの管理や権限の取得などの特定の操"
"作を行いたいこともあるでしょう。そのためには、以下のように `AuthzClient` "
"インスタンスをビーンズに注入します。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:369
#, no-wrap
msgid ""
"public class ProtectedResource {\n"
"    @Inject\n"
"    AuthzClient authzClient;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:372
#, fuzzy
msgid "Note: If you want to use the `AuthzClient` directly make sure to to set `quarkus.keycloak.policy-enforcer.enable=true` otherwise there is no Bean available for injection."
msgstr ""
"注： `AuthzClient` を直接使用する場合は、必ず `quarkus.keycloak.policy-"
"enforcer.enable=true` を設定してください。そうしないと、"
"インジェクションに使用できる Bean がありません。"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:373
#, no-wrap
msgid "Mapping Protected Resources"
msgstr "保護リソースのマッピング"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:376
msgid "By default, the extension is going to fetch resources on-demand from Keycloak where their `URI` are used to map the resources in your application that should be protected."
msgstr "デフォルトでは、エクステンションは Keycloak からオンデマンドでリソースを取得します。 `URI` は、保護されるべきアプリケーション内のリソースをマップするために使用されます。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:378
msgid "If you want to disable this behavior and fetch resources during startup, you can use the following configuration:"
msgstr "この動作を無効にして、起動時にリソースをフェッチしたい場合は、以下の設定を使用します。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:382
#, no-wrap
msgid "quarkus.keycloak.policy-enforcer.lazy-load-paths=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:385
msgid "Note that, depending on how many resources you have in Keycloak the time taken to fetch them may impact your application startup time."
msgstr "Keycloakにあるリソースの数によっては、それらを取得するのにかかる時間がアプリケーションの起動時間に影響することに注意してください。"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:386
#, fuzzy, no-wrap
msgid "More About Configuring Protected Resources"
msgstr "保護リソースのマッピング"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:389
msgid "In the default configuration, Keycloak is responsible for managing the roles and deciding who can access which routes."
msgstr "デフォルトの構成では、Keycloakはロールを管理し、誰がどのルートにアクセスできるかを決定します。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:391
#, fuzzy
msgid "To configure the protected routes using the `@RolesAllowed` annotation or the `application.properties` file, check the xref:security-openid-connect.adoc[Using OpenID Connect Adapter to Protect JAX-RS Applications] and xref:security-authorization.adoc[Security Authorization] guides. For more details, check the xref:security.adoc[Security guide]."
msgstr ""
"`@RolesAllowed` アノテーションまたは `application.properties` "
"ファイルを使用して保護されたルートを設定するには、ガイド link:security-"
"openid-connect.html[「Using OpenID Connect Adapter to Protect JAX-RS "
"Applications]」および link:security-authorization.html[「Security "
"Authorization]」を参照してください。詳細については、 link:security."
"html[「Security」のガイド]を確認してください。"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:392
#, fuzzy, no-wrap
msgid "Access to Public Resources"
msgstr "公共資源へのアクセス"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:395
#, fuzzy
msgid "If you'd like to access a public resource without `quarkus-keycloak-authorization` trying to apply its policies to it then you need to create a `permit` HTTP Policy configuration in `application.properties` as documented in the xref:security-authorization.adoc[Security Authorization] guide."
msgstr ""
"`quarkus-keycloak-authorization` "
"のポリシーを適用せずにパブリックリソースにアクセスしたい場合は、「 link"
":security-authorization.html[Security "
"Authorization]」ガイドで説明されているように、 `application.properties` で "
"`permit` HTTP Policy の設定を作成する必要があります。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:397
#, fuzzy
msgid "Disabling a policy check using a Keycloak Authorization Policy such as:"
msgstr "などのKeycloak Authorization Policyを使ったポリシーチェックを無効にします。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:402
#, no-wrap
msgid ""
"quarkus.keycloak.policy-enforcer.paths.1.path=/api/public\n"
"quarkus.keycloak.policy-enforcer.paths.1.enforcement-mode=DISABLED\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:405
#, fuzzy
msgid "is no longer required."
msgstr "はもう必要ありません。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:407
#, fuzzy
msgid "If you'd like to block an access to the public resource to anonymous users then you can create an enforcing Keycloak Authorization Policy:"
msgstr ""
"匿名ユーザのパブリックリソースへのアクセスをブロックしたい場合は、"
"強制力のあるKeycloak Authorization Policyを作成します。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:412
#, no-wrap
msgid ""
"quarkus.keycloak.policy-enforcer.paths.1.path=/api/public-enforcing\n"
"quarkus.keycloak.policy-enforcer.paths.1.enforcement-mode=ENFORCING\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:415
#, fuzzy
msgid "Note only the default tenant configuration applies when controlling an anonymous access to the public resource is required."
msgstr "なお、パブリックリソースへの匿名のアクセスを制御する必要がある場合は、デフォ"
"ルトのテナント設定のみが適用されます。"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:416
#, fuzzy, no-wrap
msgid "Multi-Tenancy"
msgstr "Multi-Tenancy"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:419
#, fuzzy
msgid "It is possible to configure multiple policy enforcer configurations, one per each tenant, similarly to how it can be done for xref:security-openid-connect-multitenancy.adoc[Multi-Tenant OpenID Connect Service Applications]."
msgstr ""
"link:security-openid-connect-multitenancy.html[マルチテナントOpenID Connectサ"
"ービスアプリケーション]の場合と同様に、各テナントごとに複数のポリシーエンフォ"
"ースメント構成を設定することができます。"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:421
msgid "For example:"
msgstr "例えば、以下のようになります。"

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:425
#, no-wrap
msgid "quarkus.keycloak.policy-enforcer.enable=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:430
#, no-wrap
msgid ""
"# Default Tenant\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:435
#, no-wrap
msgid ""
"quarkus.keycloak.policy-enforcer.enforcement-mode=PERMISSIVE\n"
"quarkus.keycloak.policy-enforcer.paths.1.name=Permission Resource\n"
"quarkus.keycloak.policy-enforcer.paths.1.path=/api/permission\n"
"quarkus.keycloak.policy-enforcer.paths.1.claim-information-point.claims.static-claim=static-claim\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:437
#, no-wrap
msgid "# Service Tenant\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:441
#, no-wrap
msgid ""
"quarkus.oidc.service-tenant.auth-server-url=${keycloak.url}/realms/quarkus\n"
"quarkus.oidc.service-tenant.client-id=quarkus-app\n"
"quarkus.oidc.service-tenant.credentials.secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:446
#, no-wrap
msgid ""
"quarkus.keycloak.service-tenant.policy-enforcer.enforcement-mode=PERMISSIVE\n"
"quarkus.keycloak.service-tenant.policy-enforcer.paths.1.name=Permission Resource Service\n"
"quarkus.keycloak.service-tenant.policy-enforcer.paths.1.path=/api/permission\n"
"quarkus.keycloak.service-tenant.policy-enforcer.paths.1.claim-information-point.claims.static-claim=static-claim\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:449
#, no-wrap
msgid "# WebApp Tenant\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:455
#, no-wrap
msgid ""
"quarkus.oidc.webapp-tenant.auth-server-url=${keycloak.url}/realms/quarkus\n"
"quarkus.oidc.webapp-tenant.client-id=quarkus-app\n"
"quarkus.oidc.webapp-tenant.credentials.secret=secret\n"
"quarkus.oidc.webapp-tenant.application-type=web-app\n"
"quarkus.oidc.webapp-tenant.roles.source=accesstoken\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-keycloak-authorization.adoc:460
#, no-wrap
msgid ""
"quarkus.keycloak.webapp-tenant.policy-enforcer.enforcement-mode=PERMISSIVE\n"
"quarkus.keycloak.webapp-tenant.policy-enforcer.paths.1.name=Permission Resource WebApp\n"
"quarkus.keycloak.webapp-tenant.policy-enforcer.paths.1.path=/api/permission\n"
"quarkus.keycloak.webapp-tenant.policy-enforcer.paths.1.claim-information-point.claims.static-claim=static-claim\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:462
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:465
msgid "The configuration is based on the official https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_filter[Keycloak Policy Enforcer Configuration]. If you are looking for more details about the different configuration options, please take a look at this documentation,"
msgstr "この設定は、 link:https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_filter[Keycloak Policy Enforcer] の公式設定に基づいています。異なる設定オプションについての詳細をお探しの方は、こちらのドキュメントをご覧ください。"

#. type: Title ==
#: upstream/_guides/security-keycloak-authorization.adoc:468
#, no-wrap
msgid "References"
msgstr "リファレンス"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:471
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak ドキュメント]"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:472
msgid "https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services Documentation]"
msgstr "link:https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak認可サービスのドキュメント]"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:473
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:474
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_guides/security-keycloak-authorization.adoc:474
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 15 minutes"
#~ msgstr "15分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Docker"
#~ msgstr "Docker"

#~ msgid "./mvnw package -Pnative\n"
#~ msgstr "./mvnw package -Pnative\n"

#~ msgid "Running in Developer Mode"
#~ msgstr "デベロッパーモードでの実行"

#~ msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
#~ msgstr "マイクロサービスを開発モードで実行するには、 `./mvnw clean compile quarkus:dev` を使用します。"

#~ msgid "See the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide for more information about `Bearer Token` authentication mechanism."
#~ msgstr "`Bearer Token` 認証メカニズムの詳細については、 link:security-openid-connect[Using OpenID Connect to Protect Service Applications]ガイドを参照してください。"
