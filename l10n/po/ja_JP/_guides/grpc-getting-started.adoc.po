# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2021-07-30 17:25+0900\n"
"Last-Translator: Nobuhiro Sue <nobuhiro.sue@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/grpc-getting-started.adoc:6
#, no-wrap
msgid "Getting Started with gRPC"
msgstr "gRPCを始める"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:12
msgid "This page explains how to start using gRPC in your Quarkus application.  While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr "このページでは、QuarkusアプリケーションでgRPCを使い始める方法を説明します。このページではMavenでの設定方法を説明していますが、Gradleを使用することも可能です。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:15
msgid "Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].  The default configuration is enough, but you can also select some extensions if you want."
msgstr "ここでは、 link:https://code.quarkus.io[Quarkusプロジェクトジェネレータ] から生成された通常のQuarkusプロジェクトを想像してみましょう。デフォルトの設定で十分ですが、必要に応じていくつかのエクステンションを選択することもできます。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:16
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:20
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:22
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:24
#, fuzzy
msgid "The solution is located in the `grpc-plain-text-quickstart` {quickstarts-tree-url}/grpc-plain-text-quickstart[directory]."
msgstr "このソリューションは `grpc-plain-text-quickstart` {quickstarts-tree-url}/grpc-plain-text-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:25
#, no-wrap
msgid "Configuring your project"
msgstr "プロジェクトの設定"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:28
msgid "Edit the `pom.xml` file to add the Quarkus gRPC extension dependency (just under `<dependencies>`):"
msgstr "`pom.xml` ファイルを編集して、Quarkus gRPCエクステンションの依存関係を追加します( `<dependencies>` のすぐ下)。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:35
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-grpc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:40
#, fuzzy
msgid "By default the `quarkus-grpc` extension relies on the reactive programming model.  In this guide we will follow a reactive approach.  Under the dependencies section of your `pom.xml` file, make sure you have the RESTEasy Reactive dependency:"
msgstr "デフォルトでは、 `quarkus-grpc` エクステンションはリアクティブなプログラミングモデルに依存していますが、本ガイドではリアクティブなアプローチを採用します。 `pom.xml` ファイルの dependencies セクションで、 `quarkus-resteasy` の依存関係を次のように置き換えます。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:47
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:52
msgid "Make sure you have `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.  If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal.  Please note that no additional task/goal is required for the Gradle plugin."
msgstr "`pom.xml` で `generate-code` ゴールの `quarkus-maven-plugin` が有効になっていることを確認してください。テスト用に異なる `proto` ファイルからコードを生成したい場合は、 `generate-code-tests` ゴールも追加してください。Gradleプラグインに追加のタスク/ ゴールは必要ないことに注意してください。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:74
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus-plugin.version}</version>\n"
"            <extensions>true</extensions>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:78
msgid "With this configuration, you can put your service and message definitions in the `src/main/proto` directory.  `quarkus-maven-plugin` will generate Java files from your `proto` files."
msgstr "この設定では、サービスとメッセージの定義を `src/main/proto` ディレクトリーに置くことができます。 `quarkus-maven-plugin` は、 `proto` ファイルから Java ファイルを生成します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:84
#, fuzzy
msgid "`quarkus-maven-plugin` retrieves a version of `protoc` (the protobuf compiler) from Maven repositories. The retrieved version matches your operating system and CPU architecture.  If this retrieved version does not work in your context, you can either force to use a different OS classifier with `-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` (e.g. `osx-x86_64`).  You can also download the suitable binary and specify the location via `-Dquarkus.grpc.protoc-path=/path/to/protoc`."
msgstr "`quarkus-maven-plugin` は、Maven リポジトリから `protoc` (protobuf コンパイラ)のバージョンを取得します。取得されたバージョンは、使用しているオペレーティングシステムとCPUアーキテクチャに適合します。この検索されたバージョンがあなたのコンテキストで動作しない場合は、 `-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` で別の OS クラシファイアを強制的に使用することができます (例: `osx-x86_64`)。また，適切なバイナリをダウンロードし， `-Dquarkus.grpc.protoc-path=/path/to/protoc` でその場所を指定することもできます．"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:87
msgid "Alternatively to using the `generate-code` goal of the `quarkus-maven-plugin`, you can use `protobuf-maven-plugin` to generate these files, more in <<Generating Java files from proto with protobuf-maven-plugin>>"
msgstr "`quarkus-maven-plugin` の `generate-code` ゴールを使用する代わりに、 `protobuf-maven-plugin` を使用してこれらのファイルを生成することができます。詳細は <<protoファイルからprotobuf-maven-pluginでJavaファイルを生成する>> を参照してください。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:90
msgid "Let's start with a simple _Hello_ service.  Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr "まずは簡単な _Hello_ サービスから始めてみましょう。 `src/main/proto/helloworld.proto` ファイルを以下の内容で作成します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:94
#, no-wrap
msgid "syntax = \"proto3\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:98
#, no-wrap
msgid ""
"option java_multiple_files = true;\n"
"option java_package = \"io.quarkus.example\";\n"
"option java_outer_classname = \"HelloWorldProto\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:100
#, no-wrap
msgid "package helloworld;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:106
#, no-wrap
msgid ""
"// The greeting service definition.\n"
"service Greeter {\n"
"    // Sends a greeting\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:111
#, no-wrap
msgid ""
"// The request message containing the user's name.\n"
"message HelloRequest {\n"
"    string name = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:116
#, no-wrap
msgid ""
"// The response message containing the greetings\n"
"message HelloReply {\n"
"    string message = 1;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:119
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr "この `proto` ファイルは、単一のメソッド ( `SayHello` ) と交換されたメッセージ (名前を含む `HelloRequest` と挨拶メッセージを含む `HelloReply` ) を持つシンプルなサービスインターフェースを定義しています。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:122
msgid "Before coding, we need to generate the classes used to implement and consume gRPC services.  In a terminal, run:"
msgstr "コーディングの前に、gRPCサービスを実装して消費するためのクラスを生成する必要があります。ターミナルで以下を実行します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:126
#, no-wrap
msgid "$ mvn compile\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:129
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr "生成されたら、 `target/generated-sources/grpc` ディレクトリーを見てみましょう。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:146
#, no-wrap
msgid ""
"target/generated-sources/grpc\n"
"└── io\n"
"    └── quarkus\n"
"        └── example\n"
"            ├── Greeter.java\n"
"            ├── GreeterBean.java\n"
"            ├── GreeterClient.java\n"
"            ├── GreeterGrpc.java\n"
"            ├── HelloReply.java\n"
"            ├── HelloReplyOrBuilder.java\n"
"            ├── HelloRequest.java\n"
"            ├── HelloRequestOrBuilder.java\n"
"            ├── HelloWorldProto.java\n"
"            └── MutinyGreeterGrpc.java\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:149
msgid "These are the classes we are going to use."
msgstr "これらは、これから使うクラスファイルです。"

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:151
#, no-wrap
msgid "`proto` files with imports"
msgstr "`proto` ファイルのインポート"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:155
msgid "Protocol Buffers specification provides a way to import `proto` files.  The Quarkus code generation mechanism lets you control the scope of dependencies to scan for possible imports by setting the `quarkus.generate-code.grpc.scan-for-imports` property to one of the following:"
msgstr "Protocol Buffers仕様では、 `proto` ファイルをインポートする方法を提供しています。Quarkusのコード生成メカニズムでは、 `quarkus.generate-code.grpc.scan-for-imports` プロパティーを以下のいずれかに設定することで、インポートの可能性をスキャンするための依存関係の範囲を制御することができます。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:157
msgid "`all` - scan all the dependencies"
msgstr "`all` - すべての依存関係をスキャンする"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:158
msgid "`none` - don't scan the dependencies, use only what is defined in the `src/main/proto` or `src/test/proto`"
msgstr "`none` - 依存関係をスキャンしないで、 `src/main/proto` または `src/test/proto` のみで定義されたものを利用する"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:159
msgid "`groupId1:artifactId1,groupId2:artifactId2` - scan only the dependencies with group id and artifact id in the list."
msgstr "`groupId1:artifactId1,groupId2:artifactId2` - リスト内のグループIDとアーティファクトIDを持つ依存関係のみをスキャンする"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:162
#, fuzzy
msgid "If not specified, the property is set to `com.google.protobuf:protobuf-java`.  To override it, set the `quarkus.generate-code.grpc.scan-for-imports` property in your application.properties to the desired value, e.g."
msgstr "指定されていない場合、このプロパティーは `com.google.protobuf:protobuf-java` に設定されます。これを上書きするには、pom.xml (または gradle.properties) の `quarkus.generate-code.grpc.scan-for-imports` プロパティーを希望の値に設定します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:166
#, no-wrap
msgid "quarkus.generate-code.grpc.scan-for-imports=all\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:168
#, fuzzy, no-wrap
msgid "`proto` files from dependencies"
msgstr "依存関係にあるgRPCクラス"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:170
#, fuzzy
msgid "In some cases, you may want to use `proto` files from a different project to generate the gRPC stubs. In this case:"
msgstr "場合によっては、別のプロジェクトの `proto` ファイルを使って gRPC スタブを生成したいこともあるでしょう。この場合は"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:172
#, fuzzy
msgid "Add a dependency on the artifact that contains the proto file to your project"
msgstr "protoファイルを含むアーティファクトへの依存関係をプロジェクトに追加する"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:173
#, fuzzy
msgid "In `application.properties`, specify the dependencies you want to scan for proto files."
msgstr "`application.properties` で、proto ファイルをスキャンする依存関係を指定します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:177
#, no-wrap
msgid "quarkus.generate-code.grpc.scan-for-proto=<groupId>:<artifactId>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:179
#, fuzzy
msgid "The value of the property may be `none`, which is the default value, or a comma separated list of `groupId:artifactId` coordinates."
msgstr "プロパティの値は、デフォルト値である `none` 、または `groupId:artifactId` 座標のコンマ区切りリストです。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:180
#, no-wrap
msgid "Implementing a gRPC service"
msgstr "gRPCサービスの実装"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:183
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr "生成されたクラスができたので、 _hello_ サービスを実装してみましょう。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:187
msgid "With Quarkus, implementing a service requires to implement the generated service interface based on Mutiny, a Reactive Programming API integrated in Quarkus, and expose it as a CDI bean.  Learn more about Mutiny on the xref:mutiny-primer.adoc[Mutiny guide].  The service class must be annotated with the `@io.quarkus.grpc.GrpcService` annotation."
msgstr "Quarkusは、Quarkusに統合されたReactive Programming APIであるMutinyを使用した追加モデルも提供しています。Mutinyの詳細については、 xref:mutiny-primer.adoc[Mutiny ガイド] を参照してください。サービスクラスは `@io.quarkus.grpc.GrpcService` アノテーションが付与されている必要があります。"

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:188
#, no-wrap
msgid "Implementing a service"
msgstr "サービスの実装"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:191
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr "以下の内容の `src/main/java/org/acme/HelloService.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:195
#: upstream/_guides/grpc-getting-started.adoc:223
#: upstream/_guides/grpc-getting-started.adoc:273
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:202
#, no-wrap
msgid ""
"import io.grpc.stub.StreamObserver;\n"
"import io.quarkus.example.Greeter;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcService;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:205
#, no-wrap
msgid ""
"@GrpcService <1>\n"
"public class HelloService implements Greeter {  <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:213
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HelloReply> sayHello(HelloRequest request) { <3>\n"
"        return Uni.createFrom().item(() ->\n"
"                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:215
#: upstream/_guides/grpc-getting-started.adoc:243
msgid "Expose your implementation as a bean."
msgstr "実装をBeanとして公開します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:216
msgid "Implement the generated service interface."
msgstr "生成されたサービスインターフェースを実装する。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:217
#: upstream/_guides/grpc-getting-started.adoc:245
msgid "Implement the methods defined in the service definition (here we have a single method)."
msgstr "サービス定義で定義されたメソッドを実装します(ここでは1つのメソッドを使用しています)。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:219
msgid "You can also use the default gRPC API instead of Mutiny:"
msgstr "また、Mutinyの代わりにデフォルトのgRPC APIを使用することもできます。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:229
#, no-wrap
msgid ""
"import io.grpc.stub.StreamObserver;\n"
"import io.quarkus.example.GreeterGrpc;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:232
#, no-wrap
msgid ""
"@GrpcService <1>\n"
"public class HelloService extends GreeterGrpc.GreeterImplBase { <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:241
#, no-wrap
msgid ""
"    @Override\n"
"    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) { <3>\n"
"        String name = request.getName();\n"
"        String message = \"Hello \" + name;\n"
"        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build()); <4>\n"
"        responseObserver.onCompleted(); <5>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:244
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr "`ImplBase` クラスを拡張します。生成されたクラスです。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:246
msgid "Build and send the response."
msgstr "レスポンスを構築して送信します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:247
msgid "Close the response."
msgstr "レスポンスを閉じます。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:252
msgid "If your service implementation logic is blocking (use blocking I/O for example), annotate your method with `@Blocking`.  The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr "サービスの実装ロジックがブロッキングである (例えば、ブロッキング I/O を使用する) 場合には、メソッドに `@Blocking` をアノテーションします。 `io.smallrye.common.annotation.Blocking` アノテーションは、I/O スレッド (イベントループ) の代わりにワーカースレッドでアノテーションされたメソッドを呼び出すようにフレームワークに指示します。"

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:253
#, no-wrap
msgid "The gRPC server"
msgstr "gRPCサーバー"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:257
msgid "The services are _served_ by a _server_.  Available services (_CDI beans_) are automatically registered and exposed."
msgstr "サービスは _サーバー_ によって _提供されます_ 。利用可能なサービス( _CDIBean_ )は自動的に登録され、公開されます。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:260
msgid "By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS) when running normally, and `localhost:9001` for tests."
msgstr "デフォルトでは、通常、サーバーは `localhost:9000` で公開されており、 _平文_ を使用します(そのため TLS は使用しません)。テストでは、 `localhost:9001` を使用します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:262
msgid "Run the application using: `mvn quarkus:dev`."
msgstr "`mvn quarkus:dev` を使用してアプリケーションを実行します。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:263
#, no-wrap
msgid "Consuming a gRPC service"
msgstr "gRPCサービスを消費する"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:267
msgid "In this section, we are going to consume the service we expose.  To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr "ここでは、公開しているサービスを消費することにします。簡単に言うと、同じアプリケーションからサービスを消費することになりますが、これは現実の世界では意味がありません。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:269
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr "既存の `org.acme.ExampleResource` クラスを開き、内容を編集してこのようになります。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:278
#, no-wrap
msgid ""
"import io.quarkus.example.Greeter;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcClient;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:283
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:286
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:289
#, no-wrap
msgid ""
"    @GrpcClient                               // <1>\n"
"    Greeter hello;                            // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:295
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:303
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{name}\")\n"
"    public Uni<String> hello(String name) {\n"
"        return hello.sayHello(HelloRequest.newBuilder().setName(name).build())\n"
"                .onItem().transform(helloReply -> helloReply.getMessage());  // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:305
msgid "Inject the service and configure its name. The name is used in the application configuration. If not specified then the field name is used instead: `hello` in this particular case."
msgstr "サービスをインジェクトし、その名前を設定します。この名前は、アプリケーションの設定で使用されます。指定しない場合、フィールド名が代わりに使用されます : このケースでは `hello` です。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:306
msgid "Use the generated service interface based on Mutiny API."
msgstr "Mutiny APIに基づいて生成されたサービスインターフェースを使用します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:307
msgid "Invoke the service."
msgstr "サービスを起動します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:310
msgid "We need to configure the application to indicate where the `hello` service is found.  In the `src/main/resources/application.properties` file, add the following property:"
msgstr "`hello` サービスがどこにあるかを示すようにアプリケーションを構成する必要があります。 `src/main/resources/application.properties` ファイルで、以下のプロパティーを追加します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:314
#, no-wrap
msgid "quarkus.grpc.clients.hello.host=localhost\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:317
msgid "`hello` is the name used in the `@GrpcClient` annotation."
msgstr "`hello` は `@GrpcClient` アノテーションで使用される名前です。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:318
msgid "`host` configures the service host (here it's localhost)."
msgstr "`host` はサービスホストを設定します (ここでは localhost)。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:320
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr "そして、ブラウザで http://localhost:8080/hello/quarkus を開くと、 `Hello quarkus` と表示されるはずです!"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:321
#, no-wrap
msgid "Packaging the application"
msgstr "アプリケーションのパッケージング"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:325
msgid "Like any other Quarkus applications, you can package it with: `mvn package`.  You can also package the application into a native executable with: `mvn package -Pnative`."
msgstr "他のQuarkusアプリケーションと同様に、 `mvn package` でパッケージングすることができます。また、 `mvn package -Pnative` でアプリケーションをネイティブ実行可能ファイルにパッケージングすることもできます。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:326
#, no-wrap
msgid "Generating Java files from proto with protobuf-maven-plugin"
msgstr "protoファイルからprotobuf-maven-pluginでJavaファイルを生成する"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:330
msgid "Alternatively to using Quarkus code generation to generate stubs for `proto` files, you can also use `protobuf-maven-plugin`."
msgstr "Quarkusのコード生成を使用して `proto` ファイルのスタブを生成する代わりに、 `protobuf-maven-plugin` を使うこともできます。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:332
msgid "To do it, first define the 2 following properties in the `<properties>` section:"
msgstr "そのためには、まず `<properties>` セクションで以下の 2 つのプロパティーを定義します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:337
#, no-wrap
msgid ""
"<grpc.version>{grpc-version}</grpc.version>\n"
"<protoc.version>{protoc-version}</protoc.version>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:340
msgid "They configure the gRPC version and the `protoc` version."
msgstr "これらは gRPC のバージョンと `protoc` のバージョンを設定します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:342
msgid "Then, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration."
msgstr "そして、 `build` セクションに `os-maven-plugin` のエクステンションと `protobuf-maven-plugin` の設定を追加します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:353
#, no-wrap
msgid ""
"<build>\n"
"    <extensions>\n"
"        <extension>\n"
"            <groupId>kr.motd.maven</groupId>\n"
"            <artifactId>os-maven-plugin</artifactId>\n"
"            <version>${os-maven-plugin-version}</version>\n"
"        </extension>\n"
"    </extensions>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:390
#, no-wrap
msgid ""
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>org.xolstice.maven.plugins</groupId>\n"
"            <artifactId>protobuf-maven-plugin</artifactId>      // <1>\n"
"            <version>${protobuf-maven-plugin-version}</version>\n"
"            <configuration>\n"
"                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}</protocArtifact> // <2>\n"
"                <pluginId>grpc-java</pluginId>\n"
"                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n"
"                <protocPlugins>\n"
"                    <protocPlugin>\n"
"                        <id>quarkus-grpc-protoc-plugin</id>\n"
"                        <groupId>io.quarkus</groupId>\n"
"                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n"
"                        <version>{quarkus-version}</version>\n"
"                        <mainClass>io.quarkus.grpc.protoc.plugin.MutinyGrpcGenerator</mainClass>\n"
"                    </protocPlugin>\n"
"                </protocPlugins>\n"
"            </configuration>\n"
"            <executions>\n"
"                <execution>\n"
"                    <id>compile</id>\n"
"                    <goals>\n"
"                        <goal>compile</goal>\n"
"                        <goal>compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"                <execution>\n"
"                    <id>test-compile</id>\n"
"                    <goals>\n"
"                        <goal>test-compile</goal>\n"
"                        <goal>test-compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:394
#, no-wrap
msgid ""
"        <!-- ... -->\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:396
msgid "The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files)."
msgstr "gRPCサービス定義( `proto` ファイル)からスタブクラスを生成する `protobuf-maven-plugin`"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:398
msgid "The class generation uses a tool named `protoc`, which is OS-specific.  That's why we use the `os-maven-plugin` to target the executable compatible with the operating system."
msgstr "クラス生成には、OS固有の `protoc` というツールを使用しています。そのため、OSと互換性のある実行ファイルを対象に `os-maven-plugin` を使用しています。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:400
msgid "This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience."
msgstr "この設定は、Quarkusの開発経験に合わせてMutinyを使用してデフォルトのgRPCクラスとクラスを生成するように、 `protobuf-maven-plugin` に指示します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:402
msgid "When using `protobuf-maven-plugin`, instead of the `quarkus-maven-plugin`, every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`)."
msgstr "`quarkus-maven-plugin` の代わりに `protobuf-maven-plugin` を利用する場合、 `proto` ファイルを更新するたびに、( `mvn compile` を使用して) クラスを再生成する必要があります。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:404
#, fuzzy, no-wrap
msgid "gRPC classes from dependencies"
msgstr "依存関係にあるgRPCクラス"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:408
#, fuzzy
msgid "When gRPC classes - the classes generated from `proto` files - are in a dependency of the application, then the dependency needs a Jandex index.  The `jandex-maven-plugin` can be used to create a Jandex index. More information on this topic can be found in the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr "gRPCクラス（ `proto` ファイルから生成されたクラス）がアプリケーションの依存関係にある場合、その依存関係にはJandexインデックスが必要です。 `jandex-maven-plugin` は、Jandexインデックスを作成するために使用できます。このトピックの詳細については、CDIガイドの「 link:cdi-reference.html#bean_discovery[Bean Discovery]」セクションを参照してください。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:428
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>org.jboss.jandex</groupId>\n"
"            <artifactId>jandex-maven-plugin</artifactId>\n"
"            <version>{jandex-maven-plugin-version}</version>\n"
"            <executions>\n"
"                <execution>\n"
"                <id>make-index</id>\n"
"                <goals>\n"
"                    <goal>jandex</goal>\n"
"                </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#~ msgid "With Quarkus, implementing a service requires to _extend_ the generated service base implementation and expose it as a `@Singleton` CDI bean."
#~ msgstr "Quarkusでは、サービスを実装するには、生成されたサービスベースの実装を _extend_ し 、 `@Singleton` CDI Beanとして公開する必要があります。"

#~ msgid "Don't use `@ApplicationScoped` as the gRPC service implementation cannot be proxied."
#~ msgstr "gRPCサービスの実装はプロキシーできないので、 `@ApplicationScoped` を使用しないでください。"

#~ msgid "The main differences are the following:"
#~ msgstr "主な違いは以下の通りです。"

#~ msgid "it extends the `ImplBase` from `MutinyGreeterGrpc` instead of `GreeterGrpc`"
#~ msgstr "`GreeterGrpc` の代わりに `MutinyGreeterGrpc` から `ImplBase` を extend します。"

#~ msgid "the signature of the method is using Mutiny types"
#~ msgstr "メソッドのシグネチャは Mutiny 型を使用しています。"

#~ msgid "Use the _blocking_ stub (also a generated class)."
#~ msgstr "_ブロッキング_ スタブ(生成されたクラスでもあります)を使用します。"
