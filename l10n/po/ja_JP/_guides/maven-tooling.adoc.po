# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2022-02-05 10:35+0900\n"
"Last-Translator: Nobuhiro Sue <nobuhiro.sue@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/maven-tooling.adoc:6
#, no-wrap
msgid "Building applications with Maven"
msgstr "Mavenによるアプリケーションの構築"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:12
#, no-wrap
msgid "Creating a new project"
msgstr "新規プロジェクトの作成"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:15
msgid "You can scaffold a new Maven project with:"
msgstr "次のように新しいMavenプロジェクトの枠組を生成することができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:23
msgid "If you are using the CLI, you can get the list of available options with:"
msgstr "CLIを使用している場合、次のように利用可能なオプションのリストを取得することが可能です。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:27
#, no-wrap
msgid "quarkus create app --help\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:30
msgid "If you are using the Maven command, the following table lists the attributes you can pass to the `create` command:"
msgstr "Maven コマンドを使用している場合、次の表が `create` コマンドに渡すことができる属性の一覧です。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:34
#, no-wrap
msgid "Attribute"
msgstr "属性"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:35
#: upstream/_guides/maven-tooling.adoc:885
#, no-wrap
msgid "Default Value"
msgstr "デフォルト値"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:37
#: upstream/_guides/maven-tooling.adoc:887
#, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:38
#, no-wrap
msgid "`projectGroupId`"
msgstr "`projectGroupId`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:39
#, no-wrap
msgid "`org.acme.sample`"
msgstr "`org.acme.sample`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:41
#, no-wrap
msgid "The group id of the created project"
msgstr "作成されたプロジェクトのグループID"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:42
#, no-wrap
msgid "`projectArtifactId`"
msgstr "`projectArtifactId`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:43
#, no-wrap
msgid "_mandatory_"
msgstr "_必須_"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:45
#, no-wrap
msgid "The artifact id of the created project. Not passing it triggers the interactive mode."
msgstr "作成されたプロジェクトのアーティファクトID。これを渡さないと、インタラクティブモードがトリガされます。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:46
#, no-wrap
msgid "`projectVersion`"
msgstr "`projectVersion`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:47
#, no-wrap
msgid "`1.0.0-SNAPSHOT`"
msgstr "`1.0.0-SNAPSHOT`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:49
#, no-wrap
msgid "The version of the created project"
msgstr "作成されたプロジェクトのバージョン"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:50
#, no-wrap
msgid "`platformGroupId`"
msgstr "`platformGroupId`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:51
#, no-wrap
msgid "`io.quarkus.platform`"
msgstr "`io.quarkus.platform`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:53
#, no-wrap
msgid "The group id of the target platform."
msgstr "ターゲットプラットフォームのグループID"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:54
#, no-wrap
msgid "`platformArtifactId`"
msgstr "`platformArtifactId`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:55
#, no-wrap
msgid "`quarkus-bom`"
msgstr "`quarkus-bom`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:57
#, no-wrap
msgid "The artifact id of the target platform BOM."
msgstr "ターゲットプラットフォームBOMのアーティファクトID"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:58
#, no-wrap
msgid "`platformVersion`"
msgstr "`platformVersion`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:59
#, no-wrap
msgid "The version currently recommended by the https://quarkus.io/guides/extension-registry-user[Quarkus Extension Registry]"
msgstr "現在、 link:https://quarkus.io/guides/extension-registry-user[Quarkus Extension Registry]で推奨されているバージョン"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:61
#, no-wrap
msgid "The version of the platform you want the project to use. It can also accept a version range, in which case the latest from the specified range will be used."
msgstr "プロジェクトで使用したいプラットフォームのバージョンを指定します。バージョンの範囲を指定することもでき、その場合は指定した範囲の最新のものが使用されます。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:62
#, no-wrap
msgid "`className`"
msgstr "`className`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:63
#, no-wrap
msgid "_Not created if omitted_"
msgstr "_省略した場合は作成されない_"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:65
#, no-wrap
msgid "The fully qualified name of the generated resource"
msgstr "生成されたリソースの完全修飾名"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:66
#, no-wrap
msgid "`path`"
msgstr "`path`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:67
#, no-wrap
msgid "`/hello`"
msgstr "`/hello`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:69
#, no-wrap
msgid "The resource path, only relevant if `className` is set."
msgstr "リソースパス、 `className` が設定されている場合のみ関連します。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:70
#, no-wrap
msgid "`extensions`"
msgstr "`extensions`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:71
#, no-wrap
msgid "_[]_"
msgstr "_[]_"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:73
#, no-wrap
msgid "The list of extensions to add to the project (comma-separated)"
msgstr "プロジェクトに追加するエクステンションのリスト (カンマ区切り)"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:74
#, no-wrap
msgid "`quarkusRegistryClient`"
msgstr "`quarkusRegistryClient`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:75
#, no-wrap
msgid "`true`"
msgstr "`true`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:77
#, no-wrap
msgid "Whether or not Quarkus should use the online registry to resolve extension catalogs. If this is set to false, the extension catalog will be narrowed to the defined (or default) platform BOM."
msgstr "Quarkusがオンラインレジストリを使用してエクステンションカタログを解決するかどうかを指定します。これをfalseに設定すると、エクステンションカタログは定義された（またはデフォルトの）プラットフォームBOMに絞り込まれます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:80
msgid "By default, the command will target the `io.quarkus.platform:quarkus-bom:{quarkus-version}` platform release (unless the coordinates of the desired platform release have been specified)."
msgstr "デフォルトでは、コマンドは `io.quarkus.platform:quarkus-bom:{quarkus-version}` のプラットフォーム・リリースをターゲットにします（希望するプラットフォーム・リリースの座標が指定されていない場合）。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:83
msgid "The project is generated in a directory named after the passed artifactId.  If the directory already exists, the generation fails."
msgstr "プロジェクトは、渡された artifactId にちなんだ名前のディレクトリーに生成されます。ディレクトリーが既に存在する場合は、生成に失敗します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:86
msgid "A pair of Dockerfiles for native and jvm mode are also generated in `src/main/docker`.  Instructions to build the image and run the container are written in those Dockerfiles."
msgstr "ネイティブモードと jvm モード用の Dockerfile も `src/main/docker`  に生成されています。イメージのビルドとコンテナーの実行の指示は、これらの Dockerfile に書かれています。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:87
#, no-wrap
msgid "Dealing with extensions"
msgstr "エクステンションの取り扱い"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:90
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr "Quarkusプロジェクトの内部から、利用可能なエクステンションのリストを取得することができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:94
msgid "You can add an extension using:"
msgstr "以下を使ってエクステンションを追加できます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:99
msgid "Extensions are passed using a comma-separated list."
msgstr "エクステンションは、カンマ区切りのリストを使用して渡されます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:104
msgid "The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.  But you can pass a partial name and Quarkus will do its best to find the right extension.  For example, `agroal`, `Agroal` or `agro` will expand to `io.quarkus:quarkus-agroal`.  If no extension is found or if more than one extensions match, you will see a red check mark ❌ in the command result."
msgstr "`io.quarkus:quarkus-agroal` エクステンション名は、エクステンションのGAV名です。しかし、部分的な名前を渡すことができ、Quarkusは適切なエクステンションを見つけるために最善を尽くします。例えば、 `agroal`  、 `Agroal`  、 `agro`  は `io.quarkus:quarkus-agroal`  に展開されます。エクステンションが見つからなかったり、複数のエクステンションが一致した場合は、コマンドの結果に赤いチェックマーク❌が表示されます。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:117
#, no-wrap
msgid ""
"$ ./mvnw quarkus:add-extensions -Dextensions=jdbc,agroal,non-exist-ent\n"
"[...]\n"
"❌ Multiple extensions matching 'jdbc'\n"
"     * io.quarkus:quarkus-jdbc-h2\n"
"     * io.quarkus:quarkus-jdbc-mariadb\n"
"     * io.quarkus:quarkus-jdbc-postgresql\n"
"     Be more specific e.g using the exact name or the full gav.\n"
"✅ Adding extension io.quarkus:quarkus-agroal\n"
"❌ Cannot find a dependency matching 'non-exist-ent', maybe a typo?\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:120
msgid "You can install all extensions which match a globbing pattern :"
msgstr "グロブパターンに一致するすべてのエクステンションをインストールすることができます。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:125
#, no-wrap
msgid "Development mode"
msgstr "開発モード"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:129
msgid "Quarkus comes with a built-in development mode.  Run your application with:"
msgstr "Quarkusには開発モードが組み込まれています。以下でアプリケーションを実行します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:135
msgid "You can then update the application sources, resources and configurations.  The changes are automatically reflected in your running application.  This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr "その後、アプリケーションのソース、リソース、および設定を更新することができます。変更は実行中のアプリケーションに自動的に反映されます。変更がすぐに反映されるので、UIやデータベースにまたがった開発をするのに最適です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:143
msgid "Dev mode enables hot deployment with background compilation, which means that when you modify your Java files or your resource files and refresh your browser these changes will automatically take effect.  This works too for resource files like the configuration property file.  The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the Java files are compiled, and the application is redeployed, then your request is serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr "開発モードでは、バックグラウンド・コンパイルによるホット・デプロイメントが可能です。つまり、Javaファイルやリソース・ファイルを変更してブラウザを更新すると、その変更が自動的に反映されます。これは、Javaファイルやリソースファイルを変更してブラウザを更新すると、その変更が自動的に反映されることを意味します。ブラウザを更新すると、ワークスペースのスキャンが行われ、変更が検出されると、Javaファイルがコンパイルされ、アプリケーションが再デプロイされ、再デプロイされたアプリケーションによってリクエストが処理されます。コンパイルやデプロイに問題があった場合は、エラーページでお知らせします。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:145
msgid "Hit `CTRL+C` to stop the application."
msgstr "`CTRL+C`  を叩いてアプリケーションを停止させます。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:149
msgid "By default, `quarkus:dev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr "デフォルトでは、 `quarkus:dev` はデバッグホストを `localhost` に設定します (セキュリティー上の理由から)。これを変更する必要がある場合、例えばすべてのホストでデバッグを有効にしたい場合は、 `-DdebugHost` オプションを次のように使用します。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:155
#, no-wrap
msgid "Remote Development Mode"
msgstr "リモート開発モード"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:159
msgid "It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)  and have changes made to your local files become immediately visible."
msgstr "開発モードをリモートで使用することができるので、コンテナー環境(OpenShiftなど)でQuarkusを実行して、ローカルファイルに加えられた変更をすぐに確認できるようにすることができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:161
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr "これにより、実際にアプリを実行するのと同じ環境で、同じサービスにアクセスしながら開発することができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:163
msgid "Do not use this in production. This should only be used in a development environment. You should not run production application in dev mode."
msgstr "本番環境では使用しないでください。開発環境でのみ使用してください。本番環境のアプリケーションを開発モードで実行してはいけません。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:165
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.properties`:"
msgstr "これを行うには、 `mutable-jar` 形式を使用して、ミュータブルアプリケーションをビルドする必要があります。 `application.xml` で以下のプロパティーを設定してください。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:171
#, no-wrap
msgid ""
"quarkus.package.type=mutable-jar <1>\n"
"quarkus.live-reload.password=changeit <2>\n"
"quarkus.live-reload.url=http://my.cluster.host.com:8080 <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:175
msgid "This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus, so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application, however they can also be started in dev mode."
msgstr "これは、QuarkusにMutable-jar形式を使用するように指示します。ミュータブルアプリケーションには、Quarkusのデプロイメント時間の部分も含まれているため、より多くのディスクスペースを占有します。普通に実行した場合は、イミュータブルアプリケーションと同じ速度で起動し、同じメモリーを使用しますが、開発モードで起動することもできます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:176
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr "リモート側とローカル側の通信を安全に保つためのパスワードです。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:178
msgid "The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr "アプリが開発モードで実行されるURL。これはローカル側でのみ必要なので、プロパティー ファイルから除外して、コマンド ラインでシステム プロパティーとして指定するとよいでしょう。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:180
msgid "The `mutable-jar` is then built in the same way that a regular Quarkus jar is built, i.e. by issuing:"
msgstr "`mutable-jar` は、通常のQuarkus jarをビルドするのと同じ方法で発行することでビルドされます。つまり以下のように発行できます:"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:185
msgid "Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are on bare metal you can set it via the `export QUARKUS_LAUNCH_DEVMODE=true` command and then run the application with the proper `java -jar ...` command to run the application."
msgstr "リモートホストでQuarkusを起動する前に、環境変数 `QUARKUS_LAUNCH_DEVMODE=true`  を設定します。ベアメタルを使用している場合は、 `export QUARKUS_LAUNCH_DEVMODE=true`  コマンドで設定し、適切に `java -jar ...` コマンドでアプリケーションを実行します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:188
msgid "If you plan on running the application via Docker, then you'll need to add `-e QUARKUS_LAUNCH_DEVMODE=true` to the `docker run` command.  When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`."
msgstr "アプリケーションをdocker経由で実行する場合は、 `docker run` コマンドに `-e QUARKUS_LAUNCH_DEVMODE=true` を追加してイメージを起動します。アプリケーションが起動すると、ログに次のような行が表示されるはずです: `Profile dev activated. Live Coding activated` ."

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:192
msgid "The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner jar, do not attempt to run normal devmode."
msgstr "リモート側にはMavenなどの開発ツールを入れる必要はありません。新しいQuarkusアプリケーションで生成される通常の `fast-jar`  Dockerfileがあれば大丈夫です。ベアメタルでQuarkus runner jarを起動している場合は、通常のdevmodeを実行しようとしないでください。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:194
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr "ここで、 `remote-dev`  コマンドを使用して、ローカルエージェントをリモートホストに接続する必要があります。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:198
#, no-wrap
msgid "./mvnw quarkus:remote-dev -Dquarkus.live-reload.url=http://my-remote-host:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:203
msgid "Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote app. This is done via a HTTP based long polling transport, that will synchronize your local workspace and the remote application via HTTP calls."
msgstr "これで、ブラウザを更新するたびに、ローカルで行った変更がリモート アプリに即座に表示されるようになりました。これは、HTTPベースのロングポーリングトランスポートを介して行われ、HTTPコールを介してローカルのワークスペースとリモートアプリケーションを同期させます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:207
msgid "If you do not want to use the HTTP feature then you can simply run the `remote-dev` command without specifying the URL.  In this mode the command will continuously rebuild the local application, so you can use an external tool such as odo or rsync to sync to the remote application."
msgstr "HTTP 機能を使用したくない場合は、URL を指定せずに `remote-dev`  コマンドを実行するだけです。このモードでは、コマンドはローカルアプリケーションを継続的に再構築するので、 odo や rsync のような外部ツールを使ってリモートアプリケーションに同期することができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:209
msgid "All the config options are shown below:"
msgstr "全ての設定オプションは以下の通りです:"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:216
msgid "It is recommended you use SSL when using remote dev mode, however even if you are using an unencrypted connection your password is never sent directly over the wire. For the initial connection request the password is hashed with the initial state data, and subsequent requests hash it with a random session id generated by the server and any body contents for POST requests, and the path for DELETE requests, as well as an incrementing counter to prevent replay attacks."
msgstr "リモート開発モードを使用する際には SSL を使用することを推奨しますが、たとえ暗号化されていない接続を使用していても、パスワードが直接ネットワーク上で送信されることはありません。最初の接続リクエストでは、パスワードは初期状態のデータでハッシュ化され、それ以降のリクエストでは、サーバーによって生成されたランダムなセッションIDと、POSTリクエストのためのボディコンテンツ、DELETEリクエストのためのパス、そしてリプレイ攻撃を防ぐためのインクリメントカウンタでハッシュ化されます。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:217
#, no-wrap
msgid "Configuring Development Mode"
msgstr "開発モードの設定"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:221
msgid "By default, the Maven plugin picks up compiler flags to pass to `javac` from `maven-compiler-plugin`."
msgstr "デフォルトでは、Maven プラグインは `maven-compiler-plugin`  から `javac`  に渡すコンパイラフラグをピックアップします。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:228
msgid "If you need to customize the compiler flags used in development mode, add a `configuration` section to the `plugin` block and set the `compilerArgs` property just as you would when configuring `maven-compiler-plugin`.  You can also set `source`, `target`, and `jvmArgs`.  For example, to pass `--enable-preview` to both the JVM and `javac`:"
msgstr "開発モードで使用するコンパイラ・フラグをカスタマイズする必要がある場合は、 `plugin`  ブロックに `configuration`  セクションを追加し、 `maven-compiler-plugin`  を設定するときと同じように `compilerArgs`  プロパティーを設定します。また、 `source`  、 `target`  、および `jvmArgs`  を設定することもできます。例えば、 `--enable-preview`  を JVM と `javac`  の両方に渡すには、 を設定します。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:235
#, no-wrap
msgid ""
"<plugin>\n"
"  <groupId>${quarkus.platform.group-id}</groupId>\n"
"  <artifactId>quarkus-maven-plugin</artifactId>\n"
"  <version>${quarkus.platform.version}</version>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:244
#, no-wrap
msgid ""
"  <configuration>\n"
"    <source>${maven.compiler.source}</source>\n"
"    <target>${maven.compiler.target}</target>\n"
"    <compilerArgs>\n"
"      <arg>--enable-preview</arg>\n"
"    </compilerArgs>\n"
"    <jvmArgs>--enable-preview</jvmArgs>\n"
"  </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:247
#, no-wrap
msgid ""
"  ...\n"
"</plugin>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:250
#, no-wrap
msgid "Debugging"
msgstr "デバッグ"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:253
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr "開発モードでは、Quarkusはデフォルトでデバッグモードを有効にして起動し、JVMをサスペンドせずにポート `5005`  をリッスンします。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:255
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr "この動作は、 `debug` システム・プロパティーに以下の値のいずれかを与えることで変更できます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:257
msgid "`false` - the JVM will start with debug mode disabled"
msgstr "`false`  - JVMはデバッグモードを無効にして起動します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:258
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr "`true`  - JVM はデバッグモードで起動され、 `5005`ポートをリッスンします。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:259
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr "`client`  - JVM はクライアントモードで起動し、 `localhost:5005`に接続を試みます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:260
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr "`{port}` - JVM はデバッグモードで起動されています。 `{port}`"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:262
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr "追加のシステム・プロパティー `suspend` は、デバッグ・モードで起動されたときに JVM をサスペンドするために使用できます。 `suspend` は以下の値をサポートしています。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:264
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr "`y` または `true` - デバッグモードの JVM 起動が中断されます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:265
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr "`n` または `false` - デバッグモードの JVM をサスペンドせずに起動します。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:270
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using:"
msgstr "また、JVMをサスペンドした状態で、デバッグモードでQuarkusアプリケーションを実行することもできます。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:276
msgid "Then, attach your debugger to `localhost:5005`."
msgstr "次に、デバッガーを `localhost:5005`  にアタッチします。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:278
#, no-wrap
msgid "Import in your IDE"
msgstr "IDEへのインポート"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:282
msgid "Once you have a <<project-creation, project generated>>, you can import it in your favorite IDE.  The only requirement is the ability to import a Maven project."
msgstr "<<project-creation, プロジェクトを生成したら>>、お気に入りのIDEでインポートすることができます。唯一の要件は、Mavenプロジェクトをインポートできることです。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:284
#, no-wrap
msgid "**Eclipse**\n"
msgstr "**Eclipse**\n"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:289
msgid "In Eclipse, click on: `File -> Import`.  In the wizard, select: `Maven -> Existing Maven Project`.  On the next screen, select the root location of the project.  The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr "Eclipse で、 `File → Import`  をクリックします。ウィザードで、 `Maven → Existing Maven Project`  を選択します。次の画面で、プロジェクトのルートの場所を選択します。次の画面では、見つかったモジュールのリストが表示されるので、生成されたプロジェクトを選択して `Finish` をクリックします。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:291
msgid "In a separated terminal, run:"
msgstr "別のターミナルで、以下を実行します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:295
msgid "and enjoy a highly productive environment."
msgstr "では、生産性の高い環境を楽しんで下さい。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:297
#, no-wrap
msgid "**IntelliJ**\n"
msgstr "**IntelliJ**\n"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:299
msgid "In IntelliJ:"
msgstr "IntelliJの場合:"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:301
msgid "From inside IntelliJ select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr "IntelliJの内部から `File → New → Project From Existing Sources…​`  を選択するか、ウェルカム・ダイアログであれば `Import project`  を選択してください。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:302
#: upstream/_guides/maven-tooling.adoc:318
msgid "Select the project root"
msgstr "プロジェクトのルートを選択します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:303
msgid "Select `Import project from external model` and `Maven`"
msgstr "`Import project from external model`  を選択して `Maven`を選択"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:304
msgid "Next a few times (review the different options if needed)"
msgstr "Next を数回(必要に応じてオプションを確認)"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:305
msgid "On the last screen click on Finish"
msgstr "最後の画面でFinishをクリックします。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:307
msgid "In a separated terminal or in the embedded terminal, run:"
msgstr "別のターミナルや組込ターミナルで、以下を実行します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:311
#: upstream/_guides/maven-tooling.adoc:325
msgid "Enjoy!"
msgstr "楽しんで!"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:313
#, no-wrap
msgid "**Apache NetBeans**\n"
msgstr "**Apache NetBeans**\n"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:315
msgid "In NetBeans:"
msgstr "NetBeansの場合:"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:317
msgid "Select `File -> Open Project`"
msgstr "`File → Open Project` を選択"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:319
msgid "Click on `Open Project`"
msgstr "`Open Project` をクリックしてください。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:321
msgid "In a separated terminal or the embedded terminal, go to the project root and run:"
msgstr "別のターミナルまたは組込ターミナルで、プロジェクトのルートに移動して次を実行します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:327
#, no-wrap
msgid "**Visual Studio Code**\n"
msgstr "**Visual Studio Code**\n"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:329
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Maven project."
msgstr "VS Codeでプロジェクトディレクトリーを開きます。Java Extension Pack(Java拡張のセットをグループ化したもの)をインストールしている場合、プロジェクトはMavenプロジェクトとしてロードされます。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:330
#, no-wrap
msgid "Logging Quarkus application build classpath tree"
msgstr "Quarkus アプリケーションのビルドクラスパスツリーのロギング"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:335
msgid "Usually, dependencies of an application (which is a Maven project) could be displayed using `mvn dependency:tree` command. In case of a Quarkus application, however, this command will list only the runtime dependencies of the application.  Given that the Quarkus build process adds deployment dependencies of the extensions used in the application to the original application classpath, it could be useful to know which dependencies and which versions end up on the build classpath.  Luckily, the `quarkus` Maven plugin includes the `dependency-tree` goal which displays the build dependency tree for the application."
msgstr "通常、アプリケーション(Mavenプロジェクト)の依存関係は、 `mvn dependency:tree`  コマンドを使用して表示することができます。しかし、Quarkusアプリケーションの場合、このコマンドはアプリケーションの実行時の依存関係のみを表示します。Quarkusのビルドプロセスは、アプリケーションで使用されているエクステンションのデプロイメント依存関係を元のアプリケーションのクラスパスに追加するので、どの依存関係とどのバージョンがビルドクラスパスで終わるかを知ることは便利です。幸いにも、 `quarkus-bootstrap`  Mavenプラグインには、アプリケーションのビルド依存関係ツリーを表示する `build-tree`  ゴールが含まれています。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:337
msgid "Executing `./mvnw quarkus:dependency-tree` on your project should result in an output similar to:"
msgstr "プロジェクトで `./mvnw quarkus:dependency-tree` を実行すると、次のような出力が得られるはずです。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:349
#, no-wrap
msgid ""
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:dependency-tree (default-cli) @ getting-started ---\n"
"[INFO] org.acme:getting-started:jar:1.0.0-SNAPSHOT\n"
"[INFO] └─ io.quarkus:quarkus-resteasy-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    ├─ io.quarkus:quarkus-resteasy-server-common-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    │  ├─ io.quarkus:quarkus-core-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    │  │  ├─ commons-beanutils:commons-beanutils:jar:1.9.3 (compile)\n"
"[INFO]    │  │  │  ├─ commons-logging:commons-logging:jar:1.2 (compile)\n"
"[INFO]    │  │  │  └─ commons-collections:commons-collections:jar:3.2.2 (compile)\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:352
#, fuzzy
msgid "The goal accepts the following optional parameters:"
msgstr "ゴールには、次のようなオプションのパラメーターを入力できます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:354
#, fuzzy
msgid "`mode` - the default value is `prod`, i.e. the production build dependency tree. Alternatively, it accepts values `test` to display the test dependency tree and `dev` to display the dev mode dependency tree;"
msgstr ""
"`mode` - デフォルト値は `prod` "
"で、これはプロダクションビルドの依存関係ツリーを意味します。また、 `test` "
"はテスト版の依存関係ツリーを、 `dev` は開発版の依存関係ツリーを表示します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:355
#, fuzzy
msgid "`outputFile` - specifies the file to persist the dependency tree to;"
msgstr "`outputFile` - ディペンデンシーツリーを永続化するファイルを指定します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:356
#, fuzzy
msgid "`appendOutput` - the default value is `false`, indicates whether the output to the command should be appended to the file specified with the `outputFile` parameter or it should be overriden."
msgstr ""
"`appendOutput` - デフォルト値は `false` で、コマンドの出力を `outputFile` "
"パラメータで指定したファイルに追加するか、上書きするかを示します。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:357
#, fuzzy, no-wrap
msgid "Downloading Maven artifact dependencies for offline development and testing"
msgstr "オフラインでの開発・テストのためのMavenアーティファクトの依存関係のダウンロー"
"ド"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:362
#, fuzzy
msgid "Quarkus extension dependencies are divided into the runtime extension dependencies that end up on the application runtime classpath and the deployment (or build time) extension dependencies that are resolved by Quarkus only at application build time to create the build classpath. Application developers are expected to express dependencies only on the runtime artifacts of Quarkus extensions. As a consequence, the deployment extension dependencies aren't visible to Maven plugins that aren't aware of the Quarkus extension dependency model, such as the `maven-dependency-plugin`, `go-offline-maven-plugin`, etc. That means those plugins can not be used to pre-download all the application dependencies to be able to build and test the application later in offline mode."
msgstr ""
"Quarkusのエクステンションの依存性は、アプリケーションのランタイムクラスパス上"
"で終了するランタイムエクステンションの依存性と、アプリケーションのビルド時にQ"
"uarkusによって解決されてビルドクラスパスを作成する配置（またはビルド時）エク"
"ステンションの依存性に分けられます。アプリケーション開発者は、Quarkusのエクス"
"テンションのランタイムアーティファクトにのみ依存性を表現することが期待されま"
"す。その結果、 `maven-dependency-plugin` 、 `go-offline-maven-plugin` など、Q"
"uarkus拡張の依存性モデルを認識していないMavenプラグインには、展開拡張の依存性"
"が表示されません。つまり、これらのプラグインは、後でオフラインモードでアプリ"
"ケーションを構築してテストできるように、すべてのアプリケーションの依存関係を"
"事前にダウンロードするためには使用できません。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:364
#, fuzzy
msgid "To enable the use-case of building and testing a Quarkus application offline, the `quarkus-maven-plugin` includes the `go-offline` goal that could be called from the command line like this:"
msgstr ""
"オフラインでQuarkusアプリケーションを構築してテストするというユースケースを可"
"能にするために、 `quarkus-maven-plugin` には `go-offline` というゴールが含ま"
"れており、これはコマンドラインから次のように呼び出すことができます。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:368
#, no-wrap
msgid "./mvnw quarkus:go-offline\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:371
#, fuzzy
msgid "This goal will resolve all the runtime, build time, test and dev mode dependencies of the application downloading them to the configured local Maven repository."
msgstr ""
"このゴールは、アプリケーションのランタイム、ビルドタイム、テスト、および開発"
"モードの依存関係をすべて解決し、設定されたローカルMavenリポジトリにダウンロー"
"ドします。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:372
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:375
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr "ネイティブ実行可能ファイルにより、Quarkusアプリケーションはコンテナーやサーバーレスのワークロードに最適です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:378
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to GraalVM version {graalvm-version} (Make sure to use a Java 11 version of GraalVM).  Verify that your `pom.xml` has the proper `native` profile (see <<build-tool-maven>>)."
msgstr "`GRAALVM_HOME`  を設定し、GraalVM バージョン {graalvm-version} を指していることを確認してください。(GraalVMのJava 11バージョンを使用していることを確認してください)。あなたの `pom.xml`  が適切な `native`  プロファイルを持っていることを確認してください( link:#build-tool-maven[[build-tool-maven]を]参照してください)。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:380
msgid "Create a native executable using:"
msgstr "次のようにネイティブ実行可能ファイルの作成"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:384
#, fuzzy
msgid "A native executable will be present in `target/`."
msgstr "ネイティブ実行可能ファイルは、 `target/` に存在します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:386
msgid "To run Integration Tests on the native executable, make sure to have the proper Maven plugin configured (see <<build-tool-maven>>) and launch the `verify` goal."
msgstr "ネイティブ実行可能ファイルで統合テストを実行するには、適切なMavenプラグインが設定されていることを確認し( link:#build-tool-maven[[build-tools-maven]を]参照)、 `verify`  ゴールを起動します。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:414
#, no-wrap
msgid ""
"$ ./mvnw verify -Pnative\n"
"...\n"
"[quarkus-quickstart-runner:50955]     universe:     391.96 ms\n"
"[quarkus-quickstart-runner:50955]      (parse):     904.37 ms\n"
"[quarkus-quickstart-runner:50955]     (inline):   1,143.32 ms\n"
"[quarkus-quickstart-runner:50955]    (compile):   6,228.44 ms\n"
"[quarkus-quickstart-runner:50955]      compile:   9,130.58 ms\n"
"[quarkus-quickstart-runner:50955]        image:   2,101.42 ms\n"
"[quarkus-quickstart-runner:50955]        write:     803.18 ms\n"
"[quarkus-quickstart-runner:50955]      [total]:  33,520.15 ms\n"
"[INFO]\n"
"[INFO] --- maven-failsafe-plugin:2.22.0:integration-test (default) @ quarkus-quickstart-native ---\n"
"[INFO]\n"
"[INFO] -------------------------------------------------------\n"
"[INFO]  T E S T S\n"
"[INFO] -------------------------------------------------------\n"
"[INFO] Running org.acme.quickstart.GreetingResourceIT\n"
"Executing [/Users/starksm/Dev/JBoss/Quarkus/starksm64-quarkus-quickstarts/getting-started-native/target/quarkus-quickstart-runner, -Dquarkus.http.port=8081, -Dtest.url=http://localhost:8081, -Dquarkus.log.file.path=target/quarkus.log]\n"
"2019-02-28 16:52:42,020 INFO  [io.quarkus] (main) Quarkus started in 0.007s. Listening on: http://localhost:8080\n"
"2019-02-28 16:52:42,021 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.081 s - in org.acme.quickstart.GreetingResourceIT\n"
"[INFO]\n"
"[INFO] Results:\n"
"[INFO]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:416
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:418
#, no-wrap
msgid "Build a container friendly executable"
msgstr "コンテナーフレンドリーな実行ファイルのビルド"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:422
msgid "The native executable will be specific to your operating system.  To create an executable that will run in a container, use the following:"
msgstr "ネイティブ実行可能ファイルは、お使いのオペレーティングシステムに固有のものになります。コンテナー内で実行される実行ファイルを作成するには、次のようにします。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:430
msgid "The produced executable will be a 64 bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a Docker container.  Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr "生成される実行ファイルは64bitのLinux実行ファイルになるので、OSによっては実行できなくなる可能性があります。しかし、Dockerコンテナーにコピーするので問題ありません。この場合、ビルド自体もDockerコンテナー内で動作するので、ローカルにGraalVMをインストールする必要はないことに注意してください。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:434
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` Docker image."
msgstr "デフォルトでは、 `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}`  Dockerイメージを使用してネイティブ実行可能ファイルが生成されます。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:437
msgid "If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version), use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr "異なるDockerイメージでネイティブ実行可能ファイルをビルドしたい場合(例えば、異なるGraalVMのバージョンを使用するなど)、 `-Dquarkus.native.builder-image=<image name>` のbuild引数を使用してください。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:440
msgid "The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io].  Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr "利用可能なDockerイメージのリストは、 link:https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io]にあります。特定のQuarkusのバージョンは、利用可能なすべてのイメージと互換性がない場合があることに注意してください。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:443
msgid "You can follow the xref:building-native-image.adoc[Build a native executable guide] as well as xref:deploying-to-kubernetes.adoc[Deploying Application to Kubernetes and OpenShift] for more information."
msgstr "詳細は link:building-native-image.html[Build a native executable]のほか、link:deploying-to-kubernetes.html[Deploying Application to Kubernetes and OpenShift]を参照してください。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:445
#, no-wrap
msgid "Maven configuration"
msgstr "Mavenの設定"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:448
msgid "If you have not used <<project-creation,project scaffolding>>, add the following elements in your `pom.xml`"
msgstr "<<project-creation,プロジェクトのスキャフォールド>>を使用していない場合は、以下の要素を `pom.xml` に追加してください"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:462
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency> <1>\n"
"            <groupId>${quarkus.platform.group-id}</groupId>\n"
"            <artifactId>quarkus-bom</artifactId>\n"
"            <version>${quarkus.platform.version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:493
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin> <2>\n"
"            <groupId>${quarkus.platform.group-id}</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus.platform.version}</version>\n"
"            <extensions>true</extensions> <3>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        <plugin> <4>\n"
"            <groupId>org.apache.maven.plugins</groupId>\n"
"            <artifactId>maven-surefire-plugin</artifactId>\n"
"            <version>${surefire-plugin.version}</version>\n"
"            <configuration>\n"
"                <systemPropertyVariables>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                </systemPropertyVariables>\n"
"            </configuration>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:526
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile> <5>\n"
"        <id>native</id>\n"
"        <properties> <6>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"        </properties>\n"
"        <build>\n"
"            <plugins>\n"
"                <plugin> <7>\n"
"                    <groupId>org.apache.maven.plugins</groupId>\n"
"                    <artifactId>maven-failsafe-plugin</artifactId>\n"
"                    <version>${surefire-plugin.version}</version>\n"
"                    <executions>\n"
"                        <execution>\n"
"                            <goals>\n"
"                                <goal>integration-test</goal>\n"
"                                <goal>verify</goal>\n"
"                            </goals>\n"
"                            <configuration>\n"
"                                <systemPropertyVariables>\n"
"                                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                                    <maven.home>${maven.home}</maven.home>\n"
"                                </systemPropertyVariables>\n"
"                            </configuration>\n"
"                        </execution>\n"
"                    </executions>\n"
"                </plugin>\n"
"            </plugins>\n"
"        </build>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:529
msgid "Optionally use a BOM file to omit the version of the different Quarkus dependencies."
msgstr "オプションで、BOMファイルを使用して、異なるQuarkus依存関係のバージョンを省略することができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:530
msgid "Use the Quarkus Maven plugin that will hook into the build process."
msgstr "ビルドプロセスにフックするQuarkus Mavenプラグインを使用します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:531
msgid "Enabling Maven plugin extensions will register a Quarkus `MavenLifecycleParticipant` which will make sure the Quarkus classloaders used during the build are properly closed. During the `generate-code` and `generate-code-tests` goals the Quarkus application bootstrap is initialized and re-used in the `build` goal (which actually builds and packages a production application). The Quarkus classloaders will be properly closed in the `build` goal of the `quarkus-maven-plugin`. However, if the build fails in between the `generate-code` or `generate-code-tests` and `build` then the Quarkus augmentation classloader won't be properly closed, which may lead to locking of JAR files that happened to be on the classpath on Windows OS."
msgstr "Mavenプラグインのエクステンションを有効にすると、Quarkus `MavenLifecycleParticipant` が登録され、ビルド中に使用されるQuarkusクラスローダが適切にクローズされるようになります。 `generate-code` と `generate-code-tests` のゴールでは、Quarkusアプリケーションブートストラップが初期化され、 `build` のゴール（本番アプリケーションを実際にビルドしてパッケージ化する）で再利用されます。 `quarkus-maven-plugin` の `build` ゴールでは、Quarkus のクラスローダが適切にクローズされます。しかし、 `generate-code` または `generate-code-tests` と `build` の間でビルドが失敗すると、Quarkus augmentation classloaderは適切に閉じられず、Windows OSのクラスパス上にたまたまあったJARファイルがロックされる可能性があります。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:533
msgid "Add system properties to `maven-surefire-plugin`. + `maven.home` is only required if you have custom configuration in `${maven.home}/conf/settings.xml`."
msgstr "システムのプロパティーを `maven-surefire-plugin`  に追加します。+ `maven.home`  は、 `${maven.home}/conf/settings.xml`  にカスタム設定がある場合にのみ必要です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:534
msgid "Use a specific `native` profile for native executable building."
msgstr "ネイティブ実行可能ファイルのビルドには、特定の `native`  プロファイルを使用します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:535
msgid "Enable the `native` package type. The build will therefore produce a native executable."
msgstr "`native`  パッケージタイプを有効にします。そのため、ビルドはネイティブ実行可能ファイルを生成します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:536
#, fuzzy
msgid "If you want to test your native executable with Integration Tests, add the following plugin configuration. Test names `*IT` and annotated `@NativeImageTest` or `@QuarkusIntegrationTest` will be run against the native executable. See the xref:building-native-image.adoc[Native executable guide] for more info."
msgstr ""
"統合テストでネイティブ実行可能ファイルをテストしたい場合は、以下のプラグイン"
"設定を追加してください。テスト名 `*IT` とアノテーション付き "
"`@NativeImageTest` "
"は、ネイティブ実行可能ファイルに対して実行されます。詳細については、 link"
":building-native-image."
"html[ネイティブ実行可能ファイルのガイド]を参照してください。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:538
#, no-wrap
msgid "Using fast-jar"
msgstr "fast-jar の使用"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:541
msgid "`fast-jar` is the default quarkus package type."
msgstr "`fast-jar` は、デフォルトの quarkus パッケージタイプです。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:543
#, fuzzy
msgid "The result of the build is a directory under `target` named `quarkus-app`."
msgstr "ビルドの結果、 `target` の下に `quarkus-app` "
"という名前のディレクトリができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:545
msgid "You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "アプリケーションを実行するには、次のようにします: `java -jar target/quarkus-app/quarkus-run.jar`."

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:548
msgid "In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or might not function correctly."
msgstr "生成された jar を正常に実行するためには、 `quarkus-app` ディレクトリのすべての内容が必要です。いずれかのファイルが欠落していると、アプリケーションが起動しなかったり、正しく機能しない可能性があります。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:552
msgid "The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar on the classpath that the legacy jar necessitates, when loading a class or resource."
msgstr "`fast-jar` パッケージングでは、どの依存関係のjarにクラスやリソースが含まれているかという情報がインデックス化されているため、レガシーのQuarkus jarよりも起動が少し速く、メモリ消費量もわずかに少ないアーティファクトを作成できます。このため、クラスやリソースをロードする際に、レガシー jar が必要とするクラスパス上のすべての jar を検索する必要がなくなります。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:554
#, no-wrap
msgid "Uber-Jar Creation"
msgstr "Uber-Jarの作成"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:558
msgid "Quarkus Maven plugin supports the generation of Uber-Jars by specifying a `quarkus.package.type=uber-jar` configuration option in your `application.properties` (or `<quarkus.package.type>uber-jar</quarkus.package.type>` in your `pom.xml`)."
msgstr "Quarkus Mavenプラグインは、 `application.properties` .Quarkus Mavenプラグインで `quarkus.package.type=uber-jar`  設定オプションを指定することで、UberJar の生成をサポートしています。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:560
msgid "The original jar will still be present in the `target` directory but it will be renamed to contain the `.original` suffix."
msgstr "元の jar は `target`  ディレクトリーに残っていますが、 `.original`  の接尾辞を含むように名前が変更されます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:563
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `quarkus.package.ignored-entries` configuration option, this takes a comma separated list of entries to ignore."
msgstr "Uber-jar をビルドする際に、 `quarkus.package.ignored-entries`  設定オプションを使用して生成された jar から除外したいエントリーを指定することができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:565
msgid "Uber-Jar creation by default excludes link:https://docs.oracle.com/javase/tutorial/deployment/jar/intro.html[signature files] that might be present in the dependencies of the application."
msgstr "デフォルトでは、Uber-Jar の作成は、アプリケーションの依存関係に存在する可能性のある link:https://docs.oracle.com/javase/tutorial/deployment/jar/intro.html[署名ファイル]を除外します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:567
msgid "Uber-Jar's final name is configurable via a Maven's build settings `finalName` option."
msgstr "Uber-Jarの最終的な名前は、Mavenのビルド設定 `finalName`  オプションで設定できます。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:569
#, no-wrap
msgid "Working with multi-module projects"
msgstr "マルチモジュールプロジェクトでの作業"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:572
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr "デフォルトでは、Quarkusは別のモジュール内のCDI Bean を検出しません。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:575
msgid "The best way to enable CDI bean discovery for a module in a multi-module project would be to include the `jandex-maven-plugin`, unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will indexed automatically."
msgstr "マルチモジュールプロジェクト内のモジュールでCDI Bean検出を有効にするベストの方法は、 モジュールがメインアプリケーションモジュールでquarkus-maven-pluginが既に構成されていない限り、`jandex-maven-plugin`  をインクルードすることです。モジュールがメインアプリケーションモジュールでquarkus-maven-pluginが既に構成されている場合は自動的にインデックスが作成されます。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:595
#, no-wrap
msgid ""
"<build>\n"
"  <plugins>\n"
"    <plugin>\n"
"      <groupId>org.jboss.jandex</groupId>\n"
"      <artifactId>jandex-maven-plugin</artifactId>\n"
"      <version>{jandex-maven-plugin-version}</version>\n"
"      <executions>\n"
"        <execution>\n"
"          <id>make-index</id>\n"
"          <goals>\n"
"            <goal>jandex</goal>\n"
"          </goals>\n"
"        </execution>\n"
"      </executions>\n"
"    </plugin>\n"
"  </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:598
#, fuzzy
msgid "More information on this topic can be found on the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr ""
"このトピックの詳細については、CDIガイドの link:cdi-reference."
"html#bean_discovery[「Bean Discovery]」セクションを参照してください。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:600
#, no-wrap
msgid "Building with a specific configuration profile"
msgstr "特定の設定プロファイルでビルド"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:603
msgid "Quarkus supports xref:config-reference.adoc#profiles[configuration profiles] in order to provide a specific configuration according to the target environment."
msgstr "Quarkusは、対象となる環境に応じて特定の設定を提供するために、 link:config-reference.html#profiles[設定プロファイル]をサポートしています。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:605
#, fuzzy
msgid "The profile can be provided directly in the Maven build's command thanks to the system property `quarkus.profile` with a command of type:"
msgstr ""
"プロファイルは、 `quarkus.profile` with a command of typeのシステムプロパティ"
"により、Mavenビルドのコマンドで直接提供することができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:612
#, fuzzy
msgid "However it is also possible to specify the profile directly in the POM file of the project using project properties, the Quarkus Maven plugin configuration properties or system properties set in the Quarkus Maven plugin configuration."
msgstr ""
"ただし、プロジェクトのプロパティ、Quarkus Mavenプラグインの設定プロパティ、"
"またはQuarkus Mavenプラグインの設定で設定されたシステムプロパティを使用して、"
"プロジェクトのPOMファイルでプロファイルを直接指定することも可能です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:614
#, fuzzy
msgid "In order of precedence (greater precedence first):"
msgstr "優先順位の高い順（大きい順）に並んでいます。"

#. type: Block title
#: upstream/_guides/maven-tooling.adoc:615
#, no-wrap
msgid "1. System properties set in the Quarkus Maven plugin configuration"
msgstr "1. Quarkus Mavenプラグインの設定で設定されたシステムプロパティ"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:641
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <configuration>\n"
"          <systemProperties>\n"
"            <quarkus.profile>prod-aws</quarkus.profile> <1>\n"
"          </systemProperties>\n"
"        </configuration>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:643
#: upstream/_guides/maven-tooling.adoc:672
#: upstream/_guides/maven-tooling.adoc:688
msgid "The default configuration profile of this project is `prod-aws`."
msgstr "このプロジェクトのデフォルトの構成プロファイルは `prod-aws` です。"

#. type: Block title
#: upstream/_guides/maven-tooling.adoc:644
#, no-wrap
msgid "2. Quarkus Maven plugin configuration properties"
msgstr "2. Quarkus Mavenプラグインの設定プロパティ"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:670
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <configuration>\n"
"          <properties>\n"
"            <quarkus.profile>prod-aws</quarkus.profile> <1>\n"
"          </properties>\n"
"        </configuration>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/maven-tooling.adoc:673
#, no-wrap
msgid "3. Project properties"
msgstr "3. プロジェクトプロパティ"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:686
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <properties>\n"
"    <quarkus.profile>prod-aws</quarkus.profile> <1>\n"
"    ...\n"
"  </properties>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:690
#, fuzzy
msgid "Whatever the approach is chosen, the profile can still be overridden with the `quarkus.profile` system property or the `QUARKUS_PROFILE` environment variable."
msgstr ""
"どのような方法を選択しても、 `quarkus.profile` システムプロパティまたは "
"`QUARKUS_PROFILE` 環境変数でプロファイルを上書きすることができます。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:692
#, no-wrap
msgid "Building several artifacts from a single module"
msgstr "1つのモジュールから複数のアーティファクトの作成"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:696
#, fuzzy
msgid "In some particular use cases, it can be interesting to build several artifacts of your application from the same module.  A typical example is when you want to build your application with different configuration profiles."
msgstr ""
"特定のユースケースでは、同じモジュールからアプリケーションの複数の成果物を構"
"築することが興味深い場合があります。典型的な例は、異なる設定プロファイルでア"
"プリケーションを構築したい場合です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:698
#, fuzzy
msgid "In that case, it is possible to add as many executions as needed to the Quarkus Maven plugin configuration."
msgstr "その場合、Quarkus "
"Mavenプラグインの設定に必要な数の実行を追加することが可能です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:700
#, fuzzy
msgid "Below is an example of a Quarkus Maven plugin configuration that will produce two builds of the same application: one using the `prod-oracle` profile and the other one using the `prod-postgresql` profile."
msgstr ""
"以下は、同じアプリケーションの2つのビルドを作成するQuarkus "
"Mavenプラグイン設定の例です。1つは `prod-oracle` プロファイルを使用し、"
"もう1つは `prod-postgresql` プロファイルを使用します。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:746
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <executions>\n"
"          <execution>\n"
"            <id>oracle</id>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"              <properties>\n"
"                <quarkus.profile>prod-oracle</quarkus.profile> <1>\n"
"                <quarkus.package.output-directory>oracle-quarkus-app</quarkus.package.output-directory> <2>\n"
"              </properties>\n"
"            </configuration>\n"
"          </execution>\n"
"          <execution>\n"
"            <id>postgresql</id>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"              <properties>\n"
"                <quarkus.profile>prod-postgresql</quarkus.profile> <3>\n"
"                <quarkus.package.output-directory>postgresql-quarkus-app</quarkus.package.output-directory> <4>\n"
"              </properties>\n"
"            </configuration>\n"
"          </execution>\n"
"        </executions>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:748
#, fuzzy
msgid "The default configuration profile of the first execution of the plugin is `prod-oracle`."
msgstr "プラグインの最初の実行時のデフォルトの構成プロファイルは、 `prod-oracle` "
"です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:749
#, fuzzy
msgid "The output directory of the first execution of the plugin is set to `oracle-quarkus-app` instead of `quarkus-app` to have a dedicated directory."
msgstr ""
"プラグインの初回実行時の出力ディレクトリを `quarkus-app` ではなく `oracle-"
"quarkus-app` に設定することで、専用のディレクトリを持つことができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:750
#, fuzzy
msgid "The default configuration profile of the second execution of the plugin is `prod-postgresql`."
msgstr "`foo`  設定プロファイルがテストの実行に使用されます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:751
#, fuzzy
msgid "The output directory of the second execution of the plugin is set to `postgresql-quarkus-app` instead of `quarkus-app` to have a dedicated directory."
msgstr ""
"プラグインの2回目の実行時の出力ディレクトリを `quarkus-app` ではなく "
"`postgresql-quarkus-app` "
"に設定することで、専用のディレクトリを持つことができます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:753
#, fuzzy
msgid "With the configuration above, both profile builds will be using the same dependencies, so if we added dependencies on the Oracle and PostgreSQL drivers to the application, both of the drivers will appear in both builds."
msgstr ""
"上記の構成では、両方のプロファイルのビルドが同じ依存関係を使用することになる"
"ので、アプリケーションにOracleとPostgreSQLのドライバーの依存関係を追加した場"
"合、両方のドライバーが両方のビルドに表示されることになります。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:756
#, fuzzy
msgid "To isolate profile-specific dependencies from other profiles, the JDBC drivers could be added as optional dependencies to the application but configured to be included in each profile that requires them, e.g.:"
msgstr ""
"プロファイル固有の依存関係を他のプロファイルから分離するために、JDBCドライバ"
"をアプリケーションにオプションの依存関係として追加し、それらを必要とする各プ"
"ロファイルに含まれるように設定することができます。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:802
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <dependencies>\n"
"    ...\n"
"    <dependency>\n"
"      <groupId>org.postgresql</groupId>\n"
"      <artifactId>postgresql</artifactId>\n"
"      <version>${postgresql.driver.version}</version>\n"
"      <optional>true</optional> <1>\n"
"    </dependency>\n"
"  </dependencies>\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <executions>\n"
"          ...\n"
"          <execution>\n"
"            <id>postgresql</id>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"              <properties>\n"
"                <quarkus.profile>prod-postgresql</quarkus.profile>\n"
"                <quarkus.package.output-directory>postgresql-quarkus-app</quarkus.package.output-directory>\n"
"                <quarkus.package.filter-optional-dependencies>true</quarkus.package.filter-optional-dependencies> <2>\n"
"                <quarkus.package.included-optional-dependencies>org.postgresql:postgresql::jar</quarkus.package.included-optional-dependencies> <3>\n"
"              </properties>\n"
"            </configuration>\n"
"          </execution>\n"
"        </executions>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:804
msgid "The JDBC driver of PostgreSQL is defined as an optional dependency"
msgstr "PostgreSQLのJDBCドライバは、オプションの依存関係として定義されています。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:805
msgid "For backward compatibility reasons, it is necessary to explicitly indicate that the optional dependencies need to be filtered."
msgstr "後方互換性の理由から、オプションの依存関係をフィルタリングする必要があることを明示的に示す必要があります。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:806
msgid "Only the optional dependency corresponding to the JDBC driver of PostgreSQL is expected in the final artifact."
msgstr "PostgreSQLのJDBCドライバに対応するオプションの依存関係のみが、最終的な成果物として期待されます。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:808
#, no-wrap
msgid "Configuring the Project Output"
msgstr "プロジェクト出力の設定"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:812
msgid "There are a several configuration options that will define what the output of your project build will be.  These are provided in `application.properties` the same as any other config property."
msgstr "プロジェクトのビルドの出力を定義するための設定オプションがいくつかあります。これらは他の設定プロパティーと同じように `application.properties`  で提供されています。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:814
msgid "The properties are shown below:"
msgstr "プロパティーは以下の通りです:"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:818
#, no-wrap
msgid "Custom test configuration profile in JVM mode"
msgstr "JVMモードでのカスタムテスト構成プロファイル"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:823
#, fuzzy
msgid "By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus configuration profiles, everything you need to know is explained in the xref:config.adoc#configuration-profiles[Configuration Profiles Documentation]."
msgstr ""
"デフォルトでは、JVMモードのQuarkusテストは、 `test` 構成プロファイルを使用し"
"て実行されます。Quarkusの設定プロファイルに慣れていない場合は、 link:config."
"html#configuration-profiles[設定プロファイル]のドキュメントで必要な情報がすべ"
"て説明されていますので、そちらを参照してください。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:827
msgid "It is however possible to use a custom configuration profile for your tests with the Maven Surefire and Maven Failsafe configurations shown below. This can be useful if you need for example to run some tests using a specific database which is not your default testing database."
msgstr "ただし、以下に示すMaven SurefireおよびMaven Failsafe構成で、テストにカスタム構成プロファイルを使用することは可能です。これは、例えば、デフォルトのテストデータベースではない特定のデータベースを使用してテストを実行する必要がある場合に便利です。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:862
#, no-wrap
msgid ""
"<project>\n"
"  [...]\n"
"  <build>\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-surefire-plugin</artifactId>\n"
"        <version>${surefire-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <quarkus.test.profile>foo</quarkus.test.profile> <1>\n"
"            <buildDirectory>${project.build.directory}</buildDirectory>\n"
"            [...]\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-failsafe-plugin</artifactId>\n"
"        <version>${failsafe-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <quarkus.test.profile>foo</quarkus.test.profile> <1>\n"
"            <buildDirectory>${project.build.directory}</buildDirectory>\n"
"            [...]\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"    </plugins>\n"
"  </build>\n"
"  [...]\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:865
msgid "The `foo` configuration profile will be used to run the tests."
msgstr "`foo`  設定プロファイルがテストの実行に使用されます。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:870
msgid "It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the `prod` profile."
msgstr "今のところ、ネイティブモードでカスタムテスト設定プロファイルを使用することはできません。ネイティブテストは常に `prod`  プロファイルを使用して実行されます。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:873
#, no-wrap
msgid "Bootstrap Maven properties"
msgstr "Bootstrap Mavenのプロパティ"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:876
#, fuzzy
msgid "Quarkus bootstrap includes a Maven resolver implementation that is used to resolve application runtime and build time dependencies. The Quarkus Maven resolver is initialized from the same Maven command line that launched the build, test or dev mode. Typically, there is no need to add any extra configuration for it. However, there could be cases where an extra configuration option may be necessary to properly resolve application dependencies in test or dev modes, or IDEs."
msgstr ""
"Quarkusのブートストラップには、アプリケーションのランタイムおよびビルドタイム"
"の依存関係を解決するために使用されるMavenリゾルバの実装が含まれています。Quar"
"kusのMavenリゾルバは、ビルド、テスト、または開発モードを起動したのと同じMaven"
"コマンドラインから初期化されます。通常は、追加の設定を行う必要はありません。"
"ただし、テストモード、開発モード、またはIDEでアプリケーションの依存関係を適切"
"に解決するために、追加の設定オプションが必要な場合があります。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:878
#, fuzzy
msgid "Maven test plugins (such as `surefire` and `failsafe`), for example, are not propagating build system properties to the running tests by default. Which means some of the system properties set by the Maven CLI aren't available for the Quarkus Maven resolver initialized for the tests, which may result in test dependencies being resolved using different settings than the main Maven build."
msgstr ""
"たとえば、Mavenテストプラグイン（ `surefire` や `failsafe` など）は、デフォル"
"トではビルドシステムプロパティを実行中のテストに伝播しません。これは、Maven "
"CLIによって設定されたシステムプロパティの一部が、"
"テスト用に初期化されたQuarkus Mavenリゾルバで利用できないことを意味し、テスト"
"の依存関係がメインのMavenビルドと異なる設定で解決される可能性があります。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:880
msgid "Here is a list of system properties the Quarkus bootstrap Maven resolver checks during its initialization."
msgstr "以下は、Quarkus bootstrap Maven resolverが初期化時にチェックするシステムプロパティのリストです。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:884
#, no-wrap
msgid "Property name"
msgstr "プロパティ名"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:888
#, no-wrap
msgid "`maven.home`"
msgstr "`maven.home`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:889
#, no-wrap
msgid "`MAVEN_HOME` envvar"
msgstr "`MAVEN_HOME` envvar"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:891
#, no-wrap
msgid "The Maven home dir is used to resolve the global settings file unless it was explicitly provided on the command line with the `-gs` argument"
msgstr "Maven のホームディレクトリは、コマンドラインで `-gs` 引数を使って明示的に提供されていない限り、グローバル設定ファイルの解決に使用されます。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:892
#, no-wrap
msgid "`maven.settings`"
msgstr "`maven.settings`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:893
#, no-wrap
msgid "`~/m2/settings.xml`"
msgstr "`~/m2/settings.xml`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:895
#, no-wrap
msgid "Unless the custom settings file has been provided with the `-s` argument, this property can be used to point the resolver to a custom Maven settings file"
msgstr "カスタム設定ファイルが `-s` 引数で提供されていない限り、このプロパティを使用してリゾルバにカスタム Maven 設定ファイルを指定できます。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:896
#, no-wrap
msgid "`maven.repo.local`"
msgstr "`maven.repo.local`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:897
#, no-wrap
msgid "`~/m2/repository`"
msgstr "`~/m2/repository`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:899
#, no-wrap
msgid "This property could be used to configure a custom local Maven repository directory, if it is different from the default one and the one specified in the `settings.xml`"
msgstr "これがデフォルトのものや `settings.xml`で設定されたものと異なる場合、このプロパティを使用して、カスタムのローカル Maven リポジトリ・ディレクトリを構成することができます。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:900
#, no-wrap
msgid "`maven.top-level-basedir`"
msgstr "`maven.top-level-basedir`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:901
#, no-wrap
msgid "none"
msgstr "none"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:903
#, fuzzy, no-wrap
msgid "This property may be useful to help the Maven resolver identify the top-level Maven project in the workspace. By default, the Maven resolver will be discovering a project's workspace by navigating the parent-module POM relationship. However there could be project layouts that are using an aggregator module which isn't appearing as the parent for its modules. In this case, this property will help the Quarkus Maven resolver to properly discover the workspace."
msgstr ""
"このプロパティは、Maven リゾルバがワークスペース内のトップレベルの Maven "
"プロジェクトを識別するのに役立つ場合があります。デフォルトでは、Maven "
"リゾルバは親モジュール POM 関係をナビゲートしてプロジェクトのワークスペースを"
"検出します。しかし、モジュールの親として表示されていないアグリゲータモジュー"
"ルを使用しているプロジェクトレイアウトがあるかもしれません。この場合、このプ"
"ロパティは、Quarkus "
"Mavenリゾルバがワークスペースを適切に検出するのに役立ちます。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:904
#, no-wrap
msgid "`quarkus.bootstrap.effective-model-builder`"
msgstr "`quarkus.bootstrap.effective-model-builder`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:905
#, no-wrap
msgid "`false`"
msgstr "`false`"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:907
#, fuzzy, no-wrap
msgid "By default, the Quarkus Maven resolver is reading project's POMs directly when discovering the project's layout. While in most cases it works well enough and relatively fast, reading raw POMs has its limitation. E.g. if a POM includes modules in a profile, these modules will not be discovered. This system property enables project's layout discovery based on the effective POM models, that are properly interpolated, instead of the raw ones. The reason this option is not enabled by default is it may appear to be significantly more time consuming that could increase, e.g. CI testing times. Until there is a better approach found that could be used by default, projects that require it should enable this option."
msgstr ""
"デフォルトでは、QuarkusのMavenリゾルバは、プロジェクトのレイアウトを発見する"
"際に、プロジェクトのPOMを直接読みます。ほとんどの場合、これは十分に機能し、比"
"較的高速ですが、生のPOMを読み込むことには限界があります。例えば、POMにプロフ"
"ァイルのモジュールが含まれている場合、これらのモジュールは検出されません。こ"
"のシステム・プロパティは、生のPOMではなく、適切に補間された効果的なPOMモデル"
"に基づいて、プロジェクトのレイアウト・ディスカバリーを可能にします。このオプ"
"ションがデフォルトで有効になっていない理由は、CIテスト時間などを増加させる可"
"能性があり、かなり時間がかかると思われるためです。デフォルトで使用できるより"
"良い方法が見つかるまでは、このオプションを必要とするプロジェクトでは有効にし"
"てください。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:910
#, fuzzy
msgid "These system properties above could be added to, e.g., a `surefire` and/or `failsafe` plugin configuration as"
msgstr ""
"上記のシステムプロパティは、例えば、 `surefire` および/または `failsafe` "
"のプラグイン設定に以下のように追加することができます。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:934
#, no-wrap
msgid ""
"<project>\n"
"  [...]\n"
"  <build>\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-surefire-plugin</artifactId>\n"
"        <version>${surefire-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <maven.home>${maven.hom}</maven.home> <1>\n"
"            <maven.repo.local>${settings.localRepository}</maven.repo.local> <2>\n"
"            <maven.settings>${session.request.userSettingsFile.path}</maven.settings> <3>\n"
"            <maven.top-level-basedir>${session.topLevelProject.basedir.absolutePath}</maven.top-level-basedir> <4>\n"
"            <quarkus.bootstrap.effective-model-builder>true</quarkus.bootstrap.effective-model-builder> <5>\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"    </plugins>\n"
"  </build>\n"
"  [...]\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:937
#, fuzzy
msgid "Propagate `maven.home` system property set by the Maven CLI to the tests"
msgstr "Maven CLIによって設定された `maven.home` "
"システムプロパティをテストに伝搬する。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:938
msgid "Set the Maven local repository directory for the tests"
msgstr "テスト用のMavenローカルリポジトリのディレクトリを設定"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:939
msgid "Set the Maven settings file the tests"
msgstr "Mavenの設定ファイルをテストに設定"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:940
msgid "Point to the top-level project directory for the tests"
msgstr "テスト用のトップレベルのプロジェクト・ディレクトリを指定"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:941
msgid "Enable effective POM-based project layout discovery"
msgstr "効果的なPOMベースのプロジェクト・レイアウト・ディスカバリーを有効化"

#. type: Title ====
#: upstream/_guides/maven-tooling.adoc:942
#, no-wrap
msgid "Top-level vs Multi-module project directory"
msgstr "トップレベルとマルチモジュールのプロジェクトディレクトリ"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:946
msgid "In Maven there appears to be a notion of the top-level project (that is exposed as a project property `${session.topLevelProject.basedir.absolutePath}`)  and the multi-module project directory (that is available as property `${maven.multiModuleProjectDirectory}`). These directories might not always match!"
msgstr "Mavenでは、トップレベルのプロジェクト(プロジェクトのプロパティとして公開されています。 `${session.topLevelProject.basedir.absolutePath}`)と、マルチモジュールのプロジェクトディレクトリ(プロパティとして公開されています。 `${maven.multiModuleProjectDirectory}`)という概念があるようです。これらのディレクトリは常に一致するとは限りません。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:948
msgid "`maven.multiModuleProjectDirectory` is meant to be consulted by the Maven code itself and not something to be relied upon by user code. So, if you find it useful, use it at your own risk!"
msgstr "`maven.multiModuleProjectDirectory` は、Maven コード自体が参照することを意図しており、ユーザーコードが頼るべきものではありません。なので、もし便利だと思っても、自分の責任で使ってくださいね。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:952
#, fuzzy
msgid "The `${maven.multiModuleProjectDirectory}` will be resolved to the first directory that contains `.mvn` directory as its child going up the workspace file system tree starting from the current directory (or the one specified with the `-f` argument) from which the `mvn` command was launched. If the `.mvn` directory was not found, however, the `${maven.multiModuleProjectDirectory}` will be pointing to the directory from which the `mvn` command was launched (or the one targeted with the `-f` argument)."
msgstr ""
"`${maven.multiModuleProjectDirectory}` は、 `mvn` "
"コマンドを起動したカレント・ディレクトリ（または `-f` 引数で指定したディレク"
"トリ）からワークスペース・ファイル・システム・ツリーをさかのぼり、 `.mvn` デ"
"ィレクトリを子として含む最初のディレクトリを指すように解決されます。しかし、 "
"`.mvn` ディレクトリが見つからなかった場合、 `${maven."
"multiModuleProjectDirectory}` は、 `mvn` コマンドが起動されたディレクトリ（"
"または `-f` 引数で指定されたディレクトリ）を指します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:955
#, fuzzy
msgid "The `${session.topLevelProject.basedir.absolutePath}` will be pointing either to the directory from which the `mvn` command was launched or to the directory targeted with the `-f` argument, if it was specified."
msgstr ""
"`${session.topLevelProject.basedir.absolutePath}` は、 `mvn` "
"コマンドが起動されたディレクトリか、 `-f` "
"引数が指定されていた場合は、その引数で指定されたディレクトリを指します。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:957
#, fuzzy, no-wrap
msgid "Quarkus project info"
msgstr "Quarkusプロジェクト情報"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:960
#: upstream/_guides/maven-tooling.adoc:1037
#, fuzzy
msgid "This goal was introduced in Quarkus Maven plugin 2.7.0.Final and can be used in projects that are based on Quarkus version 2.0.0.Final or later."
msgstr ""
"この目標はQuarkus Mavenプラグイン2.7.0.Finalで導入され、Quarkusバージョン2.0."
"0.Final以降をベースにしたプロジェクトで使用することが可能です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:963
#, fuzzy
msgid "The Quarkus Maven plugin includes a goal called `info` (currently marked as 'experimental') that logs Quarkus-specific information about the project, such as: the imported Quarkus platform BOMs and the Quarkus extensions found among the project dependencies.  In a multi-module project `quarkus:info` will assume that the current module, in which it is executed, is the main module of the application."
msgstr ""
"Quarkus Mavenプラグインには、 `info` （現在「experimental」と表示されています"
"）というゴールがあり、インポートされたQuarkusプラットフォームBOMやプロジェク"
"トの依存関係の中で見つかったQuarkusエクステンションなど、プロジェクトに関する"
"Quarkus固有の情報をログに記録しています。マルチモジュールプロジェクトでは、 "
"`quarkus:info` は、実行されている現在のモジュールがアプリケーションのメインモ"
"ジュールであると仮定します。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:965
#, fuzzy
msgid "The report generated by `quarkus:info` is not currently including the Quarkus Maven plugin information, however it's planned to be added in the future releases."
msgstr ""
"`quarkus:info` によって生成されるレポートには、現在のところ Quarkus Maven "
"プラグインの情報は含まれていませんが、今後のリリースで追加される予定です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:967
#, fuzzy
msgid "Here is an example `info` output for a simple project:"
msgstr "以下は、簡単なプロジェクトの `info` の出力例です。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:994
#, no-wrap
msgid ""
"[aloubyansky@localhost code-with-quarkus]$ mvn quarkus:info\n"
"[INFO] Scanning for projects...\n"
"[INFO] \n"
"[INFO] ---------------------< org.acme:code-with-quarkus >---------------------\n"
"[INFO] Building code-with-quarkus 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"[INFO] \n"
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:info (default-cli) @ code-with-quarkus ---\n"
"[WARNING] quarkus:info goal is experimental, its options and output may change in future versions\n"
"[INFO] Quarkus platform BOMs: <1>\n"
"[INFO]   io.quarkus.platform:quarkus-bom:pom:{quarkus-version}\n"
"[INFO]   io.quarkus.platform:quarkus-kogito-bom:pom:{quarkus-version}\n"
"[INFO]   io.quarkus.platform:quarkus-camel-bom:pom:{quarkus-version}\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-bom: <2>\n"
"[INFO]   io.quarkus:quarkus-resteasy-reactive\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-kogito-bom: <3>\n"
"[INFO]   org.kie.kogito:kogito-quarkus-decisions\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-camel-bom: <4>\n"
"[INFO]   org.apache.camel.quarkus:camel-quarkus-rabbitmq\n"
"[INFO] \n"
"[INFO] Extensions from registry.quarkus.io: <5>\n"
"[INFO]   io.quarkiverse.prettytime:quarkus-prettytime:0.2.1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:997
#, fuzzy
msgid "Quarkus platform BOMs imported in the project (BOMs imported by parent POMs will also be reported)"
msgstr "プロジェクトにインポートされたQuarkusプラットフォームBOM（親POMによってインポ"
"ートされたBOMも報告されます。）"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:998
#, fuzzy
msgid "Direct Quarkus extension dependencies managed by the `quarkus-bom`"
msgstr "が管理するQuarkus拡張の直接的な依存関係。 `quarkus-bom`"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:999
#, fuzzy
msgid "Direct Quarkus extension dependencies managed by the `quarkus-kogito-bom`"
msgstr "が管理するQuarkus拡張の直接的な依存関係。 `quarkus-kogito-bom`"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1000
#, fuzzy
msgid "Direct Quarkus extension dependencies managed by the `quarkus-camel-bom`"
msgstr "が管理するQuarkus拡張の直接的な依存関係。 `quarkus-camel-bom`"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1001
#, fuzzy
msgid "Direct Quarkus extensions dependencies that aren't managed by Quarkus BOMs but found in the Quarkus extension registry"
msgstr ""
"Quarkus BOMで管理されていないが、Quarkusエクステンションレジストリで検出され"
"た、Quarkusエクステンションの直接的な依存関係"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1003
#, fuzzy
msgid "`quarkus:info` will also report Quarkus extensions that aren't found in the Quarkus extension registries if those are present among the project dependencies, indicating they have an 'unknown origin'."
msgstr ""
"`quarkus:info` また、プロジェクトの依存関係の中にQuarkusエクステンションがあ"
"る場合、Quarkusエクステンションレジストリにないエクステンションが報告され、「"
"不明な起源」であることが示されます。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:1005
#, fuzzy, no-wrap
msgid "Highlighing misaligned versions"
msgstr "ズレたバージョンの高さ調整"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1008
#, fuzzy
msgid "`quarkus:info` will also highlight basic Quarkus dependency version misalignments, in case they are detected. For example, if we modify the project mentioned above by removing the `kogito-quarkus-decisions` extension from the dependencies and adding a `2.6.3.Final` `<version>` element to the `quarkus-resteasy-reactive` dependency that is managed by the `quarkus-bom` and then run `quarkus:info` again, we'll see something like:"
msgstr ""
"`quarkus:info` は、基本的なQuarkusの依存関係のバージョンの不整合が検出された"
"場合にも、それを強調表示します。例えば、上記のプロジェクトを修正して、"
"依存関係から `kogito-quarkus-decisions` 拡張を削除し、 `quarkus-bom` "
"が管理している `quarkus-resteasy-reactive` の依存関係に `2.6.3.Final` "
"`&amp;lt;version&amp;gt;` の要素を追加して、再度 `quarkus:info` "
"を実行すると、次のような表示になります。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:1028
#, no-wrap
msgid ""
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:info (default-cli) @ code-with-quarkus ---\n"
"[WARNING] quarkus:info goal is experimental, its options and output may change in future versions\n"
"[INFO] Quarkus platform BOMs:\n"
"[INFO]   io.quarkus.platform:quarkus-bom:pom:{quarkus-version}\n"
"[INFO]   io.quarkus.platform:quarkus-kogito-bom:pom:{quarkus-version} | unnecessary <1>\n"
"[INFO]   io.quarkus.platform:quarkus-camel-bom:pom:{quarkus-version}\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-bom:\n"
"[INFO]   io.quarkus:quarkus-resteasy-reactive:2.6.3.Final | misaligned <2>\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-camel-bom:\n"
"[INFO]   org.apache.camel.quarkus:camel-quarkus-rabbitmq\n"
"[INFO] \n"
"[INFO] Extensions from registry.quarkus.io:\n"
"[INFO]   io.quarkiverse.prettytime:quarkus-prettytime:0.2.1\n"
"[INFO]\n"
"[WARNING] Non-recommended Quarkus platform BOM and/or extension versions were found. For more details, please, execute 'mvn quarkus:update -Drectify'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1031
#, fuzzy
msgid "The `quarkus-kogito-bom` import is now reported as 'unnecessary' since none of the Quarkus extensions it includes are found among the project dependencies"
msgstr ""
"`quarkus-kogito-bom` のインポートは、プロジェクトの依存関係の中にQuarkusのエ"
"クステンションがないため、「不要」と報告されるようになりました。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1032
#, fuzzy
msgid "The version `2.6.3.Final` of the `quarkus-resteasy-reactive` is now reported as being misaligned with the version managed by the Quarkus platform BOM imported in the project, which is {quarkus-version}"
msgstr ""
"`quarkus-resteasy-reactive` のバージョン `2.6.3.Final` が、"
"プロジェクトにインポートされた Quarkus プラットフォームの BOM "
"で管理されているバージョンとずれていることが報告されるようになり、{quarkus-"
"version}となりました。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:1034
#, fuzzy, no-wrap
msgid "Quarkus project update"
msgstr "Quarkusプロジェクト・アップデート"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1039
#, fuzzy
msgid "The `quarkus:update` goal (currently marked as 'experimental') provided by the Quarkus Maven plugin can be used to check whether there are Quarkus-related updates available for a project, such as: new releases of the relevant Quarkus platform BOMs and non-platform Quarkus extensions present in the project. In a multi-module project the `update` goal is meant to be executed from the main Quarkus application module."
msgstr ""
"Quarkus Mavenプラグインで提供される `quarkus:update` （現在は「experimental」"
"とマークされています）を使用して、プロジェクトで利用できるQuarkus関連の更新が"
"あるかどうかを確認できます。たとえば、関連するQuarkusプラットフォームBOMの新"
"しいリリースやプロジェクトにあるプラットフォーム以外のQuarkus拡張機能などが挙"
"げられます。マルチモジュールプロジェクトでは、"
"メインQuarkusアプリケーションモジュールから `update` "
"を実行することを想定しています。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1041
#, fuzzy
msgid "At this point, the `quarkus:update` goal does not actually apply the recommended updates but simply reports what they are and how to apply them manually."
msgstr ""
"この時点では、 `quarkus:update` の目標は、推奨されるアップデートを実際に適用"
"するのではなく、単にその内容や手動での適用方法を報告するものです。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1043
#, fuzzy
msgid "The Quarkus Maven plugin version isn't currently included in the update report, however it's planned to be added in the future releases."
msgstr "Quarkus Mavenプラグインのバージョンは、現在、アップデートレポートに含まれてい"
"ませんが、将来のリリースで追加される予定です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1045
#, fuzzy
msgid "The way `quarkus:update` works, first, all the direct Quarkus extension dependencies of the project are collected (those that are managed by the Quarkus platform BOMs and those that aren't but found in the Quarkus extension registries). Then the configured Quarkus extension registries (typically the `registry.quarkus.io`) will be queried for the latest recommended/supported Quarkus platform versions and non-platform Quarkus extensions compatible with them. The algorithm will then select the latest compatible combination of all the extensions found in the project, assuming such a combination actually exists. Otherwise, no updates will be suggested."
msgstr ""
"`quarkus:update` の動作は、まず、プロジェクトのQuarkus拡張機能の直接的な依存"
"関係をすべて収集します（QuarkusプラットフォームBOMによって管理されているもの"
"と、そうでなくQuarkus拡張機能レジストリで見つかるもの）。次に、設定されたQuar"
"kus拡張機能レジストリ（通常は `registry.quarkus.io` ）に、推奨／サポートされ"
"る最新のQuarkusプラットフォームバージョンと、それと互換性のあるプラットフォー"
"ム以外のQuarkus拡張機能が照会されます。アルゴリズムは、プロジェクトで見つかっ"
"たすべての拡張機能の最新の互換性のある組み合わせを選択します（そのような組み"
"合わせが実際に存在すると仮定します）。そうでない場合は、更新は提案されません"
"。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1047
#, fuzzy
msgid "Assuming we have a project including Kogito, Camel and core Quarkus extensions available in the Quarkus platform based on Quarkus `2.7.1.Final`, the output of the `quarkus:update` would look like:"
msgstr ""
"Quarkus `2.7.1.Final` に基づいてQuarkusプラットフォームで利用できるKogito、Ca"
"mel、コアQuarkus拡張を含むプロジェクトがあると仮定すると、 `quarkus:update` "
"の出力は次のようになります。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:1063
#, no-wrap
msgid ""
"[aloubyansky@localhost code-with-quarkus]$ mvn quarkus:update\n"
"[INFO] Scanning for projects...\n"
"[INFO] \n"
"[INFO] ---------------------< org.acme:code-with-quarkus >---------------------\n"
"[INFO] Building code-with-quarkus 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"[INFO] \n"
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:update (default-cli) @ code-with-quarkus ---\n"
"[WARNING] quarkus:update goal is experimental, its options and output might change in future versions\n"
"[INFO] \n"
"[INFO] Recommended Quarkus platform BOM updates: <1>\n"
"[INFO] Update: io.quarkus.platform:quarkus-bom:pom:2.7.1.Final -> {quarkus-version}\n"
"[INFO] Update: io.quarkus.platform:quarkus-kogito-bom:pom:2.7.1.Final -> {quarkus-version}\n"
"[INFO] Update: io.quarkus.platform:quarkus-camel-bom:pom:2.7.1.Final -> {quarkus-version}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1066
#, fuzzy
msgid "A list of currently recommended Quarkus platform BOM updates"
msgstr "現在推奨されているQuarkusプラットフォームのBOMアップデートの一覧です。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1068
#, fuzzy
msgid "Typically, a single project property will be used to manage all the Quarkus platform BOMs but the implementation isn't currently smart enough to point that out and will report updates for each BOM individually."
msgstr ""
"通常、1つのプロジェクトプロパティを使用して、すべてのQuarkusプラットフォームB"
"OMを管理しますが、現在の実装はその点を十分に考慮しておらず、各BOMの更新が個別"
"に報告されます。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1070
#, fuzzy
msgid "If we modify the project to remove all the Kogito extensions from the project, change the version of the `quarkus-resteasy-reactive` extension to `2.6.3.Final` and downgrade `quarkus-prettytime` which is not included in the Quarkus platform BOMs to `0.2.0`, `quarkus:update` will report something like:"
msgstr ""
"プロジェクトを修正して、プロジェクトからKogito拡張機能をすべて削除し、 "
"`quarkus-resteasy-reactive` 拡張機能のバージョンを `2.6.3.Final` に変更し、"
"QuarkusプラットフォームのBOMに含まれない `quarkus-prettytime` を `0.2.0` "
"にダウングレードすると、 `quarkus:update` のように報告されます。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:1083
#, no-wrap
msgid ""
"[INFO] Recommended Quarkus platform BOM updates: <1>\n"
"[INFO] Update: io.quarkus.platform:quarkus-bom:pom:2.7.1.Final -> {quarkus-version}\n"
"[INFO] Update: io.quarkus.platform:quarkus-camel-bom:pom:2.7.1.Final -> {quarkus-version}\n"
"[INFO] Remove: io.quarkus.platform:quarkus-kogito-bom:pom:2.7.1.Final <2>\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-bom:\n"
"[INFO] Update: io.quarkus:quarkus-resteasy-reactive:2.6.3.Final -> remove version (managed) <3>\n"
"[INFO] \n"
"[INFO] Extensions from registry.quarkus.io:\n"
"[INFO] Update: io.quarkiverse.prettytime:quarkus-prettytime:0.2.0 -> 0.2.1 <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1086
#, fuzzy
msgid "A list of the currently recommended Quarkus platform BOM updates for the project"
msgstr "プロジェクトで現在推奨されているQuarkusプラットフォームBOMの更新のリスト"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1087
#, fuzzy
msgid "Given that the project does not include any Kogito extensions, the BOM import is recommended to be removed"
msgstr "プロジェクトにKogitoの拡張機能が含まれていないため、BOMのインポートを削除する"
"ことをお勧めします。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1088
#, fuzzy
msgid "An outdated version of the `quarkus-resteasy-reactive` is recommended to be removed in favor of the one managed by the `quarkus-bom`"
msgstr ""
"で管理されている古いバージョンの `quarkus-resteasy-reactive` "
"は削除することをお勧めします。 `quarkus-bom`"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1089
#, fuzzy
msgid "The latest compatible version of the `quarkus-prettytime` extension"
msgstr "最新の互換性のあるバージョンの `quarkus-prettytime` 拡張機能"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:1090
#, fuzzy, no-wrap
msgid "Quarkus project rectify"
msgstr "Quarkusプロジェクトの修正"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1093
#, fuzzy
msgid "As was mentioned above, `quarkus:info`, besides reporting Quarkus platform and extension versions, performs a quick version alignment check, to make sure the extension versions used in the project are compatible with the imported Quarkus platform BOMs. If misalignments are detected, the following warning message will be logged:"
msgstr ""
"前述のとおり、 `quarkus:info` は、Quarkusプラットフォームと拡張機能のバージョ"
"ンをレポートするだけでなく、プロジェクトで使用されている拡張機能のバージョン"
"とインポートしたQuarkusプラットフォームBOMの互換性を確認するために、バージョ"
"ンのクイックアライメントチェックを実行します。不整合が検出された場合、次の警"
"告メッセージが記録されます。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:1097
#, no-wrap
msgid "[WARNING] Non-recommended Quarkus platform BOM and/or extension versions were found. For more details, please, execute 'mvn quarkus:update -Drectify'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1099
#, fuzzy
msgid "When the `rectify` option is enabled, `quarkus:update`, instead of suggesting the latest recommended Quarkus version updates, will log update instructions to simply align the extension dependency versions found in the project with the currently imported Quarkus platform BOMs."
msgstr ""
"`rectify` オプションを有効にすると、 `quarkus:update` 、推奨されるQuarkusの最"
"新バージョンへの更新が提案されるのではなく、プロジェクトで見つかった拡張機能"
"の依存バージョンを現在インポートされているQuarkusプラットフォームBOMと合わせ"
"るだけの更新指示がログに記録されます。"

#~ msgid "If you decide to generate a REST resource (using the `className` attribute), the endpoint is exposed at: `http://localhost:8080/$path`.  If you use the default `path`, the URL is: http://localhost:8080/hello."
#~ msgstr "REST リソースを生成することにした場合 ( `className` 属性を使用)、エンドポイントは次の場所で公開されます: `http://localhost:8080/$path` 。デフォルトの `path` を使用する場合、URL は http://localhost:8080/hello です。"

#~ msgid "You can also run a Quarkus application in debug mode with a suspended JVM using `./mvnw compile quarkus:dev -Dsuspend` which is a shorthand for `./mvnw compile quarkus:dev -Dsuspend=true`."
#~ msgstr "`./mvnw compile quarkus:dev -Dsuspend` を使用して、サスペンドされたJVMでQuarkusアプリケーションをデバッグモードで実行することもできます( `./mvnw compile quarkus:dev -Dsuspend=true` ."

#~ msgid "In a separated terminal, run `./mvnw compile quarkus:dev`, and enjoy a highly productive environment."
#~ msgstr "分離された端末で `./mvnw compile quarkus:dev`  を実行し、生産性の高い環境を楽しむことができます。"

#~ msgid "The group id of the target platform. Given that all the existing platforms are coming from `io.quarkus` this one won't practically be used explicitly. But it's still an option."
#~ msgstr "対象となるプラットフォームのグループID。既存のすべてのプラットフォームが `io.quarkus` から来ていることを考えると、実際にはこれは明示的には使われないでしょう。しかし、これはまだオプションです。"

#~ msgid "The artifact id of the target platform BOM. It should be `quarkus-bom` in order to use the locally built Quarkus."
#~ msgstr "ターゲットプラットフォームBOMのアーティファクトID。ローカルでビルドされたQuarkusを使用するためには、 `quarkus-bom` である必要があります。"

#~ msgid "If it's not specified, the latest one will be resolved."
#~ msgstr "指定されていない場合は、最新のものに解決されます。"

#~ msgid "By default, the command will target the latest version of `quarkus-universe-bom` (unless specific coordinates have been specified). If you run offline however, it will look for the latest locally available and if `quarkus-universe-bom` (satisfying the default version range which is currently up to 2.0) is not available locally, it will fallback to the bundled platform based on `quarkus-bom` (the version will match the version of the plugin)."
#~ msgstr "デフォルトでは、このコマンドは `quarkus-universe-bom`  の最新バージョンをターゲットにします (特定の coordinates が指定されていない限り)。しかし、オフラインで実行した場合、ローカルで利用可能な最新のものを探し、 `quarkus-universe-bom`  (現在 2.0 までのデフォルトのバージョン範囲を満たしている) がローカルで利用できない場合は、 `quarkus-bom`  をベースにしたバンドルされたプラットフォームにフォールバックします (バージョンはプラグインのバージョンと一致します)。"

#~ msgid "To be able to use it, the following plugin configuration has to be added to the `pom.xml`:"
#~ msgstr "これを使えるようにするためには、以下のプラグイン設定を `pom.xml` に追加する必要があります:"

#~ msgid "Now you should be able to execute `./mvnw quarkus-bootstrap:build-tree` on your project and see something like:"
#~ msgstr "これで、プロジェクト上で `./mvnw quarkus-bootstrap:build-tree`  を実行して、以下のようなものが表示されるようになるはずです:"
