# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2022-05-04 17:47+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/stork.adoc:6
#, no-wrap
msgid "Getting Started with SmallRye Stork"
msgstr "SmallRye Stork入門"

#. type: Plain text
#: upstream/_guides/stork.adoc:19
msgid "The essence of distributed systems resides in the interaction between services.  In modern architecture, you often have multiple instances of your service to share the load or improve the resilience by redundancy.  But how do you select the best instance of your service? That's where https://smallrye.io/smallrye-stork[SmallRye Stork] helps.  Stork is going to choose the most appropriate instance.  It offers:"
msgstr "分散システムの本質は、サービス間の相互作用にあります。現代のアーキテクチャでは、負荷を共有したり、冗長性によって回復力を高めたりするために、サービスの複数のインスタンスを持つことがよくあります。しかし、サービスの最適なインスタンスをどのように選択すればよいのでしょうか？そこで、 link:https://smallrye.io/smallrye-stork[SmallRye Stork]がお役に立ちます。Storkが最適なインスタンスを選択してくれます。次の機能を提供します:"

#. type: Plain text
#: upstream/_guides/stork.adoc:21
msgid "Extensible service discovery mechanisms"
msgstr "拡張可能なサービスディスカバリーメカニズム"

#. type: Plain text
#: upstream/_guides/stork.adoc:22
msgid "Built-in support for Consul and Kubernetes"
msgstr "ConsulとKubernetesの組込サポート"

#. type: Plain text
#: upstream/_guides/stork.adoc:23
msgid "Customizable client load-balancing strategies"
msgstr "カスタマイズ可能なクライアントロードバランシング戦略"

#. type: Title ==
#: upstream/_guides/stork.adoc:26
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_guides/stork.adoc:31
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/stork.adoc:34
msgid "In this guide, we will build an application composed of:"
msgstr "このガイドでは、次のような構成のアプリケーションを構築します。"

#. type: Plain text
#: upstream/_guides/stork.adoc:36
msgid "A simple blue service exposed on port 9000"
msgstr "9000番ポートで公開されるシンプルなブルーサービス"

#. type: Plain text
#: upstream/_guides/stork.adoc:37
msgid "A simple red service exposed on port 9001"
msgstr "9001番ポートで公開されるシンプルなレッドサービス"

#. type: Plain text
#: upstream/_guides/stork.adoc:38
msgid "A REST Client calling the blue or red service (the selection is delegated to Stork)"
msgstr "ブルーまたはレッドのサービスを呼び出すRESTクライアント（選択はStorkに委ねられている）"

#. type: Plain text
#: upstream/_guides/stork.adoc:39
msgid "A REST endpoint using the REST client and calling the services"
msgstr "RESTクライアントを使用し、サービスを呼び出すRESTエンドポイント"

#. type: Plain text
#: upstream/_guides/stork.adoc:40
msgid "The blue and red services are registered in https://www.consul.io/[Consul]."
msgstr "ブルーとレッドのサービスは link:https://www.consul.io/[Consul]に登録されています。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/stork.adoc:41
#, no-wrap
msgid "Architecture of the application"
msgstr "アプリケーションのアーキテクチャ"

#. type: Target for macro image
#: upstream/_guides/stork.adoc:41
#, no-wrap
msgid "stork-getting-started-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:45
#, fuzzy
msgid "For the sake of simplicity, everything (except Consul) will be running in the same Quarkus application.  Of course, each component will run in its own process in the real world."
msgstr ""
"簡略化のため、（Consulを除く）すべてのコンポーネントは、同じQuarkusアプリケー"
"ション内で実行されます。もちろん、実際には各コンポーネントはそれぞれのプロセ"
"スで実行されます。"

#. type: Title ==
#: upstream/_guides/stork.adoc:46
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/stork.adoc:50
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the applications step by step.  However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成することをお勧め"
"します。しかし、完成した例をすぐに見ることもできます。"

#. type: Plain text
#: upstream/_guides/stork.adoc:52
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/stork.adoc:54
#, fuzzy
msgid "The solution is located in the `stork-quickstart` {quickstarts-tree-url}/stork-quickstart[directory]."
msgstr ""
"ソリューションは、 `stork-quickstart` {quickstarts-tree-url}/stork-"
"quickstart[directory]にあります。"

#. type: Title ==
#: upstream/_guides/stork.adoc:55
#, no-wrap
msgid "Discovery and selection"
msgstr "ディスカバリーとセレクション"

#. type: Plain text
#: upstream/_guides/stork.adoc:58
#, fuzzy
msgid "Before going further, we need to discuss discovery vs. selection."
msgstr "その前に、ディスカバリーとセレクションについて説明する必要があります。"

#. type: Plain text
#: upstream/_guides/stork.adoc:61
#, fuzzy
msgid "Service discovery is the process of locating service instances.  It produces a list of service instances that is potentially empty (if no service matches the request) or contains multiple service instances."
msgstr ""
"サービスディスカバリーとは、サービスインスタンスを探すプロセスのことです。サ"
"ービス・ディスカバリーでは、サービス・インスタンスのリストが作成されます。こ"
"のリストは、（リクエストにマッチするサービスがない場合）空の可能性もあれば、"
"複数のサービス・インスタンスを含む可能性もあります。"

#. type: Plain text
#: upstream/_guides/stork.adoc:64
#, fuzzy
msgid "Service selection, also called load-balancing, chooses the best instance from the list returned by the discovery process.  The result is a single service instance or an exception when no suitable instance can be found."
msgstr ""
"サービス選択はロードバランスとも呼ばれ、ディスカバリープロセスから返されたリ"
"ストの中から最適なインスタンスを選択します。その結果、1つのサービスインスタン"
"スになるか、適切なインスタンスが見つからない場合は例外となります。"

#. type: Plain text
#: upstream/_guides/stork.adoc:68
#, fuzzy
msgid "Stork handles both discovery and selection.  However, it does not handle the communication with the service but only provides a service instance.  The various integrations in Quarkus extract the location of the service from that service instance."
msgstr ""
"Storkは発見と選択の両方を扱う。しかし、サービスとの通信は処理せず、サービスイ"
"ンスタンスを提供するだけです。Quarkusの様々な統合機能は、そのサービスインスタ"
"ンスからサービスの場所を抽出します。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/stork.adoc:69
#, no-wrap
msgid "Discovery and Selection of services"
msgstr "ディスカバリーと選択"

#. type: Target for macro image
#: upstream/_guides/stork.adoc:69
#, no-wrap
msgid "stork-process.png"
msgstr ""

#. type: Title ==
#: upstream/_guides/stork.adoc:71
#, no-wrap
msgid "Bootstrapping the project"
msgstr "プロジェクトのブートストラップ"

#. type: Plain text
#: upstream/_guides/stork.adoc:74
msgid "Create a Quarkus project importing the quarkus-rest-client-reactive and quarkus-resteasy-reactive extensions using your favorite approach:"
msgstr "quarkus-rest-client-reactiveおよびquarkus-resteasy-reactiveエクステンションをインポートして、好きなアプローチでQuarkusプロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/stork.adoc:80
msgid "In the generated project, also add the following dependencies:"
msgstr "生成されたプロジェクトに、以下の依存関係を追加します:"

#. type: Block title
#: upstream/_guides/stork.adoc:82
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/stork.adoc:92
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.stork</groupId>\n"
"  <artifactId>stork-service-discovery-consul</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-consul-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/stork.adoc:95
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/stork.adoc:99
#, no-wrap
msgid ""
"implementation(\"io.smallrye.stork:stork-service-discovery-consul\")\n"
"implementation(\"io.smallrye.reactive:smallrye-mutiny-vertx-consul-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:103
#, fuzzy
msgid "`stork-service-discovery-consul` provides an implementation of service discovery for Consul.  `smallrye-mutiny-vertx-consul-client` is a Consul client which we will use to register our services in Consul."
msgstr ""
"`stork-service-discovery-consul` "
"はConsulのサービスディスカバリーの実装を提供しています。 `smallrye-mutiny-"
"vertx-consul-client` "
"はConsulのクライアントで、Consulにサービスを登録するために使用します。"

#. type: Title ==
#: upstream/_guides/stork.adoc:104
#, fuzzy, no-wrap
msgid "The Blue and Red services"
msgstr "青と赤のサービス"

#. type: Plain text
#: upstream/_guides/stork.adoc:107
#, fuzzy
msgid "Let's start with the very beginning: the service we will discover, select and call."
msgstr "まず最初に、これから発見し、選択し、呼び出すサービスについて説明します。"

#. type: Plain text
#: upstream/_guides/stork.adoc:109
msgid "Create the `src/main/java/org/acme/services/BlueService.java` with the following content:"
msgstr "以下の内容で `src/main/java/org/acme/services/BlueService.java` を作成してください。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:113 upstream/_guides/stork.adoc:148
#: upstream/_guides/stork.adoc:187
#, no-wrap
msgid "package org.acme.services;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:117 upstream/_guides/stork.adoc:152
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:120 upstream/_guides/stork.adoc:155
#: upstream/_guides/stork.adoc:197
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:123
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class BlueService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:125
#, no-wrap
msgid "    @ConfigProperty(name = \"blue-service-port\", defaultValue = \"9000\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:137
#, no-wrap
msgid ""
"    /**\n"
"     * Start an HTTP server for the blue service.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        vertx.createHttpServer()\n"
"                .requestHandler(req -> req.response().endAndForget(\"Hello from Blue!\"))\n"
"                .listenAndAwait(port);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:141
#, fuzzy
msgid "It creates a new HTTP server (using Vert.x) and implements our simple service when the application starts.  For each HTTP request, it sends a response with \"Hello from Blue!\" as the body."
msgstr ""
"アプリケーションの起動時に、新しいHTTPサーバー（Vert.xを使用）を作成し、私た"
"ちのシンプルなサービスを実装します。各HTTPリクエストに対して、\"Hello from "
"Blue!\"をボディとするレスポンスを送信します。"

#. type: Plain text
#: upstream/_guides/stork.adoc:143
#, fuzzy
msgid "Following the same logic, create the `src/main/java/org/acme/services/RedService.java` with the following content:"
msgstr "同じ要領で、以下の内容の `src/main/java/org/acme/services/RedService.java` "
"を作成します。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:159
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedService {\n"
"    @ConfigProperty(name = \"red-service-port\", defaultValue = \"9001\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:170
#, no-wrap
msgid ""
"    /**\n"
"     * Start an HTTP server for the red service.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        vertx.createHttpServer()\n"
"                .requestHandler(req -> req.response().endAndForget(\"Hello from Red!\"))\n"
"                .listenAndAwait(port);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:172 upstream/_guides/stork.adoc:295
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:175
#, fuzzy
msgid "This time, it writes \"Hello from Red!\"."
msgstr "今回は「赤からこんにちは！」と書かれています。"

#. type: Title ==
#: upstream/_guides/stork.adoc:176
#, fuzzy, no-wrap
msgid "Service registration in Consul"
msgstr "Consulでのサービス登録"

#. type: Plain text
#: upstream/_guides/stork.adoc:179
#, fuzzy
msgid "Now that we have implemented our services, we need to register them into Consul."
msgstr "サービスの実装が完了したので、Consulに登録する必要があります。"

#. type: Plain text
#: upstream/_guides/stork.adoc:181
#, fuzzy
msgid "Stork is not limited to Consul and integrates with other service discovery mechanisms."
msgstr "StorkはConsulに限らず、他のサービスディスカバリーメカニズムとも統合されていま"
"す。"

#. type: Plain text
#: upstream/_guides/stork.adoc:183
#, fuzzy
msgid "Create the `src/main/java/org/acme/services/Registration.java` file with the following content:"
msgstr "`src/main/java/org/acme/services/Registration.java` "
"ファイルを以下の内容で作成します。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:194
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.ext.consul.ServiceOptions;\n"
"import io.vertx.mutiny.ext.consul.ConsulClient;\n"
"import io.vertx.ext.consul.ConsulClientOptions;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:200
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Registration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:203
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"consul.host\") String host;\n"
"    @ConfigProperty(name = \"consul.port\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:206
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"blue-service-port\", defaultValue = \"9000\") int red;\n"
"    @ConfigProperty(name = \"red-service-port\", defaultValue = \"9001\") int blue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:214
#, no-wrap
msgid ""
"    /**\n"
"     * Register our two services in Consul.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        ConsulClient client = ConsulClient.create(vertx, new ConsulClientOptions().setHost(host).setPort(port));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:219
#, no-wrap
msgid ""
"        client.registerServiceAndAwait(\n"
"                new ServiceOptions().setPort(blue).setAddress(\"localhost\").setName(\"my-service\").setId(\"blue\"));\n"
"        client.registerServiceAndAwait(\n"
"                new ServiceOptions().setPort(red).setAddress(\"localhost\").setName(\"my-service\").setId(\"red\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:222
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:226
#, fuzzy
msgid "When the application starts, it connects to Consul using the Vert.x Consul Client and registers our two instances.  Both registration uses the same name (`my-service`), but different ids to indicate that it's two instances of the same _service_."
msgstr ""
"アプリケーションが起動すると、Vert.x Consul Clientを使ってConsulに接続し、2つ"
"のインスタンスを登録します。どちらの登録も同じ名前( `my-"
"service`)を使用していますが、同じ "
"_サービス_の2つのインスタンスであることを示すために異なるIDを使用しています。"

#. type: Title ==
#: upstream/_guides/stork.adoc:227
#, fuzzy, no-wrap
msgid "The REST Client interface and the front end API"
msgstr "RESTクライアントインターフェースとフロントエンドAPI"

#. type: Plain text
#: upstream/_guides/stork.adoc:230
#, fuzzy
msgid "So far, we didn't use Stork; we just scaffolded the services we will be discovering, selecting, and calling."
msgstr "ここまでは、Storkを使わずに、これから発見するサービス、選択するサービス、呼び"
"出すサービスを足場にしていました。"

#. type: Plain text
#: upstream/_guides/stork.adoc:233
#, fuzzy
msgid "We will call the services using the Reactive REST Client.  Create the `src/main/java/org/acme/MyService.java` file with the following content:"
msgstr ""
"Reactive REST Clientを使ってサービスを呼び出すことにします。以下の内容で `"
"src/main/java/org/acme/MyService.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:237 upstream/_guides/stork.adoc:272
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:239
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:243
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:253
#, no-wrap
msgid ""
"/**\n"
" * The REST Client interface.\n"
" *\n"
" * Notice the `baseUri`. It uses `stork://` as URL scheme indicating that the called service uses Stork to locate and\n"
" * select the service instance. The `my-service` part is the service name. This is used to configure Stork discovery\n"
" * and selection in the `application.properties` file.\n"
" */\n"
"@RegisterRestClient(baseUri = \"stork://my-service\")\n"
"public interface MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:258
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String get();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:265
#, fuzzy
msgid "It's a straightforward REST client interface containing a single method. However, note the `baseUri` attribute.  It starts with `stork://`.  It instructs the REST client to delegate the discovery and selection of the service instances to Stork.  Notice the `my-service` part in the URL.  It is the service name we will be using in the application configuration."
msgstr ""
"これは、1つのメソッドを含む単純なRESTクライアントインターフェイスです。ただし"
"、 `baseUri` 属性に注意してください。 `stork://` で始まっています。これは、RE"
"STクライアントがサービスインスタンスの発見と選択をStorkに委ねることを指示して"
"います。また、URLの `my-service` "
"にもご注目ください。これは、アプリケーションの設定で使用するサービス名です。"

#. type: Plain text
#: upstream/_guides/stork.adoc:268
#, fuzzy
msgid "It does not change how the REST client is used.  Create the `src/main/java/org/acme/FrontendApi.java` file with the following content:"
msgstr ""
"RESTクライアントの使用方法を変更するものではありません。以下の内容で `src/"
"main/java/org/acme/FrontendApi.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:274
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:279
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/stork.adoc:285
#, no-wrap
msgid ""
"/**\n"
" * A frontend API using our REST Client (which uses Stork to locate and select the service instance on each call).\n"
" */\n"
"@Path(\"/api\")\n"
"public class FrontendApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:287
#, no-wrap
msgid "    @RestClient MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:293
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String invoke() {\n"
"        return service.get();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:298
#, fuzzy
msgid "It injects and uses the REST client as usual."
msgstr "通常通り、RESTクライアントを注入して使用します。"

#. type: Title ==
#: upstream/_guides/stork.adoc:299
#, no-wrap
msgid "Stork configuration"
msgstr "Stork設定"

#. type: Plain text
#: upstream/_guides/stork.adoc:302
#, fuzzy
msgid "The system is almost complete. We only need to configure Stork and the `Registration` bean."
msgstr "システムはほぼ完成しています。あとはStorkと `Registration` "
"ビーンを設定するだけです。"

#. type: Plain text
#: upstream/_guides/stork.adoc:304
#, fuzzy
msgid "In the `src/main/resources/application.properties`, add:"
msgstr "`src/main/resources/application.properties` 、加える。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:309
#, no-wrap
msgid ""
"consul.host=localhost\n"
"consul.port=8500\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:314
#, no-wrap
msgid ""
"quarkus.stork.my-service.service-discovery.type=consul\n"
"quarkus.stork.my-service.service-discovery.consul-host=localhost\n"
"quarkus.stork.my-service.service-discovery.consul-port=8500\n"
"quarkus.stork.my-service.load-balancer.type=round-robin\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:317
#, fuzzy
msgid "The first two lines provide the Consul location used by the `Registration` bean."
msgstr "最初の2行は、 `Registration` "
"ビーンが使用するConsulのロケーションを提供します。"

#. type: Plain text
#: upstream/_guides/stork.adoc:324
#, fuzzy
msgid "The other properties are related to Stork.  `stork.my-service.service-discovery` indicates which type of service discovery we will be using to locate the `my-service` service.  In our case, it's `consul`.  `quarkus.stork.my-service.service-discovery.consul-host` and `quarkus.stork.my-service.service-discovery.consul-port` configures the access to Consul.  Finally, `quarkus.stork.my-service.load-balancer.type` configures the service selection.  In our case, we use a `round-robin`."
msgstr ""
"`stork.my-service.service-discovery` は、 `my-service` "
"サービスの検索に使用するサービスディスカバリーのタイプを示しています。 "
"`consul` `stork.my-service.service-discovery.consul-host` と `stork.my-"
"service.service-discovery.consul-port` は Consul "
"へのアクセスを設定します。最後に、 `stork.my-service.load-balancer` "
"は、サービスの選択を設定します。今回のケースでは、 `round-robin`."

#. type: Title ==
#: upstream/_guides/stork.adoc:325
#, fuzzy, no-wrap
msgid "Running the application"
msgstr "アプリケーションのアーキテクチャ"

#. type: Plain text
#: upstream/_guides/stork.adoc:329
#, fuzzy
msgid "We're done! So, let's see if it works."
msgstr "できました！（笑では、実際に動くかどうか見てみましょう。"

#. type: Plain text
#: upstream/_guides/stork.adoc:331
msgid "First, start Consul:"
msgstr "まず、Consulを起動します:"

#. type: delimited block -
#: upstream/_guides/stork.adoc:335
#, no-wrap
msgid "docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:338
msgid "If you start Consul differently, do not forget to edit the application configuration."
msgstr "Consulを別の方法で起動する場合は、アプリケーションの設定を編集することを忘れないでください。"

#. type: Plain text
#: upstream/_guides/stork.adoc:340
msgid "Then, package the application:"
msgstr "次に、アプリケーションをパッケージ化します:"

#. type: Plain text
#: upstream/_guides/stork.adoc:344
msgid "And run it:"
msgstr "そして実行します:"

#. type: delimited block -
#: upstream/_guides/stork.adoc:348
#, no-wrap
msgid "> java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:351
msgid "In another terminal, run:"
msgstr "別の端末で、次を実行します。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:360
#, no-wrap
msgid ""
"> curl http://localhost:8080/api\n"
"...\n"
"> curl http://localhost:8080/api\n"
"...\n"
"> curl http://localhost:8080/api\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:363
#, fuzzy
msgid "The responses alternate between `Hello from Red!` and `Hello from Blue!`."
msgstr "回答は `Hello from Red!` と `Hello from Blue!` の間で交互に行われます。"

#. type: Plain text
#: upstream/_guides/stork.adoc:365
#, fuzzy
msgid "You can compile this application into a native executable:"
msgstr "このアプリケーションをネイティブ実行可能ファイルにコンパイルして、起動するこ"
"とができます。"

#. type: Plain text
#: upstream/_guides/stork.adoc:369
#, fuzzy
msgid "And start it with:"
msgstr "と始める。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:373
#, no-wrap
msgid "> ./target/stork-getting-started-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/stork.adoc:375
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_guides/stork.adoc:379
msgid "This guide has shown how to use SmallRye Stork to discover and select your services.  You can find more about Stork in:"
msgstr "このガイドでは、SmallRye Storkを使ってサービスを発見し、選択する方法を紹介しました。Storkについては、以下のページで詳しく紹介しています:"

#. type: Plain text
#: upstream/_guides/stork.adoc:381
msgid "the xref:stork-reference.adoc[Stork reference guide],"
msgstr "xref:stork-reference.adoc[Stork リファレンスガイド],"

#. type: Plain text
#: upstream/_guides/stork.adoc:381
msgid "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."
msgstr "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 15 minutes"
#~ msgstr "15分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Docker"
#~ msgstr "Docker"

#~ msgid "GraalVM installed if you want to build a native executable."
#~ msgstr "ネイティブモードで実行する場合は、GraalVM がインストールされていること"

#, fuzzy
#~ msgid "Create a Quarkus project using your favorite approach, and select the following extensions:"
#~ msgstr "お好みの方法でQuarkusプロジェクトを作成し、以下のエクステンションを選択します。"

#, fuzzy
#~ msgid "quarkus-rest-client-reactive"
#~ msgstr "quarkus-rest-client-reactive"

#~ msgid "quarkus-resteasy-reactive"
#~ msgstr "quarkus-resteasy-reactive"
