# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/rest-client-multipart.adoc:6
#, no-wrap
msgid "Using the REST Client with Multipart"
msgstr "マルチパートでのRESTクライアントの使用"

#. type: delimited block =
#: upstream/_guides/rest-client-multipart.adoc:13
#, fuzzy
msgid "This guide is about the multipart support of the REST Client compatible with https://resteasy.dev[RESTEasy Classic] which used to be the default JAX-RS implementation until Quarkus 2.8."
msgstr "このガイドは、Quarkus 2.8までデフォルトのJAX-RS実装であった link:https://resteasy.dev[RESTEasy Classicと]互換性のあるREST Clientのマルチパート対応について説明します。"

#. type: delimited block =
#: upstream/_guides/rest-client-multipart.adoc:17
#, fuzzy
msgid "It is now recommended to use RESTEasy Reactive, which supports equally well traditional blocking workloads and reactive workloads.  For more information about RESTEasy Reactive, please see the xref:rest-client-reactive.adoc[REST Client Reactive guide] and, for the server side, the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:resteasy-reactive.adoc[RESTEasy Reactive guide]."
msgstr "現在では、従来のブロック型ワークロードとリアクティブ型ワークロードを同様にサポートするRESTEasy Reactiveの使用が推奨されています。RESTEasy Reactiveの詳細については、 link:rest-client-reactive.html[REST Client Reactiveガイド]、サーバーサイドについては、 link:rest-json.html[REST JSON入門ガイド]、または link:resteasy-reactive.html[RESTEasy Reactive]詳細 link:resteasy-reactive.html[ガイドを]参照してください。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:20
#, fuzzy
msgid "RESTEasy has rich support for the `multipart/*` and `multipart/form-data` mime types. The multipart mime format is used to pass lists of content bodies. Multiple content bodies are embedded in one message. `multipart/form-data` is often found in web application HTML Form documents and is generally used to upload files. The form-data format is the same as other multipart formats, except that each inlined piece of content has a name associated with it."
msgstr "RESTEasyは、 `multipart/*` と `multipart/form-data` のマイムタイプを豊富にサポートしています。マルチパート mime 形式は、コンテンツボディのリストを渡すために使用されます。 `multipart/form-data` は Web アプリケーションの HTML Form ドキュメントでよく見られ、一般的にはファイルのアップロードに使用されます。form-dataフォーマットは、他のマルチパートフォーマットと同じですが、インライン化された各コンテンツに名前が関連付けられています。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:24
#, fuzzy
msgid "This guide explains how to use the RESTEasy REST Client with Multipart in order to interact with REST APIs requiring `multipart/form-data` content-type with very little effort."
msgstr "このガイドでは、RESTEasy REST Client with Multipartを使用して、 `multipart/form-data` content-typeを必要とするREST APIとほとんど手間をかけずに対話する方法を説明します。"

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:29
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:33
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:35
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:37
#, fuzzy
msgid "The solution is located in the `rest-client-multipart-quickstart` {quickstarts-tree-url}/rest-client-multipart-quickstart[directory]."
msgstr "このソリューションは、 `rest-client-multipart-quickstart` {quickstarts-tree-url}/rest-client-multipart-quickstart[directory]にあります。"

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:38
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:41
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:50
#, fuzzy
msgid "This command generates the Maven project with a REST endpoint and imports the `rest-client` and `resteasy` extensions.  It also adds the `resteasy-multipart` extension to support `multipart/form-data` requests."
msgstr "このコマンドは、RESTエンドポイントを持つMavenプロジェクトを生成し、 `rest-client` と `resteasy` のエクステンションをインポートします。また、 `multipart/form-data` のリクエストをサポートするために `resteasy-multipart` のエクステンションを追加します。"

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:51
#, no-wrap
msgid "Setting up the model"
msgstr "モデルのセットアップ"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:55
#, fuzzy
msgid "In this guide we will be demonstrating how to invoke a REST service accepting `multipart/form-data` input.  We are assuming the payload is well-known before the request is sent, so we can model as a POJO."
msgstr "このガイドでは、 `multipart/form-data` の入力を受け付ける REST サービスを起動する方法を紹介します。リクエストが送信される前にペイロードが知られていることを想定しているので、POJOとしてモデル化することができます。"

#. type: delimited block =
#: upstream/_guides/rest-client-multipart.adoc:59
#, fuzzy
msgid "If the payload is unknown, you can also use the RESTEasy custom API instead. If that's the case, see the RESTEasy Multipart Providers link at the end of the guide."
msgstr "ペイロードが不明な場合は、代わりに RESTEasy のカスタム API を使用することもできます。その場合は、ガイドの最後にある「RESTEasy Multipart Providers」のリンクを参照してください。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:62
#, fuzzy
msgid "Our first order of business is to setup the model we will be using to define the `multipart/form-data` payload, in the form of a `MultipartBody` POJO."
msgstr "まず最初に、 `multipart/form-data` のペイロードを定義するために使用するモデルを `MultipartBody` POJO の形で設定します。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:64
#, fuzzy
msgid "Create a `src/main/java/org/acme/rest/client/multipart/MultipartBody.java` file and set the following content:"
msgstr "`src/main/java/org/acme/rest/client/multipart/MultipartBody.java` ファイルを作成し、以下の内容を設定します。"

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:68
#: upstream/_guides/rest-client-multipart.adoc:100
#: upstream/_guides/rest-client-multipart.adoc:166
#: upstream/_guides/rest-client-multipart.adoc:238
#, no-wrap
msgid "package org.acme.rest.client.multipart;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:70
#, no-wrap
msgid "import java.io.InputStream;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:73
#, no-wrap
msgid ""
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:75
#, no-wrap
msgid "import org.jboss.resteasy.annotations.providers.multipart.PartType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:77
#, no-wrap
msgid "public class MultipartBody {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:81
#, no-wrap
msgid ""
"    @FormParam(\"file\")\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public InputStream file;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:86
#, no-wrap
msgid ""
"    @FormParam(\"fileName\")\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String fileName;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:89
#: upstream/_guides/rest-client-multipart.adoc:128
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上のコードのアノテーションの目的は以下の通りです。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:91
#, fuzzy
msgid "`@FormParam` is a standard JAX-RS annotation used to define a form parameter contained within a request entity body"
msgstr "`@FormParam` は、リクエスト・エンティティ・ボディに含まれるフォーム・パラメータを定義するために使用される標準的なJAX-RSアノテーションです。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:92
#, fuzzy
msgid "`@PartType` is a RESTEasy specific annotation required when a client performs a multipart request and defines the content type for the part."
msgstr "`@PartType` は、クライアントがマルチパートのリクエストを実行し、パートのコンテンツタイプを定義する際に必要となる、RESTEasy特有のアノテーションです。"

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:93
#, no-wrap
msgid "Create the interface"
msgstr "インターフェースの作成"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:96
#, fuzzy
msgid "Using the RESTEasy REST Client is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/multipart/MultipartService.java` and have the following content:"
msgstr "RESTEasy REST Client を使用するには、適切な JAX-RS と MicroProfile のアノテーションを使用してインターフェイスを作成するだけです。今回のケースでは、インターフェイスは `src/main/java/org/acme/rest/client/multipart/MultipartService.java` で作成し、次のような内容にします。"

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:106
#: upstream/_guides/rest-client-multipart.adoc:215
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:109
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.providers.multipart.MultipartForm;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:113
#, no-wrap
msgid ""
"@Path(\"/echo\")\n"
"@RegisterRestClient\n"
"public interface MultipartService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:118
#, no-wrap
msgid ""
"    @POST\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String sendMultipartData(@MultipartForm MultipartBody data);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:120
#: upstream/_guides/rest-client-multipart.adoc:261
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:124
#, fuzzy
msgid "The `sendMultipartData` method gives our code the ability to POST a `multipart/form-data` request to our Echo service (running in the same server for demo purposes).  Because in this demo we have the exact knowledge of the `multipart/form-data` packets, we can map them to the model class created in the previous section using the `@org.jboss.resteasy.annotations.providers.multipart.MultipartForm` annotation."
msgstr "`sendMultipartData` メソッドは、コードに `multipart/form-data` リクエストを Echo サービスに POST する機能を与えます（デモ用に同じサーバーで実行しています）。このデモでは、 `multipart/form-data` パケットの正確な知識を持っているので、 `@org.jboss.resteasy.annotations.providers.multipart.MultipartForm` アノテーションを使用して、前のセクションで作成したモデルクラスにマッピングすることができます。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:126
#, fuzzy
msgid "The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr "ネットワーキングやマーシャリングはすべてクライアントが行いますので、私たちのコードにはそのような技術的な詳細は含まれません。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:131
msgid "`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client"
msgstr "`@RegisterRestClient` により、Quarkusは、このインターフェイスがRESTクライアントとしてCDIインジェクションに利用可能であることを知ることができます。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:132
msgid "`@Path`, `@GET` and `@PathParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr "`@Path` 、 `@GET` 、 `@PathParam` は、サービスへのアクセス方法を定義するために使用される標準的な JAX-RS アノテーションです。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:133
#, fuzzy
msgid "`@MultipartForm` defines the parameter as a value object for incoming/outgoing request/responses of the multipart/form-data mime type."
msgstr "`@MultipartForm` は、multipart/form-data MIME タイプの受信/送信リクエスト/レスポンスの値オブジェクトとしてパラメータを定義しています。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:134
#, fuzzy
msgid "`@Consumes` defines the expected content-type consumed by this request (parameters)"
msgstr "`@Consumes` このリクエストで消費される予想されるコンテントタイプを定義します（パラメータ）。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:135
#, fuzzy
msgid "`@Produces` defines the expected content-type produced by this request (return type)"
msgstr "`@Produces` は、このリクエストによって生成される期待されるコンテンツタイプ（リターンタイプ）を定義します。"

#. type: delimited block =
#: upstream/_guides/rest-client-multipart.adoc:140
#, fuzzy
msgid "While `@Consumes` and `@Produces` are optional as auto-negotiation is supported, it is heavily recommended to annotate your endpoints with them to define precisely the expected content-types."
msgstr "自動ネゴシエーションがサポートされているため、 `@Consumes` と `@Produces` はオプションですが、期待されるコンテントタイプを正確に定義するために、エンドポイントにアノテーションを付けることを強く推奨します。"

#. type: delimited block =
#: upstream/_guides/rest-client-multipart.adoc:142
#, fuzzy
msgid "It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr "これにより、ネイティブ実行可能ファイルに含まれるJAX-RSプロバイダー（コンバーターとも言える）の数を絞ることができます。"

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:144
#, no-wrap
msgid "Create the configuration"
msgstr "コンフィグレーションの作成"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:148
msgid "In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.  The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "REST 呼び出しが行われるベース URL を決定するために、REST クライアントは `application.properties` からの設定を使用します。プロパティーの名前は、以下のコードで表示される特定の規則に従う必要があります。"

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:153
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.multipart.MultipartService\".url=http://localhost:8080/\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:156
#, fuzzy
msgid "Having this configuration means that all requests performed using `org.acme.rest.client.multipart.MultipartService` will use `http://localhost:8080/ ` as the base URL."
msgstr "この設定をすると、 `org.acme.rest.client.multipart.MultipartService` を使って実行されるすべてのリクエストは、ベースURLとして `http://localhost:8080/ ` を使用することになります。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:158
#, fuzzy
msgid "Note that `org.acme.rest.client.multipart.MultipartService` _must_ match the fully qualified name of the `MultipartService` interface we created in the previous section."
msgstr "なお、「 `org.acme.rest.client.multipart.MultipartService` 」は、前のセクションで作成した「 `MultipartService` 」インターフェースの完全修飾名と一致してい _なければなりません_。"

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:159
#, fuzzy, no-wrap
msgid "Create the JAX-RS resource"
msgstr "JAX-RSリソースの更新"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:162
#, fuzzy
msgid "Create the `src/main/java/org/acme/rest/client/multipart/MultipartClientResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/rest/client/multipart/MultipartClientResource.java` のファイルを開き、以下の内容で更新します。"

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:169
#, no-wrap
msgid ""
"import java.io.ByteArrayInputStream;\n"
"import java.nio.charset.StandardCharsets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:175
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:177
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:180
#, no-wrap
msgid ""
"@Path(\"/client\")\n"
"public class MultipartClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:184
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    MultipartService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:195
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/multipart\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String sendFile() throws Exception {\n"
"        MultipartBody body = new MultipartBody();\n"
"        body.fileName = \"greeting.txt\";\n"
"        body.file = new ByteArrayInputStream(\"HELLO WORLD\".getBytes(StandardCharsets.UTF_8));\n"
"        return service.sendMultipartData(body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:198
#, fuzzy
msgid "Note that in addition to the standard CDI `@Inject` annotation, we also need to use the MicroProfile `@RestClient` annotation to inject `MultipartService`."
msgstr "なお、標準のCDI `@Inject` アノテーションに加えて、MicroProfile `@RestClient` アノテーションを使って `MultipartService` を注入する必要があります。"

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:200
#, fuzzy, no-wrap
msgid "Creating the server"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:203
#, fuzzy
msgid "For demo purposes, let's create a simple Echo endpoint that will act as the server part."
msgstr "デモのために、サーバー部分として機能するシンプルなEchoエンドポイントを作成してみましょう。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:205
#, fuzzy
msgid "Create the directory `src/main/java/org/acme/rest/client/multipart/server` and include a `EchoService.java` file with the following content:"
msgstr "ディレクトリ `src/main/java/org/acme/rest/client/multipart/server` を作成し、以下の内容の `EchoService.java` ファイルを入れます。"

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:209
#, no-wrap
msgid "package org.acme.rest.client.multipart.server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:218
#, no-wrap
msgid ""
"@Path(\"/echo\")\n"
"public class EchoService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:226
#, no-wrap
msgid ""
"    @POST\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String echo(String requestBody) throws Exception {\n"
"        return requestBody;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:229
#, fuzzy
msgid "This will just return the request body and it's useful for testing purposes."
msgstr "これは単にリクエストボディを返すだけなので、テスト目的には便利です。"

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:230
#, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:234
#, fuzzy
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/rest/client/multipart/MultipartClientResourceTest.java` file to:"
msgstr "また、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。 `src/test/java/org/acme/rest/client/multipart/MultipartClientResourceTest.java` ファイルを編集します。"

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:241
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:244
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.containsString;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:247
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MultipartClientResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:259
#, no-wrap
msgid ""
"    @Test\n"
"    public void testMultipartDataIsSent() {\n"
"        given()\n"
"                .when().post(\"/client/multipart\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body( containsString(\"Content-Disposition: form-data; name=\\\"file\\\"\"),\n"
"                        containsString(\"HELLO WORLD\"),\n"
"                        containsString(\"Content-Disposition: form-data; name=\\\"fileName\\\"\"),\n"
"                        containsString(\"greeting.txt\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:264
#, fuzzy
msgid "The code above uses link:http://rest-assured.io/[REST Assured] to assert that the returned content from the echo service contains multipart elements"
msgstr "上記のコードでは、 link:http://rest-assured.io/[REST Assured]を使用して、エコーサービスから返されるコンテンツにマルチパート要素が含まれていることを表明しています。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:266
#, fuzzy
msgid "Because the test runs in a different port, we also need to include an `application.properties` in our `src/test/resources` with the following content:"
msgstr "`src/test/resources` テストは別のポートで実行されるため、次のような内容の `application.properties` も入れておく必要があります。"

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:271
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.multipart.MultipartService\".url=http://localhost:8081/\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:273
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:276
#, fuzzy
msgid "Run the application with:"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:280
#, fuzzy
msgid "In a terminal, run `curl -X POST http://localhost:8080/client/multipart`"
msgstr "ターミナルで、以下を実行します。 `curl -X POST <a href=\"http://localhost:8080/client/multipart\" class=\"bare\">http://localhost:8080/client/multipart</a>`"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:282
#, fuzzy
msgid "You should see an output similar to:"
msgstr "以下のような出力が表示されるはずです。"

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:288
#, no-wrap
msgid ""
"--89d288bd-960f-460c-b266-64c5b4d170fa\n"
"Content-Disposition: form-data; name=\"fileName\"\n"
"Content-Type: text/plain\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:293
#, no-wrap
msgid ""
"greeting.txt\n"
"--89d288bd-960f-460c-b266-64c5b4d170fa\n"
"Content-Disposition: form-data; name=\"file\"\n"
"Content-Type: application/octet-stream\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-multipart.adoc:296
#, no-wrap
msgid ""
"HELLO WORLD\n"
"--89d288bd-960f-460c-b266-64c5b4d170fa--\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:299
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:303
#, fuzzy
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして、 `java -jar target/quarkus-app/quarkus-run.jar` で実行しました。"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:305
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#. type: Title ==
#: upstream/_guides/rest-client-multipart.adoc:308
#, no-wrap
msgid "Further reading"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:311
#, fuzzy
msgid "link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider]"
msgstr "link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasyマルチパートプロバイダ]"

#. type: Plain text
#: upstream/_guides/rest-client-multipart.adoc:311
#, fuzzy
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-1.4.1/microprofile-rest-client-1.4.1.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-1.4.1/microprofile-rest-client-1.4.1.html[MicroProfile Rest Client仕様]"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 15 minutes"
#~ msgstr "15分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#, fuzzy
#~ msgid "Run the application with: `./mvnw compile quarkus:dev`."
#~ msgstr "`./mvnw compile quarkus:dev` でアプリケーションを実行してください。"

#~ msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `target/quarkus-app/quarkus-run.jar` file.  You can also generate the native executable with `./mvnw clean package -Pnative`."
#~ msgstr "いつものように、 `./mvnw clean package` を使ってアプリケーションをパッケージ化し、 `target/quarkus-app/quarkus-run.jar` ファイルを使って実行することができます。また、 `./mvnw clean package -Pnative` でネイティブ実行可能ファイルを生成することも出来ます。"
