# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-11 10:12+0000\n"
"PO-Revision-Date: 2022-02-03 10:24+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-web-authentication.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenID Connect (OIDC) to Protect Web Applications using Authorization Code Flow"
msgstr "OpenID Connect（OIDC）を利用した認証コードフローによるWebアプリケーションの保護"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:12
#, fuzzy
msgid "This guide demonstrates how to use Quarkus OpenID Connect (OIDC) Extension to protect your Quarkus HTTP endpoints using OpenID Connect Authorization Code Flow supported by OpenID Connect compliant Authorization Servers such as https://www.keycloak.org[Keycloak]."
msgstr "このガイドでは、Quarkus OpenID Connect（OIDC） Extensionを使用して、 link:https://www.keycloak.org[Keycloak]などのOpenID Connect準拠の認証サーバーでサポートされているOpenID Connect Authorization Code Flowを使用してQuarkus HTTPエンドポイントを保護する方法を説明します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:14
msgid "The extension allows to easily authenticate the users of your web application by redirecting them to the OpenID Connect Provider (e.g.: Keycloak) to login and, once the authentication is complete, return them back with the code confirming the successful authentication. The extension will request ID and access tokens from the OpenID Connect Provider using an authorization code grant and verify these tokens in order to authorize an access to the application."
msgstr "このエクステンションは、OpenID Connect Provider (例: Keycloak) にリダイレクトしてログインさせ、認証が完了したら、認証に成功したことを確認するコードを使って、ウェブアプリケーションのユーザーを簡単に認証することができます。エクステンションは、認可コードグラントを使用して OpenID Connect Provider から ID とアクセストークンを要求し、アプリケーションへのアクセスを承認するためにこれらのトークンを検証します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:16
#, fuzzy
msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
msgstr "Bearer Token Authorizationを使用してアプリケーションを保護する必要がある場合は、「 link:security-openid-connect.html[Using OpenID Connect to Protect Service]Applications」ガイドをお読みください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:18
#, fuzzy
msgid "Please read the xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr "複数のテナントをサポートする方法については、 link:security-openid-connect-multitenancy.html[Using OpenID Connect Multi-Tenancy]ガイドをご覧ください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:19
#, no-wrap
msgid "Quickstart"
msgstr "クイックスタート"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:21
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:26
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:29
msgid "In this example, we build a very simple web application with a single page:"
msgstr "この例では、1ページの非常にシンプルなWebアプリケーションを構築しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:31
msgid "`/index.html`"
msgstr "`/index.html`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:33
msgid "This page is protected and can only be accessed by authenticated users."
msgstr "このページは保護されており、認証されたユーザーのみがアクセスできます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:34
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:38
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:40
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:42
msgid "The solution is located in the `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[ディレクトリ] にあります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:43
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:46
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:53
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `oidc` エクステンションを追加することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:58
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_guides/security-openid-connect-web-authentication.adoc:60
#: upstream/_guides/security-openid-connect-web-authentication.adoc:866
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1096
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1129
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1249
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:66
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-openid-connect-web-authentication.adoc:69
#: upstream/_guides/security-openid-connect-web-authentication.adoc:876
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1117
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1139
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1259
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:72
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:74
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:77
msgid "Let's write a simple JAX-RS resource which has all the tokens returned in the authorization code grant response injected:"
msgstr "認可コードグラントのレスポンスで返されたすべてのトークンが注入されたシンプルなJAX-RSリソースを書いてみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:81
#, no-wrap
msgid "package org.acme.security.openid.connect.web.authentication;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:86
#: upstream/_guides/security-openid-connect-web-authentication.adoc:754
#: upstream/_guides/security-openid-connect-web-authentication.adoc:825
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:88
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:91
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.oidc.RefreshToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:94
#, no-wrap
msgid ""
"@Path(\"/tokens\")\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:101
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:107
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:113
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Refresh Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    RefreshToken refreshToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:126
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose these tokens in a real application.\n"
"     *\n"
"     * @return a HTML page containing the tokens available to the application\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    public String getTokens() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\")\n"
"                .append(\"<ul>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:128
#, no-wrap
msgid "        Object userName = this.idToken.getClaim(\"preferred_username\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:132
#, no-wrap
msgid ""
"        if (userName != null) {\n"
"            response.append(\"<li>username: \").append(userName.toString()).append(\"</li>\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:134
#, no-wrap
msgid "        Object scopes = this.accessToken.getClaim(\"scope\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:138
#, no-wrap
msgid ""
"        if (scopes != null) {\n"
"            response.append(\"<li>scopes: \").append(scopes.toString()).append(\"</li>\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:140
#, no-wrap
msgid "        response.append(\"<li>refresh_token: \").append(refreshToken.getToken() != null).append(\"</li>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:144
#, no-wrap
msgid ""
"        return response.append(\"</ul>\").append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:147
msgid "This endpoint has ID, access and refresh tokens injected. It returns a `preferred_username` claim from the ID token, a `scope` claim from the access token and also a refresh token availability status."
msgstr "このエンドポイントには、ID、アクセス、およびリフレッシュ トークンが注入されています。ID トークンから `preferred_username` クレーム、アクセス トークンから `scope` クレーム、およびリフレッシュ トークンの可用性ステータスを返します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:149
msgid "Note that you do not have to inject the tokens - it is only required if the endpoint needs to use the ID token to interact with the currently authenticated user or use the access token to access a downstream service on behalf of this user."
msgstr "基本的にトークンを注入する必要はありません。エンドポイントが ID トークンを使用して現在認証されているユーザーとやりとりする必要がある場合や、アクセス・トークンを使用してこのユーザーに代わってダウンストリーム・サービスにアクセスする必要がある場合にのみ必要となります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:151
msgid "Please see <<access_id_and_access_tokens,Access ID and Access Tokens>> section below for more information."
msgstr "詳しくは下記の link:#access_id_and_access_tokens[アクセスID・アクセストークン] の項をご覧ください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:152
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:155
msgid "The OpenID Connect extension allows you to define the configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr "OpenID Connect エクステンションを使用すると、src/main/resources` ディレクトリーにあるはずの `application.properties` ファイルを使用して設定を定義することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:164
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:167
msgid "This is the simplest configuration you can have when enabling authentication to your application."
msgstr "これは、アプリケーションへの認証を有効にする際に最もシンプルな設定です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:169
#, fuzzy
msgid "The `quarkus.oidc.client-id` property references the `client_id` issued by the OpenID Connect Provider and the `quarkus.oidc.credentials.secret` property sets the client secret."
msgstr "`quarkus.oidc.client-id` プロパティは、OpenID Connect Provider が発行した `client_id` を参照し、 `quarkus.oidc.credentials.secret` プロパティは、クライアントシークレットを設定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:171
msgid "The `quarkus.oidc.application-type` property is set to `web-app` in order to tell Quarkus that you want to enable the OpenID Connect Authorization Code Flow, so that your users are redirected to the OpenID Connect Provider to authenticate."
msgstr "OpenID Connect 認可コードフローを有効にしたいことをQuarkusに伝えるために、 `quarkus.oidc.application-type` プロパティーは、 `web-app` に設定します。これにより、ユーザーが認証のためにOpenID Connect Providerにリダイレクトされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:174
#, fuzzy
msgid "For last, the `quarkus.http.auth.permission.authenticated` permission is set to tell Quarkus about the paths you want to protect. In this case, all paths are being protected by a policy that ensures that only `authenticated` users are allowed to access. For more details check xref:security-authorization.adoc[Security Authorization Guide]."
msgstr "最後に、保護したいパスをQuarkusに伝えるために、 `quarkus.http.auth.permission.authenticated` のパーミッションを設定します。このケースでは、すべてのパスがポリシーによって保護されており、 `authenticated` ユーザーのみがアクセスを許可されています。詳細については、「 link:security-authorization.html[セキュリティ認証ガイド」]を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:175
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloakサーバーの起動と設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:178
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak Serverを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:182
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:185
#, fuzzy
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、 `keycloak.version` は、 `17.0.0` 以降に設定する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:187
#, fuzzy
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "Keycloakサーバーには、 link:http://localhost:8180/auth[localhost:8180/auth] でアクセスできるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:189
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:191
msgid "Import the {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "新しいレルムを作成するには、{quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm構成ファイル]をインポートします。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムの作成] 方法についてのKeycloakのドキュメントを参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:192
#, fuzzy, no-wrap
msgid "Running the Application in Dev and JVM modes"
msgstr "開発モードとJVMモードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:195
#, fuzzy
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションをdevモードで実行するには、 `./mvnw clean compile quarkus:dev`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:199
#, fuzzy
msgid "When you're done playing with dev mode you can run it as a standard Java application."
msgstr "`dev` モードでの遊びが終わったら、標準的なJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:201
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:205
msgid "Then run it:"
msgstr "それから以下で実行してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:209
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:211
#, fuzzy, no-wrap
msgid "Running the Application in Native Mode"
msgstr "アプリケーションの実行と使用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:214
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。修正は必要ありません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:218
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:221
#, fuzzy
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the native build:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:225
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを一杯飲んだら、このバイナリーを直接実行出来るようになります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:229
#, no-wrap
msgid "./target/security-openid-connect-web-authentication-quickstart-runner\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:231
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:234
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "テストするには、ブラウザを開いて以下のURLにアクセスする必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:236
#, fuzzy
msgid "http://localhost:8080/tokens[http://localhost:8080/tokens]"
msgstr "link:http://localhost:8080[http://localhost:8080]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:238
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate."
msgstr "すべてが期待通りに動作している場合は、認証のためにKeycloakサーバーにリダイレクトされるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:240
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "アプリケーションを認証するためには、Keycloakのログインページで以下の認証情報を入力する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:242
msgid "Username: *alice*"
msgstr "Username: *alice*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:243
msgid "Password: *alice*"
msgstr "Password: *alice*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:245
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "`Login` ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:247
#, fuzzy
msgid "Please also see the <<integration-testing-keycloak-devservices, Dev Services for Keycloak>> section below about writing the integration tests which depend on `Dev Services for Keycloak`."
msgstr "`Dev Services for Keycloak` に依存する統合テストの記述については、以下の「 link:#integration-testing-keycloak-devservices[Keycloak の開発サービス]」のセクションも参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:248
#, fuzzy, no-wrap
msgid "Reference Guide"
msgstr "参照"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:251
#, no-wrap
msgid "Accessing ID and Access Tokens"
msgstr "IDとアクセストークンへのアクセス"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:254
#, fuzzy
msgid "OIDC Code Authentication Mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token and Refresh Token."
msgstr "OIDCコード認証機構は、認証コードの流れの中で、3つのトークンを取得します。 link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken]、Access Token、Refresh Tokenです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:257
#, fuzzy
msgid "ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.  One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr "ID トークンは常に JWT トークンであり、JWT クレームでユーザー認証を表すために使用されます。 `JsonWebToken` に `IdToken` の修飾子をつけることで、ID Token クレームにアクセスすることができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:264
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:268
#: upstream/_guides/security-openid-connect-web-authentication.adoc:292
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:272
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:278
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:281
#, fuzzy
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged in user. The raw access token can be accessed as follows:"
msgstr "アクセストークンは通常、OIDC `web-app` アプリケーションが、現在ログインしているユーザーに代わって他のエンドポイントにアクセスする際に使用されます。生のアクセストークンは以下のようにしてアクセスできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:288
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:295
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:299
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:305
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:310
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:313
#, fuzzy
msgid "Note that `AccessTokenCredential` will have to be used if the Access Token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to `JsonWebToken`."
msgstr "なお、Quarkus `web-app` アプリケーションに発行されたAccess Tokenが不透明（バイナリ）で、 `JsonWebToken` に解析できない場合は、 `AccessTokenCredential` を使用する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:315
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "`JsonWebToken` と `AccessTokenCredential` のインジェクションは、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:317
#, fuzzy
msgid "RefreshToken is only used to refresh the current ID and access tokens as part of its <<session-management,session management>> process."
msgstr "RefreshTokenは、 link:#session-management[セッション管理]プロセスの一環として、現在のIDおよびアクセストークンを更新するためにのみ使用されます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:319
#, no-wrap
msgid "User Info"
msgstr "ユーザー情報"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:322
#, fuzzy
msgid "If IdToken does not provide enough information about the currently authenticated user then you can set a `quarkus.oidc.authentication.user-info-required=true` property for a https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC userinfo endpoint to be requested."
msgstr "IdTokenでは現在認証されているユーザーに関する十分な情報が得られない場合は、 `quarkus.oidc.authentication.user-info-required=true` プロパティを設定して、OIDC userinfoエンドポイントから link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo]JSONオブジェクトを要求することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:324
#, fuzzy
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "認証コード grant レスポンスで返されたアクセストークンを使って、OpenID Provider UserInfo エンドポイントにリクエストが送信され、 `io.quarkus.oidc.UserInfo` （シンプルな `javax.json.JsonObject` ラッパー）オブジェクトが作成されます。 `io.quarkus.oidc.UserInfo` は、SecurityIdentity `userinfo` 属性として注入またはアクセスすることができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:326
#, no-wrap
msgid "Configuration Metadata"
msgstr "設定メタデータ"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:329
#, fuzzy
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントが発見した link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata]は、 `io.quarkus.oidc.OidcConfigurationMetadata` で表され、 `SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:331
#, fuzzy
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントが公開されている場合は、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:333
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr "トークンクレームと SecurityIdentity のロール"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:336
#, fuzzy
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-openid-connect.adoc#token-claims-and-securityidentity-roles[bearer tokens] with the only difference being is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr "検証済みトークンからSecurityIdentityロールにロールをマッピングする方法は、 link:security-openid-connect.html#token-claims-and-securityidentity-roles[ベアラー・トークン]の場合と同じですが、唯一の違いは、 link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDトークン]がデフォルトでロールのソースとして使用されることです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:338
msgid "Note if you use Keycloak then you should set a Microprofile JWT client scope for ID token to contain a `groups` claim, please see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide] for more information."
msgstr "Keycloakを使用する場合は、IDトークン用のMicroprofile JWTクライアントスコープに `groups` クレームを含めるように設定する必要があることに注意してください。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloakサーバー管理ガイド] を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:340
msgid "If only the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr "アクセストークンのみがロールを含み、このアクセストークンが下流のエンドポイントに伝播されることを意図していない場合は、 `quarkus.oidc.roles.source=accesstoken` をセットします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:342
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "UserInfoがロールのソースである場合は、 `quarkus.oidc.authentication.user-info-required=true` と `quarkus.oidc.roles.source=userinfo` をセットし、必要に応じて `quarkus.oidc.roles.role-claim-path` を設定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:344
#, fuzzy
msgid "Additionally a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented xref:security.adoc#security-identity-customization[here]."
msgstr "さらに、カスタム `SecurityIdentityAugmentor` を使用してロールを追加することもできます（ link:security.html#security-identity-customization[こちら]を参照）。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:346
#, fuzzy, no-wrap
msgid "Token Verification And Introspection"
msgstr "トークンの検証とイントロスペクション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:349
#, fuzzy
msgid "Please see xref:security-openid-connect.adoc#token-verification-introspection[Token Verification And Introspection] for details about how the tokens are verified and introspected."
msgstr "トークンの検証とイントロスペクションの方法については、「 link:security-openid-connect.html#token-verification-introspection[トークンの検証とイントロスペクション]」をご覧ください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:351
#, fuzzy
msgid "Note that in case of `web-app` applications only `IdToken` is verified by default since the access token is not used by default to access the current Quarkus `web-app` endpoint and instead meant to be propagated to the services expecting this access token, for example, to the OpenID Connect Provider's UserInfo endpoint, etc. However if you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr "`web-app` アプリケーションの場合、アクセストークンは現在のQuarkus `web-app` エンドポイントにアクセスするためにデフォルトでは使用されず、OpenID Connect ProviderのUserInfoエンドポイントなど、このアクセストークンを想定しているサービスに伝搬されることになっているため、デフォルトでは `IdToken` のみが検証されることに注意してください。ただし、アクセストークンに、現在のQuarkusエンドポイント（ `quarkus.oidc.roles.source=accesstoken` ）にアクセスするために必要なロールが含まれていることを期待する場合は、それも検証されます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:353
#, fuzzy, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr "トークンのイントロスペクションとUserInfo Cache"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:356
#, fuzzy
msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles but will be used to get `UserInfo`. So there will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr "コードフローアクセストークンは、ロールのソースとなることが予想される場合を除き、イントロスペクションされませんが、 `UserInfo` を取得するために使用されます。そのため、トークンのイントロスペクションおよび/または `UserInfo` が必要な場合、コードフローアクセストークンを使用した1つまたは2つのリモートコールがあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:358
#, fuzzy
msgid "Please see xref:security-openid-connect.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr "デフォルトのトークンキャッシュの使用や、カスタムキャッシュ実装の登録については、 link:security-openid-connect.html#token-introspection-userinfo-cache[Token Introspection and UserInfo cache]を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:360
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr "JSON Web Tokenクレーム検証"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:364
#, fuzzy
msgid "Please see xref:security-openid-connect.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.  It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr "`iss` （発行者）の主張を含む主張の検証については、 link:security-openid-connect.html#jwt-claim-verification[「JSON Web トークンの主張検証]」の項を参照してください。これはIDトークンに適用されますが、 `web-app` アプリケーションがアクセストークンの検証を要求した場合は、JWTフォーマットのアクセストークンにも適用されます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:365
#, no-wrap
msgid "Redirection"
msgstr "リダイレクト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:368
#, fuzzy
msgid "When the user is redirected to the OpenID Connect Provider to authenticate, the redirect URL includes a `redirect_uri` query parameter which indicates to the Provider where the user has to be redirected to once the authentication has been completed."
msgstr "ユーザーが認証のためにOpenID Connectプロバイダにリダイレクトされるとき、リダイレクトURLには、認証完了後にユーザーをどこにリダイレクトすべきかをプロバイダに示す `redirect_uri` クエリパラメータが含まれています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:370
#, fuzzy
msgid "Quarkus will set this parameter to the current request URL by default. For example, if the user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/1`. Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/2`, etc."
msgstr "Quarkusはデフォルトでこのパラメータを現在のリクエストURLに設定します。例えば、ユーザーが以下のQuarkusサービスエンドポイントにアクセスしようとしている場合、Quarkusはこのパラメータを現在のリクエストURLに設定します。 `<a href=\"http://localhost:8080/service/1\" class=\"bare\">http://localhost:8080/service/1</a>`でQuarkusのサービスエンドポイントにアクセスしようとしている場合、 `redirect_uri` パラメータは次のように設定されます。 `<a href=\"http://localhost:8080/service/1\" class=\"bare\">http://localhost:8080/service/1</a>`.同様に、リクエストURLが `<a href=\"http://localhost:8080/service/2\" class=\"bare\">http://localhost:8080/service/2</a>`である場合、 `redirect_uri` パラメータには `<a href=\"http://localhost:8080/service/2\" class=\"bare\">http://localhost:8080/service/2</a>`などが設定されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:373
#, fuzzy
msgid "OpenID Connect Providers may be configured to require the `redirect_uri` parameter to have the same value (eg. `http://localhost:8080/service/callback`) for all the redirect URLs.  In such cases a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback` which will be the same regardless of the current request URL."
msgstr "OpenID Connect Providersでは、 `redirect_uri` パラメータに同じ値（例：...）を指定するように設定されている場合があります。 `<a href=\"http://localhost:8080/service/callback\" class=\"bare\">http://localhost:8080/service/callback</a>`)を必要とするように設定されている場合があります。このような場合には、 `quarkus.oidc.authentication.redirect-path` プロパティを設定する必要があります。例えば、 `quarkus.oidc.authentication.redirect-path=/service/callback` とすると、Quarkusは `redirect_uri` パラメータを次のような絶対的なURLに設定します。 `<a href=\"http://localhost:8080/service/callback\" class=\"bare\">http://localhost:8080/service/callback</a>`これは、現在のリクエストURLに関係なく同じ値になります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:375
#, fuzzy
msgid "If `quarkus.oidc.authentication.redirect-path` is set but the original request URL has to be restored after the user has been redirected back to a callback URL such as `http://localhost:8080/service/callback` then a `quarkus.oidc.authentication.restore-path-after-redirect` property has to be set to `true` which will restore the request URL such as `http://localhost:8080/service/1`, etc."
msgstr "`quarkus.oidc.authentication.redirect-path` が設定されていても、ユーザーが次のようなコールバックURLにリダイレクトされた後に、元のリクエストURLを復元する必要がある場合は、 プロパティを に設定する必要があります。 `<a href=\"http://localhost:8080/service/callback\" class=\"bare\">http://localhost:8080/service/callback</a>`その場合、 `quarkus.oidc.authentication.restore-path-after-redirect` プロパティを `true` に設定する必要があります。 `<a href=\"http://localhost:8080/service/1\" class=\"bare\">http://localhost:8080/service/1</a>`などのリクエストURLを復元します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:377
#, no-wrap
msgid "Dealing with Cookies"
msgstr "クッキーの取り扱い"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:380
msgid "The OIDC adapter uses cookies to keep the session, code flow and post logout state."
msgstr "OIDCアダプターは、セッション、コードフロー、ログアウト後の状態を保持するためにクッキーを使用します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:382
#, fuzzy
msgid "`quarkus.oidc.authentication.cookie-path` property is used to ensure the cookies are visible especially when you access the protected resources with overlapping or different roots, for example:"
msgstr "`quarkus.oidc.authentication.cookie-path` プロパティは、特に保護されたリソースに重複または異なるルートでアクセスした場合などに、クッキーが表示されるようにするために使用されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:384
msgid "`/index.html` and `/web-app/service`"
msgstr "`/index.html` と `/web-app/service`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:385
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr "`/web-app/service1` と `/web-app/service2`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:386
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr "`/web-app1/service` と `/web-app2/service`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:388
msgid "`quarkus.oidc.authentication.cookie-path` is set to `/` by default but can be narrowed to the more specific root path such as `/web-app`."
msgstr "`quarkus.oidc.authentication.cookie-path` は、デフォルトでは `/` に設定されていますが、 `/web-app` のように、より具体的なルートパスに絞り込むことができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:391
msgid "You can also set a `quarkus.oidc.authentication.cookie-path-header` property if the cookie path needs to be set dynamically.  For example, setting `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` means that the value of HTTP `X-Forwarded-Prefix` header will be used to set a cookie path."
msgstr "クッキーパスを動的に設定する必要がある場合は、 `quarkus.oidc.authentication.cookie-path-header` プロパティを設定することもできます。例えば、 `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` を設定すると、HTTP `X-Forwarded-Prefix` ヘッダーの値がクッキーパスを設定するために使用されることを意味します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:393
#, fuzzy
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "`quarkus.oidc.authentication.cookie-path-header` が設定されていても、現在のリクエストに設定された HTTP ヘッダーがない場合は、 `quarkus.oidc.authentication.cookie-path` がチェックされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:395
#, fuzzy
msgid "If your application is deployed across multiple domains, make sure to set a `quarkus.oidc.authentication.cookie-domain` property for the session cookie be visible to all protected Quarkus services, for example, if you have 2 services deployed at:"
msgstr "アプリケーションが複数のドメインにまたがって展開されている場合は、保護されているすべてのQuarkusサービスからセッションクッキーが見えるように、 `quarkus.oidc.authentication.cookie-domain` プロパティを設定してください。例えば、2つのサービスを展開している場合は、以下のようになります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:397
msgid "https://whatever.wherever.company.net/"
msgstr "https://whatever.wherever.company.net/"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:398
msgid "https://another.address.company.net/"
msgstr "https://another.address.company.net/"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:400
#, fuzzy
msgid "then the `quarkus.oidc.authentication.cookie-domain` property must be set to `company.net`."
msgstr "の場合は、 `quarkus.oidc.authentication.cookie-domain` プロパティを `company.net` に設定する必要があります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:401
#, no-wrap
msgid "Logout"
msgstr "ログアウト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:404
msgid "By default the logout is based on the expiration time of the ID Token issued by the OpenID Connect Provider. When the ID Token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OpenID Connect Provider again to authenticate. If the session at the OpenID Connect Provider is still active, users are automatically re-authenticated without having to provide their credentials again."
msgstr "デフォルトでは、ログアウトはOpenID Connect Providerが発行したID Tokenの有効期限に基づいて行われます。IDトークンの有効期限が切れると、Quarkusエンドポイントでの現在のユーザーセッションは無効になり、ユーザーは認証のために再度OpenID Connect Providerにリダイレクトされます。OpenID Connect Providerでのセッションがまだアクティブな場合は、ユーザーは再び資格情報を提供することなく自動的に再認証されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:406
msgid "The current user session may be automatically extended by enabling a `quarkus.oidc.token.refresh-expired` property. If it is set to `true` then when the current ID Token expires a Refresh Token Grant will be used to refresh ID Token as well as Access and Refresh Tokens."
msgstr "現在のユーザーセッションは、 `quarkus.oidc.token.refresh-expired` プロパティーを有効にすることで自動的に拡張される場合があります。 `true` に設定されている場合、現在の ID トークンの有効期限が切れると、リフレッシュ・トークンの付与が使用され、ID トークンだけでなく、アクセス・トークンやリフレッシュ・トークンもリフレッシュされます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:408
#, no-wrap
msgid "User-Initiated Logout"
msgstr "ユーザー主導型ログアウト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:412
msgid "Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.  For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr "ユーザーは、 `quarkus.oidc.logout.path` プロパティーで設定されたQuarkusエンドポイントのログアウトパスにリクエストを送信することで、ログアウトを要求することができます。たとえば、エンドポイントのアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.path` が \"/logout\" に設定されている場合、ログアウト要求は `https://application.com/webapp/logout` に送信されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:414
#, fuzzy
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr "このログアウト要求により link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout]が開始され、ユーザーはOpenID Connect Provider to logoutにリダイレクトされ、ユーザーはログアウトが本当に意図されたものであることを確認するよう求められます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:416
#, fuzzy
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr "ユーザーは、 `quarkus.oidc.logout.path` プロパティーで設定されたQuarkusエンドポイントのログアウトパスにリクエストを送信することで、ログアウトを要求することができます。たとえば、エンドポイントのアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.path` が \"/logout\" に設定されている場合、ログアウト要求は `https://application.com/webapp/logout` に送信されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:418
#, fuzzy
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a JAX-RS filter."
msgstr "`quarkus.oidc.logout.post-logout-path` が設定されている場合、 `q_post_logout` cookieが作成され、一致する `state` query parameterがログアウトのリダイレクトURIに追加され、ログアウトが完了するとOpenID Connect Providerがこの `state` を返します。Quarkus `web-app` アプリケーションでは、 `state` クエリパラメータが `q_post_logout` Cookie の値と一致するかどうかをチェックすることが推奨されます。これは、たとえば、JAX-RS フィルタで行うことができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:420
#, fuzzy
msgid "Note that a cookie name will vary when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` id, etc."
msgstr "link:security-openid-connect-multitenancy.html[OpenID Connect Multi-Tenancy]を使用する場合、クッキー名が異なることに注意してください。例えば、 `tenant_1` のIDを持つテナントの場合は、 `q_post_logout_tenant_1` という名前になるなどです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:422
#, fuzzy
msgid "Here is an example of how to configure an RP initiated logout flow:"
msgstr "ここでは、RPが主導するログアウトフローの設定例を紹介します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:429
#: upstream/_guides/security-openid-connect-web-authentication.adoc:484
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:432
#, no-wrap
msgid ""
"quarkus.oidc.logout.path=/logout\n"
"quarkus.oidc.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:436
#, no-wrap
msgid ""
"# Only the authenticated users can initiate a logout:\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:440
#, no-wrap
msgid ""
"# Logged out users should be returned to the /welcome.html site which will offer an option to re-login:\n"
"quarkus.http.auth.permission.authenticated.paths=/welcome.html\n"
"quarkus.http.auth.permission.authenticated.policy=permit\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:444
#, fuzzy
msgid "You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all of the application resources which is `/` in this example.  See <<oidc-cookies, Dealing with Cookies>> for more information."
msgstr "また、 `quarkus.oidc.authentication.cookie-path` 、すべてのアプリケーションリソースに共通するパス値を設定する必要があるかもしれません。この例では、 `/` 。詳しくは「 link:#oidc-cookies[Cookieの扱い]」をご覧ください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:446
#, fuzzy
msgid "Note that some OpenID Connect providers do not support https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification (possibly because it is still technically a draft) and do not return an OpenID Connect well-known `end_session_endpoint` metadata property. However it should not be a problem since these providers' specific logout mechanisms may only differ in how the logout URL query parameters are named."
msgstr "OpenID Connect プロバイダの中には、 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout]仕様をサポートしておらず（技術的にまだドラフトであるため）、OpenID Connect well-known `end_session_endpoint` メタデータ・プロパティを返さないものがあることに注意してください。しかし、これらのプロバイダの特定のログアウト・メカニズムは、ログアウト URL クエリ・パラメータの名前の付け方が異なるだけなので、問題にはなりません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:448
#, fuzzy
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter which will not be recognized by the providers which do not support this specification."
msgstr "link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout]仕様によると、 `quarkus.oidc.logout.post-logout-path` プロパティは `post_logout_redirect_uri` クエリパラメータとして表され、この仕様をサポートしていないプロバイダでは認識できません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:450
#, fuzzy
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr "この問題を回避するには、 `quarkus.oidc.logout.post-logout-url-param` を使用してください。また、 `quarkus.oidc.logout.extra-params` で追加された、より多くのログアウト・クエリ・パラメータを要求することもできます。例えば、 `Auth0` でログアウトをサポートする方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:457
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-xxx.us.auth0.com\n"
"quarkus.oidc.client-id=redacted\n"
"quarkus.oidc.credentials.secret=redacted\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:460
#, no-wrap
msgid ""
"quarkus.oidc.tenant-logout.logout.path=/logout\n"
"quarkus.oidc.tenant-logout.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:465
#, no-wrap
msgid ""
"# Auth0 does not return the `end_session_endpoint` metadata property, configire it instead\n"
"quarkus.oidc.end-session-path=v2/logout\n"
"# Auth0 will not recognize the 'post_logout_redirect_uri' query parameter so make sure it is named as 'returnTo'\n"
"quarkus.oidc.logout.post-logout-uri-param=returnTo\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:469
#, no-wrap
msgid ""
"# Set more properties if needed.\n"
"# For example, if 'client_id' is provided then a valid logout URI should be set as Auth0 Application property, without it - as Auth0 Tenant property.\n"
"quarkus.oidc.logout.extra-params.client_id=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:472
#, fuzzy, no-wrap
msgid "Back-Channel Logout"
msgstr "ログアウト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:475
#, fuzzy
msgid "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] is used by OpenId Connect providers to logout the current user from all the applications this user is currently logged in, bypassing the user agent."
msgstr "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] は、OpenId Connect プロバイダが、ユーザエージェントをバイパスして、そのユーザが現在ログインしているすべてのアプリケーションからログアウトするために使用されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:477
#, fuzzy
msgid "You can configure Quarkus to support `Back-Channel Logout` as follows:"
msgstr "Quarkusで `Back-Channel Logout` をサポートするように設定するには、次のようにします。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:486
#, no-wrap
msgid "quarkus.oidc.logout.backchannel.path=/back-channel-logout\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:489
#, fuzzy
msgid "Absolute `Back-Channel Logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`. You will need to configure this URL in the Admin Console of your OpenId Connect Provider."
msgstr "絶対的な `Back-Channel Logout` URL は、例えば、現在のエンドポイント URL に `quarkus.oidc.back-channel-logout.path` を加えて計算されます。 `<a href=\"http://localhost:8080/back-channel-logout\" class=\"bare\">http://localhost:8080/back-channel-logout</a>` .この URL は、OpenId コネクトプロバイダのアドミンコンソールで設定する必要があります。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:491
#, fuzzy, no-wrap
msgid "Local Logout"
msgstr "ログアウト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:494
#, fuzzy
msgid "If you work with a social provider such as Google and are concerned that the users can be logged out from all their Google applications with the <<user-initiated-logout,User-Initiated Logout>> which redirects the users to the provider's logout endpoint then you can support a local logout with the help of the <<oidc-session,OidcSession>> which only clears the local session cookie, for example:"
msgstr "Googleのようなソーシャル・プロバイダーと連携している場合、ユーザーをプロバイダーのログアウト・エンドポイントにリダイレクトする link:#user-initiated-logout[User-Initiated Logout]では、ユーザーがすべてのGoogleアプリケーションからログアウトされてしまうのではないかと懸念しているのであれば、例えば、ローカル・セッション・クッキーをクリアするだけの link:#oidc-session[OidcSession]の助けを借りて、ローカル・ログアウトをサポートすることができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:500
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:502
#, no-wrap
msgid "import io.quarkus.oidc.OidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:505
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class ServiceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:508
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcSession oidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:515
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"logout\")\n"
"    public String logout() {\n"
"        oidcSession.logout().await().indefinitely();\n"
"        return \"You are logged out\".\n"
"    }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:519
#, no-wrap
msgid "Session Management"
msgstr "セッション管理"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:522
#, fuzzy
msgid "If you have a xref:security-openid-connect.adoc#single-page-applications[Single Page Application for Service Applications] where your OpenID Connect Provider script such as `keycloak.js` is managing an authoriization code flow then that script will also control the SPA authentication session lifespan."
msgstr "link:security-openid-connect.html#single-page-applications[サービスアプリケーション用のシングルページアプリケーション]で、 `keycloak.js` などのOpenID Connect Providerスクリプトが認証コードフローを管理している場合は、そのスクリプトがSPA認証セッションの寿命も管理します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:524
#, fuzzy
msgid "If you work with a Quarkus OIDC `web-app` application then it is Quarkus OIDC Code Authentication mechanism which is managing the user session lifespan."
msgstr "Quarkus OIDC `web-app` アプリケーションを使用している場合、ユーザーセッションの寿命を管理しているのはQuarkus OIDC Code Authenticationメカニズムです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:526
msgid "The session age is calculated by adding the lifespan value of the current IDToken and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties. Of the last two properties only `quarkus.oidc.authentication.session-age-extension` should be used to significantly extend the session lifespan if required since `quarkus.oidc.token.lifespan-grace` is only meant for taking some small clock skews into consideration."
msgstr "セッション年齢は、現在のIDTokenの寿命値と、 `quarkus.oidc.authentication.session-age-extension` と `quarkus.oidc.token.lifespan-grace` プロパティーの値を加算して計算されます。最後の2つのプロパティーのうち、 `quarkus.oidc.authentication.session-age-extension` だけは、必要に応じてセッションの寿命を大幅に延ばすために使用すべきです。 `quarkus.oidc.token.lifespan-grace` は小さなクロックスキューを考慮することだけを目的としている為です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:528
#, fuzzy
msgid "When the currently authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired then, by default, the user will be auto-redirected to the OIDC Authorization endpoint to re-authenticate. Most likely the OIDC provider will challenge the user again though not necessarily if the session between the user and this OIDC provider is still active which may happen if it is configured to last longer than the ID token."
msgstr "現在認証されているユーザーが保護されたQuarkusエンドポイントに戻り、セッションクッキーに関連付けられたIDトークンの有効期限が切れた場合、デフォルトでは、ユーザーは再認証のためにOIDC Authorizationエンドポイントに自動的にリダイレクトされます。ほとんどの場合、OIDCプロバイダーはユーザーに再度チャレンジしますが、ユーザーとこのOIDCプロバイダーの間のセッションがまだ有効である場合は、必ずしもそうではありません（IDトークンよりも長く続くように設定されている場合に発生する可能性があります）。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:530
#, fuzzy
msgid "If the `quarkus.oidc.token.refresh-expired` then the expired ID token (as well as the access token) will be refreshed using the refresh token returned with the authorization code grant response. This refresh token may also be recycled (refreshed) itself as part of this process. As a result the new session cookie will be created and the session will be extended."
msgstr "`quarkus.oidc.token.refresh-expired` の場合、失効した ID トークン（およびアクセストークン）は、認証コード付与レスポンスで返されたリフレッシュトークンを使ってリフレッシュされます。このリフレッシュ・トークンは、このプロセスの一部としてリサイクル（リフレッシュ）されることもあります。その結果、新しいセッション・クッキーが作成され、セッションが延長されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:532
#, fuzzy
msgid "Note, `quarkus.oidc.authentication.session-age-extension` can be important when dealing with expired ID tokens, when the user is not very active. In such cases, if the ID token expires, then the session cookie may not be returned back to the Quarkus endpoint during the next user request and Quarkus will assume it is the first authentication request. Therefore using `quarkus.oidc.authentication.session-age-extension` is important if you need to have even the expired ID tokens refreshed."
msgstr "なお、 `quarkus.oidc.authentication.session-age-extension` は、ユーザーがあまりアクティブでない場合に、期限切れのIDトークンを扱う際に重要になることがあります。このような場合、IDトークンが期限切れになると、次のユーザーリクエストの際にセッションクッキーがQuarkusエンドポイントに返されず、Quarkusはそれを最初の認証リクエストとみなしてしまいます。したがって、期限切れのIDトークンでもリフレッシュさせる必要がある場合は、 `quarkus.oidc.authentication.session-age-extension` を使用することが重要です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:534
#, fuzzy
msgid "You can also complement refreshing the expired ID tokens by proactively refreshing the valid ID tokens which are about to be expired within the `quarkus.oidc.token.refresh-token-time-skew` value. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr "また、期限切れのIDトークンの更新を補完するために、 `quarkus.oidc.token.refresh-token-time-skew` の値内で期限切れになりそうな有効なIDトークンを積極的に更新することもできます。現在のユーザーリクエスト中に、現在のIDトークンがこの `quarkus.oidc.token.refresh-token-time-skew` 内に期限切れになると計算された場合、そのIDトークンはリフレッシュされ、新しいセッションクッキーが作成されます。このプロパティには、IDトークンの寿命よりも短い値を設定する必要があります。この寿命の値に近ければ近いほど、IDトークンはより頻繁にリフレッシュされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:536
#, fuzzy
msgid "You can have this process further optimized by having a simple JavaScript function periodically emulating the user activity by pinging your Quarkus endpoint thus minimizing the window during which the user may have to be re-authenticated."
msgstr "シンプルなJavaScriptの関数が、Quarkusのエンドポイントに定期的にpingを送信してユーザーアクティビティをエミュレートすることで、このプロセスをさらに最適化することができ、ユーザーが再認証を必要とするウィンドウを最小限に抑えることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:538
#, fuzzy
msgid "Note this user session can not be extended forever - the returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr "このユーザーセッションは永久に延長できないことに注意してください。期限切れのIDトークンを持って戻ってきたユーザーは、リフレッシュトークンの期限が切れたら、OIDCプロバイダーのエンドポイントで再度認証する必要があります。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:540
#, fuzzy, no-wrap
msgid "OidcSession"
msgstr "OidcSession"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:543
#, fuzzy
msgid "`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`. It can help to perform a <<local-logout, Local Logout>>, retrieve the current session's tenant identifier and check when the session will expire. More useful methods will be added to it over time."
msgstr "`io.quarkus.oidc.OidcSession` は、現在の `IdToken` のラッパーです。 link:#local-logout[ローカルログアウト]の実行、現在のセッションのテナント識別子の取得、セッションの期限切れの確認などに役立ちます。今後、さらに便利なメソッドが追加される予定です。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:545
#, no-wrap
msgid "TokenStateManager"
msgstr "TokenStateManager"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:548
#, fuzzy
msgid "OIDC `CodeAuthenticationMechanism` is using the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access and refresh tokens returned in the authorization code or refresh grant responses in a session cookie. It makes Quarkus OIDC endpoints completely stateless."
msgstr "OIDC `CodeAuthenticationMechanism` は、デフォルトの `io.quarkus.oidc.TokenStateManager` インターフェースの実装を使用して、認証コードまたはリフレッシュグラント応答で返されたID、アクセストークンおよびリフレッシュトークンをセッションクッキーに保持しています。これにより、QuarkusのOIDCエンドポイントは完全にステートレスになります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:550
#, fuzzy
msgid "Note that some endpoints do not require the access token. An access token is only required if the endpoint needs to retrieve `UserInfo` or access the downstream service with this access token or use the roles associated with the access token (the roles in the ID token are checked by default). In such cases you can set either `quarkus.oidc.token-state-manager.strategy=id-refresh-token` (keep ID and refresh tokens only) or `quarkus.oidc.token-state-manager.strategy=id-token` (keep ID token only)."
msgstr "なお、エンドポイントによってはアクセストークンを必要としないものもあります。アクセストークンが必要になるのは、エンドポイントが `UserInfo` を取得したり、このアクセストークンを使用してダウンストリームサービスにアクセスしたり、アクセストークンに関連付けられたロールを使用する必要がある場合のみです（デフォルトでは、ID トークンのロールがチェックされます）。このような場合には、 `quarkus.oidc.token-state-manager.strategy=id-refresh-token` （IDトークンとリフレッシュトークンのみを保持）または `quarkus.oidc.token-state-manager.strategy=id-token` （IDトークンのみを保持）のいずれかを設定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:553
#, fuzzy
msgid "If the ID, access and refresh tokens are JWT tokens then combining all of them (if the strategy is the default `keep-all-tokens`) or only ID and refresh tokens (if the strategy is `id-refresh-token`) may produce a session cookie value larger than 4KB and the browsers may not be able to keep this cookie.  In such cases, you can use `quarkus.oidc.token-state-manager.split-tokens=true` to have a unique session token per each of these tokens."
msgstr "IDトークン、アクセス・トークン、リフレッシュ・トークンがJWTトークンの場合、それらすべてを組み合わせたり（ストラテジーがデフォルトの `keep-all-tokens` ）、IDトークンとリフレッシュ・トークンだけを組み合わせたり（ストラテジーが `id-refresh-token` ）すると、セッション・クッキーの値が4KBよりも大きくなり、ブラウザがこのクッキーを保持できなくなる可能性があります。このような場合には、 `quarkus.oidc.token-state-manager.split-tokens=true` を使って、それぞれのトークンごとに固有のセッション・トークンを持たせることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:556
#, fuzzy
msgid "You can also configure the default `TokenStateManager` to encrypt the tokens before storing them as cookie values which may be necessary if the tokens contain sensitive claim values.  For example, here is how you configure it to split the tokens and encrypt them:"
msgstr "また、デフォルトの `TokenStateManager` 、トークンを暗号化してからクッキー値として保存するように設定することもできます。これは、トークンに機密性の高い請求値が含まれている場合に必要な場合があります。たとえば、トークンを分割して暗号化するように設定する方法は次のとおりです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:566
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.token-state-manager.split-tokens=true\n"
"quarkus.oidc.token-state-manager.encryption-required=true\n"
"quarkus.oidc.token-state-manager.encryption-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:570
#, fuzzy
msgid "The token encryption secret must be 32 characters long. Note that you only have to set `quarkus.oidc.token-state-manager.encryption-secret` if you prefer not to use `quarkus.oidc.credentials.secret` for encrypting the tokens or if `quarkus.oidc.credentials.secret` length is less than 32 characters."
msgstr "トークン暗号化シークレットの長さは32文字である必要があります。 `quarkus.oidc.credentials.secret` をトークンの暗号化に使用しない場合、または `quarkus.oidc.credentials.secret` の長さが 32 文字未満の場合のみ、 `quarkus.oidc.token-state-manager.encryption-secret` を設定する必要があることに注意してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:572
#, fuzzy
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie. For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes."
msgstr "トークンとセッションクッキーの関連付け方法をカスタマイズする必要がある場合は、独自の `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI Bean を登録します。たとえば、トークンをデータベースに保存し、セッションクッキーにはデータベースポインタのみを保存することができます。ただし、複数のマイクロサービス・ノードでトークンを利用できるようにするには、いくつかの課題があることに注意してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:574
msgid "Here is a simple example:"
msgstr "簡単な例を挙げてみます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:578
#, no-wrap
msgid "package io.quarkus.oidc.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:581
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:589
#, no-wrap
msgid ""
"import io.quarkus.arc.AlternativePriority;\n"
"import io.quarkus.oidc.AuthorizationCodeTokens;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TokenStateManager;\n"
"import io.quarkus.oidc.runtime.DefaultTokenStateManager;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:593
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@AlternativePriority(1)\n"
"public class CustomTokenStateManager implements TokenStateManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:596
#, no-wrap
msgid ""
"    @Inject\n"
"    DefaultTokenStateManager tokenStateManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:603
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            AuthorizationCodeTokens sessionContent, TokenStateManager.CreateTokenStateRequestContext requestContext) {\n"
"        return tokenStateManager.createTokenState(routingContext, oidcConfig, sessionContent, requestContext)\n"
"                .map(t -> (t + \"|custom\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:613
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            String tokenState, TokenStateManager.GetTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.getTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:624
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> deleteTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig, String tokenState,\n"
"            TokenStateManager.DeleteTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.deleteTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:626
#, fuzzy, no-wrap
msgid "Proof Of Key for Code Exchange (PKCE)"
msgstr "コード交換のための鍵の証明(PKCE)"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:629
#, fuzzy
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Of Key for Code Exchange] (PKCE) minimizes the risk of the authorization code interception."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Of Key for Code Exchange]（PKCE）により、認証コード傍受のリスクを最小化します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:631
#, fuzzy
msgid "While `PKCE` is of primary importance to the public OpenId Connect clients (such as the SPA scripts running in a browser), it can also provide an extra level of protection to Quarkus OIDC `web-app` applications which are confidential OpenId Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
msgstr "`PKCE` は、公開 OpenId Connect クライアント（ブラウザで実行される SPA スクリプトなど）にとって最も重要ですが、クライアントシークレットを安全に保存し、トークンのコード交換に使用できる機密 OpenId Connect クライアントである Quarkus OIDC `web-app` アプリケーションにも、特別なレベルの保護を提供することが可能です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:633
#, fuzzy
msgid "If can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32 characters long secret, for example:"
msgstr "OIDC `web-app` のエンドポイントに対して、 `quarkus.oidc.authentication.pkce-required` プロパティと 32 文字の長さの秘密で `PKCE` を有効にできる場合などです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:638
#, no-wrap
msgid ""
"quarkus.oidc.authentication.pkce-required=true\n"
"quarkus.oidc.authentication.pkce-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:641
#, fuzzy
msgid "If you already have a 32 character long client secret then `quarkus.oidc.authentication.pkce-secret` does not have to be set unless you prefer to use a different secret key."
msgstr "32文字長のクライアントシークレットをすでに持っている場合、別のシークレットキーを使用したい場合を除き、 `quarkus.oidc.authentication.pkce-secret` を設定する必要はありません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:643
#, fuzzy
msgid "The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to OpenId Connect Provider to authenticate. The `code_verifier` will be decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret and other parameters to complete the code exchange. The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` provided during the authentication request."
msgstr "秘密鍵は、ユーザが認証のためにOpenIdコネクトプロバイダに `code_challenge` クエリーパラメータでリダイレクトされている間に、ランダムに生成される `PKCE` `code_verifier` を暗号化するために必要です。 `code_verifier` は、ユーザーが Quarkus にリダイレクトされる際に復号化され、 `code` 、クライアントシークレット、その他のパラメータとともにトークン・エンドポイントに送信され、コード交換が完了します。 `code_verifier` の `SHA256` ダイジェストが、認証リクエスト中に提供された `code_challenge` と一致しない場合、プロバイダーはコード交換に失敗します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:644
#, no-wrap
msgid "Listening to important authentication events"
msgstr "重要な認証イベントのリッスン"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:647
#, fuzzy
msgid "One can register `@ApplicationScoped` bean which will observe important OIDC authentication events. The listener will be updated when a user has logged in for the first time or re-authenticated, as well as when the session has been refreshed. More events may be reported in the future. For example:"
msgstr "重要なOIDC認証イベントを監視する `@ApplicationScoped` ビーンを登録することができます。リスナーは、ユーザーが初めてログインしたときや再認証したとき、またセッションが更新されたときに更新されます。将来的には、さらに多くのイベントが報告される可能性があります。例えば、以下のようなものです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:652
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:657
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdTokenCredential;\n"
"import io.quarkus.oidc.SecurityEvent;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:660
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SecurityEventListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:667
#, no-wrap
msgid ""
"    public void event(@Observes SecurityEvent event) {\n"
"        String tenantId = event.getSecurityIdentity().getAttribute(\"tenant-id\");\n"
"        RoutingContext vertxContext = event.getSecurityIdentity().getCredential(IdTokenCredential.class).getRoutingContext();\n"
"        vertxContext.put(\"listener-message\", String.format(\"event:%s,tenantId:%s\", event.getEventType().name(), tenantId));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:669
#, no-wrap
msgid "Single Page Applications"
msgstr "シングルページアプリケーション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:672
#, fuzzy
msgid "Please check if implementing SPAs the way it is suggested in the xref:security-openid-connect.adoc#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements."
msgstr "link:security-openid-connect.html#single-page-applications[サービスアプリケーションのためのシングルページアプリケーション]」で提案されている方法でSPAを導入することが、お客様の要件を満たすかどうかを確認してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:674
#, fuzzy
msgid "If you prefer to use SPA and JavaScript API such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, please be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports."
msgstr "QuarkusウェブアプリケーションでSPAやJavaScript API（ `Fetch` ）または `XMLHttpRequest` （XHR）を使用する場合、OpenID Connect Providersは、Quarkusからのリダイレクト後にユーザーが認証されるAuthorizationエンドポイントのCORSをサポートしていない可能性があります。これにより、QuarkusアプリケーションとOpenID Connect Providerが異なるHTTPドメイン／ポートでホストされている場合、認証に失敗する可能性があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:676
#, fuzzy
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of `499`, for example:"
msgstr "このような場合、 `quarkus.oidc.authentication.java-script-auto-redirect` プロパティを `false` に設定すると、Quarkusに `499` ステータスコードと `OIDC` 値を持つ `WWW-Authenticate` ヘッダーを返すよう指示します。また、ブラウザのスクリプトを更新して、 `X-Requested-With` ヘッダーに `JavaScript` の値を設定し、 `499` の場合は最後に要求されたページを再読み込みする必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:681
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-With\", \"JavaScript\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:690
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:692
#, fuzzy, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr "クロスオリジンのリソース共有"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:695
#, fuzzy
msgid "If you plan to consume this application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more details."
msgstr "別のドメインで動作するSingle Page Applicationからこのアプリケーションを利用する場合は、CORS（Cross-Origin Resource Sharing）を設定する必要があります。詳細については、 link:http-reference.html#cors-filter[HTTP CORSのドキュメント]をご覧ください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:697
#, fuzzy, no-wrap
msgid "Integration with GitHub and other OAuth2 providers"
msgstr "GitHubや他のOAuth2プロバイダとの統合"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:700
#, fuzzy
msgid "Some well known providers such as `GitHub` or `LinkedIn` are not `OpenID Connect` but `OAuth2` providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2]."
msgstr "`GitHub` や `LinkedIn` などの有名なプロバイダーは、 `OpenID Connect` ではなく、 `OAuth2` `authorization code flow` をサポートするプロバイダーです。例えば、 link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2]や link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2] などです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:702
#, fuzzy
msgid "The main difference between `OpenID Connect` and `OAuth2` providers is that `OpenID Connect` providers, by building on top of `OAuth2`, return an `ID Token` representing a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr "`OpenID Connect` プロバイダと `OAuth2` プロバイダの主な違いは、 `OpenID Connect` プロバイダは `OAuth2` の上に構築することで、 `OAuth2` プロバイダが返す標準的な認証コードフロー `access` および `refresh` トークンに加えて、ユーザー認証を表す `ID Token` を返すことです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:704
#, fuzzy
msgid "`OAuth2` providers such as `GitHub` do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr "`GitHub` のような `OAuth2` プロバイダーは `IdToken` を返しません。ユーザー認証の事実は暗黙の了解であり、認証されたユーザーが現在の Quarkus `web-app` アプリケーションに認証されたユーザーに代わって何らかのデータにアクセスすることを許可する `access` トークンによって間接的に表されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:707
#, fuzzy
msgid "For example, when working with `GitHub`, the Quarkus endpoint can acquire an `access` token which will allow it to request a `GitHub` profile of the current user.  In fact this is exactly how a standard `OpenID Connect` `UserInfo` acqusition also works - by authenticating into your `OpenID Connect` provider you also give a permission to Quarkus application to acquire your <<user-info,UserInfo>> on your behalf - and it also shows what is meant by `OpenID Connect` being built on top of `OAuth2`."
msgstr "例えば、 `GitHub` を使用している場合、Quarkusのエンドポイントは `access` トークンを取得することができ、これにより現在のユーザーの `GitHub` プロファイルを要求することができます。実際、これは、標準的な `OpenID Connect` `UserInfo` の取得がどのように機能しているかを表しています。 `OpenID Connect` プロバイダに認証を行うことで、Quarkusアプリケーションが自分に代わって link:#user-info[UserInfo]を取得する許可を与えることになります。また、 `OpenID Connect` が `OAuth2` の上に構築されていることの意味を示しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:709
#, fuzzy
msgid "In order to support the integration with such `OAuth2` servers, `quarkus-oidc` needs to be configured to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr "このような `OAuth2` サーバーとの統合をサポートするために、 `quarkus-oidc` は、 `IdToken`: `quarkus.oidc.authentication.id-token-required=false` なしで認証コードフローの応答を許可するように設定する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:711
#, fuzzy
msgid "It is required because `quarkus-oidc` expects that not only `access` and `refresh` tokens but also `IdToken` will be returned once the authorization code flow completes."
msgstr "`quarkus-oidc` は、認証コードのフローが完了すると、 `access` と `refresh` のトークンだけでなく、 `IdToken` も返されることを期待しているため、必要となります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:713
#, fuzzy
msgid "Note, even though you will configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` will be generated to support the way `quarkus-oidc` operates where an `IdToken` is used to support the authentication session and to avoid redirecting the user to the provider such as `GitHub` on every request. In this case the session lifespan is set to 5 minutes which can be extended further as described in the <<session-management,session management>> section."
msgstr "`IdToken` を使用せずに認証コードフローをサポートするようにエクステンションを構成しても、 `quarkus-oidc` の動作方法をサポートするために内部 `IdToken` が生成されます。ここでは `IdToken` が認証セッションをサポートするために使用され、リクエストごとに `GitHub` のようなプロバイダにユーザーがリダイレクトされるのを防ぎます。この場合、セッションの有効期限は5分に設定されていますが、 link:#session-management[セッション管理]の項で説明するように、さらに延長することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:716
#, fuzzy
msgid "The next step is to ensure that the returned access token can be useful to the current Quarkus endpoint.  If the `OAuth2` provider supports the introspection endpoint then you may be able to use this access token as a source of roles with `quarkus.oidc.roles.source=accesstoken`. If no introspection endpoint is available then at the very least it should be possible to request <<user-info,UserInfo>> from this provider with `quarkus.oidc.authentication.user-info-required` - this is the case with `GitHib`."
msgstr "次のステップは、返されたアクセストークンが現在のQuarkusのエンドポイントに有用であることを確認することです。 `OAuth2` プロバイダがintrospectionエンドポイントをサポートしている場合、 `quarkus.oidc.roles.source=accesstoken` でロールのソースとしてこのアクセストークンを使用することができるかもしれません。 `GitHib`introspectionのエンドポイントが利用できない場合は、少なくとも、 `quarkus.oidc.authentication.user-info-required` でこのプロバイダから link:#user-info[UserInfo]を要求することができるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:718
#, fuzzy
msgid "Configuring the endpoint to request <<user-info,UserInfo>> is the only way `quarkus-oidc` can be integrated with the providers such as `GitHib`."
msgstr "link:#user-info[UserInfo]を要求するようにエンドポイントを設定することは、 `quarkus-oidc` が `GitHib` のようなプロバイダと統合する唯一の方法です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:720
#, fuzzy
msgid "Note that requiring <<user-info,UserInfo>> involves making a remote call on every request - therefore you may want to consider caching `UserInfo` data, see <<token-introspection-userinfo-cache,Token Introspection and UserInfo Cache> for more details."
msgstr "link:#user-info[UserInfo]を必要とすることは、すべてのリクエストでリモートコールを行うことになることに注意してください。したがって、 `UserInfo` データをキャッシュすることを検討するとよいでしょう。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:722
#, fuzzy
msgid "Alternatively, you may want to request that `UserInfo` is embedded into the internal generated `IdToken`with the `quarkus.oidc.cache-user-info-in-idtoken=true` property - the advantage of this approach is that by default no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie. You may also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data, please see <<token-state-manager,Encrypt Tokens With TokenStateManager>> for more information."
msgstr " `UserInfo` `IdToken`with the `quarkus.oidc.cache-user-info-in-idtoken=true` この方法の利点は、デフォルトでキャッシュされた `UserInfo` の状態がエンドポイントに保持されないということです - その代わりに、セッションクッキーに保存されます。また、 `UserInfo` が機密データを含んでいる場合、この場合 `IdToken` の暗号化を検討したいかもしれません。詳細は link:#token-state-manager[TokenStateManager でトークンを暗号化] する を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:724
#, fuzzy
msgid "Also, OAuth2 servers may not support a well-known configuration endpoint in which case the discovery has to be disabled and the authorization, token, and introspection and/or userinfo endpoint paths have to be configured manually."
msgstr "また、OAuth2サーバーは、よく知られた構成エンドポイントをサポートしていないかもしれません。その場合、ディスカバリーを無効にして、オーソリゼーション、トークン、イントロスペクションやユーザーインフォのエンドポイントのパスを手動で構成しなければなりません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:726
#, fuzzy
msgid "Here is how you can integrate `quarkus-oidc` with `GitHub` after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr "`GitHub` ここでは、 link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[GitHub OAuthアプリケーションを作成]した後に、 `quarkus-oidc` を統合する方法を説明します。Quarkusのエンドポイントを以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:732
#, no-wrap
msgid ""
"quarkus.oidc.provider=github\n"
"quarkus.oidc.client-id=github_app_clientid\n"
"quarkus.oidc.credentials.secret=github_app_clientsecret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:735
#, no-wrap
msgid ""
"# user:email scope is requested by default, use 'quarkus.oidc.authentication.scopes' to request differrent scopes such as `read:user`.\n"
"# See https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps for more information.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:742
#, no-wrap
msgid ""
"# Consider enabling UserInfo Cache \n"
"# quarkus.oidc.token-cache.max-size=1000\n"
"# quarkus.oidc.token-cache.time-to-live=5M\n"
"#\n"
"# Or having UserInfo cached inside IdToken itself\n"
"# quarkus.oidc.cache-user-info-in-idtoken=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:745
#, fuzzy
msgid "See xref:security-openid-connect-providers.adoc[Well Known OpenId Connect providers] for more details about configuring other well-known providers."
msgstr "その他のよく知られたプロバイダの設定については、 link:security-openid-connect-providers.html[Well Known OpenId Connect providers] を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:747
#, fuzzy
msgid "This is all what is needed for an endpoint like this one to return the currently authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr "このようなエンドポイントに必要なのは、現在認証されているユーザーのプロファイルを次のようにして返すことです。 `GET <a href=\"http://localhost:8080/github/userinfo\" class=\"bare\">http://localhost:8080/github/userinfo</a>`を返し、個々の `UserInfo` プロパティとしてアクセスすることができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:757
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:761
#, no-wrap
msgid ""
"@Path(\"/github\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:764
#, no-wrap
msgid ""
"    @Inject\n"
"    UserInfo userInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:772
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/userinfo\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserInfo() {\n"
"        return userInfo.getUserInfoString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:775
#, fuzzy
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, `Google` which is an OpenID Connect Provider returning `IdToken` and `GitHub` which is an `OAuth2` provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both `Google` and `GitHub` flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr "link:security-openid-connect-multitenancy.html[OpenID Connect Multi-Tenancy]を使用して複数のソーシャルプロバイダをサポートしている場合、例えば、 `IdToken` を返すOpenID Connect Providerである `Google` と、 `IdToken` を返さず、 `UserInfo` へのアクセスのみを許可する `OAuth2` Providerである `GitHub` を使用すると、 `Google` と `GitHub` の両方のフローで、注入された `SecurityIdentity` のみを使用してエンドポイントを動作させることができます。内部で生成された `IdToken` で作成されたプリンシパルが、Gihub フローがアクティブなときに `UserInfo` ベースのプリンシパルに置き換えられる場合、 `SecurityIdentity` の単純な拡張が必要になります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:779
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:781
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:783
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:791
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:794
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityIdentityAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:802
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        RoutingContext routingContext = identity.getAttribute(RoutingContext.class.getName());\n"
"        if (routingContext != null && routingContext.normalizedPath().endsWith(\"/github\")) {\n"
"\t        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
"\t        UserInfo userInfo = identity.getAttribute(\"userinfo\");\n"
"\t        builder.setPrincipal(new Principal() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:807
#, no-wrap
msgid ""
"\t            @Override\n"
"\t            public String getName() {\n"
"\t                return userInfo.getString(\"preferred_username\");\n"
"\t            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:813
#, no-wrap
msgid ""
"\t        });\n"
"\t        identity = builder.build();\n"
"        }\n"
"        return Uni.createFrom().item(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:815
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:818
#, fuzzy, no-wrap
msgid "Now, the following code will work when the user is signing in into your application with both `Google` or `GitHub`:   \n"
msgstr "これで、次のコードは、ユーザーがアプリケーションに `Google` または `GitHub` の両方でサインインしている場合に動作します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:828
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:832
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:835
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:842
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/google\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:850
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/github\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getUserName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:853
#, fuzzy
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` - with the providers which do not return `IdToken`."
msgstr "よりシンプルな方法としては、 `@IdToken JsonWebToken` と `UserInfo` の両方を注入し、 `IdToken` を返すプロバイダには `JsonWebToken` を、 `UserInfo` を返すプロバイダには `IdToken` を返さないプロバイダには を使用するという方法が考えられます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:855
#, fuzzy
msgid "The last important point is to make sure the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr "最後の重要なポイントは、GitHub OAuth アプリケーションの設定で入力するコールバックパスが、GitHub の認証とアプリケーションの承認が成功した後にユーザーをリダイレクトするエンドポイントパスと一致していることを確認することです。ここでは、 `http:localhost:8080/github/userinfo` に設定しなければなりません。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:856
#, no-wrap
msgid "Cloud Services"
msgstr "クラウドサービス"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:858
#, no-wrap
msgid "Google Cloud"
msgstr "Google Cloud"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:861
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google Developer Consoles."
msgstr "Quarkus OIDC `web-app` アプリケーションは、Google Developer Consolesで *BigQuery* などのサービスに対するOpendId Connect(Authorization Code Flow)パーミッションを有効にしている現在認証されたユーザーに代わって、 *BigQuery* などの *Google Cloudサービスに* アクセスすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:864
msgid "It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr "link:https://github.com/quarkiverse[Quarkiverseの] link:https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services] で行うのは超簡単で、 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新のタグ] サービスの依存関係を追加するだけです。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:873
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.googlecloudservices</groupId>\n"
"    <artifactId>quarkus-google-cloud-bigquery</artifactId>\n"
"    <version>${quarkiverse.googlecloudservices.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:879
#, no-wrap
msgid "implementation(\"io.quarkiverse.googlecloudservices:quarkus-google-cloud-bigquery:${quarkiverse.googlecloudservices.version}\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:882
msgid "and configure Google OIDC properties:"
msgstr "そしてGoogle OIDCプロパティーを設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:889
#, no-wrap
msgid ""
"quarkus.oidc.provider=google\n"
"quarkus.oidc.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.token.issuer=https://accounts.google.com\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:891
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr "プロバイダーエンドポイントの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:894
#, fuzzy
msgid "OIDC `web-app` application needs to know OpenID Connect provider's authorization, token, `JsonWebKey` (JWK) set and possibly `UserInfo`, introspection and end session (RP-initiated logout) endpoint addresses."
msgstr "OIDC `web-app` アプリケーションは、OpenID Connect プロバイダの認証、トークン、 `JsonWebKey` (JWK) セット、そしておそらく `UserInfo` 、イントロスペクション、およびエンドセッション (RP-initiated logout) のエンドポイントアドレスを知る必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:896
msgid "By default they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc.auth-server-url` に `/.well-known/openid-configuration` パスを追加することで検出されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:898
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure them with relative path values, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、相対パスの値で設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:915
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Authorization endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/auth\n"
"quarkus.oidc.authorization-path=/protocol/openid-connect/auth\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/token/introspect\n"
"# End session endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/logout\n"
"quarkus.oidc.end-session-path=/protocol/openid-connect/logout\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:917
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:919
#, fuzzy
msgid "Please see xref:security-openid-connect-client.adoc#token-propagation[Token Propagation] section about the Authorization Code Flow access token propagation to the downstream services."
msgstr "下流のサービスへのAuthorization Code Flowアクセストークンの伝搬については、 link:security-openid-connect-client.html#token-propagation[「Token Propagation]」の項を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:921
#, fuzzy, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr "プロバイダーエンドポイントの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:924
#, fuzzy
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. It has to authenticate to the OpenID Connect Provider when the authorization code has to be exchanged for the ID, access and refresh tokens, when the ID and access tokens have to be refreshed or introspected."
msgstr "`quarkus.oidc.runtime.OidcProviderClient` は、OpenID Connect Provider へのリモートリクエストが必要なときに使用されます。認証コードをID、アクセストークン、リフレッシュトークンと交換するとき、IDやアクセストークンをリフレッシュしたりイントロスペクトしたりするときに、OpenID Connect Providerを認証しなければなりません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:926
#, fuzzy
msgid "All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "すべての link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDCクライアント認証]オプションがサポートされていますが、例えば"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:928
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:934
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:937
#, fuzzy
msgid "or"
msgstr "または"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:943
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:946
#: upstream/_guides/security-openid-connect-web-authentication.adoc:978
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "または link:credentials-provider.html[CredentialsProvider]から取得したシークレットを使用しています。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:951
#: upstream/_guides/security-openid-connect-web-authentication.adoc:983
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:956
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:959
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:966
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
"quarkus.oidc.credentials.client-secret.method=post\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:969
#, fuzzy
msgid "`client_secret_jwt`, signature algorithm is HS256:"
msgstr "`client_secret_jwt` 、署名アルゴリズムはHS256です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:975
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:988
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:991
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is RS256:"
msgstr "`private_key_jwt` PEMキーファイルで、署名アルゴリズムはRS256です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:997
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1026
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1000
#, fuzzy
msgid "`private_key_jwt` with the key store file, signature algorithm is RS256:"
msgstr "`private_key_jwt` キーストアファイルで、署名アルゴリズムはRS256です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1008
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1011
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1014
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントの秘密がワイヤー上を通過することはありません。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1015
#, fuzzy, no-wrap
msgid "Additional JWT Authentication options"
msgstr "JWT認証の追加オプション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1018
#, fuzzy
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an `Apple` `post_jwt` method is used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "`client_secret_jwt`, `private_key_jwt` 認証方法が使用されている場合、または `Apple` `post_jwt` 方法が使用されている場合は、JWT 署名アルゴリズム、鍵識別子、オーディエンス、サブジェクト、発行者などをカスタマイズすることができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1022
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1031
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1034
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1037
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1040
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1043
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1045
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1048
#, fuzzy
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject claims."
msgstr "Apple OpenID Connect Providerは、 `client_secret_post` 方式を採用しており、シークレットは、 `private_key_jwt` 認証方式で作成されたJWTですが、Appleアカウント固有の発行者とサブジェクトの主張があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1050
#, fuzzy
msgid "`quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr "`quarkus-oidc` は、非標準の `client_secret_post_jwt` 認証方法をサポートしており、以下のように設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1055
#, no-wrap
msgid ""
"# Apple provider configuration sets a 'client_secret_post_jwt' authentication method\n"
"quarkus.oidc.provider=apple\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1060
#, no-wrap
msgid ""
"quarkus.oidc.client-id=${apple.client-id}\n"
"quarkus.oidc.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc.credentials.jwt.token-key-id=${apple.key-id}\n"
"# Apple provider configuration sets ES256 signature algorithm\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1063
#, no-wrap
msgid ""
"quarkus.oidc.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1065
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "相互のTLS"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1068
#, fuzzy
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
msgstr "OpenID Connectプロバイダによっては、 `Mutual TLS` ( `MTLS`) 認証プロセスの一環として、クライアントの認証を要求する場合があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1070
#, fuzzy
msgid "`quarkus-oidc` can be configured as follows to support `mTLS`:"
msgstr "`quarkus-oidc` は、 `MTLS` をサポートするために以下のように構成することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1074
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1078
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1082
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1088
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1091
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1094
#, fuzzy
msgid "Start by adding the following dependencies to your test project:"
msgstr "まず、テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1114
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>org.eclipse.jetty</groupId>\n"
"            <artifactId>*</artifactId>\n"
"       </exclusion>\n"
"    </exclusions>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1121
#, no-wrap
msgid ""
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1124
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1127
#, fuzzy
msgid "Add the following dependency:"
msgstr "以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1136
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1142
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1145
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr "RESTテストエンドポイントを用意し、 `application.properties` を以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1153
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-web-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1156
msgid "and finally write the test code, for example:"
msgstr "そして最後にテストコードを例えば以下のように書きます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1160
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1162
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1167
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1171
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1175
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class CodeFlowAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1181
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCodeFlow() throws Exception {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            // the test REST endpoint listens on '/code-flow'\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/code-flow\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1186
#, no-wrap
msgid ""
"            HtmlForm form = page.getFormByName(\"form\");\n"
"            // user 'alice' has the 'user' role\n"
"            form.getInputByName(\"username\").type(\"alice\");\n"
"            form.getInputByName(\"password\").type(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1188
#, no-wrap
msgid "            page = form.getInputByValue(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1192
#, no-wrap
msgid ""
"            assertEquals(\"alice\", page.getBody().asText());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1199
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1202
#, fuzzy
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr "`OidcWiremockTestResource` は、 `alice` と `admin` のユーザーを認識しています。ユーザー `alice` は、デフォルトで `user` ロールのみを持っています - `quarkus.test.oidc.token.user-roles` システムプロパティでカスタマイズすることができます。ユーザー `admin` は、デフォルトで `user` と `admin` の役割を持っています - `quarkus.test.oidc.token.admin-roles` のシステムプロパティでカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1204
#, fuzzy
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "さらに、 `OidcWiremockTestResource` では、トークンの発行者とオーディエンスを `<a href=\"https://service.example.com\" class=\"bare\">https://service.example.com</a>`これは `quarkus.test.oidc.token.issuer` と `quarkus.test.oidc.token.audience` のシステムプロパティでカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1206
#, fuzzy
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr "`OidcWiremockTestResource` 、すべてのOpenID Connectプロバイダをエミュレートすることができます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1208
#, fuzzy, no-wrap
msgid "Dev Services for Keycloak"
msgstr "Keycloakの開発サービス"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1212
#, fuzzy
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "`Dev Services for Keycloak` は、テストコンテナを起動して初期化します。 `quarkus` レルム、 `quarkus-app` クライアント（ `secret` secret）を作成し、 `alice` （ `admin` and `user` role）と `bob` （ `user` role）のユーザーを追加します。これらのプロパティはすべてカスタマイズ可能です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1214
#, fuzzy
msgid "First prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "まず、 `application.properties` を準備します。完全に空の `application.properties` から始めることができます。 `Dev Services for Keycloak` は、実行中のテストコンテナを指す `quarkus.oidc.auth-server-url` を、 `quarkus.oidc.client-id=quarkus-app` と `quarkus.oidc.credentials.secret=secret` と同様に登録します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1216
#, fuzzy
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "しかし、すでに必要な `quarkus-oidc` プロパティがすべて設定されている場合は、 `quarkus.oidc.auth-server-url` と `prod` プロファイルを関連付けるだけで、たとえば「Dev Services for Keycloak」のコンテナを起動することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1220
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1223
#, fuzzy
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルをKeycloakにインポートしなければならない場合、 `Dev Services for Keycloak` を以下のように設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1228
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1232
#, fuzzy
msgid "Finally write a test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.  The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr "最後に、上記の link:#integration-testing-wiremock[Wiremock]のセクションで説明したのと同じ方法でテストコードを書きます。唯一の違いは、 `@QuarkusTestResource` が不要になったことです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1238
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1241
#, fuzzy, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr "KeycloakTestResourceLifecycleManager"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1245
#, fuzzy
msgid "If you need to do the integration testing against Keycloak then you are encouraged to do it with <<integration-testing-keycloak-devservices,Dev Services For Keycloak>>.  Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr "Keycloakに対して統合テストを行う必要がある場合は、 link:#integration-testing-keycloak-devservices[Dev Services For Keycloak]で行うことをお勧めします。テストに `KeycloakTestResourceLifecycleManager` を使うのは、 `Dev Services for Keycloak` を使えない正当な理由がある場合のみです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1247
#, fuzzy
msgid "Start with adding the following dependency:"
msgstr "まず、以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1256
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1262
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1265
#, fuzzy
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "`io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - Keycloak コンテナを起動する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装を提供しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1267
#, fuzzy
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "そして、 `maven.surefire.plugin` を以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1283
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1286
#, fuzzy
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr "(また、ネイティブイメージでテストした場合も同様に `maven.failsafe.plugin` ）。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1289
#, fuzzy
msgid "And now set the configuration and write the test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.  The only difference is the name of `QuarkusTestResource`:"
msgstr "そして、上記の link:#integration-testing-wiremock[Wiremock]のセクションで説明したのと同じように、設定を行い、テストコードを書きます。唯一の違いは、 `QuarkusTestResource` の名前です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1293
#, no-wrap
msgid "import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1298
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1301
#, fuzzy
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` は、 `alice` と `admin` のユーザーを登録します。ユーザー `alice` は、デフォルトでは `user` ロールのみを持っています。 `keycloak.token.user-roles` システムプロパティでカスタマイズすることができます。ユーザー `admin` は、デフォルトで `user` と `admin` の役割を持っています - `keycloak.token.admin-roles` のシステムプロパティでカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1304
#, fuzzy
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "デフォルトでは、 `KeycloakTestResourceLifecycleManager` は Keycloak インスタンスの初期化に HTTPS を使用しますが、これは `keycloak.use.https=false` で無効にできます。デフォルトのレルム名は `quarkus` 、クライアントIDは `quarkus-web-app` です。必要に応じて `keycloak.realm` と `keycloak.web-app.client` のシステムプロパティを設定し、値をカスタマイズしてください。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1306
#, fuzzy, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurityアノテーション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1309
#, fuzzy
msgid "Please see xref:security-openid-connect.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "link:security-openid-connect.html#integration-testing-security-annotation[注入さ]れた ID に依存する `web-app` アプリケーションのエンドポイントのコードをテストするために `JsonWebToken` や `UserInfo` 、 `OidcConfigurationMetadata` に `@TestSecurity` や `@OidcSecurity` のアノテーションを使用することについての詳細は、「 link:security-openid-connect.html#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken]」のセクションを参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1310
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1313
#, fuzzy
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr "トークン検証エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` レベルのロギングを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1318
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1321
#, fuzzy
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr "OidcProviderのクライアント初期化エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` レベルのロギングを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1326
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1328
#, no-wrap
msgid "Running behind a reverse proxy"
msgstr "リバースプロキシーの背後での実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1331
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr "Quarkusアプリケーションがリバースプロキシー/ゲートウェイ/ファイアウォールの背後で実行されている場合、HTTP `Host` ヘッダーが内部IPアドレスにリセットされたり、HTTPS接続が終了したりした場合などに、OIDC認証メカニズムが影響を受けることがあります。たとえば、認可コードフロー `redirect_uri` パラメーターが、期待される外部ホストではなく内部ホストに設定されている場合があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1333
#, fuzzy
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, see xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section for more information."
msgstr "このような場合は、プロキシによって転送されたオリジナルのヘッダーを認識するようにQuarkusを設定する必要があります。詳細は、 link:http-reference.html#reverse-proxy[リバースプロキシ]Vert.xのドキュメントセクション link:http-reference.html#reverse-proxy[の「Running behind a reverse proxy」]を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1335
#, fuzzy
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr "例えば、QuarkusのエンドポイントがKubernetes Ingressの背後にあるクラスタで動作している場合、計算された `redirect_uri` パラメータが内部のエンドポイントアドレスを指している可能性があるため、OpenID Connect Providerからこのエンドポイントに戻るリダイレクトが機能しない場合があります。この問題は、以下の設定で解決できます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1342
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.allow-forwarded=false\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.forwarded-host-header=X-ORIGINAL-HOST\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1345
#, fuzzy
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr "ここで、 `X-ORIGINAL-HOST` はKubernetes Ingressが設定する外部エンドポイントのアドレスを表します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1347
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind a SSL terminating reverse proxy."
msgstr "`quarkus.oidc.authentication.force-redirect-https-scheme` プロパティーは、QuarkusアプリケーションがSSL終端リバースプロキシーの後ろで実行されている場合にも使用できます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1348
#, fuzzy, no-wrap
msgid "External and Internal Access to OpenID Connect Provider"
msgstr "OpenID Connectプロバイダへの外部および内部からのアクセス"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1352
#, fuzzy
msgid "Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.  In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr "OpenID Connect Providerの外部からアクセス可能な認証、ログアウト、およびその他のエンドポイントは、 `quarkus.oidc.auth-server-url` 内部URLに関連して自動検出または設定されたURLとは異なるHTTP(S)URLを持つ場合があることに注意してください。このような場合、エンドポイントで発行者認証の失敗が報告され、外部からアクセス可能なコネクトプロバイダーのエンドポイントへのリダイレクトが失敗することがあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1355
#, fuzzy
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "このような場合、Keycloakを使用している場合は、 `KEYCLOAK_FRONTEND_URL` システムプロパティに外部からアクセス可能なベースURLを設定して起動してください。他のOpenid Connectプロバイダを使用している場合は、各プロバイダのドキュメントを確認してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1356
#, fuzzy, no-wrap
msgid "Customize authentication requests"
msgstr "重要な認証イベントのリッスン"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1359
#, fuzzy
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "デフォルトでは、ユーザが認証のためにOpenID Connectプロバイダの認証エンドポイントにリダイレクトされる際に、 `response_type` （「 `code` 」に設定）、 `scope` （「'openid'」に設定）、 `client_id` 、 `redirect_uri` 、 `state` の各プロパティのみがHTTPクエリパラメータとして渡されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1361
#, fuzzy
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`. For example, some OpenID Connect providers may choose to return the authorization code as part of the redirect URI's fragment which would break the authentication process - it can be fixed as follows:"
msgstr "`quarkus.oidc.authentication.extra-params` を使って、さらにプロパティを追加することができます。例えば、OpenID Connectプロバイダの中には、認証コードをリダイレクトURIのフラグメントの一部として返すものがありますが、これは認証プロセスを破壊することになります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1365
#, no-wrap
msgid "quarkus.oidc.authentication.extra-params.response_mode=query\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1367
#, fuzzy, no-wrap
msgid "Customize authentication error response"
msgstr "重要な認証イベントのリッスン"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1370
#, fuzzy
msgid "If the user authentication has failed at the OpenId Connect Authorization endpoint, for example, due to an invalid scope or other invalid parameters included in the redirect to the provider, then the provider will redirect the user back to Quarkus not with the `code` but `error` and `error_description` parameters."
msgstr "OpenId Connect Authorization のエンドポイントでユーザー認証が失敗した場合、例えば、プロバイダーへのリダイレクトに含まれる無効なスコープやその他の無効なパラメーターが原因で、プロバイダーは `code` ではなく `error` と `error_description` のパラメーターでユーザーを Quarkus にリダイレクトし返します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1372
#, fuzzy
msgid "In such cases HTTP `401` will be returned by default. However, you can instead request that a custom public error endpoint is called in order to return a user friendly HTML error page. Use `quarkus.oidc.authentication.error-path`, for example:"
msgstr "このような場合、デフォルトでHTTP `401` が返されます。しかし、代わりにユーザーフレンドリーなHTMLエラーページを返すために、カスタムのパブリックエラーエンドポイントが呼び出されるように要求することができます。例えば、 `quarkus.oidc.authentication.error-path` を使用します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1376
#, no-wrap
msgid "quarkus.oidc.authentication.error-path=/error\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1379
#, fuzzy
msgid "It has to start fron a forward slash and be relative to the current endpoint's base URI. For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
msgstr "これは、フォワードスラッシュで始まり、現在のエンドポイントのベースURIからの相対的なものでなければなりません。例えば、'/error' と設定され、現在のリクエスト URI が `&lt;a href=\"https://localhost:8080/callback?error=invalid_scope\" class=\"bare\"&gt;https://localhost:8080/callback?error=invalid_scope&lt;/a&gt;`にリダイレクトされ、最終的なリダイレクト先は `&lt;a href=\"https://localhost:8080/error?error=invalid_scope\" class=\"bare\"&gt;https://localhost:8080/error?error=invalid_scope&lt;/a&gt;`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1381
#, fuzzy
msgid "It is important that this error endpoint is a public resource to avoid the user redirected to this page be authenticated again."
msgstr "このエラーエンドポイントは、このページにリダイレクトされたユーザーが再び認証されることを避けるために、パブリックリソースであることが重要です。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1382
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1386
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1389
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloakのドキュメント]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1390
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1391
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1392
#, fuzzy
msgid "xref:security-openid-connect-providers.adoc[Well Known OpenId Connect providers]."
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1393
#, fuzzy
msgid "xref:security-openid-connect-client.adoc[Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens]"
msgstr "link:security-openid-connect-client.html[Quarkus - OpenID ConnectおよびOAuth2クライアントとフィルタを使用したアクセストークンの管理]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1394
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1395
#, fuzzy
msgid "xref:security.adoc#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"
msgstr "link:security.html#oidc-jwt-oauth2-comparison[QuarkusのOIDC、JWT、OAuth2機能の概要]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1395
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 15 minutes"
#~ msgstr "15分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Docker"
#~ msgstr "Docker"

#~ msgid "./mvnw package -Pnative\n"
#~ msgstr "./mvnw package -Pnative\n"

#~ msgid "https://stedolan.github.io/jq/[jq tool]"
#~ msgstr "https://stedolan.github.io/jq/[jq tool]"

#~ msgid "Configuring using the application.properties file"
#~ msgstr "application.propertiesファイルを使って設定"

#~ msgid "Configuring CORS"
#~ msgstr "CORSの設定"

#~ msgid "Running in Developer Mode"
#~ msgstr "デベロッパーモードでの実行"

#~ msgid "Running in JVM Mode"
#~ msgstr "JVMモードでの実行"
