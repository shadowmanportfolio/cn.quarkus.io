# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-19 17:17+0000\n"
"PO-Revision-Date: 2022-04-12 11:34+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-jwt-build.adoc:6
#, fuzzy, no-wrap
msgid "Build, Sign and Encrypt JSON Web Tokens"
msgstr "JSONウェブトークンの構築、署名、暗号化"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:12
#, fuzzy
msgid "According to link:https://datatracker.ietf.org/doc/html/rfc7519[RFC7519], JSON Web Token (JWT) is a compact, URL-safe means of representing claims which are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code(MAC) and/or encrypted."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7519[RFC7519]によると、JSON Web Token (JWT)は、コンパクトでURLセーフな手段であり、JSON Web Signature (JWS)構造のペイロードとして、またはJSON Web Encryption (JWE)構造のプレーンテキストとして使用されるJSONオブジェクトとしてエンコードされた請求項を表現し、請求項をデジタル署名またはMessage Authentication Code (MAC)による整合性保護、および/または暗号化することを可能にします。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:14
#, fuzzy
msgid "Signing the claims is used most often to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the link:https://tools.ietf.org/html/rfc7515[JSON Web Signature] specification."
msgstr "クレームの安全性を確保するために最もよく使われるのが、クレームへの署名です。現在、JWTトークンとして知られているものは、通常、 link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]仕様に記載されている手順で、JSON形式でクレームに署名して作成されます。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:16
#, fuzzy
msgid "However, when the claims are sensitive, their confidentiality can be guaranteed by following the steps described in the link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption] specification to produce a JWT token with the encrypted claims."
msgstr "ただし、クレームが機密性の高いものである場合は、 link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]仕様に記載されている手順に従って、暗号化されたクレームを含むJWTトークンを生成することで、その機密性を保証することができます。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:18
#, fuzzy
msgid "Finally both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token."
msgstr "最後に、クレームの機密性と完全性の両方を、最初に署名し、次にネストされたJWTトークンを暗号化することで、さらに強化することができます。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:20
#, fuzzy
msgid "SmallRye JWT Build provides an API for securing JWT claims using all of these options. link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J] is used internally to support this API."
msgstr "SmallRye JWT Buildは、これらすべてのオプションを使用してJWTクレームを保護するためのAPIを提供します。このAPIをサポートするために、 link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]が内部で使用されています。"

#. type: Title ==
#: upstream/_guides/security-jwt-build.adoc:21
#, no-wrap
msgid "Dependency"
msgstr "依存関係"

#. type: Block title
#: upstream/_guides/security-jwt-build.adoc:24
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:30
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-jwt-build</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-jwt-build.adoc:33
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:36
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-jwt-build\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:40
#, fuzzy
msgid "Note you can use Smallrye JWT Build API without having to create MicroProfile JWT endpoints supported by `quarkus-smallrye-jwt`.  It can also be excluded from `quarkus-smallrye-jwt` if MP JWT endpoints do not need to generate JWT tokens."
msgstr "なお、Smallrye JWT Build APIは、 `quarkus-smallrye-jwt` でサポートされているMicroprofile JWTエンドポイントを作成することなく使用することができます。また、MP JWTエンドポイントがJWTトークンを生成する必要がない場合は、 `quarkus-smallrye-jwt` から除外することもできます。"

#. type: Title ==
#: upstream/_guides/security-jwt-build.adoc:41
#, fuzzy, no-wrap
msgid "Create JwtClaimsBuilder and set the claims"
msgstr "JwtClaimsBuilderの作成とクレームの設定"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:44
#, fuzzy
msgid "The first step is to initialize a `JwtClaimsBuilder` using one of the options below and add some claims to it:"
msgstr "まず最初に、以下のいずれかのオプションを使用して `JwtClaimsBuilder` を初期化し、いくつかのクレームを追加します。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:59
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import javax.json.Json;\n"
"import javax.json.JsonObject;\n"
"import io.smallrye.jwt.build.Jwt;\n"
"import io.smallrye.jwt.build.JwtClaimsBuilder;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"...\n"
"// Create an empty builder and add some claims\n"
"JwtClaimsBuilder builder1 = Jwt.claims();\n"
"builder1.claim(\"customClaim\", \"custom-value\").issuer(\"https://issuer.org\");\n"
"// Or start typing the claims immediately:\n"
"// JwtClaimsBuilder builder1 = Jwt.upn(\"Alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:62
#, no-wrap
msgid ""
"// Builder created from the existing claims\n"
"JwtClaimsBuilder builder2 = Jwt.claims(\"/tokenClaims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:65
#, no-wrap
msgid ""
"// Builder created from a map of claims\n"
"JwtClaimsBuilder builder3 = Jwt.claims(Collections.singletonMap(\"customClaim\", \"custom-value\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:71
#, no-wrap
msgid ""
"// Builder created from JsonObject\n"
"JsonObject userName = Json.createObjectBuilder().add(\"username\", \"Alice\").build();\n"
"JsonObject userAddress = Json.createObjectBuilder().add(\"city\", \"someCity\").add(\"street\", \"someStreet\").build();\n"
"JsonObject json = Json.createObjectBuilder(userName).add(\"address\", userAddress).build();\n"
"JwtClaimsBuilder builder4 = Jwt.claims(json);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:75
#, no-wrap
msgid ""
"// Builder created from JsonWebToken\n"
"@Inject JsonWebToken token;\n"
"JwtClaimsBuilder builder5 = Jwt.claims(token);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:78
#, fuzzy
msgid "The API is fluent so the builder initialization can be done as part of the fluent API sequence."
msgstr "APIはフルーエントなので、ビルダーの初期化はフルーエントなAPIシーケンスの一部として行うことができます。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:80
#, fuzzy
msgid "The builder will also set `iat` (issued at) to the current time, `exp` (expires at) to 5 minutes away from the current time (it can be customized with the `smallrye.jwt.new-token.lifespan` property) and `jti` (unique token identifier) claims if they have not already been set."
msgstr "また、ビルダーは、 `iat` (issued at)を現在の時刻に、 `exp` (expires at)を現在の時刻から5分後に（ `smallrye.jwt.new-token.lifespan` プロパティでカスタマイズ可能）、 `jti` (unique token identifier)がまだ設定されていなければ、クレームを設定します。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:82
#, fuzzy
msgid "One can also configure `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` properties and skip setting the issuer and audience directly with the builder API."
msgstr "また、 `smallrye.jwt.new-token.issuer` と `smallrye.jwt.new-token.audience` のプロパティを設定し、builder API を使って発行者と視聴者の設定を直接省略することもできます。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:84
#, fuzzy
msgid "The next step is to decide how to secure the claims."
msgstr "次のステップは、債権をどのように確保するかです。"

#. type: Title ==
#: upstream/_guides/security-jwt-build.adoc:86
#, fuzzy, no-wrap
msgid "Sign the claims"
msgstr "請求項に署名"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:89
#, fuzzy
msgid "The claims can be signed immediately or after the `JSON Web Signature` headers have been set:"
msgstr "クレームは、すぐに署名することも、 `JSON Web Signature` ヘッダが設定された後に署名することもできます。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:94
#: upstream/_guides/security-jwt-build.adoc:148
#: upstream/_guides/security-jwt-build.adoc:213
#, no-wrap
msgid ""
"import io.smallrye.jwt.build.Jwt;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:98
#, no-wrap
msgid ""
"// Sign the claims using an RSA private key loaded from the location set with a 'smallrye.jwt.sign.key.location' property.\n"
"// No 'jws()' transition is necessary. Default algorithm is RS256.\n"
"String jwt1 = Jwt.claims(\"/tokenClaims.json\").sign();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:102
#, no-wrap
msgid ""
"// Set the headers and sign the claims with an RSA private key loaded in the code (the implementation of this method is omitted).\n"
"// Note a 'jws()' transition to a 'JwtSignatureBuilder', Default algorithm is RS256.\n"
"String jwt2 = Jwt.claims(\"/tokenClaims.json\").jws().keyId(\"kid1\").header(\"custom-header\", \"custom-value\").sign(getPrivateKey());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:105
#, fuzzy
msgid "Note the `alg` (algorithm) header is set to `RS256` by default. Signing key identifier (`kid` header) does not have to be set if a single JSON Web Key (JWK) containing a `kid` property is used."
msgstr "`alg` (algorithm) ヘッダーは、デフォルトでは `RS256` に設定されていることに注意してください。 `kid` プロパティを含む単一の JSON Web Key (JWK) を使用する場合は、署名鍵識別子 ( `kid` ヘッダ) を設定する必要はありません。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:108
#, fuzzy
msgid "RSA and Elliptic Curve (EC) private keys as well as symmetric secret keys can be used to sign the claims.  `ES256` and `HS256` are the defaut algorithms for EC private and symmetric key algorithms respectively."
msgstr "クレームの署名には、RSAや楕円曲線（EC）の秘密鍵のほか、対称性のある秘密鍵も使用できます。 `ES256` と `HS256` は、それぞれEC秘密鍵と対称鍵アルゴリズムのためのdefautアルゴリズムです。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:110
#, fuzzy
msgid "You can customize the signature algorithm, for example:"
msgstr "署名アルゴリズムのカスタマイズなどが可能です。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:115
#, no-wrap
msgid ""
"import io.smallrye.jwt.SignatureAlgorithm;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:118
#, no-wrap
msgid ""
"// Sign the claims using an RSA private key loaded from the location set with a 'smallrye.jwt.sign.key.location' property. Algorithm is PS256.\n"
"String jwt = Jwt.upn(\"Alice\").jws().algorithm(SignatureAlgorithm.PS256).sign();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:121
#, fuzzy
msgid "Alternatively you can use a `smallrye.jwt.new-token.signature-algorithm` property:"
msgstr "あるいは、 `smallrye.jwt.new-token.signature-algorithm` の物件を利用することもできます。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:125
#, fuzzy
msgid "```properties smallrye.jwt.new-token.signature-algorithm=PS256 ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:127
#: upstream/_guides/security-jwt-build.adoc:190
#, fuzzy
msgid "and write a simpler API sequence:"
msgstr "と、よりシンプルなAPIシーケンスを書くことができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:131
#: upstream/_guides/security-jwt-build.adoc:194
#, no-wrap
msgid "import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:134
#, no-wrap
msgid ""
"// Sign the claims using an RSA private key loaded from the location set with a 'smallrye.jwt.sign.key.location' property. Algorithm is PS256.\n"
"String jwt = Jwt.upn(\"Alice\").sign();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:137
#, fuzzy
msgid "Note the `sign` step can be combined with the <<encrypt-claims, encrypt>> step to produce `inner-signed and encrypted` tokens, see <<innersign-encrypt-claims, Sign the claims and encrypt the nested JWT token>> section."
msgstr "link:#innersign-encrypt-claims[Sign the claims and encrypt the nested JWT token]」の項を参照。 `inner-signed and encrypted` トークンを生成するために、 `sign` ステップを link:#encrypt-claims[encrypt]ステップと組み合わせることができることに注意してください。"

#. type: Title ==
#: upstream/_guides/security-jwt-build.adoc:139
#, fuzzy, no-wrap
msgid "Encrypt the claims"
msgstr "請求項の暗号化"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:143
#, fuzzy
msgid "The claims can be encrypted immediately or after the `JSON Web Encryption` headers have been set the same way as they can be signed.  The only minor difference is that encrypting the claims always requires a `jwe()` `JwtEncryptionBuilder` transition given that the API has been optimized to support signing and inner-signing of the claims."
msgstr "クレームの暗号化は、署名の場合と同様に、即時または `JSON Web Encryption` ヘッダの設定後に行うことができます。唯一の小さな違いは、APIがクレームの署名と内部署名をサポートするように最適化されていることから、クレームの暗号化には常に `jwe()` `JwtEncryptionBuilder` の移行が必要であることです。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:151
#, no-wrap
msgid ""
"// Encrypt the claims using an RSA public key loaded from the location set with a 'smallrye.jwt.encrypt.key.location' property. Default key encryption algorithm is RSA-OAEP.\n"
"String jwt1 = Jwt.claims(\"/tokenClaims.json\").jwe().encrypt();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:154
#, no-wrap
msgid ""
"// Set the headers and encrypt the claims with an RSA public key loaded in the code (the implementation of this method is omitted).  Default key encryption algorithm is A256KW.\n"
"String jwt2 = Jwt.claims(\"/tokenClaims.json\").jwe().header(\"custom-header\", \"custom-value\").encrypt(getSecretKey());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:157
#, fuzzy
msgid "Note the `alg` (key management algorithm) header is set to `RSA-OAEP` and the `enc` (content encryption header) is set to `A256GCM` by default."
msgstr "なお、デフォルトでは `alg` (key management algorithm) ヘッダーには `RSA-OAEP` が、 `enc` (content encryption header) には `A256GCM` が設定されています。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:160
#, fuzzy
msgid "RSA and Elliptic Curve (EC) public keys as well as symmetric secret keys can be used to encrypt the claims.  `ECDH-ES` and `A256KW` are the defaut algorithms for EC public and symmetric key encryption algorithms respectively."
msgstr "請求項の暗号化には、RSA、楕円曲線（EC）の公開鍵と、対称性のある秘密鍵が使用できます。 `ECDH-ES` と `A256KW` は、それぞれEC公開鍵と対称鍵の暗号化アルゴリズムの既定のアルゴリズムです。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:162
#, fuzzy
msgid "Note two encryption operations are done when creating an ecrypted token:"
msgstr "暗号化されたトークンを作成する際には、2つの暗号化処理が行われることに注意してください。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:164
#, fuzzy
msgid "the generated content encryption key is encrypted by the key supplied with the API using the key encryption algorithm such as `RSA-OAEP`"
msgstr "生成されたコンテンツ暗号化キーは、APIで提供されたキーにより、以下のようなキー暗号化アルゴリズムで暗号化されます。 `RSA-OAEP`"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:165
#, fuzzy
msgid "the claims are encryped by the generated content encryption key using the content encryption algorithm such as `A256GCM`."
msgstr "請求項は、生成されたコンテンツ暗号化キーにより、 `A256GCM` などのコンテンツ暗号化アルゴリズムを用いて暗号化されます。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:167
#, fuzzy
msgid "You can customize the key and content encryption algorithms, for example:"
msgstr "キーやコンテンツの暗号化アルゴリズムなどをカスタマイズすることができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:173
#, no-wrap
msgid ""
"import io.smallrye.jwt.KeyEncryptionAlgorithm;\n"
"import io.smallrye.jwt.ContentEncryptionAlgorithm;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:180
#, no-wrap
msgid ""
"// Encrypt the claims using an RSA public key loaded from the location set with a 'smallrye.jwt.encrypt.key.location' property.\n"
"// Key encryption algorithm is RSA-OAEP-256, content encryption algorithm is A256CBC-HS512.\n"
"String jwt = Jwt.subject(\"Bob\").jwe()\n"
"    .keyAlgorithm(KeyEncryptionAlgorithm.RSA_OAEP_256)\n"
"    .contentAlgorithm(ContentEncryptionAlgorithm.A256CBC_HS512)\n"
"    .encrypt();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:183
#, fuzzy
msgid "Alternatively you can use `smallrye.jwt.new-token.key-encryption-algorithm` and `smallrye.jwt.new-token.content-encryption-algorithm` properties to customize the key and content encryption algorithms:"
msgstr "また、 `smallrye.jwt.new-token.key-encryption-algorithm` と `smallrye.jwt.new-token.content-encryption-algorithm` プロパティを使って、キーとコンテンツの暗号化アルゴリズムをカスタマイズすることもできます。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:188
#, fuzzy
msgid "```properties smallrye.jwt.new-token.key-encryption-algorithm=RSA-OAEP-256 smallrye.jwt.new-token.content-encryption-algorithm=A256CBC-HS512 ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:198
#, no-wrap
msgid ""
"// Encrypt the claims using an RSA public key loaded from the location set with a 'smallrye.jwt.encrypt.key.location' property.\n"
"// Key encryption algorithm is RSA-OAEP-256, content encryption algorithm is A256CBC-HS512.\n"
"String jwt = Jwt.subject(\"Bob\").encrypt();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:202
#, fuzzy
msgid "Note that when the token is directly encrypted by the public RSA or EC key it is not possible to verify which party sent the token.  Therefore the secret keys should be preferred for directly encrypting the tokens, for example, when using JWT as cookies where a secret key is managed by the Quarkus endpoint with only this endpoint being both a producer and a consumer of the encrypted token."
msgstr "トークンがRSAまたはECの公開鍵で直接暗号化されている場合、どの当事者がトークンを送信したかを確認することはできないことに注意してください。したがって、秘密鍵はトークンを直接暗号化するために使用されるべきです。例えば、JWTをクッキーとして使用する場合、秘密鍵はQuarkusのエンドポイントによって管理され、このエンドポイントだけが暗号化されたトークンの生産者と消費者の両方になります。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:204
#, fuzzy
msgid "If you would like to use RSA or EC public keys to encrypt the token then it is recommended to sign the token first if the signing key is available, see the next <<innersign-encrypt-claims, Sign the claims and encrypt the nested JWT token>> section."
msgstr "RSAやECの公開鍵を使ってトークンを暗号化したい場合は、署名鍵があれば、まずトークンに署名することをお勧めします。次の「 link:#innersign-encrypt-claims[Sign the claims and encrypt the nested JWT token]」のセクションを参照してください。"

#. type: Title ==
#: upstream/_guides/security-jwt-build.adoc:206
#, fuzzy, no-wrap
msgid "Sign the claims and encrypt the nested JWT token"
msgstr "クレームへの署名とネストされたJWTトークンの暗号化"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:209
#, fuzzy
msgid "The claims can be signed and then the nested JWT token encrypted by combining the sign and encrypt steps."
msgstr "クレームは署名され、その後、署名と暗号化のステップを組み合わせることで、ネストされたJWTトークンを暗号化することができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:216
#, no-wrap
msgid ""
"// Sign the claims and encrypt the nested token using the private and public keys loaded from the locations set with the 'smallrye.jwt.sign.key.location' and 'smallrye.jwt.encrypt.key.location' properties respectively. Signature algorithm is RS256, key encryption algorithm is RSA-OAEP-256.\n"
"String jwt = Jwt.claims(\"/tokenClaims.json\").innerSign().encrypt();\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jwt-build.adoc:218
#, fuzzy, no-wrap
msgid "Fast JWT Generation"
msgstr "JWTの高速生成"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:221
#, fuzzy
msgid "If `smallrye.jwt.sign.key.location` or/and `smallrye.jwt.encrypt.key.location` properties are set then one can secure the existing claims (resources, maps, JsonObjects) with a single call:"
msgstr "`smallrye.jwt.sign.key.location` または/および `smallrye.jwt.encrypt.key.location` プロパティが設定されている場合、1回の呼び出しで既存のクレーム（リソース、マップ、JsonObject）を保護することができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:226
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").sign();\n"
"Jwt.sign(\"/claims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:229
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").jwe().encrypt();\n"
"Jwt.encrypt(\"/claims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:232
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").innerSign().encrypt();\n"
"Jwt.signAndEncrypt(\"/claims.json\");\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:234
#, fuzzy
msgid "As mentioned above, `iat` (issued at), `exp` (expires at), `jti` (token identifier), `iss` (issuer) and `aud` (audience) claims will be added if needed."
msgstr "前述のように、 `iat` （issued at）、 `exp` （expires at）、 `jti` （token identifier）、 `iss` （issuer）、 `aud` （audiation）の各クレームは必要に応じて追加されます。"

#. type: Title ==
#: upstream/_guides/security-jwt-build.adoc:235
#, fuzzy, no-wrap
msgid "Dealing with the keys"
msgstr "キーへの対応"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:238
#, fuzzy
msgid "`smallrye.jwt.sign.key.location` and `smallrye.jwt.encrypt.key.location` properties can be used to point to signing and encryption key locations. The keys can be located on the local file system, classpath, or fetched from the remote endpoints and can be in `PEM` or `JSON Web Key` (`JWK`) formats. For example:"
msgstr "`smallrye.jwt.sign.key.location` および `smallrye.jwt.encrypt.key.location` プロパティは、署名および暗号化キーの場所を示すために使用できます。鍵は、ローカルファイルシステム、クラスパス、またはリモートエンドポイントから取得することができ、 `PEM` または `JSON Web Key` ( `JWK`) 形式であることができます。例えば、以下のようになります。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:243
#, no-wrap
msgid ""
"smallrye.jwt.sign.key=privateKey.pem\n"
"smallrye.jwt.encrypt.key=publicKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:246
#, fuzzy
msgid "You can also use MicroProfile `ConfigSource` to fetch the keys from the external services such as link:{vault-guide}[HashiCorp Vault] or other secret managers and use `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` properties instead:"
msgstr "また、MicroProfile `ConfigSource` を使用して、 link:{vault-guide}[HashiCorp Vault]やその他のシークレットマネージャーなどの外部サービスから鍵を取得し、代わりに `smallrye.jwt.sign.key` と `smallrye.jwt.encrypt.key` のプロパティを使用することもできます。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:251
#, no-wrap
msgid ""
"smallrye.jwt.sign.key=${private.key.from.vault}\n"
"smallrye.jwt.encrypt.key=${public.key.from.vault}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:255
#, fuzzy
msgid "where both `private.key.from.vault` and `public.key.from.vault` are the `PEM` or `JWK` formatted key values provided by the custom `ConfigSource`.  `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` can also contain only the Base64-encoded private or public keys values."
msgstr "ここで、 `private.key.from.vault` と `public.key.from.vault` の両方は、カスタム `ConfigSource` によって提供された `PEM` または `JWK` フォーマットの鍵の値です。 `smallrye.jwt.sign.key` と `smallrye.jwt.encrypt.key` は、Base64 エンコードされた秘密鍵または公開鍵の値のみを含むこともできます。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:257
#, fuzzy
msgid "However, please note, directly inlining the private keys in the configuration is not recommended. Use the `smallrye.jwt.sign.key` property only if you need to fetch a signing key value from the remote secret manager."
msgstr "ただし、秘密鍵を構成に直接インライン化することは推奨されませんのでご注意ください。 `smallrye.jwt.sign.key` プロパティは、リモート・シークレット・マネージャから署名キーの値を取得する必要がある場合にのみ使用してください。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:259
#, fuzzy
msgid "The keys can also be loaded by the code which builds the token and supplied to JWT Build API."
msgstr "キーは、トークンをビルドするコードによって読み込まれ、JWT Build APIに供給することもできます。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:261
#, fuzzy
msgid "If you need to sign and/or encrypt the token using the symmetric secret key then consider using `io.smallrye.jwt.util.KeyUtils` to generate a SecretKey of the required length."
msgstr "トークンを対称性のある秘密鍵で署名・暗号化する必要がある場合は、 `io.smallrye.jwt.util.KeyUtils` を使って必要な長さの SecretKey を生成することを検討してください。"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:263
#, fuzzy
msgid "For example, one needs to have a 64 byte key to sign using the `HS512` algorithm (`512/8`) and a 32 byte key to encrypt the content encryption key with the `A256KW` algorithm (`256/8`):"
msgstr "例えば、 `HS512` アルゴリズムを用いて署名するためには64バイトの鍵が必要であり( `512/8`)、 `A256KW` アルゴリズムを用いてコンテンツの暗号化キーを暗号化するためには32バイトの鍵が必要である( `256/8`)。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:271
#, no-wrap
msgid ""
"import javax.crypto.SecretKey;\n"
"import io.smallrye.jwt.KeyEncryptionAlgorithm;\n"
"import io.smallrye.jwt.SignatureAlgorithm;\n"
"import io.smallrye.jwt.build.Jwt;\n"
"import io.smallrye.jwt.util.KeyUtils;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:275
#, no-wrap
msgid ""
"SecretKey signingKey = KeyUtils.generateSecretKey(SignatureAlgorithm.HS512);\n"
"SecretKey encryptionKey = KeyUtils.generateSecretKey(KeyEncryptionAlgorithm.A256KW);\n"
"String jwt = Jwt.claim(\"sensitiveClaim\", getSensitiveClaim()).innerSign(signingKey).encrypt(encryptionKey);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:278
#, fuzzy
msgid "You can also consider using a `JSON Web Key` (JWK) or `JSON Web Key Set` (JWK Set) format to store a secret key on a secure file system and refer to it using either `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` properties, for example:"
msgstr "また、 `JSON Web Key` （JWK）または `JSON Web Key Set` （JWK Set）形式を使用して、秘密鍵を安全なファイルシステムに保存し、 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` プロパティなどを使用して参照することも検討できます。"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:286
#, no-wrap
msgid ""
"{\n"
" \"kty\":\"oct\",\n"
" \"kid\":\"secretKey\",\n"
" \"k\":\"Fdh9u8rINxfivbrianbbVT1u232VQBZYKx1HGAGPt2I\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:289
#, fuzzy
msgid "or"
msgstr "または"

#. type: delimited block -
#: upstream/_guides/security-jwt-build.adoc:306
#, no-wrap
msgid ""
"{\n"
" \"keys\": [\n"
"   {\n"
"     \"kty\":\"oct\",\n"
"     \"kid\":\"secretKey1\",\n"
"     \"k\":\"Fdh9u8rINxfivbrianbbVT1u232VQBZYKx1HGAGPt2I\"\n"
"   },\n"
"   {\n"
"     \"kty\":\"oct\",\n"
"     \"kid\":\"secretKey2\",\n"
"     \"k\":\"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\"\n"
"   }\n"
" ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:309
#, fuzzy
msgid "`io.smallrye.jwt.util.KeyUtils` can also be used to generate a pair of assymetric RSA or EC keys. These keys can be stored using a `JWK`, `JWK Set` or `PEM` format."
msgstr "`io.smallrye.jwt.util.KeyUtils` は、アサイメント RSA または EC キーのペアを生成するためにも使用できます。これらの鍵は、 `JWK` 、 `JWK Set` 、 `PEM` の形式で保存することができます。"

#. type: Title ==
#: upstream/_guides/security-jwt-build.adoc:310
#, fuzzy, no-wrap
msgid "SmallRye JWT Builder configuration"
msgstr "SmallRye JWT Builderの設定"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:313
#, fuzzy
msgid "SmallRye JWT supports the following properties which can be used to customize the way claims are signed and/or encrypted:"
msgstr "SmallRye JWTは、クレームの署名や暗号化の方法をカスタマイズするために使用できる以下のプロパティをサポートしています。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:316
#, no-wrap
msgid "Property Nam"
msgstr "プロパティ名"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:316
#, no-wrap
msgid "Default"
msgstr "デフォルト"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:317
#, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:317
#, no-wrap
msgid "smallrye.jwt.sign.key.location"
msgstr "smallrye.jwt.sign.key.location"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:317
#: upstream/_guides/security-jwt-build.adoc:319
#: upstream/_guides/security-jwt-build.adoc:320
#: upstream/_guides/security-jwt-build.adoc:323
#, no-wrap
msgid "`none`"
msgstr "`none`"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:318
#, no-wrap
msgid "Location of a private key which will be used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr "引数なし `sign()` または `innerSign()` メソッドが呼び出されたときに、クレームに署名するために使用される秘密鍵の場所。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:318
#, no-wrap
msgid "smallrye.jwt.sign.key"
msgstr "smallrye.jwt.sign.key"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:318
#: upstream/_guides/security-jwt-build.adoc:322
#: upstream/_guides/security-jwt-build.adoc:329
#: upstream/_guides/security-jwt-build.adoc:330
#, no-wrap
msgid "non"
msgstr "non"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:319
#, fuzzy, no-wrap
msgid "Key value which will be used to sign the claims when either a no-argument sign() or innerSign() method is called."
msgstr "引数なしのsign()またはinnerSign()メソッドが呼び出された際に、クレームに署名するために使用されるキーの値。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:319
#, no-wrap
msgid "smallrye.jwt.sign.key.i"
msgstr "smallrye.jwt.sign.key.i"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:320
#, fuzzy, no-wrap
msgid "Signing key identifier which is checked only when JWK keys are used."
msgstr "JWKキーが使用される場合にのみチェックされる署名キーの識別子。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:320
#, no-wrap
msgid "smallrye.jwt.encrypt.key.location"
msgstr "smallrye.jwt.encrypt.key.location"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:321
#, no-wrap
msgid "Location of a public key which will be used to encrypt the claims or inner JWT when a no-argument `encrypt()` method is called."
msgstr "引数無し `encrypt()` メソッドが呼び出された際に、クレームまたは内部 JWT を暗号化するために使用される公開鍵の位置。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:321
#, no-wrap
msgid "smallrye.jwt.sign.relax-key-validation"
msgstr "smallrye.jwt.sign.relax-key-validation"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:321
#: upstream/_guides/security-jwt-build.adoc:324
#: upstream/_guides/security-jwt-build.adoc:331
#, fuzzy, no-wrap
msgid "fals"
msgstr "fals"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:322
#, fuzzy, no-wrap
msgid "Relax the validation of the signing keys."
msgstr "署名鍵の検証を緩和する。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:322
#, no-wrap
msgid "smallrye.jwt.encrypt.key"
msgstr "smallrye.jwt.encrypt.key"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:323
#, fuzzy, no-wrap
msgid "Key value which will be used to encrypt the claims or inner JWT when a no-argument encrypt() method is called."
msgstr "引数なしのencrypt()メソッドが呼び出された際に、クレームまたは内側のJWTを暗号化するために使用されるキー値。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:323
#, no-wrap
msgid "smallrye.jwt.encrypt.key.i"
msgstr "smallrye.jwt.encrypt.key.i"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:324
#, fuzzy, no-wrap
msgid "Encryption key identifier which is checked only when JWK keys are used."
msgstr "JWKキーを使用する場合にのみチェックされる暗号化キーの識別子。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:324
#, no-wrap
msgid "smallrye.jwt.encrypt.relax-key-validation"
msgstr "smallrye.jwt.encrypt.relax-key-validation"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:325
#, fuzzy, no-wrap
msgid "Relax the validation of the encryption keys."
msgstr "暗号化キーの検証を緩和する。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:325
#, no-wrap
msgid "smallrye.jwt.new-token.signature-algorith"
msgstr "smallrye.jwt.new-token.signature-algorith"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:325
#, no-wrap
msgid "RS256"
msgstr "RS256"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:326
#, fuzzy, no-wrap
msgid "Signature algorithm. This property will be checked if the JWT signature builder has not already set the signature algorithm."
msgstr "署名アルゴリズム。このプロパティは、JWT 署名ビルダがまだ署名アルゴリズムを設定していない場合にチェックされます。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:326
#, fuzzy, no-wrap
msgid "smallrye.jwt.new-token.key-encryption-algorith"
msgstr "smallrye.jwt.new-token.key-encryption-algorithm (キー暗号アルゴリズム)"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:326
#, no-wrap
msgid "RSA-OAEP"
msgstr "RSA-OAEP"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:327
#, fuzzy, no-wrap
msgid "Key encryption algorithm. This property will be checked if the JWT encryption builder has not already set the key encryption algorithm."
msgstr "キー暗号化アルゴリズム。このプロパティは、JWT 暗号化ビルダーがキー暗号化アルゴリズムをまだ設定していない場合にチェックされます。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:327
#, fuzzy, no-wrap
msgid "smallrye.jwt.new-token.content-encryption-algorith"
msgstr "smallrye.jwt.new-token.content-encryption-algorithm"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:327
#, no-wrap
msgid "A256GCM"
msgstr "A256GCM"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:328
#, fuzzy, no-wrap
msgid "Content encryption algorithm. This property will be checked if the JWT encryption builder has not already set the content encryption algorithm."
msgstr "コンテンツの暗号化アルゴリズム。このプロパティは、JWT encryption builder がコンテンツの暗号化アルゴリズムをまだ設定していない場合にチェックされます。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:328
#, no-wrap
msgid "smallrye.jwt.new-token.lifespan"
msgstr "smallrye.jwt.new-token.lifespan"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:328
#, no-wrap
msgid "300"
msgstr "300"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:329
#, fuzzy, no-wrap
msgid "Token lifespan in seconds which will be used to calculate an `exp` (expiry) claim value if this claim has not already been set."
msgstr "`exp` (expiry)クレームの値を計算するために使用される、秒単位のトークン寿命。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:329
#, no-wrap
msgid "smallrye.jwt.new-token.issuer"
msgstr "smallrye.jwt.new-token.issuer"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:330
#, fuzzy, no-wrap
msgid "Token issuer which can be used to set an `iss` (issuer) claim value if this claim has not already been set."
msgstr "`iss` （発行者）のクレーム値がまだ設定されていない場合に、その設定に使用できるトークン発行者。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:330
#, fuzzy, no-wrap
msgid "smallrye.jwt.new-token.audienc"
msgstr "smallrye.jwt.new-token.audienc"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:331
#, fuzzy, no-wrap
msgid "Token audience which can be used to set an `aud` (audience) claim value if this claim has not already been set."
msgstr "`aud` （オーディエンス）のクレーム値がまだ設定されていない場合に、その設定に使用できるトークンオーディエンス。"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:331
#, fuzzy, no-wrap
msgid "smallrye.jwt.new-token.override-matching-claim"
msgstr "smallrye.jwt.new-token.override-matching-claim"

#. type: Table
#: upstream/_guides/security-jwt-build.adoc:332
#, fuzzy, no-wrap
msgid "Set this property to `true` for `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` values to override the already initialized `iss` (issuer) and `aud` (audience) claims."
msgstr "既に初期化されている `iss` （発行者）と `aud` （視聴者）の請求を上書きするために、 `smallrye.jwt.new-token.issuer` と `smallrye.jwt.new-token.audience` の値にこのプロパティを `true` に設定します。"

#. type: Title ==
#: upstream/_guides/security-jwt-build.adoc:334
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:337
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:338
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:339
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:340
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:341
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:342
msgid "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"
msgstr "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:343
msgid "xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications]"
msgstr "link:security-openid-connect.html[OpenID Connectによるサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:344
msgid "xref:security-jwt.adoc[Using Smallrye JWT to Protect Service Applications]"
msgstr "link:security-jwt.html[Smallrye JWTによるサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-jwt-build.adoc:344
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"
