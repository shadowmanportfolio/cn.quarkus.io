# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/optaplanner.adoc:6
#, fuzzy, no-wrap
msgid "OptaPlanner - Using AI to optimize a schedule with OptaPlanner"
msgstr "OptaPlanner - OptaPlannerを使ったAIによるスケジュールの最適化"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:13
#, fuzzy
msgid "This guide walks you through the process of creating a Quarkus application with https://www.optaplanner.org/[OptaPlanner]'s constraint solving Artificial Intelligence (AI)."
msgstr ""
"このガイドでは、 link:https://www.optaplanner.org/[OptaPlanner]の制約解決型人"
"工知能（AI）を使用してQuarkusアプリケーションを作成するプロセスを説明します。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:14
#, fuzzy, no-wrap
msgid "What you will build"
msgstr "あなたが作るもの"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:17
#, fuzzy
msgid "You will build a REST application that optimizes a school timetable for students and teachers:"
msgstr "生徒と教師のために学校の時間割を最適化するRESTアプリケーションを構築します。"

#. type: Target for macro image
#: upstream/_guides/optaplanner.adoc:18
#, no-wrap
msgid "optaplanner-time-table-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:22
#, fuzzy
msgid "Your service will assign `Lesson` instances to `Timeslot` and `Room` instances automatically by using AI to adhere to hard and soft scheduling _constraints_, such as the following examples:"
msgstr ""
"お客様のサービスでは、以下の例のようなハード・ソフトのスケジューリング "
"_制約_を守るために、AIを使って `Lesson` インスタンスを `Timeslot` 、 `Room` "
"インスタンスに自動的に割り当てます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:24
#, fuzzy
msgid "A room can have at most one lesson at the same time."
msgstr "1つの部屋で同時に受講できるレッスン数は最大で1つです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:25
#, fuzzy
msgid "A teacher can teach at most one lesson at the same time."
msgstr "先生が同時に教えることができるのは、最大で1つのレッスンだけです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:26
#, fuzzy
msgid "A student can attend at most one lesson at the same time."
msgstr "生徒が同時に受講できるレッスンは最大で1つです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:27
#, fuzzy
msgid "A teacher prefers to teach all lessons in the same room."
msgstr "先生は、すべてのレッスンを同じ部屋で教えたいと思っています。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:28
#, fuzzy
msgid "A teacher prefers to teach sequential lessons and dislikes gaps between lessons."
msgstr "ある先生は、連続したレッスンを好み、レッスンとレッスンの間にギャップがあるこ"
"とを嫌います。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:29
#, fuzzy
msgid "A student dislikes sequential lessons on the same subject."
msgstr "同じ科目の連続した授業が嫌いな生徒がいる。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:36
#, fuzzy
msgid "Mathematically speaking, school timetabling is an _NP-hard_ problem.  This means it is difficult to scale.  Simply brute force iterating through all possible combinations takes millions of years for a non-trivial dataset, even on a supercomputer.  Luckily, AI constraint solvers such as OptaPlanner have advanced algorithms that deliver a near-optimal solution in a reasonable amount of time."
msgstr ""
"数学的に言えば、学校の時間割は _NPハード_問題です。つまり、スケールアップが難"
"しいのです。可能なすべての組み合わせを総当りで反復するだけでは、スーパーコン"
"ピュータを使っても、自明でないデータセットでは何百万年もかかってしまいます。"
"幸いなことに、OptaPlannerのようなAI制約ソルバーは、高度なアルゴリズムを持ち、"
"合理的な時間でほぼ最適なソリューションを提供します。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:38
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:46
#, fuzzy
msgid "The solution is located in {quickstarts-tree-url}/optaplanner-quickstart[the `optaplanner-quickstart` directory]."
msgstr ""
"ソリューションは {quickstarts-tree-url}/optaplanner-quickstart[the "
"`optaplanner-quickstart` directory]にあります。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:47
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:53
#, fuzzy, no-wrap
msgid "The build file and the dependencies"
msgstr "ビルドファイルと依存関係"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:57
#, fuzzy
msgid "Use https://code.quarkus.io/[code.quarkus.io] to generate an application with the following extensions, for Maven or Gradle:"
msgstr ""
"link:https://code.quarkus.io/[code.quarkus.io]を使用して、MavenまたはGradle用"
"の以下の拡張機能を持つアプリケーションを生成します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:59
#, fuzzy
msgid "RESTEasy Reactive (`quarkus-resteasy-reactive`)"
msgstr "RESTEasy Jackson ( `quarkus-resteasy-jackson`)"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:60
#, fuzzy
msgid "RESTEasy Reactive Jackson (`quarkus-resteasy-reactive-jackson`)"
msgstr "RESTEasy Jackson ( `quarkus-resteasy-jackson`)"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:61
#, fuzzy
msgid "OptaPlanner (`optaplanner-quarkus`)"
msgstr "OptaPlanner ( `optaplanner-quarkus`)"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:62
#, fuzzy
msgid "OptaPlanner Jackson (`optaplanner-quarkus-jackson`)"
msgstr "OptaPlanner Jackson ( `optaplanner-quarkus-jackson`)"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:64
#, fuzzy
msgid "Alternatively, generate it from the command line:"
msgstr "また、Mavenを使ってコマンドラインから生成することもできます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:70
#, fuzzy
msgid "This will include the following dependencies in your build file:"
msgstr "これにより、ビルドファイルに以下の依存関係が含まれます。"

#. type: Block title
#: upstream/_guides/optaplanner.adoc:72 upstream/_guides/optaplanner.adoc:726
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:109
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>io.quarkus.platform</groupId>\n"
"            <artifactId>quarkus-bom</artifactId>\n"
"            <version>{quarkus-version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus.platform</groupId>\n"
"            <artifactId>quarkus-optaplanner-bom</artifactId>\n"
"            <version>{quarkus-version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>org.optaplanner</groupId>\n"
"        <artifactId>optaplanner-quarkus</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>org.optaplanner</groupId>\n"
"        <artifactId>optaplanner-quarkus-jackson</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:116
#, no-wrap
msgid ""
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-junit5</artifactId>\n"
"        <scope>test</scope>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/optaplanner.adoc:119 upstream/_guides/optaplanner.adoc:736
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:128
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation enforcedPlatform(\"io.quarkus.platform:quarkus-bom:{quarkus-version}\")\n"
"    implementation enforcedPlatform(\"io.quarkus.platform:quarkus-optaplanner-bom:{quarkus-version}\")\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive'\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'\n"
"    implementation 'org.optaplanner:optaplanner-quarkus'\n"
"    implementation 'org.optaplanner:optaplanner-quarkus-jackson'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:131
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"}\n"
msgstr ""

#
#
#. type: Title ==
#: upstream/_guides/optaplanner.adoc:133
#, fuzzy, no-wrap
msgid "Model the domain objects"
msgstr "ドメインオブジェクトのモデル化"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:137
#, fuzzy
msgid "Your goal is to assign each lesson to a time slot and a room.  You will create these classes:"
msgstr "あなたの目標は、各レッスンを時間帯と部屋に割り当てることです。これらのクラス"
"を作成します。"

#. type: Target for macro image
#: upstream/_guides/optaplanner.adoc:138
#, no-wrap
msgid "optaplanner-time-table-class-diagram-pure.png"
msgstr ""

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:140
#, fuzzy, no-wrap
msgid "Timeslot"
msgstr "タイムスロット"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:146
#, fuzzy
msgid "The `Timeslot` class represents a time interval when lessons are taught, for example, `Monday 10:30 - 11:30` or `Tuesday 13:30 - 14:30`.  For simplicity's sake, all time slots have the same duration and there are no time slots during lunch or other breaks."
msgstr ""
"`Timeslot` クラスは、 `Monday 10:30 - 11:30` や `Tuesday 13:30 - 14:30` のよ"
"うに、レッスンが行われる時間帯を表しています。簡略化のため、すべての時間帯は"
"同じ時間であり、昼食やその他の休憩時間の時間帯はありません。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:149
#, fuzzy
msgid "A time slot has no date, because a high school schedule just repeats every week.  So there is no need for https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning[continuous planning]."
msgstr ""
"時間枠には日付がありません。なぜなら、高校のスケジュールは毎週繰り返されるだ"
"けだからです。だから、 link:https://docs.optaplanner.org/latestFinal/"
"optaplanner-docs/html_single/index."
"html#continuousPlanning[継続して計画を]立てる必要はないのです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:151
#, fuzzy
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Timeslot.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/Timeslot.java` "
"クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:155 upstream/_guides/optaplanner.adoc:212
#: upstream/_guides/optaplanner.adoc:267 upstream/_guides/optaplanner.adoc:504
#, no-wrap
msgid "package org.acme.optaplanner.domain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:158 upstream/_guides/optaplanner.adoc:749
#, no-wrap
msgid ""
"import java.time.DayOfWeek;\n"
"import java.time.LocalTime;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:160
#, no-wrap
msgid "public class Timeslot {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:164
#, no-wrap
msgid ""
"    private DayOfWeek dayOfWeek;\n"
"    private LocalTime startTime;\n"
"    private LocalTime endTime;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:167
#, no-wrap
msgid ""
"    public Timeslot() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:173
#, no-wrap
msgid ""
"    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {\n"
"        this.dayOfWeek = dayOfWeek;\n"
"        this.startTime = startTime;\n"
"        this.endTime = endTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:177
#, no-wrap
msgid ""
"    public DayOfWeek getDayOfWeek() {\n"
"        return dayOfWeek;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:181
#, no-wrap
msgid ""
"    public LocalTime getStartTime() {\n"
"        return startTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:185
#, no-wrap
msgid ""
"    public LocalTime getEndTime() {\n"
"        return endTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:190
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return dayOfWeek + \" \" + startTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:192 upstream/_guides/optaplanner.adoc:234
#: upstream/_guides/optaplanner.adoc:335 upstream/_guides/optaplanner.adoc:409
#: upstream/_guides/optaplanner.adoc:482 upstream/_guides/optaplanner.adoc:555
#: upstream/_guides/optaplanner.adoc:648 upstream/_guides/optaplanner.adoc:791
#: upstream/_guides/optaplanner.adoc:881 upstream/_guides/optaplanner.adoc:1035
#: upstream/_guides/optaplanner.adoc:1095
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:196
#, fuzzy
msgid "Because no `Timeslot` instances change during solving, a `Timeslot` is called a _problem fact_.  Such classes do not require any OptaPlanner specific annotations."
msgstr ""
"解答中に `Timeslot` インスタンスが変化しないため、 `Timeslot` は _問題の事実_"
"と呼ばれます。このようなクラスは、OptaPlanner固有のアノテーションを必要としま"
"せん。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:199
#, fuzzy
msgid "Notice the `toString()` method keeps the output short, so it is easier to read OptaPlanner's `DEBUG` or `TRACE` log, as shown later."
msgstr ""
"`toString()` メソッドは、出力を短くしていることに注意してください。そのため、"
"後に示すように、OptaPlanner の `DEBUG` または `TRACE` "
"のログを読みやすくしています。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:200
#, fuzzy, no-wrap
msgid "Room"
msgstr "ルーム"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:206
#, fuzzy
msgid "The `Room` class represents a location where lessons are taught, for example, `Room A` or `Room B`.  For simplicity's sake, all rooms are without capacity limits and they can accommodate all lessons."
msgstr ""
"`Room` クラスは、レッスンが行われる場所を表しており、例えば、 `Room A` や `"
"Room B` のようになります。簡略化のため、すべての部屋には定員の制限がなく、す"
"べてのレッスンを受けることができます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:208
#, fuzzy
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Room.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/Room.java` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:214
#, no-wrap
msgid "public class Room {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:216
#, no-wrap
msgid "    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:219
#, no-wrap
msgid ""
"    public Room() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:223
#, no-wrap
msgid ""
"    public Room(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:227
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:232
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:237
#, fuzzy
msgid "`Room` instances do not change during solving, so `Room` is also a _problem fact_."
msgstr "`Room` インスタンスは解答中には変化しないので、 `Room` も "
"_問題のある事実_です。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:238
#, fuzzy, no-wrap
msgid "Lesson"
msgstr "レッスン"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:246
#, fuzzy
msgid "During a lesson, represented by the `Lesson` class, a teacher teaches a subject to a group of students, for example, `Math by A.Turing for 9th grade` or `Chemistry by M.Curie for 10th grade`.  If a subject is taught multiple times per week by the same teacher to the same student group, there are multiple `Lesson` instances that are only distinguishable by `id`.  For example, the 9th grade has six math lessons a week."
msgstr ""
"`Lesson` クラスで表されるレッスンの間、教師は、例えば `Math by A.Turing for "
"9th grade` や `Chemistry by M.Curie for 10th grade` のような生徒のグループに"
"ある科目を教えます。ある科目が同じ教師によって同じ学生グループに週に何度も教"
"えられる場合、 `id` でのみ区別できる複数の `Lesson` "
"インスタンスが存在します。例えば、9年生の数学の授業は週に6回あります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:250
#, fuzzy
msgid "During solving, OptaPlanner changes the `timeslot` and `room` fields of the `Lesson` class, to assign each lesson to a time slot and a room.  Because OptaPlanner changes these fields, `Lesson` is a _planning entity_:"
msgstr ""
"解答中、OptaPlanner は `Lesson` クラスの `timeslot` と `room` "
"フィールドを変更し、各レッスンをタイムスロットと部屋に割り当てます。"
"OptaPlanner はこれらのフィールドを変更するため、 `Lesson` は "
"_計画的なエンティティ_となります。"

#. type: Target for macro image
#: upstream/_guides/optaplanner.adoc:251
#, no-wrap
msgid "optaplanner-time-table-class-diagram-annotated.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:261
#, fuzzy
msgid "Most of the fields in the previous diagram contain input data, except for the orange fields: A lesson's `timeslot` and `room` fields are unassigned (`null`) in the input data and assigned (not `null`) in the output data.  OptaPlanner changes these fields during solving.  Such fields are called planning variables.  In order for OptaPlanner to recognize them, both the `timeslot` and `room` fields require an `@PlanningVariable` annotation.  Their containing class, `Lesson`, requires an `@PlanningEntity` annotation."
msgstr ""
"前述の図では、オレンジ色のフィールドを除き、ほとんどのフィールドが入力データ"
"を含んでいます。レッスンの `timeslot` および `room` "
"フィールドは、入力データでは割り当てられておらず（ `null` "
"）、出力データでは割り当てられています（ `null` ではありません）。"
"OptaPlanner は、解答中にこれらのフィールドを変更します。このようなフィールド"
"は計画変数と呼ばれます。OptaPlanner がこれらを認識するためには、 `timeslot` "
"と `room` の両フィールドに `@PlanningVariable` "
"のアノテーションが必要です。また、それらを含むクラスである `Lesson` には "
"`@PlanningEntity` のアノテーションが必要です。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:263
#, fuzzy
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Lesson.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/Lesson.java` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:271
#, no-wrap
msgid ""
"import org.optaplanner.core.api.domain.entity.PlanningEntity;\n"
"import org.optaplanner.core.api.domain.lookup.PlanningId;\n"
"import org.optaplanner.core.api.domain.variable.PlanningVariable;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:274
#, no-wrap
msgid ""
"@PlanningEntity\n"
"public class Lesson {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:277
#, no-wrap
msgid ""
"    @PlanningId\n"
"    private Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:281
#, no-wrap
msgid ""
"    private String subject;\n"
"    private String teacher;\n"
"    private String studentGroup;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:286
#, no-wrap
msgid ""
"    @PlanningVariable(valueRangeProviderRefs = \"timeslotRange\")\n"
"    private Timeslot timeslot;\n"
"    @PlanningVariable(valueRangeProviderRefs = \"roomRange\")\n"
"    private Room room;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:289
#, no-wrap
msgid ""
"    public Lesson() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:296
#, no-wrap
msgid ""
"    public Lesson(Long id, String subject, String teacher, String studentGroup) {\n"
"        this.id = id;\n"
"        this.subject = subject;\n"
"        this.teacher = teacher;\n"
"        this.studentGroup = studentGroup;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:300
#, no-wrap
msgid ""
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:304
#, no-wrap
msgid ""
"    public String getSubject() {\n"
"        return subject;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:308
#, no-wrap
msgid ""
"    public String getTeacher() {\n"
"        return teacher;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:312
#, no-wrap
msgid ""
"    public String getStudentGroup() {\n"
"        return studentGroup;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:316
#, no-wrap
msgid ""
"    public Timeslot getTimeslot() {\n"
"        return timeslot;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:320
#, no-wrap
msgid ""
"    public void setTimeslot(Timeslot timeslot) {\n"
"        this.timeslot = timeslot;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:324
#, no-wrap
msgid ""
"    public Room getRoom() {\n"
"        return room;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:328
#, no-wrap
msgid ""
"    public void setRoom(Room room) {\n"
"        this.room = room;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:333
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return subject + \"(\" + id + \")\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:340
#, fuzzy
msgid "The `Lesson` class has an `@PlanningEntity` annotation, so OptaPlanner knows that this class changes during solving because it contains one or more planning variables."
msgstr ""
"`Lesson` クラスは `@PlanningEntity` アノテーションを持っているので、"
"OptaPlanner はこのクラスが1つ以上の計画変数を含んでいるため、解答中に変化する"
"ことを知っています。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:346
#, fuzzy
msgid "The `timeslot` field has an `@PlanningVariable` annotation, so OptaPlanner knows that it can change its value.  In order to find potential `Timeslot` instances to assign to this field, OptaPlanner uses the `valueRangeProviderRefs` property to connect to a value range provider (explained later) that provides a `List<Timeslot>` to pick from."
msgstr ""
"`timeslot` フィールドは `@PlanningVariable` アノテーションを持っているので、"
"OptaPlanner はその値を変更できることを知っています。"
"このフィールドに割り当てる潜在的な `Timeslot` インスタンスを見つけるために、"
"OptaPlanner は `valueRangeProviderRefs` プロパティを使用して、選ぶべき "
"`List<Timeslot&amp;gt;` を提供する値域プロバイダ（後で説明）に接続します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:348
#, fuzzy
msgid "The `room` field also has an `@PlanningVariable` annotation, for the same reasons."
msgstr "`room` のフィールドには、同じ理由で `@PlanningVariable` "
"のアノテーションもあります。"

#. type: delimited block =
#: upstream/_guides/optaplanner.adoc:355
#, fuzzy
msgid "Determining the `@PlanningVariable` fields for an arbitrary constraint solving use case is often challenging the first time.  Read https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#domainModelingGuide[the domain modeling guidelines] to avoid common pitfalls."
msgstr ""
"任意の制約を解決するユースケースのために `@PlanningVariable` "
"フィールドを決定することは、初めての場合、しばしば困難です。 "
"link:https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/"
"index.html#domainModelingGuide[ドメイン・モデリング・ガイドライン]を読んで、"
"よくある落とし穴を避けましょう。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:357
#, fuzzy, no-wrap
msgid "Define the constraints and calculate the score"
msgstr "制約条件の定義とスコアの算出"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:363
#, fuzzy
msgid "A _score_ represents the quality of a specific solution.  The higher the better.  OptaPlanner looks for the best solution, which is the solution with the highest score found in the available time.  It might be the _optimal_ solution."
msgstr ""
"_スコア_は、特定のソリューションの品質を表します。高ければ高いほど良いという"
"ことになります。OptaPlanner は、利用可能な時間内に見つかった最高のスコアを持"
"つソリューションである、最良のソリューションを探します。それは "
"_最適な_ソリューションかもしれません。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:366
#, fuzzy
msgid "Because this use case has hard and soft constraints, use the `HardSoftScore` class to represent the score:"
msgstr "このユースケースにはハードとソフトの制約があるため、スコアを表すために "
"`HardSoftScore` クラスを使用します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:368
#, fuzzy
msgid "Hard constraints must not be broken. For example: _A room can have at most one lesson at the same time._"
msgstr "ハードな制約は破ってはいけない。例えば "
"_1つの部屋で同時に受講できるレッスン数は最大で1つです。_"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:369
#, fuzzy
msgid "Soft constraints should not be broken. For example: _A teacher prefers to teach in a single room._"
msgstr "ソフト面での制約は崩してはいけません。例えば、以下のような場合です。 "
"_ある先生は、一人部屋で教えたいと思っています。_"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:373
#, fuzzy
msgid "Hard constraints are weighted against other hard constraints.  Soft constraints are weighted too, against other soft constraints.  *Hard constraints always outweigh soft constraints*, regardless of their respective weights."
msgstr ""
"ハードな制約は、他のハードな制約に対して重み付けされます。ソフトな制約は、他"
"のソフトな制約に対しても重み付けされます。それぞれの重みに関わらず、 "
"*ハード制約は常にソフト*制約を上回ります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:375
#, fuzzy
msgid "To calculate the score, you could implement an `EasyScoreCalculator` class:"
msgstr "スコアを計算するために、 `EasyScoreCalculator` "
"クラスを実装することができます。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:379
#, no-wrap
msgid "public class TimeTableEasyScoreCalculator implements EasyScoreCalculator<TimeTable, HardSoftScore> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:407
#, no-wrap
msgid ""
"    @Override\n"
"    public HardSoftScore calculateScore(TimeTable timeTable) {\n"
"        List<Lesson> lessonList = timeTable.getLessonList();\n"
"        int hardScore = 0;\n"
"        for (Lesson a : lessonList) {\n"
"            for (Lesson b : lessonList) {\n"
"                if (a.getTimeslot() != null && a.getTimeslot().equals(b.getTimeslot())\n"
"                        && a.getId() < b.getId()) {\n"
"                    // A room can accommodate at most one lesson at the same time.\n"
"                    if (a.getRoom() != null && a.getRoom().equals(b.getRoom())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                    // A teacher can teach at most one lesson at the same time.\n"
"                    if (a.getTeacher().equals(b.getTeacher())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                    // A student can attend at most one lesson at the same time.\n"
"                    if (a.getStudentGroup().equals(b.getStudentGroup())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                }\n"
"            }\n"
"        }\n"
"        int softScore = 0;\n"
"        // Soft constraints are only implemented in the optaplanner-quickstarts code\n"
"        return HardSoftScore.of(hardScore, softScore);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:414
#, fuzzy
msgid "Unfortunately **that does not scale well**, because it is non-incremental: every time a lesson is assigned to a different time slot or room, all lessons are re-evaluated to calculate the new score."
msgstr ""
"残念ながら、 *この方法では拡張性がありませ*ん。レッスンが異なる時間帯や部屋に"
"割り当てられるたびに、すべてのレッスンが再評価され、新しいスコアが算出される"
"からです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:418
#, fuzzy
msgid "Instead, create a `src/main/java/org/acme/optaplanner/solver/TimeTableConstraintProvider.java` class to perform incremental score calculation.  It uses OptaPlanner's ConstraintStream API which is inspired by Java Streams and SQL:"
msgstr ""
"代わりに、増分スコア計算を実行する `src/main/java/org/acme/optaplanner/"
"solver/TimeTableConstraintProvider.java` クラスを作成します。これは、Java "
"StreamsやSQLからヒントを得たOptaPlannerのConstraintStream "
"APIを使用しています。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:422 upstream/_guides/optaplanner.adoc:746
#, no-wrap
msgid "package org.acme.optaplanner.solver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:429
#, no-wrap
msgid ""
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
"import org.optaplanner.core.api.score.stream.Constraint;\n"
"import org.optaplanner.core.api.score.stream.ConstraintFactory;\n"
"import org.optaplanner.core.api.score.stream.ConstraintProvider;\n"
"import org.optaplanner.core.api.score.stream.Joiners;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:431
#, no-wrap
msgid "public class TimeTableConstraintProvider implements ConstraintProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:442
#, no-wrap
msgid ""
"    @Override\n"
"    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n"
"        return new Constraint[] {\n"
"                // Hard constraints\n"
"                roomConflict(constraintFactory),\n"
"                teacherConflict(constraintFactory),\n"
"                studentGroupConflict(constraintFactory),\n"
"                // Soft constraints are only implemented in the optaplanner-quickstarts code\n"
"        };\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:445
#, fuzzy, no-wrap
msgid ""
"    Constraint roomConflict(ConstraintFactory constraintFactory) {\n"
"        // A room can accommodate at most one lesson at the same time.\n"
msgstr "ハードな制約は破ってはいけない。例えば "
"_1つの部屋で同時に受講できるレッスン数は最大で1つです。_"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:460
#, no-wrap
msgid ""
"        // Select a lesson ...\n"
"        return constraintFactory\n"
"                .forEach(Lesson.class)\n"
"                // ... and pair it with another lesson ...\n"
"                .join(Lesson.class,\n"
"                        // ... in the same timeslot ...\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        // ... in the same room ...\n"
"                        Joiners.equal(Lesson::getRoom),\n"
"                        // ... and the pair is unique (different id, no reverse pairs) ...\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                // ... then penalize each pair with a hard weight.\n"
"                .penalize(\"Room conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:470
#, no-wrap
msgid ""
"    Constraint teacherConflict(ConstraintFactory constraintFactory) {\n"
"        // A teacher can teach at most one lesson at the same time.\n"
"        return constraintFactory.forEach(Lesson.class)\n"
"                .join(Lesson.class,\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        Joiners.equal(Lesson::getTeacher),\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                .penalize(\"Teacher conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:480
#, no-wrap
msgid ""
"    Constraint studentGroupConflict(ConstraintFactory constraintFactory) {\n"
"        // A student can attend at most one lesson at the same time.\n"
"        return constraintFactory.forEach(Lesson.class)\n"
"                .join(Lesson.class,\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        Joiners.equal(Lesson::getStudentGroup),\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                .penalize(\"Student group conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:485
#, fuzzy
msgid "The `ConstraintProvider` scales an order of magnitude better than the `EasyScoreCalculator`: __O__(n) instead of __O__(n²)."
msgstr ""
"`ConstraintProvider` は `EasyScoreCalculator` に比べてスケールが一桁良く、 "
"_O_(n²)ではなく _O_(n)です。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:486
#, fuzzy, no-wrap
msgid "Gather the domain objects in a planning solution"
msgstr "ドメインオブジェクトをプランニングソリューションに集める"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:491
#, fuzzy
msgid "A `TimeTable` wraps all `Timeslot`, `Room`, and `Lesson` instances of a single dataset.  Furthermore, because it contains all lessons, each with a specific planning variable state, it is a _planning solution_ and it has a score:"
msgstr ""
"`TimeTable` は、1つのデータセットのすべての `Timeslot`, `Room`, `Lesson` イン"
"スタンスをラップしています。さらに、すべてのレッスンを含み、それぞれが特定の"
"計画変数の状態を持っているので、それは "
"_計画ソリューション_であり、スコアを持っていることになります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:494
#, fuzzy
msgid "If lessons are still unassigned, then it is an _uninitialized_ solution, for example, a solution with the score `-4init/0hard/0soft`."
msgstr ""
"もしレッスンがまだ割り当てられていなければ、それは "
"_初期化され_ていないソリューションであり、例えば、スコア `-4init/0hard/0soft`"
" のソリューションです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:496
#, fuzzy
msgid "If it breaks hard constraints, then it is an _infeasible_ solution, for example, a solution with the score `-2hard/-3soft`."
msgstr "もしそれが硬い制約を破るならば、それは _実行_不可能な解であり、例えば、"
"スコア `-2hard/-3soft` の解となります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:498
#, fuzzy
msgid "If it adheres to all hard constraints, then it is a _feasible_ solution, for example, a solution with the score `0hard/-7soft`."
msgstr "すべてのハード制約を守れば、それは _実現可能_な解であり、例えば、スコア `"
"0hard/-7soft` の解となります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:500
#, fuzzy
msgid "Create the `src/main/java/org/acme/optaplanner/domain/TimeTable.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/TimeTable.java` "
"クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:506
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:513
#, no-wrap
msgid ""
"import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;\n"
"import org.optaplanner.core.api.domain.solution.PlanningScore;\n"
"import org.optaplanner.core.api.domain.solution.PlanningSolution;\n"
"import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;\n"
"import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:516
#, no-wrap
msgid ""
"@PlanningSolution\n"
"public class TimeTable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:525
#, no-wrap
msgid ""
"    @ValueRangeProvider(id = \"timeslotRange\")\n"
"    @ProblemFactCollectionProperty\n"
"    private List<Timeslot> timeslotList;\n"
"    @ValueRangeProvider(id = \"roomRange\")\n"
"    @ProblemFactCollectionProperty\n"
"    private List<Room> roomList;\n"
"    @PlanningEntityCollectionProperty\n"
"    private List<Lesson> lessonList;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:528
#, no-wrap
msgid ""
"    @PlanningScore\n"
"    private HardSoftScore score;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:531
#, no-wrap
msgid ""
"    public TimeTable() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:537
#, no-wrap
msgid ""
"    public TimeTable(List<Timeslot> timeslotList, List<Room> roomList, List<Lesson> lessonList) {\n"
"        this.timeslotList = timeslotList;\n"
"        this.roomList = roomList;\n"
"        this.lessonList = lessonList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:541
#, no-wrap
msgid ""
"    public List<Timeslot> getTimeslotList() {\n"
"        return timeslotList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:545
#, no-wrap
msgid ""
"    public List<Room> getRoomList() {\n"
"        return roomList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:549
#, no-wrap
msgid ""
"    public List<Lesson> getLessonList() {\n"
"        return lessonList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:553
#, no-wrap
msgid ""
"    public HardSoftScore getScore() {\n"
"        return score;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:559
#, fuzzy
msgid "The `TimeTable` class has an `@PlanningSolution` annotation, so OptaPlanner knows that this class contains all of the input and output data."
msgstr ""
"`TimeTable` クラスには `@PlanningSolution` アノテーションが付いているので、"
"OptaPlanner "
"はこのクラスにすべての入出力データが含まれていることを認識しています。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:561
#, fuzzy
msgid "Specifically, this class is the input of the problem:"
msgstr "具体的には、このクラスが問題の入力となります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:563
#, fuzzy
msgid "A `timeslotList` field with all time slots"
msgstr "`timeslotList` 全タイムスロットのフィールド"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:564 upstream/_guides/optaplanner.adoc:566
#, fuzzy
msgid "This is a list of problem facts, because they do not change during solving."
msgstr "これは問題事実のリストであり、解いている最中には変化しないからです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:565
#, fuzzy
msgid "A `roomList` field with all rooms"
msgstr "全室完備の `roomList` フィールド"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:567
#, fuzzy
msgid "A `lessonList` field with all lessons"
msgstr "`lessonList` のフィールドで、すべてのレッスン"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:568
#, fuzzy
msgid "This is a list of planning entities, because they change during solving."
msgstr "これは計画中のエンティティのリストであり、解答中に変更されるからです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:569
#, fuzzy
msgid "Of each `Lesson`:"
msgstr "それぞれの `Lesson` 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:571
#, fuzzy
msgid "The values of the `timeslot` and `room` fields are typically still `null`, so unassigned.  They are planning variables."
msgstr "`timeslot` と `room` フィールドの値は、通常、まだ `null` "
"であり、割り当てられていません。これらは計画中の変数です。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:573
#, fuzzy
msgid "The other fields, such as `subject`, `teacher` and `studentGroup`, are filled in.  These fields are problem properties."
msgstr ""
"`subject` 、 `teacher` 、 `studentGroup` などの他のフィールドが記入されていま"
"す。これらのフィールドは問題のプロパティです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:575
#, fuzzy
msgid "However, this class is also the output of the solution:"
msgstr "しかし、このクラスはソリューションのアウトプットでもあります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:577
#, fuzzy
msgid "A `lessonList` field for which each `Lesson` instance has non-null `timeslot` and `room` fields after solving"
msgstr ""
"`lessonList` フィールドで、各 `Lesson` インスタンスが、解いた後に非 null の "
"`timeslot` および `room` フィールドを持つもの。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:578
#, fuzzy
msgid "A `score` field that represents the quality of the output solution, for example, `0hard/-5soft`"
msgstr "出力ソリューションの品質を表す `score` のフィールドです。 `0hard/-5soft`"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:579
#, fuzzy, no-wrap
msgid "The value range providers"
msgstr "値幅のあるプロバイダー"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:585
#, fuzzy
msgid "The `timeslotList` field is a value range provider.  It holds the `Timeslot` instances which OptaPlanner can pick from to assign to the `timeslot` field of `Lesson` instances.  The `timeslotList` field has an `@ValueRangeProvider` annotation to connect the `@PlanningVariable` with the `@ValueRangeProvider`, by matching the value of the `id` property with the value of the `valueRangeProviderRefs` property of the `@PlanningVariable` annotation in the `Lesson` class."
msgstr ""
"`timeslotList` フィールドは、値域プロバイダです。このフィールドには、"
"OptaPlanner が `Lesson` インスタンスの `timeslot` フィールドに割り当てられる "
"`Timeslot` インスタンスが格納されています。 `timeslotList` フィールドには "
"`@ValueRangeProvider` アノテーションがあり、 `id` プロパティの値を `Lesson` "
"クラスの `@PlanningVariable` アノテーションの `valueRangeProviderRefs` "
"プロパティの値と一致させることで、 `@PlanningVariable` と "
"`@ValueRangeProvider` を接続します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:587
#, fuzzy
msgid "Following the same logic, the `roomList` field also has an `@ValueRangeProvider` annotation."
msgstr "同じ論理で、 `roomList` のフィールドにも `@ValueRangeProvider` "
"のアノテーションがあります。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:588
#, fuzzy, no-wrap
msgid "The problem fact and planning entity properties"
msgstr "問題の事実と計画の実体のプロパティ"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:593
#, fuzzy
msgid "Furthermore, OptaPlanner needs to know which `Lesson` instances it can change as well as how to retrieve the `Timeslot` and `Room` instances used for score calculation by your `TimeTableConstraintProvider`."
msgstr ""
"さらに、OptaPlanner は、どの `Lesson` インスタンスを変更できるか、また、"
"スコア計算に使用される `Timeslot` および `Room` インスタンスを "
"`TimeTableConstraintProvider` から取得する方法を知る必要があります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:596
#, fuzzy
msgid "The `timeslotList` and `roomList` fields have an `@ProblemFactCollectionProperty` annotation, so your `TimeTableConstraintProvider` can select _from_ those instances."
msgstr ""
"`timeslotList` と `roomList` フィールドには `@ProblemFactCollectionProperty` "
"のアノテーションがあるので、 `TimeTableConstraintProvider` "
"はこれらのインスタンス _から_選択することができます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:600
#, fuzzy
msgid "The `lessonList` has an `@PlanningEntityCollectionProperty` annotation, so OptaPlanner can change them during solving and your `TimeTableConstraintProvider` can select _from_ those too."
msgstr ""
"`lessonList` には `@PlanningEntityCollectionProperty` "
"のアノテーションが付いているので、OptaPlanner "
"は解答中にそれらを変更することができ、あなたの `TimeTableConstraintProvider` "
"もそれらの _中_から選択することができます。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:601
#, fuzzy, no-wrap
msgid "Create the solver service"
msgstr "ソルバーサービスの作成"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:608
#, fuzzy
msgid "Now you are ready to put everything together and create a REST service.  But solving planning problems on REST threads causes HTTP timeout issues.  Therefore, the Quarkus extension injects a `SolverManager` instance, which runs solvers in a separate thread pool and can solve multiple datasets in parallel."
msgstr ""
"これで、すべてをまとめてRESTサービスを作成する準備が整いました。しかし、REST"
"スレッドで計画問題を解くと、HTTPタイムアウトの問題が発生します。そこで、"
"Quarkus extensionでは、 `SolverManager` インスタンスを注入しています。このイ"
"ンスタンスは、別のスレッドプールでソルバーを実行し、複数のデータセットを並行"
"して解くことができます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:610
#, fuzzy
msgid "Create the `src/main/java/org/acme/optaplanner/rest/TimeTableResource.java` class:"
msgstr ""
"`src/main/java/org/acme/optaplanner/rest/TimeTableResource.java` "
"クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:614 upstream/_guides/optaplanner.adoc:812
#: upstream/_guides/optaplanner.adoc:954 upstream/_guides/optaplanner.adoc:1055
#, no-wrap
msgid "package org.acme.optaplanner.rest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:620
#, no-wrap
msgid ""
"import java.util.UUID;\n"
"import java.util.concurrent.ExecutionException;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:624
#, no-wrap
msgid ""
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.optaplanner.core.api.solver.SolverJob;\n"
"import org.optaplanner.core.api.solver.SolverManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:627 upstream/_guides/optaplanner.adoc:973
#, no-wrap
msgid ""
"@Path(\"/timeTable\")\n"
"public class TimeTableResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:630
#, no-wrap
msgid ""
"    @Inject\n"
"    SolverManager<TimeTable, UUID> solverManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:646
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/solve\")\n"
"    public TimeTable solve(TimeTable problem) {\n"
"        UUID problemId = UUID.randomUUID();\n"
"        // Submit the problem to start solving\n"
"        SolverJob<TimeTable, UUID> solverJob = solverManager.solve(problemId, problem);\n"
"        TimeTable solution;\n"
"        try {\n"
"            // Wait until the solving ends\n"
"            solution = solverJob.getFinalBestSolution();\n"
"        } catch (InterruptedException | ExecutionException e) {\n"
"            throw new IllegalStateException(\"Solving failed.\", e);\n"
"        }\n"
"        return solution;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:653
#, fuzzy
msgid "For simplicity's sake, this initial implementation waits for the solver to finish, which can still cause an HTTP timeout.  The _complete_ implementation avoids HTTP timeouts much more elegantly."
msgstr ""
"簡略化のため，この初期の実装ではソルバーの終了を待っていますが，これではHTTP"
"タイムアウトが発生する可能性があります． "
"_完全な_実装では，よりエレガントにHTTPタイムアウトを回避します．"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:654
#, fuzzy, no-wrap
msgid "Set the termination time"
msgstr "終了時間の設定"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:659
#, fuzzy
msgid "Without a termination setting or a termination event, the solver runs forever.  To avoid that, limit the solving time to five seconds.  That is short enough to avoid the HTTP timeout."
msgstr ""
"終了設定や終了イベントがないと、ソルバーは永遠に実行されます。これを避けるに"
"は、ソルバーの実行時間を5秒に制限します。これは、HTTPタイムアウトを回避するの"
"に十分な長さです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:661
#, fuzzy
msgid "Create the `src/main/resources/application.properties` file:"
msgstr "`src/main/resources/application.properties` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:667
#, no-wrap
msgid ""
"# The solver runs only for 5 seconds to avoid a HTTP timeout in this simple implementation.\n"
"# It's recommended to run for at least 5 minutes (\"5m\") otherwise.\n"
"quarkus.optaplanner.solver.termination.spent-limit=5s\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:670
#, no-wrap
msgid "Run the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:673
#, fuzzy
msgid "First start the application:"
msgstr "まず、アプリケーションを起動します。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:676
#, fuzzy, no-wrap
msgid "Try the application"
msgstr "アプリケーションを試す"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:681
#, fuzzy
msgid "Now that the application is running, you can test the REST service.  You can use any REST client you wish.  The following example uses the Linux command `curl` to send a POST request:"
msgstr ""
"アプリケーションが起動したので、RESTサービスをテストしてみましょう。好きなRES"
"Tクライアントを使うことができます。次の例では、Linux コマンド `curl` "
"を使用して POST リクエストを送信しています。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:685
#, no-wrap
msgid "$ curl -i -X POST http://localhost:8080/timeTable/solve -H \"Content-Type:application/json\" -d '{\"timeslotList\":[{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"}],\"roomList\":[{\"name\":\"Room A\"},{\"name\":\"Room B\"}],\"lessonList\":[{\"id\":1,\"subject\":\"Math\",\"teacher\":\"A. Turing\",\"studentGroup\":\"9th grade\"},{\"id\":2,\"subject\":\"Chemistry\",\"teacher\":\"M. Curie\",\"studentGroup\":\"9th grade\"},{\"id\":3,\"subject\":\"French\",\"teacher\":\"M. Curie\",\"studentGroup\":\"10th grade\"},{\"id\":4,\"subject\":\"History\",\"teacher\":\"I. Jones\",\"studentGroup\":\"10th grade\"}]}'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:689
#, fuzzy
msgid "After about five seconds, according to the termination spent time defined in your `application.properties`, the service returns an output similar to the following example:"
msgstr "`application.properties` で定義された終了時間に従って、約5秒後に、サービスは"
"次の例のような出力を返します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:695
#, no-wrap
msgid ""
"HTTP/1.1 200\n"
"Content-Type: application/json\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:697
#, no-wrap
msgid "{\"timeslotList\":...,\"roomList\":...,\"lessonList\":[{\"id\":1,\"subject\":\"Math\",\"teacher\":\"A. Turing\",\"studentGroup\":\"9th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},\"room\":{\"name\":\"Room A\"}},{\"id\":2,\"subject\":\"Chemistry\",\"teacher\":\"M. Curie\",\"studentGroup\":\"9th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"},\"room\":{\"name\":\"Room A\"}},{\"id\":3,\"subject\":\"French\",\"teacher\":\"M. Curie\",\"studentGroup\":\"10th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},\"room\":{\"name\":\"Room B\"}},{\"id\":4,\"subject\":\"History\",\"teacher\":\"I. Jones\",\"studentGroup\":\"10th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"},\"room\":{\"name\":\"Room B\"}}],\"score\":\"0hard/0soft\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:702
#, fuzzy
msgid "Notice that your application assigned all four lessons to one of the two time slots and one of the two rooms.  Also notice that it conforms to all hard constraints.  For example, M. Curie's two lessons are in different time slots."
msgstr ""
"このアプリケーションでは、4つのレッスンがすべて2つの時間帯と2つの部屋のうちの"
"1つに割り当てられていることに注目してください。また、すべてのハード制約に適合"
"していることにも注目してください。例えば、M."
"Curieの2つのレッスンは異なる時間帯にあります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:704
#, fuzzy
msgid "On the server side, the `info` log show what OptaPlanner did in those five seconds:"
msgstr "サーバー側では、OptaPlannerがその5秒間に何をしたかを `info` "
"のログで見ることができます。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:711
#, no-wrap
msgid ""
"... Solving started: time spent (33), best score (-8init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).\n"
"... Construction Heuristic phase (0) ended: time spent (73), best score (0hard/0soft), score calculation speed (459/sec), step total (4).\n"
"... Local Search phase (1) ended: time spent (5000), best score (0hard/0soft), score calculation speed (28949/sec), step total (28398).\n"
"... Solving ended: time spent (5000), best score (0hard/0soft), score calculation speed (28524/sec), phase total (2), environment mode (REPRODUCIBLE).\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:713
#, fuzzy, no-wrap
msgid "Test the application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:716
#, fuzzy
msgid "A good application includes test coverage."
msgstr "良いアプリケーションには、テストカバレッジが含まれています。"

#. type: Title ====
#: upstream/_guides/optaplanner.adoc:717
#, fuzzy, no-wrap
msgid "Test the constraints"
msgstr "制約条件のテスト"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:722
#, fuzzy
msgid "To test each constraint in isolation, use a `ConstraintVerifier` in unit tests.  It tests each constraint's corner cases in isolation from the other tests, which lowers maintenance when adding a new constraint with proper test coverage."
msgstr ""
"各制約を分離してテストするには、ユニットテストで `ConstraintVerifier` を使用"
"します。これは、各制約のコーナーケースを他のテストから分離してテストするもの"
"で、適切なテストカバレッジで新しい制約を追加する際のメンテナンスを軽減します"
"。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:724
#, fuzzy
msgid "Add a `optaplanner-test` dependency in your build file:"
msgstr "`optaplanner-test` の依存関係を `pom.xml` に追加してください。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:733
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.optaplanner</groupId>\n"
"    <artifactId>optaplanner-test</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:739
#, no-wrap
msgid "testImplementation(\"org.optaplanner:optaplanner-test\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:742
#, fuzzy
msgid "Create the `src/test/java/org/acme/optaplanner/solver/TimeTableConstraintProviderTest.java` class:"
msgstr ""
"`src/test/java/org/acme/optaplanner/solver/TimeTableConstraintProviderTest."
"java` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:751 upstream/_guides/optaplanner.adoc:819
#: upstream/_guides/optaplanner.adoc:1057
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr "import javax.inject.Inject;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:759
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:762
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class TimeTableConstraintProviderTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:766
#, no-wrap
msgid ""
"    private static final Room ROOM = new Room(\"Room1\");\n"
"    private static final Timeslot TIMESLOT1 = new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9,0), LocalTime.NOON);\n"
"    private static final Timeslot TIMESLOT2 = new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9,0), LocalTime.NOON);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:769
#, no-wrap
msgid ""
"    @Inject\n"
"    ConstraintVerifier<TimeTableConstraintProvider, TimeTable> constraintVerifier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:775
#, no-wrap
msgid ""
"    @Test\n"
"    void roomConflict() {\n"
"        Lesson firstLesson = new Lesson(1, \"Subject1\", \"Teacher1\", \"Group1\");\n"
"        Lesson conflictingLesson = new Lesson(2, \"Subject2\", \"Teacher2\", \"Group2\");\n"
"        Lesson nonConflictingLesson = new Lesson(3, \"Subject3\", \"Teacher3\", \"Group3\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:778
#, no-wrap
msgid ""
"        firstLesson.setRoom(ROOM);\n"
"        firstLesson.setTimeslot(TIMESLOT1);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:781
#, no-wrap
msgid ""
"        conflictingLesson.setRoom(ROOM);\n"
"        conflictingLesson.setTimeslot(TIMESLOT1);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:784
#, no-wrap
msgid ""
"        nonConflictingLesson.setRoom(ROOM);\n"
"        nonConflictingLesson.setTimeslot(TIMESLOT2);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:789
#, no-wrap
msgid ""
"        constraintVerifier.verifyThat(TimeTableConstraintProvider::roomConflict)\n"
"                .given(firstLesson, conflictingLesson, nonConflictingLesson)\n"
"                .penalizesBy(1);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:797
#, fuzzy
msgid "This test verifies that the constraint `TimeTableConstraintProvider::roomConflict`, when given three lessons in the same room, where two lessons have the same timeslot, it penalizes with a match weight of `1`.  So with a constraint weight of `10hard` it would reduce the score by `-10hard`."
msgstr ""
"このテストでは、同じ部屋で3つのレッスンが与えられ、2つのレッスンが同じタイム"
"スロットである場合、制約 `TimeTableConstraintProvider::roomConflict` が `1` "
"のマッチウェイトでペナルティを与えることを検証します。したがって、 `10hard` "
"の制約ウェイトでは、 `-10hard` のスコアが減少します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:802
#, fuzzy
msgid "Notice how `ConstraintVerifier` ignores the constraint weight during testing - even if those constraint weights are hard coded in the `ConstraintProvider` - because constraints weights change regularly before going into production.  This way, constraint weight tweaking does not break the unit tests."
msgstr ""
"`ConstraintVerifier` "
"がテスト中に制約の重みを無視していることに注目してください。"
"たとえそれらの制約の重みが `ConstraintProvider` にハードコードされていても、"
"制約の重みは生産に入る前に定期的に変更されるからです。このようにして、制約の"
"重みを微調整しても、ユニットテストは壊れません。"

#. type: Title ====
#: upstream/_guides/optaplanner.adoc:803
#, fuzzy, no-wrap
msgid "Test the solver"
msgstr "ソルバーのテスト"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:806
#, fuzzy
msgid "In a JUnit test, generate a test dataset and send it to the `TimeTableResource` to solve."
msgstr "JUnitのテストでは、テスト用のデータセットを生成し、それを `TimeTableResource`"
" に送って解かせます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:808
#, fuzzy
msgid "Create the `src/test/java/org/acme/optaplanner/rest/TimeTableResourceTest.java` class:"
msgstr ""
"`src/test/java/org/acme/optaplanner/rest/TimeTableResourceTest.java` "
"クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:817
#, no-wrap
msgid ""
"import java.time.DayOfWeek;\n"
"import java.time.LocalTime;\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:828
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.rest.TimeTableResource;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Timeout;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:832 upstream/_guides/optaplanner.adoc:1068
#, no-wrap
msgid ""
"import static org.junit.jupiter.api.Assertions.assertFalse;\n"
"import static org.junit.jupiter.api.Assertions.assertNotNull;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:835 upstream/_guides/optaplanner.adoc:1071
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class TimeTableResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:838 upstream/_guides/optaplanner.adoc:1074
#, no-wrap
msgid ""
"    @Inject\n"
"    TimeTableResource timeTableResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:851
#, no-wrap
msgid ""
"    @Test\n"
"    @Timeout(600_000)\n"
"    public void solve() {\n"
"        TimeTable problem = generateProblem();\n"
"        TimeTable solution = timeTableResource.solve(problem);\n"
"        assertFalse(solution.getLessonList().isEmpty());\n"
"        for (Lesson lesson : solution.getLessonList()) {\n"
"            assertNotNull(lesson.getTimeslot());\n"
"            assertNotNull(lesson.getRoom());\n"
"        }\n"
"        assertTrue(solution.getScore().isFeasible());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:859
#, no-wrap
msgid ""
"    private TimeTable generateProblem() {\n"
"        List<Timeslot> timeslotList = new ArrayList<>();\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:864
#, no-wrap
msgid ""
"        List<Room> roomList = new ArrayList<>();\n"
"        roomList.add(new Room(\"Room A\"));\n"
"        roomList.add(new Room(\"Room B\"));\n"
"        roomList.add(new Room(\"Room C\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:871
#, no-wrap
msgid ""
"        List<Lesson> lessonList = new ArrayList<>();\n"
"        lessonList.add(new Lesson(101L, \"Math\", \"B. May\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(102L, \"Physics\", \"M. Curie\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(103L, \"Geography\", \"M. Polo\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(104L, \"English\", \"I. Jones\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(105L, \"Spanish\", \"P. Cruz\", \"9th grade\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:879
#, no-wrap
msgid ""
"        lessonList.add(new Lesson(201L, \"Math\", \"B. May\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(202L, \"Chemistry\", \"M. Curie\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(203L, \"History\", \"I. Jones\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(204L, \"English\", \"P. Cruz\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(205L, \"French\", \"M. Curie\", \"10th grade\"));\n"
"        return new TimeTable(timeslotList, roomList, lessonList);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:885
#, fuzzy
msgid "This test verifies that after solving, all lessons are assigned to a time slot and a room.  It also verifies that it found a feasible solution (no hard constraints broken)."
msgstr ""
"このテストでは、解いた後、すべてのレッスンが時間枠と部屋に割り当てられている"
"ことを検証します。また、実現可能な解を見つけたことも確認します（ハードな制約"
"が破られていないこと）。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:887
#, fuzzy
msgid "Add test properties to the `src/main/resources/application.properties` file:"
msgstr "`src/main/resources/application.properties` "
"ファイルにテストプロパティを追加します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:891
#, no-wrap
msgid "quarkus.optaplanner.solver.termination.spent-limit=5s\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:895
#, no-wrap
msgid ""
"# Effectively disable spent-time termination in favor of the best-score-limit\n"
"%test.quarkus.optaplanner.solver.termination.spent-limit=1h\n"
"%test.quarkus.optaplanner.solver.termination.best-score-limit=0hard/*soft\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:903
#, fuzzy
msgid "Normally, the solver finds a feasible solution in less than 200 milliseconds.  Notice how the `application.properties` overwrites the solver termination during tests to terminate as soon as a feasible solution (`0hard/*soft`) is found.  This avoids hard coding a solver time, because the unit test might run on arbitrary hardware.  This approach ensures that the test runs long enough to find a feasible solution, even on slow machines.  But it does not run a millisecond longer than it strictly must, even on fast machines."
msgstr ""
"通常、ソルバーは200ミリ秒以下で実現可能な解を見つけます。 `application."
"properties` "
"は、テスト中にソルバーの終了を上書きして、実行可能なソリューション( `0hard/*s"
"oft`)が見つかるとすぐに終了するようになっていることに注目してください。これは"
"、ユニットテストが任意のハードウェア上で実行される可能性があるため、ソルバー"
"の時間をハードコーディングすることを避けるためです。この方法では，遅いマシン"
"でも実行可能な解が見つかるまで十分な時間テストが実行されます．しかし、高速な"
"マシンであっても、厳密に必要な時間よりも1ミリ秒長く実行されることはありません"
"。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:904
#, no-wrap
msgid "Logging"
msgstr "ロギング"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:909
#, fuzzy
msgid "When adding constraints in your `ConstraintProvider`, keep an eye on the _score calculation speed_ in the `info` log, after solving for the same amount of time, to assess the performance impact:"
msgstr ""
"`ConstraintProvider` で制約条件を追加する際には、同じ時間解いた後に `info` "
"のログで _スコア計算速度_を確認し、パフォーマンスへの影響を評価してください。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:913
#, no-wrap
msgid "... Solving ended: ..., score calculation speed (29455/sec), ...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:917
#, fuzzy
msgid "To understand how OptaPlanner is solving your problem internally, change the logging in the `application.properties` file or with a `-D` system property:"
msgstr ""
"OptaPlanner が内部的にどのように問題を解決しているかを理解するために、 "
"`application.properties` ファイルまたは `-D` "
"システムプロパティでロギングを変更してください。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:921
#, no-wrap
msgid "quarkus.log.category.\"org.optaplanner\".level=debug\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:924
#, fuzzy
msgid "Use `debug` logging to show every _step_:"
msgstr "`debug` ロギングを使用して、すべての _ステップ_を表示します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:931
#, no-wrap
msgid ""
"... Solving started: time spent (67), best score (-20init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).\n"
"...     CH step (0), time spent (128), score (-18init/0hard/0soft), selected move count (15), picked move ([Math(101) {null -> Room A}, Math(101) {null -> MONDAY 08:30}]).\n"
"...     CH step (1), time spent (145), score (-16init/0hard/0soft), selected move count (15), picked move ([Physics(102) {null -> Room A}, Physics(102) {null -> MONDAY 09:30}]).\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:934
#, fuzzy
msgid "Use `trace` logging to show every _step_ and every _move_ per step."
msgstr "`trace` ロギングを使用して、すべての _ステップ_とステップごとのすべての "
"_動き_を表示します。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:935
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:939
#, fuzzy
msgid "Congratulations! You have just developed a Quarkus application with https://www.optaplanner.org/[OptaPlanner]!"
msgstr ""
"おめでとうございます。 link:https://www.optaplanner.org/"
"[OptaPlanner]を使ってQuarkusのアプリケーションを開発しましたね。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:940
#, fuzzy, no-wrap
msgid "Further improvements: Database and UI integration"
msgstr "さらなる改善データベースとUIの統合"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:943
#, fuzzy
msgid "Now try adding database and UI integration:"
msgstr "次に、データベースとUIの統合を追加してみてください。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:945
#, fuzzy
msgid "Store `Timeslot`, `Room`, and `Lesson` in the database with xref:hibernate-orm-panache.adoc[Hibernate and Panache]."
msgstr ""
"link:hibernate-orm-panache.html[HibernateとPanache]を使って、 `Timeslot`, "
"`Room`, `Lesson` をデータベースに格納します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:947
#, fuzzy
msgid "xref:rest-json.adoc[Expose them through REST]."
msgstr "link:rest-json.html[RESTで公開し]ています。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:950
#, fuzzy
msgid "Adjust the `TimeTableResource` to read and write a `TimeTable` instance in a single transaction and use those accordingly:"
msgstr ""
"`TimeTableResource` `TimeTable` インスタンスを1つのトランザクションで読み書き"
"できるように調整し、それらを適宜使用する。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:960
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.transaction.Transactional;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:970
#, no-wrap
msgid ""
"import io.quarkus.panache.common.Sort;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.optaplanner.core.api.score.ScoreManager;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
"import org.optaplanner.core.api.solver.SolverManager;\n"
"import org.optaplanner.core.api.solver.SolverStatus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:975
#, no-wrap
msgid "    public static final Long SINGLETON_TIME_TABLE_ID = 1L;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:980
#, no-wrap
msgid ""
"    @Inject\n"
"    SolverManager<TimeTable, Long> solverManager;\n"
"    @Inject\n"
"    ScoreManager<TimeTable, HardSoftScore> scoreManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:992
#, no-wrap
msgid ""
"    // To try, open http://localhost:8080/timeTable\n"
"    @GET\n"
"    public TimeTable getTimeTable() {\n"
"        // Get the solver status before loading the solution\n"
"        // to avoid the race condition that the solver terminates between them\n"
"        SolverStatus solverStatus = getSolverStatus();\n"
"        TimeTable solution = findById(SINGLETON_TIME_TABLE_ID);\n"
"        scoreManager.updateScore(solution); // Sets the score\n"
"        solution.setSolverStatus(solverStatus);\n"
"        return solution;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1000
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/solve\")\n"
"    public void solve() {\n"
"        solverManager.solveAndListen(SINGLETON_TIME_TABLE_ID,\n"
"                this::findById,\n"
"                this::save);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1004
#, no-wrap
msgid ""
"    public SolverStatus getSolverStatus() {\n"
"        return solverManager.getSolverStatus(SINGLETON_TIME_TABLE_ID);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1010
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/stopSolving\")\n"
"    public void stopSolving() {\n"
"        solverManager.terminateEarly(SINGLETON_TIME_TABLE_ID);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1023
#, no-wrap
msgid ""
"    @Transactional\n"
"    protected TimeTable findById(Long id) {\n"
"        if (!SINGLETON_TIME_TABLE_ID.equals(id)) {\n"
"            throw new IllegalStateException(\"There is no timeTable with id (\" + id + \").\");\n"
"        }\n"
"        // Occurs in a single transaction, so each initialized lesson references the same timeslot/room instance\n"
"        // that is contained by the timeTable's timeslotList/roomList.\n"
"        return new TimeTable(\n"
"                Timeslot.listAll(Sort.by(\"dayOfWeek\").and(\"startTime\").and(\"endTime\").and(\"id\")),\n"
"                Room.listAll(Sort.by(\"name\").and(\"id\")),\n"
"                Lesson.listAll(Sort.by(\"subject\").and(\"teacher\").and(\"studentGroup\").and(\"id\")));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1033
#, no-wrap
msgid ""
"    @Transactional\n"
"    protected void save(TimeTable timeTable) {\n"
"        for (Lesson lesson : timeTable.getLessonList()) {\n"
"            // TODO this is awfully naive: optimistic locking causes issues if called by the SolverManager\n"
"            Lesson attachedLesson = Lesson.findById(lesson.getId());\n"
"            attachedLesson.setTimeslot(lesson.getTimeslot());\n"
"            attachedLesson.setRoom(lesson.getRoom());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1039
#, fuzzy
msgid "For simplicity's sake, this code handles only one `TimeTable` instance, but it is straightforward to enable multi-tenancy and handle multiple `TimeTable` instances of different high schools in parallel."
msgstr ""
"簡単にするために、このコードでは1つの `TimeTable` "
"インスタンスのみを処理していますが、マルチテナンシーを有効にして、"
"異なる高校の複数の `TimeTable` インスタンスを並行して処理することは簡単です。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1043
#, fuzzy
msgid "The `getTimeTable()` method returns the latest timetable from the database.  It uses the `ScoreManager` (which is automatically injected)  to calculate the score of that timetable, so the UI can show the score."
msgstr ""
"`getTimeTable()` メソッドは、データベースから最新のタイムテーブルを返します。"
" `ScoreManager` （自動的に注入される）を使って、その時刻表のスコアを計算し、U"
"Iでスコアを表示できるようにしています。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1048
#, fuzzy
msgid "The `solve()` method starts a job to solve the current timetable and store the time slot and room assignments in the database.  It uses the `SolverManager.solveAndListen()` method to listen to intermediate best solutions and update the database accordingly.  This enables the UI to show progress while the backend is still solving."
msgstr ""
"`solve()` メソッドは、現在のタイムテーブルを解き、タイムスロットと部屋の割り"
"当てをデータベースに保存するジョブを開始します。 `SolverManager."
"solveAndListen()` メソッドを使って、中間的なベストソリューションを聞き、それ"
"に応じてデータベースを更新します。これにより、バックエンドがまだ解いている最"
"中に、UIに進捗状況を表示することができます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1051
#, fuzzy
msgid "Adjust the `TimeTableResourceTest` instance accordingly, now that the `solve()` method returns immediately.  Poll for the latest solution until the solver finishes solving:"
msgstr ""
"`solve()` メソッドがすぐに返ってくるので、それに合わせて "
"`TimeTableResourceTest` インスタンスを調整します。ソルバーが解き終わるまで、"
"最新のソリューションをポーリングします。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1064
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Timeout;\n"
"import org.optaplanner.core.api.solver.SolverStatus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1093
#, no-wrap
msgid ""
"    @Test\n"
"    @Timeout(600_000)\n"
"    public void solveDemoDataUntilFeasible() throws InterruptedException {\n"
"        timeTableResource.solve();\n"
"        TimeTable timeTable = timeTableResource.getTimeTable();\n"
"        while (timeTable.getSolverStatus() != SolverStatus.NOT_SOLVING) {\n"
"            // Quick polling (not a Test Thread Sleep anti-pattern)\n"
"            // Test is still fast on fast machines and doesn't randomly fail on slow machines.\n"
"            Thread.sleep(20L);\n"
"            timeTable = timeTableResource.getTimeTable();\n"
"        }\n"
"        assertFalse(timeTable.getLessonList().isEmpty());\n"
"        for (Lesson lesson : timeTable.getLessonList()) {\n"
"            assertNotNull(lesson.getTimeslot());\n"
"            assertNotNull(lesson.getRoom());\n"
"        }\n"
"        assertTrue(timeTable.getScore().isFeasible());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1098
#, fuzzy
msgid "Build an attractive web UI on top of these REST methods to visualize the timetable."
msgstr "これらのRESTメソッドの上に、タイムテーブルを視覚化するための魅力的なWeb "
"UIを構築します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1099
#, fuzzy
msgid "Take a look at {quickstarts-tree-url}/optaplanner-quickstart[the quickstart source code] to see how this all turns out."
msgstr ""
"このすべてがどのようになるかは、{quickstarts-tree-url}/optaplanner-"
"quickstart[the quickstart source code]をご覧ください。"

#, fuzzy
#~ msgid "RESTEasy JAX-RS (`quarkus-resteasy`)"
#~ msgstr "RESTEasy JAX-RS ( `quarkus-resteasy`)"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#, fuzzy
#~ msgid "about 30 minutes"
#~ msgstr "約30分"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#, fuzzy
#~ msgid "Apache Maven {maven-version} or Gradle 4+"
#~ msgstr "Apache Maven {maven-version} または Gradle 4+。"

#, fuzzy
#~ msgid "In Maven, your `pom.xml` file contains these dependencies:"
#~ msgstr "Mavenでは、 `pom.xml` ファイルにこれらの依存関係が含まれています。"
