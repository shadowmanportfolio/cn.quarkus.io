#
msgid ""
msgstr ""
"Project-Id-Version: Quarkusio\n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: \n"
"Last-Translator: Nobuhiro Sue <nobuhiro.sue@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/getting-started.adoc:6
#, no-wrap
msgid "Creating Your First Application"
msgstr "初めてのアプリケーションの作成"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:23
msgid "Learn how to create a Hello World Quarkus app.  This guide covers:"
msgstr "Hello World Quarkus アプリの作成方法を説明します。 このガイドでは、以下の内容を説明します。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:25
msgid "Bootstrapping an application"
msgstr "アプリケーションのブートストラップ"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:26
msgid "Creating a JAX-RS endpoint"
msgstr "JAX-RS エンドポイントの作成"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:27
msgid "Injecting beans"
msgstr "Bean の注入"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:28
msgid "Functional tests"
msgstr "機能テスト"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:29
msgid "Packaging of the application"
msgstr "アプリケーションのパッケージング"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:30
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Block title
#: upstream/_guides/getting-started.adoc:36
#, no-wrap
msgid "Verify Maven is using the Java you expect"
msgstr "Maven が意図した Java を使用していることの確認"

#. type: delimited block =
#: upstream/_guides/getting-started.adoc:41
msgid "If you have multiple JDK's installed it is not certain Maven will pick up the expected java and you could end up with unexpected results.  You can verify which JDK Maven uses by running `mvn --version`."
msgstr "複数の JDK をインストール済みで、Maven が意図した Java を使用するかわからない場合は、予期しない結果になることがあります。Maven が使用する JDK は、`mvn --version` コマンドで確認できます。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:44
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャー"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:48
msgid "In this guide, we create a straightforward application serving a `hello` endpoint. To demonstrate dependency injection, this endpoint uses a `greeting` bean."
msgstr "このガイドでは、`hello` エンドポイントを提供する簡単なアプリケーションを作成します。依存性の注入を示すために、このエンドポイントでは `greeting` Bean を使用します。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/getting-started.adoc:49
#, no-wrap
msgid "Architecture,"
msgstr "アーキテクチャー"

#. type: Target for macro image
#: upstream/_guides/getting-started.adoc:49
#, no-wrap
msgid "getting-started-architecture.png"
msgstr "getting-started-architecture.png"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:52
msgid "This guide also covers the testing of the endpoint."
msgstr "このガイドでは、エンドポイントのテストについても解説しています。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:53
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:56
msgid "We recommend that you follow the instructions from <<bootstrapping-the-project,Bootstrapping project>> and onwards to create the application step by step."
msgstr "<<bootstrapping-the-project,プロジェクトのブートストラップ>> とそれ以降の解説に従って、ステップバイステップでアプリを作成していくことをお勧めします。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:58
msgid "However, you can go right to the completed example."
msgstr "しかし、完成した例をすぐ確認することもできます。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:60
msgid "Download an {quickstarts-archive-url}[archive] or clone the git repository:"
msgstr "{quickstarts-archive-url}[アーカイブ] をダウンロードするか、git レポジトリをクローンします。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:64
#, no-wrap
msgid "git clone {quickstarts-clone-url}\n"
msgstr "git clone {quickstarts-clone-url}\n"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:67
msgid "The solution is located in the `getting-started` {quickstarts-tree-url}/getting-started[directory]."
msgstr "ソリューションは `getting-started` {quickstarts-tree-url}/getting-started[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:68
#, no-wrap
msgid "Bootstrapping the project"
msgstr "プロジェクトのブートストラップ"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:71
msgid "The easiest way to create a new Quarkus project is to open a terminal and run the following command:"
msgstr "新しい Quarkus プロジェクトを作成する最も簡単な方法は、ターミナルを開いて以下のコマンドを実行することです。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:73
msgid "For Linux & MacOS users"
msgstr "Linux & MacOS ユーザー"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:80
msgid "For Windows users"
msgstr "Windows ユーザー"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:82
msgid "If using cmd , (don't use backward slash `\\` and put everything on the same line)"
msgstr "cmd を使っている場合 (バックスラッシュは使わず、全て同じ行にしてください)"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:83
msgid "If using Powershell , wrap `-D` parameters in double quotes e.g. `\"-DprojectArtifactId=getting-started\"`"
msgstr "Powershell を使用する場合は、`-D` パラメーターを `\"-DprojectArtifactId=getting-started\"` のように二重引用符で囲んでください。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:85
msgid "It generates the following in `./getting-started`:"
msgstr "以下のように `./getting-started` に生成されます。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:87
msgid "the Maven structure"
msgstr "Maven の構造"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:88
msgid "an `org.acme.GreetingResource` resource exposed on `/hello`"
msgstr "`org.acme.getting.start.GreetingResource` リソースは、`/hello` で公開されます。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:89
msgid "an associated unit test"
msgstr "関連するユニットテスト"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:90
msgid "a landing page that is accessible on `http://localhost:8080` after starting the application"
msgstr "アプリケーション起動後に `http://localhost:8080` でアクセス可能なランディングページ"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:91
msgid "example `Dockerfile` files for both `native` and `jvm` modes in `src/main/docker`"
msgstr "`src/main/docker` にある `native` と `jvm` の両方のモード用の `Dockerfile` ファイルの例"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:92
msgid "the application configuration file"
msgstr "アプリケーション設定ファイル"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:96
msgid "Once generated, look at the `pom.xml`.  You will find the import of the Quarkus BOM, allowing you to omit the version of the different Quarkus dependencies.  In addition, you can see the `quarkus-maven-plugin` responsible of the packaging of the application and also providing the development mode."
msgstr "生成されたら、`pom.xml` を確認してください。 Quarkus の BOM のインポートが存在することが分かります。これにより、異なる Quarkus の依存関係のバージョンを省略できます。さらに、アプリケーションのパッケージングと開発モードを処理する `quarkus-maven-plugin` が存在することが分かります。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:110
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>${quarkus.platform.group-id}</groupId>\n"
"            <artifactId>quarkus-bom</artifactId>\n"
"            <version>${quarkus.platform.version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:130
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>${quarkus.platform.group-id}</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus-plugin.version}</version>\n"
"            <extensions>true</extensions>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:133
#, fuzzy
msgid "In a Gradle project, you would find a similar setup:"
msgstr "Gradleプロジェクトでも、同様の設定があります。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:135
#, fuzzy
msgid "the Quarkus Gradle plugin"
msgstr "Quarkus Gradleプラグイン"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:136
#, fuzzy
msgid "an `enforcedPlatform` directive for the Quarkus BOM"
msgstr "`enforcedPlatform` QuarkusのBOMに対する指示"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:138
msgid "If we focus on the dependencies section, you can see the extension allowing the development of REST applications:"
msgstr "依存関係の部分に注目すると、REST アプリケーションの開発を可能にするエクステンションを見ることができます。"

#. type: Block title
#: upstream/_guides/getting-started.adoc:140
#: upstream/_guides/getting-started.adoc:325
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:146
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/getting-started.adoc:149
#: upstream/_guides/getting-started.adoc:340
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:152
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"
msgstr "implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"

#. type: Title ===
#: upstream/_guides/getting-started.adoc:154
#, no-wrap
msgid "The JAX-RS resources"
msgstr "JAX-RS リソース"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:157
msgid "During the project creation, the `src/main/java/org/acme/GreetingResource.java` file has been created with the following content:"
msgstr "プロジェクト作成時には、 `src/main/java/org/acme/getting/started/GreetingResource.java` ファイルが以下の内容で作成されています。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:161
#: upstream/_guides/getting-started.adoc:246
#: upstream/_guides/getting-started.adoc:264
#: upstream/_guides/getting-started.adoc:373
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:166
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:169
#: upstream/_guides/getting-started.adoc:273
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:176
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"Hello from RESTEasy Reactive\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:179
#, fuzzy
msgid "It's a very simple REST endpoint, returning \"Hello from RESTEasy Reactive\" to requests on \"/hello\"."
msgstr "これは非常にシンプルな REST エンドポイントで、\"/hello\" 上のリクエストに "
"\"Hello RESTEasy\" と返します。"

#. type: Block title
#: upstream/_guides/getting-started.adoc:181
#, no-wrap
msgid "Differences with vanilla JAX-RS"
msgstr "バニラ JAX-RS との違い"

#. type: delimited block =
#: upstream/_guides/getting-started.adoc:185
msgid "With Quarkus, there is no need to create an `Application` class. It's supported, but not required. In addition, only one instance of the resource is created and not one per request. You can configure this using the different `*Scoped` annotations (`ApplicationScoped`, `RequestScoped`, etc)."
msgstr "Quarkus では、`Application` クラスを作成する必要がありません。作成は可能ですが、必須ではありません。加えて、リソースは 1 つのみが作成され、リクエスト毎に 1 つではありません。これは、異なる `*Scoped` アノテーション (`ApplicationScoped`、`RequestScoped` など) を使用することで設定可能です。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:187
#, no-wrap
msgid "Running the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:190
msgid "Now we are ready to run our application:"
msgstr "これでアプリケーションを実行する準備が整いました。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:213
#, no-wrap
msgid ""
"[INFO] --------------------< org.acme:getting-started >---------------------\n"
"[INFO] Building getting-started 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"[INFO]\n"
"[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ getting-started ---\n"
"[INFO] Using 'UTF-8' encoding to copy filtered resources.\n"
"[INFO] skip non existing resourceDirectory <path>/getting-started/src/main/resources\n"
"[INFO]\n"
"[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ getting-started ---\n"
"[INFO] Changes detected - recompiling the module!\n"
"[INFO] Compiling 2 source files to <path>/getting-started/target/classes\n"
"[INFO]\n"
"[INFO] --- quarkus-maven-plugin:<version>:dev (default-cli) @ getting-started ---\n"
"Listening for transport dt_socket at address: 5005\n"
"2019-02-28 17:05:22,347 INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation\n"
"2019-02-28 17:05:22,635 INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed in 288ms\n"
"2019-02-28 17:05:22,770 INFO  [io.quarkus] (main) Quarkus started in 0.668s. Listening on: http://localhost:8080\n"
"2019-02-28 17:05:22,771 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:216
msgid "Once started, you can request the provided endpoint:"
msgstr "起動したら、提供されたエンドポイントにリクエストすることができます。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:221
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:224
msgid "Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload."
msgstr "`CTRL+C` を押してアプリケーションを停止したり、アプリケーションを起動したままにでき、快適な操作を行うことができます。"

#. type: Block title
#: upstream/_guides/getting-started.adoc:226
#, no-wrap
msgid "Automatically add newline with `curl -w \"\\n\"`"
msgstr "`curl -w \"\\n\"` で自動的に改行を追加します。"

#. type: delimited block =
#: upstream/_guides/getting-started.adoc:229
msgid "We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line."
msgstr "例では、 `curl -w \"\\n\"` を使用して、結果と次のコマンドプロンプトが同じ行に表示されるのを防止しています。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:231
#, no-wrap
msgid "Using injection"
msgstr "インジェクションの使用"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:235
msgid "Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.  If you're new to CDI then we recommend you to read the xref:cdi.adoc[Introduction to CDI] guide."
msgstr "Quarkus の依存性注入は、Quarkus のアーキテクチャに合わせて調整された CDI ベースの依存性注入ソリューションである ArC をベースにしています。 CDI が初めての方は、 xref:cdi.adoc[CDI入門] ガイドをお読みになることをお勧めします。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:237
msgid "Quarkus only implements a subset of the CDI features and comes with non-standard features and specific APIS, you can learn more about it in the xref:cdi-reference.adoc[Contexts and Dependency Injection guide]."
msgstr "Quarkus は CDI 機能のサブセットのみを実装しており、非標準の機能や特定の API が追加されています。詳細は、 link:cdi-reference[Contexts and Dependency Injection ガイド] を参照してください。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:239
#, fuzzy
msgid "ArC comes as a dependency of `quarkus-resteasy-reactive` so you already have it handy."
msgstr "ArC は `quarkus-resteasy` "
"の依存関係として提供されているので、すでに追加済です。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:242
msgid "Let's modify the application and add a companion bean.  Create the `src/main/java/org/acme/GreetingService.java` file with the following content:"
msgstr "アプリケーションを変更してコンパニオン Bean を追加してみましょう。 以下の内容で `src/main/java/org/acme/getting/started/GreetingService.java` ファイルを作成してください。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:248
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:251
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:255
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:257
#: upstream/_guides/getting-started.adoc:406
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:260
msgid "Edit the `GreetingResource` class to inject the `GreetingService` and create a new endpoint using it:"
msgstr "`GreetingResource` クラスを編集して `GreetingService` を注入し、それを使って新しいエンドポイントを作成してください。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:270
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:276
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:283
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:290
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:295
#, fuzzy
msgid "If you stopped the application (keep in mind you don't have to do it, changes will be automatically deployed by our live reload feature), restart the application with:"
msgstr ""
"アプリケーションを停止した場合（ライブリロード機能によって変更が自動的にデプ"
"ロイされるので、停止する必要はありません）、次のようにしてアプリケーションを"
"再起動します。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:299
#, fuzzy
msgid "Then check that the endpoint returns `hello quarkus` as expected:"
msgstr "その後、エンドポイントが期待通りに `hello quarkus` を返すことを確認します。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:304
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n"
"hello quarkus\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/getting-started.adoc:306
#, no-wrap
msgid "Development Mode"
msgstr "開発モード"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:314
msgid "`quarkus:dev` runs Quarkus in development mode. This enables live reload with background compilation, which means that when you modify your Java files and/or your resource files and refresh your browser, these changes will automatically take effect.  This works too for resource files like the configuration property file.  Refreshing the browser triggers a scan of the workspace, and if any changes are detected, the Java files are recompiled and the application is redeployed; your request is then serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr "`quarkus:dev` は、開発モードで Quarkus を実行します。これにより、Java ファイルやリソースファイルを変更してブラウザを更新すると、これらの変更が自動的に反映されます。 これは、設定プロパティーファイルなどのリソースファイルに対しても機能します。 ブラウザをリフレッシュすると、ワークスペースのスキャンがトリガーされ、変更が検出された場合、Java ファイルが再コンパイルされ、アプリケーションが再デプロイされます。リクエストは、再デプロイされたアプリケーションによって処理されます。コンパイルやデプロイに問題がある場合は、エラーページで通知します。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:317
msgid "This will also listen for a debugger on port `5005`. If you want to wait for the debugger to attach before running you can pass `-Dsuspend` on the command line. If you don't want the debugger at all you can use `-Ddebug=false`."
msgstr "これはポート `5005` のデバッガーもリッスンします。デバッガーがアタッチされるのを待ってから実行する場合は、コマンドラインで `-Dsuspend` を渡してください。デバッガーを全く必要としない場合は `-Ddebug=false` を使います。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:318
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:321
msgid "All right, so far so good, but wouldn't it be better with a few tests, just in case."
msgstr "さて、ここまでは問題ありませんが、念のためにテストをした方がいいでしょう。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:323
msgid "In the generated build file, you can see 2 test dependencies:"
msgstr "生成された `pom.xml` ファイルでは、2 つのテスト依存関係を見ることができます。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:337
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:344
#, no-wrap
msgid ""
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
"testImplementation(\"io.rest-assured:rest-assured\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:347
msgid "Quarkus supports https://junit.org/junit5/[JUnit 5] tests."
msgstr "Quarkus は https://junit.org/junit5/[Junit 5] テストをサポートしています。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:349
msgid "Because of this, in the case of Maven, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] must be set, as the default version does not support JUnit 5:"
msgstr "Mavenを使用する場合、デフォルトのバージョンでは Junit 5 をサポートしていないため、 https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] のバージョンを設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:362
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <configuration>\n"
"       <systemPropertyVariables>\n"
"          <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"          <maven.home>${maven.home}</maven.home>\n"
"       </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:366
msgid "We also set the `java.util.logging` system property to make sure tests will use the correct log manager and `maven.home` to ensure that custom configuration from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr "また、 `java.util.logging` システムプロパティーを設定して、テストが正しいログマネージャーを使用することを確認し、 `maven.home` からカスタム設定が適用されることを確認します (存在する場合)。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:369
msgid "The generated project contains a simple test.  Edit the `src/test/java/org/acme/GreetingResourceTest.java` to match the following content:"
msgstr "生成されたプロジェクトには簡単なテストが含まれています。 `src/test/java/org/acme/getting/started/GreetingResourceTest.java` を以下の内容に合わせて編集してください。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:376
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:378
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:381
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:384
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:393
#, no-wrap
msgid ""
"    @Test    // <1>\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)    // <2>\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:404
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:408
msgid "By using the `QuarkusTest` runner, you instruct JUnit to start the application before the tests."
msgstr "`QuarkusTest` ランナーを使うことで、テストの前にアプリケーションを起動するように JUnit に指示します。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:409
msgid "Check the HTTP response status code and content"
msgstr "HTTP レスポンスのステータスコードと内容を確認します。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:411
msgid "These tests use http://rest-assured.io/[RestAssured], but feel free to use your favorite library."
msgstr "これらのテストでは http://rest-assured.io/[RestAssured] を使用していますが、お好きなライブラリーをご自由にお使いください。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:413
msgid "You can run these using Maven:"
msgstr "これらは Maven を使って実行することができます。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:417
#, no-wrap
msgid "./mvnw test\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:420
msgid "You can also run the test from your IDE directly (be sure you stopped the application first)."
msgstr "また、IDE から直接テストを実行することもできます (最初にアプリケーションを停止したことを確認してください)。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:426
msgid "By default, tests will run on port `8081` so as not to conflict with the running application. We automatically configure RestAssured to use this port. If you want to use a different client you should use the `@TestHTTPResource` annotation to directly inject the URL of the tested application into a field on the test class. This field can be of the type `String`, `URL` or `URI`. This annotation can also be given a value for the test path. For example, if I want to test a Servlet mapped to `/myservlet` I would just add the following to my test:"
msgstr "デフォルトでは、実行中のアプリケーションと競合しないように、テストはポート `8081` で実行されます。 RestAssured は、この 8081 ポートを使用するように自動的にを設定されます。別のクライアントを使用したい場合は、`@TestHTTPResource` アノテーションを使用して、テストされたアプリケーションの URL をテストクラスのフィールドに直接注入する必要があります。このフィールドは `String`、 `URL`、`URI` のいずれかの型になります。このアノテーションにはテストパスの値を指定することもできます。例えば、`/myservlet` にマップされたサーブレットをテストしたい場合、次のようにテストに追加します。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:432
#, no-wrap
msgid ""
"@TestHTTPResource(\"/myservlet\")\n"
"URL testUrl;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:436
msgid "The test port can be controlled via the `quarkus.http.test-port` config property. Quarkus also creates a system property called `test.url` that is set to the base test URL for situations where you cannot use injection."
msgstr "テストポートは、`quarkus.http.test-port` 設定プロパティーで制御できます。Quarkus はまた、インジェクションを使用できない場合のためにベースとなるテストURLに設定される `test.url` というシステムプロパティーを作成します。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:437
#, no-wrap
msgid "Working with multi-module project or external modules"
msgstr "マルチモジュールプロジェクトや外部モジュールとの連携"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:441
msgid "Quarkus heavily utilizes https://github.com/wildfly/jandex[Jandex] at build time, to discover various classes or annotations. One immediately recognizable application of this, is CDI bean discovery.  As a result, most of the Quarkus extensions will not work properly if this build time discovery isn't properly setup."
msgstr "Quarkus はビルド時に https://github.com/wildfly/jandex[Jandex] を多用して、さまざまなクラスやアノテーションを発見しています。これをすぐに認識できるアプリケーションの1つは、CDI Beanのディスカバリーです。 その結果、このビルド時のディスカバリーが適切に設定されていないと、Quarkusのエクステンションのほとんどが正しく動作しません。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:443
msgid "This index is created by default on the project on which Quarkus is configured for, thanks to our Maven and Gradle plugins."
msgstr "このインデックスは、Maven と Gradle プラグインのおかげで、Quarkus が設定されているプロジェクト上にデフォルトで作成されます。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:446
msgid "However, when working with a multi-module project, be sure to read the `Working with multi-module projects` section of the xref:maven-tooling.adoc#multi-module-maven[Maven] or xref:gradle-tooling.adoc#multi-module-maven[Gradle] guides."
msgstr "しかし、マルチモジュールプロジェクトで作業する場合は、 link:maven-toolsing#multi-module-maven[Maven] または link:gradle-toolsing#multi-module-maven[Gradle] ガイドの `マルチモジュールプロジェクトでの作業` のセクションを必ず読んでください。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:450
msgid "If you plan to use external modules (for example, an external library for all your domain objects), you will need to make these modules known to the indexing process either by adding the Jandex plugin (if you can modify them)  or via the `quarkus.index-dependency` property inside your `application.properties` (useful in cases where you can't modify the module)."
msgstr "外部モジュール (例えば、すべてのドメインオブジェクトのための外部ライブラリ) を使用する予定がある場合は、Jandex プラグインを追加するか (変更できる場合)、 `application.properties` 内の `quarkus.index-dependency` プロパティーを使って (モジュールを変更できない場合に便利です)、これらのモジュールをインデックス作成プロセスに知らせておく必要があります。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:452
msgid "Be sure to read the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide for more information."
msgstr "詳細は、CDI ガイドの link:cdi-reference#bean_discovery[Bean Discovery] セクションを必ずお読みください。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:453
#, no-wrap
msgid "Packaging and run the application"
msgstr "パッケージングとアプリケーションの実行"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:456
msgid "The application is packaged using:"
msgstr "このアプリケーションは、以下の方法でパッケージ化されています。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:460
msgid "It produces several outputs in `/target`:"
msgstr "これは `/target` にいくつかの出力を生成します。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:463
msgid "`getting-started-1.0.0-SNAPSHOT.jar` - containing just the classes and resources of the projects, it's the regular artifact produced by the Maven build - it is *not* the runnable jar;"
msgstr "`getting-started-1.0.0-SNAPSHOT.jar`: プロジェクトのクラスとリソースだけを含み、Maven ビルドによって生成される通常のアーティファクトです。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:465
msgid "the `quarkus-app` directory which contains the `quarkus-run.jar` jar file - being an executable _jar_. Be aware that it's not an _über-jar_ as the dependencies are copied into subdirectories of `quarkus-app/lib/`."
msgstr "実行可能 _jar_ である `quarkus-run.jar` jarファイルを含む `quarkus-app` ディレクトリ。依存関係は `quarkus-app/lib/` のサブディレクトリにコピーされているので _über-jar_ ではないことに注意してください。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:467
msgid "You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`"
msgstr "`java -jar target/getting-started-1.0.0-SNAPSHOT-runner.jar` を使ってアプリケーションを実行することができます。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:469
msgid "If you want to deploy your application somewhere (typically in a container), you need to deploy the whole `quarkus-app` directory."
msgstr "アプリケーションをどこかに(典型的にはコンテナに)デプロイしたい場合は、 `quarkus-app` ディレクトリ全体をデプロイする必要があります。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:471
msgid "Before running the application, don't forget to stop the hot reload mode (hit `CTRL+C`), or you will have a port conflict."
msgstr "アプリケーションを実行する前に、ホットリロードモードを停止する (CTRL+C) ことを忘れないでください 。停止しないと、ポートが衝突します。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:473
#, no-wrap
msgid "Configuring the banner"
msgstr "バナーの設定"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:478
msgid "By default when a Quarkus application starts (in regular or dev mode), it will display an ASCII art banner. The banner can be disabled by setting `quarkus.banner.enabled=false` in `application.properties`, by setting the `-Dquarkus.banner.enabled=false` Java System Property, or by setting the `QUARKUS_BANNER_ENABLED` environment variable to `false`.  Furthermore, users can supply a custom banner by placing the banner file in `src/main/resources` and configuring `quarkus.banner.path=name-of-file` in `application.properties`."
msgstr "デフォルトでは、Quarkus アプリケーションが起動すると (通常モードまたは開発モードで) 、ASCII アートバナーが表示されます。バナーを無効にするには、 `application.properties` で `quarkus.banner.enabled=false` を設定するか、 `Dquarkus.banner.enabled=false` の Java システムプロパティーを設定するか、 `QUARKUS_BANNER_ENABLED` 環境変数を `false` に設定します。 さらに、 `src/main/resources` にバナーファイルを配置し、 `application.properties` に `quarkus.banner.path=nam-of-file` を設定することで、ユーザーはカスタムのバナーを提供することができます。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:479
#, no-wrap
msgid "What's next?"
msgstr "次のステップ"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:485
msgid "This guide covered the creation of an application using Quarkus.  However, there is much more.  We recommend continuing the journey with the xref:building-native-image.adoc[building a native executable guide], where you learn about creating a native executable and packaging it in a container.  If you are interested in reactive, we recommend the xref:getting-started-reactive.adoc[Getting Started with Reactive guide], where you can see how to implement reactive applications with Quarkus."
msgstr "このガイドでは、Quarkus を使用したアプリケーションの作成について説明しました。 しかし、まだまだ多くのことがあります。 link:building-native-image[ネイティブ実行可能ファイルのビルド] では、ネイティブ実行可能ファイルの作成とコンテナーへのパッケージングを説明します。 リアクティブに興味がある場合は、link:get-started-reactive[リアクティブ入門ガイド] をお勧めします。リアクティブアプリケーションをQuarkusで実装する方法が解説されています。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:487
msgid "In addition, the xref:tooling.adoc[tooling guide] document explains how to:"
msgstr "また、link:tooling[ツールガイド] のドキュメントでは、以下の方法を説明しています。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:489
msgid "scaffold a project in a single command line"
msgstr "単一のコマンドラインでプロジェクトをスキャフォールドする方法"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:490
msgid "enable the _development mode_ (hot reload)"
msgstr "_development mode_ (ホットリロード) を有効にする"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:491
msgid "import the project in your favorite IDE"
msgstr "お気に入りの IDE でプロジェクトをインポートする"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:491
msgid "and more"
msgstr "その他もろもろ"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドには、以下が必要です。"

#~ msgid "less than 15 minutes"
#~ msgstr "15 分未満の時間"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "If you stopped the application, restart the application with `./mvnw compile quarkus:dev`.  Then check that the endpoint returns `hello quarkus` as expected:"
#~ msgstr "アプリケーションを停止した場合は、`./mvnw compile quarkus:dev` でアプリケーションを再起動します。 そして、エンドポイントが `hello quarkus` を期待通りに返すことを確認します。"

#~ msgid "Using fast-jar"
#~ msgstr "fast-jar の利用"

#~ msgid "The previous section assumes that the configuration property `quarkus.package.type` has either not been configured explicitly, or that it has been set to `legacy-jar` (in `application.properties` or any of the other supported configuration sources).  When the property has been set to `fast-jar` (which will become in Quarkus 1.12), then the result of executing `./mvnw package` is a new directory under `target` named `quarkus-app`."
#~ msgstr "前のセクションでは、設定プロパティ `quarkus.package.type` が明示的に設定されていないか、または `application.properties` またはその他のサポートされている設定ソースで `legacy-jar` に設定されていることを前提としています。プロパティが `fast-jar` に設定されている場合（Quarkus 1.12 で設定されます）、 `./mvnw package` を実行した結果、 `target` の下に `quarkus-app` という名前の新しいディレクトリが作成されます。"

#~ msgid "You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`."
#~ msgstr "`java -jar target/getting-started-1.0.0-SNAPSHOT-runner.jar` を使ってアプリケーションを実行することができます。"

#~ msgid "In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or might not function correctly."
#~ msgstr "生成された jar を正常に実行するためには、 `quarkus-app` ディレクトリのすべての内容が必要です。いずれかのファイルが欠落していると、アプリケーションが起動しなかったり、正しく機能しない可能性があります。"

#~ msgid "The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar on the classpath that the legacy jar necessitates, when loading a class or resource."
#~ msgstr "`fast-jar` パッケージングでは、どの依存関係のjarにクラスやリソースが含まれているかという情報がインデックス化されているため、レガシーのQuarkus jarよりも起動が少し速く、メモリ消費量もわずかに少ないアーティファクトを作成できます。このため、クラスやリソースをロードする際に、 レガシー jar が必要とするクラスパス上のすべての jar を検索する必要がなくなります。"
