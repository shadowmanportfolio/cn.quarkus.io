# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-11 10:12+0000\n"
"PO-Revision-Date: 2022-05-12 08:55+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security.adoc:6
#, no-wrap
msgid "Security Architecture and Guides"
msgstr "セキュリティーアーキテクチャとガイド"

#. type: Plain text
#: upstream/_guides/security.adoc:11
msgid "Quarkus Security provides the architecture, multiple authentication and authorization mechanisms, and other tools for the developers to build a production-quality security for their Quarkus applications."
msgstr "Quarkus Securityでは、開発者がQuarkusアプリケーションの商用品質のセキュリティーを構築するためのアーキテクチャ、複数の認証および認可メカニズム、その他のツールを提供しています。"

#. type: Plain text
#: upstream/_guides/security.adoc:13
msgid "This document provides a brief overview of Quarkus Security and links to the individual guides."
msgstr "このドキュメントでは、Quarkus Securityの簡単な概要と、各ガイドへのリンクについて説明しています。"

#. type: Title ==
#: upstream/_guides/security.adoc:14
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security.adoc:17
msgid "`HttpAuthenticationMechanism` is the main entry into Quarkus HTTP Security."
msgstr "`HttpAuthenticationMechanism`  は、Quarkus HTTP Securityのメインエントリーです。"

#. type: Plain text
#: upstream/_guides/security.adoc:20
msgid "Quarkus Security Manager uses `HttpAuthenticationMechanism` to extract the authentication credentials from the HTTP request and delegates to `IdentityProvider` to complete the conversion of these credentials to `SecurityIdentity`."
msgstr "Quarkus Security Managerは、 `HttpAuthenticationMechanism`  を使用してHTTPリクエストから認証資格情報を抽出し、 `IdentityProvider`  に委任して、これらの資格情報の `SecurityIdentity`  への変換を完了させます。"

#. type: Plain text
#: upstream/_guides/security.adoc:22
msgid "For example, the credentials may be coming with the HTTP `Authorization` header, client HTTPS certificates or cookies."
msgstr "例えば、資格情報は、HTTP `Authorization`  ヘッダー、クライアントの HTTPS 証明書、またはクッキーを使用している場合があります。"

#. type: Plain text
#: upstream/_guides/security.adoc:24
msgid "`IdentityProvider` verifies the authentication credentials and maps them to `SecurityIdentity` which contains the username, roles, the original authentication credentials, and other attributes."
msgstr "`IdentityProvider`  は認証資格情報を検証し、ユーザー名、ロール、元の認証資格情報、およびその他の属性を含む `SecurityIdentity`  にマップします。"

#. type: Plain text
#: upstream/_guides/security.adoc:26
msgid "For every authenticated resource, you can inject a `SecurityIdentity` instance to get the authenticated identity information."
msgstr "認証済みリソースごとに、 `SecurityIdentity`  インスタンスを注入して、認証済みの ID 情報を取得することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:29
msgid "In some other contexts you may have other parallel representations of the same information (or parts of it) such as `SecurityContext` for JAX-RS or `JsonWebToken` for JWT."
msgstr "他の文脈では、JAX-RSであれば `SecurityContext`  、JWTであれば `JsonWebToken`  のように、同じ情報(またはその一部)を他の別の表現で表現している場合があります。"

#. type: Title ==
#: upstream/_guides/security.adoc:30
#, no-wrap
msgid "Authentication mechanisms"
msgstr "認証メカニズム"

#. type: Plain text
#: upstream/_guides/security.adoc:33
msgid "Quarkus supports several sources to load authentication information from."
msgstr "Quarkusは、認証情報をロードするためのいくつかのソースをサポートしています。"

#. type: Title ===
#: upstream/_guides/security.adoc:34
#, no-wrap
msgid "Basic and Form Authentication Mechanisms"
msgstr "基本認証とフォーム認証の仕組み"

#. type: Plain text
#: upstream/_guides/security.adoc:38
#, fuzzy
msgid "Basic and Form HTTP-based authentication mechanisms are the core authentication mechanisms supported in Quarkus.  Please see xref:security-built-in-authentication.adoc#basic-auth[Basic HTTP Authentication] and xref:security-built-in-authentication.adoc#form-auth[Form HTTP Authentication] for more information."
msgstr "BasicおよびForm HTTPベースの認証メカニズムは、Quarkusでサポートされている中核的な認証メカニズムです。詳細については、 link:security-built-in-authentication.html#basic-auth[Basic HTTP Authentication]および link:security-built-in-authentication.html#form-auth[Form HTTP Authentication]をご覧ください。"

#. type: Title ===
#: upstream/_guides/security.adoc:39
#, no-wrap
msgid "WebAuthn Authentication Mechanism"
msgstr "WebAuthn 認証メカニズム"

#. type: Plain text
#: upstream/_guides/security.adoc:44
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism designed to replace passwords. In short, every time you write a service for registering new users, or logging them in, instead of asking for a password, you use WebAuthn, which will replace the password."
msgstr "link:https://webauthn.guide/[WebAuthn] は、パスワードを置き換えるために設計された認証メカニズムです。つまり、新しいユーザーを登録したり、ログインしたりするサービスを書くたびに、パスワードを要求する代わりにWebAuthn を使って、パスワードを置き換えるのです。"

#. type: Plain text
#: upstream/_guides/security.adoc:46
msgid "Please see xref:security-webauthn.adoc[our dedicated WebAuthn documentation] for more information."
msgstr "詳細については、xref:security-webauthn.adoc[個別のWebAuthnドキュメント]を参照してください。"

#. type: Title ===
#: upstream/_guides/security.adoc:47
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr "相互TLS認証"

#. type: Plain text
#: upstream/_guides/security.adoc:50
msgid "Quarkus provides Mutual TLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr "Quarkusは相互TLS認証を提供しているので、X.509証明書に基づいてユーザーを認証できます。"

#. type: Plain text
#: upstream/_guides/security.adoc:52
msgid "Please see xref:security-built-in-authentication.adoc#mutual-tls[Mutual TLS Authentication] for more information."
msgstr "詳しくは link:security-built-in-authentication#mutual-tls[相互TLS認証] をご覧ください。"

#. type: Title ===
#: upstream/_guides/security.adoc:53
#, no-wrap
msgid "OpenID Connect"
msgstr "OpenID Connect"

#. type: Plain text
#: upstream/_guides/security.adoc:56
#, fuzzy
msgid "`quarkus-oidc` extension provides a reactive, interoperable, multi-tenant enabled OpenID Connect adapter which supports `Bearer Token` and `Authorization Code Flow` authentication mechanisms."
msgstr "`quarkus-oidc` エクステンションは、反応性、相互運用性、マルチテナント対応のOpenID Connectアダプタを提供し、 `Bearer Token` と `Authorization Code Flow` の認証メカニズムをサポートします。"

#. type: Plain text
#: upstream/_guides/security.adoc:59
#, fuzzy
msgid "`Bearer Token` mechanism extracts the token from HTTP `Authorization` header.  `Authorization Code Flow` mechanism uses OpenID Connect Authorization Code flow. It redirects the user to IDP to authenticate and completes the authentication process after the user has been redirected back to Quarkus by exchanging the provided code grant for ID, access and refresh tokens."
msgstr "`Bearer Token` メカニズムは、HTTP `Authorization` ヘッダーからトークンを抽出します。 `Authorization Code Flow` メカニズムは、OpenID Connect Authorization Code フローを使用します。認証のためにユーザーをIDPにリダイレクトし、ユーザーがQuarkusに戻ってきた後に、提供されたコードグラントをID、アクセストークン、リフレッシュトークンと交換することで、認証プロセスを完了します。"

#. type: Plain text
#: upstream/_guides/security.adoc:61
msgid "ID and access `JWT` tokens are verified with the refreshable `JWK` key set but both JWT and opaque (binary) tokens can be introspected remotely."
msgstr "ID とアクセス `JWT` トークンは、リフレッシュ可能な `JWK` キーセットで検証されますが、JWT と不透明な (バイナリーの) トークンの両方をリモートで検証することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:63
#, fuzzy
msgid "See the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide for more information about `Bearer Token` authentication mechanism."
msgstr "`Bearer Token` 認証メカニズムの詳細については、ガイド「 link:security-openid-connect.html[Using OpenID Connect to Protect Service]Applications」を参照してください。"

#. type: Plain text
#: upstream/_guides/security.adoc:65
#, fuzzy
msgid "See the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Application] guide for more information about `Authorization Code Flow` authentication mechanism."
msgstr "`Authorization Code Flow` 認証メカニズムの詳細については、ガイド「 link:security-openid-connect-web-authentication.html[Using OpenID Connect to Protect Web Application]」を参照してください。"

#. type: delimited block =
#: upstream/_guides/security.adoc:69
msgid "Both `quarkus-oidc` `Bearer` and `Authorization Code Flow` Authentication mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "`quarkus-oidc` の`Bearer` と `Authorization Code Flow`  認証メカニズムはいずれも link:#smallrye-jwt[SmallRye JWT ]を使用して、JWT トークンを Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken` として表現しています。"

#. type: Plain text
#: upstream/_guides/security.adoc:72
#, fuzzy
msgid "See xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] for more information about multiple tenants which can support `Bearer` or `Authorization Code Flow` authentication mechanism and configured statically or dynamically."
msgstr "`Bearer` または `Authorization Code Flow` 認証メカニズムをサポートし、静的または動的に設定できる複数のテナントについては、 link:security-openid-connect-multitenancy.html[「Using OpenID Connect Multi-Tenancy]」を参照してください。"

#. type: delimited block =
#: upstream/_guides/security.adoc:77
#, fuzzy
msgid "If you would like to have Quarkus OIDC extension enabled at runtime then set `quarkus.oidc.tenant-enabled=false` at build time and re-enable it at runtime using a system property.  See also xref:security-openid-connect-multitenancy.adoc#disable-tenant[Disabling Tenant Configurations] for more information about managing the individual tenant configurations in the multi-tenant OIDC deployments."
msgstr "実行時にQuarkus OIDC拡張を有効にしたい場合は、ビルド時に `quarkus.oidc.tenant-enabled=false` を設定し、システムプロパティを使用して実行時に再度有効にします。マルチテナントのOIDC展開における個々のテナント設定の管理については、 link:security-openid-connect-multitenancy.html#disable-tenant[「テナント設定の無効化]」を参照してください。"

#. type: Plain text
#: upstream/_guides/security.adoc:80
#, fuzzy
msgid "If you use Keycloak and Bearer tokens then also see the xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization] guide."
msgstr "KeycloakとBearerトークンを使用している場合は、「 link:security-keycloak-authorization.html[Using Keycloak to Centralize Authorization]」も参照してください。"

#. type: delimited block =
#: upstream/_guides/security.adoc:84
#, fuzzy
msgid "If you need to configure Keycloak programmatically then consider using https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API] with the help of the `quarkus-keycloak-admin-client` or `quarkus-keycloak-admin-client-reactive` (if the application uses `quarkus-rest-client-reactive`) extension."
msgstr "Keycloakをプログラムで設定する必要がある場合は、 `quarkus-keycloak-admin-client` エクステンションの助けを借りて、 link:https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API]の使用を検討してください。"

#. type: Title ===
#: upstream/_guides/security.adoc:86
#, fuzzy, no-wrap
msgid "OpenID Connect Client and Filters"
msgstr "OpenID Connectクライアントとフィルタ"

#. type: Plain text
#: upstream/_guides/security.adoc:89
#, fuzzy
msgid "`quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers which support `client-credentials`, `password` and `refresh_token` token grants."
msgstr "`quarkus-oidc-client` エクステンションは、 `client-credentials` 、 `password` 、 `refresh_token` トークングラントをサポートするOpenID ConnectやOAuth2プロバイダからアクセストークンを取得し、リフレッシュするための `OidcClient` を提供します。"

#. type: Plain text
#: upstream/_guides/security.adoc:91
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension depends on the `quarkus-oidc-client` extension and provides JAX-RS `OidcClientRequestFilter` which sets the access token acquired by `OidcClient` as an HTTP `Authorization` header's `Bearer` scheme value. This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint but it is not related to the authentication requirements of this service endpoint. For example, it can be a public endpoint or it can be protected with MTLS - the important point is that this Quarkus endpoint does not have to be protected itself with the Quarkus OpenID Connect adapter."
msgstr "`quarkus-oidc-client-filter` エクステンションは、 `quarkus-oidc-client` エクステンションに依存し、 `OidcClient` で取得したアクセストークンを HTTP `Authorization` ヘッダの `Bearer` スキーム値として設定する JAX-RS `OidcClientRequestFilter` を提供します。このフィルターは、現在のQuarkusのエンドポイントに注入されたMP RestClientの実装に登録することができますが、このサービスのエンドポイントの認証要件には関係しません。例えば、パブリックエンドポイントであっても、MTLSで保護されていても構いません。重要な点は、このQuarkusエンドポイントは、Quarkus OpenID Connectアダプタでそれ自体を保護する必要がないということです。"

#. type: Plain text
#: upstream/_guides/security.adoc:93
#, fuzzy
msgid "`quarkus-oidc-token-propagation` extension depends on the `quarkus-oidc` extension and provides JAX-RS `TokenCredentialRequestFilter` which sets the OpenID Connect Bearer or Authorization Code Flow access token as an HTTP `Authorization` header's `Bearer` scheme value. This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint and the Quarkus endpoint must be protected itself with the Quarkus OpenID Connect adapter. This filter can be used to propagate the access token to the downstream services."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、 `quarkus-oidc` エクステンションに依存し、HTTP `Authorization` ヘッダーの `Bearer` スキーム値としてOpenID Connect BearerまたはAuthorization Code Flowアクセストークンを設定するJAX-RS `TokenCredentialRequestFilter` を提供します。このフィルターは、現在のQuarkusエンドポイントに注入されたMP RestClient実装に登録することができ、Quarkusエンドポイントは、Quarkus OpenID Connectアダプタでそれ自体を保護する必要があります。このフィルターは、アクセストークンを下流のサービスに伝搬するために使用できます。"

#. type: Plain text
#: upstream/_guides/security.adoc:95
#, fuzzy
msgid "See the xref:security-openid-connect-client.adoc[Using OpenID Connect and OAuth2 Client] guide for more information."
msgstr "詳しくは、 link:security-openid-connect-client.html[「Using OpenID Connect and OAuth2 Client」]のガイドをご覧ください。"

#. type: Title ===
#: upstream/_guides/security.adoc:97
#, no-wrap
msgid "SmallRye JWT"
msgstr "SmallRye JWT"

#. type: Plain text
#: upstream/_guides/security.adoc:100
msgid "`quarkus-smallrye-jwt` provides Microprofile JWT 1.1.1 implementation and many more options to verify signed and encrypted `JWT` tokens and represent them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "`quarkus-smallrye-jwt` はMicroprofile JWT 1.1.1.1 の実装と、署名・暗号化された `JWT` トークンを検証し、 `org.eclipse.microprofile.jwt.JsonWebToken` として表現するための多くのオプションを提供します。"

#. type: Plain text
#: upstream/_guides/security.adoc:102
msgid "It provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It can currently verify only `JWT` tokens using the PEM keys or refreshable `JWK` key set."
msgstr "それは `quarkus-oidc` ベアラートークン認証メカニズムに代わるものを提供します。現在、PEM 鍵または更新可能な `JWK` 鍵セットを使用して `JWT` トークンのみを検証することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:104
msgid "Additionally it provides `JWT Generation API` for creating `signed`, `inner-signed` and/or `encrypted` `JWT` tokens with ease."
msgstr "さらに、 `JWT Generation API` を提供して、 `signed` , `inner-signed` , および/または `encrypted` `JWT`トークンを簡単に作成することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:106
#, fuzzy
msgid "See the xref:security-jwt.adoc[Using SmallRye JWT] guide for more information."
msgstr "詳細は、 link:security-jwt.html[「SmallRye JWTの使用]」ガイドを参照してください。"

#. type: Title ===
#: upstream/_guides/security.adoc:107
#, no-wrap
msgid "OAuth2"
msgstr "OAuth2"

#. type: Plain text
#: upstream/_guides/security.adoc:110
msgid "`quarkus-elytron-security-oauth2` provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It is based on `Elytron` and is primarily meant for introspecting the opaque tokens remotely."
msgstr "`quarkus-elytron-security-oauth2`  は `quarkus-oidc`  Bearer Token 認証メカニズムの代替手段を提供します。これは `Elytron` をベースにしており、主に不透明なトークンをリモートでイントロスペクトするためのものです。"

#. type: Plain text
#: upstream/_guides/security.adoc:112
#, fuzzy
msgid "See the xref:security-oauth2.adoc[Using OAuth2] guide for more information."
msgstr "詳しくは link:security-built-in-authentication#mutual-tls[相互TLS認証] をご覧ください。"

#. type: Title ===
#: upstream/_guides/security.adoc:114
#, fuzzy, no-wrap
msgid "Choosing between OpenID Connect, SmallRye JWT and OAuth2 extensions"
msgstr "OpenID Connect、SmallRye JWT、OAuth2エクステンションの選択"

#. type: Plain text
#: upstream/_guides/security.adoc:117
#, fuzzy
msgid "`quarkus-oidc` extension requires an OpenID Connect provider such as Keycloak which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow. In both cases `quarkus-oidc` requires a connection to this OpenID Connect provider."
msgstr "`quarkus-oidc` エクステンションには、Bearer トークンの検証やAuthorization Code フローによるエンドユーザーの認証に使用できる Keycloak などの OpenID Connect プロバイダーが必要です。どちらの場合も、 `quarkus-oidc` はこのOpenID Connectプロバイダへの接続を必要とします。"

#. type: Plain text
#: upstream/_guides/security.adoc:119
msgid "`quarkus-oidc` is the only option when the user authentication via Authorization Code flow or supporting multiple tenants is required. It can also request a UserInfo using both Authorization Code Flow and Bearer access tokens."
msgstr "`quarkus-oidc` は、Authorization Code フローによるユーザー認証や、複数のテナントへの対応が必要な場合の唯一の選択肢です。また、Authorization Code FlowとBearerアクセストークンの両方を使ってUserInfoを要求することもできます。"

#. type: Plain text
#: upstream/_guides/security.adoc:121
msgid "When the Bearer tokens have to be verified then `quarkus-oidc`, `quarkus-smallrye-jwt` and `quarkus-elytron-security-oauth2` can be used."
msgstr "ベアラートークンを検証する必要がある場合は、 `quarkus-oidc` 、 `quarkus-smallrye-jwt` 、 `quarkus-elytron-security-oauth2` を使用できます。"

#. type: Plain text
#: upstream/_guides/security.adoc:123
#, fuzzy
msgid "If you have Bearer tokens in a JWT format then all these 3 extensions can be used. Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenID Connect provider rotates the keys, therefore `quarkus-oidc` or `quarkus-smallrye-jwt` should be used for verifying JWT tokens if the remote token introspection has to be avoided or not supported by the providers."
msgstr "JWT形式のBearerトークンを持っている場合、これら3つのエクステンションはすべて使用できます。 `quarkus-oidc` と `quarkus-smallrye-jwt` は、OpenID Connect プロバイダがキーをローテーションしたときに JsonWebKey (JWK) セットをリフレッシュすることをサポートしています。したがって、リモート・トークンのイントロスペクションを回避しなければならない場合や、プロバイダがサポートしていない場合は、JWT トークンの検証に `quarkus-oidc` または `quarkus-smallrye-jwt` を使用する必要があります。"

#. type: Plain text
#: upstream/_guides/security.adoc:125
#, fuzzy
msgid "`quarkus-smallrye-jwt` does not support the remote introspection of the opaque tokens or even JWT tokens - it always relies on the locally available keys - possibly fetched from the OpenID Connect provider. So if you need to introspect the JWT tokens remotely then both `quarkus-oidc` and `quarkus-elytron-security-oauth2` will work. Both extensions also support the verification of the opaque/binary tokens via the remote introspection."
msgstr "`quarkus-smallrye-jwt` は、不透明なトークンやJWTトークンのリモートイントロスペクションをサポートしていません。それは常に、ローカルで利用可能なキー（おそらくOpenID Connectプロバイダから取得されたもの）に依存しています。したがって、JWTトークンをリモートでイントロスペクションする必要がある場合は、 `quarkus-oidc` と `quarkus-elytron-security-oauth2` の両方が機能します。両方のエクステンションは、リモートイントロスペクションによる不透明/バイナリトークンの検証もサポートしています。"

#. type: Plain text
#: upstream/_guides/security.adoc:127
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` can have both JWT and opaque tokens injected into the endpoint code - the injected JWT tokens may offer a richer information about the user. All extensions can have the tokens injected as `Principal`."
msgstr "`quarkus-oidc` と `quarkus-smallrye-jwt` は、JWT トークンと不透明なトークンの両方をエンドポイントコードに注入することができます。注入された JWT トークンは、ユーザーに関するより豊富な情報を提供することができます。すべてのエクステンションは、 `Principal` として、トークンを注入することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:129
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. The latter will only use the JWK-formatted keys which are part of a JWK set. The former - can also work with PEM keys."
msgstr "`quarkus-smallrye-jwt` は `quarkus-oidc` よりも多くのキーフォーマットをサポートしています。後者は、JWKセットの一部であるJWKフォーマットの鍵のみを使用します。前者では、PEMキーも使用可能です。"

#. type: Plain text
#: upstream/_guides/security.adoc:131
msgid "`quarkus-smallrye-jwt` can handle locally not only signed but also inner-signed-and-encrypted or only encrypted tokens. In fact `quarkus-oidc` and `quarkus-elytron-security-oauth2` can verify such tokens too but only by treating them as opaque tokens and verifying them via the remote introspection."
msgstr "`quarkus-smallrye-jwt` は、署名されたトークンだけでなく、内部署名と暗号化されたトークン、または暗号化されたトークンをローカルに扱うことができます。実際、 `quarkus-oidc` と `quarkus-elytron-security-oauth2` はそのようなトークンも検証できますが、それらを不透明なトークンとして扱い、リモートイントロスペクションを介して検証することによってのみ可能です。"

#. type: Plain text
#: upstream/_guides/security.adoc:133
msgid "`quarkus-elytron-security-oauth2` is the best choice if you need a light weight library for the remote introspection of either opaque or JWT tokens."
msgstr "`quarkus-elytron-security-oauth2` は、不透明なトークンやJWTトークンをリモートでイントロスペクションするための軽量なライブラリが必要な場合に最適な選択肢です。"

#. type: Plain text
#: upstream/_guides/security.adoc:135
msgid "Note that a choice of using the opaque versus JWT token format is often driven by the architectural considerations. Opaque tokens are usually much shorter than JWT tokens but they require maintaining most of the token associated state in the provider database - the opaque tokens are effectively the database pointers. JWT tokens are significantly longer than the opaque tokens - but the providers are effectively delegating storing most of the token associated state to the client by storing it as the token claims and either signing and/or encrypting them."
msgstr "不透明なトークンとJWTトークンのどちらを使用するかは、多くの場合、アーキテクチャ上の考慮事項によって決定されることに注意してください。不透明なトークンは、通常、JWT トークンよりもはるかに短いですが、トークンに関連する状態のほとんどをプロバイダのデータベースで維持する必要があります。JWT トークンは、不透明なトークンよりもかなり長いですが、プロバイダは、トークンに関連する状態のほとんどを、トークン・クレームとして保存し、それらに署名や暗号を施すことで、事実上、クライアントに保存を委ねています。"

#. type: Plain text
#: upstream/_guides/security.adoc:137
msgid "Below is a summary of the options."
msgstr "以下、選択肢の概要をご紹介します。"

#. type: Table
#: upstream/_guides/security.adoc:139
#, no-wrap
msgid "quarkus-oidc"
msgstr "quarkus-oidc"

#. type: Table
#: upstream/_guides/security.adoc:139
#, no-wrap
msgid "quarkus-smallrye-jwt"
msgstr "quarkus-smallrye-jwt"

#. type: Table
#: upstream/_guides/security.adoc:141
#, no-wrap
msgid "quarkus-elytron-security-oauth2"
msgstr "quarkus-elytron-security-oauth2"

#. type: Table
#: upstream/_guides/security.adoc:142
#, no-wrap
msgid "Bearer JWT verification is required"
msgstr "ベアラー JWTの検証が必要です。"

#. type: Table
#: upstream/_guides/security.adoc:143
#, no-wrap
msgid "Local Verification or Introspection"
msgstr "ローカル検証またはイントロスペクション"

#. type: Table
#: upstream/_guides/security.adoc:144 upstream/_guides/security.adoc:184
#, no-wrap
msgid "Local Verification"
msgstr "ローカル検証"

#. type: Table
#: upstream/_guides/security.adoc:145 upstream/_guides/security.adoc:147
#: upstream/_guides/security.adoc:149 upstream/_guides/security.adoc:183
#: upstream/_guides/security.adoc:185
#, no-wrap
msgid "Introspection"
msgstr "イントロスペクション"

#. type: Table
#: upstream/_guides/security.adoc:146
#, no-wrap
msgid "Bearer Opaque Token verification is required"
msgstr "ベアラー不透明 Tokenの検証が必要です。"

#. type: Table
#: upstream/_guides/security.adoc:148 upstream/_guides/security.adoc:153
#: upstream/_guides/security.adoc:161 upstream/_guides/security.adoc:164
#: upstream/_guides/security.adoc:165 upstream/_guides/security.adoc:168
#: upstream/_guides/security.adoc:169 upstream/_guides/security.adoc:172
#: upstream/_guides/security.adoc:173 upstream/_guides/security.adoc:175
#: upstream/_guides/security.adoc:177 upstream/_guides/security.adoc:179
#: upstream/_guides/security.adoc:181 upstream/_guides/security.adoc:187
#: upstream/_guides/security.adoc:189 upstream/_guides/security.adoc:191
#: upstream/_guides/security.adoc:193
#, no-wrap
msgid "No"
msgstr "No"

#. type: Table
#: upstream/_guides/security.adoc:150
#, no-wrap
msgid "Refreshing JsonWebKey set for verifying JWT tokens"
msgstr "JWTトークンを検証するためのJsonWebKeyセットの更新"

#. type: Table
#: upstream/_guides/security.adoc:151 upstream/_guides/security.adoc:152
#: upstream/_guides/security.adoc:155 upstream/_guides/security.adoc:156
#: upstream/_guides/security.adoc:157 upstream/_guides/security.adoc:159
#: upstream/_guides/security.adoc:160 upstream/_guides/security.adoc:163
#: upstream/_guides/security.adoc:167 upstream/_guides/security.adoc:171
#: upstream/_guides/security.adoc:176 upstream/_guides/security.adoc:192
#, no-wrap
msgid "Yes"
msgstr "Yes"

#. type: Table
#: upstream/_guides/security.adoc:154
#, no-wrap
msgid "Represent token as Principal"
msgstr "トークンをプリンシパルとして表現"

#. type: Table
#: upstream/_guides/security.adoc:158
#, no-wrap
msgid "Inject JWT as MP JWT JsonWebToken"
msgstr "MP JWT JsonWebTokenとしてJWTをインジェクト"

#. type: Table
#: upstream/_guides/security.adoc:162
#, no-wrap
msgid "Authorization Code Flow"
msgstr "認可コードフロー"

#. type: Table
#: upstream/_guides/security.adoc:166
#, no-wrap
msgid "Multi-tenancy"
msgstr "マルチテナンシー"

#. type: Table
#: upstream/_guides/security.adoc:170
#, no-wrap
msgid "UserInfo support"
msgstr "UserInfoサポート"

#. type: Table
#: upstream/_guides/security.adoc:174
#, no-wrap
msgid "Pem Key format support"
msgstr "Pemキーフォーマットのサポート"

#. type: Table
#: upstream/_guides/security.adoc:178
#, no-wrap
msgid "SecretKey support"
msgstr "SecretKey サポート"

#. type: Table
#: upstream/_guides/security.adoc:180
#, no-wrap
msgid "In JsonWebKey format"
msgstr "JsonWebKey形式で"

#. type: Table
#: upstream/_guides/security.adoc:182
#, no-wrap
msgid "InnerSigned/Encrypted or Encrypted tokens"
msgstr "InnerSigned/EncryptedまたはEncryptedトークン"

#. type: Table
#: upstream/_guides/security.adoc:186
#, no-wrap
msgid "Custom Token Verificition"
msgstr "カスタムトークン検証"

#. type: Table
#: upstream/_guides/security.adoc:188
#, no-wrap
msgid "With Injected JWTParser"
msgstr "インジェクションされたJWTParserで"

#. type: Table
#: upstream/_guides/security.adoc:190
#, no-wrap
msgid "Accept JWT as cookie"
msgstr "JWTをクッキーとして受入"

#. type: Title ===
#: upstream/_guides/security.adoc:195
#, no-wrap
msgid "LDAP"
msgstr "LDAP"

#. type: Plain text
#: upstream/_guides/security.adoc:198
#, fuzzy
msgid "Please see the xref:security-ldap.adoc[Authenticate with LDAP] guide for more information about LDAP authentication mechanism."
msgstr "LDAP認証メカニズムの詳細については、「 link:security-ldap.html[Authenticate with LDAP]」をご覧ください。"

#. type: Title ==
#: upstream/_guides/security.adoc:200
#, no-wrap
msgid "Identity Providers"
msgstr "アイデンティティ・プロバイダー"

#. type: Plain text
#: upstream/_guides/security.adoc:203
msgid "`IdentityProvider` converts the authentication credentials provided by `HttpAuthenticationMechanism` to `SecurityIdentity`."
msgstr "`IdentityProvider`  は、 `HttpAuthenticationMechanism`  が提供する認証資格情報を `SecurityIdentity`  に変換します。"

#. type: Plain text
#: upstream/_guides/security.adoc:206
msgid "Some extensions such as `OIDC`, `OAuth2`, `SmallRye JWT`, `LDAP` have the inlined `IdentityProvider` implementations which are specific to the supported authentication flow.  For example, `quarkus-oidc` uses its own `IdentityProvider` to convert a token to `SecurityIdentity`."
msgstr "`OIDC` , `OAuth2` , `SmallRye JWT` , `LDAP`  などのエクステンションには、サポートされている認証フローに固有の `IdentityProvider` のインライン実装があります。例えば、 `quarkus-oidc` は独自の `IdentityProvider` を使用してトークンを `SecurityIdentity` に変換します。"

#. type: Plain text
#: upstream/_guides/security.adoc:208
msgid "If you use `Basic` or `Form` HTTP-based authentication then you have to add an `IdentityProvider` which can convert a user name and password to `SecurityIdentity`."
msgstr "`Basic` または `Form` HTTP ベースの認証を使用している場合は、ユーザー名とパスワードを `SecurityIdentity` に変換できる `IdentityProvider` を追加する必要があります。"

#. type: Plain text
#: upstream/_guides/security.adoc:211
#, fuzzy
msgid "See xref:security-jpa.adoc[JPA IdentityProvider] and xref:security-jdbc.adoc[JDBC IdentityProvider] for more information.  You can also use xref:security-testing.adoc#configuring-user-information[User Properties IdentityProvider] for testing."
msgstr "詳細については、 link:security-jpa.html[JPA IdentityProvider]および link:security-jdbc.html[JDBC IdentityProvider]を参照してください。テスト用に link:security-testing.html#configuring-user-information[User Properties IdentityProvider]を使用することもできます。"

#. type: Title ==
#: upstream/_guides/security.adoc:212
#, no-wrap
msgid "Combining Authentication Mechanisms"
msgstr "認証メカニズムの組み合わせ"

#. type: Plain text
#: upstream/_guides/security.adoc:216
msgid "One can combine multiple authentication mechanisms if they get the authentication credentials from the different sources.  For example, combining built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms is allowed, but combining `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms is not allowed because both will attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr "異なるソースから認証証明書を取得する場合、複数の認証メカニズムを組み合わせることができます。例えば、組み込みの `Basic`  と `Bearer`   `quarkus-oidc`  認証機構を組み合わせることはできますが、 `quarkus-oidc`   `Bearer`  と `smallrye-jwt`  認証機構を組み合わせることはできません。なぜなら、両方とも HTTP `Authorization Bearer`  スキームから抽出されたトークンを検証しようとするからです。"

#. type: Title ===
#: upstream/_guides/security.adoc:217
#, no-wrap
msgid "Path Specific Authentication Mechanism"
msgstr "パス固有認証メカニズム"

#. type: Plain text
#: upstream/_guides/security.adoc:220
#, fuzzy
msgid "You can enforce that only a single authentication mechanism is selected for a given request path, for example:"
msgstr "例えば、指定されたリクエストパスに対して、単一の認証メカニズムのみを選択することを強制することができます。"

#. type: delimited block -
#: upstream/_guides/security.adoc:224
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:228
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:232
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security.adoc:235
#, fuzzy
msgid "The value of the `auth-mechanism` property must match the authentication scheme supported by HttpAuthenticationMechanism such as `basic` or `bearer` or `form`, etc."
msgstr "`auth-mechanism` プロパティの値は、 `basic` や `bearer` や `form` など、HttpAuthenticationMechanism がサポートする認証スキームと一致する必要があります。"

#. type: Title ==
#: upstream/_guides/security.adoc:236
#, no-wrap
msgid "Proactive Authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_guides/security.adoc:240
msgid "By default, Quarkus does what we call proactive authentication. This means that if an incoming request has a credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr "デフォルトでは、Quarkusはプロアクティブ認証と呼ばれる認証を行います。これは、受信したリクエストにクレデンシャルがある場合、そのリクエストは常に認証されます(ターゲットページが認証を必要としない場合でも)。"

#. type: Plain text
#: upstream/_guides/security.adoc:242
msgid "See xref:security-built-in-authentication.adoc#proactive-authentication[Proactive Authentication] for more information."
msgstr "詳細については、 link:security-built-in-authentication#proactive-authentication[プロアクティブ認証]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:243
#, no-wrap
msgid "Authorization"
msgstr "認可"

#. type: Plain text
#: upstream/_guides/security.adoc:246
msgid "See xref:security-authorization.adoc[Security Authorization] for more information about Role Based Access Control and other authorization options."
msgstr "役割ベースのアクセス制御およびその他の認可オプションの詳細については、 link:security-authorization[セキュリティー認可]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:247
#, no-wrap
msgid "Customization and other useful tips"
msgstr "カスタマイズやその他の便利なヒント"

#. type: Plain text
#: upstream/_guides/security.adoc:250
msgid "Quarkus Security is highly customizable. One can register custom ``HttpAuthenticationMechanism``s, ``IdentityProvider``s and ``SecurityidentityAugmentor``s."
msgstr "Quarkus Securityは、高度なカスタマイズが可能です。カスタム `HttpAuthenticationMechanism` 、 `IdentityProvider` 、 `SecurityidentityAugmentor` を登録することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:252
#, fuzzy
msgid "See xref:security-customization.adoc[Security Customization] for more information about customizing Quarkus Security and other useful tips about the reactive security, registering the security providers, etc."
msgstr "役割ベースのアクセス制御およびその他の認可オプションの詳細については、 link:security-authorization[セキュリティー認可]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:253
#, no-wrap
msgid "Secure connections with SSL"
msgstr "SSLによる安全な接続"

#. type: Plain text
#: upstream/_guides/security.adoc:256
#, fuzzy
msgid "See the xref:http-reference#adoc[Supporting secure connections with SSL] guide for more information."
msgstr "詳しくは link:http-reference.html#adoc[「Supporting secure connections with SSL]」をご覧ください。"

#. type: Title ==
#: upstream/_guides/security.adoc:257
#, no-wrap
msgid "Cross-Origin Resource Sharing"
msgstr "クロスオリジンリソース共有"

#. type: Plain text
#: upstream/_guides/security.adoc:260
#, fuzzy
msgid "If you plan to make your Quarkus application accessible to another application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more information."
msgstr "Quarkusアプリケーションを、別のドメインで動作する別のアプリケーションからアクセスできるようにする場合、CORS（Cross-Origin Resource Sharing）を設定する必要があります。詳細は、 link:http-reference.html#cors-filter[HTTP CORSのドキュメント]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:261
#, no-wrap
msgid "SameSite cookies"
msgstr "SameSite クッキー"

#. type: Plain text
#: upstream/_guides/security.adoc:264
#, fuzzy
msgid "Please see xref:http-reference.adoc#same-site-cookie[SameSite cookies] for information about adding a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint."
msgstr "Quarkusのエンドポイントによって設定されるいずれかのクッキーに link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite]クッキーのプロパティを追加する方法については、 link:http-reference.html#same-site-cookie[SameSiteクッキー]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:265
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security.adoc:268
msgid "See xref:security-testing.adoc[Security Testing] for more information about testing Quarkus Security."
msgstr "Quarkus Securityのテストの詳細については、 link:security-testing[セキュリティーのテスト]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:269
#, no-wrap
msgid "Secret Engines"
msgstr "シークレットエンジン"

#. type: Title ===
#: upstream/_guides/security.adoc:270
#, no-wrap
msgid "Vault"
msgstr "Vault"

#. type: Plain text
#: upstream/_guides/security.adoc:272
msgid "Quarkus provides a very comprehensive HashiCorp Vault support, please see the link:{vault-guide}[Quarkus and HashiCorp Vault] documentation for more information."
msgstr "Quarkusは非常に包括的な HashiCorp Vault のサポートを提供しています。詳しくは link:vault[QuarkusとHashiCorp Vault] のドキュメントを参照下さい。"

#. type: Title ==
#: upstream/_guides/security.adoc:273
#, no-wrap
msgid "Secure serialization"
msgstr "セキュア・シリアライゼーション"

#. type: Plain text
#: upstream/_guides/security.adoc:276
#, fuzzy
msgid "When using Security along with RESTEasy Reactive and Jackson, Quarkus can limit the fields that are included in JSON serialization based on the configured security. See the xref:resteasy-reactive.adoc#secure-serialization[RESTEasy Reactive documentation] for details."
msgstr "RESTEasy ReactiveおよびJacksonと一緒にSecurityを使用する場合、Quarkusは設定されたSecurityに基づいてJSONシリアライゼーションに含まれるフィールドを制限することができます。詳細については、 link:resteasy-reactive.html#secure-serialization[RESTEasy Reactiveのドキュメント]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:277
#, no-wrap
msgid "National Vulnerability Database"
msgstr "National Vulnerability Database"

#. type: Plain text
#: upstream/_guides/security.adoc:282
msgid "Most of Quarkus tags have been registered in link:https://nvd.nist.gov[National Vulnerability Database] (NVD) using a Common Platform Enumeration (CPE) name format.  All registered Quarkus CPE names can be found using link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[this search query].  If a Quarkus tag represented by the given CPE name entry is affected by some CVE then you'll be able to follow a provided link to that CVE."
msgstr "ほとんどのQuarkusタグは、Common Platform Enumeration (CPE)名の形式で link:https://nvd.nist.gov[National Vulnerability Database](NVD)に登録されています。登録されているすべてのQuarkusのCPE名は、 link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&amp;keyword=quarkus[この検索クエリ]を使用して見つけることができます。指定されたCPE名のエントリで表されるQuarkusタグが何らかのCVEの影響を受けている場合、そのCVEへのリンクを辿ることができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:285
#, fuzzy
msgid "We will be asking the NVD CPE team to update the list as well as link Quarkus CPE name entries with the related CVEs on a regular basis.  If you work with the link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] which is using NVD feeds to detect the vulnerabilities at the application build time and see a false positive reported then please re-open link:https://github.com/quarkusio/quarkus/issues/2611[this issue] and provide the details."
msgstr "NVD CPEチームには、リストの更新と、Quarkus CPE名のエントリと関連するCVEとのリンクを定期的に行うよう依頼しています。 link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin]を使用していて、アプリケーションのビルド時にNVDのフィードを使用して脆弱性を検出し、誤検出が報告された場合は、 link:https://github.com/quarkusio/quarkus/issues/2611[この問題]を再度開き、詳細を提供してください。"

#. type: Plain text
#: upstream/_guides/security.adoc:287
#, fuzzy
msgid "You can add `OWASP Dependency Check Plugin` to your project's `pom.xml` like this:"
msgstr "プロジェクトの `pom.xml` に `OWASP Dependency Check Plugin` を加えると、このようになります。"

#. type: delimited block -
#: upstream/_guides/security.adoc:303
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.owasp</groupId>\n"
"    <artifactId>dependency-check-maven</artifactId>\n"
"    <version>${owasp-dependency-check-plugin.version}</version>\n"
"    <configuration>\n"
"        <!-- Fail only when detecting High Vulnerability issues -->\n"
"        <failBuildOnCVSS>7</failBuildOnCVSS>\n"
"        <suppressionFiles>\n"
"            <suppressionFile>${project.basedir}/dependency-cpe-suppression.xml</suppressionFile>\n"
"        </suppressionFiles>\n"
"    </configuration>\n"
"</plugin>\n"
"---- \n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:305
#, no-wrap
msgid "You can change `failBuildOnCVSS` value to detect less severe issues as well.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:308
#, no-wrap
msgid ""
"A suppression list may vary depending on whether you'd like to keep checking the false positives to avoid missing something or not.\n"
"For example, it can look like this:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:310
#, no-wrap
msgid "[source,xml]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security.adoc:373
#, fuzzy, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.2.xsd\">\n"
"    <!--\n"
"        This is a CPE suppression file for the maven dependency check plugin.\n"
"        Each CPE that is found by error (false positive) needs to be suppressed for a specific jar using it's GAV.\n"
"        See https://jeremylong.github.io/DependencyCheck/general/suppression.html\n"
"     -->\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for netty-tcnative-classes to netty\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.netty:netty-tcnative-classes.*:.*$</gav>\n"
"        <cpe>cpe:/a:netty:netty</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Quarkus Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.quarkus:quarkus-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:smallrye-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:vertx-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for graal-sdk to GraalVM (the JVM distribution)\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^org\\.graalvm\\.sdk:graal-sdk:.*$</gav>\n"
"        <cpe>cpe:/a:oracle:graalvm</cpe>\n"
"    </suppress>\n"
"</suppressions>\n"
msgstr "<?xml version=\"1.0\" encoding=\"UTF-8\"? > <suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.2.xsd\"> <!--これは、maven dependency check plugin用のCPE抑制ファイルです。エラー(false positive)で見つかった各CPEは、そのGAVを使って特定のjarに対して抑制する必要があります。 https://jeremylong.github.io/DependencyCheck/general/suppression.html -→ <suppress> <notes> <![CDATA[ netty-tcnative-classes の誤検出 CPE を netty に抑制する ]]> </notes> <gav regex=\"true\">^io\\.netty:netty-tcnative-classes *. :.*$</gav> <cpe>cpe:/a:netty:netty</cpe> </suppress> <suppress> <notes> <![CDATA[ Quarkus Mutinyの偽陽性CPEをmutiny:mutinyに抑制する ]]> </notes> <gav regex=\"true\">^io\\.quarkus:quarkus-mutiny *. :.*$</gav> <cpe>cpe:/a:mutiny:mutiny</cpe> </suppress> <suppress> <notes> <![CDATA[ Smallrye Mutinyの偽陽性CPEをmutiny:mutinyに抑止する ]]> </notes> <gav regex=\"true\">^io\\.smallrye.reactive:mutiny *. :.*$</gav> <cpe>cpe:/a:mutiny:mutiny</cpe> </suppress> <suppress> <notes> <![CDATA[ Smallrye Mutinyの偽陽性CPEをmutiny:mutinyに抑止する ]]> </notes> <gav regex=\"true\">^io\\.smallrye.reactive:smallrye-mutiny *. :.*$</gav> <cpe>cpe:/a:mutiny:mutiny</cpe> </suppress> <suppress> <notes> <![CDATA[ Smallrye Mutinyの偽陽性CPEをmutiny:mutinyに抑止する ]]> </notes> <gav regex=\"true\">^io\\.smallrye.reactive:vertx-mutiny *. :.*$</gav> <cpe>cpe:/a:mutiny:mutiny</cpe> </suppress> <suppress> <notes> <![CDATA[ Selpress the false positive CPE for graal-sdk to GraalVM (the JVM distribution) ]]> </notes> <gav regex=\"true\">^org\\.graalvm\\.sdk:graal-sdk:.*$</gav> <cpe>cpe:/a:oracle:graalvm</cpe> </suppress> </suppressions> です。"

#. type: delimited block -
#: upstream/_guides/security.adoc:376
#, no-wrap
msgid "Such a suppression list has to be carefully prepared and revisited from time to time. You should consider making individual suppressions time limited by adding an `until` tribute, for example: `<suppress until=\"2022-01-01Z\">...</suppress>`. It will let you doublecheck that only the same known false positives are reported when the suppression period expires, and after reviewing the report you can set a new expiry date.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:377
#, fuzzy, no-wrap
msgid "Note link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] `6.5.3` or later should be used with Quarkus.\n"
msgstr "注記 link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] `6.2.0` 以降をQuarkusと併用してください。"

#~ msgid "OpenId Connect, JWT, OAuth2"
#~ msgstr "OpenId Connect, JWT, OAuth2"
