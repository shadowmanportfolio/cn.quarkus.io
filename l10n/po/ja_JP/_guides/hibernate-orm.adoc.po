# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-11 10:12+0000\n"
"PO-Revision-Date: 2021-12-15 00:07+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/hibernate-orm.adoc:6
#, no-wrap
msgid "Using Hibernate ORM and JPA"
msgstr "Hibernate ORMとJPAの使用"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:14
msgid "Hibernate ORM is the de facto standard JPA implementation and offers you the full breadth of an Object Relational Mapper.  It works beautifully in Quarkus."
msgstr "Hibernate ORMは、デファクトスタンダートなJPA実装であり、オブジェクトリレーショナルマッパーの全幅を提供します。これはQuarkusで美しく動作します。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:15
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:19
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:21
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または {quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:23
msgid "The solution is located in the `hibernate-orm-quickstart` {quickstarts-tree-url}/hibernate-orm-quickstart[directory]."
msgstr "このソリューションは `hibernate-orm-quickstart` {quickstarts-tree-url}/hibernate-orm-quickstart[ディレクトリ]にあります。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:24
#, no-wrap
msgid "Setting up and configuring Hibernate ORM"
msgstr "Hibernate ORMのセットアップと設定"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:27
msgid "When using Hibernate ORM in Quarkus, you don't need to have a `persistence.xml` resource to configure it."
msgstr "QuarkusでHibernate ORMを使用する場合は、 設定の為に `persistence.xml` リソースは必要ありません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:30
msgid "Using such a classic configuration file is an option, but unnecessary unless you have specific advanced needs; so we'll see first how Hibernate ORM can be configured without a `persistence.xml` resource."
msgstr "このような古典的な設定ファイルを使用することは選択肢として存在しますが、特定の高度なニーズがない限り不要です。そのため、まずはHibernate ORMを `persistence.xml` リソース無しで設定できることをみていきましょう。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:32
#, fuzzy
msgid "In Quarkus, you only need to:"
msgstr "Quarkusでは、以下を実施するだけです:"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:34
msgid "add your configuration settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:35
msgid "annotate your entities with `@Entity` and any other mapping annotation as usual"
msgstr "エンティティーに `@Entity` やその他のマッピングアノテーションを通常通りにアノテーションします。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:37
msgid "Other configuration needs have been automated: Quarkus will make some opinionated choices and educated guesses."
msgstr "その他の設定の必要性は自動化されています。Quarkusは、いくつかの定見に基づいた選択と経験に基づいた推測を行います。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:39
msgid "Add the following dependencies to your project:"
msgstr "以下の依存関係をプロジェクトに追加してください:"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:41
msgid "the Hibernate ORM extension: `io.quarkus:quarkus-hibernate-orm`"
msgstr "Hibernate ORM エクステンション: `io.quarkus:quarkus-hibernate-orm`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:42
msgid "your JDBC driver extension; the following options are available:"
msgstr "JDBC ドライバーエクステンション。以下のオプションを使用できます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:43
msgid "`quarkus-jdbc-db2` for link:https://www.ibm.com/products/db2-database[IBM DB2]"
msgstr "link:https://www.ibm.com/products/db2-database[IBM DB2の] ための `quarkus-jdbc-db2`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:44
msgid "`quarkus-jdbc-derby` for link:https://db.apache.org/derby/[Apache Derby]"
msgstr "link:https://db.apache.org/derby/[アパッチダービー] のための `quarkus-jdbc-derby`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:45
msgid "`quarkus-jdbc-h2` for link:https://www.h2database.com/html/main.html[H2]"
msgstr "link:https://www.h2database.com/html/main.html[H2] のための `quarkus-jdbc-h2`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:46
msgid "`quarkus-jdbc-mariadb` for link:https://mariadb.com/[MariaDB]"
msgstr "link:https://mariadb.com/[MariaDB] のための `quarkus-jdbc-mariadb`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:47
msgid "`quarkus-jdbc-mssql` for link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server]"
msgstr "link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server] のための `quarkus-jdbc-mssql`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:48
msgid "`quarkus-jdbc-mysql` for link:https://www.mysql.com/[MySQL]"
msgstr "link:https://www.mysql.com/[MySQL] のための `quarkus-jdbc-mysql`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:49
msgid "`quarkus-jdbc-oracle` for link:https://www.oracle.com/database/[Oracle Database]"
msgstr "link:https://www.oracle.com/database/[Oracle Database] のための `quarkus-jdbc-oracle`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:50
msgid "`quarkus-jdbc-postgresql` for link:https://www.postgresql.org/[PostgreSQL]"
msgstr "link:https://www.postgresql.org/[PostgreSQL] のための `quarkus-jdbc-postgresql`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:52
msgid "For instance:"
msgstr "例えば"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:54
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:61
#, no-wrap
msgid ""
"<!-- Hibernate ORM specific dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-orm</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:67
#, no-wrap
msgid ""
"<!-- JDBC driver dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:70
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:74
#, fuzzy, no-wrap
msgid ""
"// Hibernate ORM specific dependencies\n"
"implementation(\"io.quarkus:quarkus-hibernate-orm\")\n"
msgstr "Hibernate ORM エクステンション: `io.quarkus:quarkus-hibernate-orm`"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:77
#, no-wrap
msgid ""
"// JDBC driver dependencies\n"
"implementation(\"io.quarkus:quarkus-jdbc-postgresql\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:81
msgid "Annotate your persistent objects with `@Entity`, then add the relevant configuration properties in `{config-file}`."
msgstr "persistent オブジェクトに`@Entity` アノテーションを付けてから、 `{config-file}` で関連する設定プロパティーを追加します。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:83
#, no-wrap
msgid "Example `{config-file}`"
msgstr "例 `{config-file}`"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:90
#, no-wrap
msgid ""
"# datasource configuration\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = hibernate\n"
"quarkus.datasource.password = hibernate\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/hibernate_db\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:93
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:97
#, fuzzy
msgid "Note that these configuration properties are not the same ones as in your typical Hibernate ORM configuration file.  They will often map to Hibernate ORM configuration properties but could have different names and don't necessarily map 1:1 to each other."
msgstr ""
"これらの構成プロパティは、通常のHibernate "
"ORM構成ファイルにあるものとは異なることに注意してください。多くの場合、"
"Hibernate ORM構成プロパティに対応していますが、名前が異なる場合もあり、必ずし"
"も1対1で対応しているわけではありません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:99
#, fuzzy
msgid "Also, Quarkus will set many Hibernate ORM configuration settings automatically, and will often use more modern defaults."
msgstr "また、Quarkusは多くのHibernate "
"ORMの設定を自動的に設定し、多くの場合、より現代的なデフォルト値を使用します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:101
#, fuzzy
msgid "Please see below section <<hibernate-configuration-properties, Hibernate ORM configuration properties>> for the list of properties you can set in `{config-file}`."
msgstr ""
"`{config-file}` で設定できるプロパティのリストについては、以下の「 link"
":#hibernate-configuration-properties[Hibernate ORM "
"設定プロパティ]」のセクションを参照してください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:103
#, fuzzy
msgid "An `EntityManagerFactory` will be created based on the Quarkus `datasource` configuration as long as the Hibernate ORM extension is listed among your project dependencies."
msgstr ""
"Hibernate ORM extensionがプロジェクトの依存関係の中にリストされていれば、"
"Quarkus `datasource` の設定に基づいて `EntityManagerFactory` が作成されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:105
#, fuzzy
msgid "The dialect will be selected based on the JDBC driver - unless you set one explicitly."
msgstr "方言は、明示的に設定しない限り、JDBCドライバに基づいて選択されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:107
#, fuzzy
msgid "You can then happily inject your `EntityManager`:"
msgstr "その後、 `EntityManager` を喜んで注入することができます。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:109
#, no-wrap
msgid "Example application bean using Hibernate"
msgstr "Hibernateを使用したアプリケーションBeanの例"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:115
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
"    @Inject\n"
"    EntityManager em; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:123
#, no-wrap
msgid ""
"    @Transactional <2>\n"
"    public void createGift(String giftDescription) {\n"
"        Gift gift = new Gift();\n"
"        gift.setName(giftDescription);\n"
"        em.persist(gift);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:126
msgid "Inject your entity manager and have fun"
msgstr "エンティティーマネージャーを注入して楽しむ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:127
#, fuzzy
msgid "Mark your CDI bean method as `@Transactional` and the `EntityManager` will enlist and flush at commit."
msgstr ""
"CDI Beanメソッドを `@Transactional` とマークすると、 `EntityManager` "
"がコミット時にエンリストしてフラッシュします。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:129
#, no-wrap
msgid "Example Entity"
msgstr "エンティティーの例"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:135
#, no-wrap
msgid ""
"@Entity\n"
"public class Gift {\n"
"    private Long id;\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:142
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(name = \"giftSeq\", sequenceName = \"gift_id_seq\", allocationSize = 1, initialValue = 1)\n"
"    @GeneratedValue(generator = \"giftSeq\")\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:146
#, no-wrap
msgid ""
"    public void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:150
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:155
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:160
msgid "To load SQL statements when Hibernate ORM starts, add an `import.sql` file to the root of your resources directory.  This script can contain any SQL DML statements.  Make sure to terminate each statement with a semicolon."
msgstr "Hibernate ORMの起動時にSQL文をロードするには、 `import.sql` ファイルをresourcesディレクトリーのルートに追加します。このスクリプトには、任意のSQL DML文を含めることができます。各ステートメントは必ずセミコロンで終了させてください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:162
msgid "This is useful to have a data set ready for your tests or demos."
msgstr "テストやデモ用のデータセットを用意しておくと便利です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:166
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "データベースを変更するメソッド (例: `entity.persist()` ) をトランザクション内でラップするようにしてください。CDI Beanメソッド `@Transactional` をマークすることで、それを実現出来、そのメソッドをトランザクションの境界に出来ます。REST エンドポイントコントローラーのように、アプリケーションのエントリーポイントの境界でこれを行うことをお勧めします。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:168
#, no-wrap
msgid "Hibernate ORM configuration properties"
msgstr "Hibernate ORMの設定プロパティー"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:171
#, fuzzy
msgid "There are various optional properties useful to refine your `EntityManagerFactory` or guide guesses of Quarkus."
msgstr "`EntityManagerFactory` を改良したり、Quarkusの推測を導くのに便利な様々なオプ"
"ションのプロパティがあります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:173
#, fuzzy
msgid "There are no required properties, as long as a default datasource is configured."
msgstr "デフォルトのデータソースが設定されていれば、必須のプロパティはありません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:176
#, fuzzy
msgid "When no property is set, Quarkus can typically infer everything it needs to setup Hibernate ORM and will have it use the default datasource."
msgstr ""
"プロパティが設定されていない場合、Quarkusは通常、Hibernate ORMのセットアップ"
"に必要なすべてを推測し、デフォルトのデータソースを使用するようにします。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:178
msgid "The configuration properties listed here allow you to override such defaults, and customize and tune various aspects."
msgstr "ここに記載されている設定プロパティーでは、このようなデフォルトを上書きしたり、様々な面をカスタマイズしたり調整したりすることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:186
#, fuzzy
msgid "Do not mix `persistence.xml` and `quarkus.hibernate-orm.*` properties in `{config-file}`.  Quarkus will raise an exception.  Make up your mind on which approach you want to use."
msgstr ""
"`persistence.xml` と `quarkus.hibernate-orm.*` のプロパティを `{config-file}`"
" に混在させないでください。Quarkusは例外を発生させます。どちらの方法を採用す"
"るかを決めてください。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:191
#, fuzzy
msgid "Want to start a PostgreSQL server on the side with Docker?"
msgstr "PostgreSQLサーバをDockerで起動したいですか？"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:197
#, no-wrap
msgid ""
"docker run --rm=true --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n"
"           -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n"
"           -p 5432:5432 postgres:14.1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:200
msgid "This will start a non-durable empty database: ideal for a quick experiment!"
msgstr "これは、永続化されない空のデータベースを起動します。簡単な実験に最適です!"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:203
#, no-wrap
msgid "Multiple persistence units"
msgstr "複数の永続性ユニット"

#. type: Title ====
#: upstream/_guides/hibernate-orm.adoc:205
#, no-wrap
msgid "Setting up multiple persistence units"
msgstr "複数の永続化ユニットの設定"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:208
msgid "It is possible to define multiple persistence units using the Quarkus configuration properties."
msgstr "Quarkusの設定プロパティーを使用して、複数の永続化ユニットを定義することができます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:211
#, fuzzy
msgid "The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.  For instance, the following snippet defines a default datasource and a default persistence unit:"
msgstr ""
"`quarkus.hibernate-orm.` 名前空間のルートにあるプロパティで、デフォルトの永続"
"化ユニットを定義します。例えば、次のスニペットでは、デフォルトのデータソース"
"とデフォルトの永続化ユニットを定義しています。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:216
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=h2\n"
"quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:219
#, no-wrap
msgid ""
"quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:222
#, fuzzy
msgid "Using a map based approach, it is possible to define named persistence units:"
msgstr "マップベースのアプローチでは、名前付きのパーシスタンス・ユニットを定義するこ"
"とができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:227
#, no-wrap
msgid ""
"quarkus.datasource.\"users\".db-kind=h2 <1>\n"
"quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:230
#, no-wrap
msgid ""
"quarkus.datasource.\"inventory\".db-kind=h2 <2>\n"
"quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:234
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n"
"quarkus.hibernate-orm.\"users\".datasource=users <4>\n"
"quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:238
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n"
"quarkus.hibernate-orm.\"inventory\".datasource=inventory\n"
"quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:240
msgid "Define a datasource named `users`."
msgstr "`users` という名前のデータソースを定義します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:241
msgid "Define a datasource named `inventory`."
msgstr "`inventory` という名前のデータソースを定義します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:242
msgid "Define a persistence unit called `users`."
msgstr "`users` という永続化ユニットを定義します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:243
msgid "Define the datasource used by the persistence unit."
msgstr "永続性ユニットが使用するデータソースを定義します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:244
msgid "This configuration property is important but we will discuss it a bit later."
msgstr "この設定プロパティーは重要ですが、後ほど少し説明します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:245
#, fuzzy
msgid "Define a persistence unit called `inventory` pointing to the `inventory` datasource."
msgstr "`users` という永続化ユニットを定義します。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:249
#, fuzzy
msgid "You can mix the default datasource and named datasources or only have one or the other."
msgstr "デフォルトデータソースと名前付きデータソースを混在させることも、どちらか一方"
"だけにすることもできます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:257
#, fuzzy
msgid "The default persistence unit points to the default datasource by default.  For named persistence units, the `datasource` property is mandatory.  You can point your persistence unit to the default datasource by setting it to `<default>` (which is the internal name of the default datasource)."
msgstr ""
"デフォルトのパーシスタンス・ユニットは、デフォルトでデフォルトのデータソース"
"を指します。名前付きのパーシスタンス・ユニットの場合、 `datasource` "
"プロパティは必須です。 `<default>` （デフォルトのデータソースの内部名）に設定"
"することで、パーシスタンス・ユニットをデフォルトのデータソースに向けることが"
"できます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:259
#, fuzzy
msgid "It is perfectly valid to have several persistence units pointing to the same datasource."
msgstr "複数の永続化ユニットが同じデータソースを指すことは完全に有効です。"

#. type: Title ====
#: upstream/_guides/hibernate-orm.adoc:262
#, no-wrap
msgid "Attaching model classes to persistence units"
msgstr "モデルクラスを永続化ユニットにアタッチする"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:265
msgid "There are two ways to attach model classes to persistence units, and they should not be mixed:"
msgstr "モデルクラスを永続化ユニットにアタッチする方法は2つあり、混在してはいけません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:267
msgid "Via the `packages` configuration property;"
msgstr "`packages` 設定プロパティーを使用します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:268
#, fuzzy
msgid "Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation."
msgstr "`@io.quarkus.hibernate.orm.PersistenceUnit` "
"パッケージレベルのアノテーションを介して。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:270
#, fuzzy
msgid "If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account."
msgstr "両方が混在している場合は、アノテーションは無視され、 `packages` "
"の設定プロパティのみが考慮されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:272
#, fuzzy
msgid "Using the `packages` configuration property is simple:"
msgstr "`packages` 設定プロパティーを使用します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:277
#, no-wrap
msgid ""
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
"quarkus.hibernate-orm.packages=org.acme.model.defaultpu\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:281
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"users\".database.generation=drop-and-create\n"
"quarkus.hibernate-orm.\"users\".datasource=users\n"
"quarkus.hibernate-orm.\"users\".packages=org.acme.model.user\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:284
msgid "This configuration snippet will create two persistence units:"
msgstr "この設定スニペットは、2つの永続化ユニットを作成します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:286
#, fuzzy
msgid "The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included."
msgstr "デフォルトでは、 `org.acme.model.defaultpu` "
"パッケージのすべてのモデルクラスが含まれ、サブパッケージも含まれます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:287
#, fuzzy
msgid "A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included."
msgstr ""
"`users` という名前の永続化ユニットで、 `org.acme.model.user` "
"パッケージのすべてのモデル・クラスを含み、サブパッケージも含まれています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:289
#, fuzzy
msgid "You can attach several packages to a persistence unit:"
msgstr "モデルクラスを永続化ユニットにアタッチする"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:293
#, no-wrap
msgid "quarkus.hibernate-orm.\"users\".packages=org.acme.model.shared,org.acme.model.user\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:296
#, fuzzy
msgid "All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit."
msgstr ""
"`org.acme.model.shared` と `org.acme.model.user` "
"パッケージの下にあるすべてのモデル・クラスは、 `users` "
"永続化ユニットにアタッチされます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:298
#, fuzzy
msgid "It is also supported to attach a given model class to several persistence units."
msgstr "モデルクラスを永続化ユニットにアタッチする"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:304
#, fuzzy
msgid "Model classes need to be consistently added to a given persistence unit.  That meant that all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.  As we are dealing with the persistence unit at the package level, it should be simple enough."
msgstr ""
"モデル・クラスは、与えられた永続性ユニットに一貫して追加される必要があります"
"。つまり、与えられたエンティティのすべての依存するモデル・クラス（マッピング"
"されたスーパー・クラス、埋め込み可能なもの...）は、永続性ユニットに追加される"
"必要があります。パッケージ・レベルで永続化ユニットを扱っているので、簡単なこ"
"とでしょう。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:309
msgid "Panache entities can be attached to only one persistence unit."
msgstr "Panacheエンティティーは、1つの永続化ユニットにのみアタッチできます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:312
#, fuzzy
msgid "For entities attached to several persistence units, you cannot use Panache.  You can mix the two approaches though and mix Panache entities and traditional entities where multiple persistence units are required."
msgstr ""
"複数の永続性ユニットに接続されたエンティティには、Panacheを使用することはでき"
"ません。しかし、この2つのアプローチを混在させることは可能で、Panacheエンティ"
"ティと、複数の永続性ユニットが必要な従来のエンティティを混在させることができ"
"ます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:315
#, fuzzy
msgid "If you have a use case for that and clever ideas about how to implement it without cluttering the simplified Panache approach, contact us on the link:{quarkus-mailing-list-index}[quarkus-dev mailing list]."
msgstr ""
"もし、そのようなユースケースがあり、シンプルなPanacheのアプローチを乱すことな"
"く実装する方法について賢いアイデアがあれば、 link:{quarkus-mailing-list-index"
"}[quarkus-dev]メーリングリストまでご連絡ください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:319
#, fuzzy
msgid "The second approach to attach model classes to a persistence unit is to use package-level `@io.quarkus.hibernate.orm.PersistenceUnit` annotations.  Again, the two approaches cannot be mixed."
msgstr ""
"モデル・クラスを永続性ユニットにアタッチする2つ目の方法は、パッケージ・"
"レベルの `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用する"
"ことです。繰り返しになりますが、この2つのアプローチを混在させることはできませ"
"ん。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:321
#, fuzzy
msgid "To obtain a configuration similar to the one above with the `packages` configuration property, create a `package-info.java` file with the following content:"
msgstr ""
"上記のような構成を `packages` の構成プロパティで取得するには、以下の内容の "
"`package-info.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:326
#, no-wrap
msgid ""
"@PersistenceUnit(\"users\") <1>\n"
"package org.acme.model.user;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:328
#, no-wrap
msgid "import io.quarkus.hibernate.orm.PersistenceUnit;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:330
#, fuzzy
msgid "Be careful, use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the JPA one."
msgstr ""
"JPAのアノテーションではなく、 `@io.quarkus.hibernate.orm.PersistenceUnit` "
"のアノテーションを使うように注意してください。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:335
#, fuzzy
msgid "We only support defining the `@PersistenceUnit` for model classes at the package level, using the `@PersistenceUnit` annotation at the class level is not supported in this case."
msgstr ""
"モデルクラスの `@PersistenceUnit` "
"をパッケージレベルで定義することのみサポートしています。この場合、"
"クラスレベルで `@PersistenceUnit` "
"アノテーションを使用することはサポートされていません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:338
#, fuzzy
msgid "Note that, similarly to what we do with the configuration property, we take into account the annotated package but also all its subpackages."
msgstr "なお、構成プロパティの場合と同様に、アノテーションされたパッケージだけでなく"
"、そのサブパッケージもすべて考慮に入れています。"

#. type: Title ====
#: upstream/_guides/hibernate-orm.adoc:339
#, no-wrap
msgid "CDI integration"
msgstr "CDI統合"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:342
#, fuzzy
msgid "If you are familiar with using Hibernate ORM in Quarkus, you probably already have injected the `EntityManager` using CDI:"
msgstr ""
"QuarkusでHibernate ORMを使用することに慣れている方は、CDIを使用して "
"`EntityManager` を注入したことがあると思います。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:347
#, no-wrap
msgid ""
"@Inject\n"
"EntityManager entityManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:350
msgid "This will inject the `EntityManager` of the default persistence unit."
msgstr "これは、デフォルトの永続化ユニットの `EntityManager` を注入します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:352
#, fuzzy
msgid "Injecting the `EntityManager` of a named persistence unit (`users` in our example) is as simple as:"
msgstr ""
"名前の付いた persistence unit ( この例では `users` ) の `EntityManager` "
"をインジェクトするのは簡単です。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:358
#, no-wrap
msgid ""
"@Inject\n"
"@PersistenceUnit(\"users\") <1>\n"
"EntityManager entityManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:360
#, fuzzy
msgid "Here again, we use the same `@io.quarkus.hibernate.orm.PersistenceUnit` annotation."
msgstr "ここでも、同じ `@io.quarkus.hibernate.orm.PersistenceUnit` "
"のアノテーションを使用しています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:362
#, fuzzy
msgid "You can inject the `EntityManagerFactory` of a named persistence unit using the exact same mechanism:"
msgstr "これは、デフォルトの永続化ユニットの `EntityManager` を注入します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:368
#, no-wrap
msgid ""
"@Inject\n"
"@PersistenceUnit(\"users\")\n"
"EntityManagerFactory entityManagerFactory;\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:371
#, fuzzy, no-wrap
msgid "Setting up and configuring Hibernate ORM with a `persistence.xml`"
msgstr "Hibernate ORMのセットアップと設定"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:375
#, fuzzy
msgid "Alternatively, you can use a `META-INF/persistence.xml` to set up Hibernate ORM.  This is useful for:"
msgstr ""
"また、 `META-INF/persistence.xml` を使用して、Hibernate ORM "
"を設定することもできます。これは次のような場合に便利です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:377
msgid "migrating existing code"
msgstr "既存コードの移行"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:378
#, fuzzy
msgid "when you have relatively complex settings requiring the full flexibility of the configuration"
msgstr "比較的複雑な設定をしていて、コンフィギュレーションの柔軟性が必要な場合には"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:379
#, fuzzy
msgid "or if you like it the good old way"
msgstr "または、昔ながらの方法がお好きなら"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:384
#, fuzzy
msgid "If you have a `persistence.xml`, then you cannot use the `quarkus.hibernate-orm.*` properties and only persistence units defined in `persistence.xml` will be taken into account."
msgstr ""
"`persistence.xml` がある場合は、 `quarkus.hibernate-orm.*` "
"のプロパティは使用できず、 `persistence.xml` で定義された persistence unit "
"のみが考慮されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:388
#, fuzzy
msgid "Your `pom.xml` dependencies as well as your Java code would be identical to the precedent example. The only difference is that you would specify your Hibernate ORM configuration in `META-INF/persistence.xml`:"
msgstr ""
"`pom.xml` の依存関係と Java コードは、先の例と同じになります。唯一の違いは、 "
"`META-INF/persistence.xml` で Hibernate ORM の構成を指定することです。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:390
#, fuzzy, no-wrap
msgid "Example persistence.xml resource"
msgstr "persistence.xmlリソースの例"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:397
#, no-wrap
msgid ""
"<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n"
"             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"             xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n"
"             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\n"
"             version=\"2.1\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:399
#, no-wrap
msgid "    <persistence-unit name=\"CustomerPU\" transaction-type=\"JTA\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:401
#, no-wrap
msgid "        <description>My customer entities</description>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:405
#, no-wrap
msgid ""
"        <properties>\n"
"            <!-- Connection specific -->\n"
"            <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQL95Dialect\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:408
#, no-wrap
msgid ""
"            <property name=\"hibernate.show_sql\" value=\"true\"/>\n"
"            <property name=\"hibernate.format_sql\" value=\"true\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:414
#, no-wrap
msgid ""
"            <!--\n"
"                Optimistically create the tables;\n"
"                will cause background errors being logged if they already exist,\n"
"                but is practical to retain existing data across runs (or create as needed) -->\n"
"            <property name=\"javax.persistence.schema-generation.database.action\" value=\"drop-and-create\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:417
#, no-wrap
msgid ""
"            <property name=\"javax.persistence.validation.mode\" value=\"NONE\"/>\n"
"        </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:420
#, no-wrap
msgid ""
"    </persistence-unit>\n"
"</persistence>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:424
#, fuzzy
msgid "When using the `persistence.xml` configuration you are configuring Hibernate ORM directly, so in this case the appropriate reference is the link:{orm-doc-url-prefix}#configurations[documentation on hibernate.org]."
msgstr ""
"`persistence.xml` 構成を使用する場合は、Hibernate ORM "
"を直接構成することになるので、この場合は link:{orm-doc-url-"
"prefix}#configurations[hibernate.org のドキュメント]を参照するのが適切です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:427
#, fuzzy
msgid "Please remember these are not the same property names as the ones used in the Quarkus `{config-file}`, nor will the same defaults be applied."
msgstr ""
"これらは、Quarkus `{config-file}` で使用されているものと同じプロパティ名では"
"なく、同じデフォルトが適用されるわけではありませんのでご注意ください。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:429
#, no-wrap
msgid "XML mapping"
msgstr "XMLマッピング"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:435
#, fuzzy
msgid "Hibernate ORM in Quarkus supports XML mapping.  You can add mapping files following the https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` format (JPA)] or the http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` format (specific to Hibernate ORM, deprecated)]:"
msgstr ""
"QuarkusのHibernate ORMは、XMLマッピングをサポートしています。 "
"link:https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-"
"spec-3.0.html#a16944[`orm.xml`]形式（JPA）または link:http://hibernate.org/"
"dtd/hibernate-mapping-3.0.dtd[`hbm.xml`] 形式（Hibernate "
"ORMに特有、非推奨）に従ったマッピングファイルを追加できます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:437
#, fuzzy
msgid "in `application.properties` through the (build-time) link:#quarkus-hibernate-orm_quarkus.hibernate-orm.mapping-files[`quarkus.hibernate-orm.mapping-files`] property."
msgstr ""
"で、 `application.properties` （ビルドタイム）を通じて  link:#quarkus-"
"hibernate-orm_quarkus.hibernate-orm.mapping-files[`quarkus.hibernate-orm."
"mapping-files`]プロパティを使用しています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:438
#, fuzzy
msgid "in <<persistence-xml,`persistence.xml`>> through the `<mapping-file>` element."
msgstr ""
"で  link:#persistence-xml[`persistence.xml`]を `<mapping-file>` "
"の要素を介して行っています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:440
#, fuzzy
msgid "XML mapping files are parsed at build time."
msgstr "XMLマッピングファイルは、ビルド時に解析されます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:444
#, fuzzy
msgid "The file `META-INF/orm.xml` will always be included by default, if it exists in the classpath."
msgstr "ファイル `META-INF/orm.xml` "
"がクラスパスに存在する場合は、常にデフォルトでインクルードされます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:446
#, fuzzy
msgid "If that is not what you want, use `quarkus.hibernate-orm.mapping-files = no-file` or `<mapping-file>no-file</mapping-file>`."
msgstr ""
"そうでない場合は、 `quarkus.hibernate-orm.mapping-files = no-file` または "
"`<mapping-file>no-file</mapping-file>` を使用してください。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:448
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:452
msgid "Hibernate ORM in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the same project where you build your Quarkus application, everything will work fine."
msgstr "QuarkusのHibernate ORMは、エンティティーに対するコンパイル時のバイトコード強化に依存しています。Quarkusアプリケーションを構築するのと同じプロジェクトでエンティティーを定義すれば、すべてがうまく動作します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:455
msgid "If the entities come from external projects or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr "エンティティーが外部のプロジェクトやジャーから来ている場合は、空の `META-INF/beans.xml` ファイルを追加することで、jarがQuarkusアプリケーションライブラリのように扱われるようにすることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:457
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr "これにより、Quarkusは、エンティティーが現在のプロジェクトの内部にあるかのようにインデックスを作成し、強化することができます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:459
#, no-wrap
msgid "Hibernate ORM in development mode"
msgstr "開発モードでのHibernate ORM"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:462
#, fuzzy
msgid "Quarkus development mode is really useful for applications that mix front end or services and database access."
msgstr "Quarkusの開発モードは、フロントエンドやサービスとデータベースアクセスが混在す"
"るアプリケーションにとても有効です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:464
#, fuzzy
msgid "There are a few common approaches to make the best of it."
msgstr "それを生かすためには、いくつかの共通したアプローチがあります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:466
#, fuzzy
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`."
msgstr ""
"第一の選択肢は、 `quarkus.hibernate-orm.database.generation=drop-and-create` "
"と `import.sql` を併用することです。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:471
#, fuzzy
msgid "That way for every change to your app and in particular to your entities, the database schema will be properly recreated and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.  This is best to perfectly control your environment and works magic with Quarkus live reload mode: your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr ""
"そうすることで、アプリケーション、特にエンティティに変更があるたびに、データ"
"ベーススキーマが適切に再作成され、データフィクスチャ（ `import.sql` に保存）"
"が使用されて、ゼロから再入力されます。これは、環境を完全にコントロールするた"
"めの最良の方法であり、Quarkusのライブリロードモードでは魔法のように機能します"
"。エンティティの変更や、 `import.sql` へのあらゆる変更が即座にピックアップさ"
"れ、アプリケーションを再起動することなくスキーマが更新されます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:476
#, fuzzy
msgid "By default in `dev` and `test` modes, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).  You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr ""
"`dev` および `test` モードのデフォルトでは、Hibernate ORM は起動時に `/import"
".sql` ファイル内の SQL 文を読み込んで実行します（存在する場合）。 "
"`application.properties` のプロパティ `quarkus.hibernate-orm.sql-load-script`"
" を変更することで、ファイル名を変更することができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:486
#, fuzzy
msgid "The second approach is to use `quarkus.hibernate-orm.database.generation=update`.  This approach is best when you do many entity changes but still need to work on a copy of the production data or if you want to reproduce a bug that is based on specific database entries.  `update` is a best effort from Hibernate ORM and will fail in specific situations including altering your database structure which could lead to data loss.  For example if you change structures which violate a foreign key constraint, Hibernate ORM might have to bail out.  But for development, these limitations are acceptable."
msgstr ""
"2つ目のアプローチは、 `quarkus.hibernate-orm.database.generation=update` "
"を使用することです。 `update` は、Hibernate ORM の最善の努力であり、データ損"
"失につながるデータベース構造の変更など、特定の状況では失敗します。例えば、外"
"部キー制約に違反する構造を変更した場合、Hibernate ORMは救済しなければならない"
"かもしれません。しかし、開発のためには、これらの制限は許容されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:490
#, fuzzy
msgid "The third approach is to use `quarkus.hibernate-orm.database.generation=none`.  This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.  Or if you use a database schema migration tool like xref:flyway.adoc[Flyway] or xref:liquibase.adoc[Liquibase]."
msgstr ""
"3つ目のアプローチは、 `quarkus.hibernate-orm.database.generation=none` を使用"
"することです。この方法は、本番データのコピーで作業しているが、スキーマの進化"
"を完全にコントロールしたい場合に最適です。あるいは、 link:flyway.html[Flyway]"
"や link:liquibase."
"html[Liquibase]のようなデータベーススキーマ移行ツールを使用している場合です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:493
#, fuzzy
msgid "With this approach when making changes to an entity, make sure to adapt the database schema accordingly; you could also use `validate` to have Hibernate verify the schema matches its expectations."
msgstr "また、 `validate` を使用して、Hibernate "
"にスキーマが期待どおりかどうかを確認させることもできます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:495
#, fuzzy
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment."
msgstr ""
"本番環境では、 `quarkus.hibernate-orm.database.generation` `drop-and-create` "
"と `update` を使用しないでください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:501
#, fuzzy
msgid "These approaches become really powerful when combined with Quarkus configuration profiles.  You can define different xref:config.adoc#configuration-profiles[configuration profiles] to select different behaviors depending on your environment.  This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr ""
"これらのアプローチは、Quarkusの設定プロファイルと組み合わせることで非常に強力"
"になります。異なる link:config.html#configuration-profiles[構成プロファイル]"
"を定義して、環境に応じて異なる動作を選択することができます。これは、現在必要"
"としている開発スタイルに合わせて、Hibernate "
"ORMのプロパティの異なる組み合わせを定義できるという点で素晴らしいことです。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:503
#: upstream/_guides/hibernate-orm.adoc:538
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:507
#, no-wrap
msgid ""
"%dev.quarkus.hibernate-orm.database.generation = drop-and-create\n"
"%dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:510
#, no-wrap
msgid ""
"%dev-with-data.quarkus.hibernate-orm.database.generation = update\n"
"%dev-with-data.quarkus.hibernate-orm.sql-load-script = no-file\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:513
#: upstream/_guides/hibernate-orm.adoc:542
#, no-wrap
msgid ""
"%prod.quarkus.hibernate-orm.database.generation = none\n"
"%prod.quarkus.hibernate-orm.sql-load-script = no-file\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:516
#, fuzzy
msgid "You can start dev mode using a custom profile:"
msgstr "カスタムプロファイルを使用して開発モードを開始することができます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:521
#, no-wrap
msgid "Hibernate ORM in production mode"
msgstr "本番モードでのHibernate ORM"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:525
msgid "Quarkus comes with default profiles (`dev`, `test` and `prod`).  And you can add your own custom profiles to describe various environments (`staging`, `prod-us`, etc)."
msgstr "Quarkusにはデフォルトのプロファイルが付属しています ( `dev` , `test` と `prod` )。また、様々な環境を記述するために独自のカスタムプロファイルを追加することができます ( `staging` , `prod-us` , など )。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:527
msgid "The Hibernate ORM Quarkus extension sets some default configurations differently in dev and test modes than in other environments."
msgstr "Hibernate ORM Quarkusエクステンションでは、いくつかのデフォルト設定が、開発モードとテストモードで他の環境とは異なるように設定されています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:529
msgid "`quarkus.hibernate-orm.sql-load-script` is set to `no-file` for all profiles except the `dev` and `test` ones."
msgstr "`dev` と `test` 以外のプロフィールは `quarkus.hibernate-orm.sql-load-script` が `no-file` に設定されています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:533
msgid "You can override it in your `application.properties` explicitly (e.g. `%prod.quarkus.hibernate-orm.sql-load-script = import.sql`)  but we wanted you to avoid overriding your database by accident in prod :)"
msgstr "ユーザーが `application.properties` で明示的にオーバーライドすることもできますが (例: `%prod.quarkus.hibernate-orm.sql-load-script = import.sql` )、prod で誤ってデータベースをオーバーライドしないようにしたいと思いました :)"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:536
msgid "Speaking of, make sure to not drop your database schema in production! Add the following in your properties file."
msgstr "そういえば、本番ではデータベーススキーマを落とさないようにしましょう!プロパティーファイルに以下を追加します。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:545
#, fuzzy, no-wrap
msgid "Automatically transitioning to Flyway to Manage Schemas"
msgstr "スキーマを管理するためのFlywayへの自動移行"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:551
#, fuzzy
msgid "If you have the xref:flyway.adoc[Flyway extension] installed when running in development mode, Quarkus provides a simple way to turn your Hibernate ORM auto generated schema into a Flyway migration file. This is intended to make is easy to move from the early development phase, where Hibernate can be used to quickly setup the schema, to the production phase, where Flyway is used to manage schema changes."
msgstr ""
"開発モードで実行しているときに link:flyway."
"html[Flywayエクステンション]がインストールされている場合、QuarkusはHibernate "
"ORMで自動生成されたスキーマをFlyway移行ファイルに変換する簡単な方法を提供しま"
"す。これは、Hibernateを使用してスキーマを迅速にセットアップする開発初期段階か"
"ら、Flywayを使用してスキーマの変更を管理する本番段階への移行を容易にすること"
"を目的としています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:554
#, fuzzy
msgid "To use this feature simply open the Dev UI when the `quarkus-flyway` extension is installed and click in the `Datasources` link in the Flyway pane. Hit the `Create Initial Migration` button and the following will happen:"
msgstr ""
"この機能を使用するには、 `quarkus-flyway` "
"エクステンションがインストールされている状態で Dev UI を開き、Flyway "
"ペインの `Datasources` リンクをクリックします。 `Create Initial Migration` "
"ボタンを押すと、以下のようになります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:556
#, fuzzy
msgid "A `db/migration/V1.0.0__\\{appname\\}.sql` file will be created, containing the SQL Hibernate is running to generate the schema"
msgstr ""
"スキーマを生成するためにHibernateが実行するSQLを含んだ `db/migration/V1.0."
"0__{appname}.sql` ファイルが作成されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:557
#, fuzzy
msgid "`quarkus.flyway.baseline-on-migrate` will be set, telling Flyway to automatically create its baseline tables"
msgstr ""
"`quarkus.flyway.baseline-on-migrate` "
"が設定され、Flywayがベースラインテーブルを自動的に作成するようになります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:558
#, fuzzy
msgid "`quarkus.flyway.migrate-at-start` will be set, telling Flyway to automatically apply migrations on application startup"
msgstr ""
"`quarkus.flyway.migrate-at-start` が設定され、アプリケーションの起動時にFlywa"
"yが自動的にマイグレーションを適用するようになります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:559
#, fuzzy
msgid "`%dev.quarkus.flyway.clean-at-start` and ``%test.quarkus.flyway.clean-at-start` will be set, to clean the DB after reload in dev/test mode"
msgstr ""
"`%dev.quarkus.flyway.clean-at-start` と ``%test.quarkus.flyway.clean-at-"
"start` が設定されます。これは、dev/test モードでリロードした後、DB "
"をクリーンにするためです。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:562
#, fuzzy
msgid "This button is simply a convenience to quickly get you started with Flyway, it is up to you to determine how you want to manage your database schemas in production. In particular the `migrate-at-start` setting may not be right for all environments."
msgstr ""
"このボタンは、Flywayを素早く使い始めるための単なる便宜的なものであり、本番環"
"境でデータベーススキーマをどのように管理するかはお客様の判断に委ねられます。"
"特に、 `migrate-at-start` の設定は、すべての環境に適しているとは限りません。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:564
#, no-wrap
msgid "Caching"
msgstr "キャッシング"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:567
#, fuzzy
msgid "Applications that frequently read the same entities can see their performance improved when the Hibernate ORM second-level cache is enabled."
msgstr ""
"同じエンティティを頻繁に読み込むアプリケーションでは、Hibernate "
"ORMのセカンドレベルキャッシュを有効にすると、パフォーマンスが向上します。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:568
#, no-wrap
msgid "Caching of entities"
msgstr "エンティティーのキャッシュ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:571
msgid "To enable second-level cache, mark the entities that you want cached with `@javax.persistence.Cacheable`:"
msgstr "第 2 レベルのキャッシュを有効にするには、キャッシュしたいエンティティーを `@javax.persistence.Cacheable` でマークします。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:580
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Country {\n"
"    int dialInCode;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:583
msgid "When an entity is annotated with `@Cacheable`, all its field values are cached except for collections and relations to other entities."
msgstr "エンティティーが `@Cacheable` でアノテーションされているときは、コレクションと他のエンティティーとの関係を除いて、そのすべてのフィールド値がキャッシュされます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:585
#, fuzzy
msgid "This means the entity can be loaded without querying the database, but be careful as it implies the loaded entity might not reflect recent changes in the database."
msgstr ""
"これは、データベースに問い合わせることなくエンティティをロードできることを意"
"味しますが、ロードされたエンティティがデータベースの最近の変更を反映していな"
"い可能性があることを意味するので注意が必要です。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:586
#, no-wrap
msgid "Caching of collections and relations"
msgstr "コレクションとリレーションのキャッシング"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:589
#, fuzzy
msgid "Collections and relations need to be individually annotated to be cached; in this case the Hibernate specific `@org.hibernate.annotations.Cache` should be used, which requires also to specify the `CacheConcurrencyStrategy`:"
msgstr ""
"コレクションとリレーションは、キャッシュするために個別にアノテーションする必"
"要があります。この場合、Hibernate固有の `@org.hibernate.annotations.Cache` "
"を使用する必要があり、そのためには `CacheConcurrencyStrategy` "
"を指定する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:593
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:598
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Country {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:602
#, no-wrap
msgid ""
"    @OneToMany\n"
"    @Cache(usage = CacheConcurrencyStrategy.READ_ONLY)\n"
"    List<City> cities;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:605
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:607
#, no-wrap
msgid "Caching of queries"
msgstr "クエリのキャッシュ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:610
msgid "Queries can also benefit from second-level caching. Cached query results can be returned immediately to the caller, avoiding to run the query on the database."
msgstr "クエリは、第二レベルのキャッシュの恩恵を受けることもできます。キャッシュされたクエリの結果は即座に呼び出し元に返すことができるので、データベース上でクエリを実行する必要がありません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:612
msgid "Be careful as this implies the results might not reflect recent changes."
msgstr "最近の変化を反映していない可能性があることを含意しているので注意が必要です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:614
msgid "To cache a query, mark it as cacheable on the `Query` instance:"
msgstr "クエリをキャッシュするには、 `Query` インスタンス上でキャッシュ可能なものとしてマークします。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:619
#, no-wrap
msgid ""
"Query query = ...\n"
"query.setHint(\"org.hibernate.cacheable\", Boolean.TRUE);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:622
#, fuzzy
msgid "If you have a `NamedQuery` then you can enable caching directly on its definition, which will usually be on an entity:"
msgstr "`NamedQuery` があれば、その定義で直接キャッシュを有効にすることができます。こ"
"れは通常、エンティティ上で行われます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:631
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQuery(name = \"Fruits.findAll\",\n"
"      query = \"SELECT f FROM Fruit f ORDER BY f.name\",\n"
"      hints = @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\") )\n"
"public class Fruit {\n"
"   ...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:634
#, fuzzy
msgid "That's all! Caching technology is already integrated and enabled by default in Quarkus, so it's enough to set which ones are safe to be cached."
msgstr ""
"以上です。キャッシュ技術はすでにQuarkusに統合されており、デフォルトで有効にな"
"っていますので、キャッシュしても問題ないものを設定するだけで十分です。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:635
#, no-wrap
msgid "Tuning of Cache Regions"
msgstr "キャッシュ領域の調整"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:638
#, fuzzy
msgid "Caches store the data in separate regions to isolate different portions of data; such regions are assigned a name, which is useful for configuring each region independently, or to monitor their statistics."
msgstr ""
"キャッシュは、データの異なる部分を分離するために、別々の領域にデータを保存し"
"ます。このような領域には名前が付けられ、各領域を独立して設定したり、統計を監"
"視するのに役立ちます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:640
#, fuzzy
msgid "By default entities are cached in regions named after their fully qualified name, e.g. `org.acme.Country`."
msgstr "デフォルトでは、エンティティは、その完全修飾名を冠したリージョンにキャッシュ"
"されます。例えば、 `org.acme.Country`."

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:642
#, fuzzy
msgid "Collections are cached in regions named after the fully qualified name of their owner entity and collection field name, separated by `#` character, e.g. `org.acme.Country#cities`."
msgstr ""
"`org.acme.Country#cities`コレクションは、"
"オーナーエンティティの完全修飾名とコレクションのフィールド名を `#` "
"文字で区切った名前のリージョンにキャッシュされます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:644
#, fuzzy
msgid "All cached queries are by default kept in a single region dedicated to them called `default-query-results-region`."
msgstr ""
"すべてのキャッシュされたクエリは、デフォルトでは、 `default-query-results-"
"region` と呼ばれる専用の単一領域に保存されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:646
#, fuzzy
msgid "All regions are bounded by size and time by default. The defaults are `10000` max entries, and `100` seconds as maximum idle time."
msgstr ""
"すべてのリージョンは、デフォルトではサイズと時間に制限されています。デフォル"
"トでは、 `10000` 最大エントリ数、 `100` 最大アイドル時間が設定されています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:648
#, fuzzy
msgid "The size of each region can be customized via the `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` property (Replace _<region_name>_ with the actual region name)."
msgstr ""
"各リージョンのサイズは、 `quarkus.hibernate-orm.cache.\"<region_name>\"."
"memory.object-count` プロパティでカスタマイズできます（ "
"_<region_name>_を実際のリージョン名に置き換えてください）。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:650
#, fuzzy
msgid "To set the maximum idle time, provide the duration (see note on duration's format below) via the `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` property (Replace _<region_name>_ with the actual region name)."
msgstr ""
"最大アイドル時間を設定するには、 `quarkus.hibernate-orm.cache.\"<region_name>"
"\".expiration.max-idle` プロパティ _（<region_name>_を実際のリージョン名に置"
"き換えてください）でデュレーション（下記のデュレーションのフォーマットに関す"
"る注意を参照）を指定します。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:654
#, fuzzy
msgid "The double quotes are mandatory if your region name contains a dot. For instance:"
msgstr "リージョン名にドットが含まれている場合は、二重引用符が必須です。例えば、以下"
"のようになります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:658
#, no-wrap
msgid "quarkus.hibernate-orm.cache.\"org.acme.MyEntity\".memory.object-count=1000\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:664
#, no-wrap
msgid "Limitations of Caching"
msgstr "キャッシングの制限"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:667
msgid "The caching technology provided within Quarkus is currently quite rudimentary and limited."
msgstr "Quarkusで提供されているキャッシング技術は、現在のところ非常に初歩的で限られています。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:669
#, fuzzy
msgid "The team thought it was better to have _some_ caching capability to start with, than having nothing; you can expect better caching solution to be integrated in future releases, and any help and feedback in this area is very welcome."
msgstr ""
"チームは、何もないよりは、最初から _ある程度の_キャッシング機能があった方が良"
"いと考えました。将来のリリースでは、より良いキャッシングソリューションが統合"
"されることを期待しています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:673
#, fuzzy
msgid "These caches are kept locally, so they are not invalidated or updated when changes are made to the persistent store by other applications."
msgstr ""
"これらのキャッシュはローカルに保持されているため、他のアプリケーションによっ"
"て永続的ストアに変更が加えられても、無効化されたり更新されたりすることはあり"
"ません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:675
#, fuzzy
msgid "Also, when running multiple copies of the same application (in a cluster, for example on Kubernetes/OpenShift), caches in separate copies of the application aren't synchronized."
msgstr ""
"また、同じアプリケーションの複数のコピーを（Kubernetes/OpenShiftなどのクラス"
"タで）実行している場合、アプリケーションの別々のコピーのキャッシュは同期され"
"ません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:677
#, fuzzy
msgid "For these reasons, enabling caching is only suitable when certain assumptions can be made: we strongly recommend that only entities, collections and queries which never change are cached. Or at most, that when indeed such an entity is mutated and allowed to be read out of date (stale) this has no impact on the expectations of the application."
msgstr ""
"これらの理由から、キャッシュを有効にすることは、ある種の仮定が成り立つ場合に"
"のみ適しています。私たちは、変化しないエンティティ、コレクション、およびクエ"
"リのみをキャッシュすることを強く推奨します。あるいは、そのようなエンティティ"
"が実際に変更され、古くなった（stale）ものを読み取ることができても、アプリケー"
"ションの期待値に影響を与えないようにする必要があります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:679
#, fuzzy
msgid "Following this advice guarantees applications get the best performance out of the second-level cache and yet avoid unexpected behaviour."
msgstr "このアドバイスに従うことで、アプリケーションが第2レベルキャッシュから最高のパ"
"フォーマンスを引き出し、かつ予期せぬ動作を避けることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:684
#, fuzzy, no-wrap
msgid ""
"On top of immutable data, in certain contexts it might be acceptable to enable caching also on mutable data; this could be a necessary tradeoff on selected\n"
" entities which are read frequently and for which some degree of staleness is acceptable; this \" acceptable degree of staleness\" can be tuned by setting eviction properties.\n"
" This is however not recommended and should be done with extreme care, as it might\n"
" produce unexpected and unforeseen effects on the data.\n"
msgstr ""
"これは、頻繁に読み込まれ、ある程度の陳腐化が許容される特定のエンティティでは"
"、必要なトレードオフとなる可能性があります。この「許容される陳腐化の度合い」"
"は、イビエーション・プロパティを設定することで調整できます。この「許容できる"
"陳腐化の度合い」は、evictionプロパティを設定することで調整できます。しかし、"
"これは推奨されておらず、データに予期せぬ影響を与える可能性があるため、細心の"
"注意を払って行う必要があります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:686
#, fuzzy
msgid "Rather than enabling caching on mutable data, ideally a better solution would be to use a clustered cache; however at this time Quarkus doesn't provide any such implementation: feel free to get in touch and let this need known so that the team can take this into account."
msgstr "ミュータブルデータのキャッシュを有効にするのではなく、理想的にはクラスター化"
"されたキャッシュを使用するのがより良いソリューションです。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:689
#, fuzzy
msgid "Finally, the second-level cache can be disabled globally by setting `hibernate.cache.use_second_level_cache` to `false`; this is a setting that needs to be specified in the `persistence.xml` configuration file."
msgstr ""
"最後に、 `hibernate.cache.use_second_level_cache` を `false` に設定することで"
"、第2レベルのキャッシュをグローバルに無効にすることができます。この設定は、 "
"`persistence.xml` の設定ファイルで指定する必要があります。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:691
#, fuzzy
msgid "When second-level cache is disabled, all cache annotations are ignored and all queries are run ignoring caches; this is generally useful only to diagnose issues."
msgstr ""
"2 階層目のキャッシュを無効にすると、すべてのキャッシュアノテーションは無視さ"
"れ、すべてのクエリはキャッシュを無視して実行されます。これは通常、問題を診断"
"する場合にのみ有効です。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:693
#, no-wrap
msgid "Hibernate Envers"
msgstr "Hibernate Envers"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:695
msgid "The Envers extension to Hibernate ORM aims to provide an easy auditing / versioning solution for entity classes."
msgstr "Hibernate ORMのEnversエクステンションは、エンティティークラスのための簡単な監査/バージョン管理ソリューションを提供することを目的としています。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:697
msgid "In Quarkus, Envers has a dedicated Quarkus Extension `io.quarkus:quarkus-hibernate-envers`; you just need to add this to your project to start using it."
msgstr "Quarkusでは、Enversには専用のQuarkus Extensionがあります。 `io.quarkus:quarkus-hibernate-envers` ; これをプロジェクトに追加して使用を開始する必要があります。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:699
#, no-wrap
msgid "Additional dependency to enable Hibernate Envers"
msgstr "Hibernate Enversを有効にするための追加の依存関係"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:706
#, no-wrap
msgid ""
"    <!-- Add the Hibernate Envers extension -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-envers</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:709
#, fuzzy
msgid "At this point the extension does not expose additional configuration properties."
msgstr "Quarkusの設定プロパティーを使用して、複数の永続化ユニットを定義することができ"
"ます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:711
#, fuzzy
msgid "For more information about Hibernate Envers, see link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]."
msgstr ""
"Hibernate Enversの詳細については、 link:https://hibernate.org/orm/envers/"
"[hibernate.org/orm/envers/]を参照してください。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:713
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:718
#, fuzzy
msgid "Either xref:micrometer.adoc[Micrometer] or xref:microprofile-metrics.adoc[SmallRye Metrics] are capable of exposing metrics that Hibernate ORM collects at runtime. To enable exposure of Hibernate metrics on the `/q/metrics` endpoint, make sure your project depends on a metrics extension and set the configuration property `quarkus.hibernate-orm.metrics.enabled` to `true`.  When using link:microprofile-metrics[SmallRye Metrics], metrics will be available under the `vendor` scope."
msgstr ""
"link:micrometer.html[Micrometer]または link:microprofile-metrics.html["
"SmallRye Metrics]のいずれかは、Hibernate "
"ORMが実行時に収集するメトリクスを公開することができます。 `/q/metrics` "
"エンドポイントで Hibernate メトリクスの公開を有効にするには、プロジェクトがメ"
"トリクス拡張に依存していることを確認し、構成プロパティ `quarkus.hibernate-orm"
".metrics.enabled` を `true` に設定します。 link:microprofile-metrics["
"SmallRye Metrics] を使用する場合、メトリクスは `vendor` "
"のスコープで利用可能になります。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:719
#, no-wrap
msgid "Limitations and other things you should know"
msgstr "制限事項など知っておくべきこと"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:723
msgid "Quarkus does not modify the libraries it uses; this rule applies to Hibernate ORM as well: when using this extension you will mostly have the same experience as using the original library."
msgstr "Quarkusは使用するライブラリを変更しません。このルールはHibernate ORMにも適用されます。このエクステンションを使用すると、元のライブラリを使用した場合とほとんど同じエクスペリエンスが得られます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:727
#, fuzzy
msgid "But while they share the same code, Quarkus does configure some components automatically and injects custom implementations for some extension points; this should be transparent and useful but if you're an expert of Hibernate you might want to know what is being done."
msgstr ""
"しかし、両者は同じコードを共有していますが、Quarkusはいくつかのコンポーネント"
"を自動的に構成し、いくつかの拡張ポイントにカスタム実装を注入しています。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:728
#, no-wrap
msgid "Automatic build time enhancement"
msgstr "自動ビルド時間の強化"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:732
#, fuzzy
msgid "Hibernate ORM can use build time enhanced entities; normally this is not mandatory but it's useful and will have your applications perform better."
msgstr ""
"Hibernate ORMでは、ビルド時に拡張されたエンティティを使用できます。通常、これ"
"は必須ではありませんが、便利であり、アプリケーションのパフォーマンスを向上さ"
"せることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:735
#, fuzzy
msgid "Typically you would need to adapt your build scripts to include the Hibernate Enhancement plugins; in Quarkus this is not necessary as the enhancement step is integrated in the build and analysis of the Quarkus application."
msgstr ""
"通常は、ビルドスクリプトにHibernate Enhancementプラグインを含める必要がありま"
"すが、QuarkusではEnhancementステップがQuarkusアプリケーションのビルドと分析に"
"統合されているため、その必要はありません。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:740
#, fuzzy
msgid "Due to the usage of enhancement, using the `clone()` method on entities is currently not supported as it will also clone some enhancement-specific fields that are specific to the entity."
msgstr ""
"エンハンスメントを使用しているため、エンティティで `clone()` メソッドを使用す"
"ることは現在サポートされていません。これは、エンティティに固有のエンハンスメ"
"ント固有のフィールドもクローンされるためです。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:742
msgid "This limitation might be removed in the future."
msgstr "この制限は将来的に削除される可能性があります。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:744
#, no-wrap
msgid "Automatic integration"
msgstr "自動統合"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:746
#, no-wrap
msgid "Transaction Manager integration"
msgstr "トランザクション・マネージャーの統合"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:750
#, fuzzy
msgid "You don't need to set this up, Quarkus automatically injects the reference to the Narayana Transaction Manager.  The dependency is included automatically as a transitive dependency of the Hibernate ORM extension.  All configuration is optional; for more details see xref:transaction.adoc[Using Transactions in Quarkus]."
msgstr ""
"これを設定する必要はありません。Quarkusは自動的にNarayana Transaction "
"Managerへの参照を注入します。この依存関係は、Hibernate ORM拡張の推移的依存関"
"係として自動的に含まれます。すべての設定はオプションです。詳細は、 "
"link:transaction.html[Quarkusでのトランザクションの使用]を参照してください。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:751
#, no-wrap
msgid "Connection pool"
msgstr "接続プール"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:755
#, fuzzy
msgid "Don't need to choose one either. Quarkus automatically includes the Agroal connection pool; configure your datasource as in the above examples and it will setup Hibernate ORM to use Agroal.  More details about this connection pool can be found in xref:datasource.adoc[Quarkus - Datasources]."
msgstr ""
"どちらかを選択する必要はありません。上記の例のようにデータソースを設定するだ"
"けで、Hibernate ORMがAgroalを使用するように設定されます。このコネクションプー"
"ルの詳細については、 link:datasource.html[Quarkus - "
"Datasources]を参照してください。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:756
#, no-wrap
msgid "Second Level Cache"
msgstr "セカンドレベルキャッシュ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:759
#, fuzzy
msgid "as explained above in section <<caching,Caching>>, you don't need to pick an implementation.  A suitable implementation based on technologies from link:https://infinispan.org/[Infinispan] and link:https://github.com/ben-manes/caffeine[Caffeine] is included as a transitive dependency of the Hibernate ORM extension, and automatically integrated during the build."
msgstr ""
"link:#caching[キャッシング]の項で説明したように、実装を選択する必要はありませ"
"ん。 link:https://infinispan.org/[Infinispan]と link:https://github.com/"
"ben-manes/caffeine[Caffeine]の技術をベースにした適切な実装は、Hibernate "
"ORM拡張の推移依存関係に含まれており、ビルド時に自動的に統合されます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:760
#, no-wrap
msgid "Limitations"
msgstr "制約事項"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:762
#, fuzzy, no-wrap
msgid "XML mapping with duplicate files in the classpath"
msgstr "クラスパスに重複したファイルがある場合のXMLマッピング"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:764
#, fuzzy
msgid "<<xml-mapping,XML mapping>> files are expected to have a unique path."
msgstr "link:#xml-"
"mapping[XMLマッピング]ファイルは一意のパスを持つことが期待されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:769
#, fuzzy
msgid "In practice, it's only possible to have duplicate XML mapping files in the classpath in very specific scenarios.  For example, if two JARs include a `META-INF/orm.xml` file (with the exact same path, but in different JARs), then the mapping file path `META-INF/orm.xml` can only be referenced from a `persistence.xml` **in the same JAR as the `META-INF/orm.xml` file**."
msgstr ""
"実際には、非常に特殊なシナリオにおいてのみ、クラスパスに重複したXMLマッピング"
"ファイルを持つことが可能です。例えば、2つのJARに `META-INF/orm.xml` "
"ファイルが含まれている場合（全く同じパスで、異なるJARに含まれている）、"
"マッピングファイルのパス `META-INF/orm.xml` は、 *<code>META-INF/orm."
"xml</code>* ファイルと同じJARにある `persistence.xml` "
"からしか参照できません。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:770
#, no-wrap
msgid "JMX"
msgstr "JMX"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:775
#, fuzzy
msgid "Management beans are not working in GraalVM native images; therefore Hibernate's capability to register statistics and management operations with the JMX bean is disabled when compiling into a native image.  This limitation is likely permanent, as it's not a goal for native images to implement support for JMX. All such metrics can be accessed in other ways."
msgstr ""
"マネジメント・ビーンはGraalVMのネイティブ・イメージでは動作しません。したがっ"
"て、ネイティブ・イメージにコンパイルした場合、JMXビーンに統計や管理操作を登録"
"するHibernateの機能は無効になります。ネイティブイメージがJMXのサポートを実装"
"することが目標ではないため、この制限はおそらく永久的なものです。このようなメ"
"トリクスはすべて他の方法でアクセスできます。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:776
#, no-wrap
msgid "JACC Integration"
msgstr "JACCの統合"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:779
#, fuzzy
msgid "Hibernate ORM's capability to integrate with JACC is disabled when building GraalVM native images, as JACC is not available - nor useful - in native mode."
msgstr ""
"GraalVMのネイティブ・イメージを構築する際には、JACCと統合するHibernate ORMの"
"機能は無効になります。なぜなら、JACCはネイティブ・モードでは利用できず、有用"
"でもないからです。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:780
#, no-wrap
msgid "Binding the Session to ThreadLocal context"
msgstr "セッションをThreadLocalコンテキストにバインドする"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:785
#, fuzzy
msgid "It is not possible to use the `ThreadLocalSessionContext` helper of Hibernate ORM as support for it is not implemented.  Since Quarkus provides out of the box support for CDI, we believe using injection or programmatic CDI lookup to be a better approach.  This feature also didn't integrate well with reactive components and more modern context propagation techniques, making us believe this legacy feature has no future.  If you badly need to bind it to a ThreadLocal it should be trivial to implement in your own code."
msgstr ""
"Hibernate ORMの `ThreadLocalSessionContext` ヘルパーはサポートが実装されてい"
"ないため、使用することはできません。QuarkusはCDIのアウトオブボックスサポート"
"を提供しているため、インジェクションまたはプログラムによるCDIルックアップを使"
"用する方が良いアプローチであると考えられます。また、この機能は、リアクティブ"
"コンポーネントやより現代的なコンテキストプロパゲーション技術とうまく統合され"
"ていないため、このレガシー機能には将来性がないと考えています。もし、"
"ThreadLocal にバインドする必要があるのなら、あなた自身のコードで実装するのは"
"簡単なはずです。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:786
#, fuzzy, no-wrap
msgid "JNDI"
msgstr "ジェイエヌディーアイ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:793
#, fuzzy
msgid "The JNDI technology is commonly used in other runtimes to integrate different components.  A common use case is Java Enterprise servers to bind the TransactionManager and the Datasource components to a name, and then have Hibernate ORM configured to look these components up by name.  But in Quarkus this use case doesn't apply as components are injected directly, making JNDI support an unnecessary legacy.  As a precaution, to avoid unexpected use of JNDI, the whole support for JNDI has been disabled in the Hibernate ORM extension for Quarkus.  This is both a security precaution and an optimisation."
msgstr ""
"JNDI技術は、異なるコンポーネントを統合するために他のランタイムで一般的に使用"
"されています。一般的な使用例は、Java Enterpriseサーバーで、TransactionManager"
"とDatasourceコンポーネントを名前にバインドし、Hibernate ORMがこれらのコンポー"
"ネントを名前で検索するように設定することです。しかし、Quarkusでは、コンポーネ"
"ントが直接注入されるため、このユースケースは適用されず、JNDIサポートは不要な"
"レガシーとなります。JNDIの予期せぬ使用を避けるため、QuarkusのHibernate ORM拡"
"張機能では、JNDIのサポートはすべて無効化されています。これはセキュリティ上の"
"予防策であり、最適化でもあります。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:794
#, no-wrap
msgid "Other notable differences"
msgstr "その他の特記すべき相違点"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:796
#, no-wrap
msgid "Format of `import.sql`"
msgstr "`import.sql` のフォーマット"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:800
#, fuzzy
msgid "When importing a `import.sql` to setup your database, keep in mind that Quarkus reconfigures Hibernate ORM so to require a semicolon (';') to terminate each statement.  The default in Hibernate is to have a statement per line, without requiring a terminator other than newline: remember to convert your scripts to use the ';' terminator character if you're reusing existing scripts.  This is useful so to allow multi-line statements and human friendly formatting."
msgstr ""
"データベースをセットアップするために `import.sql` をインポートする際、"
"QuarkusはHibernate ORMを再構成し、各ステートメントの終了にセミコロン（';'）を"
"必要とすることに留意してください。Hibernateのデフォルトでは、改行以外のターミ"
"ネーターを必要とせず、1行に1つのステートメントがあります。既存のスクリプトを"
"再利用する場合は、ターミネーター文字として「;」を使用するようにスクリプトを変"
"換することを忘れないでください。これは、複数行のステートメントを可能にし、人"
"間が使いやすいフォーマットにするために役立ちます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:801
#, fuzzy, no-wrap
msgid "Simplifying Hibernate ORM with Panache"
msgstr "Hibernate ORMとJPAの使用"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:804
#, fuzzy
msgid "The xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] extension facilitates the usage of Hibernate ORM by providing active record style entities (and repositories) and focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""
"link:hibernate-orm-panache.html[Hibernate ORM with Panache]extensionは、アク"
"ティブレコードスタイルのエンティティ（およびリポジトリ）を提供することで、"
"Hibernate ORMの使用を容易にし、Quarkusでエンティティを簡単に楽しく書けるよう"
"にすることに重点を置いています。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:805
#, no-wrap
msgid "Configure your datasource"
msgstr "データソースの設定"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:809
msgid "Datasource configuration is extremely simple, but is covered in a different guide as technically it's implemented by the Agroal connection pool extension for Quarkus."
msgstr "データソースの設定は非常にシンプルですが、技術的にはQuarkus用のAgroal接続プールエクステンションによって実装されているため、別のガイドで説明します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:811
#, fuzzy
msgid "Jump over to xref:datasource.adoc[Quarkus - Datasources] for all details."
msgstr "詳細は link:datasource.html[Quarkus - Datasources]をご覧ください。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:813
#, no-wrap
msgid "Multitenancy"
msgstr "マルチテナンシー"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:816
#, fuzzy
msgid "\"The term multitenancy, in general, is applied to software development to indicate an architecture in which a single running instance of an application simultaneously serves multiple clients (tenants). This is highly common in SaaS solutions. Isolating information (data, customizations, etc.) pertaining to the various tenants is a particular challenge in these systems. This includes the data owned by each tenant stored in the database\" (link:{orm-doc-url-prefix}#multitenacy[Hibernate User Guide])."
msgstr ""
"「一般的にマルチテナンシーとは、ソフトウェア開発において、1つのアプリケーショ"
"ンのインスタンスが複数のクライアント（テナント）に同時にサービスを提供するア"
"ーキテクチャを示す言葉です。これは、SaaSソリューションでは非常に一般的です。"
"このようなシステムでは、各テナントに関わる情報（データ、カスタマイズなど）を"
"分離することが特に重要な課題となります。これには、データベースに保存されてい"
"る各テナントが所有するデータも含まれます」 link:{orm-doc-url-"
"prefix}#multitenacy[（『Hibernate User Guide』]）。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:818
#, fuzzy
msgid "Quarkus currently supports the link:{orm-doc-url-prefix}#multitenacy-separate-database[separate database] and the link:{orm-doc-url-prefix}#multitenacy-separate-schema[separate schema] approach."
msgstr ""
"Quarkusは現在、 link:{orm-doc-url-prefix}#multitenacy-separate-"
"database[独立したデータベース]と link:{orm-doc-url-prefix}#multitenacy-"
"separate-schema[独立したスキーマ]のアプローチをサポートしています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:820
#, fuzzy
msgid "To see multitenancy in action, you can check out the {quickstarts-tree-url}/hibernate-orm-multi-tenancy-quickstart[hibernate-orm-multi-tenancy-quickstart] quickstart."
msgstr ""
"マルチテナンシーの動作を確認するには、{quickstarts-tree-url}/hibernate-orm-"
"multi-tenancy-quickstart[hibernate-orm-multi-tenancy-"
"quickstart]クイックスタートをご覧ください。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:821
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:824
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/{tenant}` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:832
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.persistence.EntityManager;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:836
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Path(\"/{tenant}\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:839
#, no-wrap
msgid ""
"    @Inject\n"
"    EntityManager entityManager;\n"
msgstr ""
"    @Inject\n"
"    EntityManager entityManager;\n"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:846
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"fruits\")\n"
"    public Fruit[] getFruits() {\n"
"        return entityManager.createNamedQuery(\"Fruits.findAll\", Fruit.class)\n"
"                .getResultList().toArray(new Fruit[0]);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:848
#: upstream/_guides/hibernate-orm.adoc:885
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:851
#, fuzzy
msgid "In order to resolve the tenant from incoming requests and map it to a specific tenant configuration, you need to create an implementation for the `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` interface."
msgstr ""
"受信したリクエストからテナントを解決し、特定のテナント構成にマッピングするた"
"めには、 `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` "
"インターフェースの実装を作成する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:855
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:858
#: upstream/_guides/hibernate-orm.adoc:902
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.runtime.tenant.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:862
#, no-wrap
msgid ""
"@PersistenceUnitExtension // <1>\n"
"@RequestScoped // <2>\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:865
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:870
#, no-wrap
msgid ""
"    @Override\n"
"    public String getDefaultTenantId() {\n"
"        return \"base\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:875
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolveTenantId() {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:880
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant config\n"
"            return getDefaultTenantId();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:883
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:888
#, fuzzy
msgid "Annotate the TenantResolver implementation with the `@PersistenceUnitExtension` qualifier to tell Quarkus it should be used in the default persistence unit."
msgstr ""
"TenantResolverの実装に `@PersistenceUnitExtension` という修飾語を付けて、Quar"
"kusにデフォルトのパーシスタンスユニットで使用することを伝えます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:890
#, fuzzy
msgid "For <<multiple-persistence-units,named persistence units>>, use `@PersistenceUnitExtension(\"nameOfYourPU\")`."
msgstr ""
"link:#multiple-persistence-units[名前付きのパーシスタンス・ユニット]には、 "
"`@PersistenceUnitExtension(\"nameOfYourPU\")` を使用します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:891
#, fuzzy
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr "ビーンは、テナントの解決が入ってくるリクエストに依存するため、 "
"`@RequestScoped` 。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:893
#, fuzzy
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, the default tenant identifier is returned."
msgstr "上記の実装では、テナントはリクエストパスから解決されるので、テナントが推測で"
"きない場合は、デフォルトのテナント識別子が返されます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:897
#, fuzzy
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr ""
"link:security-openid-connect-multitenancy."
"html[OIDCマルチテナンシー]も使用していて、OIDCとHibernate "
"ORMの両方のテナントIDが同じで、Vert.x `RoutingContext` "
"から抽出する必要がある場合は、OIDCテナントリゾルバからHibernate "
"ORMテナントリゾルバに、 `RoutingContext` "
"属性としてテナントIDを渡すことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:906
#, no-wrap
msgid ""
"@PersistenceUnitExtension\n"
"@RequestScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:916
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
"    ...\n"
"    @Override\n"
"    public String resolveTenantId() {\n"
"        // OIDC TenantResolver has already calculated the tenant id and saved it as a RoutingContext `tenantId` attribute:\n"
"        return context.get(\"tenantId\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:919
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:924
#, fuzzy
msgid "In general it is not possible to use the Hibernate ORM database generation feature in conjunction with a multitenancy setup.  Therefore you have to disable it and you need to make sure that the tables are created per schema.  The following setup will use the xref:flyway.adoc[Flyway] extension to achieve this goal."
msgstr ""
"一般的に、Hibernate ORMのデータベース生成機能をマルチテナンシーのセットアップ"
"と組み合わせて使用することはできません。そのため、この機能を無効にして、テー"
"ブルがスキーマごとに作成されるようにする必要があります。以下のセットアップで"
"は、 link:flyway.html[Flyway]エクステンションを使用してこの目的を達成します。"

#. type: Title ====
#: upstream/_guides/hibernate-orm.adoc:925
#, no-wrap
msgid "SCHEMA approach"
msgstr "SCHEMAアプローチ"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:929
#, fuzzy
msgid "The same data source will be used for all tenants and a schema has to be created for every tenant inside that data source.  CAUTION: Some databases like MariaDB/MySQL do not support database schemas. In these cases you have to use the DATABASE approach below."
msgstr ""
"すべてのテナントに同じデータソースを使用し、そのデータソース内に各テナント用"
"のスキーマを作成する必要があります。注意：MariaDB/MySQLのような一部のデータベ"
"ースは、データベーススキーマをサポートしていません。このような場合には、以下"
"のようなDATABASEアプローチを使用する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:934
#: upstream/_guides/hibernate-orm.adoc:989
#, no-wrap
msgid ""
"# Disable generation\n"
"quarkus.hibernate-orm.database.generation=none\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:939
#, no-wrap
msgid ""
"# Enable SCHEMA approach and use default datasource\n"
"quarkus.hibernate-orm.multitenant=SCHEMA\n"
"# You could use a non-default datasource by using the following setting \n"
"# quarkus.hibernate-orm.multitenant-schema-datasource=other\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:945
#, no-wrap
msgid ""
"# The default data source used for all tenant schemas\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:950
#, no-wrap
msgid ""
"# Enable Flyway configuration to create schemas\n"
"quarkus.flyway.schemas=base,mycompany\n"
"quarkus.flyway.locations=classpath:schema\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:953
msgid "Here is an example of the Flyway SQL (`V1.0.0__create_fruits.sql`) to be created in the configured folder `src/main/resources/schema`."
msgstr "ここでは、設定されたフォルダー `src/main/resources/schema` に作成される Flyway SQL ( `V1.0.0__create_fruits.sql` ) の例を示します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:966
#, no-wrap
msgid ""
"CREATE SEQUENCE base.known_fruits_id_seq;\n"
"SELECT setval('base.\"known_fruits_id_seq\"', 3);\n"
"CREATE TABLE base.known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO base.known_fruits(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO base.known_fruits(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO base.known_fruits(id, name) VALUES (3, 'Banana');\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:977
#, no-wrap
msgid ""
"CREATE SEQUENCE mycompany.known_fruits_id_seq;\n"
"SELECT setval('mycompany.\"known_fruits_id_seq\"', 3);\n"
"CREATE TABLE mycompany.known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (1, 'Avocado');\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (2, 'Apricots');\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (3, 'Blackberries');\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/hibernate-orm.adoc:981
#, no-wrap
msgid "DATABASE approach"
msgstr "データベースアプローチ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:984
msgid "For every tenant you need to create a named data source with the same identifier that is returned by the `TenantResolver`."
msgstr "すべてのテナントに対して、 `TenantResolver` が返すのと同じ識別子を持つ名前付きデータソースを作成する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:992
#, no-wrap
msgid ""
"# Enable DATABASE approach\n"
"quarkus.hibernate-orm.multitenant=DATABASE\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:998
#, no-wrap
msgid ""
"# Default tenant 'base'\n"
"quarkus.datasource.base.db-kind=postgresql\n"
"quarkus.datasource.base.username=quarkus_test\n"
"quarkus.datasource.base.password=quarkus_test\n"
"quarkus.datasource.base.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:1004
#, no-wrap
msgid ""
"# Tenant 'mycompany'\n"
"quarkus.datasource.mycompany.db-kind=postgresql\n"
"quarkus.datasource.mycompany.username=mycompany\n"
"quarkus.datasource.mycompany.password=mycompany\n"
"quarkus.datasource.mycompany.jdbc.url=jdbc:postgresql://localhost:5433/mycompany\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:1008
#, no-wrap
msgid ""
"# Flyway configuration for the default datasource\n"
"quarkus.flyway.locations=classpath:database/default\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:1012
#, no-wrap
msgid ""
"# Flyway configuration for the mycompany datasource\n"
"quarkus.flyway.mycompany.locations=classpath:database/mycompany\n"
"quarkus.flyway.mycompany.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:1015
msgid "Following are examples of the Flyway SQL files to be created in the configured folder `src/main/resources/database`."
msgstr "以下は、設定されたフォルダー `src/main/resources/database` に作成する Flyway SQL ファイルの例です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:1017
msgid "Default schema (`src/main/resources/database/default/V1.0.0__create_fruits.sql`):"
msgstr "デフォルトスキーマ ( `src/main/resources/database/default/V1.0.0__create_fruits.sql` )。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:1030
#, no-wrap
msgid ""
"CREATE SEQUENCE known_fruits_id_seq;\n"
"SELECT setval('known_fruits_id_seq', 3);\n"
"CREATE TABLE known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO known_fruits(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO known_fruits(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO known_fruits(id, name) VALUES (3, 'Banana');\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:1033
msgid "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"
msgstr "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:1046
#, no-wrap
msgid ""
"CREATE SEQUENCE known_fruits_id_seq;\n"
"SELECT setval('known_fruits_id_seq', 3);\n"
"CREATE TABLE known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO known_fruits(id, name) VALUES (1, 'Avocado');\n"
"INSERT INTO known_fruits(id, name) VALUES (2, 'Apricots');\n"
"INSERT INTO known_fruits(id, name) VALUES (3, 'Blackberries');\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:1048
#, no-wrap
msgid "Programmatically Resolving Tenants Connections"
msgstr "テナント接続をプログラムで解決"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:1056
#, fuzzy
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` interface to implement your own logic for retrieving a connection.  Creating an application-scoped bean that implements this interface and annotating it with `@PersistenceUnitExtension` (or `@PersistenceUnitExtension(\"nameOfYourPU\")` for a <<multiple-persistence-units,named persistence unit>>)  will replace the current Quarkus default implementation `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver`.  Your custom connection resolver would allow for example to read tenant information from a database and create a connection per tenant at runtime based on it."
msgstr ""
"サポートするさまざまなテナントに対してより動的な設定が必要で、設定ファイルに"
"複数のエントリを残したくない場合は、 `io.quarkus.hibernate.orm.runtime.tenant"
".TenantConnectionResolver` インターフェースを使用して、接続を取得するための独"
"自のロジックを実装することができます。このインターフェイスを実装するアプリケ"
"ーションスコープ付きのBeanを作成し、 `@PersistenceUnitExtension` （または "
"link:#multiple-persistence-units[名前付き永続化ユニット]の場合は "
"`@PersistenceUnitExtension(\"nameOfYourPU\")` ）でアノテーションすると、"
"現在のQuarkusのデフォルトの実装である `io.quarkus.hibernate.orm.runtime."
"tenant.DataSourceTenantConnectionResolver` を置き換えることができます。カスタ"
"ムコネクションリゾルバを使用すると、例えば、データベースからテナント情報を読"
"み取り、それに基づいて実行時にテナントごとに接続を作成することができます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:1058
#, no-wrap
msgid "Interceptors"
msgstr "インターセプター"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:1062
#, fuzzy
msgid "You can assign an link:{orm-doc-url-prefix}#events-interceptors[`org.hibernate.Interceptor`] to your `SessionFactory` by simply defining a CDI bean with the appropriate qualifier:"
msgstr ""
"を割り当てることができます。  link:{orm-doc-url-prefix}#events-"
"interceptors[`org.hibernate.Interceptor`]を `SessionFactory` "
"に割り当てるには、適切な修飾子を持つ CDI Bean を定義するだけです。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:1074
#, no-wrap
msgid ""
"@PersistenceUnitExtension // <1>\n"
"public static class MyInterceptor extends EmptyInterceptor { // <2>\n"
"    @Override\n"
"    public boolean onLoad(Object entity, Serializable id, Object[] state, // <3>\n"
"            String[] propertyNames, Type[] types) {\n"
"        // ...\n"
"        return false;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:1077
#, fuzzy
msgid "Annotate the interceptor implementation with the `@PersistenceUnitExtension` qualifier to tell Quarkus it should be used in the default persistence unit."
msgstr ""
"インターセプターの実装に `@PersistenceUnitExtension` の修飾子を付けて、Quarku"
"sにデフォルトの永続化ユニットで使用されるように伝えます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:1079
#, fuzzy
msgid "For <<multiple-persistence-units,named persistence units>>, use `@PersistenceUnitExtension(\"nameOfYourPU\")`"
msgstr ""
"link:#multiple-persistence-units[名前付きのパーシスタンス・ユニット]の場合は "
"`@PersistenceUnitExtension(\"nameOfYourPU\")`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:1080
#, fuzzy
msgid "Either extend `org.hibernate.EmptyInterceptor` or implement `org.hibernate.Interceptor` directly."
msgstr ""
"`org.hibernate.EmptyInterceptor` を拡張するか、 `org.hibernate.Interceptor` "
"を直接実装してください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:1081
#, fuzzy
msgid "Implement methods as necessary."
msgstr "必要に応じてメソッドを導入する。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:1088
#, fuzzy
msgid "By default, interceptor beans annotated with `@PersistenceUnitExtension` are application-scoped, which means only one interceptor instance will be created per application and reused across all entity managers.  For this reason, the interceptor implementation must be thread-safe."
msgstr ""
"デフォルトでは、 `@PersistenceUnitExtension` "
"でアノテーションされたインターセプター ビーンは、アプリケーション "
"スコープされています。つまり、アプリケーションごとに 1 つのインターセプター "
"インスタンスのみが作成され、すべてのエンティティ マネージャで再利用されます。"
"このため、インターセプターの実装はスレッドセーフである必要があります。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:1092
#, fuzzy
msgid "In order to create one interceptor instance per entity manager instead, annotate your bean with `@Dependent`.  In that case, the interceptor implementation doesn't need to be thread-safe."
msgstr ""
"代わりにエンティティマネージャごとに1つのインターセプターインスタンスを作成す"
"るには、Beanに `@Dependent` をアノテートします。この場合、インターセプターの"
"実装はスレッドセーフである必要はありません。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:1098
#, fuzzy
msgid "Due to a limitation in Hibernate ORM itself, `@PreDestroy` methods on `@Dependent`-scoped interceptors will never get called."
msgstr ""
"Hibernate ORM 自体の制限により、 `@Dependent`-scoped interceptors の "
"`@PreDestroy` メソッドは決して呼び出されません。"

#, fuzzy
#~ msgid "Essentially using the `ThreadLocalSessionContext` helper of Hibernate ORM is not implemented.  The team believes this isn't a big deal as it's trivial to inject the Session via CDI instead, or handling the binding into a ThreadLocal yourself, making this a legacy feature.  This limitation might be resolved in the future, if someone opens a ticket for it and provides a reasonable use case to justify the need."
#~ msgstr "基本的に、Hibernate ORM の `ThreadLocalSessionContext` ヘルパーを使用することは実装されていません。チームは、これは大きな問題ではないと考えています。というのも、代わりに CDI を通じて Session を注入したり、ThreadLocal へのバインディングを自分で処理したりすることは些細なことであり、これはレガシーな機能だからです。この制限は、誰かがそのためのチケットを開き、必要性を正当化する妥当な使用例を提供すれば、将来的に解決されるかもしれません。"

#~ msgid "Example dependencies using Maven"
#~ msgstr "Mavenを使った依存関係の例"

#~ msgid "JPA Callbacks"
#~ msgstr "JPA コールバック"
