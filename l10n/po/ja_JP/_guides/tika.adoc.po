# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-12-01 06:04+0000\n"
"PO-Revision-Date: 2021-12-01 14:06+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/tika.adoc:6
#, no-wrap
msgid "Using Apache Tika"
msgstr "Apache Tika の使用"

#. type: Plain text
#: upstream/_guides/tika.adoc:11
msgid "This guide explains how your Quarkus application can use https://tika.apache.org/[Apache Tika] to parse the documents."
msgstr "このガイドでは、Quarkus アプリケーションが link:https://tika.apache.org/[Apache Tika] を使用してドキュメントを解析する方法について説明します。"

#. type: Plain text
#: upstream/_guides/tika.adoc:13
msgid "https://tika.apache.org/[Apache Tika] is a content analysis toolkit which is used to parse the documents in PDF, Open Document, Excel and many other well known binary and text formats using a simple uniform API. Both the document text and properties (metadata) are available once the document has been parsed."
msgstr "link:https://tika.apache.org/[Apache Tika] はコンテンツ分析ツールキットで、シンプルな統合 API を使した PDF、Open Document、Excel やその他多くのよく知られたバイナリーやテキスト形式の文書解析に使われます。文書のテキストとプロパティー (メタデータ) の両方が、文書が解析されると利用可能になります。"

#. type: delimited block =
#: upstream/_guides/tika.adoc:17
msgid "If you are planning to run the application as a native executable and parse documents that may have been created with charsets different than the standard ones supported in Java such as `UTF-8` then you should configure Quarkus to get the native image generator include all the charsets available to the JVM:"
msgstr "アプリケーションをネイティブ実行可能ファイルとして実行し、`UTF-8` のような Java でサポートされている標準の文字セットと異なる文字セットで作成された可能性のあるドキュメントを解析する場合は、Quarkus Maven Plugin を設定して、ネイティブイメージジェネレーターがJVM で利用可能なすべての文字セットを含むようにする必要があります。"

#. type: delimited block -
#: upstream/_guides/tika.adoc:23
#, no-wrap
msgid ""
"<properties>\n"
"    <quarkus.package.type>native</quarkus.package.type>\n"
"    <quarkus.native.add-all-charsets>true</quarkus.native.add-all-charsets>\n"
"<properties>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/tika.adoc:27
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: delimited block =
#: upstream/_guides/tika.adoc:30
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です。"

#. type: delimited block =
#: upstream/_guides/tika.adoc:32
msgid "less than 20 minutes"
msgstr "20 分弱"

#. type: delimited block =
#: upstream/_guides/tika.adoc:33
msgid "an IDE"
msgstr "IDE"

#. type: delimited block =
#: upstream/_guides/tika.adoc:34
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11+ がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#. type: delimited block =
#: upstream/_guides/tika.adoc:35
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: delimited block =
#: upstream/_guides/tika.adoc:36
msgid "Docker"
msgstr "Docker"

#. type: delimited block =
#: upstream/_guides/tika.adoc:37
msgid "link:building-native-image[GraalVM installed if you want to run in native mode]"
msgstr "link:building-native-image[ネイティブモードで動作させたい場合は、GraalVM がインストールされていること]"

#. type: Title ==
#: upstream/_guides/tika.adoc:38
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: delimited block =
#: upstream/_guides/tika.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿い、順を追ってアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: delimited block =
#: upstream/_guides/tika.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Git レポジトリをクローンするか `git clone {quickstarts-clone-url}`、{quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: delimited block =
#: upstream/_guides/tika.adoc:46
msgid "The solution is located in the `tika-quickstart` {quickstarts-tree-url}/tika-quickstart[directory]."
msgstr "ソリューションは `tika-quickstart` {quickstarts-tree-url}/tika-quickstart[ディレクトリ] にあります。"

#. type: Plain text
#: upstream/_guides/tika.adoc:50
msgid "The provided solution contains a few additional elements such as tests and testing infrastructure."
msgstr "提供されるソリューションには、テストやテストのインフラストラクチャなど、いくつかの追加要素が含まれています。"

#. type: Title ==
#: upstream/_guides/tika.adoc:53
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Maven プロジェクトの作成"

#. type: delimited block =
#: upstream/_guides/tika.adoc:56
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/tika.adoc:66
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme.example \\\n"
"    -DprojectArtifactId=tika-quickstart \\\n"
"    -DclassName=\"org.acme.tika.TikaParserResource\" \\\n"
"    -Dpath=\"/parse\" \\\n"
"    -Dextensions=\"tika,resteasy\"\n"
"cd tika-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tika.adoc:69
msgid "This command generates a Maven project, importing the `tika` and `resteasy` extensions."
msgstr "このコマンドは、`tika` と `resteasy` のエクステンションをインポートして、Maven プロジェクトを生成します。"

#. type: Plain text
#: upstream/_guides/tika.adoc:72
msgid "If you already have your Quarkus project configured you can add the `tika` and `resteasy` extensions to your project by running the following command in your project base directory."
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで、次のコマンドを実行することで、 `tika` と `resteasy` のエクステンションをプロジェクトに追加できます。"

#. type: delimited block -
#: upstream/_guides/tika.adoc:76
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"tika,resteasy\"\n"
msgstr "./mvnw quarkus:add-extension -Dextensions=\"tika,resteasy\"\n"

#. type: Plain text
#: upstream/_guides/tika.adoc:79
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます。"

#. type: delimited block -
#: upstream/_guides/tika.adoc:90
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-tika</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-tika</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy</artifactId>\n"
"</dependency>\n"

#. type: Title ===
#: upstream/_guides/tika.adoc:92
#, no-wrap
msgid "Examine the generated JAX-RS resource"
msgstr "生成されたJAX-RS リソースを調べる"

#. type: Plain text
#: upstream/_guides/tika.adoc:95
msgid "Open the `src/main/java/org/acme/tika/TikaParserResource.java` file and see the following content:"
msgstr "`src/main/java/org/acme/tika/TikaParserResource.java` ファイルを開くと、以下のような内容が表示されます。"

#. type: delimited block -
#: upstream/_guides/tika.adoc:99 upstream/_guides/tika.adoc:123
#, no-wrap
msgid "package org.acme.tika;\n"
msgstr "package org.acme.tika;\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:104
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:107
#, no-wrap
msgid ""
"@Path(\"/parse\")\n"
"public class TikaParserResource {\n"
msgstr ""
"@Path(\"/parse\")\n"
"public class TikaParserResource {\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:114
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/tika.adoc:116
#, no-wrap
msgid "Update the JAX-RS resource"
msgstr "JAX-RS リソースの更新"

#. type: Plain text
#: upstream/_guides/tika.adoc:119
msgid "Next update `TikaParserResource` to accept and parse PDF and OpenDocument format documents:"
msgstr "次に `TikaParserResource` を更新して、PDF および OpenDocument 形式の文書を受け入れて解析するようにします。"

#. type: delimited block -
#: upstream/_guides/tika.adoc:127
#, no-wrap
msgid ""
"import java.io.InputStream;\n"
"import java.time.Duration;\n"
"import java.time.Instant;\n"
msgstr ""
"import java.io.InputStream;\n"
"import java.time.Duration;\n"
"import java.time.Instant;\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:134
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:137
#, no-wrap
msgid ""
"import io.quarkus.tika.TikaParser;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""
"import io.quarkus.tika.TikaParser;\n"
"import org.jboss.logging.Logger;\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:141
#, no-wrap
msgid ""
"@Path(\"/parse\")\n"
"public class TikaParserResource {\n"
"    private static final Logger log = Logger.getLogger(TikaParserResource.class);\n"
msgstr ""
"@Path(\"/parse\")\n"
"public class TikaParserResource {\n"
"    private static final Logger log = Logger.getLogger(TikaParserResource.class);\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:144
#, no-wrap
msgid ""
"    @Inject\n"
"    TikaParser parser;\n"
msgstr ""
"    @Inject\n"
"    TikaParser parser;\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:151
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/text\")\n"
"    @Consumes({\"application/pdf\", \"application/vnd.oasis.opendocument.text\"})\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String extractText(InputStream stream) {\n"
"        Instant start = Instant.now();\n"
msgstr ""
"    @POST\n"
"    @Path(\"/text\")\n"
"    @Consumes({\"application/pdf\", \"application/vnd.oasis.opendocument.text\"})\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String extractText(InputStream stream) {\n"
"        Instant start = Instant.now();\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:153
#, no-wrap
msgid "        String text = parser.getText(stream);\n"
msgstr "        String text = parser.getText(stream);\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:155
#, no-wrap
msgid "        Instant finish = Instant.now();\n"
msgstr "        Instant finish = Instant.now();\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:157
#, no-wrap
msgid "        log.info(Duration.between(start, finish).toMillis() + \" mls have passed\");\n"
msgstr "        log.info(Duration.between(start, finish).toMillis() + \" mls have passed\");\n"

#. type: delimited block -
#: upstream/_guides/tika.adoc:161
#, no-wrap
msgid ""
"        return text;\n"
"    }\n"
"}\n"
msgstr ""
"        return text;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/tika.adoc:164
msgid "As you can see the JAX-RS resource method was renamed to `extractText`, `@GET` annotation was replaced with `POST` and `@Path(/text)` annotation was added, and `@Consumes` annotation shows that PDF and OpenDocument media type formats can now be accepted. An injected `TikaParser` is used to parse the documents and report the extracted text. It also measures how long does it take to parse a given document."
msgstr "ご覧のように、JAX-RS のリソースメソッドの名前が `extractText` に変更され、`@GET` アノテーションが `POST` に置き換わり、`@Path(/text)` アノテーションが追加されました。また、`@Consumes` アノテーションでは、PDF と OpenDocument のメディアタイプのフォーマットが受け入れられるようになったことが示されています。注入された `TikaParser` は、文書を解析し、抽出されたテキストを報告するために使用されます。また、指定の文書の解析に要する時間を測定します。"

#. type: Title ==
#: upstream/_guides/tika.adoc:165
#, no-wrap
msgid "Run the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_guides/tika.adoc:168
msgid "Now we are ready to run our application. Use:"
msgstr "これで、アプリケーションを実行する準備が整いました。以下を使用してください。"

#. type: delimited block -
#: upstream/_guides/tika.adoc:172
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr "./mvnw compile quarkus:dev\n"

#. type: Plain text
#: upstream/_guides/tika.adoc:175
msgid "and you should see output similar to:"
msgstr "次のような出力が得られるはずです。"

#. type: Block title
#: upstream/_guides/tika.adoc:176
#, no-wrap
msgid "quarkus:dev Output"
msgstr "quarkus:dev 出力"

#. type: delimited block -
#: upstream/_guides/tika.adoc:194
#, no-wrap
msgid ""
"$ ./mvnw clean compile quarkus:dev\n"
"[INFO] Scanning for projects...\n"
"[INFO]\n"
"INFO] --------------------< org.acme.example:apache-tika >--------------------\n"
"[INFO] Building apache-tika 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"...\n"
"Listening for transport dt_socket at address: 5005\n"
"2019-10-15 14:23:26,442 INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation\n"
"2019-10-15 14:23:26,960 INFO  [io.qua.resteasy] (build-15) Resteasy running without servlet container.\n"
"2019-10-15 14:23:26,960 INFO  [io.qua.resteasy] (build-15) - Add quarkus-undertow to run Resteasy within a servlet container\n"
"2019-10-15 14:23:26,991 INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed in 549ms\n"
"2019-10-15 14:23:27,637 INFO  [io.quarkus] (main) Quarkus 999-SNAPSHOT started in 1.361s. Listening on: http://0.0.0.0:8080\n"
"2019-10-15 14:23:27,638 INFO  [io.quarkus] (main) Profile dev activated. Live Coding activated.\n"
"2019-10-15 14:23:27,639 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, tika]\n"
msgstr ""
"$ ./mvnw clean compile quarkus:dev\n"
"[INFO] Scanning for projects...\n"
"[INFO]\n"
"INFO] --------------------< org.acme.example:apache-tika >--------------------\n"
"[INFO] Building apache-tika 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"...\n"
"Listening for transport dt_socket at address: 5005\n"
"2019-10-15 14:23:26,442 INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation\n"
"2019-10-15 14:23:26,960 INFO  [io.qua.resteasy] (build-15) Resteasy running without servlet container.\n"
"2019-10-15 14:23:26,960 INFO  [io.qua.resteasy] (build-15) - Add quarkus-undertow to run Resteasy within a servlet container\n"
"2019-10-15 14:23:26,991 INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed in 549ms\n"
"2019-10-15 14:23:27,637 INFO  [io.quarkus] (main) Quarkus 999-SNAPSHOT started in 1.361s. Listening on: http://0.0.0.0:8080\n"
"2019-10-15 14:23:27,638 INFO  [io.quarkus] (main) Profile dev activated. Live Coding activated.\n"
"2019-10-15 14:23:27,639 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, tika]\n"

#. type: Plain text
#: upstream/_guides/tika.adoc:197
msgid "Now that the REST endpoint is running, we can get it to parse PDF and OpenDocument documents using a command line tool like curl:"
msgstr "REST エンドポイントが実行されているので、curl のようなコマンドラインツールを使用して PDF や OpenDocument ドキュメントを解析することができます。"

#. type: delimited block -
#: upstream/_guides/tika.adoc:202
#, no-wrap
msgid ""
"$ curl -X POST -H \"Content-type: application/pdf\" --data-binary @target/classes/quarkus.pdf http://localhost:8080/parse/text\n"
"Hello Quarkus\n"
msgstr ""
"$ curl -X POST -H \"Content-type: application/pdf\" --data-binary @target/classes/quarkus.pdf http://localhost:8080/parse/text\n"
"Hello Quarkus\n"

#. type: Plain text
#: upstream/_guides/tika.adoc:205
msgid "and"
msgstr "および"

#. type: delimited block -
#: upstream/_guides/tika.adoc:210
#, no-wrap
msgid ""
"$ curl -X POST -H \"Content-type: Content-type: application/vnd.oasis.opendocument.text\" --data-binary @target/classes/quarkus.odt http://localhost:8080/parse/text\n"
"Hello Quarkus\n"
msgstr ""
"$ curl -X POST -H \"Content-type: Content-type: application/vnd.oasis.opendocument.text\" --data-binary @target/classes/quarkus.odt http://localhost:8080/parse/text\n"
"Hello Quarkus\n"

#. type: Title ==
#: upstream/_guides/tika.adoc:212
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: upstream/_guides/tika.adoc:216
msgid "You can build a native executable with the usual command `./mvnw package -Pnative`.  Running it is as simple as executing `./target/tika-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "通常のコマンド `./mvnw package -Pnative` でネイティブ実行可能ファイルをビルドできます。`./target/tika-quickstart-1.0-SNAPSHOT-runner` を実行するだけで簡単です。"

#. type: Title ==
#: upstream/_guides/tika.adoc:217
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
