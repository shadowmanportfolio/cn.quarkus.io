# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2022-05-06 11:13+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/qute.adoc:6
#, no-wrap
msgid "Qute Templating Engine"
msgstr "Qute テンプレートエンジン"

#. type: Plain text
#: upstream/_guides/qute.adoc:16
msgid "Qute is a templating engine designed specifically to meet the Quarkus needs.  The usage of reflection is minimized to reduce the size of native images.  The API combines both the imperative and the non-blocking reactive style of coding.  In the development mode, all files located in `src/main/resources/templates` are watched for changes and modifications are immediately visible.  Furthermore, we try to detect most of the template problems at build time.  In this guide, you will learn how to easily render templates in your application."
msgstr "Quteは、Quarkus のニーズを満たすために特別に設計されたテンプレートエンジンです。ネイティブイメージのサイズを小さくするために、リフレクションの使用は最小限に抑えられています。API は、命令型とノンブロッキングリアクティブ型の両方のスタイルのコーディングを組み合わせています。開発モードでは、 `src/main/resources/templates` にあるすべてのファイルが変更のために監視され、変更はすぐに表示されます。さらに、ビルド時にテンプレートの問題のほとんどを検出するようにしています。このガイドでは、アプリケーションでテンプレートを簡単にレンダリングする方法を学びます。"

#. type: Title ==
#: upstream/_guides/qute.adoc:17
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/qute.adoc:21
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#. type: Plain text
#: upstream/_guides/qute.adoc:23
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または {quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain text
#: upstream/_guides/qute.adoc:25
msgid "The solution is located in the `qute-quickstart` {quickstarts-tree-url}/qute-quickstart[directory]."
msgstr "このソリューションは `qute-quickstart` {quickstarts-tree-url}/qute-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_guides/qute.adoc:26
#, no-wrap
msgid "Hello World with JAX-RS"
msgstr "JAX-RS で Hello World"

#. type: Plain text
#: upstream/_guides/qute.adoc:29
msgid "If you want to use Qute in your JAX-RS application, you need to add an extension first:"
msgstr "JAX-RS アプリケーションで Qute を使用する場合は、まずエクステンションを追加する必要があります:"

#. type: Plain text
#: upstream/_guides/qute.adoc:31
msgid "either `quarkus-resteasy-reactive-qute` if you are using RESTEasy Reactive:"
msgstr "RESTEasy Reactive を使用している場合は `quarkus-resteasy-reactive-qute`:"

#. type: Block title
#: upstream/_guides/qute.adoc:33 upstream/_guides/qute.adoc:50
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/qute.adoc:39
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/qute.adoc:42 upstream/_guides/qute.adoc:59
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/qute.adoc:45
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive-qute\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:48
msgid "or `quarkus-resteasy-qute` if you are using RESTEasy Classic:"
msgstr "RESTEasy Classicを使用している場合は、 `quarkus-resteasy-qute` :"

#. type: delimited block -
#: upstream/_guides/qute.adoc:56
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:62
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-qute\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:65 upstream/_guides/qute.adoc:129
msgid "We'll start with a very simple template:"
msgstr "まずはとてもシンプルなテンプレートから:"

#. type: Block title
#: upstream/_guides/qute.adoc:66
#, no-wrap
msgid "hello.txt"
msgstr "hello.text"

#. type: delimited block -
#: upstream/_guides/qute.adoc:70 upstream/_guides/qute.adoc:134
#, no-wrap
msgid "Hello {name}! <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:72 upstream/_guides/qute.adoc:136
msgid "`{name}` is a value expression that is evaluated when the template is rendered."
msgstr "`{name}` は、テンプレートがレンダリングされたときに評価される値の式です。"

#. type: Plain text
#: upstream/_guides/qute.adoc:74
msgid "By default, all files located in the `src/main/resources/templates` directory and its subdirectories are registered as templates. Templates are validated during startup and watched for changes in the development mode."
msgstr "デフォルトでは、 `src/main/resources/templates` ディレクトリーとそのサブディレクトリーにあるすべてのファイルがテンプレートとして登録されます。開発モードではテンプレートは起動時に検証され、変更が監視されます。"

#. type: Plain text
#: upstream/_guides/qute.adoc:76
msgid "Now let's inject the \"compiled\" template in the resource class."
msgstr "では、リソースクラスに「コンパイル済み」テンプレートを注入してみましょう。"

#. type: Block title
#: upstream/_guides/qute.adoc:77 upstream/_guides/qute.adoc:139
#: upstream/_guides/qute.adoc:174 upstream/_guides/qute.adoc:202
#, no-wrap
msgid "HelloResource.java"
msgstr "HelloResource.java"

#. type: delimited block -
#: upstream/_guides/qute.adoc:81 upstream/_guides/qute.adoc:143
#: upstream/_guides/qute.adoc:178 upstream/_guides/qute.adoc:206
#: upstream/_guides/qute.adoc:262 upstream/_guides/qute.adoc:323
#: upstream/_guides/qute.adoc:393 upstream/_guides/qute.adoc:472
#, no-wrap
msgid "package org.acme.quarkus.sample;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:86 upstream/_guides/qute.adoc:148
#: upstream/_guides/qute.adoc:183
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:89 upstream/_guides/qute.adoc:332
#, no-wrap
msgid ""
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.Template;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:92 upstream/_guides/qute.adoc:154
#, no-wrap
msgid ""
"@Path(\"hello\")\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:95
#, no-wrap
msgid ""
"    @Inject\n"
"    Template hello; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:102
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        return hello.data(\"name\", name); <2> <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:104
msgid "If there is no `@Location` qualifier provided, the field name is used to locate the template. In this particular case, we're injecting a template with path `templates/hello.txt`."
msgstr "`@Location` 修飾子が指定されていない場合は、フィールド名がテンプレートの場所を特定するために使用されます。このケースでは、パスが `templates/hello.txt` であるテンプレートを注入しています。"

#. type: Plain text
#: upstream/_guides/qute.adoc:105
msgid "`Template.data()` returns a new template instance that can be customized before the actual rendering is triggered. In this case, we put the name value under the key `name`. The data map is accessible during rendering."
msgstr "`Template.data()` は、実際のレンダリングがトリガーされる前にカスタマイズできる新しいテンプレートインスタンスを返します。この場合、名前の値をキー `name` の下に置きます。データマップはレンダリング中にアクセス可能です。"

#. type: Plain text
#: upstream/_guides/qute.adoc:106
msgid "Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation."
msgstr "レンダリングをトリガーしないことに注意してください - これは特別な `ContainerResponseFilter` の実装によって自動的に行われます。"

#. type: Plain text
#: upstream/_guides/qute.adoc:108
msgid "If your application is running, you can request the endpoint:"
msgstr "アプリケーションが動作している場合は、エンドポイントを要求することができます:"

#. type: delimited block -
#: upstream/_guides/qute.adoc:113
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello?name=Martin\n"
"Hello Martin!\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/qute.adoc:115
#, no-wrap
msgid "Type-safe templates"
msgstr "タイプセーフテンプレート"

#. type: Plain text
#: upstream/_guides/qute.adoc:118
msgid "There's an alternate way to declare your templates in your Java code, which relies on the following convention:"
msgstr "Java コードでテンプレートを宣言する別の方法もあり、以下の規約に依存しています。"

#. type: Plain text
#: upstream/_guides/qute.adoc:122
msgid "Organise your template files in the `/src/main/resources/templates` directory, by grouping them into one directory per resource class. So, if your `ItemResource` class references two templates `hello` and `goodbye`, place them at `/src/main/resources/templates/ItemResource/hello.txt` and `/src/main/resources/templates/ItemResource/goodbye.txt`. Grouping templates per resource class makes it easier to navigate to them."
msgstr "テンプレートファイルを `/src/main/resources/templates` ディレクトリーに整理し、リソースクラスごとに 1 つのディレクトリーにグループ化します。つまり、 `ItemResource` クラスが `hello` と `goodbye` の 2 つのテンプレートを参照している場合は、 `/src/main/resources/templates/ItemResource/hello.txt` と `/src/main/resources/templates/ItemResource/goodbye.txt` に配置します。リソースクラスごとにテンプレートをグループ化することで、テンプレートへのナビゲートが容易になります。"

#. type: Plain text
#: upstream/_guides/qute.adoc:123
msgid "In each of your resource class, declare a `@CheckedTemplate static class Template {}` class within your resource class."
msgstr "各リソースクラスで、リソースクラス内で `@CheckedTemplate static class Template {}` クラスを宣言します。"

#. type: Plain text
#: upstream/_guides/qute.adoc:124
msgid "Declare one `public static native TemplateInstance method();` per template file for your resource."
msgstr "リ ソ ース のテ ン プ レー ト フ ァ イ ルごとに `public static native TemplateInstance method();` を 1 つずつ宣言 し ます。"

#. type: Plain text
#: upstream/_guides/qute.adoc:125
msgid "Use those static methods to build your template instances."
msgstr "テンプレートインスタンスを構築するには、これらの静的メソッドを使用します。"

#. type: Plain text
#: upstream/_guides/qute.adoc:127
msgid "Here's the previous example, rewritten using this style:"
msgstr "先ほどの例を、このスタイルで書き換えてみました:"

#. type: Block title
#: upstream/_guides/qute.adoc:130
#, no-wrap
msgid "HelloResource/hello.txt"
msgstr "HelloResource/hello.txt"

#. type: Plain text
#: upstream/_guides/qute.adoc:138
msgid "Now let's declare and use those templates in the resource class."
msgstr "では、これらのテンプレートをリソースクラスで宣言して使ってみましょう。"

#. type: delimited block -
#: upstream/_guides/qute.adoc:151
#, no-wrap
msgid ""
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.CheckedTemplate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:159
#, no-wrap
msgid ""
"    @CheckedTemplate\n"
"    public static class Templates {\n"
"        public static native TemplateInstance hello(String name); <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:166
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        return Templates.hello(name); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:168
msgid "This declares a template with path `templates/HelloResource/hello`."
msgstr "これは、パス `templates/HelloResource/hello.txt` でテンプレートを宣言します。"

#. type: Plain text
#: upstream/_guides/qute.adoc:169
msgid "`Templates.hello()` returns a new template instance that is returned from the resource method. Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation."
msgstr "`Templates.hello()` は、リソースメソッドから返される新しいテンプレートインスタンスを返します。 レンダリングをトリガーしないことに注意してください。これは、特別な `ContainerResponseFilter`実装によって自動的に行われます。"

#. type: Plain text
#: upstream/_guides/qute.adoc:171
msgid "Once you have declared a `@CheckedTemplate` class, we will check that all its methods point to existing templates, so if you try to use a template from your Java code and you forgot to add it, we will let you know at build time :)"
msgstr "`@CheckedTemplate` クラスを宣言したら、すべてのメソッドが既存のテンプレートを指しているかどうかをチェックしますので、もし Java コードからテンプレートを使おうとして追加するのを忘れてしまった場合は、ビルド時にお知らせします :)"

#. type: Plain text
#: upstream/_guides/qute.adoc:173
msgid "Keep in mind this style of declaration allows you to reference templates declared in other resources too:"
msgstr "このスタイルの宣言では、他のリソースで宣言されたテンプレートも参照できることを覚えておいてください。"

#. type: delimited block -
#: upstream/_guides/qute.adoc:185
#, no-wrap
msgid "import io.quarkus.qute.TemplateInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:188
#, no-wrap
msgid ""
"@Path(\"goodbye\")\n"
"public class GoodbyeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:195
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        return HelloResource.Templates.hello(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/qute.adoc:197
#, no-wrap
msgid "Top-level type-safe templates"
msgstr "トップレベルのタイプセーフテンプレート"

#. type: Plain text
#: upstream/_guides/qute.adoc:201
msgid "Naturally, if you want to declare templates at the top-level, directly in `/src/main/resources/templates/hello.txt`, for example, you can declare them in a toplevel (non-nested) `Templates` class:"
msgstr "当然のことながら、トップレベルでテンプレートを宣言したい場合、例えば `/src/main/resources/templates/hello.txt` で直接宣言したい場合は、トップレベル(非入れ子)の `Templates` クラスで宣言することができます。"

#. type: delimited block -
#: upstream/_guides/qute.adoc:210 upstream/_guides/qute.adoc:272
#, no-wrap
msgid ""
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.CheckedTemplate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:215
#, no-wrap
msgid ""
"@CheckedTemplate\n"
"public class Templates {\n"
"    public static native TemplateInstance hello(String name); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:217
msgid "This declares a template with path `templates/hello`."
msgstr "これは、パス `templates/hello.txt` でテンプレートを宣言します。"

#. type: Title ==
#: upstream/_guides/qute.adoc:219
#, no-wrap
msgid "Template Parameter Declarations "
msgstr "テンプレートパラメーター宣言"

#. type: Plain text
#: upstream/_guides/qute.adoc:222
msgid "If you declare a *parameter declaration* in a template then Qute attempts to validate all expressions that reference this parameter and if an incorrect expression is found the build fails."
msgstr "テンプレートで *パラメーター宣言* を宣言した場合、Quteはこのパラメーターを参照するすべての式の検証を試み、間違った式が見つかった場合はビルドが失敗します。"

#. type: Plain text
#: upstream/_guides/qute.adoc:224
msgid "Let's suppose we have a simple class like this:"
msgstr "このようなシンプルなクラスがあったとしましょう:"

#. type: Block title
#: upstream/_guides/qute.adoc:225
#, no-wrap
msgid "Item.java"
msgstr "Item.java"

#. type: delimited block -
#: upstream/_guides/qute.adoc:232
#, no-wrap
msgid ""
"public class Item {\n"
"    public String name;\n"
"    public BigDecimal price;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:235
msgid "And we'd like to render a simple HTML page that contains the item name and price."
msgstr "そして、商品名と価格が記載されたシンプルな HTML ページをレンダリングしたいと思います。"

#. type: Plain text
#: upstream/_guides/qute.adoc:237 upstream/_guides/qute.adoc:297
msgid "Let's start again with the template:"
msgstr "改めてテンプレートから始めてみましょう。"

#. type: Block title
#: upstream/_guides/qute.adoc:238
#, no-wrap
msgid "ItemResource/item.html"
msgstr "ItemResource/item.html"

#. type: delimited block -
#: upstream/_guides/qute.adoc:252
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>{item.name}</title> <1>\n"
"</head>\n"
"<body>\n"
"    <h1>{item.name}</h1>\n"
"    <div>Price: {item.price}</div> <2> \n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:254 upstream/_guides/qute.adoc:316
msgid "This expression is validated. Try to change the expression to `{item.nonSense}` and the build should fail."
msgstr "この式は検証済みです。式を `{item.nonSense}` に変更するとビルドに失敗します。"

#. type: Plain text
#: upstream/_guides/qute.adoc:255
msgid "This is also validated."
msgstr "これも検証されています。"

#. type: Plain text
#: upstream/_guides/qute.adoc:257
msgid "Finally, let's create a resource class with type-safe templates:"
msgstr "最後に、タイプセーフなテンプレートを使ってリソースクラスを作ってみましょう。"

#. type: Block title
#: upstream/_guides/qute.adoc:258 upstream/_guides/qute.adoc:319
#, no-wrap
msgid "ItemResource.java"
msgstr "ItemResource.java"

#. type: delimited block -
#: upstream/_guides/qute.adoc:268 upstream/_guides/qute.adoc:329
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:275 upstream/_guides/qute.adoc:335
#, no-wrap
msgid ""
"@Path(\"item\")\n"
"public class ItemResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:280
#, no-wrap
msgid ""
"    @CheckedTemplate\n"
"    public static class Templates {\n"
"        public static native TemplateInstance item(Item item); <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:288
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{id}\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance get(Integer id) {\n"
"        return Templates.item(service.findItem(id)); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:290
msgid "Declare a method that gives us a `TemplateInstance` for `templates/ItemResource/item.html` and declare its `Item item` parameter so we can validate the template."
msgstr "`templates/ItemResource/item.html` に対して `TemplateInstance` を与えるメソッドを宣言し、その `Item item` パラメーターを宣言することで、テンプレートを検証することができます。"

#. type: Plain text
#: upstream/_guides/qute.adoc:291 upstream/_guides/qute.adoc:352
msgid "Make the `Item` object accessible in the template."
msgstr "テンプレート内で `Item` オブジェクトにアクセスできるようにします。"

#. type: Title ===
#: upstream/_guides/qute.adoc:292
#, no-wrap
msgid "Template parameter declaration inside the template itself"
msgstr "テンプレート内部のテンプレートパラメーター宣言"

#. type: Plain text
#: upstream/_guides/qute.adoc:295
msgid "Alternatively, you can declare your template parameters in the template file itself."
msgstr "あるいは、テンプレートファイル自体でテンプレートパラメーターを宣言することもできます。"

#. type: Block title
#: upstream/_guides/qute.adoc:298
#, no-wrap
msgid "item.html"
msgstr "item.html"

#. type: delimited block -
#: upstream/_guides/qute.adoc:313
#, no-wrap
msgid ""
"{@org.acme.Item item} <1>\n"
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>{item.name}</title> <2>\n"
"</head>\n"
"<body>\n"
"    <h1>{item.name}</h1>\n"
"    <div>Price: {item.price}</div> \n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:315
msgid "Optional parameter declaration. Qute attempts to validate all expressions that reference the parameter `item`."
msgstr "オプションのパラメーター宣言。Qute は、パラメーター `item` を参照するすべての式の検証を試みます。"

#. type: Plain text
#: upstream/_guides/qute.adoc:318
msgid "Finally, let's create a resource class."
msgstr "最後に、リソースクラスを作成してみましょう。"

#. type: delimited block -
#: upstream/_guides/qute.adoc:338
#, no-wrap
msgid ""
"    @Inject\n"
"    ItemService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:341
#, no-wrap
msgid ""
"    @Inject\n"
"    Template item; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:349
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{id}\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance get(Integer id) {\n"
"        return item.data(\"item\", service.findItem(id)); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:351
msgid "Inject the template with path `templates/item.html`."
msgstr "パスが `templates/item.html` のテンプレートを注入します。"

#. type: Title ==
#: upstream/_guides/qute.adoc:353
#, no-wrap
msgid "Template Extension Methods"
msgstr "テンプレート拡張メソッド"

#. type: Plain text
#: upstream/_guides/qute.adoc:356
#, no-wrap
msgid "*Template extension methods* are used to extend the set of accessible properties of data objects.\n"
msgstr "*テンプレート拡張メソッド* は 、データオブジェクトのアクセス可能なプロパティーのセットを拡張するために使用されます。\n"

#. type: Plain text
#: upstream/_guides/qute.adoc:360
msgid "Sometimes, you're not in control of the classes that you want to use in your template, and you cannot add methods to them. Template extension methods allows you to declare new method for those classes that will be available from your templates just as if they belonged to the target class."
msgstr "時には、テンプレートで使用したいクラスをコントロールできず、それらのクラスにメソッドを追加できないことがあります。テンプレート拡張メソッドを使うと、テンプレートから利用できるようになるクラスのメソッドを、あたかもターゲットクラスに属しているかのように宣言することができます。"

#. type: Plain text
#: upstream/_guides/qute.adoc:365
msgid "Let's keep extending on our simple HTML page that contains the item name, price and add a discounted price.  The discounted price is sometimes called a \"computed property\".  We will implement a template extension method to render this property easily.  Let's update our template:"
msgstr "アイテム名、価格、値引き価格を含むシンプルな HTML ページを拡張していきましょう。値引き価格は「計算プロパティー」と呼ばれることがあります。このプロパティーを簡単にレンダリングするためのテンプレート拡張メソッドを実装します。テンプレートを更新してみましょう。"

#. type: Block title
#: upstream/_guides/qute.adoc:366
#, no-wrap
msgid "HelloResource/item.html"
msgstr "HelloResource/item.html"

#. type: delimited block -
#: upstream/_guides/qute.adoc:383
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>{item.name}</title>\n"
"</head>\n"
"<body>\n"
"    <h1>{item.name}</h1>\n"
"    <div>Price: {item.price}</div> \n"
"    {#if item.price > 100} <1>\n"
"    <div>Discounted Price: {item.discountedPrice}</div> <2>\n"
"    {/if}\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:385
msgid "`if` is a basic control flow section."
msgstr "`if` は、基本的な制御フローのセクションです。"

#. type: Plain text
#: upstream/_guides/qute.adoc:386
msgid "This expression is also validated against the `Item` class and obviously there is no such property declared. However, there is a template extension method declared on the `TemplateExtensions` class - see below."
msgstr "この式は `Item` クラスに対しても検証されており、明らかにそのようなプロパティーは宣言されていません。しかし、 `TemplateExtensions` クラスにはテンプレート拡張メソッドが宣言されています - 以下を参照してください。"

#. type: Plain text
#: upstream/_guides/qute.adoc:388
msgid "Finally, let's create a class where we put all our extension methods:"
msgstr "最後に、すべての拡張メソッドを置くクラスを作りましょう。"

#. type: Block title
#: upstream/_guides/qute.adoc:389
#, no-wrap
msgid "TemplateExtensions.java"
msgstr "TemplateExtensions.java"

#. type: delimited block -
#: upstream/_guides/qute.adoc:395
#, no-wrap
msgid "import io.quarkus.qute.TemplateExtension;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:398
#, no-wrap
msgid ""
"@TemplateExtension\n"
"public class TemplateExtensions {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:403
#, no-wrap
msgid ""
"    public static BigDecimal discountedPrice(Item item) { <1>\n"
"        return item.price.multiply(new BigDecimal(\"0.9\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:405
msgid "A static template extension method can be used to add \"computed properties\" to a data class. The class of the first parameter is used to match the base object and the method name is used to match the property name."
msgstr "静的テンプレート拡張メソッドを使用して、データクラスに「計算プロパティー」を追加することができます。最初のパラメーターのクラスはベースオブジェクトと一致するように使用され、メソッド名はプロパティー名と一致するように使用されます。"

#. type: Plain text
#: upstream/_guides/qute.adoc:408
msgid "you can place template extension methods in every class if you annotate them with `@TemplateExtension` but we advise to keep them either grouped by target type, or in a single `TemplateExtensions` class by convention."
msgstr "テンプレート拡張メソッドは、 `@TemplateExtension` でアノテーションを付ければ、すべてのクラスに配置することができますが、規約上、ターゲットタイプでグループ化するか、 `TemplateExtensions` クラスにまとめておくことをお勧めします。"

#. type: Title ==
#: upstream/_guides/qute.adoc:409
#, no-wrap
msgid "Rendering Periodic Reports"
msgstr "定期レポートのレンダリング"

#. type: Plain text
#: upstream/_guides/qute.adoc:414
msgid "Templating engine could be also very useful when rendering periodic reports.  You'll need to add the `quarkus-scheduler` and `quarkus-qute` extensions first.  In your `pom.xml` file, add:"
msgstr "テンプレーティングエンジンは、定期的なレポートをレンダリングする際にも非常に便利かもしれません。最初に `quarkus-scheduler` と `quarkus-qute` のエクステンションを追加する必要があります。 `pom.xml` ファイルに追加します。"

#. type: delimited block -
#: upstream/_guides/qute.adoc:425
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-qute</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-scheduler</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:428
msgid "Let's suppose the have a `SampleService` bean whose `get()` method returns a list of samples."
msgstr "`SampleService` Beanがあり、その `get()` メソッドがサンプルのリストを返すとしましょう。"

#. type: Block title
#: upstream/_guides/qute.adoc:429
#, no-wrap
msgid "Sample.java"
msgstr "Sample.java"

#. type: delimited block -
#: upstream/_guides/qute.adoc:437
#, no-wrap
msgid ""
"public class Sample {\n"
"    public boolean valid;\n"
"    public String name;\n"
"    public String data;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:440
msgid "The template is simple:"
msgstr "テンプレートはシンプルです:"

#. type: Block title
#: upstream/_guides/qute.adoc:441
#, no-wrap
msgid "report.html"
msgstr "report.html"

#. type: delimited block -
#: upstream/_guides/qute.adoc:464
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Report {now}</title>\n"
"</head>\n"
"<body>\n"
"    <h1>Report {now}</h1>\n"
"    {#for sample in samples} <1>\n"
"      <h2>{sample.name ?: 'Unknown'}</h2> <2>\n"
"      <p>\n"
"      {#if sample.valid}\n"
"        {sample.data}\n"
"      {#else}\n"
"        <strong>Invalid sample found</strong>.\n"
"      {/if}\n"
"      </p>\n"
"    {/for}\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:466
msgid "The loop section makes it possible to iterate over iterables, maps and streams."
msgstr "ループセクションでは、イテレーション、マップ、ストリームの反復処理が可能になります。"

#. type: Plain text
#: upstream/_guides/qute.adoc:467
msgid "This value expression is using the https://en.wikipedia.org/wiki/Elvis_operator[elvis operator] - if the name is null the default value is used."
msgstr "この値式は link:https://en.wikipedia.org/wiki/Elvis_operator[elvis 演算子] を使用します - nameが NULL の場合はデフォルト値が使用されます。"

#. type: Block title
#: upstream/_guides/qute.adoc:469
#, no-wrap
msgid "ReportGenerator.java"
msgstr "ReportGenerator.java"

#. type: delimited block -
#: upstream/_guides/qute.adoc:474
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr "import javax.inject.Inject;\n"

#. type: delimited block -
#: upstream/_guides/qute.adoc:478
#, no-wrap
msgid ""
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.Location;\n"
"import io.quarkus.scheduler.Scheduled;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:480
#, no-wrap
msgid "public class ReportGenerator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:483
#, no-wrap
msgid ""
"    @Inject\n"
"    SampleService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:486
#, no-wrap
msgid ""
"    @Location(\"reports/v1/report_01\") <1>\n"
"    Template report;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute.adoc:496
#, no-wrap
msgid ""
"    @Scheduled(cron=\"0 30 * * * ?\") <2>\n"
"    void generate() {\n"
"        String result = report\n"
"            .data(\"samples\", service.get())\n"
"            .data(\"now\", java.time.LocalDateTime.now())\n"
"            .render(); <3>\n"
"        // Write the result somewhere...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:498
msgid "In this case, we use the `@Location` qualifier to specify the template path: `templates/reports/v1/report_01.html`."
msgstr "この場合、 `@Location` 修飾子を使用してテンプレートのパスを指定します: `templates/reports/v1/report_01.html` ."

#. type: Plain text
#: upstream/_guides/qute.adoc:499
msgid "Use the `@Scheduled` annotation to instruct Quarkus to execute this method on the half hour. For more information see the xref:scheduler.adoc[Scheduler] guide."
msgstr "`@Scheduled` アノテーションを使用して、Quarkusにこのメソッドを30分毎に実行するよう指示します。詳細については、 link:scheduler[スケジューラーガイド] を参照してください。"

#. type: Plain text
#: upstream/_guides/qute.adoc:500
msgid "The `TemplateInstance.render()` method triggers rendering. Note that this method blocks the current thread."
msgstr "`TemplateInstance.render()` メソッドはレンダリングをトリガします。このメソッドは現在のスレッドをブロックすることに注意してください。"

#. type: Title ==
#: upstream/_guides/qute.adoc:501
#, no-wrap
msgid "Reactive and Asynchronous APIs"
msgstr "リアクティブと非同期API"

#. type: Plain text
#: upstream/_guides/qute.adoc:504
msgid "Templates can be rendered as a `CompletionStage<String>` (completed with the rendered output asynchronously) or as `Publisher<String>` containing the rendered chunks:"
msgstr "テンプレートは、 `CompletionStage<String>` (非同期にレンダリングされた出力で完了)としてレンダリングすることも、レンダリングされたチャンクを含む `Publisher<String>` としてレンダリングすることもできます。"

#. type: delimited block -
#: upstream/_guides/qute.adoc:509
#, no-wrap
msgid ""
"CompletionStage<String> async = template.data(\"name\", \"neo\").renderAsync();\n"
"Publisher<String> publisher = template.data(\"name\", \"neo\").publisher();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:514
msgid "In the case of a `Publisher`, the template is rendered chunk by chunk following the requests from the subscriber.  The rendering is not started until a subscriber requests it.  The returned `Publisher` is an instance of `io.smallrye.mutiny.Multi`."
msgstr "`Publisher` の場合、テンプレートはサブスクライバーからのリクエストに応じてチャンクごとにレンダリングされます。レンダリングは、サブスクライバーがリクエストするまで開始されません。返された `Publisher` は `io.smallrye.mutiny.Multi` のインスタンスです。"

#. type: Plain text
#: upstream/_guides/qute.adoc:516
msgid "It is possible to create an instance of `io.smallrye.mutiny.Uni` as follows:"
msgstr "以下のように、 `io.smallrye.mutiny.Uni` のインスタンスを作成することができます:"

#. type: delimited block -
#: upstream/_guides/qute.adoc:520
#, no-wrap
msgid "Uni<String> uni = Uni.createFrom().completionStage(() -> template.data(\"name\", \"neo\").renderAsync());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute.adoc:523
msgid "In this case, the rendering only starts once the subscriber requests it."
msgstr "この場合、サブスクライバーが要求した場合にのみレンダリングが開始されます。"

#. type: Title ==
#: upstream/_guides/qute.adoc:524
#, no-wrap
msgid "Qute Reference Guide"
msgstr "Qute リファレンスガイド"

#. type: Plain text
#: upstream/_guides/qute.adoc:527
msgid "To learn more about Qute, please refer to the xref:qute-reference.adoc[Qute reference guide]."
msgstr "Qute について詳しく知りたい方は、 link:qute-reference[Qute リファレンスガイド] を参考にしてください。"

#. type: Title ==
#: upstream/_guides/qute.adoc:529
#, no-wrap
msgid "Qute Configuration Reference"
msgstr "Qute 設定リファレンス"

#~ msgid "`Templates.hello()` returns a new template instance that can be customized before the actual rendering is triggered. In this case, we put the name value under the key `name`. The data map is accessible during rendering."
#~ msgstr "`Templates.hello()` は、実際のレンダリングがトリガーされる前にカスタマイズできる新しいテンプレートインスタンスを返します。この場合、名前の値をキー `name` の下に置きます。データマップはレンダリング中にアクセス可能です。"
