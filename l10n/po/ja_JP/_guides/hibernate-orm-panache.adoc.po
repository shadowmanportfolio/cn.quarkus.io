# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2022-01-21 22:50+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: om\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/hibernate-orm-panache.adoc:6
#, no-wrap
msgid "Simplified Hibernate ORM with Panache"
msgstr "シンプルになったHibernate ORM with Panache"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:14
msgid "Hibernate ORM is the de facto JPA implementation and offers you the full breadth of an Object Relational Mapper.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "Hibernate ORMは事実上のJPA実装であり、オブジェクトリレーショナルマッパーの全幅を提供します。複雑なマッピングを可能にしますが、単純で一般的なマッピングを些細なことにするものではありません。Hibernate ORM with Panacheは、エンティティーを些細なことではなく、Quarkusで書くのが楽しくなるようにすることに焦点を当てています。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:15
#, no-wrap
msgid "First: an example"
msgstr "最初に:一例"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:18
#, fuzzy
msgid "What we're doing in Panache is to allow you to write your Hibernate ORM entities like this:"
msgstr "Panacheでやっていることは、Hibernate "
"ORMエンティティーをこのように書けるようにすることです。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:25
#, no-wrap
msgid ""
"public enum Status {\n"
"    Alive,\n"
"    Deceased\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:31
#: upstream/_guides/hibernate-orm-panache.adoc:146
#: upstream/_guides/hibernate-orm-panache.adoc:249
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:35
#: upstream/_guides/hibernate-orm-panache.adoc:253
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:39
#: upstream/_guides/hibernate-orm-panache.adoc:257
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:44
#: upstream/_guides/hibernate-orm-panache.adoc:262
#, no-wrap
msgid ""
"    public static void deleteStefs(){\n"
"        delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:48
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr "コードがどれだけコンパクトで読みやすくなっているかお気づきですか?面白いと思いませんか?読んでみてください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:50
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "`list()` メソッドには、最初は驚くかもしれません。これは HQL (JP-QL) クエリの断片を取り、残りの部分をコンテキスト化します。これにより、非常に簡潔でありながら読みやすいコードになっています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:53
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上記で説明したものは、基本的には link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[アクティブレコードパターン] であり、エンティティーパターンと呼ばれることもあります。Hibernate with Panache は、 `PanacheRepository` を通じて、より古典的な link:https://martinfowler.com/eaaCatalog/repository.html[リポジトリパターン] を使用することもできます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:54
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:58
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:60
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:62
msgid "The solution is located in the `hibernate-orm-panache-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr "ソリューションは `hibernate-orm-panache-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:64
#, fuzzy, no-wrap
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr "シンプルになったHibernate ORM with Panache"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:67
#, fuzzy
msgid "To get started:"
msgstr "始めるには"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:69
#, fuzzy
msgid "add your settings in `{config-file}`"
msgstr "で設定を追加します。 `{config-file}`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:70
#, fuzzy
msgid "annotate your entities with `@Entity`"
msgstr "エンティティにアノテーションを `@Entity`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:71
#, fuzzy
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "エンティティが `PanacheEntity` "
"を拡張するようにする（リポジトリパターンを使用している場合はオプション）。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:73
#, fuzzy
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr ""
"link:hibernate-orm.html#setting-up-and-configuring-hibernate-"
"orm[すべての設定は、Hibernateセットアップガイド]に従ってください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:75
#, fuzzy
msgid "In your build file, add the following dependencies:"
msgstr "ビルドファイルに、以下の依存関係を追加します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:77
#, fuzzy
msgid "the Hibernate ORM with Panache extension"
msgstr "シンプルになったHibernate ORM with Panache"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:78
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr "お使いの JDBC ドライバーエクステンション ( `quarkus-jdbc-postgresql` , `quarkus-jdbc-h2` , `quarkus-jdbc-mariadb` , ...)"

#. type: Block title
#: upstream/_guides/hibernate-orm-panache.adoc:80
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:87
#, no-wrap
msgid ""
"<!-- Hibernate ORM specific dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-orm-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:93
#, no-wrap
msgid ""
"<!-- JDBC driver dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/hibernate-orm-panache.adoc:96
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:100
#, no-wrap
msgid ""
"// Hibernate ORM specific dependencies\n"
"implementation(\"io.quarkus:quarkus-hibernate-orm-panache\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:103
#, no-wrap
msgid ""
"// JDBC driver dependencies\n"
"implementation(\"io.quarkus:quarkus-jdbc-postgresql\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:106
#, fuzzy
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、 `{config-file}` で関連する構成プロパティを追加します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:114
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:117
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:119
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:121
#: upstream/_guides/hibernate-orm-panache.adoc:267
#, no-wrap
msgid "Defining your entity"
msgstr "エンティティーの定義"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:125
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr "Panache エンティティーを定義するには、 `PanacheEntity` を拡張して `@Entity` とアノテーションを付け、列をパブリック フィールドとして追加します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:134
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:138
#, fuzzy
msgid "You can put all your JPA column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr ""
"JPAのカラムアノテーションをすべてパブリックフィールドにつけることができます。"
"永続化されないフィールドが必要な場合は、 `@Transient` "
"アノテーションを使用します。アクセサを書く必要があれば、それも可能です。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:151
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:157
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:162
#, fuzzy
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr ""
"また、当社のフィールドアクセスリライトのおかげで、ユーザーが `person.name` "
"を読むときには、実際に `getName()` アクセサが呼び出され、フィールドの書き込み"
"やセッターについても同様です。これにより、すべてのフィールドの呼び出しが、対"
"応するゲッター/セッターの呼び出しに置き換えられるため、実行時に適切なカプセル"
"化が可能になります。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:163
#: upstream/_guides/hibernate-orm-panache.adoc:350
#, no-wrap
msgid "Most useful operations"
msgstr "最も便利な操作"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:166
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、ここでは実行できる最も一般的な操作を紹介します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:174
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:177
#, no-wrap
msgid ""
"// persist it\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:180
#: upstream/_guides/hibernate-orm-panache.adoc:367
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:186
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:189
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:192
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:196
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:199
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:202
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:205
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:208
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:211
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:214
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:217
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:221
#: upstream/_guides/hibernate-orm-panache.adoc:408
msgid "All `list` methods have equivalent `stream` versions."
msgstr "すべての `list` メソッドは、同等の `stream` バージョンがあります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:230
#, no-wrap
msgid ""
"try (Stream<Person> persons = Person.streamAll()) {\n"
"    List<String> namesButEmmanuels = persons\n"
"        .map(p -> p.name.toLowerCase() )\n"
"        .filter( n -> ! \"emmanuel\".equals(n) )\n"
"        .collect(Collectors.toList());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:235
#, fuzzy
msgid "The `stream` methods require a transaction to work. + As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.  If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr ""
"`stream` のメソッドは、動作にトランザクションを必要とします。+ "
"これらのメソッドは I/O 操作を行うため、 `close()` メソッドを介して、または "
"try-with-resource を介して、基礎となる `ResultSet` "
"を閉じなければなりません。そうしないと、Agroal からの警告が表示され、"
"基礎となる `ResultSet` を閉じてくれます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:236
#, fuzzy, no-wrap
msgid "Adding entity methods"
msgstr "エンティティメソッドの追加"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:241
#, fuzzy
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr ""
"エンティティに対するカスタムクエリを、エンティティ自体の中に追加できます。そ"
"うすることで、自分や同僚が簡単に見つけることができ、クエリは操作するオブジェ"
"クトと一緒に配置されます。"
"エンティティクラスにスタティックメソッドとして追加するのがPanache Active "
"Recordのやり方です。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:264
#, fuzzy, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:270
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr "リポジトリパターンを使用する場合、エンティティーを通常のJPAエンティティーとして定義することができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:279
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:305
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:309
#, fuzzy
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr ""
"エンティティにゲッター/セッターを定義するのが面倒な場合は、 "
"`PanacheEntityBase` を拡張するようにすれば、Quarkusが生成してくれます。また、"
" `PanacheEntity` を拡張して、デフォルトのIDを利用することもできます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:310
#, fuzzy, no-wrap
msgid "Defining your repository"
msgstr "エンティティーの定義"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:314
#, fuzzy
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr ""
"リポジトリを使用する場合、アクティブレコードパターンとまったく同じ便利なメソ"
"ッドをリポジトリに注入し、implements `PanacheRepository` "
"にすることで得られます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:319
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:321
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:325
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:329
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:334
#, no-wrap
msgid ""
"   public void deleteStefs(){\n"
"       delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:338
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` で定義されている操作はすべてリポジトリ上で利用可能なので、これを使用することはアクティブレコードパターンを使用するのと全く同じですが、それを注入する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:343
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:348
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:353
#, fuzzy
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、ここでは実行できる最も一般的な操作を紹介します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:361
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:364
#, no-wrap
msgid ""
"// persist it\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:373
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:376
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:379
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:383
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:386
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:389
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:392
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:395
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:398
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:401
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:404
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:416
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:419
msgid "The `stream` methods require a transaction to work."
msgstr "`stream` メソッドが動作するにはトランザクションが必要です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:423
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "残りのドキュメントでは、アクティブレコードパターンに基づく使用法のみを示していますが、リポジトリパターンでも実行できることを覚えておいてください。リポジトリパターンの例は簡潔にするために省略しています。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:424
#, fuzzy, no-wrap
msgid "Writing a JAX-RS resource"
msgstr "JAX-RSリソースの記述"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:427
#, fuzzy
msgid "First, include one of the RESTEasy Reactive extensions to enable JAX-RS endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for JAX-RS and JSON support."
msgstr ""
"まず、JAX-RSエンドポイントを有効にするために、RESTEasyのエクステンションの1つ"
"を含めます。例えば、JAX-RSとJSONのサポートのために、 `io.quarkus:quarkus-"
"resteasy-jackson` の依存関係を追加します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:429
#, fuzzy
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "そして、次のようなリソースを作成することで、Personエンティティの作成/読み取り"
"/更新/削除が可能になります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:436
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:441
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Person> list() {\n"
"        return Person.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:447
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person get(Long id) {\n"
"        return Person.findById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:454
#, no-wrap
msgid ""
"    @POST\n"
"    @Transactional\n"
"    public Response create(Person person) {\n"
"        person.persist();\n"
"        return Response.created(URI.create(\"/persons/\" + person.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:463
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public Person update(Long id, Person person) {\n"
"        Person entity = Person.findById(id);\n"
"        if(entity == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:466
#, no-wrap
msgid ""
"        // map all fields from the person parameter to the existing entity\n"
"        entity.name = person.name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:469
#, no-wrap
msgid ""
"        return entity;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:480
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public void delete(Long id) {\n"
"        Person entity = Person.findById(id);\n"
"        if(entity == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
"        entity.delete();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:486
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search/{name}\")\n"
"    public Person search(String name) {\n"
"        return Person.findByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:493
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/count\")\n"
"    public Long count() {\n"
"        return Person.count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:497
#, fuzzy
msgid "Be careful to use the `@Transactional` annotation on the operations that modify the database, you can add the annotation at the class level for simplicity purpose."
msgstr ""
"データベースを変更する操作には `@Transactional` アノテーションを使用するよう"
"に注意してください。わかりやすくするために、クラスレベルでアノテーションを追"
"加することもできます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:498
#, fuzzy, no-wrap
msgid "Advanced Query"
msgstr "アドバンスドクエリー"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:500
#, fuzzy, no-wrap
msgid "Paging"
msgstr "ページング"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:504
#, fuzzy
msgid "You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""
"`list` および `stream` メソッドは、テーブルに含まれるデータセットが十分に小さ"
"い場合にのみ使用してください。より大きなデータセットの場合は、同等の `find` "
"メソッドを使用して、ページングが可能な `PanacheQuery` を返すことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:509
#: upstream/_guides/hibernate-orm-panache.adoc:545
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:512
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:515
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:518
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:521
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:524
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:527
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"long count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:533
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:536
#, fuzzy
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` タイプには、ページングやリターンストリームを処理するための他の"
"多くのメソッドがあります。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:537
#, fuzzy, no-wrap
msgid "Using a range instead of pages"
msgstr "ページではなく範囲を使用"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:540
#, fuzzy
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、範囲ベースのクエリも可能です。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:548
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:551
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:554
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:560
#, fuzzy
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr ""
"`page(Page)` `page(int, "
"int)`範囲とページを混在させることはできません。範囲を使用した場合、"
"現在のページを持っていることに依存するすべてのメソッドは "
"`UnsupportedOperationException` をスローします。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:562
#, fuzzy, no-wrap
msgid "Sorting"
msgstr "ソート"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:565
#, fuzzy
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "クエリ文字列を受け付けるすべてのメソッドは、以下の簡略化されたクエリ形式も受"
"け付けます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:569
#, no-wrap
msgid "List<Person> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:572
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows your to abstract your sorting:"
msgstr "しかし、これらのメソッドには、オプションで `Sort` というパラメータが用意され"
"ており、これによってソートの抽象化が可能になります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:576
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:579
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:582
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` クラスには、列を追加したり、ソート方向を指定したりするメソッドが豊富に"
"用意されています。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:583
#, fuzzy, no-wrap
msgid "Simplified queries"
msgstr "シンプルなクエリ"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:587
#, fuzzy
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr ""
"通常、HQLのクエリは、 `from EntityName [where …​] [order by …​]` "
"、最後にオプションの要素を持つという形式になっています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:589
#, fuzzy
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "セレクトクエリが `from` "
"で始まらない場合は、以下の追加フォームをサポートしています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:591
#, fuzzy
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by …​` に拡大する予定です。 `from EntityName order by …​`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:592
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr ""
"`<singleColumnName>` （およびシングルパラメータ）に展開されます。 `from "
"EntityName where <singleColumnName> = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:593
#, fuzzy
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` に展開します。 `from EntityName where <query>`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:595
#, fuzzy
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "更新クエリが `update` "
"で始まらない場合は、以下の追加フォームをサポートしています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:597
#, fuzzy
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName …​` に拡大する予定です。 `update from EntityName …​`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:598
#, fuzzy
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr ""
"`set? <singleColumnName>` （およびシングルパラメータ）に展開されます。 `"
"update from EntityName set <singleColumnName> = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:599
#, fuzzy
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr ""
"`set? <update-query>` に展開します。 `update from EntityName set <update-"
"query>`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:601
#, fuzzy
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "削除クエリが `delete` "
"で始まらない場合は、以下の追加フォームをサポートしています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:603
#, fuzzy
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName …​` に拡大する予定です。 `delete from EntityName …​`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:604
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr ""
"`<singleColumnName>` （およびシングルパラメータ）に展開されます。 `delete "
"from EntityName where <singleColumnName> = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:605
#, fuzzy
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` に展開します。 `delete from EntityName where <query>`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:608
#, fuzzy
msgid "You can also write your queries in plain link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]:"
msgstr ""
"また、クエリをプレーンな link:https://docs.jboss.org/hibernate/orm/5.4/"
"userguide/html_single/Hibernate_User_Guide."
"html#hql[HQL]で書くこともできます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:613
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update from Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:615
#, fuzzy, no-wrap
msgid "Named queries"
msgstr "ネームドクエリー"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:618
#, fuzzy
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr ""
"名前付きのクエリは、その名前の前に「#」文字を付けることで、（簡易）HQLクエリ"
"の代わりに参照することができます。また、名前付きのクエリは、カウント、アップ"
"デート、削除のクエリにも使用できます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:628
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQueries({\n"
"    @NamedQuery(name = \"Person.getByName\", query = \"from Person where name = ?1\"),\n"
"    @NamedQuery(name = \"Person.countByStatus\", query = \"select count(*) from Person p where p.status = :status\"),\n"
"    @NamedQuery(name = \"Person.updateStatusById\", query = \"update Person p set p.status = :status where p.id = :id\"),\n"
"    @NamedQuery(name = \"Person.deleteById\", query = \"delete from Person p where p.id = ?1\")\n"
"})\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:633
#, no-wrap
msgid ""
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:637
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:641
#, no-wrap
msgid ""
"    public static long countByStatus(Status status) {\n"
"        return count(\"#Person.countByStatus\", Parameters.with(\"status\", status).map());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:645
#, no-wrap
msgid ""
"    public static long updateStatusById(Status status, long id) {\n"
"        return update(\"#Person.updateStatusById\", Parameters.with(\"status\", status).and(\"id\", id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:650
#, no-wrap
msgid ""
"    public static long deleteById(long id) {\n"
"        return delete(\"#Person.deleteById\", id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:656
#, fuzzy
msgid "Named queries can only be defined inside your JPA entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr ""
"名前付き問い合わせは、JPAのエンティティクラス（Panacheのエンティティクラスや"
"リポジトリのパラメータ付きタイプ）の内部、またはそのスーパークラスのいずれか"
"でしか定義できません。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:658
#, no-wrap
msgid "Query parameters"
msgstr "クエリパラメーター"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:661
#, fuzzy
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "以下のように、インデックス（1ベース）でクエリパラメータを渡すことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:665
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:668
#, fuzzy
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` を使った名前で。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:675
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:678
#, fuzzy
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または、コンビニエンスクラス `Parameters` をそのまま使用するか、 `Map` "
"を構築する。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:684
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:688
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:691
#, fuzzy
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr ""
"すべてのクエリ操作は、インデックス( `Object…​`)または名前( "
"`Map<String,Object>` または `Parameters`)でパラメータを渡すことができます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:692
#, fuzzy, no-wrap
msgid "Query projection"
msgstr "クエリの投影"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:695
#, fuzzy
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr ""
"クエリの投影は、 `find()` のメソッドが返す `PanacheQuery` "
"オブジェクトに対して `project(Class)` のメソッドで行うことができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:697
#, fuzzy
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "これを使って、データベースから返されるフィールドを制限することができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:701
#, fuzzy
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]"
msgstr ""
"Hibernateは *DTOプロジェクション*を使用して、プロジェクションクラスの属性を持"
"つSELECT句を生成します。これは、 *動的インスタンス化*またはコンス "
"*トラクタ式*とも呼ばれ、詳細はHibernateガイドの link:https://docs.jboss.org/"
"hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-"
"select-clause[hql select clause]を参照してください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:704
#, fuzzy
msgid "The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This class must have a matching constructor with all the class attributes as parameters."
msgstr ""
"プロジェクションクラスは、有効な Java Bean であり、すべての属性を含むコンスト"
"ラクタを持つ必要があります。このコンストラクタは、エンティティクラスを使用す"
"る代わりに、プロジェクション DTO をインスタンス化するために使用されます。この"
"クラスは、すべてのクラス属性をパラメータとして持つ一致するコンストラクタを持"
"つ必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:709
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:713
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:718
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:721
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:723
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:724
#, fuzzy
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "ここではパブリックフィールドを使用していますが、必要に応じてプライベートフィ"
"ールドやゲッター/セッターを使用することもできます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:725
#, fuzzy
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr ""
"このコンストラクタは、Hibernate によって使用されます。このコンストラクタは、"
"クラス内の唯一のコンストラクタであり、パラメータとしてすべてのクラス属性を持"
"つ必要があります。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:732
#, fuzzy
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your `pom.xml`."
msgstr ""
"`project(Class)` メソッドの実装では、"
"コンストラクタのパラメータ名を使用してクエリの select 節を構築するため、コン"
"パイルされたクラスの内部にパラメータ名を格納するようにコンパイラを設定する必"
"要があります。Quarkus Mavenアーキタイプを使用している場合、これはデフォルトで"
"有効になっています。これを使用していない場合は、プロパティ `<maven.compiler."
"parameters>true</maven.compiler.parameters>` を `pom.xml` "
"に追加してください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:735
#, fuzzy
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr ""
"DTO プロジェクション・オブジェクトに、参照されるエンティティのフィールドがあ"
"る場合、 `@ProjectedFieldName` アノテーションを使用して、SELECT "
"文のパスを提供することができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:745
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:750
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:756
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:758
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:760
#, fuzzy
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "`ownerName` DTOコンストラクタのパラメータは、 `owner.name` "
"HQLプロパティから読み込まれます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:761
#, no-wrap
msgid "Multiple Persistence Units"
msgstr "複数の永続性ユニット"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:764
#, fuzzy
msgid "The support for multiple persistence units is described in detail in xref:hibernate-orm.adoc#multiple-persistence-units[the Hibernate ORM guide]."
msgstr ""
"複数の永続化ユニットのサポートについては、 link:hibernate-orm.html#multiple-"
"persistence-units[Hibernate ORMガイド]で詳しく説明されています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:766
#, fuzzy
msgid "When using Panache, things are simple:"
msgstr "パナシェの使い方は簡単です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:768
#, fuzzy
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr "1つのPanacheエンティティは、1つの永続性ユニットにしかアタッチできません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:769
#, fuzzy
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr ""
"そう考えると、Panacheはすでに、Panacheエンティティに関連する適切な "
"`EntityManager` を透過的に見つけるために必要な配管を提供しています。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:770
#, no-wrap
msgid "Transactions"
msgstr "トランザクション"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:775
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "データベースを変更するメソッド (例: `entity.persist()` ) をトランザクション内でラップするようにしてください。CDI Beanメソッド `@Transactional` をマークすることで、それを実現出来、そのメソッドをトランザクションの境界に出来ます。REST エンドポイントコントローラーのように、アプリケーションのエントリーポイントの境界でこれを行うことをお勧めします。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:781
#, fuzzy
msgid "JPA batches changes you make to your entities and sends changes (it's called flush) at the end of the transaction or before a query.  This is usually a good thing as it's more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when JPA send those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr ""
"JPAは、エンティティに加えた変更をバッチ処理し、トランザクションの最後やクエリ"
"の前に変更を送信します（これをフラッシュと呼びます）。これは通常、より効率的"
"で良いことです。しかし、楽観的なロックの失敗をチェックしたり、すぐにオブジェ"
"クトの検証を行ったり、一般的にすぐにフィードバックを得たい場合は、 `entity."
"flush()` を呼び出して強制的にフラッシュ操作を行うか、あるいは `entity."
"persistAndFlush()` "
"を使用して単一のメソッド呼び出しとすることができます。これにより、"
"JPAが変更をデータベースに送信する際に発生する可能性のある "
"`PersistenceException` をキャッチすることができます。ただし、これは効率が悪い"
"ので悪用しないでください。また、トランザクションは依然としてコミットされなけ"
"ればなりません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:783
#, fuzzy
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "ここでは、 `PersistenceException` の場合に特定の動作を可能にする flush "
"メソッドの使用例を示します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:797
#, no-wrap
msgid ""
"@Transactional\n"
"public void create(Parameter parameter){\n"
"    try {\n"
"        //Here I use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"        return parameterRepository.persistAndFlush(parameter);\n"
"    }\n"
"    catch(PersistenceException pe){\n"
"        LOG.error(\"Unable to create the parameter\", pe);\n"
"        //in case of error, I save it to disk\n"
"        diskPersister.save(parameter);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:799
#, fuzzy, no-wrap
msgid "Lock management"
msgstr "ロック管理"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:802
#, fuzzy
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr ""
"Panacheは、 `findById(Object, LockModeType)` または `find()."
"withLock(LockModeType)` を使用して、お客様のエンティティ/リポジトリでデータベ"
"ースロックを直接サポートします。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:804
#, fuzzy
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "以下の例は、アクティブレコードパターンの場合ですが、リポジトリでも同じように"
"使用できます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:805
#, fuzzy, no-wrap
msgid "First: Locking using findById()."
msgstr "最初にfindById()を使ってロックする。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:810
#: upstream/_guides/hibernate-orm-panache.adoc:827
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:818
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByIdForUpdate(Long id){\n"
"        Person p = Person.findById(id, LockModeType.PESSIMISTIC_WRITE);\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:820
#: upstream/_guides/hibernate-orm-panache.adoc:837
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:822
#, fuzzy, no-wrap
msgid "Second: Locking in a find()."
msgstr "2つ目：find()でロックする。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:835
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByNameForUpdate(String name){\n"
"        Person p = Person.find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).findOne();\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:840
#, fuzzy
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr ""
"トランザクションが終了するとロックが解放されるので、"
"ロッククエリを呼び出すメソッドには `@Transactional` "
"アノテーションを付ける必要がありますのでご注意ください。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:841
#, fuzzy, no-wrap
msgid "Custom IDs"
msgstr "カスタムID"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:845
#, fuzzy
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr "IDは微妙な問題で、誰もがフレームワークに任せることができるわけではありません"
"が、私たちがサポートします。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:848
#, fuzzy
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr ""
"`PanacheEntity` ではなく `PanacheEntityBase` を拡張することで、独自のID戦略を"
"指定することができます。そうすれば、好きなIDをパブリック・フィールドとして宣"
"言するだけです。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:853
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:862
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:865
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:869
#, fuzzy
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr ""
"リポジトリを使用している場合は、 `PanacheRepository` の代わりに "
"`PanacheRepositoryBase` を拡張し、ID "
"タイプを追加のタイプパラメータとして指定することになります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:876
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:878
#, no-wrap
msgid "Mocking"
msgstr "モック"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:880
#, no-wrap
msgid "Using the active record pattern"
msgstr "アクティブレコードパターンの使用"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:885
#, fuzzy
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr ""
"アクティブ・レコード・パターンを使用している場合、Mockitoはスタティック・メソ"
"ッドのモックをサポートしていないため、直接使用することはできませんが、 "
"`quarkus-panache-mock` モジュールを使用することで、Mockitoを使用して、あなた"
"自身のメソッドを含む、提供されたすべてのスタティック・メソッドをモックするこ"
"とができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:887
#, fuzzy
msgid "Add this dependency to your `pom.xml`:"
msgstr "この依存関係を `pom.xml` に追加してください。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:895
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:899
#: upstream/_guides/hibernate-orm-panache.adoc:1038
#, fuzzy
msgid "Given this simple entity:"
msgstr "このシンプルな実体があれば"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:904
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:906
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:911
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:914
#: upstream/_guides/hibernate-orm-panache.adoc:1065
#, fuzzy
msgid "You can write your mocking test like this:"
msgstr "モッキングテストはこのように書くことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:919
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:923
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:926
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:930
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:934
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:938
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:941
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:947
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:951
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:955
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:958
#, no-wrap
msgid ""
"        // Mocking a void method\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:967
#, no-wrap
msgid ""
"        // Make it throw\n"
"        PanacheMock.doThrow(new RuntimeException(\"Stef2\")).when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"Stef2\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:971
#, no-wrap
msgid ""
"        // Back to doNothing\n"
"        PanacheMock.doNothing().when(Person.class).voidMethod();\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:980
#, no-wrap
msgid ""
"        // Make it call the real method\n"
"        PanacheMock.doCallRealMethod().when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"void\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:987
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeast(4)).voidMethod();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:990
#, fuzzy
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr ""
"`verify` と `do*` のメソッドは、必ず `Mockito` ではなく `PanacheMock` で呼び"
"出すようにしてください。そうしないと、どのモックオブジェクトを渡せばいいのか"
"わからなくなってしまいます。"

#. type: Title ====
#: upstream/_guides/hibernate-orm-panache.adoc:991
#, fuzzy, no-wrap
msgid "Mocking `EntityManager`, `Session` and entity instance methods"
msgstr "`EntityManager`, `Session`, エンティティインスタンスメソッドのモッキング"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:994
#, fuzzy
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate ORM `Session` object:"
msgstr ""
"`persist()` "
"のようなエンティティインスタンスのメソッドをモックする必要がある場合は、"
"Hibernate ORM `Session` オブジェクトをモックすることで実現できます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:999
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMockingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1002
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Session session;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1010
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Query mockQuery = Mockito.mock(Query.class);\n"
"        Mockito.doNothing().when(session).persist(Mockito.any());\n"
"        Mockito.when(session.createQuery(Mockito.anyString())).thenReturn(mockQuery);\n"
"        Mockito.when(mockQuery.getSingleResult()).thenReturn(0l);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1017
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        Person p = new Person();\n"
"        // mocked via EntityManager mocking\n"
"        p.persist();\n"
"        Assertions.assertNull(p.id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1021
#, no-wrap
msgid ""
"        Mockito.verify(session, Mockito.times(1)).persist(Mockito.any());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1023
#, fuzzy, no-wrap
msgid "Using the repository pattern"
msgstr "アクティブレコードパターンの使用"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1027
#, fuzzy
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr ""
"リポジトリパターンを使用している場合は、 `quarkus-junit5-mockito` "
"モジュールを使用して、Mockito を直接使用することができます。これにより、ビー"
"ンのモッキングが非常に簡単になります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1035
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1043
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1047
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1050
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1053
#, fuzzy
msgid "And this repository:"
msgstr "そしてこのリポジトリ。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1062
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1072
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1077
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1081
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1085
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1089
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1092
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1098
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1102
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1105
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1112
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1114
#, no-wrap
msgid "How and why we simplify Hibernate ORM mappings"
msgstr "Hibernate ORMマッピングを単純化する方法と理由"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1118
msgid "When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "Hibernate ORM エンティティーを書くことになると、ユーザーが不本意ながらも対処することに慣れてしまった、いくつかの厄介事があります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1121
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr "IDロジックの重複:ほとんどのエンティティにはIDが必要ですが、モデルとはあまり関係がないため、ほとんどの人はIDの設定方法を気にしません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1127
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires a split between the state and its operations even though we would never do something like that for regular objects in the Object Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr ""
"伝統的なEEパターンでは、エンティティの定義（モデル）とそれに対する操作（DAOや"
"リポジトリ）を分離することが推奨されていますが、実際には、状態とその操作を分"
"離する必要があります。さらに、エンティティごとに2つのクラスが必要となり、エン"
"ティティの操作を行う必要があるDAOやリポジトリをインジェクションする必要があり"
"ます。これにより、編集フローが崩れ、インジェクションポイントを設定するために"
"書いているコードから抜け出して、戻ってきて使用する必要があります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1129
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "Hibernateのクエリは非常に強力ですが、一般的な操作には冗長すぎるため、すべての部分が必要ない場合でもクエリを書く必要があります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1131
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr "Hibernateは非常に汎用性が高いのですが、モデルの使用量の9割を占めるような些細な操作をしても些細にはなりません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1133
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Panacheでは、これらの問題に対して、定見に基づいたアプローチをとりました。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1136
#, fuzzy
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr ""
"エンティティは `PanacheEntity` を拡張するようにしてください：自動生成されるID"
"フィールドがあります。カスタムのID戦略が必要な場合は、代わりに "
"`PanacheEntityBase` を拡張して、IDを自分で処理することができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1139
#, fuzzy
msgid "Use public fields. Get rid of dumb getter and setters. Hibernate ORM w/o Panache also doesn't require you to use getters and setters, but Panache will additionally generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses. This implies that from the Hibernate perspective you're using accessors via getters and setters even while it looks like field accessors."
msgstr ""
"パブリックフィールドを使う。馬鹿げたゲッターとセッターを取り除きます。"
"Panacheを持たないHibernate ORMでもゲッターとセッターを使う必要はありませんが"
"、Panacheはさらに不足しているすべてのゲッターとセッターを生成し、これらのフィ"
"ールドへのすべてのアクセスをアクセサメソッドを使うように書き換えます。このよ"
"うにして、必要なときに _有用な_アクセサを書くことができ、エンティティユーザが"
"フィールドアクセスを使用していても、それが使用されます。これは、Hibernateの観"
"点からは、フィールドアクセサのように見えても、ゲッターとセッターを介してアク"
"セサを使用していることを意味します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1142
#, fuzzy
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr ""
"アクティブレコードパターンでは、すべてのエンティティロジックをエンティティク"
"ラスのスタティックメソッドに置き、DAOを作りません。エンティティスーパークラス"
"には、非常に便利なスタティックメソッドがたくさん用意されていますし、エンティ"
"ティクラスに独自のメソッドを追加することもできます。 `Person.` ユーザーは、 "
"`Person` と入力するだけで、すべての操作を一か所で完了させることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1145
#, fuzzy
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr ""
"`Person.find(\"order by name\")` や `Person.find(\"name = ?1 and status = ?"
"2\", \"stef\", Status.Alive)` 、さらには `Person.find(\"name\", \"stef\")` "
"のように、必要のない部分を書かないようにしましょう。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1147
#, fuzzy
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr "以上、Panacheを使えば、Hibernate "
"ORMがこれほどまでに整然としたものになるのか、ということです。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1148
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1151
msgid "Hibernate ORM with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate ORM with Panacheは、コンパイル時のエンティティーに対するバイトコード強化に依存しています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1157
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "この機能は、マーカーファイル `META-INF/panache-archive.marker` の存在によって Panache エンティティー の存在するアーカイブ(および Panache エンティティーの消費者) を識別しようとします 。Panache にはアノテーション プロセッサーが含まれており、 (間接的であっても) Panache に依存しているアーカイヴでこのファイルを自動的に作成します。アノテーションプロセッサーを無効にしている場合は、場合によってはこのファイルを手動で作成する必要があるかもしれません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1161
#, fuzzy
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr ""
"jpa-modelgenアノテーションプロセッサをインクルードすると、デフォルトでPanache"
"アノテーションプロセッサが除外されます。この場合、マーカーファイルを自分で作"
"成するか、以下のように `quarkus-panache-common` も追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1182
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#~ msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
#~ msgstr "間抜けなゲッターとセッター：Javaは言語組込のプロパティのサポートが無いため、フィールドを作成してから、フィールドの読み取り/書き込み以外のことを実際に行わない場合でも、それらのフィールドのゲッターとセッターを生成する必要があります。"
