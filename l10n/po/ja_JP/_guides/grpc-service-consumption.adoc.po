# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2021-03-21 21:57+0900\n"
"Last-Translator: Nobuhiro Sue <nobuhiro.sue@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/grpc-service-consumption.adoc:6
#, no-wrap
msgid "Consuming a gRPC Service"
msgstr "gRPC サービスを消費する"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:11
#, fuzzy
msgid "gRPC clients can be injected in your application code."
msgstr "gRPCクライアントは、アプリケーションコードに注入することができます。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:14
msgid "Consuming gRPC services requires the gRPC classes to be generated.  Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr "gRPC サービスを消費するには、gRPC クラスを生成する必要があります。 `proto` ファイルを `src/main/proto` に置き、 `mvn compile` を実行してください。"

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:15
#, no-wrap
msgid "Stubs and Injection"
msgstr "スタブとインジェクション"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:19
#, fuzzy
msgid "gRPC generation provides several stubs, providing different ways to consume a gRPC service.  You can inject:"
msgstr "gRPCの生成には、いくつかのスタブが用意されており、gRPCサービスを利用するため"
"のさまざまな方法を提供しています。注入することができます。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:21
#, fuzzy
msgid "a service interface using the Mutiny API,"
msgstr "Mutiny APIを使用したサービスインターフェースです。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:22
#, fuzzy
msgid "a blocking stub using the gRPC API,"
msgstr "gRPC APIを使用したブロッキングスタブです。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:23
#, fuzzy
msgid "a reactive stub based on Mutiny,"
msgstr "Mutinyをベースにしたリアクティブ・スタブです。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:24
#, fuzzy
msgid "the gRPC `io.grpc.Channel`, that lets you create other types of stubs."
msgstr "他のタイプのスタブを作成することができるgRPC `io.grpc.Channel` 。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:28
#: upstream/_guides/grpc-service-consumption.adoc:106
#, no-wrap
msgid "import io.quarkus.grpc.GrpcClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:32
#, no-wrap
msgid ""
"import hello.Greeter;\n"
"import hello.GreeterGrpc.GreeterBlockingStub;\n"
"import hello.MutinyGreeterGrpc.MutinyGreeterStub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:34
#, no-wrap
msgid "class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:38
#, no-wrap
msgid ""
"   // A service interface using the Mutiny API\n"
"   @GrpcClient(\"helloService\")                   // <1>\n"
"   Greeter greeter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:42
#, no-wrap
msgid ""
"   // A reactive stub based on Mutiny\n"
"   @GrpcClient(\"helloService\")\n"
"   MutinyGreeterGrpc.MutinyGreeterStub mutiny;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:46
#, no-wrap
msgid ""
"   // A blocking stub using the gRPC API\n"
"   @GrpcClient\n"
"   GreeterGrpc.GreeterBlockingStub helloService; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:49
#, no-wrap
msgid ""
"   @GrpcClient(\"hello-service\")\n"
"   Channel channel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:51
#: upstream/_guides/grpc-service-consumption.adoc:197
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:53
#, fuzzy
msgid "A gRPC client injection point must be annotated with the `@GrpcClient` qualifier. This qualifier can be used to specify the name that is used to configure the underlying gRPC client. For example, if you set it to `hello-service`, configuring the host of the service is done using the `quarkus.grpc.clients.**hello-service**.host`."
msgstr ""
"gRPCクライアントのインジェクションポイントには、 `@GrpcClient` の修飾子を付け"
"る必要があります。この修飾子は、基礎となるgRPCクライアントの設定に使用される"
"名前を指定するために使用できます。たとえば、この修飾子を `hello-service` "
"に設定すると、サービスのホストを設定するのに `quarkus.grpc.clients. *hello-"
"service*.host`."

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:54
#, fuzzy
msgid "If the name is not specified via the `GrpcClient#value()` then the field name is used instead, e.g. `helloService` in this particular case."
msgstr ""
"`GrpcClient#value()` "
"で名前が指定されていない場合は、代わりにフィールド名が使用されます。例えば、"
"この例では `helloService` です。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:57
#, fuzzy
msgid "The stub class names are derived from the service name used in your `proto` file.  For example, if you use `Greeter` as a service name as in:"
msgstr ""
"スタブクラス名は、 `proto` "
"ファイルで使用されているサービス名に由来します。例えば、 `Greeter` "
"のようにサービス名として使用している場合。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:61
#, no-wrap
msgid "option java_package = \"hello\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:65
#, no-wrap
msgid ""
"service Greeter {\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:68
#, fuzzy
msgid "Then the service interface name is: `hello.Greeter`, the Mutiny stub name is: `hello.MutinyGreeterGrpc.MutinyGreeterStub` and the blocking stub name is: `hello.GreeterGrpc.GreeterBlockingStub`."
msgstr ""
"サービスインターフェース名は「 `hello.Greeter` 」、Mutiny stub名は「 `hello."
"MutinyGreeterGrpc.MutinyGreeterStub` 」、Blocking stub名は「 `hello."
"GreeterGrpc.GreeterBlockingStub` 」となります。"

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:69
#, no-wrap
msgid "Examples"
msgstr "サンプル"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:71
#, fuzzy, no-wrap
msgid "Service Interface"
msgstr "サービスインターフェース"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:77
#, no-wrap
msgid ""
"import io.quarkus.grpc.GrpcClient;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:79
#: upstream/_guides/grpc-service-consumption.adoc:329
#, no-wrap
msgid "import hello.Greeter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:84
#: upstream/_guides/grpc-service-consumption.adoc:113
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:87
#: upstream/_guides/grpc-service-consumption.adoc:116
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:90
#, no-wrap
msgid ""
"   @GrpcClient <1>\n"
"   Greeter hello;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:98
#, no-wrap
msgid ""
"   @GET\n"
"   @Path(\"/mutiny/{name}\")\n"
"   public Uni<String> helloMutiny(String name) {\n"
"      return hello.sayHello(HelloRequest.newBuilder().setName(name).build())\n"
"            .onItem().transform(HelloReply::getMessage);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:100
#, fuzzy
msgid "The service name is derived from the injection point - the field name is used. The `quarkus.grpc.clients.hello.host` property must be set."
msgstr ""
"サービス名はインジェクションポイントに由来する - "
"フィールド名を使用しています。 `quarkus.grpc.clients.hello.host` "
"プロパティの設定が必要です。"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:101
#, fuzzy, no-wrap
msgid "Blocking Stub"
msgstr "ブロッキング・スタブ"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:108
#, no-wrap
msgid "import hello.GreeterGrpc.GreeterBlockingStub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:119
#, no-wrap
msgid ""
"   @GrpcClient(\"hello\") <1>\n"
"   GreeterGrpc.GreeterBlockingStub blockingHelloService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:126
#, no-wrap
msgid ""
"   @GET\n"
"   @Path(\"/blocking/{name}\")\n"
"   public String helloBlocking(String name) {\n"
"      return blockingHelloService.sayHello(HelloRequest.newBuilder().setName(name).build()).getMessage();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:128
#, fuzzy
msgid "The `quarkus.grpc.clients.hello.host` property must be set."
msgstr "`quarkus.grpc.clients.hello.host` プロパティを設定する必要があります。"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:129
#, no-wrap
msgid "Handling streams"
msgstr "ストリームの取り扱い"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:132
msgid "gRPC allows sending and receiving streams:"
msgstr "gRPCでは、ストリームの送受信が可能です。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:140
#, no-wrap
msgid ""
"service Streaming {\n"
"    rpc Source(Empty) returns (stream Item) {} // Returns a stream\n"
"    rpc Sink(stream Item) returns (Empty) {}   // Reads a stream\n"
"    rpc Pipe(stream Item) returns (stream Item) {}  // Reads a streams and return a streams\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:143
msgid "Using the Mutiny stub, you can interact with these as follows:"
msgstr "Mutinyのスタブを使用すると、以下のようにこれらと対話することができます。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:147
#, no-wrap
msgid "package io.quarkus.grpc.example.streaming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:152
#, no-wrap
msgid ""
"import io.grpc.examples.streaming.Empty;\n"
"import io.grpc.examples.streaming.Item;\n"
"import io.grpc.examples.streaming.MutinyStreamingGrpc;\n"
"import io.quarkus.grpc.GrpcClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:155
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:161
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:165
#, no-wrap
msgid ""
"@Path(\"/streaming\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class StreamingEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:168
#, no-wrap
msgid ""
"    @GrpcClient\n"
"    MutinyStreamingGrpc.MutinyStreamingStub streaming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:175
#, no-wrap
msgid ""
"    @GET\n"
"    public Multi<String> invokeSource() {\n"
"        // Retrieve a stream\n"
"        return streaming.source(Empty.newBuilder().build())\n"
"                .onItem().transform(Item::getValue);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:185
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"sink/{max}\")\n"
"    public Uni<Void> invokeSink(int max) {\n"
"        // Send a stream and wait for completion\n"
"        Multi<Item> inputs = Multi.createFrom().range(0, max)\n"
"                .map(i -> Integer.toString(i))\n"
"                .map(i -> Item.newBuilder().setValue(i).build());\n"
"        return streaming.sink(inputs).onItem().ignore().andContinueWithNull();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:195
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{max}\")\n"
"    public Multi<String> invokePipe(int max) {\n"
"        // Send a stream and retrieve a stream\n"
"        Multi<Item> inputs = Multi.createFrom().range(0, max)\n"
"                .map(i -> Integer.toString(i))\n"
"                .map(i -> Item.newBuilder().setValue(i).build());\n"
"        return streaming.pipe(inputs).onItem().transform(Item::getValue);\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:200
#, no-wrap
msgid "Client configuration"
msgstr "クライアント設定"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:203
msgid "For each gRPC service you inject in your application, you can configure the following attributes:"
msgstr "アプリケーションにインジェクトする各gRPCサービスに対して、以下の属性を設定することができます。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:207
#, fuzzy
msgid "The `client-name` is the name set in the `@GrpcClient` or derived from the injection point if not explicitly defined."
msgstr ""
"`client-name` は、 `@GrpcClient` で設定された名称、または明示的に定義されてい"
"ない場合は射出口から派生した名称です。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:210
#, fuzzy
msgid "The following examples uses _hello_ as the client name.  Don't forget to replace it with the name you used in in the `@GrpcClient` annotation."
msgstr ""
"以下の例では、クライアント名として _hello_を使用しています。 `@GrpcClient` "
"アノテーションで使用した名前に置き換えることをお忘れなく。"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:211
#, no-wrap
msgid "Enabling TLS"
msgstr "TLSを有効にする"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:216
msgid "To enable TLS, use the following configuration.  Note that all paths in the configuration may either specify a resource on the classpath (typically from `src/main/resources` or its subfolder) or an external file."
msgstr "TLS を有効にするには、以下の設定を使用します。構成内のすべてのパスは、クラスパス上のリソース (通常は `src/main/resources` またはそのサブフォルダーから) または外部ファイルのいずれかを指定することに注意してください。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:220
#, no-wrap
msgid "quarkus.grpc.clients.hello.host=localhost\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:223
#, no-wrap
msgid ""
"# either a path to a classpath resource or to a file:\n"
"quarkus.grpc.clients.hello.ssl.trust-store=tls/ca.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:226
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "SSL/TLSを設定すると、 `plain-text` は自動的に無効になります。"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:227
#, no-wrap
msgid "TLS with Mutual Auth"
msgstr "相互認証付きTLS"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:230
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "相互認証付きのTLSを使用するには、以下の設定を使用します。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:235
#, no-wrap
msgid ""
"quarkus.grpc.clients.hello.host=localhost\n"
"quarkus.grpc.clients.hello.plain-text=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:240
#, no-wrap
msgid ""
"# all the following may use either a path to a classpath resource or to a file:\n"
"quarkus.grpc.clients.hello.ssl.certificate=tls/client.pem\n"
"quarkus.grpc.clients.hello.ssl.key=tls/client.key\n"
"quarkus.grpc.clients.hello.ssl.trust-store=tls/ca.pem\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:242
#, fuzzy, no-wrap
msgid "Client Deadlines"
msgstr "クライアントの締め切り"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:246
#, fuzzy
msgid "It's always reasonable to set a deadline (timeout) for a gRPC client, i.e. to specify a duration of time after which the RPC times out and the client receives the status error `DEADLINE_EXCEEDED`.  You can specify the deadline via the `quarkus.grpc.clients.\"service-name\".deadline` configuration property, e.g.:"
msgstr ""
"gRPCクライアントにデッドライン（タイムアウト）を設定することは常に合理的です"
"。つまり、RPCがタイムアウトしてクライアントがステータスエラー "
"`DEADLINE_EXCEEDED` を受け取るまでの時間を指定することです。デッドラインは、 "
"`quarkus.grpc.clients.\"service-name\".deadline` "
"の設定プロパティで指定できます。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:251
#, no-wrap
msgid ""
"quarkus.grpc.clients.hello.host=localhost\n"
"quarkus.grpc.clients.hello.deadline=2s <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:253
#, fuzzy
msgid "Set the deadline for all injected clients."
msgstr "注入されたすべてのクライアントの期限を設定します。"

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:254
#, fuzzy, no-wrap
msgid "gRPC Headers"
msgstr "gRPC ヘッダー"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:257
#, fuzzy
msgid "Similarly to HTTP, alongside the message, gRPC calls can carry headers.  Headers can be useful e.g. for authentication."
msgstr "HTTPと同様に、gRPCコールには、メッセージの他にヘッダーを付けることができます"
"。ヘッダーは、認証などに役立ちます。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:259
#, fuzzy
msgid "To set headers for a gRPC call, create a client with headers attached and then perform the call on this client:"
msgstr "gRPCコールにヘッダを設定するには、ヘッダを添付したクライアントを作成し、この"
"クライアントでコールを実行します。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:262
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:270
#, no-wrap
msgid ""
"import examples.Greeter;\n"
"import examples.HelloReply;\n"
"import examples.HelloRequest;\n"
"import io.grpc.Metadata;\n"
"import io.quarkus.grpc.GrpcClient;\n"
"import io.quarkus.grpc.GrpcClientUtils;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:275
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyService {\n"
"    @GrpcClient\n"
"    Greeter client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:281
#, no-wrap
msgid ""
"    public Uni<HelloReply> doTheCall() {\n"
"        Metadata extraHeaders = new Metadata();\n"
"        if (headers) {\n"
"            extraHeaders.put(\"my-header\", \"my-interface-value\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:283
#, no-wrap
msgid "        Greeter alteredClient = GrpcClientUtils.attachHeaders(client, extraHeaders); // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:287
#, no-wrap
msgid ""
"        return alteredClient.sayHello(HelloRequest.newBuilder().setName(name).build()); // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:289
#, fuzzy
msgid "Alter the client to make calls with the `extraHeaders` attached"
msgstr "`extraHeaders` を付けたまま通話ができるようにクライアントを変更します。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:290
#, fuzzy
msgid "Perform the call with the altered client. The original client remains unmodified"
msgstr "変更したクライアントで通話を行います。オリジナルのクライアントは変更されない"
"まま"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:292
#, fuzzy
msgid "`GrpcClientUtils` work with all flavors of clients."
msgstr "`GrpcClientUtils` は、あらゆる種類のクライアントに対応しています。"

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:293
#, no-wrap
msgid "Client Interceptors"
msgstr "クライアントインターセプター"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:299
#, fuzzy
msgid "A gRPC client interceptor can be implemented by a CDI bean that also implements the `io.grpc.ClientInterceptor` interface.  You can annotate an injected client with `@io.quarkus.grpc.RegisterClientInterceptor` to register the specified interceptor for the particular client instance.  The `@RegisterClientInterceptor` annotation is repeatable.  Alternatively, if you want to apply the interceptor to any injected client then annotate the interceptor bean with `@io.quarkus.grpc.GlobalInterceptor`."
msgstr ""
"gRPC クライアント インターセプターは、 `io.grpc.ClientInterceptor` "
"インターフェースも実装する CDI Bean で実装できます。注入されたクライアントに "
"`@io.quarkus.grpc.RegisterClientInterceptor` をアノテーションすることで、特定"
"のクライアントインスタンスに対して指定されたインターセプターを登録できます。 "
"`@RegisterClientInterceptor` のアノテーションは繰り返し使用できます。また、注"
"入されたクライアントにインターセプターを適用したい場合は、"
"インターセプターBeanに `@io.quarkus.grpc.GlobalInterceptor` "
"をアノテーションします。"

#. type: Block title
#: upstream/_guides/grpc-service-consumption.adoc:300
#, fuzzy, no-wrap
msgid "Global Client Interceptor Example"
msgstr "クライアントインターセプター"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:304
#, no-wrap
msgid "import io.quarkus.grpc.GlobalInterceptor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:306
#, fuzzy, no-wrap
msgid "import io.grpc.ClientInterceptor;\n"
msgstr "クライアントインターセプター"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:310
#, no-wrap
msgid ""
"@GlobalInterceptor <1>\n"
"@ApplicationScoped\n"
"public class MyInterceptor implements ClientInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:317
#, no-wrap
msgid ""
"    @Override\n"
"    public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, RespT> method,\n"
"            CallOptions callOptions, Channel next) {\n"
"       // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:319
#, fuzzy
msgid "This interceptor is applied to all injected gRPC clients."
msgstr "このインターセプターは、注入されたすべてのgRPCクライアントに適用されます。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:321
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ClientInterceptor.html[ClientInterceptor JavaDoc] to properly implement your interceptor."
msgstr "link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ClientInterceptor.html[ClientInterceptor JavaDoc] をチェックして、インターセプターを適切に実装してください。"

#. type: Block title
#: upstream/_guides/grpc-service-consumption.adoc:322
#, fuzzy, no-wrap
msgid "`@RegisterClientInterceptor` Example"
msgstr "クライアントインターセプター"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:327
#, no-wrap
msgid ""
"import io.quarkus.grpc.GrpcClient;\n"
"import io.quarkus.grpc.RegisterClientInterceptor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:332
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:337
#, no-wrap
msgid ""
"    @RegisterClientInterceptor(MySpecialInterceptor.class) <1>\n"
"    @GrpcClient(\"helloService\")\n"
"    Greeter greeter;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:339
#, fuzzy
msgid "Registers the `MySpecialInterceptor` for this particular client."
msgstr "この特定のクライアントのために `MySpecialInterceptor` を登録します。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:341
msgid "When you have multiple client interceptors, you can order them by implementing the `javax.enterprise.inject.spi.Prioritized` interface:"
msgstr "複数のクライアント・インターセプターがある場合、 `javax.enterprise.inject.spi.Prioritized` インターフェイスを実装することで、それらのインターセプターを指定することができます。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:346
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyInterceptor implements ClientInterceptor, Prioritized {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:352
#, no-wrap
msgid ""
"    @Override\n"
"    public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, RespT> method,\n"
"            CallOptions callOptions, Channel next) {\n"
"       // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:358
#, no-wrap
msgid ""
"    @Override\n"
"    public int getPriority() {\n"
"        return 10;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:362
msgid "Interceptors with the highest priority are called first.  The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr "最高の優先度を持つインターセプターが最初に呼び出されます。インターセプターが `Prioritized` インターフェイスを実装していない場合に使用されるデフォルトの優先度は `0` です。"

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:363
#, fuzzy, no-wrap
msgid "gRPC Client metrics"
msgstr "gRPCクライアントの測定値"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:365
#, fuzzy, no-wrap
msgid "Enabling metrics collection"
msgstr "メトリクスの収集を可能にする"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:369
#, fuzzy
msgid "gRPC client metrics are automatically enabled when the application also uses the xref:micrometer.adoc[`quarkus-micrometer`] extension.  Micrometer collects the metrics of all the gRPC clients used by the application."
msgstr ""
"アプリケーションがエクステンションを使用している場合、gRPCクライアント・メト"
"リクスが自動的に有効になります。  link:micrometer.html[`quarkus-micrometer`]"
"エクステンションを使用しています。Micrometerは、アプリケーションが使用するす"
"べてのgRPCクライアントのメトリクスを収集します。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:371
#, fuzzy
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr "例として、メトリクスをPrometheusにエクスポートすると、以下のようになります。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:387
#, no-wrap
msgid ""
"# HELP grpc_client_responses_received_messages_total The total number of responses received\n"
"# TYPE grpc_client_responses_received_messages_total counter\n"
"grpc_client_responses_received_messages_total{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",} 6.0\n"
"# HELP grpc_client_requests_sent_messages_total The total number of requests sent\n"
"# TYPE grpc_client_requests_sent_messages_total counter\n"
"grpc_client_requests_sent_messages_total{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",} 6.0\n"
"# HELP grpc_client_processing_duration_seconds The total time taken for the client to complete the call, including network delay\n"
"# TYPE grpc_client_processing_duration_seconds summary\n"
"grpc_client_processing_duration_seconds_count{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 6.0\n"
"grpc_client_processing_duration_seconds_sum{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 0.167411625\n"
"# HELP grpc_client_processing_duration_seconds_max The total time taken for the client to complete the call, including network delay\n"
"# TYPE grpc_client_processing_duration_seconds_max gauge\n"
"grpc_client_processing_duration_seconds_max{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 0.136478028\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:390
#, fuzzy
msgid "The service name, method and type can be found in the _tags_."
msgstr "サービス名、方法、タイプは _タグ_で確認できます。"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:391
#, fuzzy, no-wrap
msgid "Disabling metrics collection"
msgstr "メトリクス収集の無効化"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:394
#, fuzzy
msgid "To disable the gRPC client metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr ""
"`quarkus-micrometer` を使用しているときに gRPC クライアントメトリクスを無効に"
"するには、アプリケーションの設定に以下のプロパティを追加します。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:398
#, no-wrap
msgid "quarkus.micrometer.binder.grpc-client.enabled=false\n"
msgstr ""

#~ msgid "You can implement a gRPC client interceptor by implementing an `@ApplicationScoped` bean implementing `io.grpc.ClientInterceptor`:"
#~ msgstr "`@ApplicationScoped` `io.grpc.ClientInterceptor` Beanを実装することで、gRPC クライアントのインターセプターを実装することができます。"

#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid "Using a blocking and mutiny stubs"
#~ msgstr "ブロッキングと Mutiny のスタブを利用"

#~ msgid "The `service-name` is the name set in the `@GrpcService`."
#~ msgstr "`service-name` は、 `@GrpcService` でセットされた名前です。"

#~ msgid "Example of configuration"
#~ msgstr "構成例"

#~ msgid "source, java]"
#~ msgstr "ソース、java]"
