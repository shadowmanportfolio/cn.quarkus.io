# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-10-27 09:03+0000\n"
"PO-Revision-Date: 2022-02-03 23:31+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/neo4j.adoc:6
#, no-wrap
msgid "Neo4j"
msgstr "Neo4j"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:15
msgid "https://neo4j.com[Neo4j] is a graph database management system developed by Neo4j, Inc. Neo4j is a native graph database focused not only on the data itself, but especially on the relations between data.  Neo4j stores data as a property graph, which consists of vertices or nodes as we call them, connected with edges or relationships.  Both of them can have properties."
msgstr "Neo4 link:https://neo4j.com[jは] 、Neo4jが開発したグラフデータベース管理システムです。Neo4jは、データそのものだけでなく、特にデータ間の関係性に焦点を当てたネイティブグラフデータベースです。Neo4jは、データをプロパティー・グラフとして格納しますが、これは、我々が呼ぶところの頂点やノードをエッジやリレーションシップで接続したものです。どちらもプロパティーを持つことができます。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:19
msgid "Neo4j offers Cypher, a declarative query language much like SQL.  Cypher is used to for both querying the graph and creating or updating nodes and relationships.  As a declarative language it used to tell the database what to do and not how to do it."
msgstr "Neo4jは、SQLのような宣言的な問い合わせ言語であるCypherを提供しています。Cypherは、グラフの問い合わせとノードとリレーションシップの作成や更新の両方に使用されます。宣言的な言語として、それはデータベースにどのようにそれをするかではなく、何をすべきかを伝える為に使用されます。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:23
#, no-wrap
msgid ""
"Learn more about Cypher in the https://neo4j.com/docs/cypher-manual/current/[Neo4j Cypher manual].\n"
"      Cypher is not only available in Neo4j, but for example coming to https://github.com/opencypher/morpheus[Apache Spark].\n"
"      A spec called http://www.opencypher.org[OpenCypher] is available, too.\n"
msgstr ""
"link:https://neo4j.com/docs/cypher-manual/current/[Neo4jのCypherマニュアル] でCypherについて詳しく説明しています。\n"
"CypherはNeo4jだけではなく、例えば link:https://github.com/opencypher/morpheus[Apache Spark] にも登場しています。\n"
"link:http://www.opencypher.org[OpenCypher] と呼ばれる仕様も利用可能です。\n"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:25
msgid "Clients communicate over the so called Bolt protocol with the database."
msgstr "クライアントは、ボルトと呼ばれるプロトコルを介してデータベースと通信します。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:27
msgid "Neo4j - as the most popular graph database according to DB-Engines ranking - provides a variety of drivers for various languages."
msgstr "Neo4j - DB-Enginesのランキングで最も人気のあるグラフデータベースとして - 様々な言語のための様々なドライバーを提供しています。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:32
msgid "The Quarkus Neo4j extension is based on the official https://github.com/neo4j/neo4j-java-driver[Neo4j Java Driver].  The extension provides an instance of the driver configured ready for usage in any Quarkus application.  You will be able to issue arbitrary Cypher statements over Bolt with this extension.  Those statements can be simple CRUD statements as well as complex queries, calling graph algorithms and more."
msgstr "Quarkus Neo4jエクステンションは、公式の link:https://github.com/neo4j/neo4j-java-driver[Neo4j Java Driver] をベースにしています。このエクステンションは、Quarkusアプリケーションで使用できるように設定されたドライバーのインスタンスを提供します。このエクステンションを使用すると、Bolt上で任意のCypher文を発行することができます。これらのステートメントは、単純なCRUDステートメントだけでなく、複雑なクエリ、グラフアルゴリズムの呼び出しなども可能です。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:36
msgid "The driver itself is released under the Apache 2.0 license, while Neo4j itself is available in a GPL3-licensed open-source \"community edition\", with online backup and high availability extensions licensed under a closed-source commercial license."
msgstr "ドライバー自体はApache 2.0ライセンスでリリースされていますが、Neo4j自体はGPL3ライセンスでオープンソースの「コミュニティ版」として利用可能で、オンラインバックアップと高可用性のエクステンションはクローズドソースの商用ライセンスの下でライセンスされています。"

#. type: Title ==
#: upstream/_guides/neo4j.adoc:39
#, no-wrap
msgid "Programming model"
msgstr "プログラミングモデル"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:42
msgid "The driver and thus the Quarkus extension support three different programming models:"
msgstr "ドライバーとQuarkusエクステンションは、3つの異なるプログラミングモデルをサポートしています。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:44
msgid "Blocking database access (much like standard JDBC)"
msgstr "データベースアクセスのブロック (標準の JDBC によく似ています)"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:45
msgid "Asynchronous programming based on JDK's completable futures and related infrastructure"
msgstr "JDKのcompletable future と関連インフラをベースにした非同期プログラミング"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:46
msgid "Reactive programming based on http://www.reactive-streams.org[Reactive Streams]"
msgstr "link:http://www.reactive-streams.org[Reactive Streams] に基づくリアクティブプログラミング"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:49
msgid "The reactive programming model is only available when connected against a 4.0+ version of Neo4j.  Reactive programming in Neo4j is fully end-to-end reactive and therefore requires a server that supports backpressure."
msgstr "リアクティブ・プログラミング・モデルは、Neo4jの4.0+バージョンに対して接続されている場合にのみ利用可能です。Neo4jのリアクティブ・プログラミングは、完全にエンド・ツー・エンドのリアクティブであるため、バックプレッシャーをサポートするサーバーが必要です。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:51
msgid "In this guide you will learn how to"
msgstr "このガイドでは、次のことを学びます。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:53
msgid "Add the Neo4j extension to your project"
msgstr "プロジェクトにNeo4jエクステンションを追加"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:54
msgid "Configure the driver"
msgstr "ドライバーの設定"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:55
msgid "And how to use the driver to access a Neo4j database"
msgstr "そして、Neo4jデータベースにアクセスするためにドライバーを使用する方法"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:58
msgid "This guide will focus on asynchronous access to Neo4j, as this is ready to use for everyone.  At the end of this guide, there will be a reactive version, which needs however a 4.0 database version."
msgstr "このガイドでは、Neo4jへの非同期アクセスに焦点を当てます。このガイドの最後に、リアクティブ型のバージョンがありますが、それは、4.0データベースのバージョンを必要とします。"

#. type: Title ==
#: upstream/_guides/neo4j.adoc:59
#, no-wrap
msgid "The domain"
msgstr "ドメイン"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:62
msgid "As with some of the other guides, the application shall manage fruit entities."
msgstr "他のガイドのいくつかと同様に、アプリケーションは、果物のエンティティーを管理するものとします。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:66 upstream/_guides/neo4j.adoc:221
#: upstream/_guides/neo4j.adoc:463
#, no-wrap
msgid "package org.acme.neo4j;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:68
#, no-wrap
msgid "public class Fruit {\n"
msgstr "public class Fruit {\n"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:70
#, no-wrap
msgid "    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:72
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:76
#, no-wrap
msgid ""
"    public Fruit() {\n"
"        // This is needed for the REST-Easy JSON Binding\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:80
#, no-wrap
msgid ""
"    public Fruit(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:86
#, no-wrap
msgid ""
"    public Fruit(Long id, String name) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/neo4j.adoc:88
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:91
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:93
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11+ がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:94
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:95
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:96
msgid "Access to a Neo4j Database"
msgstr "Neo4jデータベースへのアクセス"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:97
msgid "Optional Docker for your system"
msgstr "オプションでシステムにDockerがインストールされていること"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:98
#, no-wrap
msgid "Setup Neo4j"
msgstr "Neo4jのセットアップ"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:101
msgid "The easiest way to start a Neo4j instance is a locally installed Docker environment."
msgstr "Neo4jインスタンスを起動する最も簡単な方法は、ローカルにインストールされたDocker環境です。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:105
#, no-wrap
msgid "docker run --publish=7474:7474 --publish=7687:7687 -e 'NEO4J_AUTH=neo4j/secret' neo4j:{neo4j_version}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:108
msgid "This starts a Neo4j instance, that publishes its Bolt port on `7687` and a web interface on http://localhost:7474."
msgstr "これは、Neo4jインスタンスを起動し、そのボルトポートを `7687` で公開し、ウェブインタフェースを http://localhost:7474 で公開します。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:110
msgid "Have a look at the https://neo4j.com/download/?ref=product[download page] for other options to get started with the product itself."
msgstr "製品自体を起動するための他のオプションについては、 link:https://neo4j.com/download/?ref=product[ダウンロードページ] をご覧ください。"

#. type: Title ==
#: upstream/_guides/neo4j.adoc:111
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:115
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:117
msgid "Clone the Git repository: git clone https://github.com/quarkusio/quarkus-quickstarts.git, or download an archive."
msgstr "Git リポジトリのクローン: git clone https://github.com/quarkusio/quarkus-quickstarts.git 、またはアーカイブをダウンロードしてください。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:120
msgid "The solution is located in the `neo4j-quickstart` {quickstarts-tree-url}/neo4j-quickstart[directory].  It contains a very simple UI to use the JAX-RS resources created here, too."
msgstr "ソリューションは `neo4j-quickstart` {quickstarts-tree-url}/neo4j-quickstart[ディレクトリ] にあります。ここで作成したJAX-RSリソースを利用するための非常にシンプルなUIも含まれています。"

#. type: Title ==
#: upstream/_guides/neo4j.adoc:121
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:124
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:133
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=neo4j-quickstart \\\n"
"    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n"
"    -Dextensions=\"resteasy,neo4j,resteasy-jackson\"\n"
"cd neo4j-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:136
msgid "It generates:"
msgstr "以下が生成されます:"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:138
msgid "the Maven structure"
msgstr "Mavenの構造"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:139
msgid "a landing page accessible on `http://localhost:8080`"
msgstr "ランディングページは次のURLでアクセス可能です: `http://localhost:8080`"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:140
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr "`native`  と `jvm`  の両方のモードに対応した `Dockerfile`  ファイルの例"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:141
msgid "the application configuration file"
msgstr "アプリケーション設定ファイル"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:142
msgid "an `org.acme.datasource.GreetingResource` resource"
msgstr "`org.acme.datasource.GreetingResource` リソース"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:143
msgid "an associated test"
msgstr "関連するユニットテスト"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:147
msgid "The Neo4j extension has been added already to your `pom.xml`.  In addition, we added `resteasy-jackson`, which allows us to expose `Fruit` instances over HTTP in the JSON format via JAX-RS resources.  If you have an already created project, the `neo4j` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr "Neo4jエクステンションは、すでにあなたの `pom.xml` に追加されています。加えて、 `resteasy-jackson` を追加しました。これにより、JAX-RSリソースを経由して、JSON形式のHTTPで `Fruit` インスタンスを公開することができます。すでに作成したプロジェクトがある場合は、 `neo4j` エクステンションを既存のQuarkusプロジェクトに `add-extension` コマンドで追加することができます。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:151
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"neo4j\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:154
msgid "Otherwise, you can manually add this to the dependencies section of your `pom.xml` file:"
msgstr "あるいは、 `pom.xml` ファイルの依存関係セクションに手動で追加することもできます。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:161
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-neo4j</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/neo4j.adoc:163
#, no-wrap
msgid "Configuring"
msgstr "設定"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:166
msgid "The Neo4j driver can be configured with standard Quarkus properties:"
msgstr "Neo4jドライバーは、Quarkusの標準的なプロパティーで設定できます。"

#. type: Block title
#: upstream/_guides/neo4j.adoc:168
#, no-wrap
msgid "src/main/resources/application.properties"
msgstr "src/main/resources/application.properties"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:174
#, no-wrap
msgid ""
"# Those are the default values and are implicitly assumed\n"
"quarkus.neo4j.uri = bolt://localhost:7687\n"
"quarkus.neo4j.authentication.username = neo4j\n"
"quarkus.neo4j.authentication.password = secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:177
msgid "You'll recognize the authentication here that you passed on to the docker command above."
msgstr "上のdockerコマンドに渡した認証がここで認識されます。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:179
msgid "Having done that, the driver is ready to use, there are however other configuration options, detailed below."
msgstr "これでドライバーを使用する準備ができましたが、以下に詳述する他の設定オプションがあります。"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:181
#, no-wrap
msgid "Dev Services (Configuration Free Databases)"
msgstr "開発サービス（コンフィグレーション・フリー・データベース）"

#. type: Title ==
#: upstream/_guides/neo4j.adoc:198
#, no-wrap
msgid "Using the driver"
msgstr "ドライバーの使用"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:200
#, no-wrap
msgid "General remarks"
msgstr "総論"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:205
msgid "The result of a statement consists usually of one or more `org.neo4j.driver.Record`.  Those records contain arbitrary values, supported by the driver.  If you return a node of the graph, it will be a `org.neo4j.driver.types.Node`."
msgstr "ステートメントの結果は通常、1つ以上の `org.neo4j.driver.Record` からなります。これらのレコードには、ドライバーがサポートする任意の値が含まれています。グラフのノードを返す場合、それは `org.neo4j.driver.types.Node` ."

#. type: Plain text
#: upstream/_guides/neo4j.adoc:207
msgid "We add the following method to the `Fruit`, as a convenient way to create them:"
msgstr "`Fruit` に、作成のための便利なメソッドとして以下を追加しています。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:213
#, no-wrap
msgid ""
"public static Fruit from(Node node) {\n"
"    return new Fruit(node.id(), node.get(\"name\").asString());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:216
msgid "Add a `FruitResource` skeleton like this and `@Inject` a `org.neo4j.driver.Driver` instance:"
msgstr "このように `FruitResource` のスケルトンを追加し、 `org.neo4j.driver.Driver` インスタンスを `@Inject` します。"

#. type: Block title
#: upstream/_guides/neo4j.adoc:218 upstream/_guides/neo4j.adoc:240
#: upstream/_guides/neo4j.adoc:285 upstream/_guides/neo4j.adoc:326
#: upstream/_guides/neo4j.adoc:372
#, no-wrap
msgid "src/main/java/org/acme/neo4j/FruitResource.java"
msgstr "src/main/java/org/acme/neo4j/FruitResource.java"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:224
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:226
#, no-wrap
msgid "import org.neo4j.driver.Driver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:229
#, no-wrap
msgid ""
"@Path(\"fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:233
#, no-wrap
msgid ""
"    @Inject\n"
"    Driver driver;\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/neo4j.adoc:235
#, no-wrap
msgid "Reading nodes"
msgstr "ノードの読み取り"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:238
msgid "Add the following method to the fruit resource:"
msgstr "フルーツリソースに以下のメソッドを追加します。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:256
#, no-wrap
msgid ""
"@GET\n"
"public CompletionStage<Response> get() {\n"
"    AsyncSession session = driver.asyncSession(); // <1>\n"
"    return session\n"
"        .runAsync(\"MATCH (f:Fruit) RETURN f ORDER BY f.name\")  // <2>\n"
"        .thenCompose(cursor ->  // <3>\n"
"            cursor.listAsync(record -> Fruit.from(record.get(\"f\").asNode()))\n"
"        )\n"
"        .thenCompose(fruits ->  // <4>\n"
"            session.closeAsync().thenApply(signal -> fruits)\n"
"        )\n"
"        .thenApply(Response::ok) // <5>\n"
"        .thenApply(ResponseBuilder::build);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:258
msgid "Open a new, asynchronous session with Neo4j"
msgstr "Neo4jと新しい非同期セッションを開く"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:259
msgid "Execute a query. This is a Cypher statement."
msgstr "クエリを実行します。これはCypherステートメントです。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:260
msgid "Retrieve a cursor, list the results and create ``Fruit``s."
msgstr "カーソルを取得し、結果をリストし、 `Fruit` を作成します。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:261
msgid "Close the session after processing"
msgstr "処理後にセッションを閉じる"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:262
msgid "Create a JAX-RS response"
msgstr "JAX-RSレスポンスの作成"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:264
msgid "Now start Quarkus in `dev` mode with:"
msgstr "ここで、 `dev` モードでQuarkusを起動します。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:268
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr "./mvnw compile quarkus:dev\n"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:271
msgid "and retrieve the endpoint like this"
msgstr "で、次のようにエンドポイントを取得します。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:275
#, no-wrap
msgid "curl localhost:8080/fruits\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:278
msgid "There are not any fruits, so let's create some."
msgstr "果物がないので、作ってみましょう。"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:279
#, no-wrap
msgid "Creating nodes"
msgstr "ノードの作成"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:283
msgid "The `POST` method looks similar.  It uses transaction functions of the driver:"
msgstr "`POST` メソッドは似たようなものです。これはドライバーのトランザクション関数を使用します。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:302
#, no-wrap
msgid ""
"@POST\n"
"public CompletionStage<Response> create(Fruit fruit) {\n"
"    AsyncSession session = driver.asyncSession();\n"
"    return session\n"
"        .writeTransactionAsync(tx -> tx\n"
"            .runAsync(\"CREATE (f:Fruit {name: $name}) RETURN f\", Values.parameters(\"name\", fruit.name))\n"
"            .thenCompose(fn -> fn.singleAsync())\n"
"        )\n"
"        .thenApply(record -> Fruit.from(record.get(\"f\").asNode()))\n"
"        .thenCompose(persistedFruit -> session.closeAsync().thenApply(signal -> persistedFruit))\n"
"        .thenApply(persistedFruit -> Response\n"
"            .created(URI.create(\"/fruits/\" + persistedFruit.id))\n"
"            .build()\n"
"        );\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:306
msgid "As you can see, we are now using a Cypher statement with named parameters (The `$name` of the fruit).  The node is returned, a `Fruit` entity created and then mapped to a `201` created response."
msgstr "ご覧のように、現在は名前付きのパラメーターを持つCypher文を使用しています(フルーツの `$name` )。ノードが返却され、 `Fruit` エンティティーが作成され、 `201` created レスポンスにマップされます。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:308
msgid "A curl request against this path may look like this:"
msgstr "このパスに対する curl リクエストは次のようになります。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:316
#, no-wrap
msgid ""
"curl -v -X \"POST\" \"http://localhost:8080/fruits\" \\\n"
"     -H 'Content-Type: application/json; charset=utf-8' \\\n"
"     -d $'{\n"
"  \"name\": \"Banana\"\n"
"}'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:319
msgid "The response contains an URI that shall return single nodes."
msgstr "レスポンスは、単一ノードを返すURIを含みます。"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:320
#, no-wrap
msgid "Read single nodes"
msgstr "単一ノードの読み取り"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:324
msgid "This time, we ask for a read-only transaction.  We also add some exception handling, in case the resource is called with an invalid id:"
msgstr "今回は、読み取り専用のトランザクションを要求します。また、リソースが無効な ID で呼び出された場合の例外処理も追加しています。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:354
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"{id}\")\n"
"public CompletionStage<Response> getSingle(@PathParam(\"id\") Long id) {\n"
"    AsyncSession session = driver.asyncSession();\n"
"    return session\n"
"        .readTransactionAsync(tx -> tx\n"
"            .runAsync(\"MATCH (f:Fruit) WHERE id(f) = $id RETURN f\", Values.parameters(\"id\", id))\n"
"            .thenCompose(fn -> fn.singleAsync())\n"
"    )\n"
"    .handle((record, exception) -> {\n"
"        if(exception != null) {\n"
"            Throwable source = exception;\n"
"            if(exception instanceof CompletionException) {\n"
"                source = ((CompletionException)exception).getCause();\n"
"            }\n"
"            Status status = Status.INTERNAL_SERVER_ERROR;\n"
"            if(source instanceof NoSuchRecordException) {\n"
"                status = Status.NOT_FOUND;\n"
"            }\n"
"            return Response.status(status).build();\n"
"        } else  {\n"
"            return Response.ok(Fruit.from(record.get(\"f\").asNode())).build();\n"
"        }\n"
"    })\n"
"    .thenCompose(response -> session.closeAsync().thenApply(signal -> response));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:357
msgid "A request may look like this:"
msgstr "リクエストはこのようになります:"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:361
#, no-wrap
msgid "curl localhost:8080/fruits/42\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:366
#, no-wrap
msgid ""
"In case Neo4j has been setup as a cluster, the transaction mode is used to decide whether a request is routed\n"
"      to a leader or a follower instance. Write transactions must be handled by a leader, whereas read-only transactions\n"
"      can be handled by followers.\n"
msgstr ""
"Neo4jがクラスターとして設定されている場合、 トランザクションモードは、リクエストがリーダかフォロワーにルーティングされるかどうかを決定するために使用されます。\n"
"書き込みトランザクションはリーダーによって処理されなければなりませんが、 \n"
"読み取り専用のトランザクションはフォロワーによって処理されます。\n"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:367
#, no-wrap
msgid "Deleting nodes"
msgstr "ノードの削除"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:370
msgid "Finally, we want to get rid of fruits again and we add the `DELETE` method:"
msgstr "最後に、再びフルーツを削除したいので、 `DELETE` メソッドを追加します。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:377
#, no-wrap
msgid ""
"@DELETE\n"
"@Path(\"{id}\")\n"
"public CompletionStage<Response> delete(@PathParam(\"id\") Long id) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:387
#, no-wrap
msgid ""
"    AsyncSession session = driver.asyncSession();\n"
"    return session\n"
"        .writeTransactionAsync(tx -> tx\n"
"            .runAsync(\"MATCH (f:Fruit) WHERE id(f) = $id DELETE f\", Values.parameters(\"id\", id))\n"
"            .thenCompose(fn -> fn.consumeAsync()) // <1>\n"
"        )\n"
"        .thenCompose(response -> session.closeAsync())\n"
"        .thenApply(signal -> Response.noContent().build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:389
msgid "There is no result for us, only a summary of the query executed."
msgstr "結果はなく、実行されたクエリの概要だけが表示されます。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:391
msgid "A request may look like this"
msgstr "リクエストは次のようになります。"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:395
#, no-wrap
msgid "curl -X DELETE localhost:8080/fruits/42\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:401
msgid "And that's already the most simple CRUD application with one type of nodes.  Feel free to add relationships to the model.  One idea would be to model recipes that contain fruits.  The Cypher manual linked in the introduction will help you with modelling your queries."
msgstr "そして、それはすでに1種類のノードを使った最もシンプルなCRUDアプリケーションです。モデルに関係性を自由に追加してください。一つのアイデアは、フルーツを含むレシピをモデル化することでしょう。紹介でリンクされているCypherのマニュアルは、クエリのモデリングに役立つでしょう。"

#. type: Title ==
#: upstream/_guides/neo4j.adoc:402
#, no-wrap
msgid "Next steps"
msgstr "次のステップ"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:404
#, no-wrap
msgid "Packaging"
msgstr "パッケージング"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:408
msgid "Packaging your application is as simple as `./mvnw clean package`.  It can be run with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "アプリケーションのパッケージ化は `./mvnw clean package` するだけと簡単です。 `java -jar target/neo4j-quickstart-1.0-SNAPSHOT-runner.jar` で実行できます。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:411
msgid "With GraalVM installed, you can also create a native executable binary: `./mvnw clean package -Dnative`.  Depending on your system, that will take some time."
msgstr "GraalVMをインストールした状態で、ネイティブの実行バイナリーを作成することもできます: `./mvnw clean package -Dnative` .お使いのシステムにもよりますが、時間がかかります。"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:412
#, no-wrap
msgid "Connection Health Check"
msgstr "接続のヘルスチェック"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:416
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-neo4j` will automatically add a readiness health check to validate the connection to Neo4j."
msgstr "`quarkus-smallrye-health` のエクステンションを使用している場合、 `quarkus-neo4j` は Neo4j への接続を検証するために、自動的にreadiness ヘルスチェックを追加します。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:418
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr "そのため、アプリケーションの `/q/health/ready` エンドポイントにアクセスすると、接続の検証状況に関する情報が表示されます。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:420
msgid "This behavior can be disabled by setting the `quarkus.neo4j.health.enabled` property to `false` in your `application.properties`."
msgstr "この動作は、 `application.properties` の `quarkus.neo4j.health.enabled` プロパティーを `false` に設定することで無効にできます。"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:421
#, no-wrap
msgid "Driver metrics"
msgstr "ドライバーメトリクス"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:425
msgid "If you are using a metrics extension and specify the config property `quarkus.neo4j.pool.metrics.enabled=true`, the Neo4j extension will expose several metrics related to the Neo4j connection pool."
msgstr "メトリクスエクステンションを使用していて、configプロパティー `quarkus.neo4j.pool.metrics-enabled=true` を指定している場合、Neo4jエクステンションは、Neo4j接続プールに関連したいくつかのメトリクスを公開します。"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:426
#, no-wrap
msgid "Explore Cypher and the Graph"
msgstr "Cypherとグラフの探索"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:430
msgid "There are tons of options to model your domain within a Graph.  The https://neo4j.com/docs/[Neo4j docs], the sandboxes and more are a good starting point."
msgstr "グラフ内でドメインをモデル化するためのオプションがたくさんあります。 link:https://neo4j.com/docs/[Neo4jのドキュメント] 、サンドボックスなどは良い出発点です。"

#. type: Title ===
#: upstream/_guides/neo4j.adoc:432
#, no-wrap
msgid "Going reactive"
msgstr "リアクティブ型へ"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:435
msgid "If you have access to Neo4j 4.0, you can go fully reactive."
msgstr "Neo4j 4.0へのアクセスがあれば、完全にリアクティブ型にすることができます。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:437
msgid "To make life a bit easier, we will use https://smallrye.io/smallrye-mutiny/[Mutiny] for this."
msgstr "少しでも生活を楽にするために、 link:https://smallrye.io/smallrye-mutiny/[Mutiny] を使うことにします。"

#. type: Block title
#: upstream/_guides/neo4j.adoc:439
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_guides/neo4j.adoc:443
msgid "The following example uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "次の例では、Mutinyのリアクティブ型を使用しています。もし慣れていない場合は、まず xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] を読んでください。"

#. type: Plain text
#: upstream/_guides/neo4j.adoc:446
msgid "Add the following dependency to your `pom.xml`:"
msgstr "次の依存関係を `pom.xml` に追加してください:"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:455
#, no-wrap
msgid ""
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:458
msgid "The reactive fruit resources streams the name of all fruits:"
msgstr "リアクティブフルーツリソースは、すべてのフルーツの名前をストリームします。"

#. type: Block title
#: upstream/_guides/neo4j.adoc:460
#, no-wrap
msgid "src/main/java/org/acme/neo4j/ReactiveFruitResource.java"
msgstr "src/main/java/org/acme/neo4j/ReactiveFruitResource.java"

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:470
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:476
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.smallrye.mutiny.Uni;\n"
"import org.neo4j.driver.Driver;\n"
"import org.neo4j.driver.reactive.RxResult;\n"
"import org.reactivestreams.Publisher;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:482
#, no-wrap
msgid ""
"@Path(\"reactivefruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class ReactiveFruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:485
#, no-wrap
msgid ""
"    @Inject\n"
"    Driver driver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/neo4j.adoc:501
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    public Publisher<String> get() {\n"
"        // Create a stream from a resource we can close in a finalizer:\n"
"        return Multi.createFrom().resource(driver::rxSession,\n"
"                session -> session.readTransaction(tx -> {\n"
"                    RxResult result = tx.run(\"MATCH (f:Fruit) RETURN f.name as name ORDER BY f.name\");\n"
"                    return Multi.createFrom().publisher(result.records())\n"
"                            .map(record -> record.get(\"name\").asString());\n"
"                })\n"
"        ).withFinalizer(session -> {\n"
"            return Uni.createFrom().publisher(session.close());\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/neo4j.adoc:507
msgid "`driver.rxSession()` returns a reactive session.  It exposes its API based on http://www.reactive-streams.org[Reactive Streams], most prominently, as `org.reactivestreams.Publisher`.  Those can be used directly, but we found it easier and more expressive to wrap them in reactive types such as the one provided by Mutiny.  Typically, in the previous code, the session is closed when the stream completes, fails or the subscriber cancels."
msgstr "`driver.rxSession()` はリアクティブなセッションを返します。 link:http://www.reactive-streams.org[リアクティブストリーム] に基づいた API を公開しており、最も目立つのは `org.reactivestreams.Publisher` です。これらを直接使用することもできますが、Mutiny が提供するもののようなリアクティブ型でラップした方が簡単で表現力があることがわかりました。通常、先ほどのコードでは、ストリームが完了したり、失敗したり、サブスクライバーがキャンセルしたりすると、セッションは閉じられます。"

#. type: Title ==
#: upstream/_guides/neo4j.adoc:508
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#~ msgid "Quarkus - Neo4j"
#~ msgstr "Neo4j"
