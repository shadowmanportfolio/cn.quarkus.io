# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-02-04 01:50+0900\n"
"PO-Revision-Date: 2021-11-22 22:03+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/funqy-amazon-lambda.adoc:6
#, no-wrap
msgid "Funqy Amazon Lambda Binding"
msgstr "Funqy Amazon Lambda バインディング"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:13
msgid "The guide walks through quickstart code to show you how you can deploy Funqy functions to Amazon Lambda."
msgstr "このガイドでは、Funqy関数をAmazon Lambdaにデプロイする方法をクイックスタートコードで説明しています。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:16
msgid "Funqy functions can be deployed using the AWS Lambda Java Runtime, or you can build a native executable and use Lambda Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr "Funqy関数はAWS Lambda Java Runtimeを使ってデプロイすることもできますし、より少ないメモリーフットプリントとより高速なコールドブート起動時間が必要な場合は、ネイティブ実行可能ファイルをビルドしてLambda Custom Runtimeを使うこともできます。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:24
#, fuzzy
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr "BookLive「ブックライブ」の link:funqy.html[FunQy "
"Basics]無料試し読みコーナーこれは、短い読み物です"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:25
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr "link:https://aws.amazon.com[Amazon AWSのアカウント]"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:26
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"
msgstr "link:https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:27
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] 、ローカルテスト用"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:29
#, fuzzy
msgid "Funqy Amazon Lambdas build off of our xref:amazon-lambda.adoc[Quarkus Amazon Lambda support]."
msgstr ""
"FunqyのAmazon Lambdasは、 link:amazon-lambda.html[QuarkusのAmazon "
"Lambdaサポート]をベースにしています。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:30
#, no-wrap
msgid "Installing AWS bits"
msgstr "AWS bitsのインストール"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:34
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS CLI."
msgstr "AWSのすべてのツールをインストールすることは、おそらくこのガイドでは最も難しいことです。AWS CLIをインストールするためのすべての手順に従っていることを確認してください。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:35
#, no-wrap
msgid "The Quickstart"
msgstr "クイックスタート"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:38
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:40
msgid "The solution is located in the `funqy-amazon-lambda-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart[directory]."
msgstr "ソリューションは `funqy-amazon-lambda-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:41
#, no-wrap
msgid "The Code"
msgstr "コード"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:45
msgid "There is nothing special about the code and more importantly nothing AWS specific.  Funqy functions can be deployed to many different environments and AWS Lambda is one of them.  The Java code is actually the same exact code as the {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[funqy-http-quickstart]."
msgstr "コードには何も特別なものはありませんし、もっと重要なのはAWSに特化したものは何もありません。Funqy関数は様々な環境にデプロイすることができ、AWS Lambdaもその一つです。Javaのコードは、実は{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[funqy-http-quickstart]と全く同じコードです。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:47
#, no-wrap
msgid "Choose Your Function"
msgstr "functionの選択"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:51
msgid "Only one Funqy function can be exported per Amazon Lambda deployment.  If you have multiple functions defined within your project, then you will need to choose the function within your Quarkus `application.properties`:"
msgstr "Amazon LambdaデプロイメントごとにエクスポートできるFunqy関数は1つだけです。プロジェクト内で複数の関数を定義している場合は、Quarkus `application.properties` 内で関数を選択する必要があります ."

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:55
#, no-wrap
msgid "quarkus.funqy.export=greet\n"
msgstr "quarkus.funqy.export=greet\n"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:58
#, fuzzy
msgid "You can see how the quickstart has done it within its own {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/main/resources/application.properties[application.properties]."
msgstr ""
"ソリューションは `funqy-amazon-lambda-quickstart` {quickstarts-tree-url"
"}/funqy-quickstarts/funqy-amazon-lambda-quickstart[ディレクトリ] にあります。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:60
#, fuzzy
msgid "Alternatively, you can set the `QUARKUS_FUNQY_EXPORT` environment variable when you create the Amazon Lambda using the `aws` cli."
msgstr ""
"あるいは、 `aws` cliを使ってAmazon Lambdaを作成する際に、 "
"`QUARKUS_FUNQY_EXPORT` 環境変数を設定することもできます。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:61
#, no-wrap
msgid "Deploy to AWS Lambda Java Runtime"
msgstr "AWS Lambda Javaランタイムへのデプロイ"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:66
#, fuzzy
msgid "There are a few steps to get your Funqy function running on AWS Lambda.  The quickstart maven project generates a helpful script to create, update, delete, and invoke your functions for pure Java and native deployments.  This script is generated at build time."
msgstr ""
"Funqy関数をAWS Lambdaで実行するには、いくつかのステップがあります。クイックス"
"タートのmavenプロジェクトでは、ピュアJavaとネイティブのデプロイメント用に、関"
"数の作成、更新、削除、呼び出しを行うための便利なスクリプトが生成されます。こ"
"のスクリプトはビルド時に生成されます。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:67
#, no-wrap
msgid "Build and Deploy"
msgstr "ビルドとデプロイ"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:70
#, fuzzy
msgid "Build the project using Maven:"
msgstr "Mavenを使ってプロジェクトを構築します。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:74
msgid "This will compile and package your code."
msgstr "これでコードがコンパイルされ、パッケージ化されます。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:75
#, no-wrap
msgid "Create an Execution Role"
msgstr "実行ロールの作成"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:81
msgid "View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define a `LAMBDA_ROLE_ARN` environment variable in your profile or console window, Alternatively, you can edit the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr "AWS CLIを使った Lambda のデプロイ方法については、 link:https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] を参照してください。具体的には、 `Execution Role` を作成していることを確認してください。プロファイルやコンソールウィンドウで `LAMBDA_ROLE_ARN` 環境変数を定義する必要があります。また、ビルドで生成される `manage.sh` スクリプトを編集して、そこに直接ロール値を置くこともできます。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:85
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\"\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:87
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "ビルド時に追加生成されるファイル"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:91
#, fuzzy
msgid "After you run the build, there are a few extra files generated by the `quarkus-funqy-amazon-lambda` extension.  These files are in the the build directory: `target/` for maven, `build/` for gradle."
msgstr ""
"ビルドを実行すると、 `quarkus-funqy-amazon-lambda` エクステンションによって生"
"成されるいくつかの追加ファイルがあります。これらのファイルは、ビルドディレク"
"トリにあります。 `target/` （maven用）、 `build/` （gradle用）です。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:93
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - lambdaデプロイメントファイル"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:94
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr "`manage.sh` - awsのlambda cliの呼び出しのラッパー"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:95
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr "`bootstrap-example.sh` - ネイティブデプロイメント用のブートストラップスクリプトの例"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:96
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr "`sam.jvm.yaml` - (オプション) sam cliやローカル・テストで使用します。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:97
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr "`sam.native.yaml` - (オプション) sam cliやネイティブ・ローカル・テストで使用します。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:98
#, no-wrap
msgid "Create the function"
msgstr "関数を作成する"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:103
#, fuzzy
msgid "The `target/manage.sh` script is for managing your Funqy function using the AWS Lambda Java runtime.  This script is provided only for your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your functions."
msgstr ""
"`target/manage.sh` スクリプトは、AWS LambdaのJavaランタイムを使ってFunqy関数"
"を管理するためのものです。このスクリプトは利便性のためだけに提供されています"
"。関数を作成、削除、更新するためにどのようなawsコマンドが実行されるかを知りた"
"い場合は、 `manage.sh` スクリプトの出力を調べてください。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:105
msgid "`manage.sh` supports four operation: `create`, `delete`, `update`, and `invoke`."
msgstr "`manage.sh` は、 `create` , `delete` , `update` , `invoke` の 4 つの操作をサポートしています。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:109
msgid "To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys, and setup the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.  A usage statement will be printed to guide you accordingly."
msgstr "AWS CLIがインストールされていること、AWSアクセスキーのためのaws configureを実行していること、 `LAMBDA_ROLE_ARN` 環境変数を設定していること(上記の通り)を確認するには、 `manage.sh` をパラメーターなしで実行してください。それに応じて利用方法のガイドが表示されます。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:111
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr "`usage` を参照したり、AWS の設定を検証するためには次のようにします。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:114
#, no-wrap
msgid "sh target/manage.sh\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:117
msgid "You can `create` your function using the following command:"
msgstr "次のコマンドを使って、 Function を `create` します。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:121
#, no-wrap
msgid "sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:124
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr "または、このシェルで既に `LAMBDA_ROLE_ARN` が定義されていない場合にはこうです。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:128
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\" sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:132
#, fuzzy
msgid "Do not change the handler switch.  This must be hardcoded to `io.quarkus.funqy.lambda.FunqyStreamHandler::handleRequest`.  This special handler is Funqy's integration point with AWS Lambda."
msgstr ""
"ハンドラースイッチを変更しないでください。これは `io.quarkus.funqy.lambda."
"FunqyStreamHandler::handleRequest` "
"にハードコードする必要があります。この特別なハンドラは、FunqyのAWS "
"Lambdaとの統合ポイントです。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:135
msgid "If there are any problems creating the function, you must delete it with the `delete` function before re-running the `create` command."
msgstr "Function の作成に問題がある場合は、 `delete` で Function を削除してから `create` コマンドを再実行する必要があります。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:139
#, no-wrap
msgid "sh target/manage.sh delete\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:142
msgid "Commands may also be stacked:"
msgstr "コマンドはスタックすることもできます。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:145
#, no-wrap
msgid "sh target/manage.sh delete create\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:147
#, no-wrap
msgid "Invoke the function"
msgstr "関数の呼出"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:150
msgid "Use the `invoke` command to invoke your function."
msgstr "関数を呼び出すには `invoke` コマンドを使用します。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:154
#, no-wrap
msgid "sh target/manage.sh invoke\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:158
#, fuzzy
msgid "The example function takes input passed in via the `--payload` switch which points to a json file in the root directory of the project."
msgstr ""
"このサンプル関数は、 `--payload` スイッチで渡された入力を受け取り、プロジェク"
"トのルートディレクトリにあるjsonファイルを指定します。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:160
#, fuzzy
msgid "The function can also be invoked locally with the SAM CLI like this:"
msgstr "この関数は、SAM CLIでローカルに呼び出すこともできます。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:164
#: upstream/_guides/funqy-amazon-lambda.adoc:274
#, no-wrap
msgid "sam local invoke --template target/sam.jvm.yaml --event payload.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:167
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr "ネイティブイメージのビルドで作業している場合は、テンプレート名をネイティブバージョンに置き換えてください。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:171
#: upstream/_guides/funqy-amazon-lambda.adoc:281
#, no-wrap
msgid "sam local invoke --template target/sam.native.yaml --event payload.json\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:173
#, no-wrap
msgid "Update the function"
msgstr "functionの更新"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:177
#, fuzzy
msgid "You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your function by executing the `update` command."
msgstr ""
"必要に応じてJavaコードを更新することができます。リビルドが完了したら、 "
"`update` コマンドを実行して、関数を再デプロイすることができます。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:181
#, no-wrap
msgid "sh target/manage.sh update\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:183
#, fuzzy, no-wrap
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr "AWS Lambda Javaランタイムへのデプロイ"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:187
#, fuzzy
msgid "If you want a lower memory footprint and faster initialization times for your Funqy function, you can compile your Java code to a native executable.  Just make sure to rebuild your project with the `-Pnative` switch."
msgstr ""
"Funqy関数のメモリ使用量を減らし、初期化時間を短縮したい場合は、Javaコードをネ"
"イティブ実行可能ファイルにコンパイルすることができます。ただ、 `-Pnative` "
"スイッチを使ってプロジェクトを再構築してください。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:189
msgid "For Linux hosts execute:"
msgstr "Linuxホストの場合は以下を実行します。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:195
#, fuzzy
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing Quarkus to use a Docker build as Amazon Lambda requires Linux binaries.  You can do this by passing this property to your build: `-Dnative-image.docker-build=true`.  This requires you to have Docker installed locally, however."
msgstr ""
"Linux以外のシステムで構築する場合は、Amazon LambdaがLinuxバイナリを必要とする"
"ため、QuarkusにDockerビルドを使用するよう指示するプロパティを渡す必要がありま"
"す。これは、次のプロパティをビルドに渡すことで行うことができます： `-Dnative-"
"image.docker-build=true`."
"ただし、このためにはDockerがローカルにインストールされている必要があります。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:201
#, fuzzy
msgid "Either of these commands will compile and create a native executable.  It also generates a zip file `target/function.zip`.  This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda Custom (Provided) Runtime."
msgstr ""
"これらのコマンドのいずれかを実行すると、コンパイルされ、ネイティブ実行可能フ"
"ァイルが作成されます。また、ZIPファイル `target/function.zip` "
"を生成します。このZIPファイルには、 `bootstrap` に名前を変更したネイティブ実"
"行可能ファイルのイメージが含まれています。これは、AWS Lambda Custom "
"(Provided) Runtimeの要件です。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:204
msgid "The instructions here are exactly as above with one change: you'll need to add `native` as the first parameter to the `manage.sh` script:"
msgstr "ここでの説明は上記と全く同じですが、1つ変更点があります: `manage.sh` スクリプトの最初のパラメーターとして `native` を追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:208
#, no-wrap
msgid "sh target/manage.sh native create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:213
msgid "As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish to work with native image builds.  The script will take care of the rest of the details necessary to manage your native image function deployments."
msgstr "上記のように、コマンドはスタックすることができます。唯一の要件は、ネイティブイメージビルドで作業したい場合、最初のパラメーターとして `native` を指定することです。このスクリプトは、ネイティブイメージ関数のデプロイメントを管理するために必要な残りの詳細を処理します。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:216
#, fuzzy
msgid "Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your functions."
msgstr "機能を作成、削除、更新するためにどのようなawsコマンドが実行されるかを知りたい"
"場合は、 `manage.sh` スクリプトの出力を調べます。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:219
msgid "One thing to note about the create command for native is that the `aws lambda create-function` call must set a specific environment variable:"
msgstr "ネイティブ用のcreateコマンドについて注意すべき点は、 `aws lambda create-function` 呼び出しで特定の環境変数を設定しなければならないということです。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:223
#, no-wrap
msgid "--environment 'Variables={DISABLE_SIGNAL_HANDLERS=true}'\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:225
#, fuzzy, no-wrap
msgid "Examine the POM"
msgstr "POMの検討"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:229
#, fuzzy
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-funqy-amazon-lambda` extension as a dependency.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""
"POMについては、 `quarkus-funqy-amazon-lambda` エクステンションを依存関係に含"
"めること以外に特別なことはありません。このエクステンションは、ラムダのデプロ"
"イメントに必要となるすべてのものを自動的に生成します。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:230
#, no-wrap
msgid "Integration Testing"
msgstr "統合テスト"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:235
#, fuzzy
msgid "Funqy Amazon Lambda support leverages the Quarkus AWS Lambda test framework so that you can unit tests your Funqy functions.  This is true for both JVM and native modes.  This test framework provides similar functionality to the SAM CLI, without the overhead of Docker."
msgstr ""
"FunqyのAmazon Lambdaサポートでは、Quarkus AWS Lambdaテストフレームワークを活"
"用して、Funqyの関数をユニットテストできるようになっています。これは、JVMモー"
"ドとネイティブモードの両方に当てはまります。このテストフレームワークは、Docke"
"rのオーバーヘッドなしに、SAM CLIと同様の機能を提供します。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:238
#, fuzzy
msgid "If you open up {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java] you'll see that the test replicates the AWS execution environment."
msgstr ""
"{quickstarts-tree-url}/funqy-amazon-lambda-quickstart/src/test/java/org/acme/"
"funqy/FunqyTest.java[FunqyTest."
"java]を開くと、テストがAWSの実行環境を再現していることがわかります。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:242
#, no-wrap
msgid "package org.acme.funqy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:247
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.test.LambdaClient;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:257
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class FunqyTest {\n"
"    @Test\n"
"    public void testSimpleLambdaSuccess() throws Exception {\n"
"        Friend friend = new Friend(\"Bill\");\n"
"        Greeting out = LambdaClient.invoke(Greeting.class, friend);\n"
"        Assertions.assertEquals(\"Hello Bill\", out.getMessage());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:259
#, no-wrap
msgid "Testing with the SAM CLI"
msgstr "SAM CLI でのテスト"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:265
#, fuzzy
msgid "The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] allows you to run your functions locally on your laptop in a simulated Lambda environment.  This requires https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr ""
"link:https://docs.aws.amazon.com/serverless-application-model/latest/"
"developerguide/serverless-sam-cli-install.html[AWS SAM CLI]を使えば、ラップト"
"ップ上でLambdaのシミュレーション環境で関数をローカルに実行することができます"
"。これには、 link:https://www.docker.com/products/docker-desktop[docker]のイ"
"ンストールが必要です。これは、あなたがそれを利用することを選択するべきオプシ"
"ョンのアプローチです。そうでなければ、QuarkusのJUnit統合でほとんどのニーズに"
"対応できるはずです。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:267
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr "JVMとネイティブ実行モードの両方に対応したスターターテンプレートが生成されています。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:270
#, fuzzy
msgid "Run the following SAM CLI command to locally test your function, passing the appropriate SAM `template`.  The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr ""
"以下のSAM CLIコマンドを実行して、適切なSAM `template` "
"を渡して、関数をローカルにテストします。 `event` パラメータには、任意の JSON "
"ファイルを指定します。ここでは、サンプル `payload.json` を指定します。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:277
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr "ネイティブイメージは、 `sam.native.yaml` テンプレートを使ってローカルでテストすることもできます。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:283
#, no-wrap
msgid "Modifying `function.zip`"
msgstr "`function.zip` の修正"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:288
#, fuzzy
msgid "There are times where you may have to add additional entries to the `function.zip` lambda deployment that is generated by the build.  To do this create a `zip.jvm` or `zip.native` directory within `src/main`.  Create `zip.jvm/` if you are doing a pure Java.  `zip.native/` if you are doing a native deployment."
msgstr ""
"ビルドによって生成された `function.zip` ラムダ・デプロイメントに、追加のエン"
"トリを追加しなければならない場合があります。そのためには、 `src/main` 内に "
"`zip.jvm` または `zip.native` ディレクトリを作成します。純粋な Java "
"を使用している場合は `zip.jvm/` を、ネイティブな配置を行っている場合は `zip."
"native/` を作成します。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:290
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr "zipディレクトリーの下に作成したファイルやディレクトリーは、すべて `function.zip` に含まれます。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:291
#, no-wrap
msgid "Custom `bootstrap` script"
msgstr "カスタム `bootstrap` スクリプト"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:297
#, fuzzy
msgid "There are times you may want to set specific system properties or other arguments when lambda invokes your native Funqy deployment.  If you include a `bootstrap` script file within `zip.native`, the Funqy extension will automatically rename the executable to `runner` within `function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr ""
"lambda がネイティブの Funqy デプロイメントを呼び出す際に、特定のシステム "
"プロパティやその他の引数を設定したい場合があります。 `zip.native` の中に "
"`bootstrap` のスクリプトファイルを含めると、Funqy エクステンションは自動的に "
"`function.zip` の中の `runner` に実行ファイルの名前を変更し、 `bootstrap` "
"のスクリプトの unix モードを executable に設定します。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:299
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr "カスタム `bootstrap` スクリプトを含む場合は、ネイティブ実行可能ファイルを `runner` として参照する必要があります。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:300
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr "このエクステンションは、サンプルのスクリプト `target/bootstrap-example.sh` を生成します。"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 30 minutes"
#~ msgstr "30分以内"

#~ msgid "JDK 11 (AWS requires JDK 1.8 or 11)"
#~ msgstr "JDK 11 (AWSではJDK 1.8または11が必要)"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "./mvnw clean package\n"
#~ msgstr "./mvnw clean package\n"
