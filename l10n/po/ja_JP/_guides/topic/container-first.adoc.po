# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-29 21:25+0900\n"
"PO-Revision-Date: 2022-05-06 11:42+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: layout
#: upstream/_guides/topic/container-first.adoc:1
#, no-wrap
msgid "vision"
msgstr "ビジョン"

#. type: YAML Front Matter: permalink
#: upstream/_guides/topic/container-first.adoc:1
#, no-wrap
msgid "/vision/container-first"
msgstr "/vision/container-first"

#. type: Title =
#: upstream/_guides/topic/container-first.adoc:7
#, no-wrap
msgid "{project-name} - Container First"
msgstr "{project-name} - コンテナ・ファースト"

#. type: Plain text
#: upstream/_guides/topic/container-first.adoc:12
msgid "From the outset {project-name} has been designed around a container first philosophy.  What this means in real terms is that {project-name} is optimised for low memory usage and fast startup times in the following ways:"
msgstr "最初から {project-name} はコンテナーファーストの哲学に基づいて設計されています。これが実際に意味することは、{project-name} は以下の方法でメモリー使用量を抑え、起動時間を短縮するように最適化されているということです。"

#. type: Labeled list
#: upstream/_guides/topic/container-first.adoc:13
#, no-wrap
msgid "First Class Support for Graal/SubstrateVM"
msgstr "Graal/SubstrateVMのファーストクラスサポート"

#. type: Plain text
#: upstream/_guides/topic/container-first.adoc:18
msgid "Substrate support has been an important part of the design for {project-name} from the beginning.  When an application is compiled down to a native image it starts much faster and can run with a much smaller heap than a standard JVM. {project-name} are all tested in Substrate, and can run without the `-H:+ReportUnsupportedElementsAtRuntime` flag."
msgstr "サブストレートのサポートは、最初から {project-name} の設計の重要な部分でした。アプリケーションがネイティブイメージにコンパイルされると、標準的なJVMよりもはるかに高速に起動し、より小さなヒープで実行することができます。project-name} はすべて Substrate でテストされており、 `-H:+ReportUnsupportedElementsAtRuntime` フラグなしで実行することができます。"

#. type: Labeled list
#: upstream/_guides/topic/container-first.adoc:19
#, no-wrap
msgid "Build Time Metadata Processing"
msgstr "ビルド時メタデータ処理"

#. type: Plain text
#: upstream/_guides/topic/container-first.adoc:25
msgid "As much processing as possible is done at build time, so your application will only contain the classes that are actually needed at runtime. In a traditional model all the classes required to perform the initial application deployment hang around for the life of the application, even though they are only used once. With {project-name} they are not even loaded into the production JVM. This results in less memory usage, and also faster startup time as all metadata processing has already been done."
msgstr "可能な限り多くの処理はビルド時に行われるので、アプリケーションは実行時に実際に必要とされるクラスだけを含みます。従来のモデルでは、最初のアプリケーションのデプロイメントを実行するために必要なすべてのクラスは、一度しか使用されないにもかかわらず、アプリケーションの寿命の間、ぶら下がっています。project-name}では、それらのクラスは本番環境のJVMにロードされません。その結果、メモリー使用量が少なくなり、すべてのメタデータ処理がすでに行われているため、起動時間も速くなります。"

#. type: Labeled list
#: upstream/_guides/topic/container-first.adoc:26
#, no-wrap
msgid "Reduction in Reflection Usage"
msgstr "リフレクション使用量の削減"

#. type: Plain text
#: upstream/_guides/topic/container-first.adoc:28
msgid "As much as possible {project-name} tries to avoid reflection, reducing startup time and memory usage."
msgstr "{project-name}は可能な限り反射を避け、起動時間とメモリー使用量を減らすようにしています。"

#. type: Labeled list
#: upstream/_guides/topic/container-first.adoc:29
#, no-wrap
msgid "Native Image Pre Boot"
msgstr "ネイティブイメージのプリブート"

#. type: Plain text
#: upstream/_guides/topic/container-first.adoc:32
msgid "When running in a native image {project-name} pre-boots as much of the framework as possible during the native image build process. This means that the resulting native image has already run most of the startup code and serialized the result into the executable, resulting in even faster startup."
msgstr "ネイティブイメージで {project-name}を実行する場合、ネイティブイメージのビルドプロセスの間に、フレームワークの可能な限りの部分をプリブートします。これは、結果として得られるネイティブイメージがすでにほとんどのスタートアップコードを実行し、その結果を実行ファイルにシリアライズしていることを意味し、より高速なスタートアップを実現します。"

#~ msgid "---\n"
#~ msgstr "---\n"

#~ msgid ""
#~ "layout: vision\n"
#~ "permalink: /vision/container-first\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: vision\n"
#~ "permalink: /vision/container-first\n"
#~ "---\n"
