# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2022-05-08 11:46+0900\n"
"Last-Translator: Nobuhiro Sue <nobuhiro.sue@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/cassandra.adoc:6
#, no-wrap
msgid "Using the Cassandra Client"
msgstr "Cassandraクライアントの使用"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:13
msgid "Apache Cassandra® is a free and open-source, distributed, wide column store, NoSQL database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure."
msgstr "Apache Cassandra®は、フリーでオープンソースの分散型ワイドカラムストアのNoSQLデータベース管理システムで、多くのコモディティサーバーにまたがる大量のデータを処理するように設計されており、単一障害点のない高可用性を提供します。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:15
msgid "In this guide, we will see how you can get your REST services to use a Cassandra database."
msgstr "このガイドでは、RESTサービスでCassandraデータベースを使用する方法を見ていきます。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:25
msgid "A running link:https://cassandra.apache.org[Apache Cassandra], link:https://www.datastax.fr/products/datastax-enterprise[DataStax Enterprise] (DSE) or link:https://astra.datastax.com[DataStax Astra] database; or alternatively, a fresh Docker installation."
msgstr "稼働中の link:https://cassandra.apache.org[Apache Cassandra]、 link:https://www.datastax.fr/products/datastax-enterprise[DataStax Enterprise]（DSE）、または link:https://astra.datastax.com[DataStax Astra]データベース、あるいはきれいなDockerのインストール"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:26
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:32
msgid "This quickstart guide shows how to build a REST application using the link:https://github.com/datastax/cassandra-quarkus[Cassandra Quarkus extension], which allows you to connect to an Apache Cassandra, DataStax Enterprise (DSE) or DataStax Astra database, using the link:https://docs.datastax.com/en/developer/java-driver/latest[DataStax Java driver]."
msgstr "このクイックスタート・ガイドでは、 link:https://docs.datastax.com/en/developer/java-driver/latest[DataStax Javaドライバー]を使用してApache Cassandra、DataStax Enterprise（DSE）、またはDataStax Astraデータベースに接続できる link:https://github.com/datastax/cassandra-quarkus[Cassandra Quarkusエクステンション]を使用してRESTアプリケーションを構築する方法を説明します。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:37
#, fuzzy
msgid "This guide will also use the link:https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper[DataStax Object Mapper] – a powerful Java-to-CQL mapping framework that greatly simplifies your application's data access layer code by sparing you the hassle of writing your CQL queries by hand."
msgstr "このガイドでは、 link:https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper[DataStax Object Mapper]を使用します。DataStax link:https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper[Object]Mapperは強力なJava-to-CQLマッピング・フレームワークで、アプリケーションのデータ・アクセス・レイヤー・コードを大幅に簡素化し、CQLクエリを手書きする手間を省きます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:41
msgid "The application built in this quickstart guide is quite simple: the user can add elements in a list using a form, and the items list is updated. All the information between the browser and the server is formatted as JSON, and the elements are stored in the Cassandra database."
msgstr "このガイドで構築されたアプリケーションは非常にシンプルです: ユーザーはフォームを使用してリストに要素を追加することができ、アイテムリストが更新されます。ブラウザーとサーバー間の情報はすべてJSONフォーマットで、各要素はCassandraデータベースに保存されます。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:42
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:46
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:50
msgid "The solution is located in the link:https://github.com/datastax/cassandra-quarkus/tree/main/quickstart[quickstart directory] of the Cassandra Quarkus extension GitHub repository."
msgstr "ソリューションはCassandra QuarkusエクステンションGitHubレポジトリの link:https://github.com/datastax/cassandra-quarkus/tree/main/quickstart[quickstart directory] にあります。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:51
#, no-wrap
msgid "Creating a Blank Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:55
msgid "First, create a new Maven project and copy the `pom.xml` file that is present in the `quickstart` directory."
msgstr "まず、新しいMavenプロジェクトを作成し、 `quickstart` ディレクトリーに存在する `pom.xml` ファイルをコピーします。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:57
msgid "The `pom.xml` is importing all the Quarkus extensions and dependencies you need."
msgstr "`pom.xml` 、必要なQuarkusのエクステンションや依存関係をすべてインポートしています。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:58
#, no-wrap
msgid "Creating the Data Model and Data Access Objects"
msgstr "データモデルとデータアクセスオブジェクトの作成"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:61
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、果物のリストを管理するアプリケーションを作成します。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:63
msgid "First, let's create our data model – represented by the `Fruit` class – as follows:"
msgstr "まず、以下のように `Fruit` クラスであらわされるデータもデールを作成してみましょう。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:69
#, no-wrap
msgid ""
"@Entity\n"
"@PropertyStrategy(mutable = false)\n"
"public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:72
#, no-wrap
msgid ""
"    @PartitionKey\n"
"    private final String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:74
#, no-wrap
msgid "    private final String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:81
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"      this.name = name;\n"
"      this.description = description;\n"
"    }\n"
"  // getters, hashCode, equals, toString methods omitted for brevity\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:86
msgid "As stated above, we are using the DataStax Object Mapper. In other words, we are not going to write our CQL queries manually; instead, we will annotate our data model with a few annotations, and the mapper will generate proper CQL queries underneath."
msgstr "前述のとおり、ここではDataStax Object Mapperを使用しています。つまり、CQLクエリーを手動で記述するのではなく、データ・モデルにいくつかのアノテーションを付け、裏側でマッパーが適切なCQLクエリーを生成するのです。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:91
msgid "This is why the `Fruit` class is annotated with `@Entity`: this annotation marks it as an _entity class_ that is mapped to a Cassandra table. Its instances are meant to be automatically persisted into, and retrieved from, the Cassandra database. Here, the table name will be inferred from the class name: `fruit`."
msgstr "これが、 `Fruit` クラスが `@Entity` でアノテーションされている理由です。このアノテーションは、Cassandraテーブルにマッピングされる _エンティティ・クラス_としてマークされます。このクラスのインスタンスは、Cassandraデータベースに自動的に永続化され、そこから取得されます。ここでは、テーブル名はクラス名から推測されます： `fruit` 。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:94
#, fuzzy
msgid "Also, the `name` field represents a Cassandra partition key, and so we are annotating it with `@PartitionKey` – another annotation from the Object Mapper library."
msgstr "また、 `name` フィールドはCassandraのパーティション・キーを表しているので、Object Mapperライブラリのアノテーションである `@PartitionKey` でアノテーションを付けています。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:97
#, fuzzy
msgid "Entity classes are normally required to have a default no-arg constructor, unless they are annotated with `@PropertyStrategy(mutable = false)`, which is the case here."
msgstr "エンティティクラスは、 `@PropertyStrategy(mutable = false)` でアノテーションされている場合を除き、通常、デフォルトの引数なしのコンストラクタを持つことが要求されます（ここではそのようになっています）。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:100
#, fuzzy
msgid "The next step is to create a DAO (Data Access Object) interface that will manage instances of `Fruit` entities:"
msgstr "次のステップは、 `Fruit` エンティティのインスタンスを管理する DAO（Data Access Object）インターフェースを作成することです。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:107
#, no-wrap
msgid ""
"@Dao\n"
"public interface FruitDao {\n"
"  @Update\n"
"  void update(Fruit fruit);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:111
#, no-wrap
msgid ""
"  @Select\n"
"  PagingIterable<Fruit> findAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:116
#, fuzzy
msgid "This interface exposes operations that will be used in our REST service. Again, the annotation `@Dao` comes from the DataStax Object Mapper, which will also automatically generate an implementation of this interface for you."
msgstr "このインターフェースは、RESTサービスで使用されるオペレーションを公開します。繰り返しになりますが、アノテーション `@Dao` はDataStax Object Mapperから来ており、このインターフェイスの実装も自動的に生成されます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:120
#, fuzzy
msgid "Note also the special return type of the `findAll` method, link:https://docs.datastax.com/en/drivers/java/latest/com/datastax/oss/driver/api/core/PagingIterable.html[`PagingIterable`]: it's the base type of result sets returned by the driver."
msgstr "`findAll` メソッドの特別なリターンタイプにも注目してください。  link:https://docs.datastax.com/en/drivers/java/latest/com/datastax/oss/driver/api/core/PagingIterable.html[`PagingIterable`]これは、ドライバーが返す結果セットの基本タイプです。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:122
#, fuzzy
msgid "Finally, let's create the a Mapper interface:"
msgstr "最後に、マッパー・インターフェースを作成しましょう。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:130
#, no-wrap
msgid ""
"@Mapper\n"
"public interface FruitMapper {\n"
"  @DaoFactory\n"
"  FruitDao fruitDao();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:135
#, fuzzy
msgid "The `@Mapper` annotation is yet another annotation recognized by the DataStax Object Mapper. A mapper is responsible for constructing instances of DAOs – in this case, out mapper is constructing an instance of our only DAO, `FruitDao`."
msgstr "`@Mapper` アノテーションは、DataStax Object Mapperによって認識されるもう1つのアノテーションです。マッパーはDAOのインスタンスを構築する役割を果たします。この場合、マッパーは唯一のDAOである `FruitDao` のインスタンスを構築しています。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:136
#, fuzzy, no-wrap
msgid "Creating a Service & JSON REST Endpoint"
msgstr "サービスとJSON RESTエンドポイントの作成"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:140
#, fuzzy
msgid "Now let's create a `FruitService` that will be the business layer of our application and store/load the fruits from the Cassandra database."
msgstr "それでは、アプリケーションのビジネス・レイヤーとなる `FruitService` を作成し、Cassandraデータベースから果物を保存/読み込みましょう。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:145
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:147
#, no-wrap
msgid "  @Inject FruitDao dao;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:151
#, no-wrap
msgid ""
"  public void save(Fruit fruit) {\n"
"    dao.update(fruit);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:156
#, no-wrap
msgid ""
"  public List<Fruit> getAll() {\n"
"    return dao.findAll().all();\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:160
#, fuzzy
msgid "Note how the service is being injected a `FruitDao` instance. This DAO instance is injected automatically."
msgstr "サービスに `FruitDao` のインスタンスが注入されていることに注目してください。このDAOインスタンスは自動的に注入されます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:163
#, fuzzy
msgid "The Cassandra Quarkus extension allows you to inject any of the following beans in your own components:"
msgstr "Cassandra Quarkusエクステンションでは、以下のいずれかのBeanを独自のコンポーネントに注入することができます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:165
#, fuzzy
msgid "All `@Mapper`-annotated interfaces in your project."
msgstr "プロジェクト内のすべての `@Mapper`-annotated インターフェース。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:167
#, fuzzy
msgid "All `@Dao`-annotated interfaces in your project, as long as they are produced by a corresponding `@DaoFactory`-annotated method declared in a mapper interface from your project."
msgstr "プロジェクト内のすべての `@Dao`-アノテーション付きインターフェイス。ただし、プロジェクト内のマッパー・インターフェイスで宣言された対応する `@DaoFactory`-アノテーション付きメソッドによって生成されている場合に限ります。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:172
#, fuzzy
msgid "The link:https://javadoc.io/doc/com.datastax.oss.quarkus/cassandra-quarkus-client/latest/com/datastax/oss/quarkus/runtime/api/session/QuarkusCqlSession.html[`QuarkusCqlSession`] bean: this application-scoped, singleton bean is your main entry point to the Cassandra client; it is a specialized Cassandra driver session instance with a few methods tailored especially for Quarkus. Read its javadocs carefully!"
msgstr "のことです。  link:https://javadoc.io/doc/com.datastax.oss.quarkus/cassandra-quarkus-client/latest/com/datastax/oss/quarkus/runtime/api/session/QuarkusCqlSession.html[`QuarkusCqlSession`]これは、Quarkus用に特別に作られたいくつかのメソッドを持つ、特殊なCassandraドライバセッションインスタンスです。このビーンのjavadocsをよく読んでください。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:175
#, fuzzy
msgid "In our example, both `FruitMapper` and `FruitDao` could be injected anywhere. We chose to inject `FruitDao` in `FruitService`."
msgstr "この例では、 `FruitMapper` と `FruitDao` の両方をどこにでも注入することができます。私たちは、 `FruitDao` を `FruitService` に注入することにしました。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:177
msgid "The last missing piece is the REST API that will expose GET and POST methods:"
msgstr "最後に必要なのは、GETとPOSTのメソッドを公開するREST APIです。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:184
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:186
#, no-wrap
msgid "  @Inject FruitService fruitService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:191
#, no-wrap
msgid ""
"  @GET\n"
"  public List<FruitDto> getAll() {\n"
"    return fruitService.getAll().stream().map(this::convertToDto).collect(Collectors.toList());\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:196
#, no-wrap
msgid ""
"  @POST\n"
"  public void add(FruitDto fruit) {\n"
"    fruitService.save(convertFromDto(fruit));\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:200 upstream/_guides/cassandra.adoc:502
#, no-wrap
msgid ""
"  private FruitDto convertToDto(Fruit fruit) {\n"
"    return new FruitDto(fruit.getName(), fruit.getDescription());\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:205 upstream/_guides/cassandra.adoc:507
#, no-wrap
msgid ""
"  private Fruit convertFromDto(FruitDto fruitDto) {\n"
"    return new Fruit(fruitDto.getName(), fruitDto.getDescription());\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:208
#, fuzzy
msgid "Notice how `FruitResource` is being injected a `FruitService` instance automatically."
msgstr "`FruitResource` が `FruitService` のインスタンスに自動的に注入されていることに注目してください。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:214
#, fuzzy
msgid "It is generally not recommended using the same entity object between the REST API and the data access layer. These layers should indeed be decoupled and use distinct APIs in order to allow each API to evolve independently of the other. This is the reason why our REST API is using a different object: the `FruitDto` class – the word DTO stands for \"Data Transfer Object\". This DTO object will be automatically converted to and from JSON in HTTP messages:"
msgstr "一般的に、REST APIとデータアクセス層で同じエンティティオブジェクトを使用することは推奨されません。REST API とデータ・アクセス・レイヤーの間で同じエンティティ・オブジェクトを使用することは、一般的に推奨されていません。これが、REST API が `FruitDto` クラスという別のオブジェクトを使用している理由です。DTO という言葉は「Data Transfer Object」の略です。このDTOオブジェクトは、HTTPメッセージ内のJSONとの間で自動的に変換されます。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:218
#, no-wrap
msgid "public class FruitDto {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:221
#, no-wrap
msgid ""
"  private String name;\n"
"  private String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:223
#, no-wrap
msgid "  public FruitDto() {}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:230
#, no-wrap
msgid ""
"  public FruitDto(String name, String description) {\n"
"    this.name = name;\n"
"    this.description = description;\n"
"  }\n"
"  // getters and setters omitted for brevity\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:235
#, fuzzy
msgid "The translation to and from JSON is done automatically by the Quarkus RESTEasy Reactive extension, which is included in this guide's pom.xml file. If you want to add it manually to your application, add the below snippet to your application's ppm.xml file:"
msgstr "JSONとの変換は、このガイドのpom.xmlファイルに含まれているQuarkus RestEasyエクステンションによって自動的に行われます。アプリケーションに手動で追加したい場合は、以下のスニペットをアプリケーションのppm.xmlファイルに追加してください。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:246
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:250
msgid "DTO classes used by the JSON serialization layer are required to have a default no-arg constructor."
msgstr "JSONのシリアライゼーションレイヤーで使用されるDTOクラスは、デフォルトの引数なしのコンストラクタが必要です。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:254
#, fuzzy
msgid "The conversion from DTO to JSON is handled automatically for us, but we still must convert from `Fruit` to `FruitDto` and vice versa. This must be done manually, which is why we have two conversion methods declared in `FruitResource`: `convertToDto` and `convertFromDto`."
msgstr "DTO から JSON への変換は自動的に処理されますが、 `Fruit` から `FruitDto` への変換、およびその逆の変換は手動で行う必要があります。これは手動で行わなければなりません。そのため、 `FruitResource` で宣言されている2つの変換メソッド、 `convertToDto` と `convertFromDto` があります。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:258
#, fuzzy
msgid "In our example, `Fruit` and `FruitDto` are very similar, so you might wonder why not use `Fruit` everywhere. In real life cases though, it's not uncommon to see DTOs and entities having very different structures."
msgstr "この例では、 `Fruit` と `FruitDto` は非常によく似ているので、なぜどこでも `Fruit` を使わないのかと思うかもしれません。しかし、実際のケースでは、DTOとエンティティが非常に異なる構造を持つことは珍しくありません。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:259
#, no-wrap
msgid "Connecting to the Cassandra Database"
msgstr "Cassandraデータベースへの接続"

#. type: Title ===
#: upstream/_guides/cassandra.adoc:261
#, no-wrap
msgid "Connecting to Apache Cassandra or DataStax Enterprise (DSE)"
msgstr "Apache CassandraまたはDataStax Enterprise(DSE)への接続"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:265
#, fuzzy
msgid "The main properties to configure are: `contact-points`, to access the Cassandra database; `local-datacenter`, which is required by the driver; and – optionally – the keyspace to bind to."
msgstr "設定する主なプロパティは以下のとおりです。 `contact-points` （Cassandraデータベースにアクセスするため）、 `local-datacenter` （ドライバーが必要とするもの）、そして（オプションで）結合するキースペースです。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:267
msgid "A sample configuration should look like this:"
msgstr "設定のサンプルは以下のようになります。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:273
#, no-wrap
msgid ""
"quarkus.cassandra.contact-points={cassandra_ip}:9042\n"
"quarkus.cassandra.local-datacenter={dc_name}\n"
"quarkus.cassandra.keyspace={keyspace}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:277
msgid "In this example, we are using a single instance running on localhost, and the keyspace containing our data is `k1`:"
msgstr "この例では、localhost上で動作する単一のインスタンスを使用しており、データを含むキースペースは `k1` となっています。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:283
#, no-wrap
msgid ""
"quarkus.cassandra.contact-points=127.0.0.1:9042\n"
"quarkus.cassandra.local-datacenter=datacenter1\n"
"quarkus.cassandra.keyspace=k1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:287
#, fuzzy
msgid "If your cluster requires plain text authentication, you must also provide two more settings: `username` and `password`."
msgstr "クラスタでプレーンテキスト認証が必要な場合は、さらに `username` と `password` の2つの設定を行う必要があります。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:292
#, no-wrap
msgid ""
"quarkus.cassandra.auth.username=john\n"
"quarkus.cassandra.auth.password=s3cr3t\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cassandra.adoc:294
#, fuzzy, no-wrap
msgid "Connecting to a DataStax Astra Cloud Database"
msgstr "DataStax Astra Cloudデータベースへの接続"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:300
#, fuzzy
msgid "When connecting to link:https://astra.datastax.com[DataStax Astra], instead of providing a contact point and a datacenter, you should provide a so-called _secure connect bundle_, which should point to a valid path to an Astra secure connect bundle file. You can download your secure connect bundle from the Astra web console."
msgstr "link:https://astra.datastax.com[DataStax Astra]に接続する際には、コンタクト・ポイントとデータセンターを提供する代わりに、いわゆる _セキュア・コネクト・バンドル_を提供する必要があります。このバンドルは、Astraセキュア・コネクト・バンドル・ファイルへの有効なパスを指す必要があります。セキュア・コネクト・バンドルは、Astraウェブ・コンソールからダウンロードできます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:303
#, fuzzy
msgid "You will also need to provide a username and password, since authentication is always required on Astra clusters."
msgstr "また、Astraクラスターでは常に認証が必要なため、ユーザー名とパスワードを入力する必要があります。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:305
msgid "A sample configuration for DataStax Astra should look like this:"
msgstr "DataStax Astraのサンプル構成は次のようになります。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:312
#, no-wrap
msgid ""
"quarkus.cassandra.cloud.secure-connect-bundle=/path/to/secure-connect-bundle.zip\n"
"quarkus.cassandra.auth.username=john\n"
"quarkus.cassandra.auth.password=s3cr3t\n"
"quarkus.cassandra.keyspace=k1\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cassandra.adoc:314
#, fuzzy, no-wrap
msgid "Advanced Driver Configuration"
msgstr "ドライバの詳細設定"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:321
#, fuzzy
msgid "You can configure other Java driver settings using `application.conf` or `application.json` files.  They need to be located in the classpath of your application. All settings will be passed automatically to the underlying driver configuration mechanism. Settings defined in `application.properties` with the `quarkus.cassandra` prefix will have priority over settings defined in `application.conf` or `application.json`."
msgstr "`application.conf` または `application.json` ファイルを使用して、他の Java ドライバの設定を行うことができます。これらのファイルは、アプリケーションのクラスパスに配置する必要があります。すべての設定は、基礎となるドライバー設定メカニズムに自動的に渡されます。 `application.properties` に `quarkus.cassandra` というプレフィックスを付けて定義された設定は、 `application.conf` または `application.json` で定義された設定よりも優先されます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:325
msgid "To see the full list of settings, please refer to the link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[driver settings reference]."
msgstr "設定の全リストを見るには、 link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[ドライバーの設定リファレンス] を参照してください。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:326
#, fuzzy, no-wrap
msgid "Running a Local Cassandra Database"
msgstr "ローカルCassandraデータベースの実行"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:330
#, fuzzy
msgid "By default, the Cassandra client is configured to access a local Cassandra database on port 9042 (the default Cassandra port)."
msgstr "デフォルトでは、Cassandraクライアントは、ポート9042（デフォルトのCassandraポート）でローカルのCassandraデータベースにアクセスするように構成されています。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:333
msgid "Make sure that the setting `quarkus.cassandra.local-datacenter` matches the datacenter of your Cassandra cluster."
msgstr "設定 `quarkus.cassandra.local-datacenter` が、Cassandraクラスターのデータセンターと一致していることを確認してください。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:336
msgid "If you don't know the name of your local datacenter, this value can be found by running the following CQL query: `SELECT data_center FROM system.local`."
msgstr "ローカルのデータセンターの名前がわからない場合は、以下の CQL クエリを実行することでこの値を見つけることができます : `SELECT data_center FROM system.local` "

#. type: Plain text
#: upstream/_guides/cassandra.adoc:339
#, fuzzy
msgid "If you want to use Docker to run a Cassandra database, you can use the following command to launch one in the background:"
msgstr "Dockerを使ってCassandraデータベースを動かす場合は、以下のコマンドでバックグラウンドで起動することができます。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:343
#, no-wrap
msgid "docker run --name local-cassandra-instance -p 9042:9042 -d cassandra\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:347
msgid "Next you need to create the keyspace and table that will be used by your application. If you are using Docker, run the following commands:"
msgstr "次に、アプリケーションで使用するキースペースとテーブルを作成する必要があります。Dockerを使用している場合は、以下のコマンドを実行します。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:352
#, no-wrap
msgid ""
"docker exec -it local-cassandra-instance cqlsh -e \"CREATE KEYSPACE IF NOT EXISTS k1 WITH replication = {'class':'SimpleStrategy', 'replication_factor':1}\"\n"
"docker exec -it local-cassandra-instance cqlsh -e \"CREATE TABLE IF NOT EXISTS k1.fruit(name text PRIMARY KEY, description text)\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:355
#, fuzzy
msgid "You can also use the CQLSH utility to interactively interrogate your database:"
msgstr "また、CQLSHユーティリティーを使って、データベースをインタラクティブに照会することもできます。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:359
#, no-wrap
msgid "docker exec -it local-cassandra-instance cqlsh\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cassandra.adoc:361
#, fuzzy, no-wrap
msgid "Testing the REST API"
msgstr "REST APIのテスト"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:364
#, fuzzy
msgid "In the project root directory:"
msgstr "プロジェクトのルートディレクトリに"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:366
#, fuzzy
msgid "Run `mvn clean package` and then `java -jar ./target/cassandra-quarkus-quickstart-*-runner.jar` to start the application;"
msgstr "`mvn clean package` を実行し、次に `java -jar ./target/cassandra-quarkus-quickstart-*-runner.jar` を実行してアプリケーションを起動します。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:367
#, fuzzy
msgid "Or better yet, run the application in dev mode: `mvn clean quarkus:dev`."
msgstr "また、より良い方法として、アプリケーションを開発モードで実行することもできます。 `mvn clean quarkus:dev`."

#. type: Plain text
#: upstream/_guides/cassandra.adoc:369
#, fuzzy
msgid "Now you can use curl commands to interact with the underlying REST API."
msgstr "これで、curlコマンドを使って、基礎となるREST APIを操作できるようになりました。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:371
#, fuzzy
msgid "To create a fruit:"
msgstr "果実を作るために"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:378
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"name\":\"apple\",\"description\":\"red and tasty\"}' \\\n"
"  http://localhost:8080/fruits\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:381
#, fuzzy
msgid "To retrieve fruits:"
msgstr "果実を取り出すために"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:385
#, no-wrap
msgid "curl -X GET http://localhost:8080/fruits\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cassandra.adoc:387
#, fuzzy, no-wrap
msgid "Creating a Frontend"
msgstr "フロントエンドの作成"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:390
msgid "Now let's add a simple web page to interact with our `FruitResource`."
msgstr "それでは、 `FruitResource` と対話するためのシンプルなウェブページを追加してみましょう。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:394
#, fuzzy
msgid "Quarkus automatically serves static resources located under the `META-INF/resources` directory. In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the contents from link:src/main/resources/META-INF/resources/fruits.html[this file] in it."
msgstr "Quarkusは、 `META-INF/resources` ディレクトリの下にある静的リソースを自動的に提供します。 `src/main/resources/META-INF/resources` ディレクトリに、 link:src/main/resources/META-INF/resources/fruits.html[このファイル]の内容を含む `fruits.html` ファイルを追加します。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:396
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:398 upstream/_guides/cassandra.adoc:553
#, fuzzy
msgid "If you haven't done yet, start your application with `mvn clean quarkus:dev`;"
msgstr "まだの方は、 `mvn clean quarkus:dev` でアプリケーションを開始してください。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:399
#, fuzzy
msgid "Point your browser to `http://localhost:8080/fruits.html`;"
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:400 upstream/_guides/cassandra.adoc:555
#, fuzzy
msgid "Add new fruits to the list via the form."
msgstr "フォームを使って新しい果物をリストに追加することができます。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:402
#, fuzzy, no-wrap
msgid "Reactive Programming with the Cassandra Client"
msgstr "Cassandraクライアントの使用"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:408
#, fuzzy
msgid "The link:https://javadoc.io/doc/com.datastax.oss.quarkus/cassandra-quarkus-client/latest/com/datastax/oss/quarkus/runtime/api/session/QuarkusCqlSession.html[`QuarkusCqlSession` interface] gives you access to a series of reactive methods that integrate seamlessly with Quarkus and its reactive framework, Mutiny."
msgstr "link:https://javadoc.io/doc/com.datastax.oss.quarkus/cassandra-quarkus-client/latest/com/datastax/oss/quarkus/runtime/api/session/QuarkusCqlSession.html[`QuarkusCqlSession`]インターフェースでは、QuarkusとそのリアクティブフレームワークであるMutinyとシームレスに統合する一連のリアクティブメソッドにアクセスできます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:410
#, fuzzy
msgid "If you are not familiar with Mutiny, please check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutinyに馴染みのない方は、 link:mutiny-primer.html[Mutiny - an intuitive reactive programming library]をご覧ください。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:412
#, fuzzy
msgid "Let's rewrite our application using reactive programming with Mutiny."
msgstr "Mutinyを使ってリアクティブ・プログラミングでアプリケーションを書き換えてみましょう。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:414
#, fuzzy
msgid "First, let's to declare another DAO interface that works in a reactive way:"
msgstr "まず、リアクティブに動作する別のDAOインターフェースを宣言してみましょう。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:419
#, no-wrap
msgid ""
"@Dao\n"
"public interface ReactiveFruitDao {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:422
#, no-wrap
msgid ""
"  @Update\n"
"  Uni<Void> updateAsync(Fruit fruit);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:426
#, no-wrap
msgid ""
"  @Select\n"
"  MutinyMappedReactiveResultSet<Fruit> findAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:433
#, fuzzy
msgid "Note the usage of `MutinyMappedReactiveResultSet` - it is a specialized `Mutiny` type converted from the original `Publisher` returned by the driver, which also exposes a few extra methods, e.g. to obtain the query execution info. If you don't need anything in that interface, you can also simply declare your method to return `Multi`: `Multi<Fruit> findAll()`,"
msgstr "`MutinyMappedReactiveResultSet` の使い方に注意してください。これは、ドライバが返したオリジナルの `Publisher` から変換された特殊な `Mutiny` タイプで、クエリの実行情報を取得するなど、いくつかの追加メソッドも公開されています。このインターフェースに何も必要ない場合は、単に `Multi`: `Multi<Fruit> findAll()` を返すようにメソッドを宣言することもできます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:436
msgid "Similarly, the method `updateAsync` returns a `Uni` - it is automatically converted from the original result set returned by the driver."
msgstr "同様に、メソッド `updateAsync` は `Uni` を返します。これは、ドライバーが返す元の結果セットから自動的に変換されます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:444
msgid "The Cassandra driver uses the Reactive Streams `Publisher` API for reactive calls. The Quarkus framework however uses Mutiny. Because of that, the `CqlQuarkusSession` interface transparently converts the `Publisher` instances returned by the driver into the reactive type `Multi`.  `CqlQuarkusSession` is also capable of converting a `Publisher` into a `Uni` – in this case, the publisher is expected to emit at most one row, then complete. This is suitable for write queries (they return no rows), or for read queries guaranteed to return one row at most (count queries, for example)."
msgstr "Cassandraドライバは、リアクティブコールにReactive Streamsの `Publisher` APIを使用しています。しかし、QuarkusフレームワークではMutinyを使用しています。そのため、 `CqlQuarkusSession` インターフェイスは、ドライバが返す `Publisher` インスタンスを透過的にリアクティブ型の `Multi` に変換します。 `CqlQuarkusSession` は `Publisher` を `Uni` に変換することもできます - この場合、パブリッシャーは最大で1行を出力し、その後完了することが期待されます。これは書き込みクエリ(行を返さない)や、最大で1行を返すことが 保証されている読み込みクエリ(例えばカウントクエリ)に適しています。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:446
#, fuzzy
msgid "Next, we need to adapt the `FruitMapper` to construct a `ReactiveFruitDao` instance:"
msgstr "次に、 `FruitMapper` を適応させて `ReactiveFruitDao` のインスタンスを構築する必要があります。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:452
#, no-wrap
msgid ""
"@Mapper\n"
"public interface FruitMapper {\n"
"  // the existing method omitted\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:456
#, no-wrap
msgid ""
"  @DaoFactory\n"
"  ReactiveFruitDao reactiveFruitDao();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:460
#, fuzzy
msgid "Now, we can create a `ReactiveFruitService` that leverages our reactive DAO:"
msgstr "これで、リアクティブDAOを活用した `ReactiveFruitService` を作成することができます。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:465
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ReactiveFruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:467
#, no-wrap
msgid "  @Inject ReactiveFruitDao fruitDao;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:471
#, no-wrap
msgid ""
"  public Uni<Void> add(Fruit fruit) {\n"
"    return fruitDao.update(fruit);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:476
#, no-wrap
msgid ""
"  public Multi<Fruit> getAll() {\n"
"    return fruitDao.findAll();\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:479
#, fuzzy
msgid "Finally, we can create a `ReactiveFruitResource`:"
msgstr "最後に、 `ReactiveFruitResource` を作成します。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:486
#, no-wrap
msgid ""
"@Path(\"/reactive-fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class ReactiveFruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:488
#, no-wrap
msgid "  @Inject ReactiveFruitService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:493
#, no-wrap
msgid ""
"  @GET\n"
"  public Multi<FruitDto> getAll() {\n"
"    return service.getAll().map(this::convertToDto);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:498
#, no-wrap
msgid ""
"  @POST\n"
"  public Uni<Void> add(FruitDto fruitDto) {\n"
"    return service.add(convertFromDto(fruitDto));\n"
"  }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:512
#, fuzzy
msgid "The above resource is exposing a new endpoint, `reactive-fruits`. Its capabilities are identical to the ones that we created before with `FruitResource`, but everything is handled in a reactive fashion, without any blocking operation."
msgstr "上記のリソースは、 `reactive-fruits` という新しいエンドポイントを公開しています。このエンドポイントの機能は、以前 `FruitResource` で作成したものと同じですが、すべての処理はブロック操作なしでリアクティブに行われます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:516
#, fuzzy
msgid "The `getAll()` method above returns `Multi`, and the `add()` method returns `Uni`. These types are the same Mutiny types that we met before; they are automatically recognized by the Quarkus reactive REST API, so we don't need to convert them into JSON ourselves."
msgstr "上記の `getAll()` メソッドは `Multi` を返し、 `add()` メソッドは `Uni` を返します。これらの型は、前に会ったのと同じMutiny型です。これらの型は、Quarkus reactive REST APIによって自動的に認識されるため、自分でJSONに変換する必要はありません。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:518
#, fuzzy
msgid "RESTEasy Reactive natively supports the Mutiny reactive types e.g. `Uni` and `Multi`."
msgstr "RESTEasy Reactive は、Mutiny のリアクティブタイプ（ `Uni` および `Multi` など）をネイティブにサポートします。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:521
#, fuzzy
msgid "This dependency is already included in this guide's pom.xml, but if you are starting a new project from scratch, make sure to include it."
msgstr "この依存関係は、本ガイドのpom.xmlにすでに含まれていますが、新しいプロジェクトをゼロから始める場合は、必ず含めるようにしてください。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:522
#, fuzzy, no-wrap
msgid "Testing the Reactive REST API"
msgstr "Reactive REST APIのテスト"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:526
#, fuzzy
msgid "Run the application in dev mode as explained above, then you can use curl commands to interact with the underlying REST API."
msgstr "上記のようにアプリケーションを開発モードで実行すると、curlコマンドを使って基礎となるREST APIを操作できるようになります。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:528
#, fuzzy
msgid "To create a fruit using the reactive REST endpoint:"
msgstr "リアクティブRESTエンドポイントを使ってフルーツを作るには"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:535
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"name\":\"banana\",\"description\":\"yellow and sweet\"}' \\\n"
"  http://localhost:8080/reactive-fruits\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:538
#, fuzzy
msgid "To retrieve fruits with the reactive REST endpoint:"
msgstr "リアクティブRESTエンドポイントでフルーツを取得するには、次のようにします。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:542
#, no-wrap
msgid "curl -X GET http://localhost:8080/reactive-fruits\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cassandra.adoc:544
#, fuzzy, no-wrap
msgid "Creating a Reactive Frontend"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:549
#, fuzzy
msgid "Now let's add a simple web page to interact with our `ReactiveFruitResource`. In the `src/main/resources/META-INF/resources` directory, add a `reactive-fruits.html` file with the contents from link:src/main/resources/META-INF/resources/reactive-fruits.html[this file] in it."
msgstr "それでは、 `ReactiveFruitResource` と連動するシンプルな Web ページを追加してみましょう。 `src/main/resources/META-INF/resources` ディレクトリに、 link:src/main/resources/META-INF/resources/reactive-fruits.html[このファイル]の内容を含む `reactive-fruits.html` ファイルを追加します。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:551
msgid "You can now interact with your reactive REST service:"
msgstr "これで、リアクティブな REST サービスと対話できるようになりました。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:554
#, fuzzy
msgid "Point your browser to `http://localhost:8080/reactive-fruits.html`;"
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:556
#, no-wrap
msgid "Health Checks"
msgstr "ヘルスチェック"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:562
#, fuzzy
msgid "If you are using the Quarkus SmallRye Health extension, then the Cassandra client will automatically add a readiness health check to validate the connection to the Cassandra cluster. This extension is already included in this guide's pom.xml, but if you need to include it manually in your application, add the following:"
msgstr "Quarkus SmallRye Healthエクステンションを使用している場合、Cassandraクライアントは、Cassandraクラスターへの接続を検証するためのレディネス・ヘルス・チェックを自動的に追加します。このエクステンションは、このガイドのpom.xmlにすでに含まれていますが、アプリケーションに手動で含める必要がある場合は、次のように追加します。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:569
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-smallrye-health</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:573
#, fuzzy
msgid "When health checks are available, you can access the `/health/ready` endpoint of your application and have information about the connection validation status."
msgstr "ヘルスチェックが利用できると、アプリケーションの `/health/ready` エンドポイントにアクセスして、接続検証状況に関する情報を得ることができます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:576
#, fuzzy
msgid "Running in dev mode with `mvn clean quarkus:dev`, if you point your browser to http://localhost:8080/health/ready you should see an output similar to the following one:"
msgstr "開発モードで `mvn clean quarkus:dev` を起動し、ブラウザで http://localhost:8080/health/ready を表示すると、次のような出力が表示されます。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:595
#, no-wrap
msgid ""
"{\n"
"    \"status\": \"UP\",\n"
"    \"checks\": [\n"
"        {\n"
"            \"name\": \"DataStax Apache Cassandra Driver health check\",\n"
"            \"status\": \"UP\",\n"
"            \"data\": {\n"
"                \"cqlVersion\": \"3.4.4\",\n"
"                \"releaseVersion\": \"3.11.7\",\n"
"                \"clusterName\": \"Test Cluster\",\n"
"                \"datacenter\": \"datacenter1\",\n"
"                \"numberOfNodes\": 1\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:600
#, fuzzy
msgid "If you need health checks globally enabled in your application, but don't want to activate Cassandra health checks, you can disable Cassandra health checks by setting the `quarkus.cassandra.health.enabled` property to `false` in your `application.properties`."
msgstr "アプリケーションでヘルス・チェックをグローバルに有効にする必要があるが、Cassandraのヘルス・チェックを有効にしたくない場合は、 `application.properties` で `quarkus.cassandra.health.enabled` プロパティを `false` に設定することで、Cassandraのヘルス・チェックを無効にすることができます。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:601
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:605
#, fuzzy
msgid "The Cassandra Quarkus client can provide metrics about the Cassandra session and about individual Cassandra nodes. It supports both Micrometer and MicroProfile."
msgstr "Cassandra Quarkusクライアントは、Cassandraセッションおよび個々のCassandraノードに関するメトリクスを提供できます。MicrometerとMicroProfileの両方をサポートしています。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:608
#, fuzzy
msgid "The first step to enable metrics is to add a few additional dependencies depending on the metrics framework you plan to use."
msgstr "メトリクスを有効にするための最初のステップは、使用するメトリクス・フレームワークに応じて、いくつかの依存関係を追加することです。"

#. type: Title ===
#: upstream/_guides/cassandra.adoc:609
#, fuzzy, no-wrap
msgid "Enabling Metrics with Micrometer"
msgstr "Micrometerで測定値を実現"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:612
#, fuzzy
msgid "Micrometer is the recommended metrics framework in Quarkus applications."
msgstr "Micrometerは、Quarkusのアプリケーションで推奨されるメトリクスフレームワークです。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:614
#, fuzzy
msgid "To enable Micrometer metrics in your application, you need to add the following to your pom.xml."
msgstr "アプリケーションでMicrometerメトリクスを有効にするには、pom.xmlに以下を追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:625
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>com.datastax.oss</groupId>\n"
"  <artifactId>java-driver-metrics-micrometer</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-micrometer-registry-prometheus</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:628
#, fuzzy
msgid "This guide uses Micrometer, so the above dependencies are already included in this guide's pom.xml."
msgstr "このガイドではMicrometerを使用しているので、上記の依存関係はこのガイドのpom.xmlにすでに含まれています。"

#. type: Title ===
#: upstream/_guides/cassandra.adoc:629
#, fuzzy, no-wrap
msgid "Enabling Metrics with MicroProfile Metrics"
msgstr "MicroProfile Metricsでメトリクスを有効にする"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:632
#, fuzzy
msgid "Remove any dependency to Micrometer from your pom.xml, then add the following ones instead:"
msgstr "pom.xmlからMicrometerへの依存関係を削除し、代わりに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:643
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>com.datastax.oss</groupId>\n"
"  <artifactId>java-driver-metrics-microprofile</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-smallrye-metrics</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cassandra.adoc:645
#, fuzzy, no-wrap
msgid "Enabling Cassandra Metrics"
msgstr "Cassandraクライアントの使用"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:650
#, fuzzy
msgid "Even when metrics are enabled in your application, the Cassandra client will not report any metrics, unless you opt-in for this feature. So your next step is to enable Cassandra metrics in your `application.properties` file."
msgstr "アプリケーションでメトリクスが有効になっていても、この機能をオプトインしない限り、Cassandraクライアントはメトリクスを報告しません。したがって、次のステップは、 `application.properties` ファイルで Cassandra メトリクスを有効にすることです。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:654
#, no-wrap
msgid "quarkus.cassandra.metrics.enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:657
#, fuzzy
msgid "That's it!"
msgstr "それだ！」と。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:661
#, fuzzy
msgid "The final (and optional) step is to customize which specific Cassandra metrics you would like the Cassandra client to track. Several metrics can be tracked; if you skip this step, a default set of useful metrics will be automatically tracked."
msgstr "最後の（オプションの）ステップは、Cassandraクライアントに追跡させたい特定のCassandraメトリクスをカスタマイズすることです。複数のメトリクスを追跡することができます。このステップを省略すると、有用なメトリクスのデフォルト・セットが自動的に追跡されます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:667
#, fuzzy
msgid "For the full list of available metric names, please refer to the link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[driver settings reference] page; search for the `advanced.metrics` section.  Also, Cassandra driver metrics are covered in detail in the https://docs.datastax.com/en/developer/java-driver/latest/manual/core/metrics/[driver manual]."
msgstr "利用可能なメトリック名の完全なリストについては、 link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[ドライバー設定のリファレンス・]ページを参照してください。 `advanced.metrics` セクションを検索してください。また、Cassandraドライバのメトリックについては、 link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/metrics/[ドライバ・マニュアル]で詳しく説明されています。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:669
#, fuzzy
msgid "If you do wish to customize which metrics to track, you should use the following properties:"
msgstr "どのメトリクスを追跡するかをカスタマイズしたい場合は、以下のプロパティを使用する必要があります。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:672
#, fuzzy
msgid "`quarkus.cassandra.metrics.session.enabled` should contain the session-level metrics to enable (metrics that are global to the session)."
msgstr "`quarkus.cassandra.metrics.session.enabled` には、有効にするセッションレベルのメトリクス（セッションにグローバルに適用されるメトリクス）を入れてください。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:674
#, fuzzy
msgid "`quarkus.cassandra.metrics.node.enabled` should contain the node-level metrics to enable (metrics for which each node contacted by the Cassandra client gets its own metric value)."
msgstr "`quarkus.cassandra.metrics.node.enabled` には、有効にするノード・レベルのメトリクス（Cassandraクライアントが接触する各ノードが独自のメトリクス値を取得するメトリクス）を含める必要があります。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:676
#, fuzzy
msgid "Both properties accept a comma-separated list of valid metric names."
msgstr "どちらのプロパティも、有効なメトリック名をカンマで区切ったリストを受け付けます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:678
#, fuzzy
msgid "For example, let's assume that you wish to enable the following three Cassandra metrics:"
msgstr "例えば、以下の3つのCassandraメトリクスを有効にしたいとします。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:680
#, fuzzy
msgid "Session-level: `session.connected-nodes` and `session.bytes-sent`;"
msgstr "セッションレベル： `session.connected-nodes` と `session.bytes-sent`;"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:681
#, fuzzy
msgid "Node-level: `node.pool.open-connections`."
msgstr "ノードレベル: `node.pool.open-connections`."

#. type: Plain text
#: upstream/_guides/cassandra.adoc:683
#, fuzzy
msgid "Then you should add the following settings to your `application.properties`:"
msgstr "そして、以下の設定を `application.properties` に追加してください。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:689
#, no-wrap
msgid ""
"quarkus.cassandra.metrics.enabled=true\n"
"quarkus.cassandra.metrics.session.enabled=connected-nodes,bytes-sent\n"
"quarkus.cassandra.metrics.node.enabled=pool.open-connections\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:693
#, fuzzy
msgid "This guide's `application.properties` file has already many metrics enabled; you can use its metrics list as a good starting point for exposing useful Cassandra metrics in your application."
msgstr "このガイドの `application.properties` ファイルでは、すでに多くのメトリクスが有効になっています。そのメトリクス・リストは、アプリケーションで有用なCassandraメトリクスを公開するための良い出発点として使用できます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:696
#, fuzzy
msgid "When metrics are properly enabled, metric reports for all enabled metrics are available at the `/metrics` REST endpoint of your application."
msgstr "メトリクスが適切に有効化されると、有効化されたすべてのメトリクスのメトリクス・レポートが、アプリケーションの `/metrics` RESTエンドポイントで利用できるようになります。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:700
#, fuzzy
msgid "Running in dev mode with `mvn clean quarkus:dev`, if you point your browser to `http://localhost:8080/metrics` you should see a list of metrics; search for metrics whose names contain `cassandra`."
msgstr "開発モードで `mvn clean quarkus:dev` を実行している場合、ブラウザを以下に向けると、メトリクスのリストが表示されます。 `<a href=\"http://localhost:8080/metrics\" class=\"bare\">http://localhost:8080/metrics</a>`メトリクスのリストが表示されます。名前に `cassandra` が含まれるメトリクスを検索してください。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:704
#, fuzzy
msgid "For Cassandra metrics to show up, the Cassandra client needs to be initialized and connected; if you are using lazy initialization (see below), you won't see any Cassandra metrics until your application actually connects and hits the database for the first time."
msgstr "Cassandraメトリクスを表示するには、Cassandraクライアントを初期化して接続する必要があります。遅延初期化（下記参照）を使用している場合は、アプリケーションが実際に接続してデータベースに初めてヒットするまで、Cassandraメトリクスは表示されません。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:705
#, no-wrap
msgid "Running in native mode"
msgstr "ネイティブモードでの実行"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:709
#, fuzzy
msgid "If you installed GraalVM, you can link:https://quarkus.io/guides/building-native-image[build a native image] using:"
msgstr "GraalVMをインストールした場合は、以下の方法で link:https://quarkus.io/guides/building-native-image[ネイティブイメージを構築]することができます。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:713
#, no-wrap
msgid "mvn clean package -Dnative\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:717
#, fuzzy
msgid "Beware that native compilation can take a significant amount of time! Once the compilation is done, you can run the native executable as follows:"
msgstr "ネイティブのコンパイルにはかなりの時間がかかりますのでご注意ください。コンパイルが終わったら、次のようにしてネイティブ実行可能ファイルを実行します。"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:721
#, no-wrap
msgid "./target/cassandra-quarkus-quickstart-*-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:724
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:725
#, fuzzy, no-wrap
msgid "Eager vs Lazy Initialization"
msgstr "EagerとLazyの初期化"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:728
msgid "This extension allows you to inject either:"
msgstr "このエクステンションでは、どちらかを注入することができます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:730
#, fuzzy
msgid "a `QuarkusCqlSession` bean;"
msgstr "`QuarkusCqlSession` の豆です。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:731
#, fuzzy
msgid "or the asynchronous version of this bean, that is, `CompletionStage<QuarkusCqlSession>`;"
msgstr "や、このビーンの非同期バージョン、つまり `CompletionStage<QuarkusCqlSession>`;"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:732
#, fuzzy
msgid "or the reactive version of this bean, that is, `Uni<QuarkusCqlSession>`."
msgstr "または、このビーンのリアクティブバージョン、つまり、 `Uni<QuarkusCqlSession>` 。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:736
#, fuzzy
msgid "The most straightforward approach is obviously to inject `QuarkusCqlSession` directly. This should work just fine for most applications; however, the `QuarkusCqlSession` bean needs to be initialized before it can be used, and this process is blocking."
msgstr "最も簡単な方法は、当然ながら `QuarkusCqlSession` を直接注入することです。しかし、 `QuarkusCqlSession` ビーンを使用する前に初期化する必要があり、このプロセスはブロックされます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:743
#, fuzzy
msgid "Fortunately, it is possible to control when the initialization should happen: the `quarkus.cassandra.init.eager-init` parameter determines if the `QuarkusCqlSession` bean should be initialized on its first access (lazy) or when the application is starting (eager). The default value of this parameter is `false`, meaning the init process is lazy: the `QuarkusCqlSession` bean will be initialized lazily on its first access – for example, when there is a first REST request that needs to interact with the Cassandra database."
msgstr "幸いなことに、初期化を行うタイミングを制御することが可能です。 `quarkus.cassandra.init.eager-init` パラメータは、 `QuarkusCqlSession` ビーンを最初のアクセス時に初期化するか (遅延) 、アプリケーションの起動時に初期化するか (熱心) を決定します。このパラメータのデフォルト値は `false` で、これは init プロセスがレイジーであることを意味します。 `QuarkusCqlSession` Bean は、最初のアクセス時 (たとえば、Cassandra データベースと対話する必要がある最初の REST 要求がある場合など) にレイジーに初期化されます。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:750
#, fuzzy
msgid "Using lazy initialization speeds up your application startup time, and avoids startup failures if the Cassandra database is not available. However, it could also prove dangerous if your code is fully asynchronous, e.g. if you are using https://quarkus.io/guides/reactive-routes[reactive routes]: indeed, the lazy initialization could accidentally happen on a thread that is not allowed to block, such as a Vert.x event loop thread. Therefore, setting `quarkus.cassandra.init.eager-init` to `false` and injecting `QuarkusCqlSession` should be avoided in these contexts."
msgstr "遅延初期化を使用することで、アプリケーションの起動時間を短縮し、Cassandraデータベースが利用できない場合の起動失敗を回避することができます。実際、遅延初期化はVert.xのイベントループスレッドなど、ブロックすることが許されていないスレッドで偶発的に発生する可能性があります。したがって、 `quarkus.cassandra.init.eager-init` を `false` に設定して `QuarkusCqlSession` を注入することは、このような文脈では避けるべきです。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:756
#, fuzzy
msgid "If you want to use Vert.x (or any other reactive framework) and keep the lazy initialization behavior, you should instead inject only `CompletionStage<QuarkusCqlSession>` or `Uni<QuarkusCqlSession>`. When injecting these beans, the initialization process will be triggered lazily, but it will happen in the background, in a non-blocking way, leveraging the Vert.x event loop. This way you don't risk blocking the Vert.x thread."
msgstr "Vert.x（または他のリアクティブフレームワーク）を使用し、遅延初期化動作を維持したい場合は、代わりに `CompletionStage<QuarkusCqlSession>` または `Uni<QuarkusCqlSession>` のみを注入してください。これらのBeanを注入すると、初期化プロセスが遅延的にトリガされますが、Vert.xのイベントループを利用してノンブロッキングでバックグラウンドで行われます。これにより、Vert.xスレッドをブロックする危険性がありません。"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:761
#, fuzzy
msgid "Alternatively, you can set `quarkus.cassandra.init.eager-init` to true: in this case the session bean will be initialized eagerly during application startup, on the Quarkus main thread. This would eliminate any risk of blocking a Vert.x thread, at the cost of making your startup time (much)  longer."
msgstr "代わりに、 `quarkus.cassandra.init.eager-init` をtrueに設定することもできます。この場合、セッションBeanはアプリケーション起動時にQuarkusメインスレッドで熱心に初期化されます。これにより、Vert.xスレッドをブロックするリスクがなくなりますが、起動時間が（はるかに）長くなります。"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:762
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:766
msgid "Accessing a Cassandra database from a client application is easy with Quarkus and the Cassandra extension, which provides configuration and native support for the DataStax Java driver for Apache Cassandra."
msgstr "クライアント・アプリケーションからのCassandraデータベースへのアクセスは、QuarkusとCassandraエクステンションで簡単に行えます。"

#, fuzzy
#~ msgid "To effectively integrate the reactive logic with the REST API, your application needs to declare a dependency to the Quarkus RestEasy Mutiny extension:"
#~ msgstr "リアクティブロジックをREST APIと効果的に統合するために、アプリケーションはQuarkus RestEasy Mutinyエクステンションへの依存関係を宣言する必要があります。"

#~ msgid "To complete this quickstart guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "an IDE;"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately;"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "link:https://www.graalvm.org/[GraalVM] installed with the `GRAALVM_HOME` environment variable configured appropriately, if you want to link:https://quarkus.io/guides/building-native-image[use the native mode];"
#~ msgstr "ネイティブモードを使用したい場合は、 `GRAALVM_HOME` が適切に設定された GraalVM がインストールされていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"
