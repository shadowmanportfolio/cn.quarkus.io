# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-19 17:17+0000\n"
"PO-Revision-Date: 2022-02-03 16:56+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/smallrye-graphql-client.adoc:6
#, no-wrap
msgid "SmallRye GraphQL Client"
msgstr "SmallRye GraphQLクライアント"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:15
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can use the GraphQL client library.  The client is implemented by the https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] project.  This guide is specifically geared towards the client side, so if you need an introduction to GraphQL in general, first refer to the xref:smallrye-graphql.adoc[SmallRye GraphQL guide], which provides an introduction to the GraphQL query language, general concepts and server-side development."
msgstr ""
"このガイドでは、QuarkusアプリケーションでGraphQLクライアントライブラリを使用"
"する方法を説明します。このクライアントは、 link:https://github.com/smallrye/"
"smallrye-graphql/[SmallRye GraphQL]プロジェクトによって実装されています。この"
"ガイドは特にクライアント側を対象としていますので、GraphQL全般の紹介が必要な場"
"合は、まず link:smallrye-graphql.html[SmallRye GraphQLガイド]を参照してくださ"
"い。このガイドでは、GraphQLのクエリ言語、一般的なコンセプト、サーバーサイドの"
"開発について紹介しています。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:20
msgid "The guide will walk you through developing and running a simple application that uses both supported types of GraphQL clients to retrieve data from a remote resource, that being a database related to Star Wars.  It's available at https://graphql.org/swapi-graphql[this webpage] if you want to experiment with it manually.  The web UI allows you to write and execute GraphQL queries against it."
msgstr "このガイドでは、サポートされている両方のタイプのGraphQLクライアントを使用して、リモートリソース（スターウォーズ関連のデータベース）からデータを取得するシンプルなアプリケーションの開発と実行について説明しています。このガイドは link:https://graphql.org/swapi-graphql[このウェブページ]で公開されているので、手動で試してみたい方はぜひご覧ください。Web UIでは、このアプリケーションに対してGraphQLクエリを書いて実行することができます。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:21
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:25
#, no-wrap
msgid "GraphQL client types introduction"
msgstr "GraphQLクライアントタイプの紹介"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:28
msgid "Two types of GraphQL clients are supported."
msgstr "2種類のGraphQLクライアントに対応しています。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:34
msgid "The *typesafe* client works very much like the MicroProfile REST Client adjusted for calling GraphQL endpoints.  A client instance is basically a proxy that you can call like a regular Java object, but under the hood, the call will be translated to a GraphQL operation. It works with domain classes directly.  Any input and output objects for the operation will be translated to/from their representations in the GraphQL query language."
msgstr "*typesafe* クライアントは、GraphQLエンドポイントを呼び出すために調整されたMicroProfile REST Clientと非常によく似た動作をします。クライアントのインスタンスは基本的にプロキシであり、通常のJavaオブジェクトのように呼び出すことができますが、中では呼び出しがGraphQL操作に変換されます。クライアントはドメインクラスと直接連携します。操作のための入出力オブジェクトは、GraphQLのクエリ言語での表現に変換されます。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:40
msgid "The *dynamic* client, on the other hand, works rather like an equivalent of the JAX-RS client from the `javax.ws.rs.client` package. It does not require the domain classes to work, it works with abstract representations of GraphQL documents instead. Documents are built using a domain-specific language (DSL).  The exchanged objects are treated as an abstract `JsonObject`, but, when necessary, it is possible to convert them to concrete model objects (if suitable model classes are available)."
msgstr "一方、 *ダイナミック* ・クライアントは、 `javax.ws.rs.client` パッケージの JAX-RS クライアントに相当するものとして動作する。このクライアントは、ドメインクラスを必要とせず、代わりにGraphQLドキュメントの抽象的な表現を使って動作する。ドキュメントは、ドメイン固有の言語（DSL）を使って構築される。交換されたオブジェクトは、抽象的な `JsonObject` として扱われるが、必要に応じて、（適切なモデルクラスが利用可能であれば）具体的なモデルオブジェクトに変換することができる。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:44
msgid "The typesafe client can be viewed as a rather high-level and more declarative approach designed for ease of use, whereas the dynamic client is lower-level, more imperative, somewhat more verbose to use, but allows finer grained control over operations and responses."
msgstr "タイプセーフ・クライアントは、使いやすさを重視したハイレベルで宣言的なアプローチと見ることができます。一方、ダイナミック・クライアントは、低レベルで命令的なアプローチであり、使い勝手はやや冗長ですが、操作や応答をより細かく制御することができます。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:45
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:49
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:51
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:53
msgid "The solution is located in the `microprofile-graphql-client-quickstart` {quickstarts-tree-url}/microprofile-graphql-client-quickstart[directory]."
msgstr "このソリューションは `microprofile-graphql-client-quickstart` {quickstarts-tree-url}/microprofile-graphql-client-quickstart[ディレクトリ]にあります。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:54
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:57
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:68
#, fuzzy
msgid "The typesafe GraphQL client depends on REST client, thus we included the `rest-client-reactive` extension in the `extensions` list. You may also switch to the traditional non-reactive `rest-client` if the rest of your application depends on the non-reactive RESTEasy stack (you can't mix reactive and non-reactive RESTEasy).  If you're only going to use the dynamic GraphQL client and don't use RESTEasy in your application, you may leave out the REST client dependency completely.  This command generates a project, importing the `smallrye-graphql-client` extension."
msgstr ""
"typesafe GraphQLクライアントはRESTクライアントに依存しているため、 `rest-"
"client-reactive` エクステンションを `extensions` リストに含めました。また、ア"
"プリケーションの他の部分が非リアクティブ型のRESTEasyスタックに依存している場"
"合は、従来の非リアクティブ型の `rest-client` に切り替えても構いません（リアク"
"ティブ型と非リアクティブ型のRESTEasyを混在させることはできません）。動的なGra"
"phQLクライアントのみを使用し、アプリケーションにRESTEasyを使用しない場合は、R"
"ESTクライアントの依存関係を完全に省くことができます。このコマンドは、 "
"`smallrye-graphql-client` のエクステンションをインポートして Maven "
"プロジェクトを生成します。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:71
msgid "If you already have your Quarkus project configured, you can add the `smallrye-graphql-client` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリで以下のコマンドを実行することで、 `smallrye-graphql-client` エクステンションをプロジェクトに追加することができます。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:76
msgid "Again, you may leave out `rest-client-reactive` if you're only going to use the dynamic client."
msgstr "繰り返しになりますが、ダイナミッククライアントのみを使用する場合は、 `rest-client-reactive` を省いても構いません。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:78
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_guides/smallrye-graphql-client.adoc:80
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:90
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-graphql-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/smallrye-graphql-client.adoc:93
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:97
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-smallrye-graphql-client\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-reactive\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:99
#, no-wrap
msgid "The application"
msgstr "アプリケーション"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:105
msgid "The application we will build makes use of both types of GraphQL clients. In both cases, they will connect to the Star Wars service at https://graphql.org/swapi-graphql[SWAPI] and query it for a list of Star Wars films, and, for each film, the names of the planets which appear in that film."
msgstr "今回作成するアプリケーションでは、どちらのタイプのGraphQLクライアントも使用します。どちらの場合も、 link:https://graphql.org/swapi-graphql[SWAPI]のスター・ウォーズサービスに接続し、スター・ウォーズの映画のリストと、各映画に登場する惑星の名前を問い合わせます。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:107
msgid "The corresponding GraphQL query looks like this:"
msgstr "これに対応するGraphQLクエリは次のようになります。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:122
#, no-wrap
msgid ""
"{\n"
"  allFilms {\n"
"    films {\n"
"      title\n"
"      planetConnection {\n"
"        planets {\n"
"          name\n"
"        }\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:125
msgid "You may go to https://graphql.org/swapi-graphql[the webpage] to execute this query manually."
msgstr "このクエリを手動で実行するには、 link:https://graphql.org/swapi-graphql[Webページ]にアクセスしてください。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:126
#, no-wrap
msgid "Using the Typesafe client"
msgstr "Typesafeクライアントの使用"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:133
msgid "To use the typesafe client, we need the corresponding model classes that are compatible with the schema. There are two ways to obtain them. First is to use the client generator offered by SmallRye GraphQL, which generates classes from the schema document and a list of queries. This generator is considered highly experimental for now, and is not covered in this example. If interested, refer to the https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[Client Generator] and its documentation."
msgstr "タイプセーフ・クライアントを使うには，スキーマと互換性のある対応するモデルクラスが必要です．それらを入手するには2つの方法があります。1つ目は、SmallRye GraphQLが提供するクライアントジェネレータを使用する方法で、これはスキーマドキュメントとクエリのリストからクラスを生成します。このジェネレーターは今のところ非常に実験的なものとされており、この例では取り上げていません。興味のある方は、 link:https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[Client Generator]とそのドキュメントを参照してください。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:138
msgid "In this example, we will create a slimmed down version of the model classes manually, with only the fields that we need, and ignore all the stuff that we don't need. We will need the classes for `Film` and `Planet`.  But, the service is also using specific wrappers named `FilmConnection` and `PlanetConnection`, which, for our purpose, will serve just to contain the actual list of `Film` and `Planet` instances, respectively."
msgstr "この例では、必要なフィールドだけを持ち、必要のないものはすべて無視して、モデルクラスのスリムなバージョンを手動で作成します。必要なのは、 `Film` と `Planet` のクラスです。しかし、このサービスでは、 `FilmConnection` と `PlanetConnection` という名前の特定のラッパーも使用しており、今回の目的では、それぞれ `Film` と `Planet` のインスタンスの実際のリストを格納するだけです。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:140
msgid "Let's create all the model classes and put them into the `org.acme.microprofile.graphql.client.model` package:"
msgstr "すべてのモデルクラスを作成して、 `org.acme.microprofile.graphql.client.model` パッケージに入れましょう。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:144
#, no-wrap
msgid "public class FilmConnection {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:146
#, no-wrap
msgid "    private List<Film> films;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:150
#, no-wrap
msgid ""
"    public List<Film> getFilms() {\n"
"        return films;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:155
#, no-wrap
msgid ""
"    public void setFilms(List<Film> films) {\n"
"        this.films = films;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:157
#, no-wrap
msgid "public class Film {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:159
#, no-wrap
msgid "    private String title;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:161
#, no-wrap
msgid "    private PlanetConnection planetConnection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:165
#, no-wrap
msgid ""
"    public String getTitle() {\n"
"        return title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:169
#, no-wrap
msgid ""
"    public void setTitle(String title) {\n"
"        this.title = title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:173
#, no-wrap
msgid ""
"    public PlanetConnection getPlanetConnection() {\n"
"        return planetConnection;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:178
#, no-wrap
msgid ""
"    public void setPlanetConnection(PlanetConnection planetConnection) {\n"
"        this.planetConnection = planetConnection;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:180
#, no-wrap
msgid "public class PlanetConnection {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:182
#, no-wrap
msgid "    private List<Planet> planets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:186
#, no-wrap
msgid ""
"    public List<Planet> getPlanets() {\n"
"        return planets;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:190
#, no-wrap
msgid ""
"    public void setPlanets(List<Planet> planets) {\n"
"        this.planets = planets;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:192
#: upstream/_guides/smallrye-graphql-client.adoc:217
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:194
#, no-wrap
msgid "public class Planet {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:196
#, no-wrap
msgid "    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:200
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:205
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:209
msgid "Now that we have the model classes, we can create the interface that represents the actual set of operations we want to call on the remote GraphQL service."
msgstr "モデルクラスができたので、次は、リモートのGraphQLサービスを呼び出すための実際の操作セットを表すインターフェースを作成します。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:213
#, no-wrap
msgid ""
"@GraphQLClientApi(configKey = \"star-wars-typesafe\")\n"
"public interface StarWarsClientApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:215
#, no-wrap
msgid "    FilmConnection allFilms();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:223
msgid "For simplicity, we're only calling the query named `allFilms`. We named our corresponding method `allFilms` too. If we named the method differently, we would need to annotate it with `@Query(value=\"allFilms\")` to specify the name of the query that should be executed when this method is called."
msgstr "わかりやすくするために、 `allFilms` という名前のクエリだけを呼び出しています。対応するメソッドの名前も `allFilms` としました。もしメソッドの名前が違っていたら、このメソッドが呼ばれたときに実行されるべきクエリの名前を指定するために、 `@Query(value=\"allFilms\")` をアノテーションする必要があります。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:227
#, fuzzy
msgid "The client also needs some configuration, namely at least the URL of the remote service. We can either specify that within the `@GraphQLClientApi` annotation (by setting the `endpoint` parameter), or move this over to the configuration file, `application.properties`:"
msgstr ""
"クライアントにも設定が必要で、少なくともリモートサービスのURLが必要です。これ"
"は、 `@GraphQLClientApi` アノテーション内で指定する（ `endpoint` "
"パラメータを設定する）か、設定ファイル（ `application.properties` "
"）に移すことができます。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:230
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-typesafe.url=https://swapi-graphql.netlify.app/.netlify/functions/index\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:235
#, fuzzy
msgid "`star-wars-typesafe` is the name of the configured client instance, and corresponds to the `configKey` in the `@GraphQLClientApi` annotation. If you don't want to specify a custom name, you can leave out the `configKey`, and then refer to it by using the fully qualified name of the interface."
msgstr ""
"`star-wars-typesafe` は構成されたクライアントインスタンスの名前で、 "
"`@GraphQLClientApi` アノテーションの `configKey` "
"に対応しています。カスタム名を指定したくない場合は、 `configKey` "
"を省略して、インターフェイスの完全修飾名を使って参照することができます。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:239
#, fuzzy
msgid "Now that we have the client instance properly configured, we need a way to have it perform something when we start the application. For that, we will use a REST endpoint that, when called by a user, obtains the client instance and lets it execute the query."
msgstr ""
"クライアント・インスタンスが適切に設定されたので、アプリケーションの起動時に"
"クライアント・インスタンスに何かを実行させる方法が必要になります。そのために"
"、RESTエンドポイントを使用します。ユーザーが呼び出すと、クライアント・インス"
"タンスを取得して、クエリを実行させます。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:246
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"public class StarWarsResource {\n"
"    @Inject\n"
"    StarWarsClientApi typesafeClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:255
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/typesafe\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Blocking\n"
"    public List<Film> getAllFilmsUsingTypesafeClient() {\n"
"        return typesafeClient.allFilms().getFilms();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:260
#, fuzzy
msgid "With this REST endpoint included in your application, you can simply send a GET request to `/typesafe`, and the application will use an injected typesafe client instance to call the remote service, obtain the films and planets, and return the JSON representation of the resulting list."
msgstr ""
"この REST エンドポイントをアプリケーションに組み込むと、 `/typesafe` に GET "
"リクエストを送信するだけで、アプリケーションは注入された typesafe クライアン"
"トのインスタンスを使用してリモートサービスを呼び出し、映画と惑星を取得し、"
"結果のリストの JSON 表現を返します。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:261
#, no-wrap
msgid "Using the Dynamic client"
msgstr "ダイナミッククライアントの使用"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:265
msgid "For the dynamic client, the model classes are optional, because we can work with abstract representations of the GraphQL types and documents. The client API interface is not needed at all."
msgstr "ダイナミッククライアントでは、GraphQLのタイプやドキュメントの抽象的な表現を扱うことができるため、モデルクラスはオプションとなります。また、クライアントのAPIインターフェースは全く必要ありません。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:267
msgid "We still need to configure the URL for the client, so let's put this into `application.properties`:"
msgstr "クライアント用のURLを設定する必要がありますので、これを `application.properties` に入れてみましょう。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:269
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.url=https://swapi-graphql.netlify.app/.netlify/functions/index\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:273
msgid "We decided to name the client `star-wars-dynamic`. We will use this name when injecting a dynamic client to properly qualify the injection point."
msgstr "このクライアントの名前を `star-wars-dynamic` としました。動的なクライアントを注入する際には、注入ポイントを適切に特定するためにこの名前を使用します。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:276
msgid "If you need to add an authorization header, or any other custom HTTP header (in our case it's not required), this can be done by:"
msgstr "認証ヘッダやその他のカスタムHTTPヘッダ（ここでは必須ではありません）を追加する必要がある場合は、以下の方法で行います。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:278
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.header.HEADER-KEY=HEADER-VALUE\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:281
msgid "Add this to the `StarWarsResource` created earlier:"
msgstr "これを先ほど作成した `StarWarsResource` に追加します。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:287
#, no-wrap
msgid ""
"import static io.smallrye.graphql.client.core.Document.document;\n"
"import static io.smallrye.graphql.client.core.Field.field;\n"
"import static io.smallrye.graphql.client.core.Operation.operation;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:289
#, no-wrap
msgid "// ....\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:293
#, no-wrap
msgid ""
"@Inject\n"
"@GraphQLClient(\"star-wars-dynamic\")    // <1>\n"
"DynamicGraphQLClient dynamicClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:316
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/dynamic\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Blocking\n"
"public List<Film> getAllFilmsUsingDynamicClient() throws Exception {\n"
"    Document query = document(   // <2>\n"
"        operation(\n"
"            field(\"allFilms\",\n"
"                field(\"films\",\n"
"                    field(\"title\"),\n"
"                    field(\"planetConnection\",\n"
"                        field(\"planets\",\n"
"                            field(\"name\")\n"
"                        )\n"
"                    )\n"
"                )\n"
"            )\n"
"        )\n"
"    );\n"
"    Response response = dynamicClient.executeSync(query);   <3>\n"
"    return response.getObject(FilmConnection.class, \"allFilms\").getFilms();  <4>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:319
msgid "Qualifies the injection point so that we know which named client needs to be injected here."
msgstr "インジェクションポイントを修飾することで、どの名前のクライアントをここに注入する必要があるかを知ることができます。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:323
#, fuzzy
msgid "Here we build a document representing the GraphQL query, using the provided DSL language.  We use static imports to make the code easier to read. The DSL is designed in a way that it looks quite similar to writing a GraphQL query as a string."
msgstr ""
"ここでは、提供されているDSL言語を使って、GraphQLクエリを表すドキュメントを構"
"築します。コードを読みやすくするために、静的なインポートを使用しています。こ"
"のDSLは、GraphQLクエリを文字列で記述するのとよく似た方法で設計されています。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:326
msgid "Execute the query and block while waiting for the response. There is also an asynchronous variant that returns a `Uni<Response>`."
msgstr "クエリを実行し、応答を待つ間にブロックします。また、 `Uni<Response>` を返す非同期型もあります．"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:331
#, fuzzy
msgid "Here we did the optional step of converting the response to instances of our model classes, because we have the classes available. If you don't have the classes available or don't want to use them, simply calling `response.getData()` would get you a `JsonObject` representing all the returned data."
msgstr ""
"ここでは、利用可能なクラスがあるため、オプションのステップとして、レスポンス"
"をモデルクラスのインスタンスに変換しています。利用可能なクラスがない場合や、"
"利用したくない場合は、単に `response.getData()` を呼べば、"
"返されたすべてのデータを表す `JsonObject` を得ることができます。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:332
#, no-wrap
msgid "Running the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:335
#, fuzzy
msgid "Launch the application in dev mode using:"
msgstr "次のコマンドでアプリケーションを起動します。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:339
msgid "To execute the queries, you need to send GET requests to our REST endpoint:"
msgstr "クエリを実行するには、RESTエンドポイントにGETリクエストを送信する必要があります。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:343
#, no-wrap
msgid ""
"curl -s http://localhost:8080/dynamic # to use the dynamic client\n"
"curl -s http://localhost:8080/typesafe # to use the typesafe client\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:348
msgid "Whether you use dynamic or typesafe, the result should be the same.  If the JSON document is hard to read, you might want to run it through a tool that formats it for better readability by humans, for example by piping the output through `jq`."
msgstr "dynamic と typesafe のどちらを使用しても、結果は同じです。JSONドキュメントが読みにくい場合は、人間が読みやすいようにフォーマットしてくれるツールに通したほうがいいかもしれません。たとえば、出力を `jq` に通してみてはいかがでしょうか。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:349
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:352
msgid "This example showed how to use both the dynamic and typesafe GraphQL clients to call an external GraphQL service and explained the difference between the client types."
msgstr "この例では、ダイナミックなGraphQLクライアントとタイプセーフなGraphQLクライアントの両方を使って外部のGraphQLサービスを呼び出す方法を示し、クライアントの種類の違いを説明しました。"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 15 minutes"
#~ msgstr "15分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "./mvnw quarkus:dev\n"
#~ msgstr "./mvnw quarkus:dev\n"
