# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-11 10:12+0000\n"
"PO-Revision-Date: 2021-04-30 16:48+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-customization.adoc:6
#, fuzzy, no-wrap
msgid "Security Tips and Tricks"
msgstr "セキュリティに関するヒントとコツ"

#. type: Title ==
#: upstream/_guides/security-customization.adoc:10
#, no-wrap
msgid "Quarkus Security Dependency"
msgstr "Quarkus Security依存関係"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:13
msgid "`io.quarkus:quarkus-security` module contains the core Quarkus security classes."
msgstr "`io.quarkus:quarkus-security` モジュールには、Quarkusの中核となるセキュリティクラスが含まれています。"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:16
#, fuzzy
msgid "In most cases, it does not have to be added directly to your project's build file as it is already provided by all of the security extensions.  However, if you need to write your own custom security code (for example, register a <<jaxrs-security-context, Custom JAX-RS SecurityContext>>) or use <<bouncy-castle, BouncyCastle>> libraries, then please make sure it is included:"
msgstr "ほとんどの場合、すべてのセキュリティエクステンションによってすでに追加されているので、プロジェクトの `pom.xml` に直接追加する必要はありません。しかし、独自のカスタムセキュリティコードを書く必要がある場合（例えば、 link:#jaxrs-security-context[カスタムJAX-RS SecurityContext]の登録など）や、 link:#bouncy-castle[BouncyCastle]ライブラリを使用する場合は、必ず追加してください。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:18
#: upstream/_guides/security-customization.adoc:340
#: upstream/_guides/security-customization.adoc:375
#: upstream/_guides/security-customization.adoc:403
#: upstream/_guides/security-customization.adoc:454
#: upstream/_guides/security-customization.adoc:526
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:24
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-customization.adoc:27
#: upstream/_guides/security-customization.adoc:349
#: upstream/_guides/security-customization.adoc:384
#: upstream/_guides/security-customization.adoc:412
#: upstream/_guides/security-customization.adoc:468
#: upstream/_guides/security-customization.adoc:535
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:30
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-customization.adoc:32
#, no-wrap
msgid "HttpAuthenticationMechanism Customization"
msgstr "HttpAuthenticationMechanism のカスタマイズ"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:36
msgid "One can customize `HttpAuthenticationMechanism` by registering a CDI implementation bean.  In the example below the custom authenticator delegates to `JWTAuthMechanism` provided by `quarkus-smallrye-jwt`:"
msgstr "CDI実装Beanを登録することで、 `HttpAuthenticationMechanism` をカスタマイズすることができます。以下の例では、カスタム認証機能は `quarkus-smallrye-jwt` によって提供される `JWTAuthMechanism` にデリゲートします。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:43
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(1)\n"
"@ApplicationScoped\n"
"public class CustomAwareJWTAuthMechanism implements HttpAuthenticationMechanism {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:45
#: upstream/_guides/security-customization.adoc:91
#, no-wrap
msgid "\tprivate static final Logger LOG = LoggerFactory.getLogger(CustomAwareJWTAuthMechanism.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:48
#, no-wrap
msgid ""
"\t@Inject\n"
"\tJWTAuthMechanism delegate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:54
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<SecurityIdentity> authenticate(RoutingContext context, IdentityProviderManager identityProviderManager) {\n"
"\t    // do some custom action and delegate\t\n"
"            return delegate.authenticate(context, identityProviderManager);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:59
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<ChallengeData> getChallenge(RoutingContext context) {\n"
"\t\treturn delegate.getChallenge(context);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:64
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Set<Class<? extends AuthenticationRequest>> getCredentialTypes() {\n"
"\t\treturn delegate.getCredentialTypes();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:69
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<HttpCredentialTransport> getCredentialTransport() {\n"
"\t\treturn delegate.getCredentialTransport();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:71
#: upstream/_guides/security-customization.adoc:127
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Title ==
#: upstream/_guides/security-customization.adoc:73
#, fuzzy, no-wrap
msgid "Dealing with more than one HttpAuthenticationMechanism"
msgstr "複数のHttpAuthenticationMechanismを処理する"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:76
#, fuzzy
msgid "More than one `HttpAuthenticationMechanism` can be combined, for example, the built-in `Basic` or `JWT` mechanism provided by `quarkus-smallrye-jwt` has to be used to verify the service clients credentials passed as the HTTP `Authorization` `Basic` or `Bearer` scheme values while the `Authorization Code` mechanism provided by `quarkus-oidc` has to be used to authenticate the users with `Keycloak` or other `OpenId Connect` providers."
msgstr "例えば、HTTP `Authorization` `Basic` または `Bearer` スキーム値として渡されたサービスクライアントの資格情報を検証するために、 `quarkus-smallrye-jwt` によって提供される組み込みの `Basic` または `JWT` 機構を使用しなければならない一方で、 `quarkus-oidc` によって提供される `Authorization Code` 機構は `Keycloak` または他の `OpenId Connect` プロバイダとユーザを認証するために使用しなければならない、 複数の `HttpAuthenticationMechanism` が組み合わせられることができる。"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:78
#, fuzzy
msgid "In such cases the mechanisms are asked to verify the credentials in turn until a `SecurityIdentity` is created. The mechanisms are sorted in the descending order using their priority. `Basic` authentication mechanism has the highest priority of `2000`, followed by the `Authorization Code` one with the priority of `1001`, with all other mechanisms provided by Quarkus having the priority of `1000`."
msgstr "このような場合、 `SecurityIdentity` が作成されるまで、メカニズムが順番にクレデンシャルを確認するように要求されます。認証メカニズムは、優先順位の降順でソートされています。 `Basic` 認証メカニズムの優先順位は最高で `2000` 、次いで `Authorization Code` の優先順位は `1001` 、Quarkus が提供する他のすべてのメカニズムの優先順位は `1000` となっています。"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:80
#, fuzzy
msgid "If no credentials are provided then the mechanism specific challenge is created, for example, `401` status is returned by either `Basic` or `JWT` mechanisms, URL redirecting the user to the `OpenId Connect` provider is returned by `quarkus-oidc`, etc."
msgstr "認証情報が提供されない場合、メカニズム固有のチャレンジが作成される。例えば、 `401` ステータスは `Basic` または `JWT` のいずれかのメカニズムによって返され、ユーザーを `OpenId Connect` プロバイダにリダイレクトする URL は `quarkus-oidc` によって返されるなどである。"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:82
#, fuzzy
msgid "So if `Basic` and `Authorization Code` mechanisms are combined then `401` will be returned if no credentials are provided and if `JWT` and `Authorization Code` mechanisms are combined then a redirect URL will be returned."
msgstr "したがって、 `Basic` と `Authorization Code` の仕組みが組み合わされた場合、認証情報が提供されなければ `401` が返され、 `JWT` と `Authorization Code` の仕組みが組み合わされた場合、リダイレクト URL が返されることになります。"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:84
#, fuzzy
msgid "In some cases such a default logic of selecting the challenge is exactly what is required by a given application but sometimes it may not meet the requirements. In such cases (or indeed in other similar cases where you'd like to change the order in which the mechanisms are asked to handle the current authentication or challenge request), you can create a custom mechanism and choose which mechanism should create a challenge, for example:"
msgstr "このようなデフォルトのチャレンジ選択ロジックが、あるアプリケーションでまさに必要とされる場合もありますが、時には要件を満たさない場合もあります。そのような場合（あるいは、メカニズムが現在の認証またはチャレンジ要求を処理するように求められる順序を変更したい他の同様の場合）、カスタムメカニズムを作成し、例えばどのメカニズムがチャレンジを作成すべきかを選択することができます。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:89
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomAwareJWTAuthMechanism implements HttpAuthenticationMechanism {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:94
#, no-wrap
msgid ""
"\t@Inject\n"
"\tJWTAuthMechanism jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:97
#, no-wrap
msgid ""
"        @Inject\n"
"\tOidcAuthenticationMechanism oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:102
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<SecurityIdentity> authenticate(RoutingContext context, IdentityProviderManager identityProviderManager) {\n"
"\t    return selectBetweenJwtAndOidc(context).authenticate(context, identityProviderManager);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:107
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<ChallengeData> getChallenge(RoutingContext context) {\n"
"\t\treturn selectBetweenJwtAndOidcChallenge(context).getChallenge(context);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:112
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Set<Class<? extends AuthenticationRequest>> getCredentialTypes() {\n"
"\t\treturn selectBetweenJwtAndOidc(context).getCredentialTypes();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:117
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic HttpCredentialTransport getCredentialTransport(RoutingContext context) {\n"
"\t\treturn selectBetweenJwtAndOidc(context).getCredentialTransport();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:121
#, no-wrap
msgid ""
"        private HttpAuthenticationMechanism selectBetweenJwtAndOidc(RoutingContext context) {\n"
"            ....\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:125
#, no-wrap
msgid ""
"        private HttpAuthenticationMechanism selectBetweenJwtAndOidcChallenge(RoutingContext context) {\n"
"            // for example, if no `Authorization` header is available and no `code` parameter is provided - use `jwt` to create a challenge\n"
"        }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-customization.adoc:130
#, no-wrap
msgid "Security Identity Customization"
msgstr "セキュリティー・アイデンティティのカスタマイズ"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:133
msgid "Internally, the identity providers create and update an instance of the `io.quarkus.security.identity.SecurityIdentity` class which holds the principal, roles, credentials which were used to authenticate the client (user) and other security attributes. An easy option to customize `SecurityIdentity` is to register a custom `SecurityIdentityAugmentor`. For example, the augmentor below adds an addition role:"
msgstr "内部的には、アイデンティティ・プロバイダは、プリンシパル、役割、クライアント(ユーザー)の認証に使用されたクレデンシャル、 およびその他のセキュリティー属性を保持する `io.quarkus.security.identity.SecurityIdentity` クラスのインスタンスを作成して更新します。 `SecurityIdentity` をカスタマイズする簡単なオプションは、カスタム `SecurityIdentityAugmentor` を登録することです。例えば、以下のエクステンションは、追加のロールを追加します。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:141
#, no-wrap
msgid ""
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:144
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:147
#: upstream/_guides/security-customization.adoc:189
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RolesAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:151
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        return Uni.createFrom().item(build(identity));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:155
#, no-wrap
msgid ""
"        // Do 'return context.runBlocking(build(identity));'\n"
"        // if a blocking call is required to customize the identity\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:162
#, no-wrap
msgid ""
"    private Supplier<SecurityIdentity> build(SecurityIdentity identity) {\n"
"        if(identity.isAnonymous()) {\n"
"            return () -> identity;\n"
"        } else {\n"
"            // create a new builder and copy principal, attributes, credentials and roles from the original identity\n"
"            QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:169
#, no-wrap
msgid ""
"            // add custom role source here\n"
"            builder.addRole(\"dummy\");\n"
"            return builder::build;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:172
#, fuzzy
msgid "Here is another example showing how to use the client certificate available in the current xref:security-built-in-authentication.adoc#mutual-tls[Mutual TLS] request to add more roles:"
msgstr "ここでは、現在の link:security-built-in-authentication.html#mutual-tls[相互TLS]リクエストで利用可能なクライアント証明書を使用して、さらにロールを追加する方法を示す別の例を示します。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:182
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:186
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:194
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        return Uni.createFrom().item(build(identity));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:198
#, no-wrap
msgid ""
"    private Supplier<SecurityIdentity> build(SecurityIdentity identity) {\n"
"        // create a new builder and copy principal, attributes, credentials and roles from the original identity\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:205
#, no-wrap
msgid ""
"        CertificateCredential certificate = identity.getCredential(CertificateCredential.class);\n"
"        if (certificate != null) {\n"
"            builder.addRoles(extractRoles(certificate.getCertificate()));\n"
"        }\n"
"        return builder::build;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:208
#, no-wrap
msgid ""
"    private Set<String> extractRoles(X509Certificate certificate) {\n"
"        String name = certificate.getSubjectX500Principal().getName();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:219
#, no-wrap
msgid ""
"        switch (name) {\n"
"            case \"CN=client\":\n"
"                return Collections.singleton(\"user\");\n"
"            case \"CN=guest-client\":\n"
"                return Collections.singleton(\"guest\");\n"
"            default:\n"
"                return Collections.emptySet();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:225
msgid "If more than one custom `SecurityIdentityAugmentor` is registered then they will be considered equal candidates and invoked in random order.  You can enforce the order by implementing a default `SecurityIdentityAugmentor#priority` method. Augmentors with higher priorities will be invoked first."
msgstr "複数のカスタム `SecurityIdentityAugmentor` が登録されている場合、それらは同等の候補とみなされ、ランダムな順序で呼び出されます。デフォルトの `SecurityIdentityAugmentor#priority` メソッドを実装することで順番を強制することができます。優先度の高いAugmentors が最初に起動されます。"

#. type: Title ==
#: upstream/_guides/security-customization.adoc:228
#, no-wrap
msgid "Custom JAX-RS SecurityContext"
msgstr "カスタム JAX-RS SecurityContext"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:231
msgid "If you use JAX-RS `ContainerRequestFilter` to set a custom JAX-RS `SecurityContext` then make sure `ContainerRequestFilter` runs in the JAX-RS pre-match phase by adding a `@PreMatching` annotation to it for this custom security context to be linked with Quarkus `SecurityIdentity`, for example:"
msgstr "JAX-RS `ContainerRequestFilter` を使用してカスタム JAX-RS `SecurityContext` を設定する場合は、 `ContainerRequestFilter` が JAX-RS のプレマッチフェーズで実行されていることを確認し、このカスタムセキュリティーコンテキストが Quarkus `SecurityIdentity` とリンクされるように `@PreMatching` アノテーションを追加します。例:"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:235
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:241
#, no-wrap
msgid ""
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.container.PreMatching;\n"
"import javax.ws.rs.core.SecurityContext;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:260
#, no-wrap
msgid ""
"@Provider\n"
"@PreMatching\n"
"public class SecurityOverrideFilter implements ContainerRequestFilter {\n"
"    @Override\n"
"    public void filter(ContainerRequestContext requestContext) throws IOException {\n"
"        String user = requestContext.getHeaders().getFirst(\"User\");\n"
"        String role = requestContext.getHeaders().getFirst(\"Role\");\n"
"        if (user != null && role != null) {\n"
"            requestContext.setSecurityContext(new SecurityContext() {\n"
"                @Override\n"
"                public Principal getUserPrincipal() {\n"
"                    return new Principal() {\n"
"                        @Override\n"
"                        public String getName() {\n"
"                            return user;\n"
"                        }\n"
"                    };\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:265
#, no-wrap
msgid ""
"                @Override\n"
"                public boolean isUserInRole(String r) {\n"
"                    return role.equals(r);\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:270
#, no-wrap
msgid ""
"                @Override\n"
"                public boolean isSecure() {\n"
"                    return false;\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:277
#, no-wrap
msgid ""
"                @Override\n"
"                public String getAuthenticationScheme() {\n"
"                    return \"basic\";\n"
"                }\n"
"            });\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:280
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-customization.adoc:282
#, no-wrap
msgid "Disabling Authorization"
msgstr "認可の無効化"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:285
#, fuzzy
msgid "If you have a good reason to disable the authorization then you can register a custom `AuthorizationController`:"
msgstr "認可を無効にする正当な理由がある場合(テスト時など)は、カスタムの `AuthorizationController` を登録してください。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:294
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(Interceptor.Priority.LIBRARY_AFTER)\n"
"@ApplicationScoped\n"
"public class DisabledAuthController extends AuthorizationController {\n"
"    @ConfigProperty(name = \"disable.authorization\", defaultValue = \"false\")\n"
"    boolean disableAuthorization;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:300
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isAuthorizationEnabled() {\n"
"        return !disableAuthorization;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:303
#, fuzzy
msgid "For manual testing Quarkus provides a convenient config property to disable authorization in dev mode. This property has the exact same effect as the custom `AuthorizationController` shown above, but is only available in dev mode:"
msgstr "手動テストのために、Quarkusは、開発モードで認証を無効にする便利な設定プロパティを提供します。このプロパティは、上記のカスタム `AuthorizationController` とまったく同じ効果を持ちますが、開発モードでのみ利用可能です。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:307
#, no-wrap
msgid "quarkus.security.auth.enabled-in-dev-mode=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:310
#, fuzzy
msgid "Please also see xref:security-testing.adoc#testing-security[TestingSecurity Annotation] section on how to disable the security checks using `TestSecurity` annotation."
msgstr "また、 `TestSecurity` アノテーションを使ってセキュリティチェックを無効にする方法については、 link:security-testing.html#testing-security[TestingSecurity Annotation]の項を参照してください。"

#. type: Title ==
#: upstream/_guides/security-customization.adoc:311
#, no-wrap
msgid "Registering Security Providers"
msgstr "セキュリティー プロバイダの登録"

#. type: Title ===
#: upstream/_guides/security-customization.adoc:313
#, no-wrap
msgid "Default providers"
msgstr "デフォルトのプロバイダ"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:319
msgid "When running in native mode, the default behavior for GraalVM native executable generation is to only include the main \"SUN\" provider unless you have enabled SSL, in which case all security providers are registered. If you are not using SSL, then you can selectively register security providers by name using the `quarkus.security.security-providers` property. The following example illustrates configuration to register the \"SunRsaSign\" and \"SunJCE\" security providers:"
msgstr "ネイティブモードで実行している場合、GraalVMネイティブ実行可能ファイル生成のデフォルトの動作は、SSLを有効にしていない限り、メインの「SUN」プロバイダのみを含めるようになっています。SSLを有効にしている場合は、すべてのセキュリティープロバイダが登録されます。SSLを使用していない場合は、 `quarkus.security.security-providers` プロパティーを使用して、セキュリティープロバイダを名前で選択的に登録することができます。以下の例では、「SunRsaSign」と「SunJCE」のセキュリティープロバイダを登録するための設定を説明します。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:320
#, no-wrap
msgid "Example Security Providers Configuration"
msgstr "セキュリティー プロバイダの設定例"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:324
#, no-wrap
msgid "quarkus.security.security-providers=SunRsaSign,SunJCE\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-customization.adoc:327
#, no-wrap
msgid "BouncyCastle"
msgstr "BouncyCastle"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:330
msgid "If you need to register an `org.bouncycastle.jce.provider.BouncyCastleProvider` JCE provider then please set a `BC` provider name:"
msgstr "`org.bouncycastle.jce.provider.BouncyCastleProvider` JCE プロバイダを登録する必要がある場合は、 `BC` プロバイダ名を設定してください。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:331
#, no-wrap
msgid "Example Security Providers BouncyCastle Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastleの設定"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:335
#, no-wrap
msgid "quarkus.security.security-providers=BC\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:338
msgid "and add the BouncyCastle provider dependency:"
msgstr "そして、BouncyCastleプロバイダ依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:346
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bcprov-jdk15on</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:352
#, no-wrap
msgid "implementation(\"org.bouncycastle:bcprov-jdk15on\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-customization.adoc:355
#, no-wrap
msgid "BouncyCastle JSSE"
msgstr "BouncyCastle JSSE"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:358
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it instead of the default SunJSSE provider then please set a `BCJSSE` provider name:"
msgstr "`org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE プロバイダを登録して、デフォルトの SunJSSE プロバイダの代わりに使用する必要がある場合は、 `BCJSSE` プロバイダ名を設定してください。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:359
#, no-wrap
msgid "Example Security Providers BouncyCastle JSSE Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastle JSSE設定"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:363
#, no-wrap
msgid "quarkus.security.security-providers=BCJSSE\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:365
#: upstream/_guides/security-customization.adoc:440
#, no-wrap
msgid "quarkus.http.ssl.client-auth=REQUIRED\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:370
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks\n"
"quarkus.http.ssl.certificate.key-store-password=password\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks\n"
"quarkus.http.ssl.certificate.trust-store-password=password\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:373
msgid "and add the BouncyCastle TLS dependency:"
msgstr "そして、BouncyCastleのTLS依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:381
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bctls-jdk15on</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:387
#, no-wrap
msgid "implementation(\"org.bouncycastle:bctls-jdk15on\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-customization.adoc:390
#, no-wrap
msgid "BouncyCastle FIPS"
msgstr "BouncyCastle FIPS"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:393
msgid "If you need to register an `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE provider then please set a `BCFIPS` provider name:"
msgstr "`org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE プロバイダを登録する必要がある場合は、 `BCFIPS` プロバイダ名を設定してください。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:394
#, no-wrap
msgid "Example Security Providers BouncyCastle FIPS Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastleのFIPS設定"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:398
#, no-wrap
msgid "quarkus.security.security-providers=BCFIPS\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:401
msgid "and add the BouncyCastle FIPS provider dependency:"
msgstr "そして、BouncyCastle FIPSプロバイダの依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:409
#: upstream/_guides/security-customization.adoc:465
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bc-fips</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:415
#, no-wrap
msgid "implementation(\"org.bouncycastle:bc-fips\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:420
#, fuzzy
msgid "`BCFIPS` provider option is supported in native image but the algorithm self-tests which rely on `java.security.SecureRandom` to verify the generated keys have been removed for these tests to pass. The following classes have been affected:"
msgstr "`BCFIPS` プロバイダオプションはネイティブイメージでサポートされていますが、生成されたキーを確認するために `java.security.SecureRandom` に依存していたアルゴリズムのセルフテストは、これらのテストをパスするために削除されています。以下のクラスが影響を受けます。"

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:421
#, fuzzy
msgid "`org.bouncycastle.crypto.general.DSA`"
msgstr "`org.bouncycastle.crypto.general.DSA`"

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:422
#, fuzzy
msgid "`org.bouncycastle.crypto.general.DSTU4145`"
msgstr "`org.bouncycastle.crypto.general.DSTU4145`"

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:423
#, fuzzy
msgid "`org.bouncycastle.crypto.general.ECGOST3410`"
msgstr "`org.bouncycastle.crypto.general.ECGOST3410`"

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:424
#, fuzzy
msgid "`org.bouncycastle.crypto.general.GOST3410`"
msgstr "`org.bouncycastle.crypto.general.GOST3410`"

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:425
#, fuzzy
msgid "`org.bouncycastle.crypto.fips.FipsDSA`"
msgstr "`org.bouncycastle.crypto.fips.FipsDSA`"

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:426
#, fuzzy
msgid "`org.bouncycastle.crypto.fips.FipsEC`"
msgstr "`org.bouncycastle.crypto.fips.FipsEC`"

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:427
#, fuzzy
msgid "`org.bouncycastle.crypto.fips.FipsRSA`"
msgstr "`org.bouncycastle.crypto.fips.FipsRSA`"

#. type: Title ===
#: upstream/_guides/security-customization.adoc:430
#, no-wrap
msgid "BouncyCastle JSSE FIPS"
msgstr "BouncyCastle JSSE FIPS"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:433
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it in combination with `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` instead of the default SunJSSE provider then please set a `BCFIPSJSSE` provider name:"
msgstr "デフォルトのSunJSSEプロバイダではなく、 `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSEプロバイダを登録して、 `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` と組み合わせて使用する必要がある場合は、 `BCFIPSJSSE` プロバイダ名を設定してください。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:434
#, no-wrap
msgid "Example Security Providers BouncyCastle FIPS JSSE Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastle FIPS JSSE設定"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:438
#, no-wrap
msgid "quarkus.security.security-providers=BCFIPSJSSE\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:449
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks\n"
"quarkus.http.ssl.certificate.key-store-password=password\n"
"quarkus.http.ssl.certificate.key-store-file-type=BCFKS\n"
"quarkus.http.ssl.certificate.key-store-provider=BCFIPS\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks\n"
"quarkus.http.ssl.certificate.trust-store-password=password\n"
"quarkus.http.ssl.certificate.trust-store-file-type=BCFKS\n"
"quarkus.http.ssl.certificate.trust-store-provider=BCFIPS\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:452
msgid "and the BouncyCastle TLS dependency optimized for using the BouncyCastle FIPS provider:"
msgstr "そして、BouncyCastle FIPSプロバイダを使用するために最適化されたBouncyCastle TLS依存関係:"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:460
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>org.bouncycastle</groupId>\n"
"  <artifactId>bctls-fips</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:472
#, no-wrap
msgid ""
"implementation(\"org.bouncycastle:bctls-fips\")\n"
"implementation(\"org.bouncycastle:bc-fips\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:476
msgid "Note that the keystore and truststore type and provider are set to `BCFKS` and `BCFIPS`.  One can generate a keystore with this type and provider like this:"
msgstr "keystore と truststore のタイプとプロバイダが `BCFKS` と `BCFIPS` に設定されていることに注意してください。このタイプとプロバイダでは、以下のようにキーストアを生成することができます。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:480
#, no-wrap
msgid "keytool -genkey -alias server -keyalg RSA -keystore server-keystore.jks -keysize 2048 -keypass password -provider org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider -providerpath $PATH_TO_BC_FIPS_JAR -storetype BCFKS\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:485
#, fuzzy
msgid "`BCFIPSJSSE` provider option is currently not supported in native image."
msgstr "`BCFIPSJSSE` プロバイダーオプションは、現在ネイティブイメージではサポートされていません。"

#. type: Title ===
#: upstream/_guides/security-customization.adoc:488
#, fuzzy, no-wrap
msgid "SunPKCS11"
msgstr "SunPKCS11"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:491
#, fuzzy
msgid "`SunPKCS11` provider provides a bridge to specific `PKCS#11` implementations such as cryptographic smartcards and other Hardware Security Modules, Network Security Services in FIPS mode, etc."
msgstr " `SunPKCS11` プロバイダーは、暗号化スマートカードやその他のハードウェアセキュリティモジュール、FIPSモードのネットワークセキュリティサービスなど、特定の 実装へのブリッジを提供します。 `PKCS#11` "

#. type: Plain text
#: upstream/_guides/security-customization.adoc:493
#, fuzzy
msgid "Typically, in order to work with `SunPKCS11`, one needs to install a `PKCS#11` implementation, generate a configuration which usually refers to a shared library, token slot, etc and write the following Java code:"
msgstr "通常、 `SunPKCS11` を扱うには、 `PKCS#11` の実装をインストールし、共有ライブラリやトークンスロットなどを参照する設定を生成し、以下のJavaコードを記述する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:498
#, no-wrap
msgid ""
"import java.security.Provider;\n"
"import java.security.Security;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:500
#, no-wrap
msgid "String configuration = \"pkcs11.cfg\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:506
#, no-wrap
msgid ""
"Provider sunPkcs11 = Security.getProvider(\"SunPKCS11\");\n"
"Provider pkcsImplementation = sunPkcs11.configure(configuration);\n"
"// or prepare configuration in the code or read it from the file such as \"pkcs11.cfg\" and do\n"
"// sunPkcs11.configure(\"--\" + configuration);\n"
"Security.addProvider(pkcsImplementation);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:509
#, fuzzy
msgid "In Quarkus you can achieve the same at the configuration level only without having to modify the code, for example:"
msgstr "Quarkusでは、例えばコードを修正することなく、設定レベルのみで同じことを実現することができます。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:514
#, no-wrap
msgid ""
"quarkus.security.security-providers=SunPKCS11\n"
"quarkus.security.security-provider-config.SunPKCS11=pkcs11.cfg\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:519
#, fuzzy
msgid "Note that while accessing the `SunPKCS11` bridge provider is supported in native image, configuring `SunPKCS11` is currently not supported in native image at the Quarkus level."
msgstr " `SunPKCS11` ブリッジプロバイダへのアクセスはネイティブイメージでサポートされていますが、 `SunPKCS11` の設定は現在 Quarkus レベルでネイティブイメージでサポートされていないことに注意してください。"

#. type: Title ==
#: upstream/_guides/security-customization.adoc:521
#, no-wrap
msgid "Reactive Security"
msgstr "Reactive Security"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:524
msgid "If you are going to use security in a reactive environment, you will likely need SmallRye Context Propagation:"
msgstr "リアクティブな環境でセキュリティーを使用する場合は、SmallRye Context Propagationが必要になるでしょう。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:532
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-context-propagation</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:538
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-context-propagation\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:544
#, fuzzy
msgid "This will allow you to propagate the identity throughout the reactive callbacks. You also need to make sure you are using an executor that is capable of propagating the identity (e.g. no `CompletableFuture.supplyAsync`), to make sure that Quarkus can propagate it. For more information see the xref:context-propagation.adoc[Context Propagation Guide]."
msgstr "これにより、リアクティブコールバック全体にアイデンティティを伝搬させることができます。また、Quarkusがアイデンティティを伝搬できるようにするために、アイデンティティを伝搬できるエグゼキュータを使用していることを確認する必要があります（例えば、 `CompletableFuture.supplyAsync` は使用していません）。詳細については、 link:context-propagation.html[Context Propagation Guide]を参照してください。"

#. type: Title ==
#: upstream/_guides/security-customization.adoc:545
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:547
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

#~ msgid "===\n"
#~ msgstr "===\n"
