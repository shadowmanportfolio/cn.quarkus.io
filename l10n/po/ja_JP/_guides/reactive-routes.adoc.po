# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-11 10:12+0000\n"
"PO-Revision-Date: 2022-02-04 15:39+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/reactive-routes.adoc:6
#, no-wrap
msgid "Using Reactive Routes"
msgstr "Reactive Routesの使用"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:14
msgid "Reactive routes propose an alternative approach to implement HTTP endpoints where you declare and chain _routes_.  This approach became very popular in the JavaScript world, with frameworks like Express.Js or Hapi.  Quarkus also offers the possibility to use reactive routes.  You can implement REST API with routes only or combine them with JAX-RS resources and servlets."
msgstr "Reactive Routesは、HTTPエンドポイントを実装するために、 _routes_ を宣言して連鎖させる代替アプローチを提案します。このアプローチは、Express.JsやHapiのようなフレームワークで、JavaScriptの世界で非常に人気があります。Quarkusは、Reactive Routesを使用する可能性も提供しています。ルートのみでREST APIを実装することもできますし、JAX-RSリソースやサーブレットと組み合わせて実装することもできます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:16
msgid "The code presented in this guide is available in this {quickstarts-base-url}[GitHub repository] under the {quickstarts-tree-url}/reactive-routes-quickstart[`reactive-routes-quickstart` directory]"
msgstr "このガイドで紹介するコードは、この{quickstarts-base-url}[GitHub リポジトリ]の{quickstarts-tree-url}/reactive-routes-quickstart[ `reactive-routes-quickstart` ディレクトリ]にあります。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:20
msgid "Reactive Routes were initially introduced to provide a reactive execution model for HTTP APIs on top of the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture].  With the introduction of xref:resteasy-reactive.adoc[RESTEasy Reactive], you can now implement reactive HTTP APIs and still use JAX-RS annotations.  Reactive Routes are still supported, especially if you want a more _route-based_ approach, and something closer to the underlying reactive engine."
msgstr "リアクティブ・ルートは当初、 link:quarkus-reactive-architecture.html[Quarkus リアクティブアーキテクチャ]の上にHTTP APIのリアクティブな実行モデルを提供するために導入されました。 link:resteasy-reactive.html[RESTEasy Reactive]の導入により、リアクティブなHTTP APIを実装できるようになり、JAX-RSアノテーションも使用できるようになりました。リアクティブ・ルートは引き続きサポートされています。特に、より _ルートベースの_アプローチや、基礎となるリアクティブ・エンジンに近いものが必要な場合は、そのようにしてください。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:21
#, no-wrap
msgid "Quarkus HTTP"
msgstr "Quarkus HTTP"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:28
#, fuzzy
msgid "Before going further, let's have a look at the HTTP layer of Quarkus.  Quarkus HTTP support is based on a non-blocking and reactive engine (Eclipse Vert.x and Netty).  All the HTTP requests your application receive are handled by _event loops_ (I/O Thread) and then are routed towards the code that manages the request.  Depending on the destination, it can invoke the code managing the request on a worker thread (Servlet, Jax-RS) or use the IO Thread (reactive route).  Note that because of this, a reactive route must be non-blocking or explicitly declare its blocking nature (which would result by being called on a worker thread)."
msgstr "先に進む前に、QuarkusのHTTPレイヤーについて見てみましょう。QuarkusのHTTPサポートは、ノンブロッキングでリアクティブなエンジンに基づいています（Eclipse Vert.xおよびNetty）。アプリケーションが受け取るすべてのHTTPリクエストは、 _イベントループ_（I/O Thread）によって処理され、リクエストを管理するコードに向けてルーティングされます。宛先に応じて、リクエストを管理するコードをワーカースレッド（Servlet、Jax-RS）で呼び出すか、IO Threadを使用します（リアクティブルート）。このため、リアクティブルートはノンブロッキングであるか、ブロッキングであることを明示的に宣言しなければならないことに注意してください（ワーカースレッドで呼び出されることになります）。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:30
msgid "image:http-architecture.png[alt=Quarkus HTTP Architecture]"
msgstr "image:http-architecture.png[alt=Quarkus HTTP Architecture]"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:32
#, fuzzy
msgid "See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr "このトピックの詳細については、 link:quarkus-reactive-architecture.html[Quarkus Reactive Architectureのドキュメント]を参照してください。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:34
#, no-wrap
msgid "Declaring reactive routes"
msgstr "Reactive Routesの宣言"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:38
#, fuzzy
msgid "The first way to use reactive routes is to use the `@Route` annotation.  To have access to this annotation, you need to add the `quarkus-reactive-routes` extension:"
msgstr "リアクティブルートを使用する最初の方法は、 `@Route` アノテーションを使用することです。このアノテーションにアクセスするためには、 `quarkus-reactive-routes` のエクステンションを追加する必要があります。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:40
#, fuzzy
msgid "In your build file, add:"
msgstr "`pom.xml` ファイルに以下を追加します。"

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:42
#: upstream/_guides/reactive-routes.adoc:717
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:48
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-routes</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:51
#: upstream/_guides/reactive-routes.adoc:726
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:54
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-reactive-routes\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:57
msgid "Then in a _bean_, you can use the `@Route` annotation as follows:"
msgstr "そして、 _Bean_ では、以下のように `@Route` アノテーションを使用することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:61
#: upstream/_guides/reactive-routes.adoc:669
#, no-wrap
msgid "package org.acme.reactive.routes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:66
#, no-wrap
msgid ""
"import io.quarkus.vertx.web.Route;\n"
"import io.quarkus.vertx.web.Route.HttpMethod;\n"
"import io.quarkus.vertx.web.RoutingExchange;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:68
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:71
#, no-wrap
msgid ""
"@ApplicationScoped // <1>\n"
"public class MyDeclarativeRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:77
#, no-wrap
msgid ""
"    // neither path nor regex is set - match a path derived from the method name\n"
"    @Route(methods = Route.HttpMethod.GET) // <2>\n"
"    void hello(RoutingContext rc) { // <3>\n"
"        rc.response().end(\"hello\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:82
#, no-wrap
msgid ""
"    @Route(path = \"/world\") \n"
"    String helloWorld() { // <4>\n"
"        return \"Hello world!\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:88
#, no-wrap
msgid ""
"    @Route(path = \"/greetings\", methods = Route.HttpMethod.GET)\n"
"    void greetings(RoutingExchange ex) { // <5>\n"
"        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:90
#, fuzzy
msgid "If there is a reactive route found on a class with no scope annotation then `@javax.inject.Singleton` is added automatically."
msgstr "スコープアノテーションがないクラスにリアクティブルートが見つかった場合、 `@javax.inject.Singleton` が自動的に追加されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:91
#, fuzzy
msgid "The `@Route` annotation indicates that the method is a reactive route. Again, by default, the code contained in the method must not block."
msgstr "`@Route` アノテーションは、そのメソッドがリアクティブルートであることを示しています。繰り返しになりますが、デフォルトでは、メソッドに含まれるコードはブロックしてはいけません。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:92
#, fuzzy
msgid "The method gets a https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] as a parameter. From the `RoutingContext` you can retrieve the HTTP request (using `request()`) and write the response using `response().end(...)`."
msgstr "このメソッドは、パラメータとして  link:https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`]をパラメータとして取得します。 `RoutingContext` から、HTTP リクエストを取得し（ `request()` を使用）、 `response().end(…​)` を使用してレスポンスを記述することができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:93
#, fuzzy
msgid "If the annotated method does not return `void` the arguments are optional."
msgstr "アノテーションされたメソッドが `void` を返さない場合、引数はオプションです。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:94
#, fuzzy
msgid "`RoutingExchange` is a convenient wrapper of `RoutingContext` which provides some useful methods."
msgstr "`RoutingExchange` は、いくつかの便利なメソッドを提供する `RoutingContext` の便利なラッパーです。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:96
#, fuzzy
msgid "More details about using the `RoutingContext` is available in the https://vertx.io/docs/vertx-web/java/[Vert.x Web documentation]."
msgstr "`RoutingContext` の使用に関する詳細は、 link:https://vertx.io/docs/vertx-web/java/[Vert.x Web ドキュメント]に記載されています。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:98
#, fuzzy
msgid "The `@Route` annotation allows you to configure:"
msgstr "`@Route` のアノテーションで設定できます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:100
#, fuzzy
msgid "The `path` - for routing by path, using the https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web format]"
msgstr "`path` - link:https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Webフォーマット]を使用したパスによるルーティングのためのものです。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:101
#, fuzzy
msgid "The `regex` - for routing with regular expressions, see https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[for more details]"
msgstr "`regex` - 正規表現によるルーティングのため、 link:https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[詳細]はこちらをご覧ください。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:102
#, fuzzy
msgid "The `methods` - the HTTP verb triggering the route such as `GET`, `POST`..."
msgstr "`methods` - `GET`, `POST`...のようなルートをトリガーするHTTP動詞です。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:103
#, fuzzy
msgid "The `type` - it can be _normal_ (non-blocking), _blocking_ (method dispatched on a worker thread), or _failure_ to indicate that this route is called on failures"
msgstr "`type` - _通常_（ノンブロッキング）、 _ブロッキング_（ワーカースレッドでディスパッチされたメソッド）、または _失敗_時にこのルートが呼び出されることを示す _失敗_のいずれかです。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:105
#, fuzzy
msgid "The `order` - the order of the route when several routes are involved in handling the incoming request.  Must be positive for regular user routes."
msgstr "`order` - 受信したリクエストの処理に複数のルートが関わっている場合のルートの順番。通常のユーザールートでは正でなければならない。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:106
#, fuzzy
msgid "The produced and consumed mime types using `produces`, and `consumes`"
msgstr "`produces` を使用して生成および消費される MIME タイプ。 `consumes`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:108
#, fuzzy
msgid "For instance, you can declare a blocking route as follows:"
msgstr "例えば、次のようにブロッキングルートを宣言することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:115
#, no-wrap
msgid ""
"@Route(methods = HttpMethod.POST, path = \"/post\", type = Route.HandlerType.BLOCKING)\n"
"public void blocking(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-routes.adoc:120
#, fuzzy
msgid "Alternatively, you can use `@io.smallrye.common.annotation.Blocking` and omit the `type = Route.HandlerType.BLOCKING`:"
msgstr "また、 `@io.smallrye.common.annotation.Blocking` を使用し、 `type = Route.HandlerType.BLOCKING` を省略することもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:127
#, no-wrap
msgid ""
"@Route(methods = HttpMethod.POST, path = \"/post\")\n"
"@Blocking\n"
"public void blocking(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:129
#, fuzzy
msgid "When `@Blocking` is used, it ignores the `type` attribute of `@Route`."
msgstr "`@Blocking` を使用する場合、 `@Route` の `type` 属性を無視します。"

#. type: delimited block =
#: upstream/_guides/reactive-routes.adoc:132
#, fuzzy
msgid "The `@Route` annotation is repeatable and so you can declare several routes for a single method:"
msgstr "`@Route` アノテーションは繰り返し使用できるので、1つのメソッドに対して複数のルートを宣言することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:140
#, no-wrap
msgid ""
"@Route(path = \"/first\") <1>\n"
"@Route(path = \"/second\")\n"
"public void route(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:142
#, fuzzy
msgid "Each route can use different paths, methods..."
msgstr "それぞれのルートでは、異なる経路、方法を使用することができます..."

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:144
#, fuzzy
msgid "If no content-type header is set then we will try to use the most acceptable content type as defined by `io.vertx.ext.web.RoutingContext.getAcceptableContentType()`."
msgstr "content-type ヘッダーが設定されていない場合は、 `io.vertx.ext.web.RoutingContext.getAcceptableContentType()` で定義されている最も許容されるコンテンツタイプを使用するようにします。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:151
#, no-wrap
msgid ""
"@Route(path = \"/person\", produces = \"text/html\") <1>\n"
"String person() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:153
#, fuzzy
msgid "If the `accept` header matches `text/html` we set the content type automatically."
msgstr "`accept` ヘッダーが `text/html` に一致する場合、コンテンツタイプを自動的に設定します。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:154
#, fuzzy, no-wrap
msgid "Handling conflicting routes"
msgstr "相反するルートへの対応"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:158
#, fuzzy
msgid "You may end up with multiple routes matching a given path.  In the following example, both route matches `/accounts/me`:"
msgstr "与えられたパスに複数のルートがマッチしてしまうことがあります。次の例では、両方のルートが `/accounts/me` にマッチしています。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:165
#, no-wrap
msgid ""
"@Route(path = \"/accounts/:id\", methods = HttpMethod.GET)\n"
"void getAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:170
#, no-wrap
msgid ""
"@Route(path = \"/accounts/me\", methods = HttpMethod.GET)\n"
"void getCurrentUserAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:174
#, fuzzy
msgid "As a consequence, the result is not the expected one as the first route is called with the path parameter `id` set to `me`.  To avoid the conflict, use the `order` attribute:"
msgstr "その結果、パスパラメータ `id` が `me` に設定された状態で最初のルートが呼び出されるため、期待した結果にはなりませんでした。この衝突を回避するには、 `order` 属性を使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:181
#, no-wrap
msgid ""
"@Route(path = \"/accounts/:id\", methods = HttpMethod.GET, order = 2)\n"
"void getAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:186
#, no-wrap
msgid ""
"@Route(path = \"/accounts/me\", methods = HttpMethod.GET, order = 1)\n"
"void getCurrentUserAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:190
#, fuzzy
msgid "By giving a lower order to the second route, it gets evaluated first.  If the request path matches, it is invoked, otherwise the other routes are evaluated."
msgstr "2 番目のルートに低い順序を与えることで、それが最初に評価されます。リクエストのパスが一致すれば、それが起動され、そうでなければ他のルートが評価されます。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:191
#, fuzzy, no-wrap
msgid "`@RouteBase`"
msgstr "`@RouteBase`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:194
#, fuzzy
msgid "This annotation can be used to configure some defaults for reactive routes declared on a class."
msgstr "このアノテーションを使用すると、クラスで宣言されたリアクティブ・ルートのデフォルトを設定することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:199
#, no-wrap
msgid ""
"@RouteBase(path = \"simple\", produces = \"text/plain\") <1> <2>\n"
"public class SimpleRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:205
#, no-wrap
msgid ""
"    @Route(path = \"ping\") // the final path is /simple/ping\n"
"    void ping(RoutingContext rc) {\n"
"        rc.response().end(\"pong\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:207
#, fuzzy
msgid "The `path` value is used as a prefix for any route method declared on the class where `Route#path()` is used."
msgstr "`path` の値は、 `Route#path()` が使用されているクラスで宣言されたあらゆるルートメソッドのプレフィックスとして使用されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:208
#, fuzzy
msgid "The value of `produces()` is used for content-based routing for all routes where `Route#produces()` is empty."
msgstr "`produces()` の値は、 `Route#produces()` が空であるすべてのルートのコンテンツベースルーティングに使用されます。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:210
#, fuzzy, no-wrap
msgid "Reactive Route Methods"
msgstr "Reactive Routesの使用"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:215
#, fuzzy
msgid "A route method must be a non-private non-static method of a CDI bean.  If the annotated method returns `void` then it has to accept at least one argument - see the supported types below.  If the annotated method does not return `void` then the arguments are optional."
msgstr "ルートメソッドは、CDI Bean の非プライベート非静的メソッドでなければなりません。アノテーション付きのメソッドが `void` を返す場合、少なくとも1つの引数を受け入れなければなりません - 以下のサポートされるタイプを参照してください。アノテーション付きメソッドが `void` を返さない場合，引数は任意である。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:218
#, fuzzy
msgid "Methods that return `void` must __end__ the response or the HTTP request to this route will never end.  Some methods of `RoutingExchange` do it for you, others not and you must call the `end()` method of the response by yourself, please refer to its JavaDoc for more information."
msgstr "`void` を返すメソッドは、レスポンス _を終了させ_なければ、このルートへの HTTP リクエストは終了しません。 `RoutingExchange` の一部のメソッドはそれを行ってくれますが、他のメソッドはそうではなく、自分でレスポンスの `end()` メソッドを呼び出す必要があります。詳細はその JavaDoc を参照してください。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:220
#, fuzzy
msgid "A route method can accept arguments of the following types:"
msgstr "ルートメソッドは、以下のタイプの引数を受け入れることができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:222
msgid "`io.vertx.ext.web.RoutingContext`"
msgstr "`io.vertx.ext.web.RoutingContext`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:223
msgid "`io.quarkus.vertx.web.RoutingExchange`"
msgstr "`io.quarkus.vertx.web.RoutingExchange`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:224
msgid "`io.vertx.core.http.HttpServerRequest`"
msgstr "`io.vertx.core.http.HttpServerRequest`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:225
msgid "`io.vertx.core.http.HttpServerResponse`"
msgstr "`io.vertx.core.http.HttpServerResponse`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:226
msgid "`io.vertx.mutiny.core.http.HttpServerRequest`"
msgstr "`io.vertx.core.http.HttpServerRequest`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:227
msgid "`io.vertx.mutiny.core.http.HttpServerResponse`"
msgstr "`io.vertx.core.http.HttpServerResponse`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:229
#, fuzzy
msgid "Furthermore, it is possible to inject the `HttpServerRequest` parameters into a method parameter annotated with `@io.quarkus.vertx.web.Param`:"
msgstr "リクエストボディは、 `@io.quarkus.vertx.web.Body` でアノテーションされたメソッドパラメーターに注入することができます。"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:232
#: upstream/_guides/reactive-routes.adoc:252
#: upstream/_guides/reactive-routes.adoc:272
#, fuzzy, no-wrap
msgid "Parameter Type"
msgstr "パラメータタイプ"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:234
#: upstream/_guides/reactive-routes.adoc:254
#: upstream/_guides/reactive-routes.adoc:274
#, fuzzy, no-wrap
msgid ""
"Obtained via  \n"
"//-------------"
msgstr "入手方法"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:234
#: upstream/_guides/reactive-routes.adoc:254
#: upstream/_guides/reactive-routes.adoc:274
#, no-wrap
msgid "`java.lang.String`"
msgstr "`java.lang.String`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:235
#: upstream/_guides/reactive-routes.adoc:236
#, no-wrap
msgid "`routingContext.request().getParam()`"
msgstr "`routingContext.request().getParam()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:235
#: upstream/_guides/reactive-routes.adoc:255
#, no-wrap
msgid "`java.util.Optional<String>`"
msgstr "`java.util.Optional<String>`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:236
#: upstream/_guides/reactive-routes.adoc:256
#, no-wrap
msgid "`java.util.List<String>`"
msgstr "`java.util.List<String>`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:237
#, no-wrap
msgid "`routingContext.request().params().getAll()`"
msgstr "`routingContext.request().params().getAll()`"

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:239
#, fuzzy, no-wrap
msgid "Request Parameter Example"
msgstr "リクエストヘッダーの例"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:246
#, no-wrap
msgid ""
"@Route\n"
"String hello(@Param Optional<String> name) {\n"
"   return \"Hello \" + name.orElse(\"world\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:249
#, fuzzy
msgid "The `HttpServerRequest` headers can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Header`:"
msgstr "リクエストボディは、 `@io.quarkus.vertx.web.Body` でアノテーションされたメソッドパラメーターに注入することができます。"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:255
#: upstream/_guides/reactive-routes.adoc:256
#, fuzzy, no-wrap
msgid "`routingContext.request().getHeader()`"
msgstr "`routingContext.request().getParam()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:257
#, fuzzy, no-wrap
msgid "`routingContext.request().headers().getAll()`"
msgstr "`routingContext.request().params().getAll()`"

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:259
#, no-wrap
msgid "Request Header Example"
msgstr "リクエストヘッダーの例"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:266
#, no-wrap
msgid ""
"@Route\n"
"String helloFromHeader(@Header(\"My-Header\") String header) {\n"
"   return header;\n"
"}\n"
msgstr ""
"@Route\n"
"String helloFromHeader(@Header(\"My-Header\") String header) {\n"
"   return header;\n"
"}\n"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:269
msgid "The request body can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Body`."
msgstr "リクエストボディは、 `@io.quarkus.vertx.web.Body` でアノテーションされたメソッドパラメーターに注入することができます。"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:275
#, no-wrap
msgid "`routingContext.getBodyAsString()`"
msgstr "`routingContext.getBodyAsString()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:275
#, no-wrap
msgid "`io.vertx.core.buffer.Buffer`"
msgstr "`io.vertx.core.buffer.Buffer`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:276
#, no-wrap
msgid "`routingContext.getBody()`"
msgstr "`routingContext.getBody()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:276
#, no-wrap
msgid "`io.vertx.core.json.JsonObject`"
msgstr "`io.vertx.core.json.JsonObject`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:277
#, no-wrap
msgid "`routingContext.getBodyAsJson()`"
msgstr "`routingContext.getBodyAsJson()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:277
#, no-wrap
msgid "`io.vertx.core.json.JsonArray`"
msgstr "`io.vertx.core.json.JsonArray`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:278
#, no-wrap
msgid "`routingContext.getBodyAsJsonArray()`"
msgstr "`routingContext.getBodyAsJsonArray()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:278
#, fuzzy, no-wrap
msgid "any other type"
msgstr "その他のタイプ"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:279
#, fuzzy, no-wrap
msgid "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"
msgstr "`routingContext.getBodyAsJson()`"

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:281
#, fuzzy, no-wrap
msgid "Request Body Example"
msgstr "リクエストヘッダーの例"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:289
#, no-wrap
msgid ""
"@Route(produces = \"application/json\")\n"
"Person createPerson(@Body Person person, @Param(\"id\") Optional<String> primaryKey) {\n"
"  person.setId(primaryKey.map(Integer::valueOf).orElse(42));\n"
"  return person;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:293
#, fuzzy
msgid "A failure handler can declare a single method parameter whose type extends `Throwable`.  The type of the parameter is used to match the result of `RoutingContext#failure()`."
msgstr "失敗ハンドラは、 `Throwable` を拡張した型を持つ単一のメソッド・パラメータを宣言することができます。このパラメータの型は， `RoutingContext#failure()` の結果と一致するように使用されます．"

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:294
#, fuzzy, no-wrap
msgid "Failure Handler Example"
msgstr "リクエストヘッダーの例"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:301
#, no-wrap
msgid ""
"@Route(type = HandlerType.FAILURE)\n"
"void unsupported(UnsupportedOperationException e, HttpServerResponse response) {\n"
"  response.setStatusCode(501).end(e.getMessage());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:303
#, fuzzy, no-wrap
msgid "Returning Unis"
msgstr "リターンズユニ"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:306
#, fuzzy
msgid "In a reactive route, you can return a `Uni` directly:"
msgstr "リアクティブルートでは、 `Uni` を直接返すことができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:313
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"Uni<String> hello(RoutingContext context) {\n"
"    return Uni.createFrom().item(\"Hello world!\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:318
#, no-wrap
msgid ""
"@Route(path = \"/person\")\n"
"Uni<Person> getPerson(RoutingContext context) {\n"
"    return Uni.createFrom().item(() -> new Person(\"neo\", 12345));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:321
#, fuzzy
msgid "Returning `Unis` is convenient when using a reactive client:"
msgstr "`Unis` を返すことは、リアクティブなクライアントを使用する際に便利です。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:328
#, no-wrap
msgid ""
"@Route(path = \"/mail\")\n"
"Uni<Void> sendEmail(RoutingContext context) {\n"
"    return mailer.send(...);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:331
#, fuzzy
msgid "The item produced by the returned `Uni` can be:"
msgstr "返された `Uni` が生み出すアイテムは、次のようになります。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:333
#: upstream/_guides/reactive-routes.adoc:359
#, fuzzy
msgid "a string - written into the HTTP response directly"
msgstr "文字列 - HTTPレスポンスに直接書き込まれます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:334
#: upstream/_guides/reactive-routes.adoc:360
#, fuzzy
msgid "a buffer - written into the HTTP response directly"
msgstr "バッファ - HTTPレスポンスに直接書き込まれる"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:336
#: upstream/_guides/reactive-routes.adoc:362
#, fuzzy
msgid "an object - written into the HTTP response after having been encoded into JSON.  The `content-type` header is set to `application/json` if not already set."
msgstr "は、JSON にエンコードされた後、HTTP レスポンスに書き込まれるオブジェクトです。 `content-type` ヘッダーが設定されていない場合は、 `application/json` に設定されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:338
#, fuzzy
msgid "If the returned `Uni` produces a failure (or is `null`), an HTTP 500 response is written."
msgstr "返された `Uni` が失敗した場合 (または `null`)、HTTP 500 応答が書き込まれます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:340
#, fuzzy
msgid "Returning a `Uni<Void>` produces a 204 response (no content)."
msgstr "`Uni<Void>` を返すと 204 レスポンス（コンテンツなし）になります。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:341
#, fuzzy, no-wrap
msgid "Returning results"
msgstr "結果を返す"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:344
#, fuzzy
msgid "You can also return a result directly:"
msgstr "結果を直接返すこともできます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:351
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"String helloSync(RoutingContext context) {\n"
"    return \"Hello world\";\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:355
#, fuzzy
msgid "Be aware, the processing must be **non-blocking** as reactive routes are invoked on the IO Thread.  Otherwise, set the `type` attribute of the `@Route` annotation to `Route.HandlerType.BLOCKING`, or use the `@io.smallrye.common.annotation.Blocking` annotation."
msgstr "リアクティブルートはIOスレッド上で起動されるため、処理は *ノン*ブロッキングでなければならないことに注意してください。そうでない場合は、 `@Route` アノテーションの `type` 属性を `Route.HandlerType.BLOCKING` に設定するか、 `@io.smallrye.common.annotation.Blocking` アノテーションを使用してください。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:357
#: upstream/_guides/reactive-routes.adoc:379
#, fuzzy
msgid "The method can return:"
msgstr "メソッドは返すことができます。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:363
#, fuzzy, no-wrap
msgid "Returning Multis"
msgstr "帰ってきたマルチ"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:368
#, fuzzy
msgid "A reactive route can return a `Multi`.  The items are written one by one, in the response.  The response `Transfer-Encoding` header is set to `chunked`."
msgstr "リアクティブルートは、 `Multi` を返すことができます。レスポンスにはアイテムが1つずつ書き込まれます。レスポンスの `Transfer-Encoding` ヘッダーには `chunked` が設定されます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:375
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"Multi<String> hellos(RoutingContext context) {\n"
"    return Multi.createFrom().items(\"hello\", \"world\", \"!\");  // <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:377
#, fuzzy
msgid "Produces `helloworld!`"
msgstr "プロデュース `helloworld!`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:381
#, fuzzy
msgid "a `Multi<String>` - the items are written one by one (one per _chunk_) in the response."
msgstr "a `Multi<String>` - アイテムはレスポンスの中に1つずつ（ _チャンク_ごとに1つ）書き込まれます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:382
#, fuzzy
msgid "a `Multi<Buffer>` - the buffers are written one by one (one per _chunk_) without any processing."
msgstr "a `Multi<Buffer>` - バッファは何の処理もせずに1つずつ（ _チャンク_ごとに）書き込まれます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:383
#, fuzzy
msgid "a `Multi<Object>` - the items are encoded to JSON written one by one in the response."
msgstr "a `Multi<Object>` - アイテムはJSONにエンコードされ、レスポンスに1つずつ書き込まれます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:394
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:397
#: upstream/_guides/reactive-routes.adoc:423
#, fuzzy
msgid "The previous snippet produces:"
msgstr "先ほどのスニペットでは、以下のように生成されます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:403
#, no-wrap
msgid ""
"{\"name\":\"superman\", \"id\": 1} // chunk 1\n"
"{\"name\":\"batman\", \"id\": 2} // chunk 2\n"
"{\"name\":\"spiderman\", \"id\": 3} // chunk 3\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:405
#, fuzzy, no-wrap
msgid "Streaming JSON Array items"
msgstr "JSON配列アイテムのストリーミング"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:410
#, fuzzy
msgid "You can return a `Multi` to produce a JSON Array, where every item is an item from this array.  The response is written item by item to the client.  To do that set the `produces` attribute to `\"application/json\"` (or `ReactiveRoutes.APPLICATION_JSON`)."
msgstr "`Multi` を返せば、すべてのアイテムがこの配列からのアイテムであるような JSON 配列を生成することができます。レスポンスは、アイテムごとにクライアントに書き込まれます。そのためには、 `produces` 属性を `\"application/json\"` (または `ReactiveRoutes.APPLICATION_JSON`) に設定します。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:420
#, no-wrap
msgid ""
"@Route(path = \"/people\", produces = ReactiveRoutes.APPLICATION_JSON)\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:431
#, no-wrap
msgid ""
"[\n"
"  {\"name\":\"superman\", \"id\": 1} // chunk 1\n"
"  ,{\"name\":\"batman\", \"id\": 2} // chunk 2\n"
"  ,{\"name\":\"spiderman\", \"id\": 3} // chunk 3\n"
"]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:436
#, fuzzy
msgid "The `produces` attribute is an array.  When you pass a single value you can omit the \"{\" and \"}\".  Note that `\"application/json\"` must be the first value in the array."
msgstr "`produces` 属性は配列です。単一の値を渡す場合は、「{」と「}」を省略することができます。なお、 `\"application/json\"` は、配列の最初の値でなければなりません。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:441
#, fuzzy
msgid "Only `Multi<String>`, `Multi<Object>` and `Multi<Void>` can be written into the JSON Array.  Using a `Multi<Void>` produces an empty array.  You cannot use `Multi<Buffer>`.  If you need to use `Buffer`, transform the content into a JSON or String representation first."
msgstr "JSON 配列に書き込めるのは、 `Multi<String>`, `Multi<Object>`, `Multi<Void&amp;gt;` だけです。 `Multi<Void&amp;gt;` を使用すると、空の配列になります。 `Multi<Buffer&amp;gt;` は使用できません。 `Buffer` を使用する必要がある場合は、まずコンテンツを JSON または String 表現に変換します。"

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:443
#, fuzzy, no-wrap
msgid "Deprecation of `asJsonArray`"
msgstr "の非推奨 `asJsonArray`"

#. type: delimited block =
#: upstream/_guides/reactive-routes.adoc:446
#, fuzzy
msgid "The `ReactiveRoutes.asJsonArray` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr "`ReactiveRoutes.asJsonArray` は、Quarkusのセキュリティレイヤーとの互換性がないため、非推奨となっています。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:448
#, fuzzy, no-wrap
msgid "Event Stream and Server-Sent Event support"
msgstr "イベントストリームとサーバー送信型イベントのサポート"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:452
#, fuzzy
msgid "You can return a `Multi` to produce an event source (stream of server sent events).  To enable this feature, set the `produces` attribute to `\"text/event-stream\"` (or `ReactiveRoutes.EVENT_STREAM`), such as in:"
msgstr "`Multi` を返せば、イベントソース（サーバーが送信したイベントのストリーム）を生成することができます。この機能を有効にするには、 `produces` 属性を `\"text/event-stream\"` （または `ReactiveRoutes.EVENT_STREAM` ）に設定してください。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:462
#, no-wrap
msgid ""
"@Route(path = \"/people\", produces = ReactiveRoutes.EVENT_STREAM)\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:465
#: upstream/_guides/reactive-routes.adoc:555
#, fuzzy
msgid "This method would produce:"
msgstr "この方法では、以下のようになります。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:470
#, no-wrap
msgid ""
"data: {\"name\":\"superman\", \"id\": 1}\n"
"id: 0\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:473
#, no-wrap
msgid ""
"data: {\"name\":\"batman\", \"id\": 2}\n"
"id: 1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:476
#, no-wrap
msgid ""
"data: {\"name\":\"spiderman\", \"id\": 3}\n"
"id: 2\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:482
#, fuzzy
msgid "The `produces` attribute is an array.  When you pass a single value you can omit the \"{\" and \"}\".  Note that `\"text/event-stream\"` must be the first value in the array."
msgstr "`produces` 属性は配列です。単一の値を渡す場合は、「{」と「}」を省略することができます。なお、 `\"text/event-stream\"` は、配列の最初の値でなければなりません。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:484
#, fuzzy
msgid "You can also implement the `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` interface to customize the `event` and `id` section of the server sent event:"
msgstr "また、 `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` インターフェースを実装することで、server sent イベントの `event` および `id` セクションをカスタマイズすることができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:490
#, no-wrap
msgid ""
"class PersonEvent implements ReactiveRoutes.ServerSentEvent<Person> {\n"
"    public String name;\n"
"    public int id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:495
#, no-wrap
msgid ""
"    public PersonEvent(String name, int id) {\n"
"        this.name = name;\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:500
#, no-wrap
msgid ""
"    @Override\n"
"    public Person data() {\n"
"        return new Person(name, id); // Will be JSON encoded\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:505
#, no-wrap
msgid ""
"    @Override\n"
"    public long id() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:511
#, no-wrap
msgid ""
"    @Override\n"
"    public String event() {\n"
"        return \"person\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:514
#, fuzzy
msgid "Using a `Multi<PersonEvent>` would produce:"
msgstr "`Multi<PersonEvent&amp;gt;` を使用すると、生成されます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:520
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"superman\", \"id\": 1}\n"
"id: 1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:524
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"batman\", \"id\": 2}\n"
"id: 2\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:528
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"spiderman\", \"id\": 3}\n"
"id: 3\n"
msgstr ""

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:532
#, fuzzy, no-wrap
msgid "Deprecation of `asEventStream`"
msgstr "の非推奨 `asEventStream`"

#. type: delimited block =
#: upstream/_guides/reactive-routes.adoc:535
#, fuzzy
msgid "The `ReactiveRoutes.asEventStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr "`ReactiveRoutes.asEventStream` は、Quarkusのセキュリティレイヤーとの互換性がないため、非推奨となっています。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:537
#, fuzzy, no-wrap
msgid "Json Stream in NDJSON format"
msgstr "NDJSONフォーマットのJsonストリーム"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:541
#, fuzzy
msgid "You can return a `Multi` to produce a newline delimited stream of JSON values.  To enable this feature, set the `produces` attribute of the `@Route` annotation to `\"application/x-ndjson\"` (or `ReactiveRoutes.ND_JSON`):"
msgstr "`Multi` を返せば、改行で区切られた JSON 値のストリームを生成することができます。この機能を有効にするには、 `@Route` アノテーションの `produces` 属性を `\"application/x-ndjson\"` （または `ReactiveRoutes.ND_JSON` ）に設定します。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:552
#, no-wrap
msgid ""
"@Route(path = \"/people\", produces = ReactiveRoutes.ND_JSON)\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return ReactiveRoutes.asJsonStream(Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3)\n"
"            ));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:561
#, no-wrap
msgid ""
"{\"name\":\"superman\", \"id\": 1}\n"
"{\"name\":\"batman\", \"id\": 2}\n"
"{\"name\":\"spiderman\", \"id\": 3}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:566
#, fuzzy
msgid "The `produces` attribute is an array. When you pass a single value you can omit the \"{\" and \"}\".  Note that `\"application/x-ndjson\"` must be the first value in the array."
msgstr "`produces` 属性は配列です。単一の値を渡す場合は、「{」と「}」を省略することができます。なお、 `\"application/x-ndjson\"` は、配列の最初の値でなければなりません。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:568
#, fuzzy
msgid "You can also provide strings instead of Objects, in that case the strings will be wrapped in quotes to become valid JSON values:"
msgstr "オブジェクトの代わりに文字列を指定することもできます。その場合、文字列は引用符で囲まれ、有効なJSON値となります。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:579
#, no-wrap
msgid ""
"@Route(path = \"/people\", produces = ReactiveRoutes.ND_JSON)\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return ReactiveRoutes.asJsonStream(Multi.createFrom().items(\n"
"            \"superman\",\n"
"            \"batman\",\n"
"            \"spiderman\"\n"
"            ));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:586
#, no-wrap
msgid ""
"\"superman\"\n"
"\"batman\"\n"
"\"spiderman\"\n"
msgstr ""

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:590
#, fuzzy, no-wrap
msgid "Deprecation of `asJsonStream`"
msgstr "の非推奨 `asJsonStream`"

#. type: delimited block =
#: upstream/_guides/reactive-routes.adoc:593
#, fuzzy
msgid "The `ReactiveRoutes.asJsonStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr "`ReactiveRoutes.asJsonStream` は、Quarkusのセキュリティレイヤーとの互換性がないため、非推奨となっています。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:595
#, no-wrap
msgid "Using Bean Validation"
msgstr "Bean バリデーションの使用"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:600
#, fuzzy
msgid "You can combine reactive routes and Bean Validation.  First, don't forget to add the `quarkus-hibernate-validator` extension to your project.  Then, you can add constraints to your route parameter (annotated with `@Param` or `@Body`):"
msgstr "リアクティブルートとBean Validationを組み合わせることができます。まず、 `quarkus-hibernate-validator` エクステンションをプロジェクトに忘れずに追加します。次に、ルートパラメータに制約を追加します（ `@Param` または `@Body` でアノテーションされています）。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:607
#, no-wrap
msgid ""
"@Route(produces = \"application/json\")\n"
"Person createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:611
#, fuzzy
msgid "If the parameters do not pass the tests, it returns an HTTP 400 response.  If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr "パラメータがテストに合格しなかった場合は、HTTP 400レスポンスを返します。リクエストがJSONのペイロードを受け入れる場合、レスポンスは link:https://opensource.zalando.com/problem/constraint-violation/[Problemの]フォーマットに従います。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:613
#, fuzzy
msgid "When returning an object or a `Uni`, you can also use the `@Valid` annotation:"
msgstr "そして、 _Bean_ では、以下のように `@Route` アノテーションを使用することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:620
#, no-wrap
msgid ""
"@Route(...)\n"
"@Valid Uni<Person> createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:624
#, fuzzy
msgid "If the item produced by the route does not pass the validation, it returns a HTTP 500 response.  If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr "ルートが生成したアイテムが検証に合格しない場合は、HTTP 500レスポンスを返します。リクエストがJSONペイロードを受け入れた場合、レスポンスは link:https://opensource.zalando.com/problem/constraint-violation/[Problem]形式に従います。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:628
#, fuzzy
msgid "Note that only `@Valid` is supported on the return type.  The returned class can use any constraint.  In the case of `Uni`, it checks the item produced asynchronously."
msgstr "なお、戻り値の型でサポートされているのは `@Valid` だけです。返されたクラスは任意の制約を使用できます。 `Uni` の場合，非同期的に生成されたアイテムをチェックします。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:629
#, no-wrap
msgid "Using the Vert.x Web Router"
msgstr "Vert.x Web ルーターの使用"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:633
#, fuzzy
msgid "You can also register your route directly on the _HTTP routing layer_ by registering routes directly on the `Router` object.  To retrieve the `Router` instance at startup:"
msgstr "また、 `Router` オブジェクトに直接ルートを登録することで、 _HTTP ルーティング層_に直接ルートを登録することができます。起動時に `Router` のインスタンスを取得するには。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:639
#, no-wrap
msgid ""
"public void init(@Observes Router router) {\n"
"    router.get(\"/my-route\").handler(rc -> rc.response().end(\"Hello from my route\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:642
#, fuzzy
msgid "Check the https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web documentation] to know more about the route registration, options, and available handlers."
msgstr "ルート登録、オプション、利用可能なハンドラーの詳細については、 link:https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Webのドキュメント]をご確認ください。"

#. type: delimited block =
#: upstream/_guides/reactive-routes.adoc:648
#, fuzzy
msgid "`Router` access is provided by the `quarkus-vertx-http` extension.  If you use `quarkus-resteasy-reactive` or `quarkus-reactive-routes`, the extension will be added automatically."
msgstr "`Router` のアクセスは、 `quarkus-vertx-http` のエクステンションによって提供されます。 `quarkus-resteasy` または `quarkus-reactive-routes` を使用している場合は、エクステンションが自動的に追加されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:651
#, fuzzy
msgid "You can also receive the Mutiny variant of the Router (`io.vertx.mutiny.ext.web.Router`):"
msgstr "また、ルーターのMutinyバリエーション( `io.vertx.mutiny.ext.web.Router`)を受け取ることができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:657
#, no-wrap
msgid ""
"public void init(@Observes io.vertx.mutiny.ext.web.Router router) {\n"
"    router.get(\"/my-route\").handler(rc -> rc.response().endAndForget(\"Hello from my route\"));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:659
#, no-wrap
msgid "Intercepting HTTP requests"
msgstr "HTTP リクエストの傍受"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:663
#, fuzzy
msgid "You can also register filters that would intercept incoming HTTP requests.  Note that these filters are also applied for servlets, JAX-RS resources, and reactive routes."
msgstr "また、受信するHTTPリクエストをインターセプトするフィルターを登録することもできます。なお、これらのフィルターは、サーブレット、JAX-RSリソース、リアクティブ・ルートにも適用されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:665
#, fuzzy
msgid "For example, the following code snippet registers a filter adding an HTTP header:"
msgstr "例えば、次のコードは、HTTPヘッダーを追加するフィルターを登録するものです。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:671
#, no-wrap
msgid "import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:673
#, no-wrap
msgid "public class MyFilters {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:680
#, no-wrap
msgid ""
"    @RouteFilter(100) <1>\n"
"    void myFilter(RoutingContext rc) {\n"
"       rc.response().putHeader(\"X-Header\", \"intercepting the request\");\n"
"       rc.next(); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:683
#, fuzzy
msgid "The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first."
msgstr "`RouteFilter#value()` は、フィルターをソートする際の優先順位を定義するもので、優先順位が高いフィルターが最初に呼ばれます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:684
#, fuzzy
msgid "The filter is likely required to call the `next()` method to continue the chain."
msgstr "フィルターは、連鎖を続けるために `next()` メソッドを呼び出す必要があると思われます。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:685
#, fuzzy, no-wrap
msgid "HTTP Compression"
msgstr "HTTP圧縮"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:689
#, fuzzy
msgid "The body of an HTTP response is not compressed by default.  You can enable the HTTP compression support by means of `quarkus.http.enable-compression=true`."
msgstr "HTTPレスポンスのボディは、デフォルトでは圧縮されません。HTTP 圧縮のサポートは、 `quarkus.http.enable-compression=true` で有効にすることができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:691
#, fuzzy
msgid "If compression support is enabled then the response body is compressed if:"
msgstr "圧縮サポートが有効な場合、レスポンスボディは以下の場合に圧縮されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:693
#, fuzzy
msgid "the route method is annotated with `@io.quarkus.vertx.http.Compressed`, or"
msgstr "リクエストボディは、 `@io.quarkus.vertx.web.Body` でアノテーションされたメソッドパラメーターに注入することができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:694
#, fuzzy
msgid "the `Content-Type` header is set and the value is a compressed media type as configured via `quarkus.http.compress-media-types`."
msgstr " `Content-Type` ヘッダが設定され、その値は `quarkus.http.compress-media-types` を介して設定された圧縮メディアタイプである。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:696
#, fuzzy
msgid "The response body is never compressed if:"
msgstr "の場合、レスポンスボディは決して圧縮されません。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:698
#, fuzzy
msgid "the route method is annotated with `@io.quarkus.vertx.http.Uncompressed`, or"
msgstr "リクエストボディは、 `@io.quarkus.vertx.web.Body` でアノテーションされたメソッドパラメーターに注入することができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:699
#, fuzzy
msgid "the `Content-Type` header is not set."
msgstr "は、 `Content-Type` ヘッダーが設定されていません。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:701
#, fuzzy
msgid "By default, the following list of media types is compressed: `text/html`, `text/plain`, `text/xml`, `text/css`, `text/javascript` and `application/javascript`."
msgstr "デフォルトでは、以下のメディアタイプのリストが圧縮されています。 `text/html` , `text/plain` , `text/xml` , `text/css` , `text/javascript` , `application/javascript` ."

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:703
#, fuzzy
msgid "If the client does not support HTTP compression then the response body is not compressed."
msgstr "クライアントが HTTP 圧縮に対応していない場合、レスポンスボディは圧縮されません。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:705
#, no-wrap
msgid "Adding OpenAPI and Swagger UI"
msgstr "OpenAPIとSwagger UIの追加"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:708
#, fuzzy
msgid "You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger UI] by using the `quarkus-smallrye-openapi` extension."
msgstr "`quarkus-smallrye-openapi` エクステンションを使用することで、 link:https://www.openapis.org/[OpenAPI]と link:https://swagger.io/tools/swagger-ui/[Swagger UI]のサポートを追加することができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:710
msgid "Add the extension by running this command:"
msgstr "このコマンドを実行してエクステンションを追加"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:715
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:723
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-openapi</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:729
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-openapi\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:732
#, fuzzy
msgid "This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:"
msgstr "これは、Vert.x Routesから基本的なOpenAPIスキーマドキュメントを生成するのに十分です。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:736
#, no-wrap
msgid "curl http://localhost:8080/q/openapi\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:739
#, fuzzy
msgid "You will see the generated OpenAPI schema document:"
msgstr "これにより、このOpenAPIスキーマが生成されます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:742
#: upstream/_guides/reactive-routes.adoc:823
#, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:767
#, no-wrap
msgid ""
"openapi: 3.0.3\n"
"info:\n"
"  title: Generated API\n"
"  version: \"1.0\"\n"
"paths:\n"
"  /greetings:\n"
"    get:\n"
"      responses:\n"
"        \"204\":\n"
"          description: No Content\n"
"  /hello:\n"
"    get:\n"
"      responses:\n"
"        \"204\":\n"
"          description: No Content\n"
"  /world:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                type: string\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:770
#, fuzzy
msgid "Also see xref:openapi-swaggerui.adoc[the OpenAPI Guide]."
msgstr "また、 link:openapi-swaggerui.html[「OpenAPIガイド」]もご覧ください。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:771
#, no-wrap
msgid "Adding MicroProfile OpenAPI Annotations"
msgstr "MicroProfile OpenAPIアノテーションの追加"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:775
msgid "You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema, example, adding header info, or specifying the return type on `void` methods might be usefull :"
msgstr "link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI ] を使用してスキーマをより良くドキュメント化することができます。例えば、ヘッダ情報を追加したり、 `void` メソッドでリターンタイプを指定したりすると便利です。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:792
#, no-wrap
msgid ""
"@OpenAPIDefinition( // <1>\n"
"    info = @Info(\n"
"        title=\"Greeting API\",\n"
"        version = \"1.0.1\",\n"
"        contact = @Contact(\n"
"            name = \"Greeting API Support\",\n"
"            url = \"http://exampleurl.com/contact\",\n"
"            email = \"techsupport@example.com\"),\n"
"        license = @License(\n"
"            name = \"Apache 2.0\",\n"
"            url = \"https://www.apache.org/licenses/LICENSE-2.0.html\"))\n"
")\n"
"@ApplicationScoped\n"
"public class MyDeclarativeRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:801
#, no-wrap
msgid ""
"    // neither path nor regex is set - match a path derived from the method name\n"
"    @Route(methods = Route.HttpMethod.GET)\n"
"    @APIResponse(responseCode=\"200\", \n"
"            description=\"Say hello\", \n"
"            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING))) // <2>\n"
"    void hello(RoutingContext rc) {\n"
"        rc.response().end(\"hello\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:806
#, no-wrap
msgid ""
"    @Route(path = \"/world\") \n"
"    String helloWorld() {\n"
"        return \"Hello world!\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:815
#, no-wrap
msgid ""
"    @Route(path = \"/greetings\", methods = HttpMethod.GET)\n"
"    @APIResponse(responseCode=\"200\", \n"
"            description=\"Greeting\", \n"
"            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))\n"
"    void greetings(RoutingExchange ex) {\n"
"        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:817
msgid "Header information about your API."
msgstr "APIに関するヘッダー情報"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:818
msgid "Defining the response"
msgstr "レスポンスの定義"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:820
msgid "This will generate this OpenAPI schema:"
msgstr "これにより、このOpenAPIスキーマが生成されます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:863
#, no-wrap
msgid ""
"openapi: 3.0.3\n"
"info:\n"
"  title: Greeting API\n"
"  contact:\n"
"    name: Greeting API Support\n"
"    url: http://exampleurl.com/contact\n"
"    email: techsupport@example.com\n"
"  license:\n"
"    name: Apache 2.0\n"
"    url: https://www.apache.org/licenses/LICENSE-2.0.html\n"
"  version: 1.0.1\n"
"paths:\n"
"  /greetings:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: Greeting\n"
"          content:\n"
"            application/json:\n"
"              schema:\n"
"                type: string\n"
"  /hello:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: Say hello\n"
"          content:\n"
"            application/json:\n"
"              schema:\n"
"                type: string\n"
"  /world:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                type: string\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:865
#, no-wrap
msgid "Using Swagger UI"
msgstr "SwaggerのUIの使用"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:869
#, fuzzy
msgid "Swagger UI is included by default when running in `dev` or `test` mode, and can optionally added to `prod` mode.  See <<openapi-swaggerui.adoc#dev-mode,the Swagger UI>> Guide for more details."
msgstr "Swagger UIは、 `dev` または `test` モードで実行するとデフォルトで含まれており、オプションで `prod` モードに追加することができます。詳細は「 link:openapi-swaggerui.html#dev-mode[Swagger UI]Guide」をご覧ください。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:871
msgid "Navigate to link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] and you will see the Swagger UI screen:"
msgstr "link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] に移動すると、Swagger UIの画面が表示されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:873
msgid "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"
msgstr "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:874
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:877
msgid "This guide has introduced how you can use reactive routes to define an HTTP endpoint.  It also describes the structure of the Quarkus HTTP layer and how to write filters."
msgstr "このガイドでは、Reactive Routesを使用してHTTPエンドポイントを定義する方法を紹介してきました。また、Quarkus HTTPレイヤーの構造とフィルターの書き方についても説明しました。"

#~ msgid "`io.vertx.mutiny.ext.web.RoutingContext`"
#~ msgstr "`io.vertx.ext.web.RoutingContext`"
