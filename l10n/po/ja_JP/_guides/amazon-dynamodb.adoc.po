# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-08-31 13:16+0000\n"
"PO-Revision-Date: 2021-03-08 15:35+0900\n"
"Last-Translator: Nobuhiro Sue <nobuhiro.sue@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:15
msgid "DynamoDB is a scalable AWS managed *NoSQL* database.  It supports both key-value and document data models, that enables to have a flexible schema for your data.  This extension provides functionality that allows the client to communicate with the service when running in Quarkus.  You can find more information about DynamoDB at https://aws.amazon.com/dynamodb/[the Amazon DynamoDB website]."
msgstr "DynamoDBは、AWSで管理されているスケーラブルな *NoSQL* データベースです。DynamoDBはキーバリューとドキュメントの両方のデータモデルをサポートしており、データに対して柔軟なスキーマを持つことができます。このエクステンションは、Quarkusで実行しているときにクライアントがサービスと通信できるようにする機能を提供します。DynamoDBの詳細については、 link:https://aws.amazon.com/dynamodb/[Amazon DynamoDBのウェブサイト] で確認できます。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:19
msgid "The DynamoDB extension is based on https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html[AWS Java SDK 2.x].  It's a major rewrite of the 1.x code base that offers two programming models (Blocking & Async).  Keep in mind it's actively developed and does not support yet all the features available in SDK 1.x such as https://github.com/aws/aws-sdk-java-v2/issues/36[Document APIs] or https://github.com/aws/aws-sdk-java-v2/issues/35[Object Mappers]"
msgstr "DynamoDBエクステンションは link:https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html[AWS Java SDK 2.x] をベースにしています。1.xのコードベースを大幅に書き換えたもので、2つのプログラミングモデル(ブロッキングと非同期)を提供しています。このエクステンションは積極的に開発されており、 link:https://github.com/aws/aws-sdk-java-v2/issues/36[ドキュメントAPI] や link:https://github.com/aws/aws-sdk-java-v2/issues/35[オブジェクトマッパー] のようなSDK 1.xで利用可能な機能はまだサポートしていないことを覚えておいてください。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:23
msgid "The Quarkus extension supports two programming models:"
msgstr "Quarkusエクステンションは、2つのプログラミングモデルをサポートしています:"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:25
msgid "Blocking access using URL Connection HTTP client (by default) or the Apache HTTP Client"
msgstr "URL Connection HTTP クライアント (デフォルト) または Apache HTTP Client によるブロッキングなアクセス"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:26
msgid "https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html[Asynchronous programming] based on JDK's `CompletableFuture` objects and the Netty HTTP client."
msgstr "JDK の `CompletableFuture` オブジェクトと Netty HTTP クライアントをベースにした link:https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html[非同期プログラミング]"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:28
msgid "In this guide, we see how you can get your REST services to use the DynamoDB locally and on AWS."
msgstr "このガイドでは、RESTサービスでDynamoDBをローカルとAWS上で利用する方法を見ていきます。"

#. type: Title ==
#: upstream/_guides/amazon-dynamodb.adoc:29
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:32
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:35
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:36
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:37
msgid "An AWS Account to access the DynamoDB service"
msgstr "DynamoDBサービスにアクセスするためのAWSアカウント"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:38
msgid "Optionally, Docker for your system to run DynamoDB locally for testing purposes"
msgstr "オプションで、Dockerを使ってシステムをテスト用にローカルでDynamoDBを実行することができます。"

#. type: Title ===
#: upstream/_guides/amazon-dynamodb.adoc:39
#, no-wrap
msgid "Setup DynamoDB locally"
msgstr "DynamoDBをローカルでセットアップする"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:42
msgid "The easiest way to start working with DynamoDB is to run a local instance as a container."
msgstr "DynamoDBで作業を始める最も簡単な方法は、ローカルインスタンスをコンテナーとして実行することです。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:46
#, no-wrap
msgid "docker run --publish 8000:8000 amazon/dynamodb-local:1.11.477 -jar DynamoDBLocal.jar -inMemory -sharedDb\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:50
msgid "This starts a DynamoDB instance that is accessible on port `8000`.  You can check it's running by accessing the web shell on `http://localhost:8000/shell`."
msgstr "これは、ポート `8000` でアクセス可能な DynamoDB インスタンスを起動します。`http://localhost:8000/shell` のWebシェルにアクセスして、実行中であることを確認することができます。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:52
msgid "Have a look at the https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html[Setting Up DynamoDB Local guide] for other options to run DynamoDB."
msgstr "DynamoDBを実行するための他のオプションについては、 link:https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html[Setting Up DynamoDB Local ガイド] をご覧ください。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:54
msgid "Open `http://localhost:8000/shell` in your browser."
msgstr "ブラザで `http://localhost:8000/shell` を開きます。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:56
msgid "Copy and paste the following code to the shell and run it:"
msgstr "以下のコードをシェルにコピー&ペーストして実行してください。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:64
#, no-wrap
msgid ""
"var params = {\n"
"    TableName: 'QuarkusFruits',\n"
"    KeySchema: [{ AttributeName: 'fruitName', KeyType: 'HASH' }],\n"
"    AttributeDefinitions: [{  AttributeName: 'fruitName', AttributeType: 'S', }],\n"
"    ProvisionedThroughput: { ReadCapacityUnits: 1, WriteCapacityUnits: 1, }\n"
"};\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:68
#, no-wrap
msgid ""
"dynamodb.createTable(params, function(err, data) {\n"
"    if (err) ppJson(err);\n"
"    else ppJson(data);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:70
#, no-wrap
msgid "});\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/amazon-dynamodb.adoc:72
#, no-wrap
msgid "Set up Dynamodb on AWS"
msgstr "AWS上で DynamoDB をセットアップする"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:76
msgid "Before you can use the AWS SDKs with DynamoDB, you must get an AWS access key ID and secret access key.  For more information, see https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SettingUp.DynamoWebService.html[Setting Up DynamoDB (Web Service)]."
msgstr "DynamoDBでAWS SDKを利用する前に、AWSのアクセスキーIDとシークレットアクセスキーを取得する必要があります。詳しくは、 link:https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SettingUp.DynamoWebService.html[DynamoDB(Webサービス)] のセットアップを参照してください。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:78
msgid "We recommend to use the AWS CLI to provision the table:"
msgstr "テーブルのプロビジョニングにはAWS CLIを利用することをお勧めします。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:85
#, no-wrap
msgid ""
"aws dynamodb create-table --table-name QuarkusFruits \\\n"
"                          --attribute-definitions AttributeName=fruitName,AttributeType=S \\\n"
"                          --key-schema AttributeName=fruitName,KeyType=HASH \\\n"
"                          --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-dynamodb.adoc:87
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:89
msgid "The application built here allows to manage elements (fruits) stored in Amazon DynamoDB."
msgstr "ここで構築したアプリケーションでは、Amazon DynamoDBに格納されている要素(果物)を管理することができます。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:92
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:94
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:96
msgid "The solution is located in the `amazon-dynamodb-quickstart` {quickstarts-tree-url}/amazon-dynamodb-quickstart[directory]."
msgstr "ソリューションは `amazon-dynamodb-quickstart` {quickstarts-tree-url}/amazon-dynamodb-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/amazon-dynamodb.adoc:97
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:100
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:110
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amazon-dynamodb-quickstart \\\n"
"    -DclassName=\"org.acme.dynamodb.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson,amazon-dynamodb,resteasy-mutiny\"\n"
"cd amazon-dynamodb-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:114
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS, Mutiny and DynamoDB Client extensions.  After this, the `amazon-dynamodb` extension has been added to your `pom.xml` as well as the Mutiny support for RESTEasy."
msgstr "このコマンドは、RESTEasy/JAX-RS、Mutiny、DynamoDBクライアントエクステンションをインポートするMaven構造を生成します。 `pom.xml` この後、RESTEasyのMutinyサポートと同様に、 `amazon-dynamodb` エクステンションが追加されています。"

#. type: Title ==
#: upstream/_guides/amazon-dynamodb.adoc:115
#, no-wrap
msgid "Creating JSON REST service"
msgstr "JSON RESTサービスの作成"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:118
msgid "In this example, we will create an application to manage a list of fruits. The example application will demonstrate the two programming models supported by the extension."
msgstr "このサンプルでは、果物のリストを管理するアプリケーションを作成します。サンプルアプリケーションでは、エクステンションでサポートされている2つのプログラミングモデルをデモします。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:120
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "まず、以下のように `Fruit` Bean を作成してみましょう。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:124
#: upstream/_guides/amazon-dynamodb.adoc:194
#: upstream/_guides/amazon-dynamodb.adoc:246
#: upstream/_guides/amazon-dynamodb.adoc:283
#: upstream/_guides/amazon-dynamodb.adoc:400
#: upstream/_guides/amazon-dynamodb.adoc:441
#, no-wrap
msgid "package org.acme.dynamodb;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:127
#, no-wrap
msgid ""
"import java.util.Map;\n"
"import java.util.Objects;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:130
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.RegisterForReflection;\n"
"import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:133
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:136
#, no-wrap
msgid ""
"    private String name;\n"
"    private String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:139
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""
"    public Fruit() {\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:148
#, no-wrap
msgid ""
"    public static Fruit from(Map<String, AttributeValue> item) {\n"
"        Fruit fruit = new Fruit();\n"
"        if (item != null && !item.isEmpty()) {\n"
"            fruit.setName(item.get(AbstractService.FRUIT_NAME_COL).s());\n"
"            fruit.setDescription(item.get(AbstractService.FRUIT_DESC_COL).s());\n"
"        }\n"
"        return fruit;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:152
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:156
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:160
#, no-wrap
msgid ""
"    public String getDescription() {\n"
"        return description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:164
#, no-wrap
msgid ""
"    public void setDescription(String description) {\n"
"        this.description = description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:170
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean equals(Object obj) {\n"
"        if (!(obj instanceof Fruit)) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:172
#, no-wrap
msgid "        Fruit other = (Fruit) obj;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:175
#, no-wrap
msgid ""
"        return Objects.equals(other.name, this.name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:181
#, no-wrap
msgid ""
"    @Override\n"
"    public int hashCode() {\n"
"        return Objects.hash(this.name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:188
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer. The static `from` method creates a bean based on the `Map` object provided by the DynamoDB client response."
msgstr "派手なことは何もありません。注意すべき重要なことは、デフォルトのコンストラクタを持つことは、JSONシリアライズレイヤーによって要求されるということです。static `from` メソッドは、DynamoDB クライアントのレスポンスで提供された `Map` オブジェクトをベースにBeanを作成します。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:190
msgid "Now create a `org.acme.dynamodb.AbstractService` that will consist of helper methods that prepare DynamoDB request objects for reading and adding items to the table."
msgstr "ここで、テーブルにアイテムを読み込んで追加するためのDynamoDBリクエストオブジェクトを準備するヘルパーメソッドで構成される `org.acme.dynamodb.AbstractService` を作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:197
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:202
#, no-wrap
msgid ""
"import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n"
"import software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\n"
"import software.amazon.awssdk.services.dynamodb.model.PutItemRequest;\n"
"import software.amazon.awssdk.services.dynamodb.model.ScanRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:204
#, no-wrap
msgid "public abstract class AbstractService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:207
#, no-wrap
msgid ""
"    public final static String FRUIT_NAME_COL = \"fruitName\";\n"
"    public final static String FRUIT_DESC_COL = \"fruitDescription\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:211
#, no-wrap
msgid ""
"    public String getTableName() {\n"
"        return \"QuarkusFruits\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:216
#, no-wrap
msgid ""
"    protected ScanRequest scanRequest() {\n"
"        return ScanRequest.builder().tableName(getTableName())\n"
"                .attributesToGet(FRUIT_NAME_COL, FRUIT_DESC_COL).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:221
#, no-wrap
msgid ""
"    protected PutItemRequest putRequest(Fruit fruit) {\n"
"        Map<String, AttributeValue> item = new HashMap<>();\n"
"        item.put(FRUIT_NAME_COL, AttributeValue.builder().s(fruit.getName()).build());\n"
"        item.put(FRUIT_DESC_COL, AttributeValue.builder().s(fruit.getDescription()).build());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:227
#, no-wrap
msgid ""
"        return PutItemRequest.builder()\n"
"                .tableName(getTableName())\n"
"                .item(item)\n"
"                .build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:231
#, no-wrap
msgid ""
"    protected GetItemRequest getRequest(String name) {\n"
"        Map<String, AttributeValue> key = new HashMap<>();\n"
"        key.put(FRUIT_NAME_COL, AttributeValue.builder().s(name).build());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:239
#, no-wrap
msgid ""
"        return GetItemRequest.builder()\n"
"                .tableName(getTableName())\n"
"                .key(key)\n"
"                .attributesToGet(FRUIT_NAME_COL, FRUIT_DESC_COL)\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:242
msgid "Then, create a `org.acme.dynamodb.FruitSyncService` that will be the business layer of our application and stores/loads the fruits from DynamoDB using the synchronous client."
msgstr "次に、アプリケーションのビジネスレイヤーとなる `org.acme.dynamodb.FruitSyncService` を作成し、同期クライアントを使用して DynamoDB からフルーツを保存/ロードします。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:249
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:252
#: upstream/_guides/amazon-dynamodb.adoc:407
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:254
#, no-wrap
msgid "import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:257
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitSyncService extends AbstractService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:260
#, no-wrap
msgid ""
"    @Inject\n"
"    DynamoDbClient dynamoDB;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:266
#, no-wrap
msgid ""
"    public List<Fruit> findAll() {\n"
"        return dynamoDB.scanPaginator(scanRequest()).items().stream()\n"
"                .map(Fruit::from)\n"
"                .collect(Collectors.toList());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:271
#, no-wrap
msgid ""
"    public List<Fruit> add(Fruit fruit) {\n"
"        dynamoDB.putItem(putRequest(fruit));\n"
"        return findAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:276
#, no-wrap
msgid ""
"    public Fruit get(String name) {\n"
"        return Fruit.from(dynamoDB.getItem(getRequest(name)).item());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:279
msgid "Now, edit the `org.acme.dynamodb.FruitResource` class as follows:"
msgstr "ここで、 `org.acme.dynamodb.FruitResource` クラスを以下のように編集します。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:285
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:292
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:295
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:298
#, no-wrap
msgid ""
"    @Inject\n"
"    FruitSyncService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:303
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Fruit> getAll() {\n"
"        return service.findAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:309
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}\")\n"
"    public Fruit getSingle(@PathParam(\"name\") String name) {\n"
"        return service.get(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:316
#, no-wrap
msgid ""
"    @POST\n"
"    public List<Fruit> add(Fruit fruit) {\n"
"        service.add(fruit);\n"
"        return getAll();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:319
msgid "The implementation is pretty straightforward and you just need to define your endpoints using the JAX-RS annotations and use the `FruitSyncService` to list/add new fruits."
msgstr "実装はとても簡単で、JAX-RSのアノテーションを使ってエンドポイントを定義し、 `FruitSyncService` を使って新しいフルーツをリストアップ/追加するだけです。"

#. type: Title ==
#: upstream/_guides/amazon-dynamodb.adoc:320
#, no-wrap
msgid "Configuring DynamoDB clients"
msgstr "DynamoDBクライアントの設定"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:325
msgid "Both DynamoDB clients (sync and async) are configurable via the `application.properties` file that can be provided in the `src/main/resources` directory.  Additionally, you need to add to the classpath a proper implementation of the sync client. By default the extension uses the `java.net.URLConnection` HTTP client, so you need to add a URL connection client dependency to the `pom.xml` file:"
msgstr "DynamoDBクライアント(syncとasync)はどちらも、 `src/main/resources` ディレクトリーで提供されている `application.properties` ファイルを介して設定可能です。さらに、同期クライアントの適切な実装をクラスパスに追加する必要があります。デフォルトでは、エクステンションは `java.net.URLConnection` HTTP クライアントを使用するので、URL 接続クライアントの依存関係を `pom.xml` ファイルに追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:332
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>url-connection-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:335
msgid "If you want to use the Apache HTTP client instead, configure it as follows:"
msgstr "代わりにApache HTTPクライアントを使いたい場合は、以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:338
#, no-wrap
msgid "quarkus.dynamodb.sync-client.type=apache\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:341
msgid "And add following dependency to the application `pom.xml`:"
msgstr "そして、以下の依存関係をアプリケーションの `pom.xml` に追加します。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:351
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>apache-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-apache-httpclient</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:354
msgid "If you're going to use a local DynamoDB instance, configure it as follows:"
msgstr "ローカルのDynamoDBインスタンスを使用する場合は、以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:358
#, no-wrap
msgid "quarkus.dynamodb.endpoint-override=http://localhost:8000\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:363
#, no-wrap
msgid ""
"quarkus.dynamodb.aws.region=eu-central-1\n"
"quarkus.dynamodb.aws.credentials.type=static\n"
"quarkus.dynamodb.aws.credentials.static-provider.access-key-id=test-key\n"
"quarkus.dynamodb.aws.credentials.static-provider.secret-access-key=test-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:366
msgid "`quarkus.dynamodb.aws.region` - It's required by the client, but since you're using a local DynamoDB instance you can pick any valid AWS region."
msgstr "`quarkus.dynamodb.aws.region` - クライアントが必要としますが、ローカルのDynamoDBインスタンスを使用しているので、有効なAWSリージョンを選ぶことができます。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:367
msgid "`quarkus.dynamodb.aws.credentials.type` - Set `static` credentials provider with any values for `access-key-id` and `secret-access-key`"
msgstr "`quarkus.dynamodb.aws.credentials.type` - `static` の資格情報プロバイダを `access-key-id` と `secret-access-key` の任意の値で設定します。 "

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:368
msgid "`quarkus.dynamodb.endpoint-override` - Override the DynamoDB client to use a local instance instead of an AWS service"
msgstr "`quarkus.dynamodb.endpoint-override` - DynamoDBクライアントがAWSサービスの代わりにローカルインスタンスを使用するようにオーバーライドする"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:370
msgid "If you want to work with an AWS account, you'd need to set it with:"
msgstr "AWSアカウントで作業したい場合は、次のようにして設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:374
#, no-wrap
msgid ""
"quarkus.dynamodb.aws.region=<YOUR_REGION>\n"
"quarkus.dynamodb.aws.credentials.type=default\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:377
msgid "`quarkus.dynamodb.aws.region` you should set it to the region where you provisioned the DynamoDB table,"
msgstr "`quarkus.dynamodb.aws.region` 、DynamoDBテーブルをプロビジョニングしたリージョンに設定する必要があります。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:378
msgid "`quarkus.dynamodb.aws.credentials.type` - use the `default` credentials provider chain that looks for credentials in this order:"
msgstr "`quarkus.dynamodb.aws.credentials.type` - `default` クレデンシャル・プロバイダ・チェーンを使用して、この順番でクレデンシャルを検索します。"

#. type: Title ==
#: upstream/_guides/amazon-dynamodb.adoc:381
#, no-wrap
msgid "Next steps"
msgstr "次のステップ"

#. type: Title ===
#: upstream/_guides/amazon-dynamodb.adoc:383
#, no-wrap
msgid "Packaging"
msgstr "パッケージング"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:387
msgid "Packaging your application is as simple as `./mvnw clean package`.  It can be run with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "アプリケーションのパッケージングは `./mvnw clean package` のように簡単です。 `java -jar target/amazon-dynamodb-quickstart-1.0-SNAPSHOT-runner.jar` で実行できます。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:390
msgid "With GraalVM installed, you can also create a native executable binary: `./mvnw clean package -Dnative`.  Depending on your system, that will take some time."
msgstr "GraalVMをインストールした状態で、ネイティブの実行バイナリーを作成することもできます: `./mvnw clean package -Dnative` お使いのシステムにもよりますが、時間がかかります。"

#. type: Title ===
#: upstream/_guides/amazon-dynamodb.adoc:391
#, no-wrap
msgid "Going asynchronous"
msgstr "非同期にする"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:394
msgid "Thanks to the AWS SDK v2.x used by the Quarkus extension, you can use the asynchronous programming model out of the box."
msgstr "Quarkusのエクステンションで使われているAWS SDK v2.xのおかげで、非同期プログラミングモデルをすぐに使えるようになりました。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:396
msgid "Create a `org.acme.dynamodb.FruitAsyncService` that will be similar to our `FruitSyncService` but using an asynchronous programming model."
msgstr "`FruitSyncService` と同様の `org.acme.dynamodb.FruitAsyncService` を作成しますが、非同期プログラミングモデルを使用します。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:404
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.stream.Collectors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:410
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:413
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitAsyncService extends AbstractService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:416
#, no-wrap
msgid ""
"    @Inject\n"
"    DynamoDbAsyncClient dynamoDB;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:421
#, no-wrap
msgid ""
"    public Uni<List<Fruit>> findAll() {\n"
"        return Uni.createFrom().completionStage(() -> dynamoDB.scan(scanRequest()))\n"
"                .onItem().transform(res -> res.items().stream().map(Fruit::from).collect(Collectors.toList()));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:426
#, no-wrap
msgid ""
"    public Uni<List<Fruit>> add(Fruit fruit) {\n"
"        return Uni.createFrom().completionStage(() -> dynamoDB.putItem(putRequest(fruit)))\n"
"                .onItem().ignore().andSwitchTo(this::findAll);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:432
#, no-wrap
msgid ""
"    public Uni<Fruit> get(String name) {\n"
"        return Uni.createFrom().completionStage(() -> dynamoDB.getItem(getRequest(name)))\n"
"                .onItem().transform(resp -> Fruit.from(resp.item()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:435
msgid "In the previous code, we create `Uni` instances from the `CompletionStage` objects returned by the asynchronous DynamoDB client, and then transform the emitted item."
msgstr "先ほどのコードでは、非同期のDynamoDBクライアントから返された `CompletionStage` オブジェクトから `Uni` インスタンスを作成し、発行されたアイテムを変換しています。"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:437
msgid "Then, create an asynchronous REST resource that consumes this async service:"
msgstr "次に、この非同期サービスをコンシュームする非同期RESTリソースを作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:443
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:448
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.*;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:453
#, no-wrap
msgid ""
"@Path(\"/async-fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class FruitAsyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:456
#, no-wrap
msgid ""
"    @Inject\n"
"    FruitAsyncService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:461
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<List<Fruit>> getAll() {\n"
"        return service.findAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:467
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}\")\n"
"    public Uni<Fruit> getSingle(@PathParam(\"name\") String name) {\n"
"        return service.get(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:474
#, no-wrap
msgid ""
"    @POST\n"
"    public Uni<List<Fruit>> add(Fruit fruit) {\n"
"        return service.add(fruit)\n"
"                .onItem().ignore().andSwitchTo(this::getAll);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:477
msgid "And add Netty HTTP client dependency to the `pom.xml`:"
msgstr "そして、 `pom.xml` に Netty HTTP クライアントの依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:484
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>netty-nio-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-dynamodb.adoc:486
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
