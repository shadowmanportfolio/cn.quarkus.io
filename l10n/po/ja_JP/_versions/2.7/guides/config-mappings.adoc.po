# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-07 16:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/config-mappings.adoc:6
#, no-wrap
msgid "Mapping configuration to objects"
msgstr "設定をオブジェクトにマッピング"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:17
msgid "With config mappings it is possible to group multiple configuration properties in a single interface that share the same prefix."
msgstr "設定マッピングでは、同じプレフィックスを持つ複数の設定プロパティを1つのインターフェースにまとめることができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/config-mappings.adoc:19
#, no-wrap
msgid "`@ConfigMapping`"
msgstr "`@ConfigMapping`"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:23
msgid "A config mapping requires an interface with minimal metadata configuration and annotated with the `@io.smallrye.config.ConfigMapping` annotation."
msgstr "設定マッピングでは、最小メタデータ設定で、 `@io.smallrye.config.ConfigMapping` のアノテーションが付いたインターフェースが必要です。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:29
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:32
#: upstream/_versions/2.7/guides/config-mappings.adoc:65
#: upstream/_versions/2.7/guides/config-mappings.adoc:149
#: upstream/_versions/2.7/guides/config-mappings.adoc:178
#, no-wrap
msgid ""
"    int port();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:37
msgid "The `Server` interface is able to map configuration properties with the name `server.host` into the `Server.host()` method and `server.port` into `Server.port()` method. The configuration property name to look up is built from the prefix, and the method name with `.` (dot) as the separator."
msgstr "`Server` インターフェースは、 `server.host` という名前の設定プロパティを `Server.host()` メソッドに、 `server.port` を `Server.port()` メソッドにマッピングすることができます。検索する設定プロパティ名は、プレフィックスと、 `.` (ドット)をセパレータとするメソッド名から構築されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:40
msgid "If a mapping fails to match a configuration property a `NoSuchElementException` is thrown, unless the mapped element is an `Optional`."
msgstr "マッピングが設定プロパティと一致しない場合、マッピングされた要素が `Optional` でない限り、 `NoSuchElementException` がスローされます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:41
#, no-wrap
msgid "Registration"
msgstr "登録"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:45
msgid "When a Quarkus application starts, a config mapping can be registered twice. One time for _STATIC INIT_ and a second time for _RUNTIME INIT_:"
msgstr "Quarkusアプリケーションの起動時に、コンフィグマッピングを2回登録することができます。1回は _STATIC INIT_用、2回目は _RUNTIME INIT_用です。"

#. type: Title ====
#: upstream/_versions/2.7/guides/config-mappings.adoc:46
#, no-wrap
msgid "STATIC INIT"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:53
msgid "Quarkus starts some of its services during static initialization, and `Config` is usually one of the first things that is created. In certain situations it may not be possible to correctly initialize a config mapping. For instance, if the mapping requires values from a custom `ConfigSource`. For this reason, any config mapping requires the annotation `@io.quarkus.runtime.configuration.StaticInitSafe` to mark the mapping as safe to be used at this stage. Learn more about xref:config-extending-support.adoc#custom-config-source[registration] of a custom `ConfigSource`."
msgstr "Quarkusは静的初期化中にいくつかのサービスを開始しますが、 `Config` は通常、最初に作成されるものの1つです。状況によっては、設定マッピングを正しく初期化できない場合があります。例えば、マッピングがカスタム `ConfigSource` からの値を必要とする場合などです。このため、どのようなコンフィグマッピングでも、この段階でマッピングを安全に使用できるとマークするには、アノテーション `@io.quarkus.runtime.configuration.StaticInitSafe` が必要になります。カスタム `ConfigSource` の link:config-extending-support.html#custom-config-source[登録]についてはこちらをご覧ください。"

#. type: Title =====
#: upstream/_versions/2.7/guides/config-mappings.adoc:54
#, no-wrap
msgid "Example"
msgstr "例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:62
#, no-wrap
msgid ""
"@StaticInitSafe\n"
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    String host();\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.7/guides/config-mappings.adoc:67
#, no-wrap
msgid "RUNTIME INIT"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:71
msgid "The _RUNTIME INIT_ stage happens after _STATIC INIT_. There are no restrictions at this stage, and any config mapping is added to the `Config` instance as expected."
msgstr "_RUNTIME INIT_ ステージは、 _STATIC INIT_ の後に起こります。この段階では何の制限もなく、あらゆるコンフィグマッピングが期待通りに `Config` インスタンスに追加されます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:72
#, no-wrap
msgid "Retrieval"
msgstr "取得"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:75
msgid "A config mapping interface can be injected into any CDI aware bean:"
msgstr "設定マッピングインタフェースは，任意のCDI対応Beanに注入することができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:81
#, no-wrap
msgid ""
"class BusinessBean {\n"
"    @Inject\n"
"    Server server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:86
#, no-wrap
msgid ""
"    public void businessMethod() {\n"
"        String host = server.host();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:90
msgid "In non-CDI contexts, use the API `io.smallrye.config.SmallRyeConfig#getConfigMapping` to retrieve the config mapping instance:"
msgstr "CDI以外のコンテキストでは、API `io.smallrye.config.SmallRyeConfig#getConfigMapping` を使用して、設定マッピングインスタンスを取得します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:95
#, no-wrap
msgid ""
"SmallRyeConfig config = ConfigProvider.getConfig().unwrap(SmallRyeConfig.class);\n"
"Server server = config.getConfigMapping(Server.class);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:97
#, no-wrap
msgid "Nested groups"
msgstr "ネストされたグループ"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:100
msgid "A nested mapping provides a way to subgroup other config properties:"
msgstr "ネストされたマッピングは、他の設定プロパティをサブグループ化する方法を提供します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:106
#: upstream/_versions/2.7/guides/config-mappings.adoc:400
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"public interface Server {\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:108
#: upstream/_versions/2.7/guides/config-mappings.adoc:402
#, no-wrap
msgid "    int port();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:110
#, no-wrap
msgid "    Log log();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:113
#, no-wrap
msgid ""
"    interface Log {\n"
"        boolean enabled();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:115
#, no-wrap
msgid "        String suffix();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:119
#, no-wrap
msgid ""
"        boolean rotate();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/config-mappings.adoc:121
#: upstream/_versions/2.7/guides/config-mappings.adoc:151
#: upstream/_versions/2.7/guides/config-mappings.adoc:184
#: upstream/_versions/2.7/guides/config-mappings.adoc:210
#: upstream/_versions/2.7/guides/config-mappings.adoc:229
#: upstream/_versions/2.7/guides/config-mappings.adoc:288
#: upstream/_versions/2.7/guides/config-mappings.adoc:342
#: upstream/_versions/2.7/guides/config-mappings.adoc:376
#: upstream/_versions/2.7/guides/config-mappings.adoc:407
#: upstream/_versions/2.7/guides/config-mappings.adoc:677
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:129
#, no-wrap
msgid ""
"server.host=localhost\n"
"server.port=8080\n"
"server.log.enabled=true\n"
"server.log.suffix=.log\n"
"server.log.rotate=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:132
msgid "The method name of a mapping group acts as sub-namespace to the configurations properties."
msgstr "マッピンググループのメソッド名は、設定プロパティのサブネームスペースとして機能します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:133
#, no-wrap
msgid "Overriding property names"
msgstr "プロパティ名のオーバーライド"

#. type: Title ====
#: upstream/_versions/2.7/guides/config-mappings.adoc:135
#, no-wrap
msgid "`@WithName`"
msgstr "`@WithName`"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:139
msgid "If a method name, or a property name do not match with each other, the `@WithName` annotation can override the method name mapping and use the name supplied in the annotation:"
msgstr "メソッド名やプロパティ名が互いに一致しない場合、 `@WithName` アノテーションはメソッド名のマッピングを上書きし、アノテーションで提供された名前を使用することができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:146
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    @WithName(\"name\")\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:156
#, no-wrap
msgid ""
"server.name=localhost\n"
"server.port=8080\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.7/guides/config-mappings.adoc:158
#, no-wrap
msgid "`@WithParentName`"
msgstr "`@WithParentName`"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:162
msgid "The `@WithParent` annotation allows to configurations mapping to inherit its container name, simplifying the configuration property name required to match the mapping:"
msgstr "`@WithParent` アノテーションにより、設定のマッピングがそのコンテナ名を継承するようになり、マッピングに合わせて必要な設定プロパティ名が簡素化されます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:168
#, no-wrap
msgid ""
"interface Server {\n"
"    @WithParentName\n"
"    ServerHostAndPort hostAndPort();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:172
#, no-wrap
msgid ""
"    @WithParentName\n"
"    ServerInfo info();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:175
#, no-wrap
msgid ""
"interface ServerHostAndPort {\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:182
#, no-wrap
msgid ""
"interface ServerInfo {\n"
"    String name();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:190
#, no-wrap
msgid ""
"server.host=localhost\n"
"server.port=8080\n"
"server.name=konoha\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:195
msgid "Without the `@WithParentName` the method `name()` requires the configuration property `server.info.name`. Because we use `@WithParentName`, the `info()` mapping will inherit the parent name from `Server` and `name()` maps to `server.name` instead."
msgstr "`@WithParentName` を使用しない場合、メソッド `name()` は設定プロパティ `server.info.name` を必要とします。 `@WithParentName` を使用しているため、 `info()` のマッピングは `Server` から親の名前を継承し、 `name()` は代わりに `server.name` にマッピングします。"

#. type: Title ====
#: upstream/_versions/2.7/guides/config-mappings.adoc:196
#, no-wrap
msgid "NamingStrategy"
msgstr "ネーミング戦略"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:199
msgid "Method names in camelCase map to kebab-case property names:"
msgstr "キャメルケースのメソッド名は、ケバブケースのプロパティ名にマッピングされます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:205
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    String theHost();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:208
#: upstream/_versions/2.7/guides/config-mappings.adoc:227
#, no-wrap
msgid ""
"    int thePort();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:215
#, no-wrap
msgid ""
"server.the-host=localhost\n"
"server.the-port=8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:218
msgid "The mapping strategy can be adjusted by setting `namingStrategy` value in the `@ConfigMapping` annotation:"
msgstr "マッピング戦略は、 `@ConfigMapping` のアノテーションで `namingStrategy` の値を設定することで調整できます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:224
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\", namingStrategy = ConfigMapping.NamingStrategy.VERBATIM)\n"
"public interface ServerVerbatimNamingStrategy {\n"
"    String theHost();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:234
#, no-wrap
msgid ""
"server.theHost=localhost\n"
"server.thePort=8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:237
msgid "The `@ConfigMapping` annotation support the following naming stategies:"
msgstr "`@ConfigMapping` アノテーションは、以下のネーミング戦略に対応しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:239
msgid "`KEBAB_CASE` (default) - The method name is derived by replacing case changes with a dash to map the configuration property."
msgstr "`KEBAB_CASE` （デフォルト） - メソッド名は、設定プロパティをマッピングするために、ケースの変更をダッシュに置き換えて導き出されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:240
msgid "`VERBATIM` - The method name is used as is to map the configuration property."
msgstr "`VERBATIM` - メソッド名は、設定プロパティをマッピングするためにそのまま使用されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:241
msgid "`SNAKE_CASE` - The method name is derived by replacing case changes with an underscore to map the configuration property."
msgstr "`SNAKE_CASE` - メソッド名は、設定プロパティをマッピングするためにケースの変更をアンダースコアで置き換えて導き出されます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:242
#, no-wrap
msgid "Conversions"
msgstr "変換"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:245
msgid "A config mapping class support automatic conversions of all types available for conversion in `Config`:"
msgstr "設定マッピングクラスは、 `Config` で変換可能なすべてのタイプの自動変換をサポートしています。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:252
#, no-wrap
msgid ""
"@ConfigMapping\n"
"public interface SomeTypes {\n"
"    @WithName(\"int\")\n"
"    int intPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:255
#, no-wrap
msgid ""
"    @WithName(\"int\")\n"
"    Integer intWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:258
#, no-wrap
msgid ""
"    @WithName(\"long\")\n"
"    long longPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:261
#, no-wrap
msgid ""
"    @WithName(\"long\")\n"
"    Long longWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:264
#, no-wrap
msgid ""
"    @WithName(\"float\")\n"
"    float floatPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:267
#, no-wrap
msgid ""
"    @WithName(\"float\")\n"
"    Float floatWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:270
#, no-wrap
msgid ""
"    @WithName(\"double\")\n"
"    double doublePrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:273
#, no-wrap
msgid ""
"    @WithName(\"double\")\n"
"    Double doubleWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:276
#, no-wrap
msgid ""
"    @WithName(\"char\")\n"
"    char charPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:279
#, no-wrap
msgid ""
"    @WithName(\"char\")\n"
"    Character charWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:282
#, no-wrap
msgid ""
"    @WithName(\"boolean\")\n"
"    boolean booleanPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:286
#, no-wrap
msgid ""
"    @WithName(\"boolean\")\n"
"    Boolean booleanWrapper();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:297
#, no-wrap
msgid ""
"int=9\n"
"long=9999999999\n"
"float=99.9\n"
"double=99.99\n"
"char=c\n"
"boolean=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:300
msgid "This is also valid for `Optional` and friends:"
msgstr "これは `Optional` と friends にも有効です。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:306
#, no-wrap
msgid ""
"@ConfigMapping\n"
"public interface Optionals {\n"
"    Optional<Server> server();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:308
#, no-wrap
msgid "    Optional<String> optional();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:311
#, no-wrap
msgid ""
"    @WithName(\"optional.int\")\n"
"    OptionalInt optionalInt();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:314
#, no-wrap
msgid ""
"    interface Server {\n"
"        String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:318
#, no-wrap
msgid ""
"        int port();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:321
msgid "In this case, the mapping won't fail if there are not configuration properties to match the mapping."
msgstr "この場合、マッピングにマッチする設定プロパティがなければ、マッピングは失敗しません。"

#. type: Title ====
#: upstream/_versions/2.7/guides/config-mappings.adoc:322
#, no-wrap
msgid "`@WithConverter`"
msgstr "`@WithConverter`"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:325
msgid "The `@WithConverter` annotation provides a way to set a `Converter` to use in a specific mapping:"
msgstr "`@WithConverter` アノテーションは、特定のマッピングで使用する `Converter` を設定する方法を提供します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:333
#, no-wrap
msgid ""
"@ConfigMapping\n"
"public interface Converters {\n"
"    @WithConverter(FooBarConverter.class)\n"
"    String foo();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:340
#, no-wrap
msgid ""
"public static class FooBarConverter implements Converter<String> {\n"
"    @Override\n"
"    public String convert(final String value) {\n"
"        return \"bar\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:346
#, no-wrap
msgid "foo=foo\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:349
msgid "A call to `Converters.foo()` results in the value `bar`."
msgstr "`Converters.foo()` を呼び出すと、 `bar` という値が得られます。"

#. type: Title ====
#: upstream/_versions/2.7/guides/config-mappings.adoc:350
#, no-wrap
msgid "Collections"
msgstr "Collections"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:353
msgid "A config mapping is also able to map collections types `List` and `Set`:"
msgstr "また、設定マッピングは、コレクションタイプ `List` と `Set` をマッピングすることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:359
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"public interface ServerCollections {\n"
"    Set<Environment> environments();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:362
#, no-wrap
msgid ""
"    interface Environment {\n"
"        String name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:364
#, no-wrap
msgid "        List<App> apps();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:367
#, no-wrap
msgid ""
"        interface App {\n"
"            String name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:369
#, no-wrap
msgid "            List<String> services();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:374
#, no-wrap
msgid ""
"            Optional<List<String>> databases();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:385
#, no-wrap
msgid ""
"server.environments[0].name=dev\n"
"server.environments[0].apps[0].name=rest\n"
"server.environments[0].apps[0].services=bookstore,registration\n"
"server.environments[0].apps[0].databases=pg,h2\n"
"server.environments[0].apps[1].name=batch\n"
"server.environments[0].apps[1].services=stock,warehouse\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:390
msgid "The `List` or `Set` mappings can use xref:config-reference.adoc#indexed-properties[indexed properties] to map configuration values in mapping groups. For collection with simple element types like `String`, their configuration value is a comma separated string."
msgstr "`List` や `Set` のマッピングでは、 link:config-reference.html#indexed-properties[インデックス付きのプロパティ]を使用して、マッピンググループの設定値をマッピングすることができます。 `String` のような単純な要素タイプを持つコレクションの場合、その設定値はコンマ区切りの文字列です。"

#. type: Title ====
#: upstream/_versions/2.7/guides/config-mappings.adoc:391
#, no-wrap
msgid "Maps"
msgstr "マップ"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:394
msgid "A config mapping is also able to map a `Map`:"
msgstr "また、設定マッピングは、 `Map` をマッピングすることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:405
#, no-wrap
msgid ""
"    Map<String, String> form();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:415
#, no-wrap
msgid ""
"server.host=localhost\n"
"server.port=8080\n"
"server.form.login-page=login.html\n"
"server.form.error-page=error.html\n"
"server.form.landing-page=index.html\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:419
msgid "The configuration property needs to specify an additional name to act as the key. In this case the `form()` `Map` will contain three elements with the keys `login-page`, `error-page` and `landing-page`."
msgstr "設定プロパティでは、キーとして機能する追加の名前を指定する必要があります。この場合、 `form()` `Map` には、 `login-page`, `error-page`, `landing-page` というキーを持つ3つの要素が含まれます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:420
#, no-wrap
msgid "Defaults"
msgstr "デフォルト"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:424
msgid "The `@WithDefault` annotation allows to set a default property into a mapping (and prevent and error if the configuration value is not available in any `ConfigSource`):"
msgstr "`@WithDefault` アノテーションにより、デフォルトのプロパティをマッピングに設定することができます（また、設定値がどの `ConfigSource` においても利用できない場合はエラーになりません）。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:430
#, no-wrap
msgid ""
"public interface Defaults {\n"
"    @WithDefault(\"foo\")\n"
"    String foo();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:434
#, no-wrap
msgid ""
"    @WithDefault(\"bar\")\n"
"    String bar();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:438
msgid "No configuration properties required. The `Defaults.foo()` will return the value `foo` and `Defaults.bar()` will return thevalue `bar`."
msgstr "設定プロパティは必要ありません。 `Defaults.foo()` は値 `foo` を、 `Defaults.bar()` は値 `bar` を返します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:439
#, no-wrap
msgid "Validation"
msgstr "バリデーション"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:443
msgid "A config mapping may combine annotations from https://beanvalidation.org[Bean Validation] to validate configuration values:"
msgstr "設定マッピングは、設定値を検証するために link:https://beanvalidation.org[Bean Validation]からのアノテーションを組み合わせることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:450
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    @Size(min = 2, max = 20)\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:454
#, no-wrap
msgid ""
"    @Max(10000)\n"
"    int port();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:458
msgid "For validation to work, the `quarkus-hibernate-validator` extension is required, and it is performed automatically."
msgstr "検証が機能するためには、 `quarkus-hibernate-validator` のエクステンションが必要で、自動的に実行されます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:459
#, no-wrap
msgid "Mocking"
msgstr "モック"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:463
msgid "A mapping interface implementation is not a proxy, so it cannot be mocked directly with `@InjectMock` like other CDI beans. One trick is to make it proxyable with a producer method:"
msgstr "マッピングインターフェースの実装はプロキシではありませんので、他のCDI Beanのように `@InjectMock` で直接モックすることはできません。一つの方法として、プロデューサ・メソッドでプロキシ可能にすることがあります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:469
#, no-wrap
msgid ""
"public class ServerMockProducer {\n"
"    @Inject\n"
"    Config config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:477
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    @io.quarkus.test.Mock\n"
"    Server server() {\n"
"        return config.unwrap(SmallRyeConfig.class).getConfigMapping(Server.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:480
msgid "The `Server` can be injected as a mock into a Quarkus test class with `@InjectMock`:"
msgstr "`Server` は、モックとして `@InjectMock` でQuarkusのテストクラスに注入することができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:487
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class ServerMockTest {\n"
"    @InjectMock\n"
"    Server server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:494
#, no-wrap
msgid ""
"    @Test\n"
"    void localhost() {\n"
"        Mockito.when(server.host()).thenReturn(\"localhost\");\n"
"        assertEquals(\"localhost\", server.host());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:497
msgid "The mock is just an empty shell without any actual configuration values."
msgstr "モックは、実際の設定値を持たない空のシェルに過ぎません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:500
msgid "If the goal is to only mock certain configuration values and retain the original configuration, the mocking instance requires a spy:"
msgstr "特定の設定値のみをモックし、元の設定を保持することが目的の場合、モックインスタンスにはスパイが必要となります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:507
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"app\")\n"
"public interface AppConfig {\n"
"    @WithDefault(\"app\")\n"
"    String name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:509
#, no-wrap
msgid "    Info info();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:517
#, no-wrap
msgid ""
"    interface Info {\n"
"        @WithDefault(\"alias\")\n"
"        String alias();\n"
"        @WithDefault(\"10\")\n"
"        Integer count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:521
#, no-wrap
msgid ""
"public static class AppConfigProducer {\n"
"    @Inject\n"
"    Config config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:533
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    @io.quarkus.test.Mock\n"
"    AppConfig appConfig() {\n"
"        AppConfig appConfig = config.unwrap(SmallRyeConfig.class).getConfigMapping(AppConfig.class);\n"
"        AppConfig appConfigSpy = Mockito.spy(appConfig);\n"
"        AppConfig.Info infoSpy = Mockito.spy(appConfig.info());\n"
"        Mockito.when(appConfigSpy.info()).thenReturn(infoSpy);\n"
"        return appConfigSpy;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:536
msgid "The `AppConfig` can be injected as a mock into a Quarkus test class with `@Inject`:"
msgstr "`AppConfig` は、モックとして `@Inject` でQuarkusのテストクラスに注入することができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:543
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class AppConfigTest {\n"
"    @Inject\n"
"    AppConfig appConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:548
#, no-wrap
msgid ""
"    @Test\n"
"    void localhost() {\n"
"        Mockito.when(appConfig.name()).thenReturn(\"mocked-app\");\n"
"        assertEquals(\"mocked-app\", server.host());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:553
#, no-wrap
msgid ""
"        Mockito.when(appConfig.info().alias()).thenReturn(\"mocked-alias\");\n"
"        assertEquals(\"mocked-alias\", server.info().alias());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:556
msgid "Nested elements need to be spied individually by Mockito."
msgstr "ネストされた要素は、Mockitoが個別にスパイする必要があります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/config-mappings.adoc:558
#, no-wrap
msgid "[.line-through]#`@ConfigProperties`# (Deprecated)"
msgstr "[.line-through]#`@ConfigProperties`# (Deprecated)"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:561
msgid "This feature will be removed soon, please update your code base and use `@ConfigMapping` instead."
msgstr "この機能はまもなく削除される予定です。コードベースを更新し、代わりに `@ConfigMapping` を使用してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:564
msgid "The `@io.quarkus.arc.config.ConfigProperties` annotation is able to group multiple related configuration values in its own class:"
msgstr "`@io.quarkus.arc.config.ConfigProperties` アノテーションは、複数の関連する設定値を独自のクラスにまとめることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:568
#: upstream/_versions/2.7/guides/config-mappings.adoc:622
#, no-wrap
msgid "package org.acme.config;\n"
msgstr "package org.acme.config;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:571
#, no-wrap
msgid ""
"import io.quarkus.arc.config.ConfigProperties;\n"
"import java.util.Optional;\n"
msgstr ""
"import io.quarkus.arc.config.ConfigProperties;\n"
"import java.util.Optional;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:574
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\") <1>\n"
"public class GreetingConfiguration {\n"
msgstr ""
"@ConfigProperties(prefix = \"greeting\") <1>\n"
"public class GreetingConfiguration {\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:578
#, no-wrap
msgid ""
"    private String message;\n"
"    private String suffix = \"!\"; <2>\n"
"    private Optional<String> name;\n"
msgstr ""
"    private String message;\n"
"    private String suffix = \"!\"; <2>\n"
"    private Optional<String> name;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:582
#, no-wrap
msgid ""
"    public String getMessage() {\n"
"        return message;\n"
"    }\n"
msgstr ""
"    public String getMessage() {\n"
"        return message;\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:586
#, no-wrap
msgid ""
"    public void setMessage(String message) {\n"
"        this.message = message;\n"
"    }\n"
msgstr ""
"    public void setMessage(String message) {\n"
"        this.message = message;\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:590
#, no-wrap
msgid ""
"    public String getSuffix() {\n"
"        return suffix;\n"
"    }\n"
msgstr ""
"    public String getSuffix() {\n"
"        return suffix;\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:594
#, no-wrap
msgid ""
"    public void setSuffix(String suffix) {\n"
"        this.suffix = suffix;\n"
"    }\n"
msgstr ""
"    public void setSuffix(String suffix) {\n"
"        this.suffix = suffix;\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:598
#, no-wrap
msgid ""
"    public Optional<String> getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""
"    public Optional<String> getName() {\n"
"        return name;\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:603
#, no-wrap
msgid ""
"    public void setName(Optional<String> name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""
"    public void setName(Optional<String> name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:607
msgid "`prefix` is optional. If not set then the prefix to be used will be determined by the class name. In this case it would still be `greeting` (since the `Configuration` suffix is removed). If the class were named `GreetingExtraConfiguration` then the resulting default prefix would be `greeting-extra`."
msgstr "`prefix` は任意です。設定していない場合は、使用される接頭辞はクラス名によって決まります。この場合も (`Configuration` の接尾辞は削除されているため) `greeting` となります。クラス名が `GreetingExtraConfiguration` の場合は、デフォルトの接頭辞が `greeting-extra` となります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:608
msgid "`!` will be the default value if `greeting.suffix` is not set."
msgstr "`!` は、`greeting.suffix` が設定されていない場合のデフォルト値になります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:610
msgid "Inject the `GreetingResource` with CDI `@Inject`:"
msgstr "CDI `@Inject` で `GreetingResource` を注入してください。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:615
#, no-wrap
msgid ""
"@Inject\n"
"GreetingConfiguration greetingConfiguration;\n"
msgstr ""
"@Inject\n"
"GreetingConfiguration greetingConfiguration;\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:618
msgid "Another alternative style provided by Quarkus is to create `GreetingConfiguration` as an interface:"
msgstr "Quarkusが提供するもう一つの代替スタイルは、インターフェイスとして `GreetingConfiguration` を作成することです。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:626
#, no-wrap
msgid ""
"import io.quarkus.arc.config.ConfigProperties;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import java.util.Optional;\n"
msgstr ""
"import io.quarkus.arc.config.ConfigProperties;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import java.util.Optional;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:629
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\")\n"
"public interface GreetingConfiguration {\n"
msgstr ""
"@ConfigProperties(prefix = \"greeting\")\n"
"public interface GreetingConfiguration {\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:632
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"message\") <1>\n"
"    String message();\n"
msgstr ""
"    @ConfigProperty(name = \"message\") <1>\n"
"    String message();\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:635
#, no-wrap
msgid ""
"    @ConfigProperty(defaultValue = \"!\")\n"
"    String getSuffix(); <2>\n"
msgstr ""
"    @ConfigProperty(defaultValue = \"!\")\n"
"    String getSuffix(); <2>\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:638
#, no-wrap
msgid ""
"    Optional<String> getName(); <3>\n"
"}\n"
msgstr ""
"    Optional<String> getName(); <3>\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:641
msgid "The `@ConfigProperty` annotation is needed because the name of the configuration property that the method corresponds does not follow the getter method naming conventions."
msgstr "`@ConfigProperty` アノテーションが必要なのは、メソッドが対応する設定プロパティの名前が、ゲッターメソッドの命名規則に従っていないからです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:642
msgid "In this case since `name` is not set, the corresponding property will be `greeting.suffix`."
msgstr "この場合、 `name` が設定されていないので、対応するプロパティは `greeting.suffix` となります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:644
msgid "It is unnecessary to specify the `@ConfigProperty` annotation because the method name follows the getter method naming conventions (`greeting.name` being the corresponding property) and no default value is required."
msgstr "メソッド名はゲッターメソッドの命名規則（ `greeting.name` が対応するプロパティ）に従っており、デフォルト値は必要ないため、 `@ConfigProperty` アノテーションを指定する必要はありません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:648
msgid "When using `@ConfigProperties` on a class or an interface, if the value of one of its fields is not provided, the application startup will fail, and a `javax.enterprise.inject.spi.DeploymentException` will be thrown. This does not apply to `Optional` fields and fields with a default value."
msgstr "クラスやインターフェイスで `@ConfigProperties` を使用する場合、そのフィールドの 1 つの値が提供されていないと、アプリケーションの起動に失敗し、 `javax.enterprise.inject.spi.DeploymentException` がスローされます。これは、 `Optional` フィールドとデフォルト値を持つフィールドには適用されません。"

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:649
#, no-wrap
msgid "Additional notes on @ConfigProperties"
msgstr "@ConfigProperties に関する追加の注意事項"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:653
msgid "When using a regular class annotated with `@ConfigProperties` the class doesn't necessarily have to declare getters and setters. Having simple public non-final fields is valid as well."
msgstr "`@ConfigProperties` でアノテーションされた通常のクラスを使用する場合、クラスは必ずしも getter および setter を宣言する必要はありません。単純でパブリックな確定的でないフィールドを持つことも有効です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:656
msgid "Furthermore, the configuration classes support nested object configuration. Suppose there was a need to have an extra layer of greeting configuration named `content` that would contain a few fields:"
msgstr "さらに、設定クラスはネストされたオブジェクト設定をサポートしています。例えば、 `content` という名前のグリーティングの設定を追加で用意する必要があり、その中にはいくつかのフィールドが含まれているとします。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:661
#: upstream/_versions/2.7/guides/config-mappings.adoc:692
#: upstream/_versions/2.7/guides/config-mappings.adoc:712
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\")\n"
"public class GreetingConfiguration {\n"
msgstr ""
"@ConfigProperties(prefix = \"greeting\")\n"
"public class GreetingConfiguration {\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:666
#, no-wrap
msgid ""
"    public String message;\n"
"    public String suffix = \"!\";\n"
"    public Optional<String> name;\n"
"    public ContentConfig content; <1>\n"
msgstr ""
"    public String message;\n"
"    public String suffix = \"!\";\n"
"    public Optional<String> name;\n"
"    public ContentConfig content; <1>\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:672
#, no-wrap
msgid ""
"    public static class ContentConfig {\n"
"        public Integer prizeAmount;\n"
"        public List<String> recipients;\n"
"    }\n"
"}\n"
msgstr ""
"    public static class ContentConfig {\n"
"        public Integer prizeAmount;\n"
"        public List<String> recipients;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:674
msgid "The name of the field (not the class name) will determine the name of the properties that are bound to the object."
msgstr "フィールドの名前 (クラス名ではありません) は、オブジェクトにバインドされるプロパティーの名前を決定します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:676
msgid "Setting the properties would occur in the normal manner:"
msgstr "プロパティの設定は通常の方法で行います。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:684
#, no-wrap
msgid ""
"greeting.message = hello\n"
"greeting.name = quarkus\n"
"greeting.content.prize-amount=10\n"
"greeting.content.recipients=Jane,John\n"
msgstr ""
"greeting.message = hello\n"
"greeting.name = quarkus\n"
"greeting.content.prize-amount=10\n"
"greeting.content.recipients=Jane,John\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:687
msgid "Furthermore, classes annotated with `@ConfigProperties` can be annotated with Bean Validation annotations:"
msgstr "さらに、 `@ConfigProperties` でアノテーションされたクラスには、Bean Validationアノテーションを付けることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:696
#: upstream/_versions/2.7/guides/config-mappings.adoc:716
#, no-wrap
msgid ""
"    @Size(min = 20)\n"
"    public String message;\n"
"    public String suffix = \"!\";\n"
msgstr ""
"    @Size(min = 20)\n"
"    public String message;\n"
"    public String suffix = \"!\";\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:698
#: upstream/_versions/2.7/guides/config-mappings.adoc:718
#: upstream/_versions/2.7/guides/config-mappings.adoc:732
#: upstream/_versions/2.7/guides/config-mappings.adoc:770
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:701
msgid "For validation to work, the `quarkus-hibernate-validator` extension is required."
msgstr "検証が機能するためには、 `quarkus-hibernate-validator` のエクステンションが必要です。"

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:702
#, no-wrap
msgid "Using same ConfigProperties with different prefixes"
msgstr "同じ ConfigProperties で異なる接頭辞を使用"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:707
msgid "Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation. If `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix:"
msgstr "また、Quarkusでは、 `io.quarkus.arc.config.@ConfigPrefix` アノテーションを使用して、同じ `@ConfigProperties` オブジェクトを注入ポイントごとに異なるプレフィックスで使用することもサポートしています。上記の `GreetingConfiguration` が、 `greeting` のプレフィックスと `other` のプレフィックスの両方に使用される必要がある場合は以下のようにします。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:724
#: upstream/_versions/2.7/guides/config-mappings.adoc:765
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SomeBean {\n"
msgstr ""
"@ApplicationScoped\n"
"public class SomeBean {\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:727
#, no-wrap
msgid ""
"    @Inject <1>\n"
"    GreetingConfiguration greetingConfiguration;\n"
msgstr ""
"    @Inject <1>\n"
"    GreetingConfiguration greetingConfiguration;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:730
#, no-wrap
msgid ""
"    @ConfigPrefix(\"other\") <2>\n"
"    GreetingConfiguration otherConfiguration;\n"
msgstr ""
"    @ConfigPrefix(\"other\") <2>\n"
"    GreetingConfiguration otherConfiguration;\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:735
msgid "At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`."
msgstr "この注入ポイントでは、`greetingConfiguration` は `@ConfigProperties` で定義されている `greeting` の接頭辞を使用します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:737
msgid "At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix` instead of the `greeting` prefix. Notice that in this case `@Inject` is not required."
msgstr "この注入ポイントでは、`otherConfiguration` は、`greeting` の接頭辞の代わりに `@ConfigPrefix` から `other` の接頭辞を使用します。この場合、`@Inject` は必須ではないことに注意してください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/config-mappings.adoc:738
#, no-wrap
msgid "Combining ConfigProperties with build time conditions"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:743
msgid "Quarkus allows you to define conditions evaluated at build time (`@IfBuildProfile`, `@UnlessBuildProfile`, `@IfBuildProperty` and `@UnlessBuildProperty`) to enable or not the annotations `@ConfigProperties` and `@ConfigPrefix` which gives you a very flexible way to map your configuration."
msgstr "Quarkusでは、ビルド時に評価される条件（ `@IfBuildProfile` 、 `@UnlessBuildProfile` 、 `@IfBuildProperty` 、 `@UnlessBuildProperty` ）を定義して、アノテーション `@ConfigProperties` と `@ConfigPrefix` を有効にしたり、無効にしたりすることができ、構成を非常に柔軟にマッピングすることができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:747
msgid "Let's assume that the configuration of a service is mapped thanks to a `@ConfigProperties` and you don't need this part of the configuration for your tests as it will be mocked, in that case you can define a build time condition like in the next example:"
msgstr "サービスの設定が `@ConfigProperties` にマッピングされていて、テストではこの設定部分はモックされるので必要ないとします。その場合は、次の例のようにビルド時の条件を定義します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:749
msgid "`ServiceConfiguration.java`"
msgstr "`ServiceConfiguration.java`"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:757
#, no-wrap
msgid ""
"@UnlessBuildProfile(\"test\") <1>\n"
"@ConfigProperties\n"
"public class ServiceConfiguration {\n"
"    public String user;\n"
"    public String password;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:759
msgid "The annotation `@ConfigProperties` is considered if and only if the active profile is not `test`."
msgstr "アノテーション `@ConfigProperties` は、アクティブなプロファイルが `test` でない場合にのみ考慮されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:761
msgid "`SomeBean.java`"
msgstr "`SomeBean.java`"

#. type: delimited block -
#: upstream/_versions/2.7/guides/config-mappings.adoc:768
#, no-wrap
msgid ""
"    @Inject\n"
"    Instance<ServiceConfiguration> serviceConfiguration; <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/config-mappings.adoc:772
msgid "As the configuration of the service could be missing, we need to use `Instance<ServiceConfiguration>` as type at the injection point."
msgstr "サービス設定が欠落している可能性があるため、インジェクションポイントで `Instance<ServiceConfiguration>` を型として使用する必要があります。"
