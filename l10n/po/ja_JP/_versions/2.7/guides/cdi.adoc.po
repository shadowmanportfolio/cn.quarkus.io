# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-07 16:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/cdi.adoc:6
#, no-wrap
msgid "Introduction to Contexts and Dependency Injection"
msgstr "コンテキストと依存性注入(CDI)の紹介"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:15
msgid "In this guide we're going to describe the basic principles of the Quarkus programming model that is based on the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification."
msgstr "このガイドでは、 http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=_blank]仕様に基づいたQuarkusプログラミングモデルの基本原理について説明します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:16
#, no-wrap
msgid "OK. Let's start simple. What is a bean?"
msgstr "OK、簡単なことから始めましょう。Beanとは何でしょうか?"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:19
msgid "Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors."
msgstr "Beanは _コンテナーで管理された_ オブジェクトです。依存性の注入、ライフサイクルコールバック、インターセプターなどの基本的なサービスのセットをサポートしています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:20
#, no-wrap
msgid "Wait a minute. What does \"container-managed\" mean?"
msgstr "ちょっと待ってください。「コンテナーで管理された」とはどういう意味ですか?"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:26
msgid "Simply put, you don't control the lifecycle of the object instance directly.  Instead, you can affect the lifecycle through declarative means, such as annotations, configuration, etc.  The container is the _environment_ where your application runs.  It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans."
msgstr "簡単に言えば、オブジェクトインスタンスのライフサイクルを直接制御することはできません。その代わりに、アノテーションや設定などの宣言的な手段でライフサイクルに影響を与えることができます。コンテナーはアプリケーションが動作する _環境_ です。コンテナーは、Beanのインスタンスを作成したり破棄したり、指定されたコンテキストにインスタンスを関連付けたり、他のBeanに注入したりします。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:27
#, no-wrap
msgid "What is it good for?"
msgstr "何に使うと適切ですか?"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:30
msgid "An application developer can focus on the business logic rather than finding out \"where and how\" to obtain a fully initialized component with all of its dependencies."
msgstr "アプリケーション開発者は、「どこで、どのように」ではなく、ビジネスロジックに集中して、すべての依存関係を持つ完全に初期化されたコンポーネントを得ることができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:32
msgid "You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC."
msgstr "_制御の反転_ (Inversion of Control, IoC )というプログラミングの原理を聞いたことがあると思います。依存性注入はIoCの実装技術の一つです。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:33
#, no-wrap
msgid "What does a bean look like?"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:37
msgid "There are several kinds of beans.  The most common ones are class-based beans:"
msgstr "Beanにはいくつかの種類があります。一番多いのは、クラスベースのBeanです。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi.adoc:38
#, no-wrap
msgid "Simple Bean Example"
msgstr "シンプルなBeanの例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:44
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import org.eclipse.microprofile.metrics.annotation.Counted;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:47
#, no-wrap
msgid ""
"@ApplicationScoped <1>\n"
"public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:50
#, no-wrap
msgid ""
"    @Inject\n"
"    Dictionary dictionary; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:56
#, no-wrap
msgid ""
"    @Counted  <3>\n"
"    String translate(String sentence) { \n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:58
msgid "This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all other beans that inject `Translator`."
msgstr "これはスコープアノテーションです。これはコンテナーに、Beanのインスタンスをどのコンテキストに関連付けるかを伝えます。この特定のケースでは、 *単一のBeanインスタンス* がアプリケーション用に作成され、 `Translator`の注入を行う他の全てのBeanによって使用されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:59
msgid "This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails."
msgstr "これはフィールド注入ポイントです。 `Translator`  が `Dictionary`  Beanに依存していることをコンテナーに伝えます。マッチするBeanがない場合、ビルドは失敗します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:60
msgid "This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics. We will talk about <<interceptors,interceptors>> later."
msgstr "これはインターセプター結合アノテーションです。この場合、アノテーションは MicroProfile Metrics から来ています。関連するインターセプターは呼び出しをインターセプトし、関連するメトリクスを更新します。 <<interceptors,インターセプター>>については後述します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:62
#, no-wrap
msgid "Nice. How does the dependency resolution work? I see no names or identifiers."
msgstr "いいですね。依存関係の解決方法はどのように動作しますか?名前も識別子も見当たりません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:71
msgid "That's a good question.  In CDI the process of matching a bean to an injection point is *type-safe*.  Each bean declares a set of bean types.  In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.  Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.  We'll talk about qualifiers later.  For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`."
msgstr "良い質問ですね。CDIでは、Beanをインジェクションポイントにマッチングするプロセスは *タイプセーフ* です。各Beanは、Beanタイプのセットを宣言します。上の例では、 `Translator` Beanには、 `Translator` と `java.lang.Object` の 2 つのBeanタイプがあります。その後、Beanが _必要な型_ にマッチするBean型を持ち、 _必要な_ すべての _修飾子を_ 持っている場合、Beanはインジェクションポイントに代入可能です。この後、修飾子について説明します。今のところ、上記のBeanが `Translator` と `java.lang.Object` のタイプのインジェクションポイントに代入可能であることを知っていれば十分です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:72
#, no-wrap
msgid "Hm, wait a minute. What happens if multiple beans declare the same type?"
msgstr "ふむ、ちょっと待ってください。複数のBeanが同じ型を宣言した場合はどうなるのでしょうか?"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:78
msgid "There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.  If none is assignable the build fails with `UnsatisfiedResolutionException`.  If multiple are assignable the build fails with `AmbiguousResolutionException`.  This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point."
msgstr "シンプルなルールがあります: *正確に1つのBeanがインジェクションポイントに割り当て可能でなければならず、そうでなければビルドは失敗します。* 割り当て可能なBeanがない場合、ビルドは `UnsatisfiedResolutionException` で失敗します。複数のBeanが割り当て可能な場合、ビルドは `AmbiguousResolutionException` で失敗します。これは非常に便利です。コンテナーがどのインジェクションポイントに対しても明確な依存関係を見つけることができない場合、アプリケーションは早く失敗するからです。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/cdi.adoc:82
msgid "Your can use programmatic lookup via `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:"
msgstr "`javax.enterprise.inject.Instance`  を通じてプログラム的なルックアップを使用して、実行時に曖昧さを解決したり、指定された型を実装しているすべてのBeanを反復処理したりすることができます:"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:86
#, no-wrap
msgid "public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:89
#, no-wrap
msgid ""
"    @Inject\n"
"    Instance<Dictionary> dictionaries; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:96
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      for (Dictionary dict : dictionaries) { <2>\n"
"         // ...\n"
"      }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:98
msgid "This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type."
msgstr "このインジェクションポイントは、 `Dictionary`  型を実装した複数のBeanがあっても、曖昧な依存関係にはなりません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:99
msgid "`javax.enterprise.inject.Instance` extends `Iterable`."
msgstr "`javax.enterprise.inject.Instance` は `Iterable` を継承します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:101
#, no-wrap
msgid "Can I use setter and constructor injection?"
msgstr "セッターやコンストラクタのインジェクションは使えますか?"

#. type: delimited block =
#: upstream/_versions/2.7/guides/cdi.adoc:106
msgid "Yes, you can.  In fact, in CDI the \"setter injection\" is superseded by more powerful https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#initializer_methods[initializer methods, window=\"_blank\"].  Initializers may accept multiple parameters and don't have to follow the JavaBean naming conventions."
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/cdi.adoc:107
#, no-wrap
msgid "Initialized and Constructor Injection Example"
msgstr "初期化とコンストラクタのインジェクション例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:112
#: upstream/_versions/2.7/guides/cdi.adoc:326
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:114
#, no-wrap
msgid "    private final TranslatorHelper helper;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:118
#, no-wrap
msgid ""
"    Translator(TranslatorHelper helper) { <1>\n"
"       this.helper = helper;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:124
#, no-wrap
msgid ""
"    @Inject <2>\n"
"    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n"
"      / ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:129
msgid "This is a constructor injection.  In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor and the bean constructor must be annotated with `@Inject`.  However, in Quarkus we detect the absence of no-args constructor and \"add\" it directly in the bytecode.  It's also not necessary to add `@Inject` if there is only one constructor present."
msgstr "これはコンストラクタのインジェクションです。実際には、このコードは通常のCDI実装では動作しません。通常のスコープを持つBeanは常にno-argsコンストラクタを宣言しなければならず、Beanのコンストラクタは `@Inject`  でアノテーションされなければなりません。しかし、Quarkusでは、no-argsコンストラクタが存在しないことを検出し、バイトコードに直接「追加」します。また、コンストラクタが1つしかない場合は、 `@Inject`  を追加する必要はありません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:130
msgid "An initializer method must be annotated with `@Inject`."
msgstr "イニシャライザメソッドには `@Inject`  をアノテーションしなければなりません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:131
msgid "An initializer may accept multiple parameters - each one is an injection point."
msgstr "イニシャライザは複数のパラメーターを受け付けることができ、それぞれがインジェクションポイントとなります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:132
#, no-wrap
msgid "You talked about some qualifiers?"
msgstr "修飾子の話をしましたか?"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:137
msgid "https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.  As we already said a bean is assignable to an injection point if it has all the required qualifiers.  If you declare no qualifier at an injection point the `@Default` qualifier is assumed."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:139
msgid "A qualifier type is a Java annotation defined as `@Retention(RUNTIME)` and annotated with the `@javax.inject.Qualifier` meta-annotation:"
msgstr "Qualifier型は、 `@Retention(RUNTIME)`  として定義された Java アノテーションで、 `@javax.inject.Qualifier`  メタアノテーションでアノテーションされています。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi.adoc:140
#, no-wrap
msgid "Qualifier Example"
msgstr "修飾子の例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:147
#, no-wrap
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, FIELD, PARAMETER, TYPE})\n"
"public @interface Superior {}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:150
msgid "The qualifiers of a bean are declared by annotating the bean class or producer method or field with the qualifier types:"
msgstr "Beanの修飾子は、Beanクラスやプロデューサのメソッドやフィールドに修飾子タイプをアノテーションすることで宣言されます。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi.adoc:151
#, no-wrap
msgid "Bean With Custom Qualifier Example"
msgstr "カスタム修飾子を持つ Bean の例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:157
#, no-wrap
msgid ""
"@Superior <1>\n"
"@ApplicationScoped\n"
"public class SuperiorTranslator extends Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:162
#: upstream/_versions/2.7/guides/cdi.adoc:230
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:164
msgid "`@Superior` is a https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:168
msgid "This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not to `@Inject Translator`.  The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.  And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable."
msgstr "このBeanは `@Inject @Superior Translator`  と `@Inject @Superior SuperiorTranslator`  には割り当てられますが、 `@Inject Translator`  には割り当てられません。その理由は、 `@Inject Translator`  はタイプセーフ解決の際に自動的に `@Inject @Default Translator`  に変換されるからです。また、私たちの `SuperiorTranslator`  は `@Default`  を宣言していないので、元の `Translator`  Beanだけが代入可能です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:169
#, no-wrap
msgid "Looks good. What is the bean scope?"
msgstr "良いですね。Beanスコープとは何ですか?"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:172
msgid "The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed."
msgstr "Beanのスコープはインスタンスのライフサイクルを決定します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:174
msgid "Every bean has exactly one scope."
msgstr "すべてのBeanは、正確に1つのスコープを持っています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:175
#, no-wrap
msgid "What scopes can I actually use in my Quarkus application?"
msgstr "実際にQuarkusアプリケーションで使用できるスコープは何ですか?"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:178
msgid "You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`."
msgstr "`javax.enterprise.context.ConversationScoped` 以外の仕様で言及されているすべてのビルトインスコープを使用することができます。"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:181
#, no-wrap
msgid "Annotation"
msgstr "アノテーション"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:183
#, no-wrap
msgid ""
"Description   \n"
"//----------------------"
msgstr ""
"説明   \n"
"//----------------------"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:183
#, no-wrap
msgid "`@javax.enterprise.context.ApplicationScoped`"
msgstr "`@javax.enterprise.context.ApplicationScoped`"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:184
#, no-wrap
msgid "A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>."
msgstr "単一のBeanインスタンスがアプリケーションに使用され、すべてのインジェクションポイント間で共有されます。 link:#client_proxies[インスタンス] は遅延的に生成されます。"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:184
#, no-wrap
msgid "`@javax.inject.Singleton`"
msgstr "`@javax.inject.Singleton`"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:185
#, no-wrap
msgid "Just like `@ApplicationScoped` except that no client proxy is used. The instance is created when an injection point that resolves to a @Singleton bean is being injected."
msgstr "クライアントプロキシーを使用しないことを除いて、 `@ApplicationScoped` と同じです。インスタンスは、@Singleton Beanに解決するインジェクションポイントがインジェクションされたときに生成されます。"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:185
#, no-wrap
msgid "`@javax.enterprise.context.RequestScoped`"
msgstr "`@javax.enterprise.context.RequestScoped`"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:186
#, no-wrap
msgid "The bean instance is associated with the current _request_ (usually an HTTP request)."
msgstr "Beanインスタンスは、現在の _リクエスト_ (通常はHTTPリクエスト)に関連付けられています。"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:186
#, no-wrap
msgid "`@javax.enterprise.context.Dependent`"
msgstr "`@javax.enterprise.context.Dependent`"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:187
#, no-wrap
msgid "This is a pseudo-scope. The instances are not shared and every injection point spawns a new instance of the dependent bean. The lifecycle of dependent bean is bound to the bean injecting it - it will be created and destroyed along with the bean injecting it."
msgstr "これは疑似スコープです。インスタンスは共有されておらず、すべての注入ポイントは依存Beanの新しいインスタンスをスポーンします。依存Beanのライフサイクルは、それを注入するBeanに拘束されています。"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:187
#, no-wrap
msgid "`@javax.enterprise.context.SessionScoped`"
msgstr "`@javax.enterprise.context.SessionScoped`"

#. type: Table
#: upstream/_versions/2.7/guides/cdi.adoc:188
#, no-wrap
msgid "This scope is backed by a `javax.servlet.http.HttpSession` object. It's only available if the `quarkus-undertow` extension is used."
msgstr "このスコープは `javax.servlet.http.HttpSession` オブジェクトによってバックアップされています。 `quarkus-undertow` エクステンションを使用している場合のみ利用可能です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:191
msgid "There can be other custom scopes provided by Quarkus extensions. For example, `quarkus-narayana-jta` provides `javax.transaction.TransactionScoped`."
msgstr "Quarkusのエクステンションによって提供される他のカスタムスコープもあります。例えば、 `quarkus-narayana-jta` は `javax.transaction.TransactionScoped` を提供します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:192
#, no-wrap
msgid "`@ApplicationScoped` and `@Singleton` look very similar. Which one should I choose for my Quarkus application?"
msgstr "`@ApplicationScoped` と `@Singleton` は非常に似ているように見えます。Quarkusアプリケーションにはどれを選べばいいのでしょうか?"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:195
msgid "It depends ;-)."
msgstr "それは場合によりけりです ;-)。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:198
msgid "A `@Singleton` bean has no <<client_proxies,client proxy>> and hence an instance is _created eagerly_ when the bean is injected. By contrast, an instance of an `@ApplicationScoped` bean is _created lazily_, i.e.  when a method is invoked upon an injected instance for the first time."
msgstr "`@Singleton` Beanは link:#client_proxies[クライアントプロキシー] を持たないので、Beanがインジェクトされるとインスタンスは _熱心に(eagerly)生成され_ ます。対照的に、 `@ApplicationScoped` Beanのインスタンスは _怠惰(lazily)に生成されます。_"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:201
msgid "Furthermore, client proxies only delegate method invocations and thus you should never read/write fields of an injected `@ApplicationScoped` bean directly.  You can read/write fields of an injected `@Singleton` safely."
msgstr "さらに、クライアントプロキシーはメソッドの呼び出しを委譲するだけなので、注入された `@ApplicationScoped` Bean のフィールドを直接読み書きしてはいけません。注入された `@Singleton` のフィールドは安全に読み書きすることができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:203
msgid "`@Singleton` should have a slightly better performance because the is no indirection (no proxy that delegates to the current instance from the context)."
msgstr "`@Singleton` はインダイレクトがない(コンテキストから現在のインスタンスをデリゲートするプロキシーがない)ため、パフォーマンスが若干向上するはずです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:205
msgid "On the other hand, you cannot mock `@Singleton` beans using <<getting-started-testing.adoc#quarkus_mock,QuarkusMock>>."
msgstr "一方、 link:getting-started-testing.html#quarkus_mock[QuarkusMockを] 使って `@Singleton` Beanをモックすることはできません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:208
msgid "`@ApplicationScoped` beans can be also destroyed and recreated at runtime.  Existing injection points just work because the injected proxy delegates to the current instance."
msgstr "`@ApplicationScoped` Beanは、実行時に破棄して再作成することもできます。既存のインジェクションポイントは、インジェクションされたプロキシーが現在のインスタンスにデリゲートするので、単に機能します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:210
msgid "Therefore, we recommend to stick with `@ApplicationScoped` by default unless there's a good reason to use `@Singleton`."
msgstr "したがって、 `@Singleton` を使用する正当な理由がない限り、デフォルトで `@ApplicationScoped` を使用することをお勧めします。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:212
#, no-wrap
msgid "I don't understand the concept of client proxies."
msgstr "クライアントプロキシーの概念が理解できません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:217
msgid "Indeed, the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.  A client proxy is basically an object that delegates all method invocations to a target bean instance.  It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:219
msgid "Client proxies only delegate method invocations. So never read or write a field of a normal scoped bean, otherwise you will work with non-contextual or stale data."
msgstr "クライアントプロキシーはメソッドの呼び出しをデリゲートするだけです。そのため、通常のスコープされたBeanのフィールドを読み書きしてはいけません。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi.adoc:220
#, no-wrap
msgid "Generated Client Proxy Example"
msgstr "生成されたクライアントプロキシーの例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:225
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:233
#, no-wrap
msgid ""
"// The client proxy class is generated and looks like...\n"
"class Translator_ClientProxy extends Translator { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:241
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      // Find the correct translator instance...\n"
"      Translator translator = getTranslatorInstanceFromTheApplicationContext();\n"
"      // And delegate the method invocation...\n"
"      return translator.translate(sentence);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:243
msgid "The `Translator_ClientProxy` instance is always injected instead of a direct reference to a https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#contextual_instance[contextual instance, window=\"_blank\"] of the `Translator` bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:245
msgid "Client proxies allow for:"
msgstr "クライアントプロキシーは、以下のことを可能にします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:247
msgid "Lazy instantiation - the instance is created once a method is invoked upon the proxy."
msgstr "遅延インスタンス化 - メソッドがプロキシーに呼び出されるとインスタンスが生成されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:248
msgid "Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean."
msgstr "「狭い」スコープのBeanを「広い」スコープのBeanに注入する機能、すなわち、 `@RequestScoped`  Beanを `@ApplicationScoped`  Beanに注入することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:249
msgid "Circular dependencies in the dependency graph. Having circular dependencies is often an indication that a redesign should be considered, but sometimes it's inevitable."
msgstr "依存関係グラフの円形の依存関係。循環的な依存関係を持つことは、しばしば再設計を検討すべきであることを示していますが、時には避けられないこともあります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:250
msgid "In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance."
msgstr "まれなケースでは、手動でBeanを破棄するのが現実的です。直接参照を注入すると、古くなったBeanのインスタンスになってしまいます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:252
#, no-wrap
msgid "OK. You said that there are several kinds of beans?"
msgstr "そうですか。Beanは何種類かあるんですよね?"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:255
msgid "Yes. In general, we distinguish:"
msgstr "はい、一般的には以下に区別しています:"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:257
msgid "Class beans"
msgstr "クラスBean"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:258
msgid "Producer methods"
msgstr "プロデューサーメソッド"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:259
msgid "Producer fields"
msgstr "プロデューサーフィールド"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:260
msgid "Synthetic beans"
msgstr "合成Bean"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:262
msgid "Synthetic beans are usually provided by extensions. Therefore, we are not going to cover them in this guide."
msgstr "合成Beanは通常、エクステンションによって提供されます。そのため、このガイドではそれらを取り上げません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:265
msgid "Producer methods and fields are useful if you need additional control over instantiation of a bean.  They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc."
msgstr "プロデューサ・メソッドとフィールドは、Beanのインスタンス化を追加で制御する必要がある場合に便利です。また、サードパーティのライブラリを統合する際に、クラスソースを制御できず、追加のアノテーションなどを追加できない場合にも便利です。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi.adoc:266
#, no-wrap
msgid "Producers Example"
msgstr "プロデューサーの例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:271
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Producers {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:274
#, no-wrap
msgid ""
"    @Produces <1>\n"
"    double pi = Math.PI; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:284
#, no-wrap
msgid ""
"    @Produces <3>\n"
"    List<String> names() {\n"
"       List<String> names = new ArrayList<>();\n"
"       names.add(\"Andy\");\n"
"       names.add(\"Adalbert\");\n"
"       names.add(\"Joachim\");\n"
"       return names; <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:287
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Consumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:290
#, no-wrap
msgid ""
"   @Inject\n"
"   double pi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:293
#, no-wrap
msgid ""
"   @Inject\n"
"   List<String> names;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:296
#, no-wrap
msgid ""
"   // ...   \n"
"} \n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:301
msgid "The container analyses the field annotations to build a bean metadata.  The _type_ is used to build the set of bean types.  In this case, it will be `double` and `java.lang.Object`.  No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr "コンテナーは,フィールドアノテーションを分析して,Beanのメタデータを構築します。 _型_ は,Beanの型の集合を構築するために使用されます。この場合、 `double`  と `java.lang.Object` .スコープアノテーションは宣言されていないので、デフォルトは `@Dependent` になります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:302
msgid "The container will read this field when creating the bean instance."
msgstr "コンテナーは、Beanのインスタンスを作成するときにこのフィールドを読みます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:306
msgid "The container analyses the method annotations to build a bean metadata.  The _return type_ is used to build the set of bean types.  In this case, it will be `List<String>`, `Collection<String>`, `Iterable<String>` and `java.lang.Object`.  No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr "コンテナーは,メソッドのアノテーションを解析して,Beanのメタデータを構築します。戻り値の _型_ は、Bean型のセットを構築するために使用されます。この場合、 `List<String>` と `Collection<String>`、 `Iterable<String>`、 `java.lang.Object` となります。スコープアノテーションは宣言されていないので、デフォルトは `@Dependent`  となります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:307
msgid "The container will call this method when creating the bean instance."
msgstr "コンテナーは、Beanのインスタンスを作成する際にこのメソッドを呼び出します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:311
msgid "There's more about producers.  You can declare qualifiers, inject dependencies into the producer methods parameters, etc.  You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/producermethods.html[Weld docs, window=\"_blank\"]."
msgstr "プロデューサーについては他にもあります。修飾子を宣言したり、プロデューサーメソッドのパラメーターに依存性を注入したりすることができます。プロデューサについては、例えば link:https://docs.jboss.org/weld/reference/latest/en-US/html/producermethods.html[Weld, window=_blank] のドキュメントを参照してください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:312
#, no-wrap
msgid "OK, injection looks cool. What other services are provided?"
msgstr "OK、インジェクションは便利ですね。他にはどんなサービスが提供されていますか?"

#. type: Title ===
#: upstream/_versions/2.7/guides/cdi.adoc:314
#, no-wrap
msgid "Lifecycle Callbacks"
msgstr "ライフサイクルコールバック"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:317
msgid "A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:"
msgstr "Beanクラスは、ライフサイクル `@PostConstruct`  と `@PreDestroy`  コールバックを宣言することができます。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi.adoc:318
#, no-wrap
msgid "Lifecycle Callbacks Example"
msgstr "ライフサイクルコールバックの例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:323
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.annotation.PreDestroy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:331
#, no-wrap
msgid ""
"    @PostConstruct <1>\n"
"    void init() {\n"
"       // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:337
#, no-wrap
msgid ""
"    @PreDestroy <2>\n"
"    void destroy() {\n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:339
msgid "This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here."
msgstr "このコールバックは、Beanインスタンスがサービスに投入される前に呼び出されます。ここでいくつかの初期化を行うのが安全です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:340
msgid "This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here."
msgstr "このコールバックは、Beanインスタンスが破棄される前に呼び出されます。ここでいくつかのクリーンアップタスクを実行しても安全です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:342
msgid "It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks."
msgstr "コールバック内のロジックを「副作用なし」に保つこと、つまり、コールバック内で他のBeanを呼び出すことは避けるべきです。"

#. type: Title ===
#: upstream/_versions/2.7/guides/cdi.adoc:344
#, no-wrap
msgid "Interceptors"
msgstr "インターセプター"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:348
msgid "Interceptors are used to separate cross-cutting concerns from business logic.  There is a separate specification - Java Interceptors - that defines the basic programming model and semantics."
msgstr "インターセプターは、横断的な問題をビジネス・ロジックから分離するために使用されます。基本的なプログラミングモデルとセマンティクスを定義した Java Interceptors という別の仕様があります。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi.adoc:349
#, no-wrap
msgid "Simple Interceptor Example"
msgstr "シンプルなインターセプターの例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:354
#, no-wrap
msgid ""
"import javax.interceptor.Interceptor;\n"
"import javax.annotation.Priority;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:359
#, no-wrap
msgid ""
"@Logged <1>\n"
"@Priority(2020) <2>\n"
"@Interceptor <3>\n"
"public class LoggingInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:362
#, no-wrap
msgid ""
"   @Inject <4>\n"
"   Logger logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:370
#, no-wrap
msgid ""
"   @AroundInvoke <5>\n"
"   Object logInvocation(InvocationContext context) {\n"
"      // ...log before\n"
"      Object ret = context.proceed(); <6>\n"
"      // ...log after\n"
"      return ret;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:372
#: upstream/_versions/2.7/guides/cdi.adoc:420
#: upstream/_versions/2.7/guides/cdi.adoc:456
#: upstream/_versions/2.7/guides/cdi.adoc:465
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:374
msgid "This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`."
msgstr "これは、インターセプターをBeanにバインドするために使用されるインターセプターバインディングアノテーションです。Beanクラスに `@Logged`  をアノテーションします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:375
msgid "`Priority` enables the interceptor and affects the interceptor ordering. Interceptors with smaller priority values are called first."
msgstr "`Priority`  はインターセプターを有効にし、インターセプターの順序に影響を与えます。優先度の値が小さいインターセプターが最初に呼び出されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:376
msgid "Marks an interceptor component."
msgstr "インターセプターコンポーネントをマークします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:377
msgid "An interceptor instance may be the target of dependency injection."
msgstr "インターセプターインスタンスは、依存性注入の対象となる場合があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:378
msgid "`AroundInvoke` denotes a method that interposes on business methods."
msgstr "`AroundInvoke`  とは、ビジネスの方法に口出しする方法を指します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:379
msgid "Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method."
msgstr "インターセプターチェーンの次のインターセプターに進むか、インターセプターされたビジネスメソッドを呼び出します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:381
msgid "Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepted bean."
msgstr "インターセプタのインスタンスは、インターセプトするBeanのインスタンスに依存するオブジェクトです。"

#. type: Title ===
#: upstream/_versions/2.7/guides/cdi.adoc:383
#, no-wrap
msgid "Decorators"
msgstr "デコレーター"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:386
msgid "Decorators are similar to interceptors, but because they implement interfaces with business semantics, they are able to implement business logic."
msgstr "デコレーターはインターセプターと似ていますが、ビジネスセマンティクスを持つインターフェイスを実装しているため、ビジネスロジックを実装することができます。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi.adoc:387
#, no-wrap
msgid "Simple Decorator Example"
msgstr "シンプルなデコレーターの例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:395
#, no-wrap
msgid ""
"import javax.decorator.Decorator;\n"
"import javax.decorator.Delegate;\n"
"import javax.annotation.Priority;\n"
"import javax.inject.Inject;\n"
"import javax.enterprise.inject.Any;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:399
#, no-wrap
msgid ""
"public interface Account {\n"
"   void withdraw(BigDecimal amount);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:403
#, no-wrap
msgid ""
"@Priority(10) <1>\n"
"@Decorator <2>\n"
"public class LargeTxAccount implements Account { <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:408
#, no-wrap
msgid ""
"   @Inject\n"
"   @Any\n"
"   @Delegate\n"
"   Account delegate; <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:411
#, no-wrap
msgid ""
"   @Inject\n"
"   LogService logService; <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:418
#, no-wrap
msgid ""
"   void withdraw(BigDecimal amount) {\n"
"      delegate.withdraw(amount); <6>\n"
"      if (amount.compareTo(1000) > 0) {\n"
"         logService.logWithdrawal(delegate, amount);\n"
"      }\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:422
msgid "`@Priority` enables the decorator. Decorators with smaller priority values are called first."
msgstr "`@Priority` はデコレーターを有効にします。優先度の値が小さいインターセプターが最初に呼び出されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:423
msgid "`@Decorator` marks a decorator component."
msgstr "`@Decorator` はデコレーターコンポーネントをマークします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:424
msgid "The set of decorated types includes all bean types which are Java interfaces, except for `java.io.Serializable`."
msgstr "装飾された型のセットには、 `java.io.Serializable` を除く、Java インターフェースであるすべての Bean 型が含まれます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:425
msgid "Each decorator must declare exactly one _delegate injection point_. The decorator applies to beans that are assignable to this delegate injection point."
msgstr "各デコレーターは、正確に1つの _デリゲート・インジェクション・ポイント_を宣言する必要があります。デコレーターは、このデリゲート・インジェクション・ポイントに割り当て可能なBeanに適用されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:426
msgid "Decorators can inject other beans."
msgstr "デコレーターは、他のBeanを注入することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:427
msgid "The decorator may invoke any method of the delegate object. And the container invokes either the next decorator in the chain or the business method of the intercepted instance."
msgstr "デコレーターは、デリゲートオブジェクトの任意のメソッドを呼び出すことができます。そして、コンテナは、チェーンの次のデコレーターか、インターセプトされたインスタンスのビジネスメソッドを呼び出します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:429
msgid "Instances of decorators are dependent objects of the bean instance they intercept, i.e. a new decorator instance is created for each intercepted bean."
msgstr "デコレーターのインスタンスは、インターセプトするBeanのインスタンスに依存するオブジェクトです。つまり、インターセプトされたBeanごとに新しいデコレーターインスタンスが作成されます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/cdi.adoc:430
#, no-wrap
msgid "Events and Observers"
msgstr "イベントとオブザーバー"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:435
msgid "Beans may also produce and consume events to interact in a completely decoupled fashion.  Any Java object can serve as an event payload.  The optional qualifiers act as topic selectors."
msgstr "Beanは、完全に分離された方法で相互作用するために、イベントを生成したり消費したりすることもできます。任意の Java オブジェクトをイベントのペイロードとして使用できます。オプションの修飾子は、トピックセレクタとして機能します。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi.adoc:436
#, no-wrap
msgid "Simple Event Example"
msgstr "シンプルなイベントの例"

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:443
#, no-wrap
msgid ""
"class TaskCompleted {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:446
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class ComplicatedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:449
#, no-wrap
msgid ""
"   @Inject\n"
"   Event<TaskCompleted> event; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:454
#, no-wrap
msgid ""
"   void doSomething() {\n"
"      // ...\n"
"      event.fire(new TaskCompleted()); <2>\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:459
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class Logger {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/cdi.adoc:463
#, no-wrap
msgid ""
"   void onTaskCompleted(@Observes TaskCompleted task) { <3>\n"
"      // ...log the task\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:467
msgid "`javax.enterprise.event.Event` is used to fire events."
msgstr "`javax.enterprise.event.Event`  は、イベントの火付けに使われています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:468
msgid "Fire the event synchronously."
msgstr "イベントを同期的に発生させます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:469
msgid "This method is notified when a `TaskCompleted` event is fired."
msgstr "このメソッドは、 `TaskCompleted`  イベントが発生したときに通知されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:471
msgid "For more info about events/observers visit https://docs.jboss.org/weld/reference/latest/en-US/html/events.html[Weld docs, window=\"_blank\"]."
msgstr "イベント/オブザーバーの詳細については、 link:https://docs.jboss.org/weld/reference/latest/en-US/html/events.html[Weld docsを, window=_blank]をご覧ください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi.adoc:472
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:479
msgid "In this guide, we've covered some of the basic topics of the Quarkus programming model that is based on the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.  However, a full CDI implementation is not used under the hood.  Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.  On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.  We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi.adoc:481
msgid "If you wish to learn more about Quarkus-specific features and limitations there is a Quarkus xref:cdi-reference.adoc[CDI Reference Guide].  We also recommend you to read the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[CDI specification] and the https://docs.jboss.org/weld/reference/latest/en-US/html/[Weld documentation] (Weld is a CDI Reference Implementation) to get acquainted with more complex topics."
msgstr ""
