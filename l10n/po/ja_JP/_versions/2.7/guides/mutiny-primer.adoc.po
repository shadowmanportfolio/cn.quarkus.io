# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-07 16:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:6
#, no-wrap
msgid "Mutiny - Async for bare mortal"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:12
msgid "https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, reactive programming library.  It is the primary model to write reactive applications with Quarkus."
msgstr "link:https://smallrye.io/smallrye-mutiny[Mutiny]は、直感的なリアクティブプログラミングライブラリです。Mutinyは、Quarkusでリアクティブアプリケーションを書くための主要なモデルです。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:13
#, no-wrap
msgid "An event-driven reactive programming API"
msgstr "イベントドリブンなリアクティブプログラミングAPI"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:19
msgid "Mutiny is very different from the other reactive programming libraries.  It takes a different approach to design your program.  With Mutiny everything is event-driven: you receive events, and you react to them.  This event-driven aspect embraces the asynchronous nature of distributed systems and provides an elegant and precise way to express continuation."
msgstr "Mutinyは、他のリアクティブ・プログラミング・ライブラリとは大きく異なります。プログラムを設計するために異なるアプローチをとります。Mutinyでは、すべてがイベントドリブンです：イベントを受け取り、それに反応します。このイベント駆動型の側面は、分散システムの非同期性を受け入れ、継続性を表現するエレガントで正確な方法を提供します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:21
msgid "Mutiny offers two types that are both event-driven and lazy:"
msgstr "Mutinyには、2つ型を提供します。両方ともイベントドリブンであり、レイジーです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:25
msgid "A `Uni` emits a single event (an item or a failure).  Unis are convenient to represent asynchronous actions that return 0 or 1 result.  A good example is the result of sending a message to a message broker queue."
msgstr "`Uni` は、単一のイベント（アイテムまたは失敗）を発します。Unisは、0または1の結果を返す非同期アクションを表現するのに便利です。例えば、メッセージ・ブローカーのキューにメッセージを送信した結果などがその例です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:28
msgid "A `Multi` emits multiple events (n items, 1 failure or 1 completion).  Multis can represent streams of items, potentially unbounded.  A good example is receiving messages from a message broker queue."
msgstr "`Multi` は複数のイベント（n個のアイテム、1つの失敗または1つの完了）を放出します。Multisはアイテムのストリームを表現することができ、無限に広がる可能性があります。例えば、メッセージ・ブローカのキューからメッセージを受信するのが良い例です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:34
msgid "These two types allow representing any type of interactions.  They are event sources.  You observe them (_subscription_) and you get notified when they emit an item, a failure, or, in the case of a bounded Multi, a completion event.  When you (the subscriber) receive the event, you can process it (e.g., transform it, filter it).  With Mutiny, you are going to write code like _onX().action()_, which reads as “on item X do action”."
msgstr "この2つのタイプは、あらゆるタイプのインタラクションを表現することができます。これらはイベントソースです。ユーザーはこれらを監視し（ _サブスクリプション_ ）、アイテムの出力、失敗、またはバインドされたMultiの場合は完了イベントが発行されると通知を受け取ります。あなた（サブスクライバー）がイベントを受け取ると、それを処理することができます（例えば、変換したり、フィルタリングしたり）。Mutinyでは、 _onX().action()_のようなコードを書くことになりますが、これは「アイテムXの場合actionを実施」と読み替えられます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:36
msgid "If you want to know more about Mutiny, and the concepts behind it, check https://smallrye.io/smallrye-mutiny/pages/philosophy[the Mutiny Philosophy]."
msgstr "Mutinyとそのコンセプトについてもっと知りたい方は、 link:https://smallrye.io/smallrye-mutiny/pages/philosophy[Mutiny Philosophy]をご覧ください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:37
#, no-wrap
msgid "Mutiny in Quarkus"
msgstr "クォークスでのMutiny"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:41
msgid "Mutiny is the primary API when dealing with the reactive features from Quarkus.  It means that most extensions support Mutiny either by exposing an API returning Unis and Multis (such as reactive data sources or rest clients) or understanding when your methods return a Uni or a Multi (such as RESTEasy Reactive or Reactive Messaging)."
msgstr "Mutinyは、Quarkusのリアクティブな機能を扱う際の主要なAPIです。これは、ほとんどのエクステンションがMutinyをサポートしていることを意味しています。それは、UniやMultiを返すAPIを公開する（リアクティブデータソースやレストクライアントなど）か、メソッドがUniやMultiを返すときに理解する（RESTEasy ReactiveやReactive Messagingなど）かのどちらかです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:44
msgid "These integrations make Mutiny a prominent and cohesive model for every reactive application developed with Quarkus.  In addition, Mutiny architecture allows fine-grain dead-code elimination which improves the memory usage when compiled to native (such as with Quarkus native mode or GraalVM native image compiler)."
msgstr "これらの統合により、MutinyはQuarkusで開発されたすべてのリアクティブアプリケーションのための主要で凝集性のあるモデルとなっています。さらに、Mutinyのアーキテクチャでは、きめ細かなデッドコードの排除が可能で、ネイティブにコンパイルした場合（QuarkusのネイティブモードやGraalVMのネイティブイメージコンパイラなど）、メモリ使用量が改善されます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:45
#, no-wrap
msgid "Why another reactive programming API?"
msgstr "なぜ別のリアクティブプログラミングAPIなのか？"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:49
msgid "Seasoned reactive developers may wonder why Quarkus introduced yet another reactive programming APIs while there are existing ones.  Mutiny is taking a very different angle:"
msgstr "熟練したリアクティブ開発者は、既存のリアクティブプログラミングAPIがあるにもかかわらず、Quarkusがまた新たなリアクティブプログラミングAPIを導入したことを不思議に思うかもしれません。しかし、Mutinyはまったく異なる角度からアプローチしています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:54
#, no-wrap
msgid ""
"**Event-Driven** -\n"
"Mutiny places events at the core of its design.\n"
"With Mutiny, you observe events, react to them, and create elegant and readable processing pipelines.\n"
"A Ph.D. in functional programming is not required.\n"
msgstr "**イベントドリブン** - Mutinyはイベントを設計の中核に据えています。Mutinyでは、イベントを観測し、それに反応し、エレガントで読みやすい処理パイプラインを作成します。関数型プログラミングの博士号は必要ありません。\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:57
#, no-wrap
msgid ""
"**Navigable** - Even with intelligent code completion, classes with hundreds of methods are confusing.\n"
"Mutiny provides a navigable and explicit API driving you towards the operator you need.\n"
msgstr "**Navigable** - インテリジェントなコード補完機能があっても、何百ものメソッドを持つクラスは混乱します。Mutinyは、必要な演算子に向かってあなたを導く、ナビゲーブルで明示的なAPIを提供します。\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:60
#, no-wrap
msgid ""
"**Non-Blocking I/O** - Mutiny is the perfect companion to tame the asynchronous nature of applications with non-blocking I/O (which powers xref:quarkus-reactive-architecture.adoc[Quarkus]).\n"
"Declaratively compose operations, transform data, enforce progress, recover from failures, and more.\n"
msgstr "**ノンブロッキングI/O** - Mutinyは、ノンブロッキングI/O（ link:quarkus-reactive-architecture.html[Quarkus]の動力源）を備えたアプリケーションの非同期性を制御するための完璧なコンパニオンです。宣言的にオペレーションを構成し、データを変換し、進行を強制し、障害から回復するなどの機能があります。\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:62
#, no-wrap
msgid "**Made for an asynchronous world** - Mutiny can be used in any asynchronous application such as event-driven microservices, message-based applications, network utilities, data stream processing, and of course... reactive applications!\n"
msgstr "**非同期の世界のために作られた** - Mutinyは、イベントドリブンなマイクロサービス、メッセージベースのアプリケーション、ネットワークユーティリティ、データストリーム処理、そしてもちろんリアクティブなアプリケーションなど、あらゆる非同期アプリケーションで使用することができます。\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:65
#, no-wrap
msgid ""
"**Reactive Streams and Converters Built-In** - Mutiny is based on the https://www.reactive-streams.org/[Reactive Streams] specification, and so it can be integrated with any other reactive programming library.\n"
"In addition, it proposes converters to interact with other popular libraries.\n"
msgstr "**Reactive Streamsとコンバータ内蔵** - Mutinyは link:https://www.reactive-streams.org/[Reactive Streams]の仕様に基づいているため、他のリアクティブプログラミングライブラリと統合することができます。さらに、他のポピュラーなライブラリと対話するためのコンバータも提供しています。\n"

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:66
#, no-wrap
msgid "Mutiny and the I/O Threads"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:72
msgid "Quarkus is powered by a xref:quarkus-reactive-architecture.adoc#engine[reactive engine], and when developing a reactive application, your code is executed on one of the few I/O threads.  Remember, you must never block these threads, and the model would collapse if you do.  So, you can't use blocking I/O.  Instead, you need to schedule the I/O operation and pass a continuation."
msgstr "Quarkusは link:quarkus-reactive-architecture.html#engine[リアクティブエンジン]を搭載しており、リアクティブアプリケーションを開発する際には、数少ないI/Oスレッドの1つでコードが実行されます。覚えておいてほしいのは、これらのスレッドを絶対にブロックしてはいけないということで、ブロックしてしまうとモデルが崩壊してしまいます。つまり、ブロッキングI/Oは使えないのです。代わりに、I/O操作をスケジュールして、継続を渡す必要があります。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:73
#, no-wrap
msgid "Reactive"
msgstr "リアクティブ"

#. type: Target for macro image
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:73
#, no-wrap
msgid "reactive-thread.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:79
msgid "The Mutiny event-driven paradigm is tailored for this.  When the I/O operation completes successfully, the Uni that represents it emits an item event.  When it fails, it emits a failure event.  The continuation is simply and naturally expressed using the event-driven API."
msgstr "Mutinyのイベントドリブンパラダイムは、これに合わせて作られています。I/O操作が正常に完了すると、それを表現するUniはアイテムイベントをエミットします。それが失敗すると、それは失敗イベントをエミットします。継続は、イベントドリブンなAPIを使ってシンプルかつ自然に表現されます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:80
#, no-wrap
msgid "Mutiny through Examples"
msgstr "事例で見るMutiny"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:83
msgid "Many Quarkus extensions expose Mutiny APIs. In this section, we use the MongoDB extension to illustrate how to use Mutiny."
msgstr "多くのQuarkusエクステンションがMutiny APIを公開しています。このセクションでは、MongoDBエクステンションを使用して、Mutinyの使用方法を説明します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:85
msgid "Let's imagine a simple structure representing an element from the https://en.wikipedia.org/wiki/Periodic_table[periodic table]:"
msgstr "link:https://en.wikipedia.org/wiki/Periodic_table[周期表]の元素を表す簡単な構造を想像してみましょう。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:89
#, no-wrap
msgid "public class Element {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:93
#, no-wrap
msgid ""
"   public String name;\n"
"   public String symbol;\n"
"   public int position;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:99
#, no-wrap
msgid ""
"   public Element(String name, String symbol, int position) {\n"
"       this.name = name;\n"
"       this.symbol = symbol;\n"
"       this.position = position;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:104
#, no-wrap
msgid ""
"   public Element() {\n"
"        // Use by JSON mappers\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:108
msgid "This structure contains the name, symbol, and position of the element.  To retrieve and store elements into a Mongo collection, you can use the following code:"
msgstr "この構造体には、元素の名前、シンボル、位置が入っています。元素を取得して Mongo コレクションに格納するには、次のようなコードを使います。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:113
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ElementService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:115
#, no-wrap
msgid "   final ReactiveMongoCollection<Element> collection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:121
#, no-wrap
msgid ""
"   @Inject\n"
"   ElementService(ReactiveMongoClient client) {\n"
"       collection = client.getDatabase(\"quarkus\")\n"
"               .getCollection(\"elements\", Element.class);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:130
#, no-wrap
msgid ""
"   public void add(Element element) {\n"
"       Uni<InsertOneResult> insertion = collection.insertOne(element);\n"
"       insertion\n"
"           .onItem().transform(r -> r.getInsertedId().asString())\n"
"           .subscribe().with(\n"
"               result -> System.out.println(\"inserted \" + result),\n"
"               failure -> System.out.println(\"D'oh\" + failure));\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:139
#, no-wrap
msgid ""
"   public void getAll() {\n"
"       collection.find()\n"
"           .subscribe().with(\n"
"              element -> System.out.println(\"Element: \" + element),\n"
"             failure -> System.out.println(\"D'oh! \" + failure),\n"
"             () -> System.out.println(\"No more elements\")\n"
"       );\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:141
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:146
msgid "First, the Mongo client is injected.  Note that it uses the reactive variant (`io.quarkus.mongodb.reactive.ReactiveMongoClient`).  In the initialize method, we retrieve and store the collection in which elements will be inserted."
msgstr "まず、Mongo のクライアントをインジェクションします。リアクティブ版 ( `io.quarkus.mongodb.reactive.ReactiveMongoClient`) を使っていることに注意しましょう。initialize メソッドでは、要素を挿入するためのコレクションを取得して保存します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:159
msgid "The `add` method inserts an element in the collection.  It receives the element as a parameter and uses the reactive API of the collection.  Interacting with the database involves I/Os.  The reactive principles forbid blocking while waiting for the interaction to complete.  Instead, we schedule the operation and pass a continuation.  The `insertOne` method returns a Uni, i.e., an asynchronous operation.  That's the scheduled I/O. We now need to express the continuation, which is done using the `.onItem()` method.  `.onItem()` allows configuring what needs to happen when the observed Uni emits an item, in our case when the scheduled I/Os completes.  In this example, we extract the inserted document id.  The final step is the subscription.  Without it, nothing would ever happen. Subscribing triggers the operation.  The subscription method can also define handlers: the `id` value on success, or a failure when the insertion fails."
msgstr "`add` メソッドは、コレクションに要素を挿入します。このメソッドはパラメータとして要素を受け取り、コレクションのリアクティブAPIを使用します。データベースとのやりとりにはI/Oが伴います。リアクティブな原則では、インタラクションが完了するのを待つ間のブロッキングを禁じています。代わりに、操作をスケジューリングし、継続を渡します。 `insertOne` メソッドはUniを返す、つまり非同期の操作です。これがスケジュールされたI/Oです。 `.onItem()` `.onItem()` では、観測されたUniがアイテムを放出したときに何が起こるべきかを設定することができます。この例では、スケジュールされたI/Oが完了したときです。この例では、挿入されたドキュメントIDを抽出しています。最後のステップはサブスクリプションです。これがなければ何も起こりません。購読することで、操作が開始されます。サブスクリプション・メソッドは、成功時には `id` の値を、挿入が失敗したときには失敗を返すというハンドラーを定義することもできます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:167
msgid "Let's now look at the second method.  It retrieves all the stored elements.  In this case, it returns multiple items (one per stored element), so we are using a `Multi`.  As for the insertion, getting the stored elements involves I/Os.  The `find` is our operation.  As for Uni, you need to subscribe to trigger the operation.  The subscriber receives item events, a failure event, or a completion event when all the elements have been received."
msgstr "次に、2つ目のメソッドを見てみましょう。これは、格納されているすべての要素を取得します。この場合、複数のアイテム（格納されている要素ごとに1つ）を返しますので、 `Multi` を使用しています。挿入については、保存されている要素の取得にはI/Oが必要です。 `find` が私たちの操作です。Uniに関しては、オペレーションをトリガーするためにサブスクライブする必要があります。サブスクライバーは、アイテムイベント、失敗イベント、またはすべての要素を受信したときの完了イベントを受け取ります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:171
msgid "Subscribing to a Uni or a Multi is essential, as without it, the operation is never executed.  In Quarkus some extensions deal with the subscription for you.  For example, in RESTEasy Reactive your HTTP methods can return a Uni or a Multi, and RESTEasy Reactive handles the subscription."
msgstr "UniやMultiへのサブスクリプションは必須であり、それがなければ操作は実行されません。Quarkusでは、いくつかのエクステンションがサブスクリプションを処理してくれます。たとえば、RESTEasy Reactiveでは、HTTPメソッドでUniやMultiを返すことができ、RESTEasy Reactiveが購読を処理します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:172
#, no-wrap
msgid "Mutiny Patterns"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:176
msgid "The example from the last section was simplistic on purpose.  Let's have a look at a few common patterns."
msgstr "前節の例は、あえて単純化したものでした。ここでは、いくつかの共通するパターンを見てみましょう。"

#. type: Title ===
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:177
#, no-wrap
msgid "Observing events"
msgstr "イベントの観察"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:180
msgid "You can observe the various kind of events using:"
msgstr "次を利用して様々な種類のイベントを観察することができます:"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:182
msgid "`on{event}().invoke(ev -> System.out.println(ev));`"
msgstr "`on{event}().invoke(ev -> System.out.println(ev));`"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:185
msgid "For example, for items use: `onItem().invoke(item -> ...);`"
msgstr "例えば、アイテム使用の場合、次を使用して下さい: `onItem().invoke(item → …​);`"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:188
msgid "For failure, use: `onFailure().invoke(failure -> ...)`"
msgstr "失敗の場合は、次を使用してください: `onFailure().invoke(failure → …​)`"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:193
msgid "The `invoke` method is synchronous.  Sometimes you need to execute an asynchronous action.  In this case use `call`, as in: `onItem().call(item -> someAsyncAction(item))`.  Note that `call` does not change the item, it just calls an asynchronous action, and when this one completes, it emits the original item downstream."
msgstr "`invoke` メソッドは同期型です。時には、非同期のアクションを実行する必要があります。このような場合は `call` を使用して、 `onItem().call(item → someAsyncAction(item))` のようにします。なお、 `call` はアイテムを変更するのではなく、非同期アクションを呼び出すだけで、このアクションが完了すると、元のアイテムを下流に放出します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:194
#, no-wrap
msgid "Transforming item"
msgstr "アイテムのトランスフォーム"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:198
msgid "The first instrumental pattern consists of transforming the item events you receive.  As we have seen in the previous section, it could indicate the successful insertion, or the elements stored in the database."
msgstr "最初の計測パターンは、受け取ったアイテムイベントを変換することで構成されています。前節で見たように、挿入が成功したことを示したり、データベースに格納されている要素を示したりします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:200
msgid "Transforming an item is done using: `onItem().transform(item -> ....)`."
msgstr "アイテムの変換には `onItem().transform(item → …​.)` を使用します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:202
msgid "More details about transformation can be found in the https://smallrye.io/smallrye-mutiny/getting-started/transforming-items[Mutiny documentation]."
msgstr "変換の詳細については、 link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items[Mutiny]のドキュメントを参照してください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:203
#, no-wrap
msgid "Sequential composition"
msgstr "シーケンシャル合成"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:207
msgid "Sequential composition allows chaining dependent asynchronous operations. This is achieved using `onItem().transformToUni(item -> ...)`.  Unlike `transform`, the function passed to `transformToUni` returns a Uni."
msgstr "シーケンシャル合成では、依存性のある非同期操作を連鎖させることができます。これは `onItem().transformToUni(item → …​)` を使って実現しています。 `transform` とは異なり、 `transformToUni` に渡される関数は Uni を返します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:213
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onItem().transformtoUni(item -> anotherAsynchronousAction(item));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:216
msgid "More details about asynchronous transformation can be found in the https://smallrye.io/smallrye-mutiny/getting-started/transforming-items-async[Mutiny documentation]."
msgstr "非同期変換の詳細については、 link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items-async[Mutinyのドキュメント]を参照してください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:217
#, no-wrap
msgid "Failure handling"
msgstr "エラーハンドリング"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:220
msgid "So far we only handle the item events, but handling failure is essential. You can handle failures using `onFailure()`."
msgstr "これまではアイテムのイベントだけを処理してきましたが、失敗の処理は必須です。 `onFailure()` を使って失敗を処理することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:222
msgid "For example, you can recover with a fallback item using `onFailure().recoverWithItem(fallback)`:"
msgstr "例えば、 `onFailure().recoverWithItem(fallback)` を使ったフォールバック・アイテムでリカバリーできます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:228
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onFailure().recoverWithItem(“my fallback value”);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:231
msgid "You can also retry the operation such as in:"
msgstr "以下のようにして操作をリトライすることもできます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:237
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onFailure().retry().atMost(5);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:240
msgid "More info about failure recovery can be found on https://smallrye.io/smallrye-mutiny/getting-started/handling-failures[the handling failure documentation] and https://smallrye.io/smallrye-mutiny/getting-started/retry[the retry documentation]."
msgstr "失敗のリカバリーについての詳細は、 link:https://smallrye.io/smallrye-mutiny/getting-started/handling-failures[失敗の処理のドキュメント]および link:https://smallrye.io/smallrye-mutiny/getting-started/retry[リトライのドキュメント]を参照してください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:241
#, no-wrap
msgid "Events and Actions"
msgstr "イベント、アクション"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:244
msgid "The following tables list the events that you can receive for Uni and Multi. Each of them is associated with its own group (onX). The second table lists the classic action you can do upon an event. Note that some groups offer more possibilities."
msgstr "以下の表は、UniとMultiで受信できるイベントの一覧です。それぞれのイベントは、独自のグループ（onX）に関連付けられています。2つ目の表は、イベントを受けてできる古典的なアクションの一覧です。グループによってはより多くの可能性があることに注意してください。"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:248
#, no-wrap
msgid "Events from the upstream"
msgstr "上流からのイベント"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:250
#, no-wrap
msgid "Events from the downstream"
msgstr "下流からのイベント"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:251
#, no-wrap
msgid "Uni"
msgstr "Uni"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:252
#, no-wrap
msgid "Subscription (1), Item (0..1), failure (0..1)"
msgstr "Subscription (1), Item (0..1), failure (0..1)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:254
#, no-wrap
msgid "Cancellation"
msgstr "Cancellation"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:255
#, no-wrap
msgid "Multi"
msgstr "Multi"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:256
#, no-wrap
msgid "Subscription (1), Item (0..n), failure (0..1), completion (0..1)"
msgstr "Subscription (1), Item (0..n), failure (0..1), completion (0..1)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:257
#, no-wrap
msgid "Cancellation, Request"
msgstr "Cancellation, Request"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:260
msgid "Check the full list of events on https://smallrye.io/smallrye-mutiny/getting-started/observing-events[the event documentation]."
msgstr "イベントの全リストは、 link:https://smallrye.io/smallrye-mutiny/getting-started/observing-events[イベントドキュメント]で確認してください。"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:262
#, no-wrap
msgid "Action"
msgstr "アクション"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:262
#, no-wrap
msgid "API"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:264
#, no-wrap
msgid "Comment"
msgstr "コメント"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:264
#, no-wrap
msgid "transform"
msgstr "transform"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:264
#, no-wrap
msgid "`onItem().transform(Function<I, O> function);`"
msgstr "`onItem().transform(Function<I, O&amp;gt; function);`"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:266
#, no-wrap
msgid ""
"Transform the event into another event using a synchronous function.\n"
"The downstream receives the result of the function (or a failure if the transformation failed)."
msgstr ""
"同期関数を使って、イベントを別のイベントに変換します。\n"
"ダウンストリームは、関数の結果（変換に失敗した場合は失敗）を受け取ります。"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:266
#, no-wrap
msgid "transformToUni"
msgstr "transformToUni"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:266
#, no-wrap
msgid "`onItem().transformToUni(Function<I, Uni<O>> function);`"
msgstr "`onItem().transformToUni(Function<I, Uni<O&amp;gt;&amp;gt; function);`"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:267
#, no-wrap
msgid "Transform the event into another event using an asynchronous function. The downstream receives the item emitted by the produced Uni (or a failure if the transformation failed). If the produced Uni emits a failure, that failure is passed to the downstream."
msgstr "非同期関数を使って、イベントを別のイベントに変換する。下流側は、生成されたUniが発するアイテム（変換に失敗した場合は失敗）を受け取ります。生成されたUniが失敗を発した場合、その失敗は下流に渡されます。"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:267
#, no-wrap
msgid "invoke"
msgstr "invoke"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:267
#, no-wrap
msgid "`onItem().invoke(Consumer<I> consumer)`"
msgstr "`onItem().invoke(Consumer<I&amp;gt; consumer)`"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:268
#, no-wrap
msgid "Invokes the synchronous consumer. This is particularly convenient to execute side-effects actions. The downstream receives the original event, or a failure if the consumer throws an exception"
msgstr "同期型コンシューマーを呼び出します。これは特に副作用のあるアクションを実行するのに便利です。ダウンストリームは元のイベントを受け取りますが、コンシューマが例外を投げた場合は失敗となります。"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:268
#, no-wrap
msgid "call"
msgstr "call"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:268
#, no-wrap
msgid "`onItem().call(Function<I, Uni<?>>)`"
msgstr "`onItem().call(Function<I, Uni<?&amp;gt;&amp;gt;)`"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:269
#, no-wrap
msgid "Invokes the asynchronous function. This is particularly convenient to execute asynchronous side-effect actions.The downstream receives the original event, or a failure if the consumer throws an exception or if the produced Uni emits a failure."
msgstr "非同期関数を呼び出します。これは、非同期の副作用アクションを実行する際に特に便利です。ダウンストリームは、元のイベントを受け取りますが、コンシューマーが例外を投げた場合や、生成されたUniが失敗を発した場合は失敗となります。"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:269
#, no-wrap
msgid "fail"
msgstr "fail"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:269
#, no-wrap
msgid "`onItem().failWith(Function<I, Throwable>)`"
msgstr "`onItem().failWith(Function<I, Throwable&amp;gt;)`"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:270
#, no-wrap
msgid "Emits a failure when it receives the event."
msgstr "イベントを受信したときに失敗を出力します。"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:270
#, no-wrap
msgid "complete (Multi only)"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:270
#, no-wrap
msgid "`onItem().complete()`"
msgstr "`onItem().complete()`"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:271
#, no-wrap
msgid "Emits the completion event when it receives the event."
msgstr "イベントを受信すると完了イベントを発行します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:273
#, no-wrap
msgid "Other patterns"
msgstr "その他のパターン"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:277
msgid "Mutiny provides lots of other features.  Head over to the https://smallrye.io/smallrye-mutiny[Mutiny documentation] to see many more examples, including the whole list of events and how to handle them."
msgstr "Mutinyには他にもたくさんの機能があります。Mutinyの link:https://smallrye.io/smallrye-mutiny[ドキュメント]では、イベントの全リストとその処理方法など、さらに多くの例を見ることができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:279
msgid "Some frequently asked guides are the following:"
msgstr "よくある質問として、以下のようなガイドがあります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:281
msgid "merge vs. concatenation - https://smallrye.io/smallrye-mutiny/guides/merge-concat"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:282
msgid "controlling the emission thread - https://smallrye.io/smallrye-mutiny/guides/emit-subscription"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:283
msgid "explicit blocking - https://smallrye.io/smallrye-mutiny/guides/imperative-to-reactive"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:284
#, no-wrap
msgid "Shortcuts"
msgstr "ショートカット"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:288
msgid "When using Uni, having to write `onItem()` can be cumbersome.  Fortunately, Mutiny provides a set of shortcut to make your code more concise:"
msgstr "Uniを使うとき、 `onItem()` を書かなければならないのは面倒なことです。幸いなことに、Mutinyにはコードをより簡潔にするための一連のショートカットが用意されています。"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:291
#, no-wrap
msgid "Shortcut"
msgstr "ショートカット"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:293
#, no-wrap
msgid "Equivalent"
msgstr "等価表現"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:293
#, no-wrap
msgid "uni.map(x → y)"
msgstr "uni.map(x → y)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:294
#, no-wrap
msgid "uni.onItem().transform(x → y)"
msgstr "uni.onItem().transform(x → y)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:294
#, no-wrap
msgid "uni.flatMap(x → uni2)"
msgstr "uni.flatMap(x → uni2)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:295
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:296
#, no-wrap
msgid "uni.onItem().transformToUni(x → uni2)"
msgstr "uni.onItem().transformToUni(x → uni2)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:295
#, no-wrap
msgid "uni.chain(x → uni2)"
msgstr "uni.chain(x → uni2)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:296
#, no-wrap
msgid "uni.then(() → uni2)"
msgstr "uni.then(() → uni2)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:297
#, no-wrap
msgid "uni.onItem().transformToUni(ignored → uni2)"
msgstr "uni.onItem().transformToUni(ignored → uni2)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:297
#, no-wrap
msgid "uni.invoke(x → System.out.println(x))"
msgstr "uni.invoke(x → System.out.println(x))"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:298
#, no-wrap
msgid "uni.onItem().invoke(x → System.out.println(x))"
msgstr "uni.onItem().invoke(x → System.out.println(x))"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:298
#, no-wrap
msgid "uni.call(x → uni2)"
msgstr "uni.call(x → uni2)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:299
#, no-wrap
msgid "uni.onItem().call(x → uni2)"
msgstr "uni.onItem().call(x → uni2)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:299
#, no-wrap
msgid "uni.eventually) → System.out.println(\"eventually\""
msgstr "uni.eventually) → System.out.println(\"eventually\""

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:300
#, no-wrap
msgid "uni.onItemOrFailure().invokeignoredItem, ignoredException) → System.out.println(\"eventually\""
msgstr "uni.onItemOrFailure().invokeignoredItem, ignoredException) → System.out.println(\"eventually\""

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:300
#, no-wrap
msgid "uni.eventually(() → uni2)"
msgstr "uni.eventually(() → uni2)"

#. type: Table
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:301
#, no-wrap
msgid "uni.onItemOrFailure().call((ignoredItem, ignoredException) → uni2)"
msgstr "uni.onItemOrFailure().call((ignoredItem, ignoredException) → uni2)"

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:303
#, no-wrap
msgid "Reactive Streams"
msgstr "Reactive Streams"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:311
msgid "Mutiny uses https://www.reactive-streams.org/[Reactive Streams].  `Multi` implements `Publisher` and enforces the back-pressure protocol.  Emissions are constrained by the request emitted from the downstream subscribers.  Thus, it does not overload the subscribers.  Note that in some cases, you can’t follow this protocol (because the Multi emits events that can’t be controlled, such as time, or measures sensors).  In this case, Mutiny provides a way to control the overflow using `onOverflow()`."
msgstr "Mutinyは link:https://www.reactive-streams.org/[Reactive Streams]を使用しています。 `Multi` は `Publisher` を実装し、back-pressureプロトコルを実施しています。エミッションは、下流のサブスクライバから発せられるリクエストによって制約されます。したがって、サブスクライバーに過負荷をかけることはありません。なお、場合によっては、このプロトコルに従えないこともあります（Multiが時間や測定センサーなどの制御できないイベントを放出するため）。この場合、Mutinyは、 `onOverflow()` を使ってオーバーフローを制御する方法を提供します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:314
msgid "`Uni` does not implement Reactive Streams `Publisher`.  A `Uni` can only emit one event, so subscribing to the `Uni` is enough to express your intent to use the result and does not need the request protocol ceremony."
msgstr "`Uni` は、Reactive Streams `Publisher` を実装していません。 `Uni` は1つのイベントしか発することができないので、 `Uni` をサブスクライブすることで、結果を使用する意思を表明することができ、リクエストプロトコルのセレモニーは必要ありません。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:315
#, no-wrap
msgid "Mutiny and Vert.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:320
msgid "Vert.x is a toolkit to build reactive applications and systems.  It provides a huge ecosystem of libraries following the reactive principles (i.e., non-blocking and asynchronous).  Vert.x is an essential part of Quarkus, as it provides its reactive capabilities."
msgstr "Vert.xは、リアクティブなアプリケーションやシステムを構築するためのツールキットです。Vert.xは、リアクティブな原則（ノンブロッキングおよび非同期）に従ったライブラリの巨大なエコシステムを提供します。Vert.xは、リアクティブ機能を提供するため、Quarkusの重要な部分となっています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:323
msgid "In addition, the whole Vert.x API can be used with Quarkus.  To provide a cohesive experience, the Vert.x API is also available using a Mutiny variant, i.e., returns Uni and Multi."
msgstr "さらに、Vert.x API全体をQuarkusで使用することができます。まとまりのある体験を提供するために、Vert.x APIはMutinyのバリアントを使用して、つまりUniとMultiを返すこともできます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:325
msgid "More details about this API can be found on: https://quarkus.io/blog/mutiny-vertx/."
msgstr "このAPIの詳細については、 https://quarkus.io/blog/mutiny-vertx/  を参照してください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:326
#, no-wrap
msgid "Mutiny Integration in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:330
msgid "The integration of Mutiny in Quarkus goes beyond just the library.  Mutiny exposes hooks that allow Quarkus and Mutiny to be closely integrated:"
msgstr "QuarkusにおけるMutinyのインテグレーションは、単なるライブラリにとどまりません。Mutinyは、QuarkusとMutinyを密接に統合するためのフックを公開しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:332
msgid "Calling `await` or `toIterable` would fail if you are running on an I/O thread, preventing blocking the I/O thread;"
msgstr "I/O スレッドで実行している場合は `await` や `toIterable` を呼び出すと失敗し、I/O スレッドのブロックを防ぎます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:333
msgid "The `log()` operator use the Quarkus logger;"
msgstr "`log()` オペレーターは、Quarkus のロガーを使用しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:334
msgid "The default Mutiny thread pool is the Quarkus worker thread pool;"
msgstr "Mutinyのデフォルトのスレッドプールは、Quarkusのワーカースレッドプールです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:335
msgid "Context Propagation is enabled by default when using Mutiny Uni and Multi"
msgstr "Mutiny UniおよびMultiを使用する場合、Context伝搬はデフォルトで有効です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mutiny-primer.adoc:337
msgid "More details about the infrastructure integration can be found on https://smallrye.io/smallrye-mutiny/guides/infrastructure."
msgstr "インフラ統合の詳細については、 https://smallrye.io/smallrye-mutiny/guides/infrastructure を参照してください。"
