# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-07 16:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/native-reference.adoc:6
#, no-wrap
msgid "Native Reference Guide"
msgstr "ネイティブリファレンスガイド"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:16
msgid "This guide is a companion to the xref:building-native-image.adoc[Building a Native Executable], xref:native-and-ssl.adoc[Using SSL With Native Images], and xref:writing-native-applications-tips.adoc[Writing Native Applications], guides.  It provides further details to debugging issues in Quarkus native executables that might arise during development or production."
msgstr "このガイドは、 link:building-native-image.html[ネイティブ実行可能ファイルのビルド]、 link:native-and-ssl.html[Using SSL With Native Images[ネイティブイメージでのSSLの使用]、 link:writing-native-applications-tips.html[ネイティブアプリケーションの作成]の各ガイドに付随するものです。このガイドでは、開発時や本番時に発生する可能性のあるQuarkusのネイティブ実行可能ファイルの問題をデバッグするための詳細を説明しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:19
msgid "This reference guide takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide].  You can find instructions on how to quickly set up this application in this guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/native-reference.adoc:20
#, no-wrap
msgid "Requirements and Assumptions"
msgstr "要件と前提条件"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:23
msgid "This guide has the following requirements:"
msgstr "このガイドには、次の要件があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:25
msgid "JDK 11 installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11 がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:26
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:27
msgid "A working container runtime (Docker, podman)"
msgstr "動作するコンテナーランタイム(Docker, podman)"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:32
msgid "This guide builds and executes Quarkus native executables within a Linux environment.  To offer a homogeneous experience across all environments, the guide relies on a container runtime environment to build and run the native executables.  The instructions below use Docker as example, but very similar commands should work on alternative container runtimes, e.g. podman."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/native-reference.adoc:38
msgid "Building native executables is an expensive process, so make sure the container runtime has enough CPU and memory to do this.  A minimum of 4 CPUs and 4GB of memory is required."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:42
msgid "Finally, this guide assumes the use of the link:https://github.com/graalvm/mandrel[Mandrel distribution] of GraalVM for building native executables, and these are built within a container so there is no need for installing Mandrel on the host."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/native-reference.adoc:43
#, no-wrap
msgid "Bootstrapping the project"
msgstr "プロジェクトのブートストラップ"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:47
msgid "Start by creating a new Quarkus project.  Open a terminal and run the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:49
msgid "For Linux & MacOS users"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:56
msgid "For Windows users"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:58
msgid "If using cmd , (don't use backward slash `\\` and put everything on the same line)"
msgstr "cmd を使っている場合 (バックスラッシュは使わず、全て同じ行にしてください)"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:59
msgid "If using Powershell , wrap `-D` parameters in double quotes e.g. `\"-DprojectArtifactId=debugging-native\"`"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/native-reference.adoc:60
#, no-wrap
msgid "Configure Quarkus properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:66
msgid "Some Quarkus configuration options will be used constantly throughout this guide, so to help declutter command line invocations, it's recommended to add these options to the `application.properties` file.  So, go ahead and add the following options to that file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:73
#, no-wrap
msgid ""
"quarkus.native.container-build=true\n"
"quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:{mandrel-flavor}\n"
"quarkus.container-image.build=true\n"
"quarkus.container-image.group=test\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/native-reference.adoc:75
#, no-wrap
msgid "First Debugging Steps"
msgstr "最初のデバッグ手順"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:78
msgid "As a first step, change to the project directory and build the native executable for the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:82
#: upstream/_versions/2.7/guides/native-reference.adoc:524
#, no-wrap
msgid "./mvnw package -DskipTests -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:85
msgid "Run the application to verify it works as expected. In one terminal:"
msgstr "アプリケーションを実行して、期待通りに動作することを確認します。一つの端末で以下を実行します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:89
#: upstream/_versions/2.7/guides/native-reference.adoc:532
#, no-wrap
msgid "docker run -i --rm -p 8080:8080 test/debugging-native:1.0.0-SNAPSHOT\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:92
msgid "In another:"
msgstr "別のターミナルで以下を実行します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:96
#, no-wrap
msgid "curl -w '\\n' http://localhost:8080/hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:101
msgid "The rest of this section explores ways to build the native executable with extra information, but first, stop the running application.  We can obtain this information while building the native executable by adding additional native-image build options using `-Dquarkus.native.additional-build-args`, e.g."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:106
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.additional-build-args=--native-image-info\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:109
msgid "Executing that will produce additional output lines like this:"
msgstr "これを実行すると、次のような追加の出力行が得られます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:116
#, no-wrap
msgid ""
"...\n"
"# Printing compilation-target information to: /project/reports/target_info_20220223_100915.txt\n"
"…\n"
"# Printing native-library information to: /project/reports/native_library_info_20220223_100925.txt\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:121
msgid "The target info file contains information such as the target platform, the toolchain used to compile the executable, and the C library in use:"
msgstr "ターゲット情報ファイルには、ターゲットプラットフォーム、実行ファイルのコンパイルに使用されたツールチェーン、使用されているCライブラリなどの情報が含まれています。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:133
#, no-wrap
msgid ""
"$ cat target/*/reports/target_info_*.txt\n"
"Building image for target platform: org.graalvm.nativeimage.Platform$LINUX_AMD64\n"
"Using native toolchain:\n"
"   Name: GNU project C and C++ compiler (gcc)\n"
"   Vendor: redhat\n"
"   Version: 8.5.0\n"
"   Target architecture: x86_64\n"
"   Path: /usr/bin/gcc\n"
"Using CLibrary: com.oracle.svm.core.posix.linux.libc.GLib\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:136
msgid "The native library info file contains information on the static libraries added to the binary and the other libraries dynamically linked to the executable:"
msgstr "ネイティブライブラリ情報ファイルには、バイナリに追加されるスタティックライブラリと、実行ファイルに動的にリンクされるその他のライブラリの情報が含まれています。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:151
#, no-wrap
msgid ""
"$ cat target/*/reports/native_library_info_*.txt\n"
"Static libraries:\n"
"   ../opt/mandrel/lib/svm/clibraries/linux-amd64/liblibchelper.a\n"
"   ../opt/mandrel/lib/static/linux-amd64/glibc/libnet.a\n"
"   ../opt/mandrel/lib/static/linux-amd64/glibc/libextnet.a\n"
"   ../opt/mandrel/lib/static/linux-amd64/glibc/libnio.a\n"
"   ../opt/mandrel/lib/static/linux-amd64/glibc/libjava.a\n"
"   ../opt/mandrel/lib/static/linux-amd64/glibc/libfdlibm.a\n"
"   ../opt/mandrel/lib/static/linux-amd64/glibc/libsunec.a\n"
"   ../opt/mandrel/lib/static/linux-amd64/glibc/libzip.a\n"
"   ../opt/mandrel/lib/svm/clibraries/linux-amd64/libjvm.a\n"
"Other libraries: stdc++,pthread,dl,z,rt\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:156
msgid "Even more detail can be obtained by passing in `--verbose` as an additional native-image build argument.  This option can be very useful in detecting whether the options that you pass at a high level via Quarkus are being passed down to the native executable production, or whether some third party jar has some native-image configuration embedded in it that is reaching the native-image invocation:"
msgstr "ネイティブイメージビルドの追加引数として `--verbose` を渡すことで、さらに詳細な情報を得ることができます。このオプションは、Quarkusを介して高いレベルで渡されたオプションがネイティブ実行可能ファイルの生成に渡されているのか、あるいはサードパーティのjarにネイティブイメージの設定が埋め込まれていて、それがネイティブイメージの呼び出しに届いているのかを検出するのに非常に役立ちます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:161
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.additional-build-args=--verbose\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:164
msgid "Running with `--verbose` demonstrates how the native-image building process is two sequential java processes:"
msgstr "`--verbose` で実行すると、ネイティブイメージのビルドプロセスが2つの連続したJavaプロセスであることが分かります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:167
msgid "The first is a very short Java process that does some basic validation and builds the arguments for the second process (in a stock GraalVM distribution, this is executed as native code)."
msgstr "1番目は非常に短いJavaプロセスで、基本的な検証を行い、2つ目のプロセスのための引数を組み立てます（GraalVMの純正ディストリビューションでは、これはネイティブコードとして実行されます）。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:170
msgid "The second Java process is where the main part of the native executable production happens.  The `--verbose` option shows the actual Java process executed.  You could take the output and run it yourself."
msgstr "2番目のJavaプロセスでは、ネイティブ実行可能ファイル作成の主要部分が行われます。 `--verbose` オプションは、実際に実行されたJavaプロセスを表示します。出力を受けて、自分で実行することもできます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:172
msgid "One may also combine multiple native build options by separating with a comma, e.g.:"
msgstr "また、複数のネイティブ・ビルド・オプションをコンマで区切って組み合わせることもできます。例:"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:177
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.additional-build-args=--native-image-info,--verbose\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/native-reference.adoc:183
msgid "Remember that if an argument for `-Dquarkus.native.additional-build-args` includes the `,` symbol, it needs to be escaped to be processed correcly, e.g. `\\\\,`."
msgstr "`-Dquarkus.native.additional-build-args` の引数に `,` シンボルが含まれている場合、正しく処理するためには、 `\\\\,` のようにエスケープする必要があることを覚えておいてください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/native-reference.adoc:185
#, no-wrap
msgid "Inspecting Native Executables"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:191
msgid "Given a native executable, various Linux tools can be used to inspect it.  To allow supporting a variety of environments, inspections will be done from within a Linux container.  Let's create a Linux container image with all the tools required for this guide:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:195
#, no-wrap
msgid "FROM fedora:35\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:202
#, no-wrap
msgid ""
"RUN dnf install -y \\\n"
"binutils \\\n"
"gdb \\\n"
"git \\\n"
"perf \\\n"
"perl-open\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:204
#, no-wrap
msgid "ENV FG_HOME /opt/FlameGraph\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:206
#, no-wrap
msgid "RUN git clone https://github.com/brendangregg/FlameGraph $FG_HOME\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:208
#, no-wrap
msgid "WORKDIR /data\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:210
#, no-wrap
msgid "ENTRYPOINT /bin/bash\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:213
msgid "Using docker in the non-Linux environment, you can create an image using this Dockerfile via:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:217
#, no-wrap
msgid "docker build -t fedora-tools:v1 .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:220
msgid "Then, go to the root of the project and run the Docker container we have just created as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:224
#, no-wrap
msgid "docker run -t -i --rm -v ${PWD}:/data -p 8080:8080 fedora-tools:v1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:227
msgid "`ldd` shows the shared library dependencies of an executable:"
msgstr "`ldd` は、実行可能ファイルの共有ライブラリの依存関係を表示します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:231
#, no-wrap
msgid "ldd ./target/debugging-native-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:234
msgid "`strings` can be used to look for text messages inside the binary:"
msgstr "`strings` は、バイナリ内のテキストメッセージを探すのに使用できます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:238
#, no-wrap
msgid "strings ./target/debugging-native-1.0.0-SNAPSHOT-runner | grep Hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:241
msgid "Using `strings` you can also get Mandrel information given the binary:"
msgstr "`strings` を使えば、指定されたバイナリのMandrel情報を得ることもできます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:245
#, no-wrap
msgid "strings ./target/debugging-native-1.0.0-SNAPSHOT-runner | grep core.VM\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:249
msgid "Finally, using `readelf` we can inspect different sections of the binary.  For example, we can see how the heap and text sections take most of binary:"
msgstr "最後に、 `readelf` を使って、バイナリのさまざまなセクションを調べることができます。例えば、ヒープセクションとテキストセクションがバイナリの大半を占めていることがわかります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:253
#, no-wrap
msgid "readelf -SW ./target/debugging-native-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/native-reference.adoc:255
#, no-wrap
msgid "Native Reports"
msgstr "ネイティブレポート"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:258
msgid "Optionally, the native build process can generate reports that show what goes into the binary:"
msgstr "オプションとして、ネイティブビルドプロセスでは、バイナリに何が入っているかを示すレポートを生成することができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:263
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.enable-reports\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:267
msgid "The reports will be created under `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/reports/`.  These reports are some of the most useful resources when encountering issues with missing methods/classes, or encountering forbidden methods by Mandrel."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:268
#, no-wrap
msgid "Call Tree Reports"
msgstr "コールツリーレポート"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:273
msgid "`call_tree` text file report is one of the default reports generated when the `-Dquarkus.native.enable-reports` option is passed in.  This is useful for getting an approximation on why a method/class is included in the binary.  However, the text format makes it very difficult to read and can take up a lot of space."
msgstr "`call_tree` テキストファイルレポートは、 `-Dquarkus.native.enable-reports` オプションが渡されたときに生成されるデフォルトのレポートの1つです。これは、あるメソッド/クラスがなぜバイナリに含まれているのかについて、おおよその見当をつけるのに便利です。しかし、テキスト形式のため非常に読みづらく、多くのスペースを必要とします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:276
msgid "Since Mandrel 21.3.0.0, the call tree is also reported as a group of CSV files.  The CSV output can be enabled by adding `-H:PrintAnalysisCallTreeType=CSV` to the additional native arguments. E.g."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:282
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.enable-reports \\\n"
"    -Dquarkus.native.additional-build-args=-H:PrintAnalysisCallTreeType=CSV\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:287
msgid "These can in turn be imported into a graph database, such as Neo4j, to inspect them more easily and run queries against the call tree.  Let’s see this in action."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:289
msgid "First, start a Neo4j instance:"
msgstr "まず、Neo4jのインスタンスを起動します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:300
#, no-wrap
msgid ""
"export NEO_PASS=...\n"
"docker run \\\n"
"    --detach \\\n"
"    --rm \\\n"
"    --name testneo4j \\\n"
"    -p7474:7474 -p7687:7687 \\\n"
"    --env NEO4J_AUTH=neo4j/${NEO_PASS} \\\n"
"    neo4j:latest\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:305
msgid "Once the container is running, you can access the link:http://localhost:7474[Neo4j browser].  Use `neo4j` as the username and the value of `NEO_PASS` as the password to log in."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:308
msgid "To import the CSV files, we need the following cypher script which will import the data within the CSV files and create graph database nodes and edges:"
msgstr "CSVファイルをインポートするためには、CSVファイル内のデータをインポートし、グラフデータベースのノードとエッジを作成する以下のcypherスクリプトが必要です。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:313
#, no-wrap
msgid ""
"CREATE CONSTRAINT unique_vm_id ON (v:VM) ASSERT v.vmId IS UNIQUE;\n"
"CREATE CONSTRAINT unique_method_id ON (m:Method) ASSERT m.methodId IS UNIQUE;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:317
#, no-wrap
msgid ""
"LOAD CSV WITH HEADERS FROM 'file:///reports/call_tree_vm.csv' AS row\n"
"MERGE (v:VM {vmId: row.Id, name: row.Name})\n"
"RETURN count(v);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:321
#, no-wrap
msgid ""
"LOAD CSV WITH HEADERS FROM 'file:///reports/call_tree_methods.csv' AS row\n"
"MERGE (m:Method {methodId: row.Id, name: row.Name, type: row.Type, parameters: row.Parameters, return: row.Return, display: row.Display})\n"
"RETURN count(m);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:325
#, no-wrap
msgid ""
"LOAD CSV WITH HEADERS FROM 'file:///reports/call_tree_virtual_methods.csv' AS row\n"
"MERGE (m:Method {methodId: row.Id, name: row.Name, type: row.Type, parameters: row.Parameters, return: row.Return, display: row.Display})\n"
"RETURN count(m);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:331
#, no-wrap
msgid ""
"LOAD CSV WITH HEADERS FROM 'file:///reports/call_tree_entry_points.csv' AS row\n"
"MATCH (m:Method {methodId: row.Id})\n"
"MATCH (v:VM {vmId: '0'})\n"
"MERGE (v)-[:ENTRY]->(m)\n"
"RETURN count(*);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:337
#, no-wrap
msgid ""
"LOAD CSV WITH HEADERS FROM 'file:///reports/call_tree_direct_edges.csv' AS row\n"
"MATCH (m1:Method {methodId: row.StartId})\n"
"MATCH (m2:Method {methodId: row.EndId})\n"
"MERGE (m1)-[:DIRECT {bci: row.BytecodeIndexes}]->(m2)\n"
"RETURN count(*);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:343
#, no-wrap
msgid ""
"LOAD CSV WITH HEADERS FROM 'file:///reports/call_tree_override_by_edges.csv' AS row\n"
"MATCH (m1:Method {methodId: row.StartId})\n"
"MATCH (m2:Method {methodId: row.EndId})\n"
"MERGE (m1)-[:OVERRIDEN_BY]->(m2)\n"
"RETURN count(*);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:349
#, no-wrap
msgid ""
"LOAD CSV WITH HEADERS FROM 'file:///reports/call_tree_virtual_edges.csv' AS row\n"
"MATCH (m1:Method {methodId: row.StartId})\n"
"MATCH (m2:Method {methodId: row.EndId})\n"
"MERGE (m1)-[:VIRTUAL {bci: row.BytecodeIndexes}]->(m2)\n"
"RETURN count(*);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:352
msgid "Copy and paste the contents of the script into a file called `import.cypher`."
msgstr "スクリプトの内容を `import.cypher` というファイルにコピー＆ペーストします。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/native-reference.adoc:358
msgid "Mandrel 22.0.0 contains a bug where the symbolic links used by the import cypher file are not correctly set when generating reports within a container (for more details see link:https://github.com/oracle/graal/issues/4355[here]).  This can be worked around by copying the following script into a file and executing it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:362
#, no-wrap
msgid "set -e\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:364
#, no-wrap
msgid "project=\"debugging-native\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:366
#, no-wrap
msgid "pushd target/*-native-image-source-jar/reports\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:369
#, no-wrap
msgid ""
"rm -f call_tree_vm.csv\n"
"ln -s call_tree_vm_${project}-* call_tree_vm.csv\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:372
#, no-wrap
msgid ""
"rm -f call_tree_direct_edges.csv\n"
"ln -s call_tree_direct_edges_${project}-* call_tree_direct_edges.csv\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:375
#, no-wrap
msgid ""
"rm -f call_tree_entry_points.csv\n"
"ln -s call_tree_entry_points_${project}-* call_tree_entry_points.csv\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:378
#, no-wrap
msgid ""
"rm -f call_tree_methods.csv\n"
"ln -s call_tree_methods_${project}-* call_tree_methods.csv\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:381
#, no-wrap
msgid ""
"rm -f call_tree_virtual_edges.csv\n"
"ln -s call_tree_virtual_edges_${project}-* call_tree_virtual_edges.csv\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:384
#, no-wrap
msgid ""
"rm -f call_tree_virtual_methods.csv\n"
"ln -s call_tree_virtual_methods_${project}-* call_tree_virtual_methods.csv\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:387
#, no-wrap
msgid ""
"rm -f call_tree_override_by_edges.csv\n"
"ln -s call_tree_override_by_edges_${project}-* call_tree_override_by_edges.csv\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:389
#, no-wrap
msgid "popd\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/native-reference.adoc:393
msgid "Next, copy the import cypher script and CSV files into Neo4j's import folder:"
msgstr "次に、インポートサイファースクリプトとCSVファイルをNeo4jのインポートフォルダにコピーします。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:399
#, no-wrap
msgid ""
"docker cp \\\n"
"    target/*-native-image-source-jar/reports \\\n"
"    testneo4j:/var/lib/neo4j/import\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:401
#, no-wrap
msgid "docker cp import.cypher testneo4j:/var/lib/neo4j\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:404
msgid "After copying all the files, invoke the import script:"
msgstr "すべてのファイルをコピーしたら、インポートスクリプトを起動します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:408
#, no-wrap
msgid "docker exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} -f import.cypher\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:412
msgid "Once the import completes (shouldn't take more than a couple of minutes), go to the link:http://localhost:7474[Neo4j browser], and you'll be able to observe a small summary of the data in the graph:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/2.7/guides/native-reference.adoc:413
#, no-wrap
msgid "Neo4j database information after import"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/2.7/guides/native-reference.adoc:413
#, no-wrap
msgid "native-reference-neo4j-db-info.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:418
msgid "The data above shows that there are ~60000 methods, and just over ~200000 edges between them.  The Quarkus application demonstrated here is very basic, so there’s not a lot we can explore, but here are some example queries you can run to explore the graph in more detail.  Typically, you’d start by looking for a given method:"
msgstr "上のデータでは、~60000のメソッドがあり、それらの間には~200000のエッジがあることがわかります。ここでデモされているQuarkusアプリケーションは非常に基本的なものなので、調べられることは多くありませんが、グラフをより詳細に調べるために実行できるクエリの例をいくつか紹介します。典型的な例としては、あるメソッドを探すことから始めます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:422
#, no-wrap
msgid "match (m:Method) where m.name = \"hello\" return *\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:425
msgid "From there, you can narrow down to a given method on a specific type:"
msgstr "そこから、特定の型の特定のメソッドに絞ることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:429
#, no-wrap
msgid "match (m:Method) where m.name = \"hello\" and m.type =~ \".*GreetingResource\" return *\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:436
msgid "Once you’ve located the node for the specific method you’re after, a typical question you’d want to get an answer for is: why does this method get included in the call tree? To do that, start from the method and look for incoming connections at a given depth, starting from the end method.  For example, methods that directly call a method can be located via:"
msgstr "探している特定のメソッドのノードを見つけたら、答えを得たい典型的な質問は、「なぜこのメソッドはコールツリーに含まれるのか」です。そのためには、終点のメソッドから始まる所定の深さの到着接続を探します。たとえば、あるメソッドを直接呼び出すメソッドは、以下のようにして見つけることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:440
#, no-wrap
msgid "match (m:Method) <- [*1..1] - (o) where m.name = \"hello\" return *\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:444
msgid "Then you can look for direct calls at depth of 2, so you’d search for methods that call methods that call into the target method:"
msgstr "そうすれば、深さ2の直接呼び出しを探すことができます。つまり、対象のメソッドを呼び出すメソッドを呼び出すメソッドを探すことになります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:448
#, no-wrap
msgid "match (m:Method) <- [*1..2] - (o) where m.name = \"hello\" return *\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:454
msgid "You can continue going up layers, but unfortunately if you reach a depth with too many nodes, the Neo4j browser will be unable to visualize them all.  When that happens, you can alternatively run the queries directly against the cypher shell:"
msgstr "階層を上がっていくことはできますが、残念ながらノードの数が多すぎる深度に到達すると、Neo4jブラウザはそれらすべてを可視化することができません。そのような場合は、代わりにcypher shellに対して直接クエリを実行することができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:459
#, no-wrap
msgid ""
"docker exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \\\n"
"  \"match (m:Method) <- [*1..10] - (o) where m.name = 'hello' return *\"\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:461
#, no-wrap
msgid "Used Packages/Classes/Methods Reports"
msgstr "使用されているパッケージ/クラス/メソッドのレポート"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:465
msgid "`used_packages`, `used_classes` and `used_methods` text file reports come in handy when comparing different versions of the application, e.g. why does the image take longer to build? Or why is the image bigger now?"
msgstr "`used_packages`, `used_classes`, `used_methods` テキストファイルレポートは、アプリケーションの異なるバージョンを比較する際に便利です。例えば、イメージ作成に時間がかかるのはなぜか？また、なぜイメージが大きくなったのか？"

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:466
#, no-wrap
msgid "Further Reports"
msgstr "更なるレポート"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:470
msgid "Mandrel can produce further reports beyond the ones that are enabled with the `-Dquarkus.native.enable-reports` option.  These are called expert options and you can learn more about them by running:"
msgstr "Mandrelは、 `-Dquarkus.native.enable-reports` オプションで有効になっているレポート以外にも、様々なレポートを作成することができます。これらはエキスパートオプションと呼ばれ、以下を実行することで詳細を知ることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:474
#, no-wrap
msgid "docker run quay.io/quarkus/ubi-quarkus-mandrel:{mandrel-flavor} --expert-options-all\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:477
msgid "To use these expert options, add them comma separated to the `-Dquarkus.native.additional-build-args` parameter."
msgstr "これらのエキスパートオプションを使用するには、 `-Dquarkus.native.additional-build-args` パラメータにコンマで区切って追加します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/native-reference.adoc:478
#, no-wrap
msgid "Build-time vs Run-time Initialization"
msgstr "ビルド時と実行時の初期化"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:485
msgid "Quarkus instructs Mandrel to initialize as much as possible at build time, so that runtime startup can be as fast as possible.  This is important in containerized environments where the startup speed has a big impact on how quickly an application is ready to do work.  Build time initialization also minimizes the risk of runtime failures due to unsupported features becoming reachable through runtime initialization, thus making Quarkus more reliable."
msgstr "QuarkusはMandrelに対し、ビルド時に可能な限り初期化するよう指示し、実行時の起動を可能な限り高速化しています。これは、起動速度がアプリケーションの動作準備の早さに大きな影響を与えるコンテナ環境では重要です。また、ビルド時の初期化は、サポートされていない機能が実行時の初期化によって到達可能になることによる実行時の失敗のリスクを最小限にし、Quarkusの信頼性を高めています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:489
msgid "The most common examples of build-time initialized code are static variables and blocks.  Although Mandrel executes those at run-time by default, Quarkus instructs Mandrel to run them at build-time for the reasons given."
msgstr "ビルド時に初期化されるコードの最も一般的な例は、静的変数とブロックです。Mandrelはこれらをデフォルトでは実行時に実行しますが、Quarkusでは先程の理由でビルド時に実行するように指示しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:493
msgid "This means that any static variables initialized inline, or initialized in a static block, will keep the same value even if the application is restarted.  This is a different behaviour compared to what would happen if executed as Java."
msgstr "つまり、インラインで初期化されたスタティック変数や、スタティックブロックで初期化されたスタティック変数は、アプリケーションを再起動しても同じ値を維持します。これは、Javaとして実行した場合とは異なる動作です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:496
msgid "To see this in action with a very basic example, add a new `TimestampResource` to the application that looks like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:500
#: upstream/_versions/2.7/guides/native-reference.adoc:552
#: upstream/_versions/2.7/guides/native-reference.adoc:688
#: upstream/_versions/2.7/guides/native-reference.adoc:871
#: upstream/_versions/2.7/guides/native-reference.adoc:1009
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:505
#: upstream/_versions/2.7/guides/native-reference.adoc:693
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:508
#, no-wrap
msgid ""
"@Path(\"/timestamp\")\n"
"public class TimestampResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:510
#, no-wrap
msgid "    static long firstAccess = System.currentTimeMillis();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:517
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String timestamp() {\n"
"        return \"First access \" + firstAccess;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:520
msgid "Rebuild the binary using:"
msgstr "次のようにバイナリを再ビルドします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:528
msgid "Run the application in one terminal (make sure you stop any other native executable container runs before executing this):"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:535
msgid "Send a `GET` request multiple times from another terminal:"
msgstr "別のターミナルから `GET` リクエストを複数回送信してみましょう。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:539
#, no-wrap
msgid "curl -w '\\n' http://localhost:8080/timestamp # run this multiple times\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:544
msgid "to see how the current time has been baked into the binary.  This time was calculated when the binary was being built, hence application restarts have no effect."
msgstr "現在の時刻がどのようにバイナリに焼き付けられているかを確認できます。この時刻は、バイナリのビルド時に計算されたものなので、アプリケーションの再起動が影響しません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:548
msgid "In some situations, built time initializations can lead to errors when building native executables.  One example is when a value gets computed at build time which is forbidden to reside in the heap of the JVM that gets baked into the binary.  To see this in action, add this REST resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:554
#, no-wrap
msgid "import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:563
#, no-wrap
msgid ""
"import javax.crypto.Cipher;\n"
"import javax.crypto.NoSuchPaddingException;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.nio.charset.StandardCharsets;\n"
"import java.security.KeyPair;\n"
"import java.security.KeyPairGenerator;\n"
"import java.security.NoSuchAlgorithmException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:566
#, no-wrap
msgid ""
"@Path(\"/encrypt-decrypt\")\n"
"public class EncryptDecryptResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:569
#, no-wrap
msgid ""
"    static final KeyPairGenerator KEY_PAIR_GEN;\n"
"    static final Cipher CIPHER;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:574
#, no-wrap
msgid ""
"    static {\n"
"        try {\n"
"            KEY_PAIR_GEN = KeyPairGenerator.getInstance(\"RSA\");\n"
"            KEY_PAIR_GEN.initialize(1024);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:580
#, no-wrap
msgid ""
"            CIPHER = Cipher.getInstance(\"RSA\");\n"
"        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n"
"            throw new RuntimeException(e);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:585
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{message}\")\n"
"    public String encryptDecrypt(@PathParam String message) throws Exception {\n"
"        KeyPair keyPair = KEY_PAIR_GEN.generateKeyPair();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:587
#, no-wrap
msgid "        byte[] text = message.getBytes(StandardCharsets.UTF_8);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:591
#, no-wrap
msgid ""
"        // Encrypt with private key\n"
"        CIPHER.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate());\n"
"        byte[] encrypted = CIPHER.doFinal(text);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:595
#, no-wrap
msgid ""
"        // Decrypt with public key\n"
"        CIPHER.init(Cipher.DECRYPT_MODE, keyPair.getPublic());\n"
"        byte[] unencrypted = CIPHER.doFinal(encrypted);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:599
#, no-wrap
msgid ""
"        return new String(unencrypted, StandardCharsets.UTF_8);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:602
msgid "When trying to rebuild the application, you’ll encounter an error:"
msgstr "アプリケーションを再ビルドしようとすると、エラーが発生します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:621
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative\n"
"...\n"
"Error: Unsupported features in 2 methods\n"
"Detailed message:\n"
"Error: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  To see how this object got instantiated use --trace-object-instantiation=java.security.SecureRandom. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\n"
"Trace: Object was reached by\n"
"\treading field java.security.KeyPairGenerator$Delegate.initRandom of\n"
"\t\tconstant java.security.KeyPairGenerator$Delegate@58b0fe1b reached by\n"
"\treading field org.acme.EncryptDecryptResource.KEY_PAIR_GEN\n"
"Error: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  To see how this object got instantiated use --trace-object-instantiation=java.security.SecureRandom. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\n"
"Trace: Object was reached by\n"
"\treading field sun.security.rsa.RSAKeyPairGenerator.random of\n"
"\t\tconstant sun.security.rsa.RSAKeyPairGenerator$Legacy@3248a092 reached by\n"
"\treading field java.security.KeyPairGenerator$Delegate.spi of\n"
"\t\tconstant java.security.KeyPairGenerator$Delegate@58b0fe1b reached by\n"
"\treading field org.acme.EncryptDecryptResource.KEY_PAIR_GEN\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:629
msgid "So, what the message above is telling us is that our application caches a value that is supposed to be random as a constant.  This is not desirable because something that's supposed to be random is no longer so, because the seed is baked in the image.  The message above makes it quite clear what is causing this, but in other situations the cause might be more obfuscated.  As a next step, we'll add some extra flags to the native executable generation to get more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:631
msgid "As suggested by the message, let's start by adding an option to track object instantiation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:661
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.additional-build-args=\"--trace-object-instantiation=java.security.SecureRandom\"\n"
"...\n"
"Error: Unsupported features in 2 methods\n"
"Detailed message:\n"
"Error: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.sun.jndi.dns.DnsClient class initializer with a trace:\n"
" \tat java.security.SecureRandom.<init>(SecureRandom.java:218)\n"
"\tat sun.security.jca.JCAUtil$CachedSecureRandomHolder.<clinit>(JCAUtil.java:59)\n"
"\tat sun.security.jca.JCAUtil.getSecureRandom(JCAUtil.java:69)\n"
"\tat com.sun.jndi.dns.DnsClient.<clinit>(DnsClient.java:82)\n"
". Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\n"
"Trace: Object was reached by\n"
"\treading field java.security.KeyPairGenerator$Delegate.initRandom of\n"
"\t\tconstant java.security.KeyPairGenerator$Delegate@4a5058f9 reached by\n"
"\treading field org.acme.EncryptDecryptResource.KEY_PAIR_GEN\n"
"Error: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.sun.jndi.dns.DnsClient class initializer with a trace:\n"
" \tat java.security.SecureRandom.<init>(SecureRandom.java:218)\n"
"\tat sun.security.jca.JCAUtil$CachedSecureRandomHolder.<clinit>(JCAUtil.java:59)\n"
"\tat sun.security.jca.JCAUtil.getSecureRandom(JCAUtil.java:69)\n"
"\tat com.sun.jndi.dns.DnsClient.<clinit>(DnsClient.java:82)\n"
". Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\n"
"Trace: Object was reached by\n"
"\treading field sun.security.rsa.RSAKeyPairGenerator.random of\n"
"\t\tconstant sun.security.rsa.RSAKeyPairGenerator$Legacy@71880cf1 reached by\n"
"\treading field java.security.KeyPairGenerator$Delegate.spi of\n"
"\t\tconstant java.security.KeyPairGenerator$Delegate@4a5058f9 reached by\n"
"\treading field org.acme.EncryptDecryptResource.KEY_PAIR_GEN\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:670
msgid "The error messages point to the code in the example, but it can be suprising that a reference to `DnsClient` appears.  Why is that? The key is in what happens inside `KeyPairGenerator.initialize()` method call.  It uses `JCAUtil.getSecureRandom()` which is why this is problematic, but sometimes the tracing options can show some stack traces that do not represent what happens in reality.  The best option is to dig through the source code and use tracing output for guidance but not as full truth."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:672
msgid "Moving the `KEY_PAIR_GEN.initialize(1024);` call to the run-time executed method `encryptDecrypt` is enough to solve this particular issue."
msgstr "`KEY_PAIR_GEN.initialize(1024);` の呼び出しを、実行時に実行されるメソッド `encryptDecrypt` に移すことで、この特定の問題を解決できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:674
msgid "Additional information on which classes are initialized and why can be obtained by passing in the `-H:+PrintClassInitialization` flag via `-Dquarkus.native.additional-build-args`."
msgstr "どのクラスがどのように初期化されるかについての追加情報は、 `-Dquarkus.native.additional-build-args` を通じて `-H:+PrintClassInitialization` フラグを渡すことで得ることができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/native-reference.adoc:675
#, no-wrap
msgid "Profile Runtime Behaviour"
msgstr "実行時動作のプロファイリング"

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:677
#, no-wrap
msgid "Single Thread"
msgstr "シングルスレッド"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:681
msgid "In this exercise, we profile the runtime behaviour of some Quarkus application that was compiled to a native executable to determine where the bottleneck is.  Assume that you’re in a scenario where profiling the pure Java version is not possible, maybe because the issue only occurs with the native version of the application."
msgstr "この演習では、ネイティブ実行可能ファイルにコンパイルされたQuarkusアプリケーションの実行時動作をプロファイリングし、ボトルネックがどこにあるかを判断します。問題がアプリケーションのネイティブバージョンでのみ発生するために、純粋なJavaバージョンのプロファイリングができないシナリオを想定しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:684
msgid "Add a REST resource with the following code (example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo1/StringBuilderTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:696
#, no-wrap
msgid ""
"@Path(\"/string-builder\")\n"
"public class StringBuilderResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:702
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String appendDelete() {\n"
"        StringBuilder sb = new StringBuilder();\n"
"        sb.append(new char[1_000_000]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:708
#, no-wrap
msgid ""
"        do\n"
"        {\n"
"            sb.append(12345);\n"
"            sb.delete(0, 5);\n"
"        } while (Thread.currentThread().isAlive());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:712
#, no-wrap
msgid ""
"        return \"Never happens\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:715
msgid "Recompile the application, rebuild the binary and run it. Attempting a simple curl will never complete, as expected:"
msgstr "アプリケーションを再コンパイルし、バイナリを再ビルドして実行します。単純なcurlを試みても、期待通り完了しません。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:723
#, no-wrap
msgid ""
"$ ./mvnw package -DskipTests -Pnative\n"
"...\n"
"$ docker run -i --rm -p 8080:8080 test/debugging-native:1.0.0-SNAPSHOT\n"
"...\n"
"$ curl http://localhost:8080/string-builder # this will never complete\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:728
msgid "However, the question we’re trying to answer here is: what would be the bottleneck of such code? Is it appending the characters? Is it deleting it? Is it checking whether the thread is alive?"
msgstr "しかし、ここで私たちが答えようとしているのは、そのようなコードのボトルネックは何か？文字を追加することか？削除していることか？スレッドが生きているかどうかをチェックしていることか？です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:733
msgid "Since we're dealing with a linux native executable, we can use tools like `perf` directly.  To use `perf`, go to the root of the project and start the tools container created earlier as a privileged user:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:737
#, no-wrap
msgid "docker run --privileged -t -i --rm -v ${PWD}:/data -p 8080:8080 fedora-tools:v1\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/native-reference.adoc:744
msgid "Note that in order to use `perf` to profile the native executables in the guide, the container needs to run as privileged, or with `--cap-add sys_admin`.  Please note that privileged containers are **NOT** recommended in production, so use this flag with caution!"
msgstr "なお、 `perf` を使用してガイドのネイティブ実行可能ファイルをプロファイルするには、コンテナを特権的に実行するか、 `--cap-add sys_admin` を使用する必要があります。本番環境では特権コンテナは推奨され *ません* ので、このフラグの使用には注意が必要です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:747
msgid "Once the container is running, you need to ensure that the kernel is ready for the profiling exercises:"
msgstr "コンテナが稼働したら、カーネルがプロファイリングの演習に対応できるようにしておく必要があります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:752
#, no-wrap
msgid ""
"echo -1 | sudo tee /proc/sys/kernel/perf_event_paranoid\n"
"echo 0 | sudo tee /proc/sys/kernel/kptr_restrict\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/native-reference.adoc:759
msgid "The kernel modifications above also apply to Linux virtual machines.  If running on a bare metal Linux machine, tweaking only `perf_event_paranoid` is enough."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:762
msgid "Then, from inside the tools container we execute:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:766
#: upstream/_versions/2.7/guides/native-reference.adoc:1473
#, no-wrap
msgid "perf record -F 1009 -g -a ./target/debugging-native-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:769
msgid "While `perf record` is running, open another window and access the endpoint:"
msgstr "`perf record` の実行中に、別のウィンドウを開き、エンドポイントにアクセスします。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:773
#, no-wrap
msgid "curl http://localhost:8080/string-builder # this will never complete\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:782
msgid "After a few seconds, halt the `perf record` process.  This will generate a `perf.data` file.  We could use `perf report` to inspect the perf data, but you can often get a better picture showing that data as a flame graph.  To generate flame graphs, we will use https://github.com/brendangregg/FlameGraph[FlameGraph GitHub repository], which has already been installed inside the tools container."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:784
msgid "Next, generate a flame graph using the data captured via `perf record`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:789
#, no-wrap
msgid ""
"$ perf script -i perf.data | ${FG_HOME}/stackcollapse-perf.pl > out.perf-folded\n"
"$ ${FG_HOME}/flamegraph.pl out.perf-folded > flamegraph.svg\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:793
msgid "The flame graph is an svg file that a web browser, such as Firefox, can easily display.  After the above two commands complete one can open `flamegraph.svg` in their browser:"
msgstr "フレームグラフは、FirefoxなどのWebブラウザで簡単に表示できるsvgファイルです。上記の2つのコマンドが完了すると、ブラウザで `flamegraph.svg` を開くことができます。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/2.7/guides/native-reference.adoc:794
#, no-wrap
msgid "Perf flamegraph without symbols"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/2.7/guides/native-reference.adoc:794
#, no-wrap
msgid "native-reference-perf-flamegraph-no-symbols.svg"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:803
msgid "We see a big majority of time spent in what is supposed to be our main, but we see no trace of the `StringBuilderResource` class, nor the `StringBuilder` class we're calling.  We should look at the symbol table of the binary: can we find symbols for our class and `StringBuilder`? We need those in order to get meaningful data.  From within the tools container, query the symbol table:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:808
#, no-wrap
msgid ""
"objdump -t ./target/debugging-native-1.0.0-SNAPSHOT-runner | grep StringBuilder\n"
"[no output]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:814
msgid "No output appears when querying the symbol table.  This is why we don't see any call graphs in the flame graphs.  This is a deliberate decision that native-image makes.  By default, it removes symbols from the binary."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:818
msgid "To regain the symbols, we need to rebuild the binary instructing GraalVM not to delete the symbols.  On top of that, enable DWARF debug info so that the stack traces can be populated with that information.  From outside the tools container, execute:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:824
#: upstream/_versions/2.7/guides/native-reference.adoc:940
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.debug.enabled \\\n"
"    -Dquarkus.native.additional-build-args=-H:-DeleteLocalSymbols\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:829
msgid "Next, re-enter the tools container if you exited, and inspect the native executable with `objdump`, and see how the symbols are now present:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:836
#, no-wrap
msgid ""
"$ objdump -t ./target/debugging-native-1.0.0-SNAPSHOT-runner | grep StringBuilder\n"
"000000000050a940 l     F .text\t0000000000000091              .hidden ReflectionAccessorHolder_StringBuilderResource_appendDelete_9e06d4817d0208a0cce97ebcc0952534cac45a19_e22addf7d3eaa3ad14013ce01941dc25beba7621\n"
"000000000050a9e0 l     F .text\t00000000000000bb              .hidden ReflectionAccessorHolder_StringBuilderResource_constructor_0f8140ea801718b80c05b979a515d8a67b8f3208_12baae06bcd6a1ef9432189004ae4e4e176dd5a4\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:839
msgid "You should see a long list of symbols that match that pattern."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:842
msgid "Then, run the executable through perf, *indicating that the call graph is dwarf*:"
msgstr "次に、実行ファイルを perf で実行すると、 *コールグラフが dwarf であることがわかります*。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:846
#: upstream/_versions/2.7/guides/native-reference.adoc:947
#, no-wrap
msgid "perf record -F 1009 --call-graph dwarf -a ./target/debugging-native-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:849
msgid "Run the curl command once again, stop the binary, generate the flamegraphs and open it:"
msgstr "もう一度curlコマンドを実行し、バイナリを停止し、フレームグラフを生成して開きます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:854
#: upstream/_versions/2.7/guides/native-reference.adoc:962
#, no-wrap
msgid ""
"perf script -i perf.data | ${FG_HOME}/stackcollapse-perf.pl > out.perf-folded\n"
"${FG_HOME}/flamegraph.pl out.perf-folded > flamegraph.svg\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:859
msgid "The flamegraph now shows where the bottleneck is.  It's when `StringBuilder.delete()` is called which calls `System.arraycopy()`.  The issue is that 1 million characters need to be shifted in very small increments:"
msgstr "フレームグラフを見ると、どこがボトルネックになっているかがわかります。それは、 `StringBuilder.delete()` が呼び出され、 `System.arraycopy()` を呼び出すときです。問題は、100万文字を非常に小さな単位でシフトさせる必要があることです。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/2.7/guides/native-reference.adoc:860
#, no-wrap
msgid "Perf flamegraph with symbols"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/2.7/guides/native-reference.adoc:860
#, no-wrap
msgid "native-reference-perf-flamegraph-symbols.svg"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:862
#, no-wrap
msgid "Multi-Thread"
msgstr "マルチスレッド"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:867
msgid "Multi-threaded programs might require special attention when trying to understand their runtime behaviour.  To demonstrate this, add this `MulticastResource` code to your project (example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo6/DatagramTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:883
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.net.InetSocketAddress;\n"
"import java.nio.ByteBuffer;\n"
"import java.nio.channels.DatagramChannel;\n"
"import java.util.concurrent.ExecutorService;\n"
"import java.util.concurrent.Executors;\n"
"import java.util.concurrent.ThreadFactory;\n"
"import java.util.concurrent.atomic.AtomicInteger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:893
#, no-wrap
msgid ""
"@Path(\"/multicast\")\n"
"public class MulticastResource\n"
"{\n"
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String send() throws Exception {\n"
"        sendMulticasts();\n"
"        return \"Multicast packets sent\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:898
#, no-wrap
msgid ""
"    static void sendMulticasts() throws Exception {\n"
"        DatagramChannel ch = DatagramChannel.open();\n"
"        ch.bind(new InetSocketAddress(5555));\n"
"        ch.configureBlocking(false);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:906
#, no-wrap
msgid ""
"        ExecutorService pool =\n"
"            Executors.newCachedThreadPool(new ShortNameThreadFactory());\n"
"        for (int i = 0; i < 10; i++) {\n"
"            pool.submit(() -> {\n"
"                final ByteBuffer buf = ByteBuffer.allocateDirect(1000);\n"
"                final InetSocketAddress remoteAddr =\n"
"                    new InetSocketAddress(\"127.0.0.1\", 5556);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:913
#, no-wrap
msgid ""
"                while (true) {\n"
"                    buf.clear();\n"
"                    ch.send(buf, remoteAddr);\n"
"                }\n"
"            });\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:916
#, no-wrap
msgid ""
"        System.out.println(\"Warming up...\");\n"
"        Thread.sleep(3000);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:920
#, no-wrap
msgid ""
"        System.out.println(\"Benchmarking...\");\n"
"        Thread.sleep(5000);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:922
#, no-wrap
msgid "    private static final class ShortNameThreadFactory implements ThreadFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:925
#, no-wrap
msgid ""
"        private final AtomicInteger threadNumber = new AtomicInteger(1);\n"
"        private final String namePrefix = \"thread-\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:931
#, no-wrap
msgid ""
"        public Thread newThread(Runnable r) {\n"
"            return new Thread(r, namePrefix + threadNumber.getAndIncrement());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:934
msgid "Build the native executable with debug info:"
msgstr "デバッグ情報付きでネイティブ実行可能ファイルをビルドします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:943
msgid "From inside the tools container (as privileged user) run the native executable through `perf`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:950
msgid "Invoke the endpoint to send the multicast packets:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:954
#, no-wrap
msgid "curl -w '\\n' http://localhost:8080/multicast\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:957
msgid "Make and open a flamegraph:"
msgstr "フレームグラフを作成して開いてください。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/2.7/guides/native-reference.adoc:964
#, no-wrap
msgid "Muti-thread perf flamegraph with separate threads"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/2.7/guides/native-reference.adoc:964
#, no-wrap
msgid "native-reference-multi-flamegraph-separate-threads.svg"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:968
msgid "The flamegraph produced looks odd. Each thread is treated independently even though they all do the same work.  This makes it difficult to have a clear picture of the bottlenecks in the program."
msgstr "作成されたフレームグラフは奇妙に見えます。すべてのスレッドが同じ作業をしているにもかかわらず、各スレッドが独立して扱われています。これでは、プログラムのボトルネックを明確に把握することができません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:971
msgid "This is happening because from a `perf` perspective, each thread is a different command.  We can see that if we inspect `perf report`:"
msgstr "これは、 `perf` の観点から見ると、各スレッドが異なるコマンドであるために起こっています。 `perf report` を確認するとわかります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:982
#, no-wrap
msgid ""
"perf report --stdio\n"
"# Children      Self  Command          Shared Object       Symbol\n"
"# ........  ........  ...............  ......................................  ......................................................................................\n"
"...\n"
"     6.95%     0.03%  thread-2         debugging-native-1.0.0-SNAPSHOT-runner  [.] MulticastResource_lambda$sendMulticasts$0_cb1f7b5dcaed7dd4e3f90d18bad517d67eae4d88\n"
"...\n"
"     4.60%     0.02%  thread-10        debugging-native-1.0.0-SNAPSHOT-runner  [.] MulticastResource_lambda$sendMulticasts$0_cb1f7b5dcaed7dd4e3f90d18bad517d67eae4d88\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:986
msgid "This can be worked around by applying some modifications to the perf output, in order to make all threads have the same name. E.g."
msgstr "これは、すべてのスレッドが同じ名前になるように、perfの出力にいくつかの変更を加えることで回避できます。例えば、以下のようになります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:991
#, no-wrap
msgid ""
"perf script | sed -E \"s/thread-[0-9]*/thread/\" | ${FG_HOME}/stackcollapse-perf.pl > out.perf-folded\n"
"${FG_HOME}/flamegraph.pl out.perf-folded > flamegraph.svg\n"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/2.7/guides/native-reference.adoc:993
#, no-wrap
msgid "Muti-thread perf flamegraph with joined threads"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/2.7/guides/native-reference.adoc:993
#, no-wrap
msgid "native-reference-multi-flamegraph-joined-threads.svg"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:997
msgid "When you open the flamegraph, you will see all threads' work collapsed into a single area.  Then, you can clearly see that there's some locking that could affect performance."
msgstr "フレームグラフを開くと、すべてのスレッドの作業が1つの領域に折りたたまれているのがわかります。そして、パフォーマンスに影響を与える可能性のあるロックがあることがはっきりとわかります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/native-reference.adoc:998
#, no-wrap
msgid "Debugging Native Crashes"
msgstr "ネイティブ・クラッシュのデバッグ"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1005
msgid "One of the drawbacks of using native executables is that they cannot be debugged using the standard Java debuggers, instead we need to debug them using `gdb`, the GNU Project debugger.  To demonstrate how to do this, we are going to generate a native Quarkus application that crashes due to a Segmentation Fault when accessing http://localhost:8080/crash.  To achieve this, add the following REST resource to the project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1011
#, no-wrap
msgid "import sun.misc.Unsafe;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1017
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.lang.reflect.Field;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1020
#, no-wrap
msgid ""
"@Path(\"/crash\")\n"
"public class CrashResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1036
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        Field theUnsafe = null;\n"
"        try {\n"
"            theUnsafe = Unsafe.class.getDeclaredField(\"theUnsafe\");\n"
"            theUnsafe.setAccessible(true);\n"
"            Unsafe unsafe = (Unsafe) theUnsafe.get(null);\n"
"            unsafe.copyMemory(0, 128, 256);\n"
"        } catch (NoSuchFieldException | IllegalAccessException e) {\n"
"            e.printStackTrace();\n"
"        }\n"
"        return \"Never happens\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1040
msgid "This code will try to copy 256 bytes from address `0x0` to `0x80` resulting in a Segmentation Fault.  To verify this compile and run the example application:"
msgstr "このコードは、アドレス `0x0` から `0x80` へ 256 バイトをコピーしようとするため、セグメンテーション・フォールトが発生します。これを確認するには、サンプルアプリケーションをコンパイルして実行します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1048
#, no-wrap
msgid ""
"$ ./mvnw package -DskipTests -Pnative\n"
"...\n"
"$ docker run -i --rm -p 8080:8080 test/debugging-native:1.0.0-SNAPSHOT\n"
"...\n"
"$ curl http://localhost:8080/crash\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1051
msgid "This will result in the following output:"
msgstr "これにより、次のような出力が得られます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1058
#, no-wrap
msgid ""
"$ docker run -i --rm -p 8080:8080 test/debugging-native:1.0.0-SNAPSHOT\n"
"...\n"
"Segfault detected, aborting process. Use runtime option -R:-InstallSegfaultHandler if you don't want to use SubstrateSegfaultHandler.\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1064
msgid "The omitted output above contains clues to what caused the issue, but in this exercise we are going to assume that no information was provided.  Let’s try to debug the segmentation fault using `gdb`.  To do that, go to the root of the project and enter the tools container:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1068
#, no-wrap
msgid "docker run -t -i --rm -v ${PWD}:/data -p 8080:8080 fedora-tools:v1 /bin/bash\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1071
msgid "Then start the application in `gdb` and execute `run`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1080
#, no-wrap
msgid ""
"gdb ./target/debugging-native-1.0.0-SNAPSHOT-runner\n"
"...\n"
"Reading symbols from ./target/debugging-native-1.0.0-SNAPSHOT-runner...\n"
"(No debugging symbols found in ./target/debugging-ntaive-1.0.0-SNAPSHOT-runner)\n"
"(gdb) run\n"
"Starting program: /data/target/debugging-native-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1083
msgid "Next, try to access http://localhost:8080/crash:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1086
#, no-wrap
msgid "curl http://localhost:8080/crash\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1089
#: upstream/_versions/2.7/guides/native-reference.adoc:1133
msgid "This will result in the following message in `gdb`:"
msgstr "これにより、 `gdb` に次のようなメッセージが表示されます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1095
#, no-wrap
msgid ""
"Thread 4 \"ecutor-thread-0\" received signal SIGSEGV, Segmentation fault.\n"
"[Switching to Thread 0x7fe103dff640 (LWP 190)]\n"
"0x0000000000461f6e in ?? ()\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1098
msgid "If we try to get more info about the backtrace that led to this crash we will see that there is not enough information available."
msgstr "このクラッシュの原因となったバックトレースの情報を得ようとすると、十分な情報が得られないことがわかります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1109
#, no-wrap
msgid ""
"(gdb) bt\n"
"#0  0x0000000000418b5e in ?? ()\n"
"#1  0x00007ffff6f2d328 in ?? ()\n"
"#2  0x0000000000418a04 in ?? ()\n"
"#3  0x00007ffff44062a0 in ?? ()\n"
"#4  0x00000000010c3dd3 in ?? ()\n"
"#5  0x0000000000000100 in ?? ()\n"
"#6  0x0000000000000000 in ?? ()\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1114
msgid "This is because we didn’t compile the Quarkus application with `-Dquarkus.native.debug.enabled`, so `gdb` cannot find debugging symbols for our native executable, as indicated by the \"_No debugging symbols found in ./target/debugging-native-1.0.0-SNAPSHOT-runner_\" message in the beginning of `gdb`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1117
msgid "Recompiling the Quarkus application with `-Dquarkus.native.debug.enabled` and rerunning it through `gdb` we are now able to get a backtrace making clear what caused the crash.  On top of that, add `-H:-OmitInlinedMethodDebugLineInfo` option to avoid inlined methods being omitted from the backtrace:"
msgstr "`-Dquarkus.native.debug.enabled` でQuarkusアプリケーションを再コンパイルし、 `gdb` で再実行すると、クラッシュの原因を明らかにするバックトレースを得ることができます。さらに、 `-H:-OmitInlinedMethodDebugLineInfo` オプションを追加すると、インライン化されたメソッドがバックトレースから省略されるのを防ぐことができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1130
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.debug.enabled \\\n"
"    -Dquarkus.native.additional-build-args=-H:-OmitInlinedMethodDebugLineInfo\n"
"...\n"
"$ gdb ./target/debugging-native-1.0.0-SNAPSHOT-runner\n"
"Reading symbols from ./target/debugging-native-1.0.0-SNAPSHOT-runner...\n"
"(gdb) run\n"
"Starting program: /data/target/debugging-native-1.0.0-SNAPSHOT-runner\n"
"...\n"
"$ curl http://localhost:8080/crash\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1141
#, no-wrap
msgid ""
"Thread 4 \"ecutor-thread-0\" received signal SIGSEGV, Segmentation fault.\n"
"[Switching to Thread 0x7fffeffff640 (LWP 362984)]\n"
"com.oracle.svm.core.UnmanagedMemoryUtil::copyLongsBackward(org.graalvm.word.Pointer *, org.graalvm.word.Pointer *, org.graalvm.word.UnsignedWord *) ()\n"
"\tat com/oracle/svm/core/UnmanagedMemoryUtil.java:169\n"
"169    com/oracle/svm/core/UnmanagedMemoryUtil.java: No such file or directory.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1145
msgid "We already see that `gdb` is able to tell us which method caused the crash and where it’s located in the source code.  We can also get a backtrace of the call graph that led us to this state:"
msgstr "`gdb` は、どのメソッドがクラッシュの原因となったのか、それがソースコードのどこにあるのかを教えてくれることがすでにわかりました。また、この状態に至ったコールグラフのバックトレースも得ることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1158
#, no-wrap
msgid ""
"(gdb) bt\n"
"#0  com.oracle.svm.core.UnmanagedMemoryUtil::copyLongsBackward(org.graalvm.word.Pointer *, org.graalvm.word.Pointer *, org.graalvm.word.UnsignedWord *) () at com/oracle/svm/core/UnmanagedMemoryUtil.java:169\n"
"#1  0x0000000000461e14 in com.oracle.svm.core.UnmanagedMemoryUtil::copyBackward(org.graalvm.word.Pointer *, org.graalvm.word.Pointer *, org.graalvm.word.UnsignedWord *) () at com/oracle/svm/core/UnmanagedMemoryUtil.java:110\n"
"#2  0x0000000000461dc8 in com.oracle.svm.core.UnmanagedMemoryUtil::copy(org.graalvm.word.Pointer *, org.graalvm.word.Pointer *, org.graalvm.word.UnsignedWord *) () at com/oracle/svm/core/UnmanagedMemoryUtil.java:67\n"
"#3  0x000000000045d3c0 in com.oracle.svm.core.JavaMemoryUtil::unsafeCopyMemory(java.lang.Object *, long, java.lang.Object *, long, long) () at com/oracle/svm/core/JavaMemoryUtil.java:276\n"
"#4  0x00000000013277de in jdk.internal.misc.Unsafe::copyMemory0 () at com/oracle/svm/core/jdk/SunMiscSubstitutions.java:125\n"
"#5  jdk.internal.misc.Unsafe::copyMemory(java.lang.Object *, long, java.lang.Object *, long, long) () at jdk/internal/misc/Unsafe.java:788\n"
"#6  0x00000000013b1a3f in jdk.internal.misc.Unsafe::copyMemory () at jdk/internal/misc/Unsafe.java:799\n"
"#7  sun.misc.Unsafe::copyMemory () at sun/misc/Unsafe.java:585\n"
"#8  org.acme.CrashResource::hello(void) () at org/acme/CrashResource.java:22\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1161
msgid "Similarly, we can get a backtrace of the call graph of other threads."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1163
msgid "First, we can list the available threads with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1174
#, no-wrap
msgid ""
"(gdb) info threads\n"
"  Id   Target Id                                             Frame \n"
"  1    Thread 0x7fcc62a07d00 (LWP 322) \"debugging-nativ\" 0x00007fcc62b8b77a in __futex_abstimed_wait_common () from /lib64/libc.so.6\n"
"  2    Thread 0x7fcc60eff640 (LWP 326) \"gnal Dispatcher\" 0x00007fcc62b8b77a in __futex_abstimed_wait_common () from /lib64/libc.so.6\n"
"* 4    Thread 0x7fcc5b7fe640 (LWP 328) \"ecutor-thread-0\" com.oracle.svm.core.UnmanagedMemoryUtil::copyLongsBackward(org.graalvm.word.Pointer *, org.graalvm.word.Pointer *, org.graalvm.word.UnsignedWord *) () at com/oracle/svm/core/UnmanagedMemoryUtil.java:169\n"
"  5    Thread 0x7fcc5abff640 (LWP 329) \"-thread-checker\" 0x00007fcc62b8b77a in __futex_abstimed_wait_common () from /lib64/libc.so.6\n"
"  6    Thread 0x7fcc59dff640 (LWP 330) \"ntloop-thread-0\" 0x00007fcc62c12c9e in epoll_wait () from /lib64/libc.so.6\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1177
msgid "select the thread we want to inspect, e.g. thread 1:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1184
#, no-wrap
msgid ""
"(gdb) thread 1\n"
"[Switching to thread 1 (Thread 0x7ffff7a58d00 (LWP 1028851))]\n"
"#0  __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x2cd7adc) at futex-internal.c:57\n"
"57\t    return INTERNAL_SYSCALL_CANCEL (futex_time64, futex_word, op, expected,\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1187
msgid "and, finally, print the stack trace:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1215
#, no-wrap
msgid ""
"(gdb) bt\n"
"#0  __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x2cd7adc) at futex-internal.c:57\n"
"#1  __futex_abstimed_wait_common (futex_word=futex_word@entry=0x2cd7adc, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, private=private@entry=0, \n"
"    cancel=cancel@entry=true) at futex-internal.c:87\n"
"#2  0x00007ffff7bdd79f in __GI___futex_abstimed_wait_cancelable64 (futex_word=futex_word@entry=0x2cd7adc, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, \n"
"    private=private@entry=0) at futex-internal.c:139\n"
"#3  0x00007ffff7bdfeb0 in __pthread_cond_wait_common (abstime=0x0, clockid=0, mutex=0x2ca07b0, cond=0x2cd7ab0) at pthread_cond_wait.c:504\n"
"#4  ___pthread_cond_wait (cond=0x2cd7ab0, mutex=0x2ca07b0) at pthread_cond_wait.c:619\n"
"#5  0x00000000004e2014 in com.oracle.svm.core.posix.headers.Pthread::pthread_cond_wait () at com/oracle/svm/core/posix/thread/PosixJavaThreads.java:252\n"
"#6  com.oracle.svm.core.posix.thread.PosixParkEvent::condWait(void) () at com/oracle/svm/core/posix/thread/PosixJavaThreads.java:252\n"
"#7  0x0000000000547070 in com.oracle.svm.core.thread.JavaThreads::park(void) () at com/oracle/svm/core/thread/JavaThreads.java:764\n"
"#8  0x0000000000fc5f44 in jdk.internal.misc.Unsafe::park(boolean, long) () at com/oracle/svm/core/thread/Target_jdk_internal_misc_Unsafe_JavaThreads.java:49\n"
"#9  0x0000000000eac1ad in java.util.concurrent.locks.LockSupport::park(java.lang.Object *) () at java/util/concurrent/locks/LockSupport.java:194\n"
"#10 0x0000000000ea5d68 in java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject::awaitUninterruptibly(void) ()\n"
"    at java/util/concurrent/locks/AbstractQueuedSynchronizer.java:2018\n"
"#11 0x00000000008b6b30 in io.quarkus.runtime.ApplicationLifecycleManager::run(io.quarkus.runtime.Application *, java.lang.Class *, java.util.function.BiConsumer *, java.lang.String[] *) ()\n"
"    at io/quarkus/runtime/ApplicationLifecycleManager.java:144\n"
"#12 0x00000000008bc055 in io.quarkus.runtime.Quarkus::run(java.lang.Class *, java.util.function.BiConsumer *, java.lang.String[] *) () at io/quarkus/runtime/Quarkus.java:67\n"
"#13 0x000000000045c88b in io.quarkus.runtime.Quarkus::run () at io/quarkus/runtime/Quarkus.java:41\n"
"#14 io.quarkus.runtime.Quarkus::run () at io/quarkus/runtime/Quarkus.java:120\n"
"#15 0x000000000045c88b in io.quarkus.runner.GeneratedMain::main ()\n"
"#16 com.oracle.svm.core.JavaMainWrapper::runCore () at com/oracle/svm/core/JavaMainWrapper.java:150\n"
"#17 com.oracle.svm.core.JavaMainWrapper::run(int, org.graalvm.nativeimage.c.type.CCharPointerPointer *) () at com/oracle/svm/core/JavaMainWrapper.java:186\n"
"#18 0x000000000048084d in com.oracle.svm.core.code.IsolateEnterStub::JavaMainWrapper_run_5087f5482cc9a6abc971913ece43acb471d2631b(int, org.graalvm.nativeimage.c.type.CCharPointerPointer *)\n"
"    () at com/oracle/svm/core/JavaMainWrapper.java:280\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1218
msgid "Alternatively, we can list the backtraces of all threads with a single command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1222
#, no-wrap
msgid "(gdb) thread apply all backtrace\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1242
#, no-wrap
msgid ""
"Thread 22 (Thread 0x7fffc8dff640 (LWP 1028872) \"tloop-thread-15\"):\n"
"#0  0x00007ffff7c64c2e in epoll_wait (epfd=8, events=0x2ca3880, maxevents=1024, timeout=-1) at ../sysdeps/unix/sysv/linux/epoll_wait.c:30\n"
"#1  0x000000000166e01c in Java_sun_nio_ch_EPoll_wait ()\n"
"#2  0x00000000011bfece in sun.nio.ch.EPoll::wait(int, long, int, int) () at com/oracle/svm/core/stack/JavaFrameAnchors.java:42\n"
"#3  0x00000000011c08d2 in sun.nio.ch.EPollSelectorImpl::doSelect(java.util.function.Consumer *, long) () at sun/nio/ch/EPollSelectorImpl.java:120\n"
"#4  0x00000000011d8977 in sun.nio.ch.SelectorImpl::lockAndDoSelect(java.util.function.Consumer *, long) () at sun/nio/ch/SelectorImpl.java:124\n"
"#5  0x0000000000705720 in sun.nio.ch.SelectorImpl::select () at sun/nio/ch/SelectorImpl.java:141\n"
"#6  io.netty.channel.nio.SelectedSelectionKeySetSelector::select(void) () at io/netty/channel/nio/SelectedSelectionKeySetSelector.java:68\n"
"#7  0x0000000000703c2e in io.netty.channel.nio.NioEventLoop::select(long) () at io/netty/channel/nio/NioEventLoop.java:813\n"
"#8  0x0000000000701a5f in io.netty.channel.nio.NioEventLoop::run(void) () at io/netty/channel/nio/NioEventLoop.java:460\n"
"#9  0x00000000008496df in io.netty.util.concurrent.SingleThreadEventExecutor$4::run(void) () at io/netty/util/concurrent/SingleThreadEventExecutor.java:986\n"
"#10 0x0000000000860762 in io.netty.util.internal.ThreadExecutorMap$2::run(void) () at io/netty/util/internal/ThreadExecutorMap.java:74\n"
"#11 0x0000000000840da4 in io.netty.util.concurrent.FastThreadLocalRunnable::run(void) () at io/netty/util/concurrent/FastThreadLocalRunnable.java:30\n"
"#12 0x0000000000b7dd04 in java.lang.Thread::run(void) () at java/lang/Thread.java:829\n"
"#13 0x0000000000547dcc in com.oracle.svm.core.thread.JavaThreads::threadStartRoutine(org.graalvm.nativeimage.ObjectHandle *) () at com/oracle/svm/core/thread/JavaThreads.java:597\n"
"#14 0x00000000004e15b1 in com.oracle.svm.core.posix.thread.PosixJavaThreads::pthreadStartRoutine(com.oracle.svm.core.thread.JavaThreads$ThreadStartData *) () at com/oracle/svm/core/posix/thread/PosixJavaThreads.java:194\n"
"#15 0x0000000000480984 in com.oracle.svm.core.code.IsolateEnterStub::PosixJavaThreads_pthreadStartRoutine_e1f4a8c0039f8337338252cd8734f63a79b5e3df(com.oracle.svm.core.thread.JavaThreads$ThreadStartData *) () at com/oracle/svm/core/posix/thread/PosixJavaThreads.java:182\n"
"#16 0x00007ffff7be0b1a in start_thread (arg=<optimized out>) at pthread_create.c:443\n"
"#17 0x00007ffff7c65650 in clone3 () at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1262
#, no-wrap
msgid ""
"Thread 21 (Thread 0x7fffc97fa640 (LWP 1028871) \"tloop-thread-14\"):\n"
"#0  0x00007ffff7c64c2e in epoll_wait (epfd=53, events=0x2cd0970, maxevents=1024, timeout=-1) at ../sysdeps/unix/sysv/linux/epoll_wait.c:30\n"
"#1  0x000000000166e01c in Java_sun_nio_ch_EPoll_wait ()\n"
"#2  0x00000000011bfece in sun.nio.ch.EPoll::wait(int, long, int, int) () at com/oracle/svm/core/stack/JavaFrameAnchors.java:42\n"
"#3  0x00000000011c08d2 in sun.nio.ch.EPollSelectorImpl::doSelect(java.util.function.Consumer *, long) () at sun/nio/ch/EPollSelectorImpl.java:120\n"
"#4  0x00000000011d8977 in sun.nio.ch.SelectorImpl::lockAndDoSelect(java.util.function.Consumer *, long) () at sun/nio/ch/SelectorImpl.java:124\n"
"#5  0x0000000000705720 in sun.nio.ch.SelectorImpl::select () at sun/nio/ch/SelectorImpl.java:141\n"
"#6  io.netty.channel.nio.SelectedSelectionKeySetSelector::select(void) () at io/netty/channel/nio/SelectedSelectionKeySetSelector.java:68\n"
"#7  0x0000000000703c2e in io.netty.channel.nio.NioEventLoop::select(long) () at io/netty/channel/nio/NioEventLoop.java:813\n"
"#8  0x0000000000701a5f in io.netty.channel.nio.NioEventLoop::run(void) () at io/netty/channel/nio/NioEventLoop.java:460\n"
"#9  0x00000000008496df in io.netty.util.concurrent.SingleThreadEventExecutor$4::run(void) () at io/netty/util/concurrent/SingleThreadEventExecutor.java:986\n"
"#10 0x0000000000860762 in io.netty.util.internal.ThreadExecutorMap$2::run(void) () at io/netty/util/internal/ThreadExecutorMap.java:74\n"
"#11 0x0000000000840da4 in io.netty.util.concurrent.FastThreadLocalRunnable::run(void) () at io/netty/util/concurrent/FastThreadLocalRunnable.java:30\n"
"#12 0x0000000000b7dd04 in java.lang.Thread::run(void) () at java/lang/Thread.java:829\n"
"#13 0x0000000000547dcc in com.oracle.svm.core.thread.JavaThreads::threadStartRoutine(org.graalvm.nativeimage.ObjectHandle *) () at com/oracle/svm/core/thread/JavaThreads.java:597\n"
"#14 0x00000000004e15b1 in com.oracle.svm.core.posix.thread.PosixJavaThreads::pthreadStartRoutine(com.oracle.svm.core.thread.JavaThreads$ThreadStartData *) () at com/oracle/svm/core/posix/thread/PosixJavaThreads.java:194\n"
"#15 0x0000000000480984 in com.oracle.svm.core.code.IsolateEnterStub::PosixJavaThreads_pthreadStartRoutine_e1f4a8c0039f8337338252cd8734f63a79b5e3df(com.oracle.svm.core.thread.JavaThreads$ThreadStartData *) () at com/oracle/svm/core/posix/thread/PosixJavaThreads.java:182\n"
"#16 0x00007ffff7be0b1a in start_thread (arg=<optimized out>) at pthread_create.c:443\n"
"#17 0x00007ffff7c65650 in clone3 () at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1265
#, no-wrap
msgid ""
"Thread 20 (Thread 0x7fffc9ffb640 (LWP 1028870) \"tloop-thread-13\"):\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1268
msgid "Note, however, that despite being able to get a backtrace we can still not list the source code at point with the `list` command."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1273
#, no-wrap
msgid ""
"(gdb) list\n"
"164    in com/oracle/svm/core/UnmanagedMemoryUtil.java\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1279
msgid "This is because `gdb` is not aware of the location of the source files.  We are running the executable outside of the target directory.  To fix this we can either rerun `gdb` from the target directory or, run `directory target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources` e.g.:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1295
#, no-wrap
msgid ""
"(gdb) directory target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources\n"
"Source directories searched: /data/target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources:$cdir:$cwd\n"
"(gdb) list\n"
"164        \tUnsignedWord offset = size;\n"
"165        \twhile (offset.aboveOrEqual(32)) {\n"
"166            \toffset = offset.subtract(32);\n"
"167            \tPointer src = from.add(offset);\n"
"168            \tPointer dst = to.add(offset);\n"
"169            \tlong l24 = src.readLong(24);\n"
"170            \tlong l16 = src.readLong(16);\n"
"171            \tlong l8 = src.readLong(8);\n"
"172            \tlong l0 = src.readLong(0);\n"
"173            \tdst.writeLong(24, l24);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1302
msgid "We can now examine line `169` and get a first hint of what might be wrong (in this case we see that it fails at the first read from src which contains the address `0x0000`), or walk up the stack using `gdb`’s `up` command to see what part of our code led to this situation.  To learn more about using gdb to debug native executables see https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/DebugInfo.md[here]."
msgstr "`169` 行を調べて、何が問題なのか最初のヒントを得ることができます（この場合、アドレス `0x0000` を含む src からの最初の読み取りに失敗していることがわかります）。また、 `gdb` の `up` コマンドを使ってスタックをさかのぼり、コードのどの部分がこのような状況を引き起こしたかを確認することができます。ネイティブ実行可能ファイルをデバッグするためのgdbの使い方については、 link:https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/DebugInfo.md[こちら]をご覧ください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/native-reference.adoc:1303
#, no-wrap
msgid "Frequently Asked Questions"
msgstr "よくある質問"

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:1305
#, no-wrap
msgid "Why is the process of generating a native executable slow?"
msgstr "ネイティブ実行可能ファイルを生成するプロセスが遅いのはなぜですか？"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1309
msgid "Native executable generation is a multi-step process.  The analysis and compile steps are the most expensive of all and hence the ones that dominate the time spent generating the native executable."
msgstr "ネイティブ実行可能ファイルの生成は、複数のステップで構成されています。その中でも解析とコンパイルのステップは最もコストがかかるため、ネイティブ実行可能ファイルの生成にかかる時間の大半を占めます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1315
msgid "In the analysis phase, a static points-to analysis starts from the main method of the program to find out what is reachable.  As new classes are discovered, some of them will be initialized during this process depending on the configuration.  In the next step, the heap is snapshotted and checks are made to see which types need to be available at runtime.  The initialization and heap snapshotting can cause new types to be discovered, in which case the process is repeated.  The process stops when a fixed point is reached, that is when the reachable program grows no more."
msgstr "解析フェーズでは、プログラムのメインメソッドから静的なPoint-to 解析を開始し、到達可能なものを見つけ出します。新しいクラスが発見されると、設定に応じてこのプロセス中にその一部が初期化されます。次のステップでは、ヒープがスナップショットされ、どのタイプが実行時に利用可能である必要があるかのチェックが行われます。初期化とヒープのスナップショットにより、新しい型が発見されることがありますが、その場合はこのプロセスが繰り返されます。このプロセスは、到達可能なプログラムがこれ以上成長しないという固定点に達したときに停止します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1317
msgid "The compilation step is pretty straightforward, it simply compiles all the reachable code."
msgstr "コンパイルのステップは非常に簡単で、到達可能なすべてのコードを単純にコンパイルします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1324
msgid "The time spent in analysis and compilation phases depends on how big the application is.  The bigger the application, the longer it takes to compile it.  However, there are certain features that can have an exponential effect.  For example, when registering types and methods for reflection access, the analysis can’t easily see what’s behind those types or methods, so it has to do more work to complete the analysis step."
msgstr "解析とコンパイルの段階でかかる時間は、アプリケーションの大きさによって異なります。アプリケーションが大きければ大きいほど、コンパイルにかかる時間は長くなります。ただし、指数関数的な効果をもたらす機能もあります。例えば、リフレクションアクセスのために型やメソッドを登録する場合、解析はその型やメソッドの背後にあるものを簡単に見ることができないため、解析ステップを完了するためにはより多くの仕事をしなければなりません。"

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:1325
#, no-wrap
msgid "Why is runtime performance of a native executable inferior compared to JVM mode?"
msgstr "JVMモードと比較して、ネイティブ実行可能ファイルのランタイムパフォーマンスが劣るのはなぜですか？"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1330
msgid "As with most things in life there are some trade offs involved when choosing native compilation over JVM mode.  So depending on the application the runtime performance of a native application might be slower compared to JVM mode, though that’s not always the case."
msgstr "多くの場合、JVMモードではなくネイティブコンパイルを選択すると、いくつかのトレードオフが発生します。そのため、アプリケーションによっては、ネイティブアプリケーションの実行時パフォーマンスがJVMモードに比べて遅くなることがありますが、絶対にそうであるとは限りません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1336
msgid "JVM execution of an application includes runtime optimization of the code that profits from profile information built up during execution.  That includes the opportunities to inline a lot more of the code, locate hot code on direct paths (i.e. ensure better instruction cache locality)  and cut out a lot of the code on cold paths (on the JVM a lot of code does not get compiled until something tries to execute it -- it is replaced with a trap that causes deoptimization and recompilation).  Removal of cold paths provides many more optimization opportunities than are available for ahead of time compilation because it significantly reduces the branch complexity and combinatorial logic of the smaller amount of hot code that is compiled."
msgstr "JVMによるアプリケーションの実行には、実行中に蓄積されるプロファイル情報を利用したコードの実行時最適化が含まれます。これには、より多くのコードをインライン化したり、ホットコードをダイレクトパスに配置したり（つまり、より良い命令キャッシュのローカリティを確保する）、コールドパスにある多くのコードをカットしたりする機会が含まれます（JVMでは、多くのコードが何かが実行しようとするまでコンパイルされず、最適化解除や再コンパイルを引き起こすトラップに置き換えられます）。コールドパスを取り除くことで、コンパイルされる少量のホットコードの分岐の複雑さや組み合わせロジックが大幅に削減されるため、先行してコンパイルする場合よりも多くの最適化の機会が得られます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1339
msgid "By contrast, native executable compilation has to cater for all possible execution paths when it compiles code offline since it does not know which are the hot or cold paths and cannot use the trick of planting a trap and recompiling if it is hit. For the same reason it cannot load the dice to ensure that code cache conflicts are minimized by co-locating hot paths adjacent.  Native executable generation is able to remove some code because of the closed world hypothesis but that is often not enough to make up for all the benefits that profiling and runtime deopt & recompile provides to the JVM JIT compiler."
msgstr "一方、ネイティブ実行可能ファイルのコンパイルでは、オフラインでコードをコンパイルする際に、すべての可能な実行経路に対応しなければなりません。なぜならば、ホットパスやコールドパスがわからないため、罠を仕掛けて、それに当たったら再コンパイルするというようなトリックが使えないからです。同じ理由で、ホットパスを隣接して配置することでコードキャッシュの衝突を最小限に抑えるようなサイコロを積むこともできません。ネイティブ実行可能ファイルの生成は、閉じた世界の仮説により、いくつかのコードを削除することができますが、それだけでは、プロファイリングや実行時最適化解除＆再コンパイルがJVM JITコンパイラに提供するすべての利点を補うことはできません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1341
msgid "Note, however, that there is a price you pay for that potentially higher JVM speed, and that price is in increased resource usage (both CPU and memory) and startup time because:"
msgstr "ただし、JVMの速度が向上する可能性があるため、その代償として、リソース（CPUとメモリの両方）の使用量と起動時間が増加することに注意してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1343
msgid "it takes some time before the JIT kicks in and fully optimizes the code."
msgstr "JITが作動してコードを完全に最適化するまでに時間がかかります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1344
msgid "the JIT compiler consumes resources that could be utilized by the application."
msgstr "JIT コンパイラは、アプリケーションが利用できるリソースを消費します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1345
msgid "the JVM has to retain a lot more metadata and compiler/profiler data to support the better optimizations that it can offer."
msgstr "JVMは、より良い最適化をサポートするために、より多くのメタデータやコンパイラ/プロファイラのデータを保持しなければなりません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1347
msgid "The reason for 1) is that code needs to be run interpreted for some time and, possibly, to be compiled several times before all potential optimizations are realized to ensure that:"
msgstr "1)の理由は、コードはしばらくの間、インタプリタ実行する必要があり、場合によっては、以下を担保する全ての潜在的な最適化が実現される前に、何度もコンパイルする必要があるからです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1349
msgid "it’s worth compiling that code path, i.e. it’s being executed enough times, and that"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1350
msgid "we have enough profiling data to perform meaningful optimizations."
msgstr "意味のある最適化を行うのに十分なプロファイリングデータを持っていること"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1353
msgid "An implication of 1) is that for small, short-lived applications a native executable may well be a better bet.  Although the compiled code is not as well optimized it is available straight away."
msgstr "1)の意味するところは、小規模で短命なアプリケーションには、ネイティブ実行可能ファイルの方が適しているということです。コンパイルされたコードは最適化されていませんが、すぐに利用できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1356
msgid "The reason for 2) is that the JVM is essentially running the compiler at runtime in parallel with the application itself.  In the case of native executables the compiler is run ahead of time removing the need to run the compiler in parallel with the application."
msgstr "2)の理由は、JVMは基本的に実行時にアプリケーションと並行してコンパイラを実行しているからです。ネイティブ実行可能ファイルの場合、コンパイラは事前に実行されるため、アプリケーションと並行してコンパイラを実行する必要がありません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1365
msgid "There are several reasons for 3). The JVM does not have a closed world assumption.  So, it has to be able to recompile code if loading of new classes implies that it needs to revise optimistic assumptions made at compile time.  For example, if an interface has only one implementation it can make a call jump directly to that code.  However, in the case where a second implementation class is loaded the call site needs to be patched to test the type of the receiver instance and jump to the code that belongs to its class.  Supporting optimizations like this one requires keeping track of a lot more details of the class base than a native executable, including recording the full class and interface hierarchy, details of which methods override other methods, all method bytecode etc.  In a native executable most of the details of class structure and bytecode can be ignored at run time."
msgstr "3)にはいくつかの理由があります。JVMは閉じた世界を想定していません。そのため、新しいクラスのロードにより、コンパイル時の楽観的な仮定を修正する必要がある場合には、コードを再コンパイルできなければなりません。例えば、あるインターフェイスの実装が1つだけの場合、そのコードに直接コールジャンプすることができます。しかし、2つ目の実装クラスがロードされた場合には、レシーバのインスタンスのタイプをテストして、そのクラスに属するコードにジャンプするようにコールサイトを修正する必要があります。このような最適化をサポートするには、ネイティブ実行可能ファイルよりもクラスベースの詳細を記録しておく必要があります。これには、完全なクラスとインターフェイスの階層、どのメソッドが他のメソッドをオーバーライドするかの詳細、すべてのメソッドのバイトコードなどが含まれます。ネイティブ実行可能ファイルでは、クラス構造やバイトコードの詳細のほとんどは実行時には無視できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1370
msgid "The JVM also has to cope with changes to the class base or execution profiles that result in a thread going down a previously cold path.  At that point the JVM has to jump out of the compiled code into the interpreter and recompile the code to cater for a new execution profile that includes the previously cold path.  That requires keeping runtime info that allow a compiled stack frame to be replaced with one or more interpreter frames.  It also requires runtime extensible profile counters to be allocated and updated to track what has or has not been executed."
msgstr "また、JVMはクラスベースや実行プロファイルの変更にも対応しなければならず、その結果、スレッドが以前のコールドパスを通ることになります。その時点で、JVMはコンパイルされたコードからインタープリタにジャンプし、以前のコールドパスを含む新しい実行プロファイルに対応するためにコードを再コンパイルしなければなりません。そのためには、コンパイルされたスタックフレームを1つまたは複数のインタープリタフレームに置き換えることができる実行時情報を保持する必要があります。また、実行されたもの、されなかったものを追跡するために、ランタイムの拡張可能なプロファイルカウンタを割り当て、更新する必要があります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:1371
#, no-wrap
msgid "Why are native executables “big”?"
msgstr "なぜネイティブ実行可能ファイルは大きいのですか？"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1374
msgid "This can be attributed to a number of different reasons:"
msgstr "これには様々な理由があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1380
msgid "Native executables include not only the application code but also, library code, and JDK code.  As a result a more fair comparison would be to compare the native executable’s size with the size of the application, plus the size of the libraries it uses, plus the size of the JDK.  Especially the JDK part is not negligible even in simple applications like HelloWorld.  To get a glance on what is being pulled in the image one can use `-H:+PrintUniverse` when building the native executable."
msgstr "ネイティブ実行可能ファイルには、アプリケーションのコードだけでなく、ライブラリのコードやJDKのコードも含まれています。そのため、ネイティブ実行可能ファイルのサイズは、アプリケーションのサイズに加えて、使用するライブラリのサイズとJDKのサイズを加えたものと比較するのが、より公平な比較となります。特にJDKの部分は、HelloWorldのようなシンプルなアプリケーションでも無視できません。イメージの中で何が引き出されているかを把握するために、ネイティブ実行可能ファイルをビルドする際に `-H:+PrintUniverse` を使用することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1386
msgid "Some features are always included in a native executable even though they might never be actually used at run time.  An example of such a feature is garbage collection.  At compile time we can’t be sure whether an application will need to run garbage collection at run time, so garbage collection is always included in native executables increasing their size even if not necessary.  Native executable generation relies on static code analysis to identify which code paths are reachable, and static code analysis can be imprecise leading to more code getting into the image than what’s actually needed."
msgstr "ネイティブ実行可能ファイルには、実行時に実際には使われないかもしれないのに、必ず含まれている機能があります。そのような機能の例として、ガベージコレクションがあります。コンパイル時には、アプリケーションが実行時にガベージコレクションを実行する必要があるかどうかはわかりません。そのため、ガベージコレクションは、必要がないにもかかわらず、常にネイティブ実行可能ファイルに含まれ、サイズが大きくなります。ネイティブ実行可能ファイルの生成は、どのコードパスが到達可能かを特定するために、静的なコード解析に依存していますが、静的なコード解析は不正確な場合があり、実際に必要なコードよりも多くのコードがイメージに入ってしまうことがあります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1389
msgid "There is a https://github.com/oracle/graal/issues/287[GraalVM upstream issue] with some interesting discussions about that topic."
msgstr "この話題については、 link:https://github.com/oracle/graal/issues/287[GraalVMアップストリーム課題]で興味深い議論が行われています。"

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:1390
#, no-wrap
msgid "What version of Mandrel was used to generate a binary?"
msgstr "バイナリの生成に使用したMandrelのバージョンは？"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1393
msgid "One can see which Mandrel version was used to generate a binary by inspecting the binary as follows:"
msgstr "どのバージョンのMandrelを使ってバイナリを生成したかは、バイナリを以下のように検査すればわかります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1398
#, no-wrap
msgid ""
"$ strings target/debugging-native-1.0.0-SNAPSHOT-runner | grep GraalVM\n"
"com.oracle.svm.core.VM=GraalVM 22.0.0.2-Final Java 11 Mandrel Distribution\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:1400
#, no-wrap
msgid "How do I enable GC logging in native executables?"
msgstr "ネイティブ実行可能ファイルでGCロギングを有効にするにはどうすればいいですか？"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1404
msgid "Executing the native executable with `-XX:PrintFlags=` prints a list of flags that can be passed to native executables.  For various levels of GC logging one may use:"
msgstr "ネイティブ実行可能ファイルに `-XX:PrintFlags=` を付けて実行すると、ネイティブ実行可能ファイルに渡すことのできるフラグのリストが表示されます。様々なレベルのGCロギングのために、次のように使用することができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1417
#, no-wrap
msgid ""
"$ ./target/debugging-native-1.0.0-SNAPSHOT-runner -XX:PrintFlags=\n"
"...\n"
"  -XX:±PrintGC                                 Print summary GC information after each collection. Default: - (disabled).\n"
"  -XX:±PrintGCSummary                          Print summary GC information after application main method returns. Default: - (disabled).\n"
"  -XX:±PrintGCTimeStamps                       Print a time stamp at each collection, if +PrintGC or +VerboseGC. Default: - (disabled).\n"
"  -XX:±PrintGCTimes                            Print the time for each of the phases of each collection, if +VerboseGC. Default: - (disabled).\n"
"  -XX:±PrintHeapShape                          Print the shape of the heap before and after each collection, if +VerboseGC. Default: - (disabled).\n"
"...\n"
"  -XX:±TraceHeapChunks                         Trace heap chunks during collections, if +VerboseGC and +PrintHeapShape. Default: - (disabled).\n"
"  -XX:±VerboseGC                               Print more information about the heap before and after each collection. Default: - (disabled).\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:1419
#, no-wrap
msgid "Can I get a heap dump of a native executable? e.g. if it runs out of memory"
msgstr "ネイティブ実行可能ファイルのヒープダンプを取得することはできますか？ 例えば、メモリ不足になった場合などです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1426
msgid "Unfortunately generating heap dumps in hprof format, which can be opened by tools such as VisualVM or Eclipse MAT, can only be achieved with https://www.graalvm.org/reference-manual/native-image/NativeImageHeapdump[GraalVM Enterprise Edition].  Mandrel, which is based on the GraalVM Community Edition, does not have this capability."
msgstr "残念ながら、VisualVMやEclipse MATなどのツールで開くことができるhprof形式のヒープダンプを生成することは、 link:https://www.graalvm.org/reference-manual/native-image/NativeImageHeapdump[GraalVM Enterprise Edition]でしか実現できません。GraalVM Community EditionをベースにしたMandrelには、この機能はありません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1430
msgid "Although Mandrel can generate debug symbols and these contain a fair amount of information about object layouts, including what is a pointer field vs a primitive field, this information cannot be used as is to detect memory leaks or find dominator objects.  This is because it has no idea what constitutes a root pointer nor how to recursively trace pointers from those roots."
msgstr "Mandrelはデバッグシンボルを生成することができ、その中にはポインターフィールドとプリミティブフィールドの違いなど、オブジェクトのレイアウトに関するかなりの情報が含まれていますが、この情報をそのままメモリリークの検出や支配的なオブジェクトの発見に使用することはできません。これは、何がルートポインタを構成するのか、また、それらのルートから再帰的にポインタをトレースする方法がわからないからです。"

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:1431
#, no-wrap
msgid "Can I build and run this examples outside of a container in Linux?"
msgstr "このサンプルをコンテナの外でLinuxでビルドして実行することは可能ですか？"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1437
msgid "Yes you can.  In fact, debugging native executables on a Linux bare metal box offers the best possible experience.  In this kind of environments, root access is not needed except to install packages required to run some debug steps, or to enable `perf` to gather events at the kernel."
msgstr "Quarkusのネイティブ実行可能ファイルのデバッグは、Linux環境で行うのが最適です。一部のデバッグ手順を実行するために必要なパッケージをインストールする場合や、 `perf` でカーネルのイベントを収集できるようにする場合を除き、ルートアクセスは必要ありません。macOSやWindows環境でのデバッグは、コンテナ環境でも機能します（ link:#macwindows[FAQエントリ]を参照）。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1439
msgid "These are the packages you'll need on your Linux environment to run through the different debugging sections:"
msgstr "これらのパッケージは、異なるデバッグセクションを実行するために、Linux環境で必要となるものです。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1446
#, no-wrap
msgid ""
"# dnf (rpm-based)\n"
"sudo dnf install binutils gdb perf perl-open\n"
"# Debian-based distributions:\n"
"sudo apt install binutils gdb perf\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:1448
#, no-wrap
msgid "Generating flame graphs is slow, or produces errors, what can I do?"
msgstr "フレームグラフの生成に時間がかかったり、エラーが発生したりするのですが、どうすればいいですか？"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1452
msgid "There are multiple ways in which a native executable produced by Mandrel can be profiled.  All the methods require you to pass in the `-H:-DeleteLocalSymbols` option."
msgstr "Mandrelが作成したネイティブ実行可能ファイルをプロファイリングする方法は複数あります。すべての方法で、 `-H:-DeleteLocalSymbols` オプションを渡す必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1456
msgid "The method shown in this reference guide generates a binary with DWARF debug information, runs it via `perf record` and then uses `perf script` and flame graph tooling to generate the flamegraphs.  However, the `perf script` post-processing step done on this binary can appear to be slow or can show some DWARF errors."
msgstr "このリファレンス・ガイドで紹介する方法は、DWARFのデバッグ情報を含むバイナリを生成し、 `perf record` を通して実行し、 `perf script` とフレーム・グラフ・ツールを使用してフレーム・グラフを生成します。しかし、このバイナリで行われる `perf script` の後処理ステップは、時間がかかったり、DWARF のエラーが表示されたりすることがあります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1461
msgid "An alternative method to generate flame graphs is to pass in `-H:+PreserveFramePointer` when generating the native executable instead of generating the DWARF debug information.  It instructs the binary to use an extra register for the frame pointer.  This enables `perf` to do stack walking to profile the runtime behaviour.  To generate the native executable using these flags, do the following:"
msgstr "フレームグラフを生成する別の方法として、ネイティブ実行可能ファイルを生成する際に、DWARFのデバッグ情報を生成する代わりに、 `-H:+PreserveFramePointer` を渡す方法があります。これは、フレームポインタに追加のレジスタを使用するようにバイナリに指示します。これにより、 `perf` は、実行時の動作をプロファイリングするためにスタックウォーキングを行うことができます。これらのフラグを使用してネイティブ実行可能ファイルを生成するには、以下のようにします。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1466
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative\n"
"    -Dquarkus.native.additional-build-args=-H:+PreserveFramePointer,-H:-DeleteLocalSymbols\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1469
msgid "To get runtime profiling information out of the native executable, simply do:"
msgstr "実行時プロファイリング情報をネイティブ実行可能ファイルから取得するには、単純に次のようにします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1477
msgid "The recommended method for generating runtime profiling information is using the debug information rather than generating a binary that preserves the frame pointer.  This is because adding debug information to the native executable build process has no negative runtime performance whereas preserving the frame pointer does."
msgstr "実行時プロファイリング情報を生成する方法としては、フレームポインタを保持したバイナリを生成するよりも、デバッグ情報を使用することを推奨します。これは、ネイティブ実行可能ファイルのビルドプロセスにデバッグ情報を追加しても、実行時のパフォーマンスには何の影響もないのに対し、フレームポインタの保持は影響があるためです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1483
msgid "DWARF debug info is generated in a separate file and can even be omitted in the default deployment and only be transferred and used on demand, for profiling or debugging purposes.  Furthermore, the presence of debug info enables `perf` to show us the relevant source code lines as well, hence it does not bloat the native executable itself.  To do that, simply call `perf report` with an extra parameter to show source code lines:"
msgstr "DWARFのデバッグ情報は、別のファイルに生成され、デフォルトのデプロイメントでは省略することもでき、プロファイリングやデバッグの目的で必要なときだけ転送して使用することができます。さらに、デバッグ情報があることで、 `perf` は関連するソースコード行も表示することができ、ネイティブ実行可能ファイル自体を肥大化させることはありません。そのためには、 `perf report` にソースコード行を表示するパラメータを追加して呼び出すだけです。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1493
#, no-wrap
msgid ""
"perf report --stdio -F+srcline\n"
"...\n"
"83.69%     0.00%  GreetingResource.java:20 ...\n"
"...\n"
"83.69%     0.00%  AbstractStringBuilder.java:1025 ...\n"
"...\n"
"83.69%     0.00%  ArraycopySnippets.java:95 ...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1499
msgid "The performance penalty of preserving the frame pointer is due to using the extra register for stack walking, particularly in `x86_64` compared to `aarch64` where there are less registers available.  Using this extra register reduces the number of registers that are available for other work, which can lead to performance penalties."
msgstr "フレームポインタを保持することによる性能上のペナルティは、スタックウォーキングのために余分なレジスタを使用することによるもので、特に `aarch64` と比較して `x86_64` では使用できるレジスタの数が少なくなります。この余分なレジスタを使用すると、他の作業に使用できるレジスタの数が減るため、性能上のペナルティが発生します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:1500
#, no-wrap
msgid "I think I’ve found a bug in native-image, how can I debug it with the IDE?"
msgstr "native-imageのバグを見つけたようなのですが、IDEでどのようにデバッグすればいいのでしょうか？"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1504
msgid "Although it is possible to remote debug processes within containers, it might be easier to step-by-step debug native-image by installing Mandrel locally and adding it to the path of the shell process."
msgstr "コンテナ内のプロセスをリモートデバッグすることは可能ですが、Mandrelをローカルにインストールしてシェルプロセスのパスに追加することで、native-imageをステップバイステップでデバッグする方が簡単かもしれません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1509
msgid "Native executable generation is the result of two Java processes that are executed sequentially.  The first process is very short and its main job is to set things up for the second process.  The second process is the one that takes care of most of the work.  The steps to debug one process or the other vary slightly."
msgstr "ネイティブ実行可能ファイルの生成は、2つのJavaプロセスが順次実行された結果です。最初のプロセスは非常に短く、主な仕事は2番目のプロセスのために物事を準備することです。2つ目のプロセスは、ほとんどの作業を行うものです。一方のプロセスをデバッグするための手順は、若干異なります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1514
msgid "Let’s discuss first how to debug the second process, which is the one you most likely to want to debug.  The starting point for the second process is the `com.oracle.svm.hosted.NativeImageGeneratorRunner` class.  To debug this process, simply add `--debug-attach=*:8000` as an additional build time argument:"
msgstr "まず、最もデバッグしたいと思われる2番目のプロセスのデバッグ方法について説明します。2番目のプロセスのスタートポイントは、 `com.oracle.svm.hosted.NativeImageGeneratorRunner` クラスです。このプロセスをデバッグするには、ビルド時の引数として `--debug-attach=*:8000` を追加するだけです。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1519
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.additional-build-args=--debug-attach=*:8000\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1525
msgid "The starting point for the first process is the `com.oracle.svm.driver.NativeImages` class.  In GraalVM CE distributions, this first process is a binary, so debugging it in the traditional way with a Java IDE is not possible.  However, Mandrel distributions (or locally built GraalVM CE instances) keep this as a normal Java process, so you can remote debug this process by adding the `--vm.agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000` as an additional build argument, e.g."
msgstr "1番目のプロセスのスタートポイントとなるのは、 `com.oracle.svm.driver.NativeImages` クラスです。GraalVM CEのディストリビューションでは、この最初のプロセスはバイナリなので、従来のようにJava IDEを使ってデバッグすることはできません。しかし、Mandrelのディストリビューション（またはローカルにビルドされたGraalVM CEインスタンス）では、これを通常のJavaプロセスとして保持しているため、 `--vm.agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000` を追加のビルド引数として追加することで、このプロセスをリモートデバッグすることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1530
#, no-wrap
msgid ""
"$ ./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.additional-build-args=--vm.agentlib:jdwp=transport=dt_socket\\\\,server=y\\\\,suspend=y\\\\,address=*:8000\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/native-reference.adoc:1532
#, no-wrap
msgid "Can I use JFR/JMC to debug or profile native binaries?"
msgstr "JFR/JMCを使って、ネイティブバイナリのデバッグやプロファイリングはできますか？"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1540
msgid "https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH170[Java Flight Recorder (JFR)] and https://www.oracle.com/java/technologies/jdk-mission-control.html[JDK Mission Control (JMC)] can be used to profile native binaries since GraalVM CE 21.2.0.  However, JFR in GraalVM is currently significantly limited in capabilities compared to HotSpot.  The custom event API is fully supported, but many VM level features are unavailable.  They will be added in future releases. Current limitations are:"
msgstr "link:https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH170[Java Flight Recorder(JFR)]と link:https://www.oracle.com/java/technologies/jdk-mission-control.html[JDK Mission Control(JMC)]は、GraalVM CE 21.2.0以降、プロファイル・ネイティブ・バイナリのデバッグに使用することができます。 しかし、GraalVMのJFRは現在、HotSpotと比較して機能が大幅に制限されています。カスタムイベントAPIは完全にサポートされていますが、多くのVMレベルの機能は利用できません。これらは将来のリリースで追加される予定です。現在の制限事項は以下の通りです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1542
msgid "Minimal VM level events"
msgstr "最小限のVMレベルのイベント"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1543
msgid "No old object sampling"
msgstr "oldオブジェクトのサンプリングはありません"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1544
msgid "No stacktrace tracing"
msgstr "スタックトレースのトレースがありません"

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1545
msgid "No Streaming API for JDK 17"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1548
msgid "To use JFR add the application property: `-Dquarkus.native.enable-vm-inspection=true`.  E.g."
msgstr "JFRを使用するには、アプリケーションのプロパティ `-Dquarkus.native.enable-vm-inspection=true` を追加します。例:"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1554
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative -Dquarkus.native.container-build=true \\\n"
"    -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:{mandrel-flavor} \\\n"
"    -Dquarkus.native.enable-vm-inspection=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1557
msgid "Once the image is compiled, enable and start JFR via runtime flags: `-XX:+FlightRecorder` and `-XX:StartFlightRecording`. For example:"
msgstr "イメージのコンパイルが完了したら、ランタイムフラグ `-XX:+FlightRecorder` と `-XX:StartFlightRecording` を使ってJFRを有効にし、起動します。例えば、以下のようになります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/native-reference.adoc:1563
#, no-wrap
msgid ""
"./target/debugging-native-1.0.0-SNAPSHOT-runner \\\n"
"    -XX:+FlightRecorder \\\n"
"    -XX:StartFlightRecording=\"filename=recording.jfr\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/native-reference.adoc:1565
msgid "For more details on using JFR, see https://www.graalvm.org/reference-manual/native-image/JFR[here]."
msgstr "JFRの利用方法については link:https://www.graalvm.org/reference-manual/native-image/JFR[こちら]をご覧ください。"
