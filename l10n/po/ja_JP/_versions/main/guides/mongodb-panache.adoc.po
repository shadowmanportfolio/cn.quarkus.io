# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-03-19 02:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/mongodb-panache.adoc:6
#, no-wrap
msgid "Simplified MongoDB with Panache"
msgstr "シンプルになったMongoDB with Panache"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:13
msgid "MongoDB is a well known NoSQL Database that is widely used, but using its raw API can be cumbersome as you need to express your entities and your queries as a MongoDB link:{mongodb-doc-root-url}/bson/documents/#document[`Document`]."
msgstr "MongoDBは広く利用されている有名なNoSQLデータベースですが、エンティティとクエリをMongoDB link:{mongodb-doc-root-url}/bson/documents/#document[`Document`] として表現する必要があるため、生のAPIを使用するのは面倒です。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:15
msgid "MongoDB with Panache provides active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "MongoDB with Panacheは、 link:hibernate-orm-panache.html[Hibernate ORM with Panache]にあるようなアクティブレコードスタイルのエンティティ（およびリポジトリ）を提供し、Quarkusでエンティティを簡単に楽しく書けるようにすることに重点を置いています。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:17
msgid "It is built on top of the xref:mongodb.adoc[MongoDB Client] extension."
msgstr "これは、 link:mongodb.html[MongoDB Client]エクステンションの上に構築されています。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:18
#, no-wrap
msgid "First: an example"
msgstr "最初に:例"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:21
msgid "Panache allows you to write your MongoDB entities like this:"
msgstr "Panacheでは、MongoDBのエンティティをこのように書くことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:28
#: upstream/_versions/main/guides/mongodb-panache.adoc:257
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:32
#: upstream/_versions/main/guides/mongodb-panache.adoc:261
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:36
#: upstream/_versions/main/guides/mongodb-panache.adoc:265
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:41
#: upstream/_versions/main/guides/mongodb-panache.adoc:270
#, no-wrap
msgid ""
"    public static void deleteLoics(){\n"
"        delete(\"name\", \"Loïc\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:45
msgid "You have noticed how much more compact and readable the code is compared to using the MongoDB API? Does this look interesting? Read on!"
msgstr "MongoDBのAPIを使った場合と比べて、コードがどれだけコンパクトで読みやすくなったかお気づきでしょうか？これは面白いと思いませんか？読んでみてください。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:49
msgid "the `list()` method might be surprising at first. It takes fragments of PanacheQL queries (subset of JPQL) and contextualizes the rest.  That makes for very concise but yet readable code.  MongoDB native queries are also supported."
msgstr "`list()` の方法は、最初は驚くかもしれません。これは、PanacheQLのクエリ（JPQLのサブセット）の断片を取り出し、残りの部分を文脈化したものです。これにより、非常に簡潔でありながら読みやすいコードになっています。MongoDBのネイティブクエリもサポートしています。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:52
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  MongoDB with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheMongoRepository`."
msgstr "上で説明したものは基本的に link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[アクティブレコードパターン]で、単にエンティティパターンと呼ばれることもあります。MongoDB with Panacheでは、 `PanacheMongoRepository` を通じて、より古典的な link:https://martinfowler.com/eaaCatalog/repository.html[リポジトリパターン]を使うこともできます。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:53
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:57
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:59
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:61
msgid "The solution is located in the `mongodb-panache-quickstart` {quickstarts-tree-url}/mongodb-panache-quickstart[directory]."
msgstr "ソリューションは `mongodb-panache-quickstart` {quickstarts-tree-url}/mongodb-panache-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:62
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:65
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:72
msgid "This command generates a Maven structure importing the RESTEasy Reactive Jackson and MongoDB with Panache extensions.  After this, the `quarkus-mongodb-panache` extension has been added to your build file."
msgstr "このコマンドは、RESTEasy Reactive JacksonとMongoDB with PanacheエクステンションをインポートするMaven構造を生成します。この後、 `quarkus-mongodb-panache` エクステンションがビルドファイルに追加されています。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:74
msgid "If you don't want to generate a new project, add the dependency in your build file:"
msgstr "新しいプロジェクトを生成したくない場合は、ビルドファイルに依存関係を追加してください。"

#. type: Block title
#: upstream/_versions/main/guides/mongodb-panache.adoc:76
#: upstream/_versions/main/guides/mongodb-panache.adoc:986
#: upstream/_versions/main/guides/mongodb-panache.adoc:1073
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:82
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mongodb-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/mongodb-panache.adoc:85
#: upstream/_versions/main/guides/mongodb-panache.adoc:996
#: upstream/_versions/main/guides/mongodb-panache.adoc:1083
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:88
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-mongodb-panache\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:90
#, no-wrap
msgid "Setting up and configuring MongoDB with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:93
msgid "To get started:"
msgstr "始めるには"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:95
msgid "add your settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:96
msgid "Make your entities extend `PanacheMongoEntity` (optional if you are using the repository pattern)"
msgstr "エンティティが `PanacheMongoEntity` を継承するようにする（リポジトリパターンを使用している場合はオプション）。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:97
msgid "Optionally, use the `@MongoEntity` annotation to specify the name of the collection, the name of the database or the name of the client."
msgstr "オプションとして、 `@MongoEntity` アノテーションを使用して、コレクションの名前、データベースの名前、またはクライアントの名前を指定します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:99
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、関連する構成プロパティを `{config-file}` に追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:106
#, no-wrap
msgid ""
"# configure the MongoDB client for a replica set of two nodes\n"
"quarkus.mongodb.connection-string = mongodb://mongo1:27017,mongo2:27017\n"
"# mandatory if you don't specify the name of the database using @MongoEntity\n"
"quarkus.mongodb.database = person\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:109
msgid "The `quarkus.mongodb.database` property will be used by MongoDB with Panache to determine the name of the database where your entities will be persisted (if not overridden by `@MongoEntity`)."
msgstr "`quarkus.mongodb.database` プロパティは、MongoDB with Panache でエンティティを永続化するデータベースの名前を決定するのに使われます（ `@MongoEntity` でオーバーライドされていない場合）。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:111
msgid "The `@MongoEntity` annotation allows configuring:"
msgstr "`@MongoEntity` のアノテーションでは次の設定が可能です。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:113
msgid "the name of the client for multi-tenant application, see xref:mongodb.adoc#multiple-mongodb-clients[Multiple MongoDB Clients]. Otherwise, the default client will be used."
msgstr "マルチテナントアプリケーション用のクライアントの名前を指定することもできます。 xref:mongodb.adoc#multiple-mongodb-clients[Multiple MongoDB Clients] を参照してください。それ以外の場合は、デフォルトのクライアントを使います。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:114
msgid "the name of the database, otherwise, the `quarkus.mongodb.database` property will be used."
msgstr "データベースの名前。そうでない場合は `quarkus.mongodb.database` プロパティが使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:115
msgid "the name of the collection, otherwise the simple name of the class will be used."
msgstr "コレクションの名前。そうでない場合はクラスのシンプルな名前が使われます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:117
msgid "For advanced configuration of the MongoDB client, you can follow the xref:mongodb.adoc#configuring-the-mongodb-database[Configuring the MongoDB database guide]."
msgstr "MongoDBクライアントの高度な設定については、 link:mongodb.html#configuring-the-mongodb-database[Configuring the MongoDB database ガイド]に従ってください。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:118
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:120
#: upstream/_versions/main/guides/mongodb-panache.adoc:274
#, no-wrap
msgid "Defining your entity"
msgstr "エンティティの定義"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:124
msgid "To define a Panache entity, simply extend `PanacheMongoEntity` and add your columns as public fields.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "Panacheのエンティティを定義するには、 `PanacheMongoEntity` を拡張して、カラムをパブリックフィールドとして追加するだけです。コレクション、データベース、またはクライアントの名前をカスタマイズする必要がある場合は、 `@MongoEntity` アノテーションをエンティティに追加することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:130
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:134
#, no-wrap
msgid ""
"    // will be persisted as a 'birth' field in MongoDB\n"
"    @BsonProperty(\"birth\")\n"
"    public LocalDate birthDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:137
#, no-wrap
msgid ""
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:140
#: upstream/_versions/main/guides/mongodb-panache.adoc:291
msgid "Annotating with `@MongoEntity` is optional. Here the entity will be stored in the `ThePerson` collection instead of the default `Person` collection."
msgstr "`@MongoEntity` でのアノテーションはオプションです。ここでは、エンティティは、デフォルトの `Person` コレクションではなく、 `ThePerson` コレクションに保存されます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:142
#: upstream/_versions/main/guides/mongodb-panache.adoc:293
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/bson/pojos/[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr "MongoDB with Panacheでは、 link:{mongodb-doc-root-url}/bson/pojos/[PojoCodecProvider]を使ってエンティティをMongoDB `Document` に変換します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:144
#: upstream/_versions/main/guides/mongodb-panache.adoc:295
msgid "You will be allowed to use the following annotations to customize this mapping:"
msgstr "このマッピングをカスタマイズするために、以下のアノテーションを使用することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:146
#: upstream/_versions/main/guides/mongodb-panache.adoc:297
msgid "`@BsonId`: allows you to customize the ID field, see <<custom-ids,Custom IDs>>."
msgstr "`@BsonId`: IDフィールドをカスタマイズすることができます。「 link:#custom-ids[カスタムID]」を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:147
#: upstream/_versions/main/guides/mongodb-panache.adoc:298
msgid "`@BsonProperty`: customize the serialized name of the field."
msgstr "`@BsonProperty`: フィールドのシリアル化された名前をカスタマイズします。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:148
#: upstream/_versions/main/guides/mongodb-panache.adoc:299
msgid "`@BsonIgnore`: ignore a field during the serialization."
msgstr "`@BsonIgnore`: シリアル化の際にフィールドを無視することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:150
msgid "If you need to write accessors, you can:"
msgstr "アクセサを書く必要がある場合は、以下のようにできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:154
#: upstream/_versions/main/guides/mongodb-panache.adoc:1006
#, no-wrap
msgid "public class Person extends PanacheMongoEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:159
#, no-wrap
msgid ""
"    @JsonProperty\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:164
#: upstream/_versions/main/guides/mongodb-panache.adoc:881
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:170
#: upstream/_versions/main/guides/mongodb-panache.adoc:887
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:174
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "また、当社のフィールドアクセスリライトのおかげで、ユーザーが `person.name` を読むときには、実際に `getName()` アクセサが呼び出されます。これはフィールドの書き込みやセッターについても同様です。これにより、すべてのフィールドの呼び出しが、対応するゲッター/セッターの呼び出しに置き換えられるため、実行時に適切なカプセル化が可能になります。"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:175
#: upstream/_versions/main/guides/mongodb-panache.adoc:343
#, no-wrap
msgid "Most useful operations"
msgstr "最も便利な操作"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:178
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、ここでは実行できる最も一般的な操作を紹介します。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:186
#: upstream/_versions/main/guides/mongodb-panache.adoc:354
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Loïc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:189
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:191
#: upstream/_versions/main/guides/mongodb-panache.adoc:359
#: upstream/_versions/main/guides/mongodb-panache.adoc:907
#, no-wrap
msgid "person.status = Status.Dead;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:194
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:197
#, no-wrap
msgid ""
"// delete it\n"
"person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:200
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:205
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:209
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:212
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:215
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:218
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:221
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:224
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:227
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:230
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = Person.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:233
#: upstream/_versions/main/guides/mongodb-panache.adoc:401
msgid "All `list` methods have equivalent `stream` versions."
msgstr "すべての `list` メソッドは、同等の `stream` バージョンがあります。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:241
#, no-wrap
msgid ""
"Stream<Person> persons = Person.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:244
#: upstream/_versions/main/guides/mongodb-panache.adoc:412
msgid "A `persistOrUpdate()` method exist that persist or update an entity in the database, it uses the __upsert__ capability of MongoDB to do it in a single query."
msgstr "`persistOrUpdate()` メソッドは、データベース内のエンティティを永続化または更新するために存在し、MongoDB の _upsert_機能を使用して単一のクエリでそれを行います。"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:245
#, no-wrap
msgid "Adding entity methods"
msgstr "エンティティメソッドの追加"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:250
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "エンティティに対するカスタムクエリを、エンティティ自体の中に追加できます。そうすることで、自分や同僚が簡単に見つけることができ、クエリは操作するオブジェクトと一緒に配置されます。エンティティクラスにスタティックメソッドとして追加するのがPanache Active Recordのやり方です。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:272
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解決策2：リポジトリパターンの使用"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:278
msgid "You can define your entity as regular POJO.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "エンティティは通常のPOJOとして定義することができます。コレクション、データベース、またはクライアントの名前をカスタマイズする必要がある場合は、 `@MongoEntity` アノテーションをエンティティに追加できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:288
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person  {\n"
"    public ObjectId id; // used by MongoDB for the _id field\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:302
msgid "You can use public fields or private fields with getters/setters.  If you don't want to manage the ID by yourself, you can make your entity extends `PanacheMongoEntity`."
msgstr "ゲッターやセッターを使って、パブリックフィールドやプライベートフィールドを使うことができます。IDを自分で管理したくない場合は、 `PanacheMongoEntity` を拡張したエンティティを作ることができます。"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:303
#, no-wrap
msgid "Defining your repository"
msgstr "リポジトリの定義"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:307
msgid "When using Repositories, you can get the exact same convenient methods as wit the active record pattern, injected in your Repository, by making them implements `PanacheMongoRepository`:"
msgstr "リポジトリを使用する場合、`PanacheMongoRepository` を実装することでリポジトリに注入されたアクティブレコードパターンのウィットと全く同じ便利なメソッドが得られます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:312
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:314
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:318
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:322
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:327
#, no-wrap
msgid ""
"   public void deleteLoics(){\n"
"       delete(\"name\", \"Loïc\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:331
msgid "All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheMongoEntityBase` で定義されているすべての操作は、あなたのリポジトリで利用できます。そのため、これを使用することは、注入する必要があることを除けば、active record パターンを使用することとまったく同じです。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:336
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:341
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:346
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書くことで実行可能な最も一般的な操作は以下の通りです。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:357
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:362
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"personRepository.update(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:365
#, no-wrap
msgid ""
"// delete it\n"
"personRepository.delete(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:368
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:373
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:377
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:380
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:383
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:386
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:389
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:392
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:395
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:398
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = personRepository.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:409
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:416
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "残りのドキュメントでは、アクティブレコードパターンに基づく使用法のみを示していますが、リポジトリパターンでも実行できることを覚えておいてください。リポジトリパターンの例は簡潔にするために省略しています。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:417
#, no-wrap
msgid "Writing a JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:420
msgid "First, include one of the RESTEasy extensions to enable JAX-RS endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for JAX-RS and JSON support."
msgstr "まず、JAX-RSエンドポイントを有効にするために、RESTEasyのエクステンションの1つを含めます。例えば、JAX-RSとJSONのサポートのために、 `io.quarkus:quarkus-resteasy-reactive-jackson` の依存関係を追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:422
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "そして、次のようなリソースを作成することで、Personエンティティの作成/読み取り/更新/削除が可能になります。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:429
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:434
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Person> list() {\n"
"        return Person.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:440
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person get(String id) {\n"
"        return Person.findById(new ObjectId(id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:446
#, no-wrap
msgid ""
"    @POST\n"
"    public Response create(Person person) {\n"
"        person.persist();\n"
"        return Response.created(URI.create(\"/persons/\" + person.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:452
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    public void update(String id, Person person) {\n"
"        person.update();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:462
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    public void delete(String id) {\n"
"        Person person = Person.findById(new ObjectId(id));\n"
"        if(person == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
"        person.delete();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:468
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search/{name}\")\n"
"    public Person search(String name) {\n"
"        return Person.findByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:475
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/count\")\n"
"    public Long count() {\n"
"        return Person.count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:477
#, no-wrap
msgid "Advanced Query"
msgstr "アドバンスドクエリー"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:479
#, no-wrap
msgid "Paging"
msgstr "ページング"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:483
msgid "You should only use `list` and `stream` methods if your collection contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "`list` および `stream` メソッドは、コレクションに含まれるデータセットが十分に小さい場合にのみ使用してください。より大きなデータセットの場合は、同等の `find` メソッドを使用して、ページングが可能な `PanacheQuery` を返すことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:488
#: upstream/_versions/main/guides/mongodb-panache.adoc:524
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:491
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:494
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:497
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:500
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:503
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:506
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"int count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:512
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:515
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 型には、ページングやリターンストリームを処理するための他の多くのメソッドがあります。"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:516
#, no-wrap
msgid "Using a range instead of pages"
msgstr "ページではなく範囲を使用する"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:519
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、範囲ベースのクエリも可能です。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:527
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:530
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:533
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:539
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "範囲とページを混在させることはできません。範囲を使用した場合、現在のページを持っていることに依存するすべてのメソッドは `UnsupportedOperationException` をスローします。`page(Page)` もしくは `page(int, int)` を使用してページングに切り換えられます。"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:541
#, no-wrap
msgid "Sorting"
msgstr "ソート"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:544
msgid "All methods accepting a query string also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "クエリ文字列を受け付けるすべてのメソッドは、オプションで `Sort` パラメータも受け付けるので、ソートを抽象化することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:548
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:551
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:554
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` クラスには、列を追加したり、ソート方向を指定したりするメソッドが豊富に用意されています。"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:555
#, no-wrap
msgid "Simplified queries"
msgstr "シンプルなクエリ"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:558
msgid "Normally, MongoDB queries are of this form: `{'firstname': 'John', 'lastname':'Doe'}`, this is what we call MongoDB native queries."
msgstr "通常、MongoDB のクエリは次のような形式です。 `{'firstname': 'John', 'lastname':'Doe'}` 、これを MongoDB ネイティブクエリと呼んでいます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:561
msgid "You can use them if you want, but we also support what we call **PanacheQL** that can be seen as a subset of link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (or link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]) and allows you to easily express a query.  MongoDB with Panache will then map it to a MongoDB native query."
msgstr "link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL](または link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL])のサブセットとも言える *PanacheQL*というものもサポートしており、簡単にクエリを表現することができます。MongoDB with Panacheは、それをMongoDBのネイティブクエリにマッピングします。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:563
msgid "If your query does not start with `{`, we will consider it a PanacheQL query:"
msgstr "`{` で始まらないクエリは、PanacheQL クエリとみなします。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:565
msgid "`<singlePropertyName>` (and single parameter) which will expand to `{'singleColumnName': '?1'}`"
msgstr "`<singlePropertyName>` (およびシングルパラメータ) は `{'singleColumnName': '?1'}`に展開されます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:566
msgid "`<query>` will expand to `{<query>}` where we will map the PanacheQL query to MongoDB native query form. We support the following operators that will be mapped to the corresponding MongoDB operators: 'and', 'or' ( mixing 'and' and 'or' is not currently supported), '=', '>', '>=', '<', '<=', '!=', 'is null', 'is not null', and 'like' that is mapped to the MongoDB `$regex` operator (both String and JavaScript patterns are supported)."
msgstr "`<query>` は `{<query>}` に展開され、PanacheQL のクエリを MongoDB のネイティブクエリ形式にマッピングします。以下の演算子をサポートしており、対応するMongoDBの演算子にマッピングされます。'and', 'or' ('and' と 'or' の混合は現在サポートされていません)、 '=', '&gt;', '&gt;=', '&lt;', '&lt;=', '!=', 'is null', 'is not null', そして MongoDB `$regex` 演算子にマッピングされる 'like' (String と JavaScript の両方のパターンをサポートしています)。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:568
msgid "Here are some query examples:"
msgstr "クエリの例を紹介します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:570
msgid "`firstname = ?1 and status = ?2` will be mapped to `{'firstname': ?1, 'status': ?2}`"
msgstr "`firstname = ?1 and status = ?2` は `{'firstname': ?1, 'status': ?2}`にマッピングされます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:571
msgid "`amount > ?1 and firstname != ?2` will be mapped to `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"
msgstr "`amount > ?1 and firstname != ?2` は `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}` にマッピングされます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:572
msgid "`lastname like ?1` will be mapped to `{'lastname': {'$regex': ?1}}`. Be careful that this will be link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB regex] support and not SQL like pattern."
msgstr "`lastname like ?1` は `{'lastname': {'$regex': ?1}}` にマッピングされます。これは link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB の正規表現]をサポートするもので、SQL のようなパターンではないことに注意しましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:573
msgid "`lastname is not null` will be mapped to `{'lastname':{'$exists': true}}`"
msgstr "`lastname is not null` は `{'lastname':{'$exists': true}}` にマッピングされます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:574
msgid "`status in ?1` will be mapped to `{'status':{$in: [?1]}}`"
msgstr "`status in ?1` は `{'status':{$in: [?1]}}`にマッピングされます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:578
msgid "MongoDB queries must be valid JSON documents, using the same field multiple times in a query is not allowed using PanacheQL as it would generate an invalid JSON (see link:https://github.com/quarkusio/quarkus/issues/12086[this issue on github])."
msgstr "MongoDBのクエリは、有効なJSONドキュメントでなければなりません。同じフィールドをクエリ内で複数回使用することは、無効なJSONを生成することになるため、PanacheQLでは許可されません ( link:https://github.com/quarkusio/quarkus/issues/12086[githubのこの問題]を参照)。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:582
msgid "We also handle some basic date type transformations: all fields of type `Date`, `LocalDate`, `LocalDateTime` or `Instant` will be mapped to the link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date] using the `ISODate` type (UTC datetime).  The MongoDB POJO codec doesn't support `ZonedDateTime` and `OffsetDateTime` so you should convert them prior usage."
msgstr "また、基本的な日付型の変換も行います。 `Date`, `LocalDate`, `LocalDateTime` もしくは `Instant` 型のすべてのフィールドは、 `ISODate` 型 (UTC datetime) を使って link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date]にマッピングされます。MongoDB POJO コーデックは `ZonedDateTime` と `OffsetDateTime` をサポートしていないので、使う前に変換しておく必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:584
msgid "MongoDB with Panache also supports extended MongoDB queries by providing a `Document` query, this is supported by the find/list/stream/count/delete/update methods."
msgstr "MongoDB with Panacheは、 `Document` クエリを提供することでMongoDBの拡張クエリもサポートしています。これはfind/list/stream/count/deleteメソッドでサポートされています。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:587
msgid "MongoDB with Panache offers operations to update multiple documents based on an update document and a query : `Person.update(\"foo = ?1, bar = ?2\", fooName, barName).where(\"name = ?1\", name)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:589
msgid "For these operations, you can express the update document the same way you express your queries, here are some examples:"
msgstr "これらの操作では、クエリを表現するのと同じように、更新文書を表現することができます。以下に例を示します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:591
msgid "`<singlePropertyName>` (and single parameter) which will expand to the update document `{'$set' : {'singleColumnName': '?1'}}`"
msgstr "`<singlePropertyName>` (およびシングルパラメーター)で、更新ドキュメント `{'$set' : {'singleColumnName': '?1'}}` に展開します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:592
msgid "`firstname = ?1, status = ?2` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`firstname = ?1, status = ?2` は更新ドキュメント `{'$set' : {'firstname': ?1, 'status': ?2}}` にマッピングされます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:593
msgid "`firstname = :firstname, status = :status` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`firstname = :firstname, status = :status` は更新ドキュメント `{'$set' : {'firstname': :firstname, 'status': :status}}`にマッピングされます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:594
msgid "`{'firstname' : ?1, 'status' : ?2}` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`{'firstname' : ?1, 'status' : ?2}` は更新ドキュメント `{'$set' : {'firstname': ?1, 'status': ?2}}` にマッピングされます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:595
msgid "`{'firstname' : firstname, 'status' : :status}` ` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`{'firstname' : firstname, 'status' : :status}` `は、アップデートドキュメントに `{'$set' : {'firstname': :firstname, 'status': :status}}` マッピングされます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:596
msgid "`{'$inc': {'cpt': ?1}}` will be use as-is"
msgstr "`{'$inc': {'cpt': ?1}}` はそのまま使用します。"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:597
#, no-wrap
msgid "Query parameters"
msgstr "クエリパラメーター"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:600
msgid "You can pass query parameters, for both native and PanacheQL queries, by index (1-based) as shown below:"
msgstr "ネイティブクエリとPanacheQLクエリの両方で、以下のようにインデックス（1ベース）ごとにクエリパラメータを渡すことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:605
#, no-wrap
msgid ""
"Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive);\n"
"Person.find(\"{'name': ?1, 'status': ?2}\", \"Loïc\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:608
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` を使った名前で、"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:616
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"Loïc\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
"Person.find(\"{'name': :name, 'status', :status}\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:619
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または便利なクラスである `Parameters` をそのまま使用するか、 `Map` を構築する。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:625
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"Loïc\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:629
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"{'name': :name, 'status': :status}\",\n"
"         Parameters.with(\"name\", \"Loïc\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:632
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべてのクエリ操作は、インデックス( `Object…​`)または名前( `Map<String,Object>` または `Parameters`)でパラメータを渡すことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:634
msgid "When you use query parameters, be careful that PanacheQL queries will refer to the Object parameters name but native queries will refer to MongoDB field names."
msgstr "クエリパラメータを使う場合、PanacheQLのクエリはObjectパラメータ名を参照しますが、ネイティブのクエリはMongoDBのフィールド名を参照するので注意が必要です。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:636
msgid "Imagine the following entity:"
msgstr "次のようなエンティティを想像してみてください。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:644
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    @BsonProperty(\"lastname\")\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:648
#, no-wrap
msgid ""
"    public static Person findByNameWithPanacheQLQuery(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:653
#, no-wrap
msgid ""
"    public static Person findByNameWithNativeQuery(String name){\n"
"        return find(\"{'lastname': ?1}\", name).firstResult();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:657
msgid "Both `findByNameWithPanacheQLQuery()` and `findByNameWithNativeQuery()` methods will return the same result but query written in PanacheQL will use the entity field name: `name`, and native query will use the MongoDB field name: `lastname`."
msgstr "`findByNameWithPanacheQLQuery()` と `findByNameWithNativeQuery()` はどちらも同じ結果を返しますが、PanacheQL で書かれたクエリはエンティティのフィールド名 `name` を使用し、ネイティブクエリは MongoDB のフィールド名 `lastname` を使用します。"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:658
#, no-wrap
msgid "Query projection"
msgstr "クエリの投影"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:661
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリの投影は、 `find()` のメソッドが返す `PanacheQuery` オブジェクトに対して `project(Class)` のメソッドで行うことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:664
msgid "You can use it to restrict which fields will be returned by the database, the ID field will always be returned, but it's not mandatory to include it inside the projection class."
msgstr "これを使って、データベースから返されるフィールドを制限することができます。IDフィールドは常に返されますが、これをプロジェクションクラス内に含めることは必須ではありません。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:668
msgid "For this, you need to create a class (a POJO) that will only contain the projected fields.  This POJO needs to be annotated with `@ProjectionFor(Entity.class)` where `Entity` is the name of your entity class.  The field names, or getters, of the projection class will be used to restrict which properties will be loaded from the database."
msgstr "そのためには、投影されたフィールドのみを含むクラス（POJO）を作成する必要があります。このPOJOには、 `@ProjectionFor(Entity.class)` でアノテーションを付ける必要があります。 `Entity` はエンティティ・クラスの名前です。プロジェクション・クラスのフィールド名（ゲッター）は、データベースから読み込まれるプロパティを制限するために使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:670
msgid "Projection can be done for both PanacheQL and native queries."
msgstr "投影は、PanacheQLとネイティブクエリの両方で行うことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:675
#, no-wrap
msgid ""
"import io.quarkus.mongodb.panache.common.ProjectionFor;\n"
"import org.bson.codecs.pojo.annotations.BsonProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:681
#, no-wrap
msgid ""
"// using public fields\n"
"@ProjectionFor(Person.class)\n"
"public class PersonName {\n"
"    public String name;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:686
#, no-wrap
msgid ""
"// using getters\n"
"@ProjectionFor(Person.class)\n"
"public class PersonNameWithGetter {\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:690
#, no-wrap
msgid ""
"    public String getName(){\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:695
#, no-wrap
msgid ""
"    public void setName(String name){\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:700
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> shortQuery = Person.find(\"status \", Status.Alive).project(PersonName.class);\n"
"PanacheQuery<PersonName> query = Person.find(\"'status': ?1\", Status.Alive).project(PersonNameWithGetter.class);\n"
"PanacheQuery<PersonName> nativeQuery = Person.find(\"{'status': 'ALIVE'}\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:703
msgid "Using `@BsonProperty` is not needed to define custom column mappings, as the mappings from the entity class will be used."
msgstr "エンティティクラスのマッピングが使用されるため、カスタムカラムマッピングを定義するために `@BsonProperty` を使用する必要はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:705
msgid "You can have your projection class extends from another class. In this case, the parent class also needs to have use `@ProjectionFor` annotation."
msgstr "投影クラスが他のクラスを継承している場合があります。この場合、親クラスも `@ProjectionFor` アノテーションを持つ必要があります。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:706
#, no-wrap
msgid "Query debugging"
msgstr "クエリのデバッグ"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:709
msgid "As MongoDB with Panache allows writing simplified queries, it is sometimes handy to log the generated native queries for debugging purpose."
msgstr "MongoDB with Panacheではシンプルなクエリを書くことができますが、生成されたネイティブクエリをログに残しておくと、デバッグの際に便利なことがあります。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:711
msgid "This can be achieved by setting to DEBUG the following log category inside your `application.properties`:"
msgstr "これは、 `application.properties` の中で以下のログカテゴリーを DEBUG に設定することで実現できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:715
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus.mongodb.panache.runtime\".level=DEBUG\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:717
#, no-wrap
msgid "The PojoCodecProvider: easy object to BSON document conversion."
msgstr "PojoCodecProvider: オブジェクトからBSONドキュメントへの変換を簡単に行うことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:721
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/bson/pojos[PojoCodecProvider], with link:{mongodb-doc-root-url}/pojos/#pojo-support[automatic POJO support], to automatically convert your object to a BSON document."
msgstr "MongoDB with Panacheは、link:{mongodb-doc-root-url}/pojos/#pojo-support[automatic POJO support]の link:{mongodb-doc-root-url}/bson/pojos[PojoCodecProvider]を使用して、オブジェクトをBSONドキュメントに自動変換します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:726
msgid "In case you encounter the `org.bson.codecs.configuration.CodecConfigurationException` exception, it means the codec is not able to automatically convert your object.  This codec obeys the Java Bean standard, so it will successfully convert a POJO using public fields or getters/setters.  You can use `@BsonIgnore` to make a field, or a getter/setter, ignored by the codec."
msgstr "`org.bson.codecs.configuration.CodecConfigurationException` の例外が発生した場合、コーデックがオブジェクトを自動的に変換できないことを意味します。このコーデックは、Java Bean 標準に準拠しているため、パブリックフィールドまたはゲッター/セッターを使用する POJO を正常に変換します。 `@BsonIgnore` を使用して、フィールドまたはゲッター/セッターをコーデックで無視することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:731
msgid "If your class doesn't obey these rules (for example by including a method that starts with `get` but is not a setter), you could provide a custom codec for it.  Your custom codec will be automatically discovered and registered inside the codec registry.  See xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr "クラスがこれらの規則に従わない場合（例えば、 `get` で始まるがセッターではないメソッドを含む場合）、そのクラスにカスタムコーデックを提供することができます。あなたのカスタム・コーデックは、自動的に検出され、コーデック・レジストリに登録されます。詳しくは、 link:mongodb.html#simplifying-mongodb-client-usage-using-bson-codec[BSONコーデックの使用]をご覧ください。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:732
#, no-wrap
msgid "Transactions"
msgstr "トランザクション"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:735
msgid "MongoDB offers ACID transactions since version 4.0."
msgstr "MongoDBは、バージョン4.0からACIDトランザクションを提供しています。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:737
msgid "To use them with MongoDB with Panache you need to annotate the method that starts the transaction with the `@Transactional` annotation."
msgstr "MongoDB with Panacheでこれらを使うには、トランザクションを開始するメソッドに `@Transactional` アノテーションを付ける必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:739
msgid "Transaction support inside MongoDB with Panache is still experimental."
msgstr "MongoDB with Panache内部のトランザクションサポートはまだ実験的なものです。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:740
#, no-wrap
msgid "Custom IDs"
msgstr "カスタムID"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:745
msgid "IDs are often a touchy subject. In MongoDB, they are usually auto-generated by the database with an `ObjectId` type.  In MongoDB with Panache the ID are defined by a field named `id` of the `org.bson.types.ObjectId` type, but if you want to customize them, once again we have you covered."
msgstr "ID はしばしば微妙な問題です。MongoDBでは、IDは通常、 `ObjectId` 型でデータベースによって自動生成されます。MongoDB with Panacheでは、IDは `org.bson.types.ObjectId` 型の `id` というフィールドで定義されていますが、もしカスタマイズしたいのであれば、私たちがサポートします。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:748
msgid "You can specify your own ID strategy by extending `PanacheMongoEntityBase` instead of `PanacheMongoEntity`. Then you just declare whatever ID you want as a public field by annotating it by `@BsonId`:"
msgstr "`PanacheMongoEntity` の代わりに `PanacheMongoEntityBase` を拡張することで、独自のID戦略を指定することができます。そして、 `@BsonId` でアノテーションを付けて、好きなIDをパブリック・フィールドとして宣言します。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:753
#, no-wrap
msgid ""
"@MongoEntity\n"
"public class Person extends PanacheMongoEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:756
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Integer myId;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:759
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:763
msgid "If you're using repositories, then you will want to extend `PanacheMongoRepositoryBase` instead of `PanacheMongoRepository` and specify your ID type as an extra type parameter:"
msgstr "リポジトリを使用している場合は、 `PanacheMongoRepository` の代わりに `PanacheMongoRepositoryBase` を拡張し、ID 型を追加の型パラメータとして指定することになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:770
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:776
msgid "When using `ObjectId`, MongoDB will automatically provide a value for you, but if you use a custom field type, you need to provide the value by yourself."
msgstr "`ObjectId` を使う場合は、MongoDB が自動的に値を提供してくれますが、カスタムフィールド型を使う場合は、自分で値を提供する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:780
msgid "`ObjectId` can be difficult to use if you want to expose its value in your REST service.  So we created Jackson and JSON-B providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on either the RESTEasy Reactive Jackson extension or the RESTEasy Reactive JSON-B extension."
msgstr "`ObjectId` は、REST サービスでその値を公開したい場合、使用するのが難しいことがあります。そこで、RESTEasy Jackson extensionまたはRESTEasy JSON-B extensionに依存するプロジェクトであれば自動的に登録される、 `String` としてシリアライズ/デシリアライズするJacksonおよびJSON-Bプロバイダを作成しました。"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:784
msgid "If you use the standard `ObjectId` ID type, don't forget to retrieve your entity by creating a new `ObjectId` when the identifier comes from a path parameter. For example:"
msgstr "標準の `ObjectId` ID型を使用する場合、識別子がパスパラメータから来ているときは、新しい `ObjectId` を作成してエンティティを取得することを忘れないでください。例えば以下のように行います。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:792
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{id}\")\n"
"public Person findById(String id) {\n"
"    return Person.findById(new ObjectId(id));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:795
#, no-wrap
msgid "Working with Kotlin Data classes"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:798
msgid "Kotlin data classes are a very convenient way of defining data carrier classes, making them a great match to define an entity class."
msgstr "Kotlinのデータクラスは、データキャリアクラスを定義する非常に便利な方法であり、エンティティクラスを定義するのに適しています。"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:801
msgid "But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked as nullable, and the generated constructor needs to have as parameters all the fields of the data class."
msgstr "しかし、このクラスの型はいくつかの制限があります。また、生成時に初期化される全てのフィールドは nullable としてマークされ、生成されたコンストラクタは、データクラスのすべてのフィールドをパラメータとして持つ必要があります。"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:803
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/bson/pojos[PojoCodecProvider], a MongoDB codec which mandates the presence of a parameterless constructor."
msgstr "MongoDB with Panache は link:{mongodb-doc-root-url}/bson/pojos[PojoCodecProvider] を使います。これは MongoDB のコーデックで、パラメータなしのコンストラクタの存在を義務付けています。"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:807
msgid "Therefore, if you want to use a data class as an entity class, you need a way to make Kotlin generate an empty constructor.  To do so, you need to provide default values for all the fields of your classes.  The following sentence from the Kotlin documentation explains it:"
msgstr "そのため、データクラスをエンティティクラスとして使用したい場合は、Kotlinに空のコンストラクタを生成させる方法が必要です。そのためには、クラスのすべてのフィールドにデフォルト値を用意する必要があります。Kotlinのドキュメントの次の文章で説明しています。"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:809
msgid "__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__"
msgstr "_JVMでは、生成されたクラスがパラメータレス・コンストラクタを持つ必要がある場合、すべてのプロパティのデフォルト値を指定する必要があります（「コンストラクタ」を参照）。_"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:811
msgid "If for whatever reason, the aforementioned solution is deemed unacceptable, there are alternatives."
msgstr "何らかの理由で前述の解決策が受け入れられないと判断された場合、代替手段があります。"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:814
msgid "First, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the `PojoCodecProvider`.  See this part of the documentation: xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr "まず、BSON Codecを作成すると、Quarkusに自動的に登録され、 `PojoCodecProvider` の代わりに使用されます。ドキュメントのこの部分を参照してください。 link:mongodb.html#simplifying-mongodb-client-usage-using-bson-codec[BSONコーデックの使用]"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:817
msgid "Another option is to use the `@BsonCreator` annotation to tell the `PojoCodecProvider` to use the Kotlin data class default constructor, in this case all constructor parameters have to be annotated with `@BsonProperty`: see link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]."
msgstr "もうひとつの方法は、 `@BsonCreator` アノテーションを使用して、 `PojoCodecProvider` に Kotlin データクラスのデフォルトコンストラクタを使用するように指示することです。この場合、すべてのコンストラクタパラメータは `@BsonProperty` でアノテーションする必要があります。「 link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constru]ctor」を参照してください。"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:819
msgid "This will only work when the entity extends `PanacheMongoEntityBase` and not `PanacheMongoEntity`, as the ID field also needs to be included in the constructor."
msgstr "これは、エンティティが  `PanacheMongoEntity` ではなく `PanacheMongoEntityBase` を拡張している場合にのみ機能します。なぜなら、ID フィールドもコンストラクタに含める必要があるからです。"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:821
msgid "An example of a `Person` class defined as a Kotlin data class would look like:"
msgstr "Kotlinのデータクラスとして定義された `Person` クラスの例は次のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:830
#, no-wrap
msgid ""
"data class Person @BsonCreator constructor (\n"
"    @BsonId var id: ObjectId,\n"
"    @BsonProperty(\"name\") var name: String,\n"
"    @BsonProperty(\"birth\") var birth: LocalDate,\n"
"    @BsonProperty(\"status\") var status: Status\n"
"): PanacheMongoEntityBase()\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:835
msgid "Here we use `var` but note that `val` can also be used."
msgstr "ここでは、 `var` を使用していますが、 `val` も使用できることに注意してください。"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:837
msgid "The `@BsonId` annotation is used instead of `@BsonProperty(\"_id\")` for brevity's sake, but use of either is valid."
msgstr "簡潔にするために `@BsonProperty(\"_id\")` の代わりに `@BsonId` のアノテーションを使用していますが、どちらを使用しても構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:841
msgid "The last option is to the use the link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg] compiler plugin.  This plugin is configured with a list of annotations, and the end result is the generation of no-args constructor for each class annotated with them."
msgstr "最後の方法は、 link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg]compiler plugin を使うことです。このプラグインにはアノテーションのリストが設定されており、最終的にはアノテーションが設定されている各クラスのno-argsコンストラクタが生成されます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:843
msgid "For MongoDB with Panache, you could use the `@MongoEntity` annotation on your data class for this:"
msgstr "MongoDB with Panache では、データクラスに `@MongoEntity` アノテーションを使用することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:852
#, no-wrap
msgid ""
"@MongoEntity\n"
"data class Person (\n"
"    var name: String,\n"
"    var birth: LocalDate,\n"
"    var status: Status\n"
"): PanacheMongoEntity()\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:855
#, no-wrap
msgid "Reactive Entities and Repositories"
msgstr "リアクティブエンティティとレポジトリー"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:860
msgid "MongoDB with Panache allows using reactive style implementation for both entities and repositories.  For this, you need to use the Reactive variants when defining your entities : `ReactivePanacheMongoEntity` or `ReactivePanacheMongoEntityBase`, and when defining your repositories: `ReactivePanacheMongoRepository` or `ReactivePanacheMongoRepositoryBase`."
msgstr "MongoDB with Panacheでは、エンティティとリポジトリの両方でリアクティブスタイルの実装を使うことができます。そのためには、エンティティを定義するときには `ReactivePanacheMongoEntity` または `ReactivePanacheMongoEntityBase` を、リポジトリを定義するときには `ReactivePanacheMongoRepository` または `ReactivePanacheMongoRepositoryBase` を、それぞれ Reactive バリアントとして使用する必要があります。"

#. type: Block title
#: upstream/_versions/main/guides/mongodb-panache.adoc:862
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:866
msgid "The reactive API of the MongoDB with Panache uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "MongoDB with PanacheのリアクティブAPIは、Mutinyのリアクティブ型を使用しています。Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - an intuitive reactive programming library]をご覧ください。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:869
msgid "The reactive variant of the `Person` class will be:"
msgstr "`Person` クラスのリアクティブ・バリアントは以下のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:876
#, no-wrap
msgid ""
"public class ReactivePerson extends ReactivePanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:891
msgid "You will have access to the same functionalities of the _imperative_ variant inside the reactive one: bson annotations, custom ID, PanacheQL, ...  But the methods on your entities or repositories will all return reactive types."
msgstr "bsonアノテーション、カスタムID、PanacheQLなど、 リアクティブ バリアント内で _命令型_ のバリアントと同じ機能を利用できますが、エンティティやリポジトリのメソッドはすべてリアクティブ型を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:893
msgid "See the equivalent methods from the imperative example with the reactive variant:"
msgstr "リアクティブ バリアントを持つ命令型の例から、同等のメソッドを見てみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:901
#, no-wrap
msgid ""
"// creating a person\n"
"ReactivePerson person = new ReactivePerson();\n"
"person.name = \"Loïc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:905
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver,\n"
"// and accessible when uni1 will be resolved\n"
"Uni<ReactivePerson> uni1 = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:910
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"Uni<ReactivePerson> uni2 = person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:913
#, no-wrap
msgid ""
"// delete it\n"
"Uni<Void> uni3 = person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:916
#, no-wrap
msgid ""
"// getting a list of all persons\n"
"Uni<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:921
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"Uni<ReactivePerson> personById = ReactivePerson.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:925
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Uni<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n"
"personById = optional.map(o -> o.orElseThrow(() -> new NotFoundException()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:928
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:931
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = ReactivePerson.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:934
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:937
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:940
#, no-wrap
msgid ""
"// delete all persons\n"
"deleteCount = ReactivePerson.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:943
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleted = ReactivePerson.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:946
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Long> updated = ReactivePerson.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:949
msgid "If you use MongoDB with Panache in conjunction with RESTEasy Reactive, you can directly return a reactive type inside your JAX-RS resource endpoint."
msgstr "RESTEasyでMongoDB with Panacheを併用している場合、 `quarkus-resteasy-mutiny` エクステンションを含めれば、JAX-RSリソースエンドポイント内でリアクティブ型を直接返すことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:951
msgid "The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a `Multi` (which implement a reactive stream `Publisher`) instead of a `Stream`."
msgstr "リアクティブ型に対しても同様の問い合わせ機能がありますが、 `stream()` メソッドの動作は異なります。 `Stream` の代わりに `Multi` （リアクティブストリーム `Publisher` を実装したもの）を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:953
msgid "It allows more advanced reactive use cases, for example, you can use it to send server-sent events (SSE) via RESTEasy Reactive:"
msgstr "これにより、より高度なリアクティブなユースケースが可能となり、例えば、RESTEasyを介してSSE（Server-Sent Event）を送信するために使用することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:961
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.RestStreamElementType;\n"
"import org.reactivestreams.Publisher;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:969
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/stream\")\n"
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"@RestStreamElementType(MediaType.APPLICATION_JSON)\n"
"public Multi<ReactivePerson> streamPersons() {\n"
"    return ReactivePerson.streamAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:972
msgid "`@RestStreamElementType(MediaType.APPLICATION_JSON)` tells RESTEasy Reactive to serialize the object in JSON."
msgstr "`@SseElementType(MediaType.APPLICATION_JSON)` がRESTEasyにJSONでオブジェクトをシリアライズするように指示します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:974
msgid "Transactions are not supported for Reactive Entities and Repositories."
msgstr "トランザクションは、Reactive エンティティおよびRepositoryではサポートされていません。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:975
#, no-wrap
msgid "Mocking"
msgstr "モック"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:977
#, no-wrap
msgid "Using the active-record pattern"
msgstr "アクティブ・レコード・パターンの使用"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:982
msgid "If you are using the active-record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "active-recordパターンを使用している場合、Mockitoはスタティック・メソッドのモックをサポートしていないため、直接使用することはできませんが、 `quarkus-panache-mock` モジュールを使用することで、Mockitoを使用して、あなた自身のメソッドを含む、提供されたすべてのスタティック・メソッドをモックすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:984
msgid "Add this dependency to your `pom.xml`:"
msgstr "この依存関係を `pom.xml` に追加してください。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:993
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:999
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-panache-mock\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1002
#: upstream/_versions/main/guides/mongodb-panache.adoc:1089
msgid "Given this simple entity:"
msgstr "このシンプルなエンティティがある場合に"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1008
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1013
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1016
#: upstream/_versions/main/guides/mongodb-panache.adoc:1114
msgid "You can write your mocking test like this:"
msgstr "モッキングテストはこのように書くことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1021
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1025
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1028
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1032
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1036
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1040
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1043
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1049
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1053
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1057
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1063
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1066
msgid "Be sure to call your `verify` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "`verify` のメソッドを `Mockito` ではなく `PanacheMock` で呼び出すようにしてください。そうしないと、どのモックオブジェクトを渡せばいいのかわかりません。"

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:1067
#, no-wrap
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1071
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "リポジトリパターンを使用している場合は、 `quarkus-junit5-mockito` モジュールを使用して、Mockito を直接使用することができます。これにより、ビーンのモッキングが非常に簡単になります。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1080
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1086
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1093
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1096
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1099
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1102
msgid "And this repository:"
msgstr "そしてこのリポジトリ。"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1111
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1121
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1126
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1130
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1134
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1138
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1141
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1147
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1151
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1154
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1161
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:1164
#, no-wrap
msgid "How and why we simplify MongoDB API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1168
msgid "When it comes to writing MongoDB entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "MongoDBのエンティティを書くときには、以下のように、ユーザーが不本意ながら慣れてしまっている厄介なことがたくさんあります。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1171
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr "IDロジックの重複:ほとんどのエンティティにはIDが必要ですが、モデルとはあまり関係がないため、ほとんどの人はIDの設定方法を気にしません。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1174
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1177
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "従来のEEパターンでは、エンティティの定義（モデル）とそれに対する操作（DAOやリポジトリ）を分けることが推奨されていましたが、実際には、状態とその操作を不自然な形で分ける必要があります。状態とその操作が1つのクラスに存在するオブジェクト指向アーキテクチャでは通常そのようなことは行いません。さらに、エンティティごとに2つのクラスを必要とし、エンティティの操作を行う必要があるDAOやリポジトリをインジェクションする必要があります。これにより、編集フローが壊れ、インジェクションポイントを設定するために書いているコードから抜け出してから、それを使用するために戻ってこなければなりません。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1179
msgid "MongoDB queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "MongoDBのクエリは非常に強力ですが、一般的な操作では冗長すぎて、すべてのパーツが必要ではない場合でもクエリを書かなければなりません。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1180
msgid "MongoDB queries are JSON based, so you will need some String manipulation or using the `Document` type and it will need a lot of boilerplate code."
msgstr "MongoDBのクエリはJSONベースなので、文字列の操作や `Document` 型を使う必要があり、多くのボイラープレートコードが必要になります。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1182
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Panacheでは、これらの問題に対して、定見に基づいたアプローチをとりました。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1185
msgid "Make your entities extend `PanacheMongoEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheMongoEntityBase` instead and handle the ID yourself."
msgstr "エンティティは `PanacheMongoEntity` を拡張するようにしてください：自動生成されるIDフィールドがあります。カスタムのID戦略が必要な場合は、代わりに `PanacheMongoEntityBase` を拡張して、IDを自分で処理することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1188
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "パブリックフィールドを使ってください。無駄なゲッターとセッターを無くせます。フードの下では、不足しているすべてのゲッターとセッターを生成し、これらのフィールドへのすべてのアクセスを、アクセサ・メソッドを使用するように書き換えます。この方法では、必要なときに _便利な_ アクセサを書くことができ、エンティティ・ユーザーがフィールド・アクセスを使用していても、それが使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1191
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "アクティブレコードパターンの使用: アクティブレコードパターンでは、すべてのエンティティロジックをエンティティクラスのスタティックメソッドに置き、DAOを作りません。エンティティスーパークラスには、非常に便利なスタティックメソッドがたくさん用意されていますし、エンティティクラスに独自のメソッドを追加することもできます。 `Person` ユーザーは、 `Person` と入力するだけで、すべての操作を一か所で完了させることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1193
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` or even better `Person.find(\"name\", \"Loïc\")`."
msgstr "必要のない部分を書かないようにしましょう: `Person.find(\"order by name\")` や `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` 、さらには `Person.find(\"name\", \"Loïc\")` のように書きましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1195
msgid "That's all there is to it: with Panache, MongoDB has never looked so trim and neat."
msgstr "以上となります: Panacheを使えば、MongoDBがこれほどまでに整然としたものになるのです。"

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:1196
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1199
msgid "MongoDB with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "MongoDB with Panacheは、エンティティに対してコンパイル時にバイトコードを強化します。"

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1204
msgid "It attempts to identity archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "これは、マーカーファイル `META-INF/panache-archive.marker` の存在によって、Panache エンティティを持つアーカイブ（および Panache エンティティのコンシューマー）を識別しようとするものです。Panacheには、Panacheに（間接的にでも）依存しているアーカイブでこのファイルを自動的に作成するアノテーションプロセッサが含まれています。アノテーションプロセッサを無効にしている場合、場合によってはこのファイルを手動で作成する必要があります。"
