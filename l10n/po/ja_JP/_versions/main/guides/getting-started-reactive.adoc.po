# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-02-04 01:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/getting-started-reactive.adoc:6
#, no-wrap
msgid "Getting Started With Reactive"
msgstr "リアクティブ入門"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:12
msgid "_Reactive_ is a set of principles to build robust, efficient, and concurrent applications and systems.  These principles let you handle more load than traditional approaches while using the resources (CPU and memory) more efficiently while also reacting to failures gracefully."
msgstr "_リアクティブ_ とは、堅牢で効率的、かつコンカレントなアプリケーションやシステムを構築するための一連の原則です。これらの原則により、従来のアプローチよりも多くの負荷を処理しながら、リソース（CPUやメモリ）をより効率的に使用し、また障害にも適切に対応することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:16
msgid "Quarkus is a _Reactive_ framework.  Since the beginning, _Reactive_ has been an essential tenet of the Quarkus architecture.  It includes many reactive features and offers a broad ecosystem."
msgstr "Quarkusは _Reactive_ フレームワークです。当初から、 _Reactive_はQuarkusのアーキテクチャに欠かせない要素でした。多くのReactive機能が含まれており、幅広いエコシステムを提供しています。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:19
msgid "This guide is not an in-depth article about what _Reactive_ is and how Quarkus enables reactive architectures.  If you want to read more about these topics, refer to the xref:quarkus-reactive-architecture.adoc[Reactive Architecture guide], which provides an overview of the Quarkus reactive ecosystem."
msgstr "このガイドは、 _リアクティブ_ とは何か、Quarkusでどのようにリアクティブアーキテクチャを実現するかについての詳細な記事ではありません。これらのトピックについて詳しく知りたい場合は、Quarkusのリアクティブエコシステムの概要を説明した xref:quarkus-reactive-architecture.adoc[リアクティブアーキテクチャガイド] を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:23
msgid "In this guide, we will get you started with some reactive features of Quarkus.  We are going to implement a simple CRUD application.  Yet, unlike in the xref:hibernate-orm-panache.adoc[Hibernate with Panache guide], it uses the reactive features of Quarkus."
msgstr "このガイドでは、Quarkusのリアクティブな機能をご紹介します。簡単なCRUDアプリケーションを実装する予定です。ただし、 xref:hibernate-orm-panache.adoc[Hibernate with Panacheガイド] とは異なり、Quarkusのリアクティブ機能を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:25
msgid "This guide will help you with:"
msgstr "このガイドでは、次の情報を提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:27
msgid "Bootstrapping a reactive CRUD application with Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:28
msgid "Using Hibernate Reactive with Panache to interact with a database in a reactive fashion"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:29
msgid "Using RESTEasy Reactive to implement HTTP API while enforcing the reactive principle"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:30
msgid "Packaging and Running the application"
msgstr "アプリケーションのパッケージ化と実行"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-reactive.adoc:31
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:38
msgid "Verify that Maven is using the Java version you expect.  If you have multiple JDKs installed, make sure Maven is using the expected one.  You can verify which JDK Maven uses by running `mvn --version.`"
msgstr "Mavenが期待するJavaバージョンを使用していることを確認します。複数のJDKがインストールされている場合、Mavenが期待されるものを使用していることを確認してください。 `mvn --version.` を実行することで、Mavenが使用するJDKを確認することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-reactive.adoc:39
#, no-wrap
msgid "Imperative vs. Reactive: a question of threads"
msgstr "命令型かリアクティブ型か: スレッドの問題だ"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:43
msgid "As mentioned above, in this guide, we are going to implement a reactive CRUD application.  But you may wonder what the differences and benefits are in comparison to the traditional and imperative model."
msgstr "前述したように、このガイドでは、リアクティブなCRUDアプリケーションを実装します。しかし、伝統的なモデルや命令型のモデルと比べて、どのような違いや利点があるのか疑問に思うかもしれません。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:46
msgid "To better understand the contrast, we need to explain the difference between the reactive and imperative execution models.  It's essential to comprehend that _Reactive_ is not just a different execution model, but that distinction is necessary to understand this guide."
msgstr "この対比をよりよく理解するためには、リアクティブ型と命令型の実行モデルの違いを説明する必要があります。 _リアクティブ_ は単なる実行モデルの違いではなく、このガイドを理解するためにはその区別が必要であることを理解しておく必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:53
msgid "In the traditional and imperative approach, frameworks assign a thread to handle the request.  So, the whole processing of the request runs on this worker thread.  This model does not scale very well.  Indeed, to handle multiple concurrent requests, you need multiple threads; and so your application concurrency is constrained by the number of threads.  In addition, these threads are blocked as soon as your code interacts with remote services.  So, it leads to inefficient usage of the resources, as you may need more threads, and each thread, as they are mapped to OS threads, has a cost in terms of memory and CPU."
msgstr "伝統的な命令型のアプローチでは、フレームワークはリクエストを処理するスレッドを割り当てます。つまり、リクエストの処理全体がこのワーカースレッド上で実行されるのです。このモデルは、スケールがあまりよくありません。実際、複数の同時リクエストを処理するためには、複数のスレッドが必要となり、アプリケーションの同時実行性はスレッドの数によって制限されます。さらに、これらのスレッドは、コードがリモートサービスとやり取りするとすぐにブロックされます。そのため、より多くのスレッドが必要となり、各スレッドはOSのスレッドにマッピングされているため、メモリやCPUのコストがかかり、リソースの非効率的な使用につながります。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/getting-started-reactive.adoc:54
#, no-wrap
msgid "Imperative"
msgstr "命令型"

#. type: Target for macro image
#: upstream/_versions/main/guides/getting-started-reactive.adoc:54
#, no-wrap
msgid "blocking-threads.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:62
msgid "On the other side, the reactive model relies on non-blocking I/Os and a different execution model.  Non-blocking I/O provides an efficient way to deal with concurrent I/O.  A minimal amount of threads called I/O threads, can handle many concurrent I/O.  With such a model, request processing is not delegated to a worker thread but uses these I/O threads directly.It saves memory and CPU as there is no need to create worker threads to handle the requests.  It also improves the concurrency as it removes the constraint on the number of threads.  Finally, it also improves response time as it reduces the number of thread switches."
msgstr "一方、リアクティブモデルは、ノンブロッキングI/Oおよび、異なる実行モデルに依存しています。ノンブロッキングI/Oは、同時I/Oを効率的に処理する方法です。I/Oスレッドと呼ばれる最小限のスレッドで、多くの同時I/Oを処理することができます。このようなモデルでは、リクエスト処理をワーカースレッドに委ねるのではなく、I/Oスレッドを直接使用します。リクエストを処理するためにワーカースレッドを作成する必要がないため、メモリとCPUを節約できます。リクエストを処理するためにワーカスレッドを作成する必要がないため、メモリやCPUを節約できます。また、スレッド数の制約がなくなるため、同時実行性も向上します。最後に、スレッドの切り替え回数が減ることで、応答時間も改善されます。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/getting-started-reactive.adoc:63
#, no-wrap
msgid "Reactive"
msgstr "リアクティブ"

#. type: Target for macro image
#: upstream/_versions/main/guides/getting-started-reactive.adoc:63
#, no-wrap
msgid "reactive-thread.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-reactive.adoc:66
#, no-wrap
msgid "From sequential to continuation style"
msgstr "シーケンシャルから継続タイルへ"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:72
msgid "So, with the reactive execution model, the requests are processed using I/O threads.  But that's not all.  An I/O thread can handle multiple concurrent requests.  How? Here is the trick and one of the most significant differences between reactive and imperative."
msgstr "つまり、リアクティブな実行モデルでは、I/Oスレッドを使ってリクエストを処理します。しかし、それだけではありません。I/Oスレッドは、複数の同時リクエストを処理することができます。どうやって？これが、リアクティブとインペラティブの最も重要な違いの一つであるトリックです。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:78
msgid "When processing a request requires interacting with a remote service, like an HTTP API or a database, it does not block the execution while waiting for the response.  Instead, it schedules the I/O operation and attaches a continuation, i.e., the request processing remaining code.  This continuation can be passed as a callback (a function invoked with the I/O outcome), or use more advanced constructs such as reactive programming or co-routines.  Regardless of how the continuation is expressed, the essential aspect is the release of the I/O thread and, as a consequence, the fact that this thread can be used to process another request.  When the scheduled I/O completes, the I/O thread executes the continuation, and the processing of the pending request continues."
msgstr "リクエストの処理に、HTTP APIやデータベースなどのリモートサービスとのやりとりが必要な場合、レスポンスを待つ間に実行をブロックすることはありません。代わりに、I/O操作をスケジューリングし、リクエスト処理の残りのコードである継続を添付します。この継続は、コールバック（I/Oの結果とともに呼び出される関数）として渡すこともできますし、リアクティブプログラミングやコルーティンなどのより高度な構成を使用することもできます。継続をどのように表現するかに関わらず、重要な点はI/Oスレッドの解放であり、その結果、このスレッドを使って別のリクエストを処理することができるという事実です。スケジュールされたI/Oが完了すると、I/Oスレッドは継続を実行し、保留中のリクエストの処理は継続されます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:81
msgid "So, unlike the imperative model, where I/O blocks the execution, reactive switches to a continuation-based design, where the I/O threads are released, and continuation invoked when the I/Os complete.  As a result, the I/O thread can handle multiple concurrent requests, improving the overall concurrency of the application."
msgstr "そのため、I/Oが実行をブロックするような命令型モデルとは異なり、リアクティブ型ではI/Oスレッドを解放し、I/Oが完了した時点で継続を呼び出す継続型のデザインに切り替わります。その結果、I/Oスレッドは複数の同時リクエストを処理できるようになり、アプリケーション全体の同時性が向上します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:86
msgid "But, there is a catch.  We need a way to write continuation-passing code.  There are many ways of doing this.  In Quarkus, we propose:"
msgstr "しかし、これには問題があります。継続パッシングのコードを書くための方法が必要なのです。これにはいろいろな方法があります。Quarkusでは、以下を提案しています:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:88
msgid "Mutiny - an intuitive and event-driven reactive programming library"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:89
msgid "Kotlin co-routines - a way to write asynchronous code in a sequential manner"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:92
msgid "In this guide, we will use Mutiny.  To know more about Mutiny, check the xref:mutiny-primer.adoc[Mutiny documentation]."
msgstr "このガイドでは、Mutinyを使用します。Mutinyについて詳しく知りたい方は、 link:mutiny-primer.html[Mutinyのドキュメント]をご覧ください。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:95
msgid "Project Loom is coming to the JDK soon and proposes a virtual thread-based model.  The Quarkus architecture is ready to support Loom as soon as it's become globally available."
msgstr "JDKに近々導入されるProject Loomは、仮想スレッドベースのモデルを提案しています。Quarkusのアーキテクチャは、Loomがグローバルに利用可能になり次第、サポートする準備ができています。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-reactive.adoc:96
#, no-wrap
msgid "Bootstrapping the Reactive Fruits application"
msgstr "リアクティブフルーツアプリケーションの起動"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:99
msgid "With this in mind, let's see how we can develop a CRUD application with Quarkus, which will use the I/O thread to handle the HTTP requests, interact with a database, process the result, and write the HTTP response; in other words: a reactive CRUD application."
msgstr "これを念頭に置いて、Quarkusを使用してCRUDアプリケーションを開発する方法を見てみましょう。このアプリケーションは、I / Oスレッドを使用してHTTPリクエストを処理し、データベースとやり取りし、結果を処理し、HTTP応答を記述します。言い換えれば、リアクティブCRUDアプリケーションです。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:101
msgid "While we recommend you to follow the step-by-step instructions, you can find the final solution on https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart."
msgstr "ステップバイステップの手順に従うことをお勧めしますが、最終的なソリューションは https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart  で見つけることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:103
msgid "First, go to https://code.quarkus.io[code.quarkus.io] and select the following extensions:"
msgstr "まず、 link:https://code.quarkus.io[code.quarkus.io]にアクセスし、以下のエクステンションを選択します:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:105
msgid "RESTEasy Reactive Jackson"
msgstr "RESTEasy Reactive Jackson"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:106
msgid "Hibernate Reactive with Panache"
msgstr "Hibernate Reactive with Panache"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:107
msgid "Reactive PostgreSQL client"
msgstr "リアクティブなPostgreSQLクライアント"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/getting-started-reactive.adoc:108
#, no-wrap
msgid "Extensions"
msgstr "エクステンション"

#. type: Target for macro image
#: upstream/_versions/main/guides/getting-started-reactive.adoc:108
#, no-wrap
msgid "reactive-guide-code.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:112
msgid "The last extension is the reactive database driver for PostgreSQL.  Hibernate Reactive uses that driver to interact with the database without blocking the caller thread."
msgstr "最後のエクステンションは、PostgreSQL用のリアクティブデータベースドライバです。Hibernate Reactiveはこのドライバを使用して、呼び出し元のスレッドをブロックすることなくデータベースと対話します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:114
msgid "Once selected, click on \"Generate your application\", download the zip file, unzip it and open the code in your favorite IDE."
msgstr "選択したら、\"Generate your application \"をクリックし、zipファイルをダウンロードして解凍し、お好みのIDEでコードを開きます。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-reactive.adoc:115
#, no-wrap
msgid "Reactive Panache Entity"
msgstr "Reactive Panache Entity"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:118
#, fuzzy
msgid "Let's start with the `Fruit` entity.Create the `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` file with the following content:"
msgstr "では、 _エンティティを_ 作成しましょう。以下の内容で `org.acme.reactive.crud.Fruit` クラスを作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:122
#: upstream/_versions/main/guides/getting-started-reactive.adoc:183
#, no-wrap
msgid "package org.acme.hibernate.orm.panache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:126
#, no-wrap
msgid ""
"import javax.persistence.Cacheable;\n"
"import javax.persistence.Column;\n"
"import javax.persistence.Entity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:128
#, no-wrap
msgid "import io.quarkus.hibernate.reactive.panache.PanacheEntity;  // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:132
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Fruit extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:135
#, no-wrap
msgid ""
"\t @Column(length = 40, unique = true)\n"
"\t public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:137
#: upstream/_versions/main/guides/getting-started-reactive.adoc:192
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:139
msgid "Make sure you import the reactive variant of `PanacheEntity`."
msgstr "`PanacheEntity` のリアクティブ版をインポートしてください。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:147
msgid "This class represents `Fruits`.  It's a straightforward entity with a single field (`name`).  Note that it uses `io.quarkus.hibernate.reactive.panache.PanacheEntity`, the reactive variant of `PanacheEntity`.  So, behind the scenes, Hibernate uses the execution model we described above.  It interacts with the database without blocking the thread.  In addition, this reactive `PanacheEntity` proposes a reactive API.  We will use this API to implement the REST endpoint."
msgstr "このクラスは `Fruits` を表します。1つのフィールド( `name`)を持つ単純なエンティティです。なお、このクラスは `PanacheEntity` のリアクティブ版である `io.quarkus.hibernate.reactive.panache.PanacheEntity` を使用しています。つまり、舞台裏では、Hibernate は上述の実行モデルを使用しています。スレッドをブロックすることなく、データベースと対話します。さらに、このリアクティブな `PanacheEntity` は、リアクティブな API を提案しています。このAPIを使用してRESTエンドポイントを実装します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:149
msgid "Before going further, open the `src/main/resource/application.properties` file and add:"
msgstr "その前に、 `src/main/resource/application.properties` ファイルを開き、次を追加してください。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:154
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:157
msgid "It instructs the application to use PostgreSQL for the database and to handle the database schema generation."
msgstr "データベースにPostgreSQLを使用し、データベーススキーマの生成を処理するようにアプリケーションに指示します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:159
msgid "In the same directory, create an `import.sql` file, which inserts a few fruits, so we don't start with an empty database in dev mode:"
msgstr "同じディレクトリに、 `import.sql` ファイルを作成します。このファイルにはいくつかのフルーツが挿入されており、開発モードで空のデータベースから始めないようになっています。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:165
#, no-wrap
msgid ""
"INSERT INTO fruit(id, name) VALUES (nextval('hibernate_sequence'), 'Cherry');\n"
"INSERT INTO fruit(id, name) VALUES (nextval('hibernate_sequence'), 'Apple');\n"
"INSERT INTO fruit(id, name) VALUES (nextval('hibernate_sequence'), 'Banana');\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:169
msgid "In a terminal, launch the application in dev mode using: `./mvnw quarkus:dev`.  Quarkus automatically starts a database instance for you and configure the application. Now we only need to implement the HTTP endpoint."
msgstr "ターミナルで、次のようにしてアプリケーションを開発モードで起動します： `./mvnw quarkus:dev`. Quarkusは自動的にデータベースインスタンスを起動し、アプリケーションの設定を行います。あとは、HTTPエンドポイントを実装するだけです。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-reactive.adoc:171
#, fuzzy, no-wrap
msgid "Reactive Resource"
msgstr "リアクティブ"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:177
msgid "Because the interaction with the database is non-blocking and asynchronous, we need to use asynchronous constructs to implement our HTTP resource.  Quarkus uses Mutiny as its central reactive programming model.  So, it supports returning Mutiny types (`Uni` and `Multi`) from HTTP endpoints.  Also, our Fruit Panache entity exposes methods using these types, so we only need to implement the _glue_."
msgstr "データベースとのやりとりはノンブロッキングで非同期なので、HTTPリソースを実装するために非同期の構造を使用する必要があります。Quarkusは、中心となるリアクティブプログラミングモデルとしてMutinyを使用しています。そのため、HTTPエンドポイントからMutinyタイプ（ `Uni` と `Multi` ）を返すことをサポートしています。また、Fruit Panacheのエンティティはこれらの型を使ったメソッドを公開していますので、私たちは _糊_ を実装するだけで済みます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:179
msgid "Create the `src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` ファイルを以下の内容で作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:186
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:190
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"@ApplicationScoped\n"
"public class FruitResource {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:196
msgid "Let's start with the `getAll` method. The `getAll` method returns all the fruits stored in the database.  In the `FruitResource`, add the following code:"
msgstr "まずは、 `getAll` のメソッドから見てみましょう。 `getAll` メソッドは、データベースに保存されているすべてのフルーツを返します。 `FruitResource` の中に、以下のコードを追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:203
#, no-wrap
msgid ""
"@GET\n"
"public Uni<List<Fruit>> get() {\n"
"    return Fruit.listAll(Sort.by(\"name\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:206
msgid "Open http://localhost:8080/fruits to invoke this method:"
msgstr "http://localhost:8080/fruits を開いて、このメソッドを呼び出します。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:210
#, no-wrap
msgid "[{\"id\":2,\"name\":\"Apple\"},{\"id\":3,\"name\":\"Banana\"},{\"id\":1,\"name\":\"Cherry\"},{\"id\":4,\"name\":\"peach\"}]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:214
msgid "We get the expected JSON array.  RESTEasy Reactive automatically maps the list into a JSON Array, except if instructed otherwise."
msgstr "期待通りのJSON配列が得られます。RESTEasy Reactiveでは、特に指示がない限り、リストを自動的にJSON配列にマッピングします。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:221
msgid "Look at the return type; it returns a `Uni` of `List<Fruit>`.  `Uni` is an asynchronous type.  It's a bit like a future.  It's a placeholder that will get its value (item) later.  When it receives the item (Mutiny says it _emits_ its item), you can attach some behavior.  That's how we express the continuation: get a uni, and when the uni emits its item, execute the rest of the processing."
msgstr "戻り値の型を見てください。これは `List<Fruit>` の `Uni` を返します。 `Uni` は非同期型です。これはfutureのようなものです。これは後で値（アイテム）を得るためのプレースホルダーです。アイテムを受け取ったら（Mutinyではアイテムを _emit_すると言っています）、何らかの動作を付けることができます。Uniを取得し、そのUniがアイテムをemitしたら、残りの処理を実行する、という継続を表現しています。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:231
msgid "Reactive developers may wonder why we can't return a stream of fruits directly.  It tends to be a bad idea when dealing with a database.  Relational databases do not handle streaming well.  It’s a problem of protocols not designed for this use case.  So, to stream rows from the database, you need to keep a connection (and sometimes a transaction) open until all the rows are consumed.  If you have slow consumers, you break the golden rule of databases: don’t hold connections for too long.  Indeed, the number of connections is rather low, and having consumers keeping them for too long will dramatically reduce the concurrency of your application.  So, when possible, use a `Uni<List<T>>` and load the content.  If you have a large set of results, implement pagination."
msgstr "リアクティブな開発者は、なぜフルーツのストリームを直接返すことができないのかと思うかもしれません。それは、データベースを扱うときにはよくない考えになりがちです。リレーショナル・データベースはストリーミングをうまく扱えません。これは、このユースケースのために設計されていないプロトコルの問題です。そのため、データベースから行をストリーミングするには、すべての行が消費されるまで、コネクション（場合によってはトランザクション）を開いておく必要があります。コンシューマーが遅い場合、データベースの黄金律である「コネクションを長く保持しない」を破ってしまいます。実際、コネクションの数はかなり少なく、コンシューマーがコネクションを長時間保持することは、アプリケーションの並行性を劇的に低下させます。ですから、可能な限り `Uni<List<T>>` を使用し、コンテンツをロードしてください。結果のセットが大きい場合は、ページネーションを実装してください。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:233
msgid "Let's continue our API with `getSingle`:"
msgstr "`getSingle` でAPIを継続してみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:241
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{id}\")\n"
"public Uni<Fruit> getSingle(Long id) {\n"
"    return Fruit.findById(id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:245
msgid "In this case, we use `Fruit.findById` to retrieve the fruit.  It returns a `Uni`, which will complete when the database has retrieved the row."
msgstr "この場合、 `Fruit.findById` を使ってフルーツを取得します。これは、データベースが行を取得したときに完了する `Uni` を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:247
msgid "The `create` method allows adding a new fruit to the database:"
msgstr "`create` メソッドでは、新しいフルーツをデータベースに追加することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:255
#, no-wrap
msgid ""
"@POST\n"
"public Uni<Response> create(Fruit fruit) {\n"
"    return Panache.<Fruit>withTransaction(fruit::persist)\n"
"            .onItem().transform(inserted -> Response.created(URI.create(\"/fruits/\" + inserted.id)).build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:264
msgid "The code is a bit more involved.  To write to a database, we need a transaction.  So we use `Panache.withTransaction` to get one (asynchronously) and call the `persist` method when we receive the transaction.  The `persist` method is also returning a `Uni`.  This `Uni` emits the result of the insertion of the fruit in the database.  Once the insertion completes (and that's our continuation), we create a `201 CREATED` response.  RESTEasy Reactive automatically reads the request body as JSON and creates the `Fruit` instance."
msgstr "コードはもう少し複雑になっています。データベースへの書き込みには、トランザクションが必要です。そこで、 `Panache.withTransaction` を使って（非同期に）トランザクションを取得し、トランザクションを受け取ったら `persist` メソッドを呼び出します。 `persist` メソッドも `Uni` を返しています。この `Uni` は、データベースにフルーツを挿入した結果を出力します。挿入が完了すると（これが私たちの継続です）、 `201 CREATED` レスポンスを作成します。RESTEasy Reactiveは自動的にリクエスト・ボディをJSONとして読み込み、 `Fruit` インスタンスを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:267
msgid "The `.onItem().transform(...)` can be replaced with `.map(...)`.  `map` is a shortcut."
msgstr "`.onItem().transform(…​)` は `.map(…​)` に置き換えることができます。 `map` はショートカットです。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:269
msgid "If you have https://curl.se/[curl] on your machine, you can try the endpoint using:"
msgstr "マシンに link:https://curl.se/[curl]があれば、エンドポイントを使って試すことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:276
#, no-wrap
msgid ""
"> curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"name\":\"peach\"}' \\\n"
"  http://localhost:8080/fruits\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:279
msgid "Following the same ideas, you can implement the other CRUD methods."
msgstr "同じ考え方で、他のCRUDメソッドも実装できます。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-reactive.adoc:280
#, no-wrap
msgid "Testing and Running"
msgstr "テストと実行"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:284
msgid "Testing a reactive application is similar to testing a non-reactive one: use the HTTP endpoint and verify the HTTP responses.  The fact that the application is reactive does not change anything."
msgstr "リアクティブなアプリケーションのテストは、非リアクティブなアプリケーションのテストと同様に、 HTTP エンドポイントを使用して、HTTP レスポンスを検証します。アプリケーションがリアクティブであることによる差異はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:286
msgid "In https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java] you can see how the test for the fruit application can be implemented."
msgstr "link:https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java]では、Fruitアプリケーションのテストがどのように実装出来るかを見ることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:288
msgid "Packaging and running the application does not change either."
msgstr "アプリケーションのパッケージ化と実行も同様に差異はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:290
msgid "You can use the following command as usual:"
msgstr "以下のコマンドは通常通り使用できます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:294
msgid "or to build a native executable:"
msgstr "また、ネイティブ実行可能ファイルのビルドも同様です。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:298
msgid "You can also package the application in a container."
msgstr "また、アプリケーションをコンテナにパッケージすることもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:300
msgid "To run the application, don’t forget to start a database and provide the configuration to your application."
msgstr "アプリケーションを実行するには、データベースを起動し、アプリケーションに設定を提供することを忘れないでください。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:302
msgid "For example, you can use Docker to run your database:"
msgstr "例えば、Dockerを使ってデータベースを動かすことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:309
#, no-wrap
msgid ""
"docker run -it --rm=true \\\n"
"    --name postgres-quarkus -e POSTGRES_USER=quarkus \\\n"
"    -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=fruits \\\n"
"    -p 5432:5432 postgres:14.1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:312
msgid "Then, launch the application using:"
msgstr "そして、アプリケーションを起動します。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:320
#, no-wrap
msgid ""
"java \\\n"
"   -Dquarkus.datasource.reactive.url=postgresql://localhost/fruits \\\n"
"   -Dquarkus.datasource.username=quarkus \\\n"
"   -Dquarkus.datasource.password=quarkus \\\n"
"   -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:323
msgid "Or, if you packaged your application as native executable, use:"
msgstr "あるいは、アプリケーションをネイティブ実行可能ファイルとしてパッケージ化する場合は、次を使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-reactive.adoc:331
#, no-wrap
msgid ""
"./target/getting-started-with-reactive-runner \\\n"
"  -Dquarkus.datasource.reactive.url=postgresql://localhost/fruits \\\n"
"  -Dquarkus.datasource.username=quarkus \\\n"
"  -Dquarkus.datasource.password=quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:335
msgid "The parameters passed to the application are described in the datasource guide.  There are other ways to configure the application - please check the xref:config-reference.adoc#configuration_sources[configuration guide] to have an overview of the possibilities (such as env variable, .env files and so on)."
msgstr "アプリケーションに渡されるパラメータは、データソースガイドに記載されています。アプリケーションを設定する方法は他にもあります。 link:config-reference.html#configuration_sources[設定ガイド]を参照して、可能性の概要を確認してください（env変数、.envファイルなど）。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-reactive.adoc:336
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:340
msgid "This guide is a brief introduction to some reactive features offered by Quarkus.  Quarkus is a reactive framework, and so offers a lot of reactive features."
msgstr "このガイドでは、Quarkusが提供するいくつかのリアクティブ機能を簡単に紹介しました。Quarkusはリアクティブフレームワークであるため、多くのリアクティブ機能を提供しています。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:342
msgid "If you want to continue on this topic check:"
msgstr "このトピックを続けたい方は以下をチェック下さい:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:344
msgid "xref:quarkus-reactive-architecture.adoc[The Quarkus Reactive Architecture]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-reactive.adoc:345
msgid "xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]"
msgstr "xref:mutiny-primer.adoc[Mutiny -直感的なリアクティブプログラミングライブラリ]"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Learn how to create a reactive application with Quarkus and explore the different reactive features offered by Quarkus.  This guide covers:"
#~ msgstr "Quarkusを使用してリアクティブアプリケーションを作成する方法と、Quarkusが提供するさまざまなリアクティブ機能について説明します。このガイドでは、以下の内容を説明します。"

#~ msgid "A quick glance at the Quarkus engine and how it enables reactive"
#~ msgstr "Quarkusエンジンの概要と、それがどのようにリアクティブを可能にしているかを簡単に説明します。"

#~ msgid "Creating a reactive JAX-RS endpoint (asynchronous, streams...)"
#~ msgstr "リアクティブな JAX-RS エンドポイントの作成（非同期、ストリーム...）"

#~ msgid "Using reactive database access"
#~ msgstr "リアクティブデータベースアクセス"

#~ msgid "Interacting with other reactive APIs"
#~ msgstr "その他のリアクティブAPIの使用"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "Solutions"
#~ msgstr "ソリューション"

#~ msgid "We recommend that you follow the instructions from <<bootstrapping-the-project,Bootstrapping project>> and onwards to create the application step by step."
#~ msgstr "<<bootstrapping-the-project,プロジェクトのブートストラップ>> とそれ以降の解説に従って、ステップバイステップでアプリを作成していくことをお勧めします。"

#~ msgid "However, you can go right to the completed example."
#~ msgstr "しかし、完成した例をすぐ確認することもできます。"

#~ msgid "Download an {quickstarts-archive-url}[archive] or clone the git repository:"
#~ msgstr "{quickstarts-archive-url}[アーカイブ] をダウンロードするか、git レポジトリをクローンします。"

#~ msgid "git clone {quickstarts-clone-url}\n"
#~ msgstr "git clone {quickstarts-clone-url}\n"

#~ msgid "The solutions are located in the `getting-started-reactive` and `getting-started-reactive-crud` directories."
#~ msgstr "ソリューションは `getting-started-reactive` と `getting-started-reactive-crud` のディレクトリにあります。"

#~ msgid "Quarkus is reactive.  If you look under the hood, you will find a reactive engine powering your Quarkus application.  This engine is Eclipse Vert.x (https://vertx.io).  All network I/O passes through the non-blocking and reactive Vert.x engine."
#~ msgstr "Quarkusはリアクティブです。ボンネットの下を見ると、Quarkusアプリケーションの動力源となっているリアクティブエンジンを見つけることができます。このエンジンはEclipse Vert.x（ https://vertx.io ）です。すべてのネットワークI/Oは、ノンブロッキングでリアクティブなVert.xエンジンを通過します。"

#~ msgid "image:quarkus-reactive-stack.png[alt=Quarkus is based on a reactive engine, 70%]"
#~ msgstr "image:quarkus-reactive-stack.png[alt=\"Quarkusはリアクティブなエンジンをベースとしている\", width=\"70%\"]"

#~ msgid "Let's take 2 examples to explain how it works.  Imagine an incoming HTTP request.  The (Vert.x) HTTP server, embedded in Quarkus, receives the request and then routes it to the application.  If the request targets an _imperative_ method (traditional JAX-RS, code annotated with `@Blocking`...), the routing layer invokes the resource method in a _worker_ thread and writes the response when the data is available.  So far, nothing new or outstanding.  The following picture depicts this behavior.  In this case, the application code is invoked on a worker thread, and the business logic can block that thread."
#~ msgstr "2つの例を挙げて、その仕組みを説明してみましょう。入ってくるHTTPリクエストを想像してみてください。Quarkusに組み込まれたHTTPサーバー（Vert.x）がリクエストを受信し、アプリケーションにルーティングします。リクエストが _命令的な_ メソッド（従来のJAX-RS、 `@Blocking` ...でアノテーションされたコード）をターゲットにしている場合、ルーティング層は _ワーカースレッド_ でリソースメソッドを呼び出し、データが利用可能になるとレスポンスを書き込みます。今のところ、目新しいものも目立ったものもありません。次の図は、この動作を示しています。この場合、アプリケーションコードはワーカースレッドで呼び出され、ビジネスロジックはそのスレッドをブロックすることができます。"

#~ msgid "image:http-blocking-sequence.png[alt=Behavior when using the imperative routes, 70%]"
#~ msgstr "image:http-blocking-sequence.png[alt=\"命令的な route を使ったときの挙動\", width=\"70%\"]"

#~ msgid "But, if the HTTP request targets a reactive method (JAX-RS using RESTEasy Reactive, reactive routes, `@Incoming` method not annotated with `@Blocking`...), the routing layer invokes the route on the I/O thread giving lots of benefits such as higher concurrency and performance:"
#~ msgstr "しかし、HTTPリクエストがリアクティブなメソッド（RESTEasy Reactiveを使用したJAX-RS、リアクティブなルート、 `@Incoming` メソッドは `@Blocking` ...でアノテーションされていない）をターゲットにしている場合、ルーティング層はI/Oスレッド上でルートを呼び出し、より高い同時実行性とパフォーマンスなどの多くの利点を与えます。"

#~ msgid "image:http-reactive-sequence.png[alt=Behavior when using the reactive routes, 70%]"
#~ msgstr "image:http-reactive-sequence.png[alt=\"リアクティブな route を使ったときの挙動\", width=\"70%\"]"

#~ msgid "Because Quarkus uses the I/O thread to invoke your code, we save context-switches, avoid large thread pool management, and so improve the resource utilization.  However, the code must **NOT** block that thread.  Why? Because, I/O threads are used to handle multiple concurrent requests.  As soon as the handling of a request cannot make progress because it needs to execute some I/O, it schedules these I/O and passes a continuation.  It releases the thread which can handle another request.  When the scheduled I/O complete, the continuation is executed, back on the I/O thread."
#~ msgstr "QuarkusはI/Oスレッドを使用してコードを呼び出すため、コンテキストスイッチを節約し、大規模なスレッドプール管理を回避し、リソースの利用率を向上させます。ただし、コードはそのスレッドをブロックしてはいけ *ませ* ん。なぜでしょうか？なぜなら、I/O スレッドは複数の同時リクエストを処理するために使用されます。リクエストの処理がいくつかのI/Oを実行する必要があるために進行できなくなるとすぐに、これらのI/Oをスケジュールし、継続(continuation)を渡します。別のリクエストを処理できるスレッドを解放します。スケジュールされたI/Oが完了すると、I/Oスレッドに戻って継続(continuation)が実行されます。"

#~ msgid "As a consequence, many Quarkus components are designed with reactive in mind, such as database access (PostgreSQL, MySQL, Mongo, etc.), application services (mail, template engine, etc.), messaging (Kafka, AMQP, etc.) and so on.  But, to fully benefit from this model, the application code should be written in a non-blocking manner.  That’s where having a reactive API is an ultimate weapon."
#~ msgstr "結果として、多くのQuarkusコンポーネントは、データベースアクセス（PostgreSQL、MySQL、Mongoなど）、アプリケーションサービス（メール、テンプレートエンジンなど）、メッセージング（Kafka、AMQPなど）など、リアクティブを念頭に置いて設計されています。しかし、このモデルの恩恵を十分に受けるためには、アプリケーションコードはノンブロッキングで書かれなければなりません。そこで、リアクティブ API を持つことが究極の武器となります。"

#~ msgid "https://github.com/smallrye/smallrye-mutiny[Mutiny] is a reactive programming library allowing to express and compose asynchronous actions.  It offers two types:"
#~ msgstr "link:https://github.com/smallrye/smallrye-mutiny[Mutiny] は、非同期アクションを表現したり構成したりすることができるリアクティブプログラミングライブラリです。2つのタイプがあります。"

#~ msgid "`io.smallrye.mutiny.Multi` - for multi-item (with back-pressure) streams"
#~ msgstr "`io.smallrye.mutiny.Multi` - マルチアイテム（バックプレッシャー付き）ストリーム用"

#~ msgid "Both types are lazy and follow a subscription pattern.  The computation only starts once there is an actual need for it (i.e. a subscriber enlists)."
#~ msgstr "どちらのタイプも lazy で、サブスクリプションパターンに従います。計算は、実際に必要とされる場合にのみ開始されます (すなわち、サブスクライバがエンリストした場合)。"

#~ msgid "Both `Uni` and `Multi` expose event-driven APIs: you express what you want to do upon a given event (success, failure, etc.).  These APIs are divided into groups (types of operations) to make it more expressive and avoid having 100s of methods attached to a single class.  The main types of operations are about reacting to failure, completion, manipulating items, extracting, or collecting them.  It provides a smooth coding experience, with a navigable API, and the result does not require too much knowledge around reactive."
#~ msgstr "`Uni` も `Multi` もイベント駆動型の API を公開しています: 与えられたイベント (成功、失敗など) に対して何をしたいかを表現します。これらのAPIはグループ(操作の種類)に分けられており、より表現力を高め、1つのクラスに100個ものメソッドをアタッチすることを避けています。主な操作の種類は、失敗に反応するもの、完了するもの、アイテムを操作するもの、抽出するもの、収集するものなどです。ナビゲーション可能なAPIでスムーズなコーディングを実現し、結果的にリアクティブ周りの知識をあまり必要としないようにしています。"

#~ msgid "You may wonder about Reactive Streams (https://www.reactive-streams.org/).  `Multi` implements Reactive Streams `Publisher`, and so implements the Reactive Streams back-pressure mechanism.  `Uni` does not implement `Publisher` as the subscription to the `Uni` is enough to indicate you are interested in the result.  It is again with the idea of simpler and smoother APIs in mind as the Reactive Streams subscription/request ceremony is more complex."
#~ msgstr "https://www.reactive-streams.org/ `Multi` は Reactive Streams `Publisher` を実装しているので、Reactive Streams のバックプレッシャーメカニズムを実装しています。 `Uni` へのサブスクリプションは結果に興味があることを示すのに十分なので、 `Uni` は `Publisher` を実装していません。これは、Reactive Streams のサブスクリプション/リクエスト式がより複雑であるため、よりシンプルでスムーズな API のアイデアを念頭に置いたものです。"

#~ msgid "Embracing the unification of reactive and imperative pillars from Quarkus, both `Uni` and `Multi` provide bridges to imperative constructs.  For example, you can transform a `Multi` into an `Iterable` or _await_ the item produced by a `Uni`."
#~ msgstr "Quarkusのリアクティブな面と命令的な面の統合を受け入れた `Uni` と `Multi` は、両方とも命令的構造への橋渡しをしてくれます。たとえば、 `Multi` を `Iterable` に変換したり、 `Uni` .NET で生成されたアイテムを _待っ_ たりすることができます。"

#~ msgid "At that point, if you are a RxJava or a Reactor user, you may wonder how you can use your familiar `Flowable`, `Single`, `Flux`, `Mono`...  Mutiny allows converting `Unis` and `Multis` from and to RX Java and Reactor types:"
#~ msgstr "この時点で、あなたがRxJavaやReactorのユーザーであれば、お馴染みの `Flowable` , `Single` , `Flux` , , `Mono` ... Mutinyでは、 `Unis` と `Multis` をRX JavaやReactorの型に変換することができます。"

#~ msgid "But, what about Vert.x? Vert.x APIs are also available using Mutiny types.  The following snippet shows a usage of the Vert.x Web Client:"
#~ msgstr "しかし、Vert.xはどうでしょうか？Vert.xのAPIはMutiny型を使っても利用できます。以下のスニペットは、Vert.x Web Clientの使い方を示しています。"

#~ msgid "Last but not least, Mutiny has built-in integration with SmallRye Context Propagation so you can propagate transactions, traceability data, and so on in your reactive pipeline."
#~ msgstr "最後になりますが重要なこととして、MutinyにはMicroProfile Context Propagationとの統合が組み込まれているので、リアクティブパイプラインでトランザクションやトレーサビリティデータなどを伝搬することができます。"

#~ msgid "But enough talking, let's get our hands dirty!"
#~ msgstr "話はもういい、手を汚すんだ！"

#~ msgid "There are several ways to implement reactive application with Quarkus.  In this guide we are going to use RESTEasy Reactive, an implementation of RESTEasy benefiting from the Quarkus reactive engine.  By default, it invokes the HTTP endpoint on the I/O thread."
#~ msgstr "Quarkusでリアクティブアプリケーションを実装するには、いくつかの方法があります。このガイドでは、Quarkusのリアクティブエンジンの恩恵を受けるRESTEasyの実装であるRESTEasy Reactiveを使用します。デフォルトでは、I/Oスレッド上のHTTPエンドポイントを呼び出します。"

#~ msgid "While it's possible to use _traditional_ RESTEasy, you would need to add the `quarkus-resteasy-mutiny` extension, and the method will still be invoked on a _worker_ thread.  So, while it would use reactive programming, it would still require worker threads, which defeats the purpose."
#~ msgstr "_従来の_ RESTEasy を使用することは可能ですが、 `quarkus-resteasy-mutiny` エクステンションを追加する必要があり、メソッドは _ワーカースレッド_ 上で呼び出されます。つまり、リアクティブプログラミングを使用するとはいえ、ワーカースレッドを必要とし、その目的は達成されません。"

#~ msgid "The easiest way to create a new Quarkus project is to open a terminal and run the following command:"
#~ msgstr "新しい Quarkus プロジェクトを作成する最も簡単な方法は、ターミナルを開いて以下のコマンドを実行することです。"

#~ msgid "If using cmd, (don't use forward slash `\\`)"
#~ msgstr "cmd を使用する場合は、(前方スラッシュを使用しないでください `\\` )"

#~ msgid "If using Powershell, wrap `-D` parameters in double quotes"
#~ msgstr "Powershell を使用する場合は、 `-D` のパラメータを二重引用符で囲みます。"

#~ msgid "It generates the following in `./getting-started-reactive`:"
#~ msgstr "`./getting-started-reactive` 内に以下が生成されます。"

#~ msgid "the Maven structure"
#~ msgstr "Mavenの構造"

#~ msgid "an `org.acme.quickstart.ReactiveGreetingResource` resource exposed on `/hello`"
#~ msgstr "`/hello` で公開されている `org.acme.quickstart.ReactiveGreetingResource` リソース "

#~ msgid "example `Dockerfile` files for both `native` and `jvm` modes in `src/main/docker`"
#~ msgstr "`src/main/docker` にある `native` と `jvm` の両方のモード用の `Dockerfile` ファイルの例"

#~ msgid ""
#~ "import javax.ws.rs.GET;\n"
#~ "import javax.ws.rs.Path;\n"
#~ "import javax.ws.rs.Produces;\n"
#~ "import javax.ws.rs.core.MediaType;\n"
#~ msgstr ""
#~ "import javax.ws.rs.GET;\n"
#~ "import javax.ws.rs.Path;\n"
#~ "import javax.ws.rs.Produces;\n"
#~ "import javax.ws.rs.core.MediaType;\n"

#~ msgid "It's a very simple REST endpoint, returning \"Hello RESTEasy Reactive\" to requests on \"/hello\".  As it uses RESTEAsy Reactive, this method is called on the I/O thread."
#~ msgstr "これは非常にシンプルなRESTエンドポイントで、\"/hello\"上のリクエストに対して\"Hello RESTEasy Reactive\"を返します。RESTEAsy Reactiveを使用しているので、このメソッドはI/Oスレッド上で呼び出されます。"

#~ msgid "To instruct Quarkus to invoke this method on a _worker_ thread, annotate it with the `io.smallrye.common.annotation.Blocking` annotation.  You can use `@Blocking` on a method, class or enable it for the whole application by annotated an `Application` class:"
#~ msgstr "_ワーカースレッド_ でこのメソッドを呼び出すようにQuarkusに指示するには、 `io.smallrye.common.annotation.Blocking` アノテーションを付けます。メソッドやクラスで `@Blocking` を使用したり、 `Application` クラスをアノテーションすることで、アプリケーション全体で を使用できるようにすることができます。"

#~ msgid "Let's now create a `ReactiveGreetingService` class with the following content:"
#~ msgstr "それでは、以下の内容の `ReactiveGreetingService` クラスを作成してみましょう。"

#~ msgid "Then, edit the `ReactiveGreetingResource` class to match the following content:"
#~ msgstr "次に、 `ReactiveGreetingResource` クラスを以下の内容に合わせて編集します。"

#~ msgid ""
#~ "    @GET\n"
#~ "    @Produces(MediaType.TEXT_PLAIN)\n"
#~ "    public String hello() {\n"
#~ "        return \"hello\";\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    @Produces(MediaType.TEXT_PLAIN)\n"
#~ "    public String hello() {\n"
#~ "        return \"hello\";\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "The `ReactiveGreetingService` class contains a straightforward method producing a `Uni`.  While, in this example, the resulting item is emitted immediately, you can imagine any async API producing a `Uni`.  We cover this later in this guide."
#~ msgstr "`ReactiveGreetingService` クラスには、 `Uni` を生成する簡単なメソッドが含まれています。この例では、結果として得られるアイテムがすぐに出力されますが、非同期 API で `Uni` を生成することは想像できます。これについては、このガイドで後ほど説明します。"

#~ msgid "./mvnw quarkus:dev\n"
#~ msgstr "./mvnw quarkus:dev\n"

#~ msgid "Once running, check you get the expected greeting message by opening http://localhost:8080/hello/greeting/neo."
#~ msgstr "実行したら、 http://localhost:8080/hello/greeting/neo を開いて、期待通りのグリーティングメッセージが表示されているか確認してください。"

#~ msgid "Handling streams"
#~ msgstr "ストリームの取り扱い"

#~ msgid "So far, we only return an asynchronous result.  In this section, we extend the application with streams conveying multiple items.  These streams could come from Kafka or any other source of data, but to keep things simple, we just generate periodic greeting messages."
#~ msgstr "これまでは、非同期の結果を返すだけでした。このセクションでは、複数のアイテムを伝えるストリームを使ってアプリケーションを拡張します。これらのストリームは Kafka や他のデータソースからのものでも構いませんが、物事をシンプルに保つために、定期的にグリーティングメッセージを生成するだけにします。"

#~ msgid "In the `ReactiveGreetingService`, add the following method:"
#~ msgstr "`ReactiveGreetingService` で、以下のメソッドを追加します。"

#~ msgid "you may need to add the `import io.smallrye.mutiny.Multi;` and `import java.time.Duration;` statements."
#~ msgstr "`import io.smallrye.mutiny.Multi;` と `import java.time.Duration;` のステートメントを追加する必要があるかもしれません。"

#~ msgid "It generates a greeting message every second and stops after `count` messages."
#~ msgstr "1秒ごとに greeting メッセージを生成し、 `count` メッセージの後に停止します。"

#~ msgid "In the `ReactiveGreetingResource` add the following method:"
#~ msgstr "`ReactiveGreetingResource` で、以下のメソッドを追加します。"

#~ msgid "This endpoint streams the items to the client as a JSON Array.  The name and number of messages are parameterized using path parameters."
#~ msgstr "このエンドポイントは、アイテムをJSON配列としてクライアントにストリームします。メッセージの名前と数は、パスパラメータを使用してパラメータ化されます。"

#~ msgid "So calling the endpoint produces something like:"
#~ msgstr "そのため、エンドポイントを呼び出すと、次のようなものが生成されます。"

#~ msgid "We can also generate Server-Sent Event responses by returning a `Multi`:"
#~ msgstr "また、 `Multi` を返すことで Server-Sent Event レスポンスを生成することもできます。"

#~ msgid "The only difference with the previous snippet is the produced type and the `@RestSseElementType` annotation indicating the type of each event.  As the `@Produces` annotation defines `SERVER_SENT_EVENTS`, JAX-RS needs it to knows the content type of each (nested) event."
#~ msgstr "先ほどのスニペットとの違いは、生成される型と、各イベントの型を示す `@RestSseElementType` アノテーションだけです。 `@Produces` アノテーションは `SERVER_SENT_EVENTS` を定義しているので、JAX-RS は各（入れ子になった）イベントのコンテンツタイプを知るために必要です。"

#~ msgid "You may need to add the `import org.jboss.resteasy.reactive.RestSseElementType;` statement."
#~ msgstr "`import org.jboss.resteasy.reactive.RestSseElementType;` の文を追加する必要があるかもしれません。"

#~ msgid "You can see the result using:"
#~ msgstr "以下で結果を見ることができます。"

#~ msgid "Using Reactive APIs"
#~ msgstr "リアクティブ API の使用"

#~ msgid "Quarkus provides many reactive APIs using the Mutiny model.  In this section, we are going to see how you can use the Reactive PostgreSQL driver to interact with your database in a non-blocking and reactive way."
#~ msgstr "QuarkusはMutinyモデルを使用した多くのリアクティブAPIを提供しています。このセクションでは、リアクティブPostgreSQLドライバを使用して、ノンブロッキングでリアクティブな方法でデータベースと対話する方法を見ていきます。"

#~ msgid "Create a new project using:"
#~ msgstr "以下で新規プロジェクトを作成します。"

#~ msgid "This application is interacting with a PostgreSQL database, so you need one:"
#~ msgstr "このアプリケーションはPostgreSQLデータベースと対話しているので、DBが必要です。"

#~ msgid "The 3 first lines define the datasource.  The last line is going to be used in the application to indicate whether we insert a few items when the application gets initialized."
#~ msgstr "最初の3行はデータソースを定義しています。最後の行は、アプリケーションが初期化されたときにいくつかの項目を挿入するかどうかを示すためにアプリケーションで使用されます。"

#~ msgid "public class Fruit {\n"
#~ msgstr "public class Fruit {\n"

#~ msgid "This _entity_ contains a few fields and methods to find, update, and delete rows from the database.  These methods return either `Unis` or `Multis` as the produced items are emitted asynchronously when the results have been retrieved.  Notice that the reactive PostgreSQL client already provides `Uni` and `Multi` instances.  So you only transform the results from the database into _business-friendly_ objects."
#~ msgstr "この _エンティティに_ は、データベースから行を検索、更新、削除するためのいくつかのフィールドとメソッドが含まれています。これらのメソッドは、結果が取得されると非同期的に生成されるので、 `Unis` または `Multis` のいずれかを返します。反応型PostgreSQLクライアントは既に `Uni` と `Multi` のインスタンスを提供していることに注意してください。つまり、データベースからの結果を _ビジネスに適した_ オブジェクトに変換するだけです。"

#~ msgid "For the purposes of initializing the database when the application starts, we will create a class named `DBInit` with the following content:"
#~ msgstr "アプリケーションの起動時にデータベースを初期化する目的で、以下の内容の `DBInit` という名前のクラスを作成します。"

#~ msgid "Then, let's use this `Fruit` class in the `FruitResource`.  Edit the `FruitResource` class to match the following content:"
#~ msgstr "次に、この `Fruit` クラスを `FruitResource` . `FruitResource` クラスを以下の内容に合わせて編集します。"

#~ msgid "This resource returns `Uni` and `Multi` instances based on the result produced by the `Fruit` class."
#~ msgstr "このリソースは、 `Fruit` クラスが生成した結果に基づいて `Uni` と `Multi` のインスタンスを返します。"

#~ msgid "The previous example uses a _service_ provided by Quarkus.  Also, you can use Vert.x clients directly."
#~ msgstr "先ほどの例では、Quarkusが提供する _サービス_ を使用しています。また、Vert.xクライアントを直接使用することもできます。"

#~ msgid "First of all, make sure the `quarkus-vertx` extension is present. If not, activate the extension by executing the following command:"
#~ msgstr "まず、 `quarkus-vertx` の エクステンションが存在することを確認してください。存在しない場合は、以下のコマンドを実行して エクステンションを有効にします。"

#~ msgid "Or add `quarkus-vertx` into your dependencies manually."
#~ msgstr "または、手動で `quarkus-vertx` を依存関係に追加してください。"

#~ msgid "There is a Mutiny version of the Vert.x APIs.  This API is divided into several artifacts you can import independently:"
#~ msgstr "Vert.x APIのMutinyバージョンがあります。このAPIは独立してインポートできるいくつかのアーティファクトに分かれています。"

#~ msgid "groupId:artifactId"
#~ msgstr "groupId:artifactId"

#~ msgid "Description"
#~ msgstr "説明"

#~ msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-core`"
#~ msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-core`"

#~ msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-mail-client`"
#~ msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-mail-client`"

#~ msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client`"
#~ msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client`"

#~ msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-mongo-client`"
#~ msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-mongo-client`"

#~ msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-redis-client`"
#~ msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-redis-client`"

#~ msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-cassandra-client`"
#~ msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-cassandra-client`"

#~ msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client`"
#~ msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client`"

#~ msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-kafka-client`"
#~ msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-kafka-client`"

#~ msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-amqp-client`"
#~ msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-amqp-client`"

#~ msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client`"
#~ msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client`"

#~ msgid "You can also check the available APIs on http://smallrye.io/smallrye-reactive-utils/apidocs/."
#~ msgstr "また、 http://smallrye.io/smallrye-reactive-utils/apidocs/ で利用可能な API を確認できます。"

#~ msgid "Let's take an example.  Add the following dependency to your application:"
#~ msgstr "例を挙げてみましょう。以下の依存関係をアプリケーションに追加します。"

#~ msgid "It provides the Mutiny API of the Vert.x Web Client.  Then, you can use the web client as follows:"
#~ msgstr "Vert.x Web ClientのMutiny APIを提供します。すると、以下のようにWebクライアントを利用することができます。"

#~ msgid "There are 2 important points:"
#~ msgstr "重要なポイントは2つあります。"

#~ msgid "The injected Vert.x instance has the `io.vertx.mutiny.core.Vertx` type which is the Mutiny variant of Vert.x;"
#~ msgstr "インジェクションされた Vert.x インスタンスは、Vert.x の Mutiny バリアントである `io.vertx.mutiny.core.Vertx` タイプを持っています。"

#~ msgid "The Web Client is created from `io.vertx.mutiny.ext.web.client.WebClient`."
#~ msgstr "Web クライアントは `io.vertx.mutiny.ext.web.client.WebClient` から作成されます。"

#~ msgid "The Mutiny version of the Vert.x APIs also offers:"
#~ msgstr "Vert.x APIのMutinyバージョンも提供しています。"

#~ msgid "`andAwait` methods such as `sendAndAwait`. `andAwait` indicates that the caller thread is blocked until the result is available.  Be aware not to block the event loop / IO thread that way."
#~ msgstr "`sendAndAwait` . `andAwait` のような `andAwait` メソッドは、結果が得られるまで呼び出し元のスレッドがブロックされていることを示しています。そのような方法でイベントループ/IOスレッドをブロックしないように注意してください。"

#~ msgid "`andForget` methods such as `writeAndForget`. `andForget` is available for method returning a `Uni`.  `andForget` indicates that you don't need the resulting `Uni` indicating the success or failure of the operation.  However, remember that if you don't subscribe, the operation would not be triggered.  `andForget` manages this for you and manage the subscription."
#~ msgstr "`andForget` `writeAndForget` のような `Uni` を返すメソッドが利用可能です。`andForget` は操作の成否を示す結果の `Uni` を必要としないことを示しています。しかし、サブスクライブしないと操作が発動しないことを覚えておいてください。`andForget` はこれを管理してくれるうえに、サブスクリプションも管理します。"

#~ msgid "`toBlockingIterable` / `toBlockingStream` methods allowing to transform a Vert.x `ReadStream` into a blocking iterable or blocking `java.util.Stream`"
#~ msgstr "`toBlockingIterable` / `toBlockingStream` メソッドは、Vert.x `ReadStream` をブロッキング可能な iterable またはブロッキング可能な `java.util.Stream` に変換することができます。 "

#~ msgid "Mutiny provides utilities to convert RxJava 2 and Project Reactor types to `Uni` and `Multi`."
#~ msgstr "Mutiny は RxJava 2 と Project Reactor の型を `Uni` と `Multi` に変換するユーティリティを提供します。"

#~ msgid "RxJava 2 converters are available in the following dependency:"
#~ msgstr "RxJava 2のコンバータは以下の依存関係にあります。"

#~ msgid "So if you have an API returning RxJava 2 types (`Completable`, `Single`, `Maybe`, `Observable`, `Flowable`), you can create `Unis` and `Multis` as follows:"
#~ msgstr "そこで、RxJava 2 の型を返す API ( `Completable` , `Single` , `Maybe` , `Observable` , `Flowable` ) を持っている場合は、以下のように `Unis` と `Multis` を作成します。"

#~ msgid "You can also transform `Unis` and `Multis` into RxJava types:"
#~ msgstr "`Unis` と `Multis` を RxJava 型に変換することもできます。"

#~ msgid "Project Reactor converters are available in the following dependency:"
#~ msgstr "Project Reactorコンバータは、以下の依存関係で利用できます。"

#~ msgid "So if you have an API returning Reactor types (`Mono`, `Flux`), you can create `Unis` and `Multis` as follows:"
#~ msgstr "そこで、Reactorの型を返すAPI( `Mono` , `Flux` )を持っている場合は、以下のように `Unis` と `Multis` を作成します。"

#~ msgid "You can also transform `Unis` and `Multis` into Reactor types:"
#~ msgstr "また、 `Unis` と `Multis` を Reactor タイプに変換することもできます。"

#~ msgid "If you are facing an API using `CompletionStage`, `CompletableFuture`, or `Publisher`, you can convert back and forth.  First, both `Uni` and `Multi` can be created from a `CompletionStage` or from a `Supplier<CompletionStage>`. For example:"
#~ msgstr "`CompletionStage` , `CompletableFuture` , `Publisher` を使った API に対面している場合、双方向に変換することができます。まず、 `Uni` も `Multi` も `CompletionStage` から作成することも、 `Supplier<CompletionStage>` から作成することもできます。例えば、以下のようになります。"

#~ msgid "On `Uni`, you can also produce a `CompletionStage` using `subscribeAsCompletionStage()` that produces a `CompletionStage` that would get the item or failure emitted by the `Uni`."
#~ msgstr "`Uni` 上で、あなたはまた、 `subscribeAsCompletionStage()` を使用して `CompletionStage` を生成することができます。 `Uni` によって放出されたアイテムまたは障害を取得するだろう `CompletionStage` を生成します。"

#~ msgid "You can also create `Unis` and `Multis` from instances of `Publisher` using `createFrom().publisher(Publisher)`.  You can transform a `Uni` into a `Publisher` using `toMulti`.  Indeed, `Multi` implements `Publisher`."
#~ msgstr "`createFrom().publisher(Publisher)` を使って `Unis` と `Multis` を `Publisher` のインスタンスから作成することもできます。 `Uni` を `toMulti` を使って `Publisher` に変換することもできます。実際、 `Multi` は `Publisher` を実装しています。"

#~ msgid "What's next?"
#~ msgstr "次のステップ"

#~ msgid "This guide is an introduction to reactive in Quarkus.  There are plenty of Quarkus features that are already reactive.  The following list gives you a few examples:"
#~ msgstr "このガイドでは、Quarkusでのリアクティブについて紹介します。Quarkusの機能の中には、すでにリアクティブになっているものがたくさんあります。以下のリストでは、いくつかの例を紹介します。"

#~ msgid "link:mailer[Sending email]"
#~ msgstr "link:mailer[メール送信]"

#~ msgid "link:mongodb#reactive[Using MongoDB] and link:mongodb-panache#reactive[MongoDB with Panache]"
#~ msgstr "link:mongodb#reactive[MongoDB] と link:mongodb-panache#reactive[MongoDBをPanacheで] link:mongodb#reactive[使う]"

#~ msgid "link:reactive-routes[Using reactive routes]"
#~ msgstr "link:reactive-routes[リアクティブルートの使用]"
