# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-03-21 02:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/amazon-lambda.adoc:6
#, no-wrap
msgid "Amazon Lambda"
msgstr "Amazon Lambda"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:12
msgid "The `quarkus-amazon-lambda` extension allows you to use Quarkus to build your AWS Lambdas.  Your lambdas can use injection annotations from CDI or Spring and other Quarkus facilities as you need them."
msgstr "`quarkus-amazon-lambda` エクステンションを使うと、Quarkusを使ってAWS Lambda を構築することができます。Lambda では、CDIやSpringからのインジェクションアノテーションや、必要に応じてQuarkusの他の機能を使用することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:15
msgid "Quarkus lambdas can be deployed using the Amazon Java Runtime, or you can build a native executable and use Amazon's Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr "Quarkusの Lambda は、Amazon Javaランタイムを使用してデプロイすることもできますが、より小さなメモリーフットプリントとより高速なコールドブート起動時間が必要な場合は、ネイティブ実行可能ファイルをビルドしてAmazonのカスタムランタイムを使用することもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:18
msgid "Quarkus's integration with lambdas also supports Quarkus's Live Coding development cycle.  You an bring up your Quarkus lambda project in dev or test mode and code on your project live."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:24
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:25
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:26
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] 、ローカルテスト用"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:28
msgid "For Gradle projects please <<gradle,see below>>, or for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:29
#, no-wrap
msgid "Getting Started"
msgstr "はじめに"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:32
msgid "This guide walks you through generating an example Java project via a maven archetype and deploying it to AWS."
msgstr "このガイドでは、mavenのArchetypeを使用してJavaプロジェクトのサンプルを生成し、AWSにデプロイする方法を説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:33
#, no-wrap
msgid "Installing AWS bits"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:37
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS CLI."
msgstr "AWSのすべてのツールをインストールすることは、おそらくこのガイドでは最も難しいことです。AWS CLIをインストールするためのすべての手順に従っていることを確認してください。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:38
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr "デプロイ用のMavenプロジェクトを作成する"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:41
msgid "Create the Quarkus AWS Lambda maven project using our Maven Archetype."
msgstr "Maven Archetypeを使用してQuarkus AWS Lambda Mavenプロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:49
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/amazon-lambda.adoc:55
msgid "If you prefer to use Gradle, you can quickly and easily generate a Gradle project via https://code.quarkus.io/[code.quarkus.io] adding the `quarkus-amazon-lambda` extension as a dependency."
msgstr "Gradleを使いたい場合は、 link:https://code.quarkus.io/[code.quarkus.io] を使って、 `quarkus-amazon-lambda` エクステンションを依存関係として追加することで、素早く簡単にGradleプロジェクトを生成することができます。"

#. type: delimited block =
#: upstream/_versions/main/guides/amazon-lambda.adoc:57
msgid "Copy the build.gradle, gradle.properties and settings.gradle into the above generated Maven archetype project, to follow along with this guide."
msgstr "build.gradle、gradle.properties、settings.gradleを上記の生成されたMavenのアーキタイププロジェクトにコピーして、このガイドに従ってください。"

#. type: delimited block =
#: upstream/_versions/main/guides/amazon-lambda.adoc:59
msgid "Execute: gradle wrapper to setup the gradle wrapper (recommended)."
msgstr "Execute: gradle wrapper を実行して gradle wrapper を設定します(推奨)。"

#. type: delimited block =
#: upstream/_versions/main/guides/amazon-lambda.adoc:61
msgid "For full Gradle details <<gradle, see below>>."
msgstr "Gradleの詳細は link:#gradle[こちらを参照してください] 。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:64
#, no-wrap
msgid "Choose Your Lambda"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:69
msgid "The `quarkus-amazon-lambda` extension scans your project for a class that directly implements the Amazon `RequestHandler<?, ?>` or `RequestStreamHandler` interface.  It must find a class in your project that implements this interface or it will throw a build time failure.  If it finds more than one handler class, a build time exception will also be thrown."
msgstr "`quarkus-amazon-lambda` エクステンションは、Amazon `RequestHandler<?, ?>` または `RequestStreamHandler` インターフェイスを直接実装しているクラスをプロジェクト内でスキャンします。このインターフェイスを実装しているクラスがプロジェクト内で見つかるようにしなければならず、そうでない場合にはビルド時に例外がスローされます。複数のハンドラークラスを見つけた場合にも、ビルド時の例外がスローされます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:73
msgid "Sometimes, though, you might have a few related lambdas that share code and creating multiple maven modules is just an overhead you don't want to do.  The `quarkus-amazon-lambda` extension allows you to bundle multiple lambdas in one project and use configuration or an environment variable to pick the handler you want to deploy."
msgstr "しかし、時にはコードを共有するいくつかの関連する Lambda があって、複数の maven モジュールを作成することは、やりたくないオーバーヘッドに過ぎないことがあるかもしれません。 `quarkus-amazon-lambda` エクステンションを使用すると、1 つのプロジェクトに複数のラムダをバンドルし、設定または環境変数を使用してデプロイしたいハンドラーを選択することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:76
msgid "The generated project has three lambdas within it.  Two that implement the `RequestHandler<?, ?>` interface, and one that implements the `RequestStreamHandler` interface. One that is used and two that are unused.  If you open up `src/main/resources/application.properties` you'll see this:"
msgstr "生成されたプロジェクトは、その中に3つの Lambda を持っています。 `RequestHandler<?, ?>` インターフェイスを実装したものが 2 つ、 `RequestStreamHandler` インターフェイスを実装したものが 1 つ。1つは使用され、2つは未使用です。 `src/main/resources/application.properties` を開くと、このようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:80
#, no-wrap
msgid "quarkus.lambda.handler=test\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:84
msgid "The `quarkus.lambda.handler` property tells Quarkus which lambda handler to deploy. This can be overridden with an environment variable too."
msgstr "`quarkus.lambda.handler` プロパティーは、デプロイする Lambda ハンドラーをQuarkusに伝えます。これは環境変数でオーバーライドすることもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:86
msgid "If you look at the three generated handler classes in the project, you'll see that they are `@Named` differently."
msgstr "プロジェクト内で生成された3つのハンドラークラスを見てみると、異なる `@Named` が指定されていることがわかります。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:92
#, no-wrap
msgid ""
"@Named(\"test\")\n"
"public class TestLambda implements RequestHandler<InputObject, OutputObject> {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:96
#, no-wrap
msgid ""
"@Named(\"unused\")\n"
"public class UnusedLambda implements RequestHandler<InputObject, OutputObject> {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:100
#, no-wrap
msgid ""
"@Named(\"stream\")\n"
"public class StreamLambda implements RequestStreamHandler {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:103
msgid "The CDI name of the handler class must match the value specified within the `quarkus.lambda.handler` property."
msgstr "ハンドラークラスのCDI名は、 `quarkus.lambda.handler` プロパティー内で指定された値と一致しなければなりません。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:105
#, no-wrap
msgid "Deploy to AWS Lambda Java Runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:109
msgid "There are a few steps to get your lambda running on AWS.  The generated maven project contains a helpful script to create, update, delete, and invoke your lambdas for pure Java and native deployments."
msgstr "Lambda をAWS上で動作させるには、いくつかのステップがあります。生成されたmavenプロジェクトには、pure Java とネイティブデプロイメント用の Lambda を作成、更新、削除、呼び出しするための便利なスクリプトが含まれています。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:110
#, no-wrap
msgid "Build and Deploy"
msgstr "ビルドとデプロイ"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:113
msgid "Build the project:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:117
msgid "This will compile and package your code."
msgstr "これでコードがコンパイルされ、パッケージ化されます。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:118
#, no-wrap
msgid "Create an Execution Role"
msgstr "実行ロールの作成"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:124
msgid "View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define a `LAMBDA_ROLE_ARN` environment variable in your profile or console window, Alternatively, you can edit the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr "AWS CLIを使った Lambda のデプロイ方法については、 link:https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] を参照してください。具体的には、 `Execution Role` を作成していることを確認してください。プロファイルやコンソールウィンドウで `LAMBDA_ROLE_ARN` 環境変数を定義する必要があります。また、ビルドで生成される `manage.sh` スクリプトを編集して、そこに直接ロール値を置くこともできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:128
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:130
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "ビルド時に追加生成されるファイル"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:134
msgid "After you run the build, there are a few extra files generated by the `quarkus-amazon-lambda` extension.  These files are in the the build directory: `target/` for maven, `build/` for gradle."
msgstr "ビルドを実行すると、 `quarkus-amazon-lambda` のエクステンションで生成されるいくつかの追加ファイルがあります。これらのファイルはビルドディレクトリーにあります: mavenなら `target/` 、gradleなら `build/` 。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:136
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - Lambda デプロイファイル"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:137
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr "`manage.sh` - aws Lambda CLI の呼び出しのラッパー"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:138
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:139
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr "`sam.jvm.yaml` - (オプション) SAM CLI やローカル・テスト用"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:140
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr "`sam.native.yaml` - (オプション) SAM CLI やネイティブ・ローカル・テスト用(オプション)"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:141
#, no-wrap
msgid "Create the function"
msgstr "関数を作成する"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:146
msgid "The `target/manage.sh` script is for managing your lambda using the AWS Lambda Java runtime.  This script is provided only for your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your lambdas."
msgstr "`target/manage.sh` スクリプトは、AWS Lambda Java ランタイムを使用して Lambda を管理するためのものです。このスクリプトは利便性のためだけに提供されています。Lambda の作成、削除、更新のためにどのようなawsコマンドが実行されるかを知りたい場合は、 `manage.sh` スクリプトの出力を確認してください。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:148
msgid "`manage.sh` supports four operation: `create`, `delete`, `update`, and `invoke`."
msgstr "`manage.sh` は、 `create` , `delete` , `update` , `invoke` の 4 つの操作をサポートしています。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:152
msgid "To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys, and setup the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.  A usage statement will be printed to guide you accordingly."
msgstr "AWS CLIがインストールされていること、AWSアクセスキーのためのaws configureを実行していること、 `LAMBDA_ROLE_ARN` 環境変数を設定していること(上記の通り)を確認するには、 `manage.sh` をパラメーターなしで実行してください。それに応じて利用方法のガイドが表示されます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:154
msgid "If using Gradle, the path to the binaries in the `manage.sh` must be changed from `target` to `build`"
msgstr "Gradleを使用している場合、 `manage.sh` のバイナリーへのパスを `target` から `build` に変更しなければなりません。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:156
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr "`usage` を参照したり、AWS の設定を検証するためには次のようにします。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:159
#, no-wrap
msgid "sh target/manage.sh\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:162
msgid "You can `create` your function using the following command:"
msgstr "次のコマンドを使って、 Function を `create` します。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:166
#, no-wrap
msgid "sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:169
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr "または、このシェルで既に `LAMBDA_ROLE_ARN` が定義されていない場合にはこうです。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:173
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\" sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:177
msgid "Do not change the handler switch.  This must be hardcoded to `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest`.  This handler bootstraps Quarkus and wraps your actual handler so that injection can be performed."
msgstr "ハンドラースイッチを変更しないでください。これは、 `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest` にハードコードする必要があります。このハンドラは、Quarkusをブートストラップし、インジェクションを実行できるように実際のハンドラをラップします。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:180
msgid "If there are any problems creating the function, you must delete it with the `delete` function before re-running the `create` command."
msgstr "Function の作成に問題がある場合は、 `delete` で Function を削除してから `create` コマンドを再実行する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:184
#, no-wrap
msgid "sh target/manage.sh delete\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:187
msgid "Commands may also be stacked:"
msgstr "コマンドはスタックすることもできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:190
#, no-wrap
msgid "sh target/manage.sh delete create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:192
#, no-wrap
msgid "Invoke the Lambda"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:195
msgid "Use the `invoke` command to invoke your function."
msgstr "Function を呼び出すには `invoke` コマンドを使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:199
#, no-wrap
msgid "sh target/manage.sh invoke\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:203
msgid "The example lambda takes input passed in via the `--payload` switch which points to a json file in the root directory of the project."
msgstr "サンプルの Lambda は、プロジェクトのルートディレクトリーにある json ファイルを指す `--payload` スイッチを介して渡された入力を受け取ります。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:205
msgid "The lambda can also be invoked locally with the SAM CLI like this:"
msgstr "Lambda は、以下のようにSAM CLI によってローカルで呼び出すこともできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:209
#: upstream/_versions/main/guides/amazon-lambda.adoc:382
#, no-wrap
msgid "sam local invoke --template target/sam.jvm.yaml --event payload.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:212
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr "ネイティブイメージのビルドで作業している場合は、テンプレート名をネイティブバージョンに置き換えてください。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:216
#: upstream/_versions/main/guides/amazon-lambda.adoc:389
#, no-wrap
msgid "sam local invoke --template target/sam.native.yaml --event payload.json\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:218
#, no-wrap
msgid "Update the Lambda"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:222
msgid "You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your lambda by executing the `update` command."
msgstr "お好きなように Java コードを更新することができます。リビルドしたら、 `update` コマンドを実行することで、Lambda を再配備できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:226
#, no-wrap
msgid "sh target/manage.sh update\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:228
#, no-wrap
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:232
msgid "If you want a lower memory footprint and faster initialization times for your lambda, you can compile your Java code to a native executable.  Just make sure to rebuild your project with the `-Pnative` switch."
msgstr "Lambda のメモリーフットプリントを減らし、初期化時間を短縮したい場合は、Javaコードをネイティブ実行可能ファイルにコンパイルすることができます。 `-Pnative` スイッチでプロジェクトをリビルドすることを確認してください。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:234
msgid "For Linux hosts, execute:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:240
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing Quarkus to use a docker build as Amazon Lambda requires linux binaries.  You can do this by passing this property to your build: `-Dquarkus.native.container-build=true`. This requires you to have Docker installed locally, however."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:246
msgid "Either of these commands will compile and create a native executable image.  It also generates a zip file `target/function.zip`.  This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda Custom (Provided) Runtime."
msgstr "これらのコマンドのいずれかがコンパイルされ、ネイティブの実行イメージが作成されます。また、zip ファイル `target/function.zip` も生成されます。このzipファイルには、 `bootstrap` にリネームされたネイティブ実行イメージが含まれています。これはAWS Lambda Custom (Provided) Runtimeの要件です。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:249
msgid "The instructions here are exactly as above with one change: you'll need to add `native` as the first parameter to the `manage.sh` script:"
msgstr "ここでの説明は上記と全く同じですが、1つ変更点があります: `manage.sh` スクリプトの最初のパラメーターとして `native` を追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:253
#, no-wrap
msgid "sh target/manage.sh native create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:258
msgid "As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish to work with native image builds.  The script will take care of the rest of the details necessary to manage your native image function deployments."
msgstr "上記のように、コマンドはスタックすることができます。唯一の要件は、ネイティブイメージビルドで作業したい場合、最初のパラメーターとして `native` を指定することです。このスクリプトは、ネイティブイメージ Function のデプロイメントを管理するために必要な残りの詳細を処理します。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:261
msgid "Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your lambdas."
msgstr "Lambda を作成、削除、更新するためにどのようなawsコマンドが実行されるかを知りたい場合は、 `manage.sh` スクリプトの出力を調べてください。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:264
msgid "One thing to note about the create command for native is that the `aws lambda create-function` call must set a specific environment variable:"
msgstr "ネイティブ用のcreateコマンドについて注意すべき点は、 `aws lambda create-function` 呼び出しで特定の環境変数を設定しなければならないということです。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:268
#, no-wrap
msgid "--environment 'Variables={DISABLE_SIGNAL_HANDLERS=true}'\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:270
#, no-wrap
msgid "Examine the POM and Gradle build"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:274
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda` extension as a dependency.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:277
msgid "In previous versions of this extension you had to set up your pom or gradle to zip up your executable for native deployments, but this is not the case anymore."
msgstr "このエクステンションの以前のバージョンでは、ネイティブデプロイメントのために実行ファイルを zip 化するように pom や gradle を設定しなければなりませんでしたが、今はそうではありません。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:279
#, no-wrap
msgid "Gradle build"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:283
msgid "Similarly for Gradle projects, you also just have to add the `quarkus-amazon-lambda` dependency.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:285
msgid "Example Gradle dependencies:"
msgstr "Gradleの依存関係の例。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:292
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
"    implementation 'io.quarkus:quarkus-resteasy'\n"
"    implementation 'io.quarkus:quarkus-amazon-lambda'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:296
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"    testImplementation 'io.rest-assured:rest-assured'\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:299
#, no-wrap
msgid "Live Coding and Unit/Integration Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:303
msgid "To mirror the AWS Lambda environment as closely as possible in a dev environment, the Quarkus Amazon Lambda extension boots up a mock AWS Lambda event server in Quarkus Dev and Test mode.  This mock event server simulates a true AWS Lambda environment."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:307
msgid "While running in Quarkus Dev Mode, you can feed events to it by doing an HTTP POST to `http://localhost:8080`.  The mock event server will receive the events and your lambda will be invoked.  You can perform live coding on your lambda and changes will automatically be recompiled and available the next invocation you make.  Here's an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:313
#, no-wrap
msgid "$ curl -d \"{\\\"name\\\":\\\"John\\\"}\" -X POST http://localhost:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:319
msgid "For your unit tests, you can also invoke on the mock event server using any HTTP client you want.  Here's an example using rest-assured.  Quarkus starts up a separate Mock Event server under port 8081.  The default port for Rest Assured is automatically set to 8081 by Quarkus so you can invoke on this endpoint."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:324
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:326
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:329
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.containsString;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:332
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class LambdaHandlerTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:348
#, no-wrap
msgid ""
"    @Test\n"
"    public void testSimpleLambdaSuccess() throws Exception {\n"
"        Person in = new Person();\n"
"        in.setName(\"Stu\");\n"
"        given()\n"
"                .contentType(\"application/json\")\n"
"                .accept(\"application/json\")\n"
"                .body(in)\n"
"                .when()\n"
"                .post()\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(containsString(\"Hello Stu\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:352
msgid "The mock event server is also started for `@NativeImageTest` and `@QuarkusIntegrationTest` tests so will work with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:355
msgid "Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev and test mode ports with application.properties"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:360
#, no-wrap
msgid ""
"quarkus.lambda.mock-event-server.dev-port=8082\n"
"quarkus.lambda.mock-event-server.test-port=8083\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:363
msgid "A port value of zero will result in a randomly assigned port."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:364
#, no-wrap
msgid "Testing with the SAM CLI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:366
msgid "If you do not want to use the mock event server, you can test your lambdas with SAM CLI."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:371
msgid "The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] allows you to run your lambdas locally on your laptop in a simulated Lambda environment.  This requires https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] を利用すると、Lambda をシミュレートした環境でラップトップ上のローカルで Lambda を実行することができます。これには link:https://www.docker.com/products/docker-desktop[docker] のインストールが必要です。これは、利用することを選択した場合のオプションのアプローチです。それ以外の場合は、Quarkus JUnitの統合でほとんどのニーズを満たすことができるはずです。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:373
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr "JVMとネイティブ実行モードの両方に対応したスターターテンプレートが生成されています。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:376
msgid "Run the following SAM CLI command to locally test your lambda function, passing the appropriate SAM `template`.  The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr "以下の SAM CLI コマンドを実行して、適切な SAM `template` を渡して Lambda Function をローカルでテストします。 `event` パラメーターには任意の JSON ファイルを指定します。この場合はサンプル `payload.json` を指定しています。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:378
msgid "If using Gradle, the path to the binaries in the YAML templates must be changed from `target` to `build`"
msgstr "Gradle を使用している場合、YAML テンプレートのバイナリーへのパスを `target` から `build` に変更しなければなりません。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:385
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr "ネイティブイメージは、 `sam.native.yaml` テンプレートを使ってローカルでテストすることもできます。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:391
#, no-wrap
msgid "Modifying `function.zip`"
msgstr "`function.zip` の修正"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:396
msgid "The are times where you may have to add some additions to the `function.zip` lambda deployment that is generated by the build.  To do this create a `zip.jvm` or `zip.native` directory within `src/main`.  Create `zip.jvm/` if you are doing a pure Java lambda.  `zip.native/` if you are doing a native deployment."
msgstr "ビルドによって生成された `function.zip` Lambda デプロイメントにいくつかの追加を加えなければならない場合があります。これを行うには、 `src/main` 内に `zip.jvm` または `zip.native` ディレクトリーを作成します。Pure Java Lambda を実行している場合は `zip.jvm/` を、ネイティブディプロイメントを実行している場合は `zip.native/` を作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:398
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr "zipディレクトリーの下に作成したファイルやディレクトリーは、すべて `function.zip` に含まれます。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:399
#, no-wrap
msgid "Custom `bootstrap` script"
msgstr "カスタム `bootstrap` スクリプト"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:405
msgid "There are times you may want to set a specific system properties or other arguments when lambda invokes your native quarkus lambda deployment.  If you include a `bootstrap` script file within `zip.native`, the quarkus extension will automatically rename the executable to `runner` within `function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr "ラムダがネイティブの quarkus ラムダデプロイメントを起動する際に、特定のシステムプロパティーやその他の引数を設定したい場合があるかもしれません。 `zip.native` 内に `bootstrap` スクリプトファイルを含めると、Quarkus エクステンションは自動的に実行ファイルの名前を `function.zip` 内の `runner` に変更し、 `bootstrap` スクリプトの unix モードを実行ファイルに設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:407
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr "カスタム `bootstrap` スクリプトを含む場合は、ネイティブ実行可能ファイルを `runner` として参照する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:409
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr "このエクステンションは、サンプルのスクリプト `target/bootstrap-example.sh` を生成します。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:410
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:415
msgid "If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray library is not fully compatible with GraalVM so we had to do some integration work to make this work."
msgstr "ネイティブイメージをビルドしていて、Lambda で link:https://aws.amazon.com/xray[AWS X-Ray Tracing] を使いたい場合は、 `quarkus-amazon-lambda-xray` を依存関係として pom に含める必要があります。AWS X-Ray ライブラリは GraalVM との完全な互換性がないため、これを動作させるためにいくつかの統合作業をしなければなりませんでした。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:417
msgid "In addition, remember to enable the AWS X-Ray tracing parameter in `manage.sh`, in the `cmd_create()` function.  This can also be set in the AWS Management Console."
msgstr "さらに、 `manage.sh` の `cmd_create()` 関数で AWS X-Ray tracing パラメーターを有効にすることを忘れないでください。これはAWSマネジメントコンソールでも設定できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:420
#, no-wrap
msgid "    --tracing-config Mode=Active\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:423
msgid "For the sam template files, add the following to the YAML function Properties."
msgstr "SAM テンプレートファイルの場合は、YAML の Function Properties に以下を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:426
#, no-wrap
msgid "    Tracing: Active\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:430
msgid "AWS X-Ray does add many classes to your distribution, do ensure you are using at least the 256MB AWS Lambda memory size.  This is explicitly set in `manage.sh` `cmd_create()`. Whilst the native image potentially can always use a lower memory setting, it would be recommended to keep the setting the same, especially to help compare performance."
msgstr "AWS X-Ray はディストリビューションに多くのクラスを追加しますが、最低でも256MBのAWS Lambdaメモリーサイズを使用していることを確認してください。これは `manage.sh` `cmd_create()` で明示的に設定されています。ネイティブイメージは常により低いメモリー設定を使用できる可能性がありますが、特にパフォーマンスを比較するためには同じ設定にしておくことをお勧めします。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:432
#, no-wrap
msgid "Using HTTPS or SSL/TLS"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:437
msgid "If your code makes HTTPS calls, such as to a micro-service (or AWS service), you will need to add configuration to the native image, as GraalVM will only include the dependencies when explicitly declared.  Quarkus, by default enables this functionality on extensions that implicitly require it.  For further information, please consult the xref:native-and-ssl.adoc[Quarkus SSL guide]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:439
msgid "Open src/main/resources/application.properties and add the following line to enable SSL in your native image."
msgstr "src/main/resources/application.properties を開き、以下の行を追加してネイティブイメージでSSLを有効にします。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:443
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:446
#, no-wrap
msgid "Using the AWS Java SDK v2"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:450
msgid "Quarkus now has extensions for DynamoDB, S3, SNS and SQS (more coming).  Please check link:{amazon-services-guide}[those guides] on how to use the various AWS Services with Quarkus, as opposed to wiring manually like below."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:453
msgid "With minimal integration, it is possible to leverage the AWS Java SDK v2, which can be used to invoke services such as SQS, SNS, S3 and DynamoDB."
msgstr "最小限のインテグレーションで、AWSのJava SDK v2を活用し、SQS、SNS、S3、DynamoDBなどのサービスを呼び出すことが可能です。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:456
msgid "For native image, however the URL Connection client must be preferred over the Apache HTTP Client when using synchronous mode, due to issues in the GraalVM compilation (at present)."
msgstr "しかしながら、ネイティブイメージに対しては、同期モードを使用する場合は、GraalVMのコンパイルの問題のため、Apache HTTPクライアントよりもURL接続クライアントを優先する必要があります(現在のところ)。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:458
msgid "Add `quarkus-jaxb` as a dependency in your Maven `pom.xml`, or Gradle `build.gradle` file."
msgstr "`quarkus-jaxb` を依存関係として Maven `pom.xml` または Gradle `build.gradle` ファイルに追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:461
msgid "You must also force your AWS service client for SQS, SNS, S3 et al, to use the URL Connection client, which connects to AWS services over HTTPS, hence the inclusion of the SSL enabled property, as described in the <<https>> section above."
msgstr "また、SQS, SNS, S3などのAWSサービスクライアントでは、 link:#https[HTTPS] でAWSサービスに接続するURL Connectionクライアントを強制的に使用する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:467
#, no-wrap
msgid ""
"// select the appropriate client, in this case SQS, and\n"
"// insert your region, instead of XXXX, which also improves startup time over the default client\n"
"  client = SqsClient.builder().region(Region.XXXX).httpClient(software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient.builder().build()).build();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:470
msgid "For Maven, add the following to your `pom.xml`."
msgstr "Mavenの場合は、 `pom.xml` に以下を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:477
#, no-wrap
msgid ""
"    <properties>\n"
"        <aws.sdk2.version>2.10.69</aws.sdk2.version>\n"
"    </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:480
#, no-wrap
msgid ""
"    <dependencyManagement>\n"
"        <dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:488
#, no-wrap
msgid ""
"            <dependency>\n"
"                <groupId>software.amazon.awssdk</groupId>\n"
"                <artifactId>bom</artifactId>\n"
"                <version>${aws.sdk2.version}</version>\n"
"                <type>pom</type>\n"
"                <scope>import</scope>\n"
"            </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:492
#, no-wrap
msgid ""
"        </dependencies>\n"
"    </dependencyManagement>\n"
"    <dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:497
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>software.amazon.awssdk</groupId>\n"
"            <artifactId>url-connection-client</artifactId>\n"
"        </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:508
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>software.amazon.awssdk</groupId>\n"
"            <artifactId>apache-client</artifactId>\n"
"            <exclusions>\n"
"                <exclusion>\n"
"                    <groupId>commons-logging</groupId>\n"
"                    <artifactId>commons-logging</artifactId>\n"
"                </exclusion>\n"
"            </exclusions>\n"
"        </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:529
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>software.amazon.awssdk</groupId>\n"
"            <!-- sqs/sns/s3 etc -->\n"
"            <artifactId>sqs</artifactId>\n"
"            <exclusions>\n"
"                <!-- exclude the apache-client and netty client -->\n"
"                <exclusion>\n"
"                    <groupId>software.amazon.awssdk</groupId>\n"
"                    <artifactId>apache-client</artifactId>\n"
"                </exclusion>\n"
"                <exclusion>\n"
"                    <groupId>software.amazon.awssdk</groupId>\n"
"                    <artifactId>netty-nio-client</artifactId>\n"
"                </exclusion>\n"
"                <exclusion>\n"
"                    <groupId>commons-logging</groupId>\n"
"                    <artifactId>commons-logging</artifactId>\n"
"                </exclusion>\n"
"            </exclusions>\n"
"        </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:535
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>org.jboss.logging</groupId>\n"
"            <artifactId>commons-logging-jboss-logging</artifactId>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:539
msgid "if you see `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty` or similar SSL error, due to the current status of GraalVM, there is some additional work to bundle the `function.zip`, as below.  For more information, please see the xref:native-and-ssl.adoc[Quarkus Native SSL Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:540
#, no-wrap
msgid "Additional requirements for client SSL"
msgstr "クライアントSSLの追加要件"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:543
msgid "The native executable requires some additional steps to enable client SSL that S3 and other AWS libraries need."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:545
msgid "A custom `bootstrap` script"
msgstr "カスタム `bootstrap` スクリプト"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:546
msgid "`libsunec.so` must be added to `function.zip`"
msgstr "`function.zip` に `libsunec.so` を追加する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:547
msgid "`cacerts` must be added to `function.zip`"
msgstr "`function.zip` に `cacerts` を追加する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:550
msgid "To do this, first create a directory `src/main/zip.native/` with your build.  Next create a shell script file called `bootstrap` within `src/main/zip.native/`, like below. An example is create automatically in your build folder (target or build), called `bootstrap-example.sh`"
msgstr "これを行うには、まず、ビルドでディレクトリー `src/main/zip.native/` を作成します。次に `src/main/zip.native/` 内に `bootstrap` という名前のシェルスクリプトファイルを作成します。サンプル `bootstrap-example.sh` がビルドフォルダー(ターゲットまたはビルド)内に自動的に作成されます。 "

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:554
#, no-wrap
msgid "#!/usr/bin/env bash\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:556
#, no-wrap
msgid "./runner -Djava.library.path=./ -Djavax.net.ssl.trustStore=./cacerts\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:559
msgid "Additional set `-Djavax.net.ssl.trustStorePassword=changeit` if your `cacerts` file is password protected."
msgstr "`cacerts` ファイルがパスワードで保護されている場合は、追加で `-Djavax.net.ssl.trustStorePassword=changeit` を設定してください。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:561
msgid "Next you must copy some files from your GraalVM distribution into `src/main/zip.native/`."
msgstr "次に、GraalVM ディストリビューションから `src/main/zip.native/` にいくつかのファイルをコピーする必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:563
msgid "GraalVM versions can have different paths for these files, and whether you using the Java 8 or 11 version. Adjust accordingly."
msgstr "Java 8 か 11 バージョンのいずれか、GraalVM バージョンによって、これらのファイルのパスが異なる場合があります。それに応じて調整してください。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:568
#, no-wrap
msgid ""
"cp $GRAALVM_HOME/lib/libsunec.so $PROJECT_DIR/src/main/zip.native/\n"
"cp $GRAALVM_HOME/lib/security/cacerts $PROJECT_DIR/src/main/zip.native/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:571
msgid "Now when you run the native build all these files will be included within `function.zip`"
msgstr "ネイティブビルドを実行すると、これらのファイルはすべて `function.zip` に含まれます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:573
msgid "If you are using a Docker image to build, then you must extract these files from this image."
msgstr "Dockerイメージを使ってビルドする場合は、このイメージからこれらのファイルを抽出する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:575
msgid "To extract the required ssl, you must start up a Docker container in the background, and attach to that container to copy the artifacts."
msgstr "必要な SSL を抽出するには、バックグラウンドでDockerコンテナーを起動し、そのコンテナーにアタッチしてアーティファクトをコピーする必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:577
msgid "First, let's start the GraalVM container, noting the container id output."
msgstr "まず、GraalVMコンテナーを起動して、コンテナーIDの出力に注目してみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:580
#, no-wrap
msgid "docker run -it -d --entrypoint bash quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:583
#, no-wrap
msgid ""
"# This will output a container id, like 6304eea6179522aff69acb38eca90bedfd4b970a5475aa37ccda3585bc2abdde\n"
"# Note this value as we will need it for the commands below\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:586
msgid "First, libsunec.so, the C library used for the SSL implementation:"
msgstr "まず、SSLの実装に使用するC言語のライブラリである libsunec.so です。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:590
#, no-wrap
msgid "docker cp {container-id-from-above}:/opt/graalvm/lib/libsunec.so src/main/zip.native/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:593
msgid "Second, cacerts, the certificate store.  You may need to periodically obtain an updated copy, also."
msgstr "2つ目は、cacerts(証明書ストア)です。また、定期的に更新されたコピーを取得する必要があるかもしれません。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:596
#, no-wrap
msgid "docker cp {container-id-from-above}:/opt/graalvm/lib/security/cacerts src/main/zip.native/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:599
msgid "Your final archive will look like this:"
msgstr "最終的なアーカイブは以下のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:602
#, no-wrap
msgid "jar tvf target/function.zip\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:607
#, no-wrap
msgid ""
"    bootstrap\n"
"    runner\n"
"    cacerts\n"
"    libsunec.so\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:609
#, no-wrap
msgid "Deploy to AWS Lambda using a Container Image"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:612
msgid "AWS Lambda supports creating your lambdas by referencing https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html[container images] rather than uploading ZIP files. This can have some benefits such as bypassing the size limit of the uploaded ZIP files. You can define lambda functions for both native builds as well as regular JVM builds."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/amazon-lambda.adoc:613
#, no-wrap
msgid "JVM container image"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:616
msgid "For a regular JVM distribution you need to base your image off the official AWS Java base images. Below is an example of a Dockerfile that would create a container image from your Quarkus Lambda project. It assumes that `mvn package` has been executed and binaries are available in the `target/` directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:620
#, no-wrap
msgid "FROM  public.ecr.aws/lambda/java:11\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:623
#, no-wrap
msgid ""
"ADD target/my-service-0.0.1-SNAPSHOT-runner.jar /var/task/lib/my-service.jar\n"
"ADD target/lib/  /var/task/lib/\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:625
#: upstream/_versions/main/guides/amazon-lambda.adoc:639
#, no-wrap
msgid "CMD [\"io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\"]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/amazon-lambda.adoc:627
#, no-wrap
msgid "Native executable container image"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:630
msgid "To create a lambda container image that uses the native executable we'll need to do things a little differently. In this case, we won't need to use the `java:11` base image from AWS but instead we'll use a special image that assumes that the runtime environment for the lambda is provided. The example below creates such a container. It assumes that a Maven build has been executed (such as `mvn package -Dnative=true`) and has generated the native binary into the `target/` directory. The binary needs to be named `bootstrap` and be placed in `/var/runtime/`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:634
#, no-wrap
msgid "FROM  public.ecr.aws/lambda/provided\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:637
#, no-wrap
msgid ""
"ADD target/my-service-0.0.1-SNAPSHOT-runner /var/runtime/bootstrap\n"
"RUN chmod ugo+x /var/runtime/bootstrap\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/amazon-lambda.adoc:641
#, no-wrap
msgid "Deploying a container image lambda"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:644
msgid "Below, you can see how the container images created above can be built and deployed to AWS using the `docker` and `aws` command line tools. These instructions work for both native and jvm container images and assume that the `aws` command line tool has been logged in."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/amazon-lambda.adoc:645
#, no-wrap
msgid "Build the Docker image"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:655
#, no-wrap
msgid ""
"# Assuming we are located in the root directory of the project and created a Dockerfile there\n"
"docker build .\n"
"   [output omitted]\n"
"    => exporting to image                    0.0s\n"
"    => => exporting layers                   0.0s\n"
"    => => writing image sha256:[SOME SHA]    0.0s\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/amazon-lambda.adoc:657
#, no-wrap
msgid "Create an ECR repository in the users AWS account"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:662
#, no-wrap
msgid "aws ecr create-repository --repository-name my/test/quarkus-lambda\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/amazon-lambda.adoc:664
#, no-wrap
msgid "Tag the image using your ECR registry information"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:669
#, no-wrap
msgid "docker tag [SOME SHA] [YOUR AWS ACCOUNT ID].dkr.ecr.[YOUR AWS ACCOUNT REGION].amazonaws.com/my/test/quarkus-lambda:v1\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/amazon-lambda.adoc:671
#, no-wrap
msgid "Log Docker into your ECR registry and push the Docker image to it"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:677
#, no-wrap
msgid ""
"aws ecr get-login-password --region region | docker login --username AWS --password-stdin [YOUR AWS ACCOUNT ID].dkr.ecr.[YOUR AWS ACCOUNT REGION].amazonaws.com\n"
"docker push [YOUR AWS ACCOUNT ID].dkr.ecr.[YOUR AWS ACCOUNT REGION].amazonaws.com/my/test/quarkus-lambda:v1\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/amazon-lambda.adoc:679
#, no-wrap
msgid "Create the AWS lambda function with the AWS CLI tool"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:682
msgid "Make sure you reference the image you uploaded previously (assumes that a role exists that can be used to run the lambda). Please note that it is not unlikely that for the JVM lambda function, the default memory limit of `128Mb` will not be enough to run the function. In that case, you can increase the memory limit when creating the function by providing the `--memory-size 256` parameter to your `aws lambda create-function` command. You can also adjust the function in the AWS console after you've created it."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:686
#, no-wrap
msgid "aws lambda create-function --function-name my-test-quarkus-lambda-function --package-type Image --code ImageUri=[YOUR AWS ACCOUNT ID].dkr.ecr.[YOUR AWS ACCOUNT REGION].amazonaws.com/my/test/quarkus-lambda:v1 --role arn:aws:iam::[YOUR AWS ACCOUNT ID]:role/[SOME ROLE]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:689
msgid "Now you can use the AWS console to view and test your new lambda function."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda.adoc:690
#, no-wrap
msgid "Amazon Alexa Integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:693
msgid "To use Alexa with Quarkus native, you need to use the https://github.com/quarkiverse/quarkus-amazon-alexa[Quarkus Amazon Alexa extension hosted at the Quarkiverse Hub]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda.adoc:701
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.alexa</groupId>\n"
"    <artifactId>quarkus-amazon-alexa</artifactId>\n"
"    <version>${quarkus-amazon-alexa.version}</version> <1>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:703
msgid "Define the latest version of the extension in your POM file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:705
msgid "Create your Alexa handler, as normal, by sub-classing the abstract `com.amazon.ask.SkillStreamHandler`, and add your request handler implementation."
msgstr "通常通り、抽象クラス `com.amazon.ask.SkillStreamHandler` をサブクラス化して Alexa ハンドラーを作成し、リクエストハンドラーの実装を追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda.adoc:706
msgid "That's all there is to it!"
msgstr "それだけだよ!"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 30 minutes"
#~ msgstr "三十分以内"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "./mvnw clean package\n"
#~ msgstr "./mvnw clean package\n"

#~ msgid "or, if using Gradle:"
#~ msgstr "または、Gradleを使用している場合は"

#~ msgid "To use Alexa with Quarkus native, please add the following extension."
#~ msgstr "Alexa を Quarkus ネイティブで使用するには、以下のエクステンションを追加してください。"

#~ msgid "The dependency for `quarkus-test-amazon-lambda` will also need to be added to your build.gradle."
#~ msgstr "`quarkus-test-amazon-lambda` の依存関係も build.gradle に追加する必要があります。"

#~ msgid "The Quarkus Amazon Lambda extension has a matching test framework that provides functionality to execute standard JUnit tests on your AWS Lambda function, via the integration layer that Quarkus provides.  This is true for both JVM and native modes.  It provides similar functionality to the SAM CLI, without the overhead of Docker."
#~ msgstr "QuarkusのAmazon Lambdaエクステンションには、Quarkusが提供するインテグレーションレイヤーを介して、AWS Lambda関数上で標準的なJUnitテストを実行するための機能を提供するマッチングテストフレームワークがあります。これはJVMモードとネイティブモードの両方に当てはまります。これは、DockerのオーバーヘッドなしでSAM CLIと同様の機能を提供します。"

#~ msgid "To illustrate, the project generated by the Maven archetype, generates a JUnit test for the `RequestHandler<?, ?>` implementation, which is shown below.  The test replicates the execution environment, for the function that is selected for invocation, as described <<choose, above>>."
#~ msgstr "説明のために、Maven のアーキタイプで生成されたプロジェクトは、 `RequestHandler<?, ?>` の実装用の JUnit テストを生成します。このテストは、 link:#choose[上] で説明したように、呼び出しのために選択された関数の実行環境を複製しています。"

#~ msgid "To use the integration tests in your project there is a required property, in `src/test/resources/application.properties`. If not included, the integration tests will be in a constant loop."
#~ msgstr "プロジェクトで統合テストを使用するには、 `src/test/resources/application.properties` に必須のプロパティーがあります。これが含まれていない場合、統合テストは固定のループになります。"

#~ msgid "If you are following along with the example Maven archetype project for AWS Lambda in this guide, it includes the required property `quarkus.lambda.enable-polling-jvm-mode=true` in the test `application.properties`."
#~ msgstr "このガイドのAWS Lambda用のMaven archetypeプロジェクトの例に従う場合、テストの `application.properties` に必要なプロパティー `quarkus.lambda.enable-polling-jvm-mode=true` が含まれています。"

#~ msgid "Similarly, if you are using a `RequestStreamHandler` implementation, you can add a matching JUnit test, like below, which aligns to the generated `StreamLambda` class in the generated project."
#~ msgstr "同様に、 `RequestStreamHandler` の実装を使用している場合は、以下のように一致する JUnit テストを追加することで、生成されたプロジェクトで生成された `StreamLambda` クラスに合わせることができます。"

#~ msgid "Obviously, these two types of tests are mutually exclusive.  You must have a test that corresponds to the implemented AWS Lambda interfaces, whether `RequestHandler<?, ?>` or `RequestStreamHandler`."
#~ msgstr "明らかに、これら2種類のテストは相互に排他的です。 `RequestHandler<?, ?>` と `RequestStreamHandler` のいずれか、実装されているAWS Lambdaインターフェースに対応したテストを用意しなければなりません。"

#~ msgid "Two versions of the Test for `RequestStreamHandler` are presented below.  You can use either, depending on the needs of your Unit test.  The first is obviously simpler and quicker.  Using Java streams can require more coding."
#~ msgstr "以下に、 `RequestStreamHandler` 用のテストの 2 つのバージョンを紹介します。ユニットテストの必要性に応じて、どちらを使用しても構いません。前者の方が明らかにシンプルで速いです。Java ストリームを使用すると、より多くのコーディングが必要になることがあります。"

#~ msgid "}\n"
#~ msgstr "}\n"

#~ msgid "If your code uses CDI injection, this too will be executed, along with mocking functionality, see the link:getting-started-testing[Test Guide] for more details."
#~ msgstr "コードが CDI インジェクションを使用している場合、これもモッキング機能とともに実行されます。詳細は link:getting-started-testing[テストガイド] を参照してください。"

#~ msgid "To add JUnit functionality for native tests, add the `@NativeImageTest` annotation to a subclass of your test class, which will execute against your native image, and can be leveraged in an IDE."
#~ msgstr "ネイティブテストに JUnit の機能を追加するには、テストクラスのサブクラスに `@NativeImageTest` アノテーションを追加します。"
