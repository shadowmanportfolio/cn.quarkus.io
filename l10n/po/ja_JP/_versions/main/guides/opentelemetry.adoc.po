# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-10 02:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/opentelemetry.adoc:6
#, no-wrap
msgid "Using OpenTelemetry"
msgstr "Using OpenTelemetry"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:12
msgid "This guide explains how your Quarkus application can utilize https://opentelemetry.io/[OpenTelemetry] to provide distributed tracing for interactive web applications."
msgstr "このガイドでは、Quarkusアプリケーションが link:https://opentelemetry.io/[OpenTelemetry]を利用して、インタラクティブなウェブアプリケーションに分散トレーシングを提供する方法を説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:18
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:21
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr "このガイドでは、分散トレースを実証するための簡単なRESTアプリケーションを作成します。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:22
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:26
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、直ぐに完成した例に飛ばしても構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:28
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:30
msgid "The solution is located in the `opentelemetry-quickstart` {quickstarts-tree-url}/opentelemetry-quickstart[directory]."
msgstr "このソリューションは、 `opentelemetry-quickstart` {quickstarts-tree-url}/opentelemetry-quickstart[ディレクトリ]にあります。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:31
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:34
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:42
#, fuzzy
msgid "This command generates the Maven project and imports the `quarkus-opentelemetry-exporter-otlp` extension, which includes the OpenTelemetry support, and a gRPC span exporter for https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP]."
msgstr ""
"このコマンドは、RESTエンドポイントを持つMavenプロジェクトを生成し、"
"OpenTelemetryのサポートを含む `quarkus-opentelemetry-exporter-otlp` "
"エクステンションと、 link:https://github.com/open-telemetry/"
"opentelemetry-specification/blob/main/specification/protocol/otlp."
"md[OTLP]用のgRPCスパンエクスポーターをインポートします。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:45
msgid "If you already have your Quarkus project configured, you can add the `quarkus-opentelemetry-exporter-otlp` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリで以下のコマンドを実行することで、 `quarkus-opentelemetry-exporter-otlp` エクステンションをプロジェクトに追加することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:50
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:52
#: upstream/_versions/main/guides/opentelemetry.adoc:211
#: upstream/_versions/main/guides/opentelemetry.adoc:276
#: upstream/_versions/main/guides/opentelemetry.adoc:293
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:58
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-opentelemetry-exporter-otlp</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:61
#: upstream/_versions/main/guides/opentelemetry.adoc:220
#: upstream/_versions/main/guides/opentelemetry.adoc:285
#: upstream/_versions/main/guides/opentelemetry.adoc:302
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:64
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-opentelemetry-exporter-otlp\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:66
#, no-wrap
msgid "Examine the JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:69
#, fuzzy
msgid "Create a `src/main/java/org/acme/opentelemetry/TracedResource.java` file with the following content:"
msgstr ""
"`src/main/java/org/acme/opentelemetry/TracedResource.java` "
"のファイルを開くと、以下の内容が表示されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:73
#, no-wrap
msgid "package org.acme.opentelemetry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:79
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:82
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:84
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:92
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\");\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:96
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any required code changes."
msgstr "このアプリケーションには、トレースのためのコードが含まれていないことに注意してください。デフォルトでは、このエンドポイントに送信されたリクエストは、コードの変更を必要とせずにトレースされます。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:97
#, no-wrap
msgid "Create the configuration"
msgstr "設定の作成"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:100
msgid "There are two ways to configure the OTLP gRPC Exporter within the application."
msgstr "アプリケーション内でOTLP gRPC Exporterを設定するには2つの方法があります。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:102
msgid "The first approach is by providing the properties within the `src/main/resources/application.properties` file:"
msgstr "最初のアプローチは、 `src/main/resources/application.properties` ファイル内でプロパティーを提供することです。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:108
#, no-wrap
msgid ""
"quarkus.application.name=myservice // <1>\n"
"quarkus.opentelemetry.enabled=true // <2>\n"
"quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://localhost:4317 // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:110
#, no-wrap
msgid "quarkus.opentelemetry.tracer.exporter.otlp.headers=Authorization=Bearer my_secret // <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:113
msgid "All spans created from the application will include an OpenTelemetry `Resource` indicating the span was created by the `myservice` application. If not set, it will default to the artifact id."
msgstr "このアプリケーションから作成されたすべてのスパンには、そのスパンが `myservice` アプリケーションによって作成されたことを示す OpenTelemetry `Resource` が含まれます。設定されていない場合は、デフォルトでアーティファクトIDが設定されます。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:114
msgid "Whether OpenTelemetry is enabled or not. The default is `true`, but shown here to indicate how it can be disabled"
msgstr "OpenTelemetryを有効にするかどうか。デフォルトは `true` ですが、ここでは無効にできることを示しています。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:115
msgid "gRPC endpoint for sending spans"
msgstr "スパンを送信するためのgRPCエンドポイント"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:116
msgid "Optional gRPC headers commonly used for authentication"
msgstr "認証によく使われるオプションのgRPCヘッダー"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:117
#, no-wrap
msgid "Run the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:120
msgid "The first step is to configure and start the https://opentelemetry.io/docs/collector/[OpenTelemetry Collector] to receive, process and export telemetry data to https://www.jaegertracing.io/[Jaeger] that will display the captured traces."
msgstr "最初のステップは、テレメトリデータを受信して処理し、キャプチャしたトレースを表示する link:https://www.jaegertracing.io/[Jaeger]にエクスポートするための link:https://opentelemetry.io/docs/collector/[OpenTelemetry Collector]の設定と起動です。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:122
msgid "Configure the OpenTelemetry Collector by creating an `otel-collector-config.yaml` file:"
msgstr "`otel-collector-config.yaml` ファイルを作成して OpenTelemetry Collector を設定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:134
#, no-wrap
msgid ""
"receivers:\n"
"  otlp:\n"
"    protocols:\n"
"      grpc:\n"
"        endpoint: otel-collector:4317\n"
"  otlp/2:\n"
"    protocols:\n"
"      grpc:\n"
"        endpoint: otel-collector:55680\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:139
#, no-wrap
msgid ""
"exporters:\n"
"  jaeger:\n"
"    endpoint: jaeger-all-in-one:14250\n"
"    insecure: true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:142
#, no-wrap
msgid ""
"processors:\n"
"  batch:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:145
#, no-wrap
msgid ""
"extensions:\n"
"  health_check:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:153
#, no-wrap
msgid ""
"service:\n"
"  extensions: [health_check]\n"
"  pipelines:\n"
"    traces:\n"
"      receivers: [otlp,otlp/2]\n"
"      processors: [batch]\n"
"      exporters: [jaeger]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:157
msgid "Start the OpenTelemetry Collector and Jaeger system via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr "`docker-compose up -d` OpenTelemetry CollectorとJaegerシステムを、以下の `docker-compose.yml` ファイルを介して起動します。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:162
#, no-wrap
msgid ""
"version: \"2\"\n"
"services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:182
#, no-wrap
msgid ""
"  # Jaeger\n"
"  jaeger-all-in-one:\n"
"    image: jaegertracing/all-in-one:latest\n"
"    ports:\n"
"      - \"16686:16686\"\n"
"      - \"14268\"\n"
"      - \"14250\"\n"
"  # Collector\n"
"  otel-collector:\n"
"    image: otel/opentelemetry-collector:latest\n"
"    command: [\"--config=/etc/otel-collector-config.yaml\"]\n"
"    volumes:\n"
"      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml\n"
"    ports:\n"
"      - \"13133:13133\" # Health_check extension\n"
"      - \"4317:4317\"   # OTLP gRPC receiver\n"
"      - \"55680:55680\" # OTLP gRPC receiver alternative port\n"
"    depends_on:\n"
"      - jaeger-all-in-one\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:185
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr "これでアプリケーションを実行する準備が整いました。トレーサーの設定に `application.properties` を使用している場合:"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:189
msgid "or if configuring the OTLP gRPC endpoint via JVM arguments:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:195
msgid "With the OpenTelemetry Collector, Jaeger system and application running, you can make a request to the provided endpoint:"
msgstr "OpenTelemetry Collector、Jaegerシステム、アプリケーションが動作している状態で、提供されているエンドポイントにリクエストを出すことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:200
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:203
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr "その後、 link:http://localhost:16686[Jaeger UI] にアクセスしてトレース情報を確認します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:205
msgid "Hit `CTRL+C` to stop the application."
msgstr "`CTRL+C`  を叩いてアプリケーションを停止させます。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:206
#, no-wrap
msgid "JDBC"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:209
msgid "The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr "link:https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBCインスツルメンテーション]は、アプリケーションによって実行される各JDBCクエリのためにスパンを追加します。これを有効にするには、次の依存関係をビルドファイルに追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:217
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.instrumentation</groupId>\n"
"    <artifactId>opentelemetry-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:223
#, no-wrap
msgid "implementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:226
msgid "As it uses a dedicated JDBC driver, you must configure your datasource and Hibernate ORM to use it."
msgstr "専用のJDBCドライバを使用するため、データソースとHibernate ORMがそれを使用するように設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:236
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"# add ':otel' to your database URL\n"
"quarkus.datasource.jdbc.url=jdbc:otel:postgresql://localhost:5432/mydatabase\n"
"# use the 'OpenTelemetryDriver' instead of the one for your database\n"
"quarkus.datasource.jdbc.driver=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver\n"
"# configure Hibernate ORM dialect\n"
"quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQLDialect\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:238
#, fuzzy, no-wrap
msgid "Additional configuration"
msgstr "追加の計器"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:241
msgid "Some use cases will require custom configuration of OpenTelemetry.  These sections will outline what is necessary to properly configure it."
msgstr "一部のユースケースでは、OpenTelemetryのカスタム設定が必要になります。 これらのセクションでは、適切に構成するために必要なものについて概説します。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:242
#, no-wrap
msgid "ID Generator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:245
msgid "The OpenTelemetry extension will use by default a random https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID Generator] when creating the trace and span identifier."
msgstr "OpenTelemetry エクステンションでは、トレースおよびスパンの識別子を作成する際に、デフォルトでランダムな link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID ジェネレーター]を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:248
msgid "Some vendor-specific protocols need a custom ID Generator, you can override the default one by creating a producer.  The OpenTelemetry extension will detect the `IdGenerator` CDI bean and will use it when configuring the tracer producer."
msgstr "ベンダー固有のプロトコルの中には、カスタム ID ジェネレーターを必要とするものがありますが、プロデューサーを作成することで、デフォルトの ID ジェネレーターを上書きすることができます。OpenTelemetryエクステンションは、 `IdGenerator` CDI Beanを検出し、トレーサープロデューサーを構成する際にそれを使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:253
#: upstream/_versions/main/guides/opentelemetry.adoc:353
#, no-wrap
msgid ""
"@Singleton\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:261
#, no-wrap
msgid ""
"    /** Creates a custom IdGenerator for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public IdGenerator idGenerator() {\n"
"        return AwsXrayIdGenerator.getInstance();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:263
#, no-wrap
msgid "Propagators"
msgstr "プロパゲーター"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:266
msgid "OpenTelemetry propagates cross-cutting concerns through https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] that will share an underlying `Context` for storing state and accesing data across the lifespan of a distributed transaction."
msgstr "OpenTelemetryは、分散型トランザクションの寿命を超えて状態を保存し、データにアクセスするための基礎となる `Context` を共有する link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[プロパゲータ]を通じて、横断的な関心を伝播します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:269
msgid "By default, the OpenTelemetry extension enables the https://www.w3.org/TR/trace-context/[W3C Trace Context] and the https://www.w3.org/TR/baggage/[W3C Baggage] propagators, you can however choose any of the supported OpenTelemetry propagators by setting the `propagators` config that is described in the <<configuration-reference>>."
msgstr "デフォルトでは、OpenTelemetryエクステンションは、 link:https://www.w3.org/TR/trace-context/[W3C Trace Context]と link:https://www.w3.org/TR/baggage/[W3C Baggage]プロパゲータを有効にしていますが、 link:#configuration-reference[設定リファレンス]で説明されている `propagators` 設定を設定することで、サポートされているOpenTelemetryプロパゲータのいずれかを選択することができます。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:274
msgid "The `b3`, `b3multi`, `jaeger` and `ottrace` propagators will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] extension to be added as a dependency to your project."
msgstr "`b3`, `b3multi`, `jaeger`, `ottrace` のプロパゲータは、プロジェクトに link:https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators]エクステンションを依存関係として追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:282
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:288
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:291
msgid "The `xray` propagator will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/aws[aws] extension to be added as a dependency to your project."
msgstr "`xray` プロパゲータは、 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/aws[aws]エクステンションをプロジェクトに依存関係として追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:299
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-aws</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:305
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-aws\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:308
#, no-wrap
msgid "Resource"
msgstr "リソース"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:311
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[resource] is a representation of the entity that is producing telemetry, it adds attributes to the exported trace to characterize who is producing the trace."
msgstr "link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[リソース]は、テレメトリを生成しているエンティティの表現であり、誰がトレースを生成しているかを特徴づけるために、エクスポートされたトレースに属性を追加します。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:315
msgid "You can add attributes by setting the `resource-attributes` tracer config that is described in the <<configuration-reference>>.  Since this property can be overridden at runtime, the OpenTelemetry extension will pick up its value following the order of precedence that is described in the xref:config-reference.adoc#configuration_sources[Quarkus Configuration Reference]."
msgstr "link:#configuration-reference[設定リファレンス]に記載されている `resource-attributes` tracer configを設定することで、属性を追加することができます。このプロパティは実行時にオーバーライドすることができるため、OpenTelemetryエクステンションは、 link:config-reference.html#configuration_sources[Quarkus 設定リファレンス]に記載されている優先順位に従ってその値をピックアップします。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:318
msgid "If by any means you need to use a custom resource or one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create multiple resource producers. The OpenTelemetry extension will detect the `Resource` CDI beans and will merge them when configuring the tracer producer."
msgstr "カスタムリソースや link:https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions]で提供されているリソースを使用する必要がある場合は、複数のリソースプロデューサーを作成することができます。OpenTelemetryエクステンションは、 `Resource` CDI Beanを検出し、トレーサー・プロデューサーを構成する際にそれらをマージします。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:323
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:329
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource osResource() {\n"
"        return OsResource.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:336
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource ecsResource() {\n"
"        return EcsResource.get();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:338
#, no-wrap
msgid "Sampler"
msgstr "サンプラー"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:342
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[sampler] decides whether a trace should be sampled and exported, controlling noise and overhead by reducing the number of sample of traces collected and sent to the collector."
msgstr "link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[サンプラー]は、トレースをサンプリングしてエクスポートするかどうかを決定し、収集してコレクターに送信するトレースのサンプル数を減らすことで、ノイズやオーバーヘッドを制御します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:345
msgid "You can set a https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[built-in sampler] simply by setting the desired sampler config described in the <<configuration-reference>>."
msgstr "link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[内蔵サンプラー]の設定は、 link:#configuration-reference[[configuration-reference]]に記載されている希望のサンプラー設定を設定するだけで可能です。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:348
msgid "If you need to use a custom sampler or to use one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create a sampler producer. The OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the tracer producer."
msgstr "カスタムサンプラーを使用する必要がある場合や、 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions]の1つが提供するサンプラーを使用する必要がある場合は、サンプラー・プロデューサーを作成することができます。OpenTelemetryエクステンションは、 `Sampler` CDI Beanを検出し、トレーサープロデューサーを構成する際にそれを使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:363
#, no-wrap
msgid ""
"    /** Creates a custom sampler for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public Sampler sampler() {\n"
"        return JaegerRemoteSampler.builder()\n"
"        .setServiceName(\"my-service\")\n"
"        .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:365
#, no-wrap
msgid "Additional instrumentation"
msgstr "追加の計器"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:369
msgid "Some Quarkus extensions will require additional code to ensure traces are propagated to subsequent execution.  These sections will outline what is necessary to propagate traces across process boundaries."
msgstr "Quarkusエクステンションの中には、トレースが後続の実行に伝搬されることを保証するために追加のコードを必要とするものがあります。これらのセクションでは、プロセスの境界を越えてトレースを伝搬するために必要なことを説明します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:371
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr "このセクションで説明されている計器は、Quarkusでテストされており、標準モードとネイティブモードの両方で動作します。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:372
#, no-wrap
msgid "CDI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:376
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.extension.annotations.WithSpan` annotation will create a new Span and establish any required relationships with the current Trace context."
msgstr "CDI を意識した Bean のメソッドに `io.opentelemetry.extension.annotations.WithSpan` というアノテーションを付けると、新しい Span が作成され、現在の Trace コンテキストと必要な関係が確立されます。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:379
msgid "Method parameters can be annotated with the `io.opentelemetry.extension.annotations.SpanAttribute` annotation to indicate which method parameters should be part of the Trace."
msgstr "メソッドパラメータには、 `io.opentelemetry.extension.annotations.SpanAttribute` アノテーションを付けて、どのメソッドパラメータが Trace の一部となるべきかを示すことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:381
msgid "Example:"
msgstr "例:"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:387
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class SpanBean {\n"
"    @WithSpan\n"
"    void span() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:389
#: upstream/_versions/main/guides/opentelemetry.adoc:394
#: upstream/_versions/main/guides/opentelemetry.adoc:399
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:392
#, no-wrap
msgid ""
"    @WithSpan(\"name\")\n"
"    void spanName() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:397
#, no-wrap
msgid ""
"    @WithSpan(kind = SERVER)\n"
"    void spanKind() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:402
#, no-wrap
msgid ""
"    @WithSpan\n"
"    void spanArgs(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:405
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:407
#, no-wrap
msgid "SmallRye Reactive Messaging - Kafka"
msgstr "SmallRye Reactive Messaging - Kafka"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:411
msgid "When using the SmallRye Reactive Messaging extension for Kafka, we are able to propagate the span into the Kafka Record with:"
msgstr "SmallRye Reactive Messaging extension for Kafkaを使用すると、スパンをKafka Recordに伝搬させることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:415
#, no-wrap
msgid "Metadata.of(TracingMetadata.withPrevious(Context.current()));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:419
msgid "The above creates a `Metadata` object we can add to the `Message` being produced, which retrieves the OpenTelemetry `Context` to extract the current span for propagation."
msgstr "上記は、生成されている `Message` に追加できる `Metadata` オブジェクトを作成し、OpenTelemetry `Context` を取得して、伝播のために現在のスパンを抽出しています。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:421
#, no-wrap
msgid "OpenTelemetry Configuration Reference"
msgstr ""

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Docker"
#~ msgstr "Docker"

#~ msgid "./mvnw compile quarkus:dev\n"
#~ msgstr "./mvnw compile quarkus:dev\n"
