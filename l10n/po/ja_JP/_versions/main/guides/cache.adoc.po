# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-03-19 02:28+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/cache.adoc:6
#, no-wrap
msgid "Application Data Caching"
msgstr "アプリケーションデータのキャッシング"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:12
msgid "In this guide, you will learn how to enable application data caching in any CDI managed bean of your Quarkus application."
msgstr "このガイドでは、QuarkusアプリケーションのCDI管理されたBeanでアプリケーションデータのキャッシングを有効にする方法について説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:15
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:19
#, no-wrap
msgid "Scenario"
msgstr "シナリオ"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:24
msgid "Let's imagine you want to expose in your Quarkus application a REST API that allows users to retrieve the weather forecast for the next three days.  The problem is that you have to rely on an external meteorological service which only accepts requests for one day at a time and takes forever to answer.  Since the weather forecast is updated once every twelve hours, caching the service responses would definitely improve your API performances."
msgstr "Quarkusアプリケーションで、ユーザーが今後3日間の天気予報を取得できるREST APIを公開したいとします。問題は、一度に1日分のリクエストしか受け付けず、応答に時間がかかる外部の気象サービスに依存しなければならないことです。天気予報は12時間に一度更新されるので、サービスのレスポンスをキャッシュすればAPIのパフォーマンスは間違いなく向上します。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:26
msgid "We'll do that using a single Quarkus annotation."
msgstr "これをQuarkusの単一のアノテーションを使用して行います。"

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:27
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:31
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:33
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:35
msgid "The solution is located in the `cache-quickstart` {quickstarts-tree-url}/cache-quickstart[directory]."
msgstr "ソリューションは `cache-quickstart` {quickstarts-tree-url}/cache-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:36
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:39
msgid "First, we need to create a new Quarkus project with the following command:"
msgstr "まず、以下のコマンドで新しいQuarkusプロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:45
#, fuzzy
msgid "This command generates the project and imports the `cache` and `resteasy-reactive-jackson` extensions."
msgstr "このコマンドは、プロジェクトを生成し、 `cache` と `resteasy-jackson` のエクステンションをインポートします。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:48
msgid "If you already have your Quarkus project configured, you can add the `cache` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `cache` エクステンションを追加することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:53
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/main/guides/cache.adoc:55
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:61
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-cache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/cache.adoc:64
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:67
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-cache\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:69
#, no-wrap
msgid "Creating the REST API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:73
msgid "Let's start by creating a service that will simulate an extremely slow call to the external meteorological service.  Create `src/main/java/org/acme/cache/WeatherForecastService.java` with the following content:"
msgstr "まずは、外部気象サービスへの非常に遅い呼び出しをシミュレートするサービスを作成してみましょう。以下の内容で `src/main/java/org/acme/cache/WeatherForecastService.java` を作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:77
#: upstream/_versions/main/guides/cache.adoc:118
#: upstream/_versions/main/guides/cache.adoc:148
#: upstream/_versions/main/guides/cache.adoc:210
#: upstream/_versions/main/guides/cache.adoc:333
#: upstream/_versions/main/guides/cache.adoc:385
#: upstream/_versions/main/guides/cache.adoc:428
#: upstream/_versions/main/guides/cache.adoc:471
#: upstream/_versions/main/guides/cache.adoc:580
#: upstream/_versions/main/guides/cache.adoc:611
#: upstream/_versions/main/guides/cache.adoc:643
#: upstream/_versions/main/guides/cache.adoc:674
#: upstream/_versions/main/guides/cache.adoc:704
#, no-wrap
msgid "package org.acme.cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:79
#: upstream/_versions/main/guides/cache.adoc:212
#, no-wrap
msgid "import java.time.LocalDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:81
#: upstream/_versions/main/guides/cache.adoc:214
#: upstream/_versions/main/guides/cache.adoc:335
#: upstream/_versions/main/guides/cache.adoc:473
#: upstream/_versions/main/guides/cache.adoc:582
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:84
#: upstream/_versions/main/guides/cache.adoc:219
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class WeatherForecastService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:93
#, no-wrap
msgid ""
"    public String getDailyForecast(LocalDate date, String city) {\n"
"        try {\n"
"            Thread.sleep(2000L); <1>\n"
"        } catch (InterruptedException e) {\n"
"            Thread.currentThread().interrupt();\n"
"        }\n"
"        return date.getDayOfWeek() + \" will be \" + getDailyResult(date.getDayOfMonth() % 4) + \" in \" + city;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:109
#: upstream/_versions/main/guides/cache.adoc:245
#, no-wrap
msgid ""
"    private String getDailyResult(int dayOfMonthModuloFour) {\n"
"        switch (dayOfMonthModuloFour) {\n"
"            case 0:\n"
"                return \"sunny\";\n"
"            case 1:\n"
"                return \"cloudy\";\n"
"            case 2:\n"
"                return \"chilly\";\n"
"            case 3:\n"
"                return \"rainy\";\n"
"            default:\n"
"                throw new IllegalArgumentException();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:111
msgid "This is where the slowness comes from."
msgstr "遅さの原因はここにあります。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:114
msgid "We also need a class that will contain the response sent to the users when they ask for the next three days weather forecast.  Create `src/main/java/org/acme/cache/WeatherForecast.java` this way:"
msgstr "また、ユーザーが次の3日間の天気予報を求めたときに送信されるレスポンスを含むクラスも必要です。 `src/main/java/org/acme/cache/WeatherForecast.java` をこのように作成します:"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:120
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:122
#, no-wrap
msgid "public class WeatherForecast {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:124
#, no-wrap
msgid "    private List<String> dailyForecasts;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:126
#, no-wrap
msgid "    private long executionTimeInMs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:131
#, no-wrap
msgid ""
"    public WeatherForecast(List<String> dailyForecasts, long executionTimeInMs) {\n"
"        this.dailyForecasts = dailyForecasts;\n"
"        this.executionTimeInMs = executionTimeInMs;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:135
#, no-wrap
msgid ""
"    public List<String> getDailyForecasts() {\n"
"        return dailyForecasts;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:140
#, no-wrap
msgid ""
"    public long getExecutionTimeInMs() {\n"
"        return executionTimeInMs;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:144
#, fuzzy
msgid "Now, we just need to create the REST resource.  Create the `src/main/java/org/acme/cache/WeatherForecastResource.java` file with this content:"
msgstr "まずは、外部気象サービスへの非常に遅い呼び出しをシミュレートするサービスを作成してみましょう。以下の内容で `src/main/java/org/acme/cache/WeatherForecastService.java` を作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:152
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.util.Arrays;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:157
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:159
#, no-wrap
msgid "import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:162
#, no-wrap
msgid ""
"@Path(\"/weather\")\n"
"public class WeatherForecastResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:165
#, no-wrap
msgid ""
"    @Inject\n"
"    WeatherForecastService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:177
#, no-wrap
msgid ""
"    @GET\n"
"    public WeatherForecast getForecast(@RestQuery String city, @RestQuery long daysInFuture) { <1>\n"
"        long executionStart = System.currentTimeMillis();\n"
"        List<String> dailyForecasts = Arrays.asList(\n"
"                service.getDailyForecast(LocalDate.now().plusDays(daysInFuture), city),\n"
"                service.getDailyForecast(LocalDate.now().plusDays(daysInFuture + 1L), city),\n"
"                service.getDailyForecast(LocalDate.now().plusDays(daysInFuture + 2L), city));\n"
"        long executionEnd = System.currentTimeMillis();\n"
"        return new WeatherForecast(dailyForecasts, executionEnd - executionStart);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:180
msgid "If the `daysInFuture` query parameter is omitted, the three days weather forecast will start from the current day.  Otherwise, it will start from the current day plus the `daysInFuture` value."
msgstr "`daysInFuture` クエリパラメーターが省略された場合、3 日間の天気予報は現在の日から始まります。それ以外の場合は、現在の日に `daysInFuture` の値を加えたものから始まります。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:182
msgid "We're all done! Let's check if everything's working."
msgstr "終わりました!すべて上手く動いているか確認してみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:184
msgid "First, run the application using dev mode from the project directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:189
msgid "Then, call `http://localhost:8080/weather?city=Raleigh` from a browser.  After six long seconds, the application will answer something like this:"
msgstr "次に、ブラウザから `http://localhost:8080/weather?city=Raleigh` を呼び出します。6秒ほど長い時間が経過すると、アプリケーションはこのような回答をします:"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:193
#, no-wrap
msgid "{\"dailyForecasts\":[\"MONDAY will be cloudy in Raleigh\",\"TUESDAY will be chilly in Raleigh\",\"WEDNESDAY will be rainy in Raleigh\"],\"executionTimeInMs\":6001}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:198
msgid "The response content may vary depending on the day you run the code."
msgstr "コードを実行する日によってレスポンスの内容が異なる場合があります。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:201
msgid "You can try calling the same URL again and again, it will always take six seconds to answer."
msgstr "何度も同じURLを呼び出してみても、必ず6秒で返事が返ってきます。"

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:202
#, no-wrap
msgid "Enabling the cache"
msgstr "キャッシュの有効化"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:206
msgid "Now that your Quarkus application is up and running, let's tremendously improve its response time by caching the external meteorological service responses.  Update the `WeatherForecastService` class like this:"
msgstr "Quarkusアプリケーションが動いたので、外部の気象サービスのレスポンスをキャッシュすることで、レスポンスタイムを大幅に改善してみましょう。 `WeatherForecastService` クラスを次のように修正します。"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:216
#, no-wrap
msgid "import io.quarkus.cache.CacheResult;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:229
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"weather-cache\") <1>\n"
"    public String getDailyForecast(LocalDate date, String city) {\n"
"        try {\n"
"            Thread.sleep(2000L);\n"
"        } catch (InterruptedException e) {\n"
"            Thread.currentThread().interrupt();\n"
"        }\n"
"        return date.getDayOfWeek() + \" will be \" + getDailyResult(date.getDayOfMonth() % 4) + \" in \" + city;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:247
msgid "We only added this annotation (and the associated import of course)."
msgstr "このアノテーション(もちろん関連するインポートも)を追加しただけです。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:251
msgid "Let's try to call `http://localhost:8080/weather?city=Raleigh` again.  You're still waiting a long time before receiving an answer.  This is normal since the server just restarted and the cache was empty."
msgstr "`http://localhost:8080/weather?city=Raleigh` をもう一度呼び出して確認してみてください。返事が来るまでにまだ長い時間待たされています。これはサーバーが再起動したばかりでキャッシュが空になっているので正常です。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:254
msgid "Wait a second! The server restarted by itself after the `WeatherForecastService` update? Yes, this is one of Quarkus amazing features for developers called `live coding`."
msgstr "ちょっと待って!? `WeatherForecastService` のアップデート後、サーバーが勝手に再起動した?はい、これは、 `live coding` と呼ばれる開発者のためのQuarkusの驚くべき機能の一つです。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:257
msgid "Now that the cache was loaded during the previous call, try calling the same URL.  This time, you should get a super fast answer with an `executionTimeInMs` value close to 0."
msgstr "前回の呼び出しでキャッシュが読み込まれたので、同じ URL を呼び出してみてください。今度は、 `executionTimeInMs` の値が 0 に近い超高速な応答が返ってくるはずです。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:260
msgid "Let's see what happens if we start from one day in the future using the `http://localhost:8080/weather?city=Raleigh&daysInFuture=1` URL.  You should get an answer two seconds later since two of the requested days were already loaded in the cache."
msgstr "URL `http://localhost:8080/weather?city=Raleigh&daysInFuture=1` を使って未来のある日から始めるとどうなるか見てみましょう。要求された日のうち2つはすでにキャッシュに読み込まれていたので、2秒後に回答が得られるはずです。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:263
msgid "You can also try calling the same URL with a different city and see the cache in action again.  The first call will take six seconds and the following ones will be answered immediately."
msgstr "また、同じURLを別の都市で呼び出してみて、再度キャッシュの動作を確認することもできます。最初の呼び出しには6秒ほどかかり、次の呼び出しにはすぐに出ます。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:265
msgid "Congratulations! You just added application data caching to your Quarkus application with a single line of code!"
msgstr "おめでとうございます。たった1行のコードでQuarkusアプリケーションにアプリケーションデータのキャッシングを追加できました!"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:268
msgid "Do you want to learn more about the Quarkus application data caching abilities? The following sections will show you everything there is to know about it."
msgstr "Quarkusアプリケーションのデータキャッシング機能について詳しく知りたいですか?以下のセクションでは、この機能について知っておくべきことをすべて紹介します。"

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:270
#, no-wrap
msgid "Caching using annotations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:273
msgid "Quarkus offers a set of annotations that can be used in a CDI managed bean to enable caching abilities."
msgstr "Quarkusは、CDI管理されたBeanで使用できる、キャッシング機能を有効にするアノテーションのセットを提供します。"

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:278
msgid "Caching annotations are not allowed on private methods.  They will work fine with any other access modifier including package-private (no explicit modifier)."
msgstr "プライベートメソッドではキャッシュのアノテーションは許可されていません。package-private (明示的な修飾子を持たない) を含む他のアクセス修飾子では問題なく動作します。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:280
#, no-wrap
msgid "@CacheResult"
msgstr "@CacheResult"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:283
msgid "Loads a method result from the cache without executing the method body whenever possible."
msgstr "可能な限り、メソッド本体を実行せずにキャッシュからメソッドの結果を読み込みます。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:290
msgid "When a method annotated with `@CacheResult` is invoked, Quarkus will compute a cache key and use it to check in the cache whether the method has been already invoked.  If the method has one or more arguments, the key computation is done from all the method arguments if none of them is annotated with `@CacheKey`, or all the arguments annotated with `@CacheKey` otherwise.  Each non-primitive method argument that is part of the key must implement `equals()` and `hashCode()` correctly for the cache to work as expected.  This annotation can also be used on a method with no arguments, a default key derived from the cache name is used in that case.  If a value is found in the cache, it is returned and the annotated method is never actually executed.  If no value is found, the annotated method is invoked and the returned value is stored in the cache using the computed key."
msgstr "`@CacheResult` でアノテーションされたメソッドが呼び出されると、Quarkusはキャッシュキーを計算し、それを使用して、そのメソッドがすでに呼び出されているかどうかをキャッシュでチェックします。メソッドに1つ以上の引数がある場合、キーの計算は、 `@CacheKey` でアノテーションされていない場合はすべてのメソッド引数から、そうでない場合は `@CacheKey` でアノテーションされているすべての引数から行われます。キャッシュが期待通りに動作するためには、キーの一部である非プリミティブなメソッドの各引数は `equals()` と `hashCode()` を正しく実装しなければなりません。このアノテーションは引数を持たないメソッドにも使用することができ、その場合はキャッシュ名から派生したデフォルトキーが使用されます。キャッシュ内に値が見つかった場合はそれが返され、アノテーションされたメソッドは実際には実行されません。値が見つからない場合は、アノテーションされたメソッドが呼び出され、返された値は計算されたキーを使用してキャッシュに保存されます。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:297
msgid "A method annotated with `CacheResult` is protected by a lock on cache miss mechanism.  If several concurrent invocations try to retrieve a cache value from the same missing key, the method will only be invoked once.  The first concurrent invocation will trigger the method invocation while the subsequent concurrent invocations will wait for the end of the method invocation to get the cached result.  The `lockTimeout` parameter can be used to interrupt the lock after a given delay.  The lock timeout is disabled by default, meaning the lock is never interrupted.  See the parameter Javadoc for more details."
msgstr "`CacheResult` でアノテーションされたメソッドは、キャッシュミスのロック機構によって保護されています。複数の同時呼び出しが同じ欠落キーからキャッシュ値を取得しようとした場合、メソッドは一度だけ呼び出されます。最初の同時呼び出しはメソッドの呼び出しをトリガし、その後の同時呼び出しはキャッシュされた結果を取得するためにメソッドの呼び出しの終了を待ちます。 `lockTimeout` パラメーターを使用すると、所定の遅延後にロックを中断することができます。ロックのタイムアウトは既定では無効になっており、ロックが中断されることはありません。詳細は、パラメーター Javadoc を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:299
msgid "This annotation cannot be used on a method returning `void`."
msgstr "このアノテーションは、 `void` を返すメソッドでは使用できません。"

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:304
msgid "Quarkus is able to also cache `null` values unlike the underlying Caffeine provider.  See <<negative-cache,more on this topic below>>."
msgstr "Quarkusは、基礎となるCaffeineプロバイダとは異なり、 `null` の値をキャッシュすることもできます。 link:#negative-cache[このトピックの詳細は以下] を参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:306
#, no-wrap
msgid "@CacheInvalidate"
msgstr "@CacheInvalidate"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:309
msgid "Removes an entry from the cache."
msgstr "キャッシュからエントリーを削除します。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:314
msgid "When a method annotated with `@CacheInvalidate` is invoked, Quarkus will compute a cache key and use it to try to remove an existing entry from the cache.  If the method has one or more arguments, the key computation is done from all the method arguments if none of them is annotated with `@CacheKey`, or all the arguments annotated with `@CacheKey` otherwise.  This annotation can also be used on a method with no arguments, a default key derived from the cache name is used in that case.  If the key does not identify any cache entry, nothing will happen."
msgstr "`@CacheInvalidate` でアノテーションされたメソッドが呼び出されると、Quarkusはキャッシュキーを計算し、それを使用してキャッシュから既存のエントリーを削除しようとします。メソッドに1つ以上の引数がある場合、キーの計算は、 `@CacheKey` でアノテーションされていない場合はすべてのメソッド引数から、そうでない場合は `@CacheKey` でアノテーションされているすべての引数から行われます。このアノテーションは引数を持たないメソッドでも使用でき、その場合はキャッシュ名から派生したデフォルトのキーが使用されます。キーがキャッシュエントリーを識別しない場合は、何も起こりません。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:315
#, no-wrap
msgid "@CacheInvalidateAll"
msgstr "@CacheInvalidateAll"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:318
msgid "When a method annotated with `@CacheInvalidateAll` is invoked, Quarkus will remove all entries from the cache."
msgstr "`@CacheInvalidateAll` でアノテーションされたメソッドが呼び出されると、Quarkusはキャッシュからすべてのエントリーを削除します。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:319
#, no-wrap
msgid "@CacheKey"
msgstr "@CacheKey"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:323
msgid "When a method argument is annotated with `@CacheKey`, it is identified as a part of the cache key during an invocation of a method annotated with `@CacheResult` or `@CacheInvalidate`."
msgstr "メソッドの引数が `@CacheKey` でアノテーションされている場合、 `@CacheResult` または `@CacheInvalidate` でアノテーションされたメソッドの呼び出し時にキャッシュキーの一部として識別されます。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:325
msgid "This annotation is optional and should only be used when some of the method arguments are NOT part of the cache key."
msgstr "このアノテーションはオプションで、メソッドの引数の一部がキャッシュキーの一部ではない場合にのみ使用されるべきです。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:326
#, no-wrap
msgid "Composite cache key building logic"
msgstr "複合キャッシュキー構築ロジック"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:329
msgid "When a cache key is built from several method arguments, whether they are explicitly identified with `@CacheKey` or not, the building logic depends on the order of these arguments in the method signature. On the other hand, the arguments names are not used at all and do not have any effect on the cache key."
msgstr "キャッシュキーが複数のメソッド引数から構築される場合、それらが明示的に `@CacheKey` で識別されているかどうかに関わらず、構築ロジックはメソッドシグネチャ内のこれらの引数の順序に依存します。一方、引数名は全く使用されず、キャッシュキーには何の影響も与えません。"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:338
#, no-wrap
msgid ""
"import io.quarkus.cache.CacheInvalidate;\n"
"import io.quarkus.cache.CacheResult;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:341
#: upstream/_versions/main/guides/cache.adoc:589
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CachedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:346
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\")\n"
"    public Object load(String keyElement1, Integer keyElement2) {\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:350
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate1(String keyElement2, Integer keyElement1) { <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:354
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate2(Integer keyElement2, String keyElement1) { <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:358
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate3(Object notPartOfTheKey, @CacheKey String keyElement1, @CacheKey Integer keyElement2) { <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:363
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate4(Object notPartOfTheKey, @CacheKey Integer keyElement2, @CacheKey String keyElement1) { <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:365
msgid "Calling this method WILL invalidate values cached by the `load` method even if the key elements names have been swapped."
msgstr "このメソッドを呼び出すと、キー要素名が入れ替わっていても `load` メソッドでキャッシュされた値が無効になります。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:366
#: upstream/_versions/main/guides/cache.adoc:368
msgid "Calling this method WILL NOT invalidate values cached by the `load` method because the key elements order is different."
msgstr "このメソッドを呼び出すと、キー要素の順序が異なるため、 `load` メソッドでキャッシュされた値が無効になることはありません。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:367
msgid "Calling this method WILL invalidate values cached by the `load` method because the key elements order is the same."
msgstr "このメソッドを呼び出すと、キー要素の順序が同じなので、 `load` メソッドでキャッシュされた値が無効になります。"

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:370
#, no-wrap
msgid "Caching using the programmatic API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:374
msgid "Quarkus also offers a programmatic API which can be used to store, retrieve or delete values from any cache declared using the annotations API.  All operations from the programmatic API are non-blocking and rely on https://smallrye.io/smallrye-mutiny/[Mutiny] under the hood."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:377
msgid "Before accessing programmatically the cached data, you need to retrieve an `io.quarkus.cache.Cache` instance.  The following sections will show you how to do that."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:378
#, no-wrap
msgid "Injecting a `Cache` with the `@CacheName` annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:381
msgid "`io.quarkus.cache.CacheName` can be used on a field, a constructor parameter or a method parameter to inject a `Cache`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:388
#: upstream/_versions/main/guides/cache.adoc:431
#: upstream/_versions/main/guides/cache.adoc:707
#, fuzzy, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:392
#, no-wrap
msgid ""
"import io.quarkus.cache.Cache;\n"
"import io.quarkus.cache.CacheName;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:395
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CachedExpensiveService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:399
#, no-wrap
msgid ""
"    @Inject //<1>\n"
"    @CacheName(\"my-cache\")\n"
"    Cache cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:408
#, no-wrap
msgid ""
"    public Uni<String> getNonBlockingExpensiveValue(Object key) { //<2>\n"
"        return cache.get(key, k -> { //<3>\n"
"            /*\n"
"             * Put an expensive call here.\n"
"             * It will be executed only if the key is not already associated with a value in the cache.\n"
"             */\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:415
#, no-wrap
msgid ""
"    public String getBlockingExpensiveValue(Object key) {\n"
"        return cache.get(key, k -> {\n"
"            // Put an expensive call here.\n"
"        }).await().indefinitely(); //<4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:417
msgid "This is optional."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:418
msgid "This method returns the `Uni<String>` type which is non-blocking."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:419
msgid "The `k` argument contains the cache key value."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:420
msgid "If you don't need the call to be non-blocking, this is how you can retrieve the cache value in a blocking way."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:421
#, no-wrap
msgid "Retrieving a `Cache` from the `CacheManager`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:424
msgid "Another way to retrieve a `Cache` instance consists in injecting the `io.quarkus.cache.CacheManager` first and then retrieving the desired `Cache` from its name:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:434
#, no-wrap
msgid ""
"import io.quarkus.cache.Cache;\n"
"import io.quarkus.cache.CacheManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:436
#, no-wrap
msgid "import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:439
#: upstream/_versions/main/guides/cache.adoc:712
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CacheClearer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:442
#: upstream/_versions/main/guides/cache.adoc:715
#, no-wrap
msgid ""
"    @Inject\n"
"    CacheManager cacheManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:450
#, no-wrap
msgid ""
"    public void clearCache(String cacheName) {\n"
"        Optional<Cache> cache = cacheManager.getCache(cacheName);\n"
"        if (cache.isPresent()) {\n"
"            cache.get().invalidateAll().await().indefinitely();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:452
#, no-wrap
msgid "Building a programmatic cache key"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:455
msgid "Before building a programmatic cache key, you need to know how cache keys are built by the annotations API when an annotated method is invoked:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:457
msgid "If the method has no arguments, then the cache key is an instance of `io.quarkus.cache.DefaultCacheKey` built from the cache name."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:458
msgid "If the method has exactly one argument, then this argument is the cache key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:459
msgid "If the method has multiple arguments but only one annotated with `@CacheKey`, then this annotated argument is the cache key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:460
msgid "In all other cases, the cache key is an instance of `io.quarkus.cache.CompositeCacheKey` built from multiple method arguments (annotated with `@CacheKey` or not)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:462
msgid "Now, if you want to retrieve or delete, using the programmatic API, a cache value that was stored using the annotations API, you just need to make sure the same key is used with both APIs."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:463
#, no-wrap
msgid "Retrieving all keys from a `CaffeineCache`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:467
msgid "The cache keys from a specific `CaffeineCache` can be retrieved as an unmodifiable `Set` as shown below.  If the cache entries are modified while an iteration over the set is in progress, the set will remain unchanged."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:477
#, no-wrap
msgid ""
"import io.quarkus.cache.Cache;\n"
"import io.quarkus.cache.CacheName;\n"
"import io.quarkus.cache.CaffeineCache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:479
#, no-wrap
msgid "import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:482
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CacheKeysService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:485
#, no-wrap
msgid ""
"    @CacheName(\"my-cache\")\n"
"    Cache cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:490
#, no-wrap
msgid ""
"    public Set<Object> getAllCacheKeys() {\n"
"        return cache.as(CaffeineCache.class).keySet();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:492
#, no-wrap
msgid "Configuring the underlying caching provider"
msgstr "基礎となるキャッシングプロバイダーの設定"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:496
msgid "This extension uses https://github.com/ben-manes/caffeine[Caffeine] as its underlying caching provider.  Caffeine is a high performance, near optimal caching library."
msgstr "このエクステンションは、基礎となるキャッシュプロバイダとして link:https://github.com/ben-manes/caffeine[Caffeine] を使用しています。Caffeine は高性能で最適に近いキャッシングライブラリです。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:497
#, no-wrap
msgid "Caffeine configuration properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:501
msgid "Each of the Caffeine caches backing up the Quarkus application data caching extension can be configured using the following properties in the `application.properties` file. By default caches do not perform any type of eviction if not configured."
msgstr "Quarkusアプリケーションのデータキャッシュエクステンションを支える各Caffeineキャッシュは、 `application.properties` ファイルの以下のプロパティーを使用して設定することができます。デフォルトでは、設定されていない場合、キャッシュはどのようなタイプの退避も実行しません。"

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:505
msgid "You need to replace `cache-name` in all of the following properties with the real name of the cache you want to configure."
msgstr "以下のすべてのプロパティーで `cache-name` を設定したいキャッシュの実名に置き換える必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:510
msgid "Here's what your cache configuration could look like:"
msgstr "キャッシュの設定は以下のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:517
#, no-wrap
msgid ""
"quarkus.cache.caffeine.\"foo\".initial-capacity=10 <1>\n"
"quarkus.cache.caffeine.\"foo\".maximum-size=20\n"
"quarkus.cache.caffeine.\"foo\".expire-after-write=60S\n"
"quarkus.cache.caffeine.\"bar\".maximum-size=1000 <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:519
msgid "The `foo` cache is being configured."
msgstr "`foo` キャッシュの設定を行っています。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:520
msgid "The `bar` cache is being configured."
msgstr "`bar` キャッシュの設定を行っています。"

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:521
#, no-wrap
msgid "Enabling Micrometer metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:524
msgid "Each cache declared using the <<#annotations-api,annotations caching API>> can be monitored using Micrometer metrics."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:529
msgid "The cache metrics collection will only work if your application depends on a `quarkus-micrometer-registry-*` extension.  See the xref:micrometer.adoc[Micrometer metrics guide] to learn how to use Micrometer in Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:533
msgid "The cache metrics collection is disabled by default.  It can be enabled from the `application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:537
#, no-wrap
msgid "quarkus.cache.caffeine.\"foo\".metrics-enabled=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:542
msgid "Like all instrumentation methods, collecting metrics comes with a small overhead that can impact the application performances."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:545
msgid "The collected metrics contain cache statistics such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:547
msgid "the approximate current number of entries in the cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:548
msgid "the number of entries that were added to the cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:549
msgid "the number of times a cache lookup has been performed, including information about hits and misses"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:550
msgid "the number of evictions and the weight of the evicted entries"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:552
msgid "Here is an example of cache metrics available for an application that depends on the `quarkus-micrometer-registry-prometheus` extension:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:571
#, no-wrap
msgid ""
"# HELP cache_size The number of entries in this cache. This may be an approximation, depending on the type of cache.\n"
"# TYPE cache_size gauge\n"
"cache_size{cache=\"foo\",} 8.0\n"
"# HELP cache_puts_total The number of entries added to the cache\n"
"# TYPE cache_puts_total counter\n"
"cache_puts_total{cache=\"foo\",} 12.0\n"
"# HELP cache_gets_total The number of times cache lookup methods have returned a cached value.\n"
"# TYPE cache_gets_total counter\n"
"cache_gets_total{cache=\"foo\",result=\"hit\",} 53.0\n"
"cache_gets_total{cache=\"foo\",result=\"miss\",} 12.0\n"
"# HELP cache_evictions_total cache evictions\n"
"# TYPE cache_evictions_total counter\n"
"cache_evictions_total{cache=\"foo\",} 4.0\n"
"# HELP cache_eviction_weight_total The sum of weights of evicted entries. This total does not include manual invalidations.\n"
"# TYPE cache_eviction_weight_total counter\n"
"cache_eviction_weight_total{cache=\"foo\",} 540.0\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:573
#, no-wrap
msgid "Annotated beans examples"
msgstr "注釈付きBean例"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:575
#, no-wrap
msgid "Implicit simple cache key"
msgstr "暗黙の単純キャッシュキー"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:586
#: upstream/_versions/main/guides/cache.adoc:649
#: upstream/_versions/main/guides/cache.adoc:680
#, no-wrap
msgid ""
"import io.quarkus.cache.CacheInvalidate;\n"
"import io.quarkus.cache.CacheInvalidateAll;\n"
"import io.quarkus.cache.CacheResult;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:594
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\")\n"
"    public Object load(Object key) { <1>\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:598
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate(Object key) { <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:603
#: upstream/_versions/main/guides/cache.adoc:635
#: upstream/_versions/main/guides/cache.adoc:666
#, no-wrap
msgid ""
"    @CacheInvalidateAll(cacheName = \"foo\")\n"
"    public void invalidateAll() {\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:605
msgid "The cache key is implicit since there's no `@CacheKey` annotation."
msgstr "`@CacheKey` アノテーションがないので、キャッシュキーは暗黙の了解です。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:606
#, no-wrap
msgid "Explicit composite cache key"
msgstr "明示的な合成キャッシュキー"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:613
#: upstream/_versions/main/guides/cache.adoc:645
#, no-wrap
msgid "import javax.enterprise.context.Dependent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:618
#, no-wrap
msgid ""
"import io.quarkus.cache.CacheInvalidate;\n"
"import io.quarkus.cache.CacheInvalidateAll;\n"
"import io.quarkus.cache.CacheKey;\n"
"import io.quarkus.cache.CacheResult;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:621
#: upstream/_versions/main/guides/cache.adoc:652
#, no-wrap
msgid ""
"@Dependent\n"
"public class CachedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:626
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\")\n"
"    public String load(@CacheKey Object keyElement1, @CacheKey Object keyElement2, Object notPartOfTheKey) { <1>\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:630
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate(@CacheKey Object keyElement1, @CacheKey Object keyElement2, Object notPartOfTheKey) { <1>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:637
msgid "The cache key is explicitly composed of two elements. The method signature also contains a third argument which is not part of the key."
msgstr "キャッシュキーは明示的に 2 つの要素で構成されています。メソッドシグネチャには、キーの一部ではない第三引数も含まれています。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:638
#, no-wrap
msgid "Default cache key"
msgstr "デフォルトのキャッシュキー"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:657
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\")\n"
"    public String load() { <1>\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:661
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate() { <1>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:668
msgid "A unique default cache key derived from the cache name is used because the method has no arguments."
msgstr "メソッドには引数がないため、キャッシュ名から派生した一意のデフォルトキャッシュキーが使用されます。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:669
#, no-wrap
msgid "Multiple annotations on a single method"
msgstr "単一のメソッドに複数のアノテーションを付与"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:676
#, no-wrap
msgid "import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:683
#, no-wrap
msgid ""
"@Singleton\n"
"public class CachedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:689
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    @CacheResult(cacheName = \"foo\")\n"
"    public String forceCacheEntryRefresh(Object key) { <1>\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:695
#, no-wrap
msgid ""
"    @CacheInvalidateAll(cacheName = \"foo\")\n"
"    @CacheInvalidateAll(cacheName = \"bar\")\n"
"    public void multipleInvalidateAll(Object key) { <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:697
msgid "This method can be used to force a refresh of the cache entry corresponding to the given key."
msgstr "このメソッドを使用して、指定されたキーに対応するキャッシュエントリーを強制的に更新することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:698
msgid "This method will invalidate all entries from the `foo` and `bar` caches with a single call."
msgstr "このメソッドは、一度の呼び出しで `foo` および `bar` キャッシュからのすべてのエントリーを無効にします。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:699
#, no-wrap
msgid "Clear all application caches"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:709
#, no-wrap
msgid "import io.quarkus.cache.CacheManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:722
#, no-wrap
msgid ""
"    public void clearAllCaches() {\n"
"        for (String cacheName : cacheManager.getCacheNames()) {\n"
"            cacheManager.getCache(cacheName).get().invalidateAll().await().indefinitely();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:725
#, no-wrap
msgid "Negative caching and nulls"
msgstr "ネガティブキャッシングとnull"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:730
msgid "Sometimes one wants to cache the result of an (expensive) remote call.  If the remote call fails, one may not want to cache the result or exception, but rather re-try the remote call on the next invocation."
msgstr "(高価な)リモートコールの結果をキャッシュしたい場合があります。リモートコールが失敗した場合、結果や例外をキャッシュするのではなく、 次の呼び出しでリモートコールを再試行したい場合があります。"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:733
msgid "A simple approach could be to catch the exception and return `null`, so that the caller can act accordingly:"
msgstr "シンプルなアプローチとしては、例外をキャッチして `null` を返すことで、呼び出し元がそれに応じて行動できるようにすることができます。"

#. type: Block title
#: upstream/_versions/main/guides/cache.adoc:734
#, no-wrap
msgid "Sample code"
msgstr "サンプルコード"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:738
#, no-wrap
msgid "    public void caller(int val) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:746
#, no-wrap
msgid ""
"        Integer result = callRemote(val); //<1>\n"
"        if (result != null) {\n"
"            System.out.println(\"Result is \" + result);\n"
"        else {\n"
"            System.out.println(\"Got an exception\");\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:749
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\")\n"
"    public Integer callRemote(int val)  {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:757
#, no-wrap
msgid ""
"        try {\n"
"            Integer val = remoteWebServer.getResult(val); //<2>\n"
"            return val;\n"
"        } catch (Exception e) {\n"
"            return null; // <3>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:759
#: upstream/_versions/main/guides/cache.adoc:792
msgid "Call the method to call the remote"
msgstr "リモートを呼び出すためにメソッドを実行"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:760
msgid "Do the remote call and return its result"
msgstr "リモートコールを行い、その結果を返却"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:761
msgid "Return in case of exception"
msgstr "例外が発生時にリターンする"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:766
msgid "This approach has an unfortunate side effect: as we said before, Quarkus can also cache `null` values. Which means that the next call to `callRemote()` with the same parameter value will be answered out of the cache, returning `null` and no remote call will be done.  This may be desired in some scenarios, but usually one wants to retry the remote call until it returns a result."
msgstr "このアプローチには不幸な副作用があります。先に述べたように、Quarkusは `null` の値をキャッシュすることもできます。つまり、同じパラメーター値を持つ `callRemote()` への次の呼び出しは、キャッシュの外で応答され、 `null` が返され、リモートコールは行われないということです。これはシナリオによっては望ましいことかもしれませんが、通常は結果が返ってくるまでリモートコールを再試行したいものです。"

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:767
#, no-wrap
msgid "Let exceptions bubble up"
msgstr "例外をバブルアップさせる"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:771
msgid "To prevent the cache from caching (marker) results from a remote call, we need to let the exception bubble out of the called method and catch it at the caller side:"
msgstr "リモートコールの結果をキャッシュ(マーカー)しないようにするには、コールされたメソッドから例外をバブルアップし、呼び出し側でキャッチする必要があります。"

#. type: Block title
#: upstream/_versions/main/guides/cache.adoc:772
#, no-wrap
msgid "With Exception bubbling up"
msgstr "例外をバブルアップ"

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:782
#, no-wrap
msgid ""
"   public void caller(int val) {\n"
"       try {\n"
"           Integer result = callRemote(val);  //<1>\n"
"           System.out.println(\"Result is \" + result);\n"
"       } catch (Exception e) {\n"
"           System.out.println(\"Got an exception\");\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:785
#, no-wrap
msgid ""
"   @CacheResult(cacheName = \"foo\")\n"
"   public Integer callRemote(int val) throws Exception { // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:788
#, no-wrap
msgid ""
"      Integer val = remoteWebServer.getResult(val);  //<3>\n"
"      return val;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:790
#, no-wrap
msgid "   }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:793
msgid "Exceptions may bubble up"
msgstr "例外がバブルアップする場合がある"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:794
msgid "This can throw all kinds of remote exceptions"
msgstr "これは、あらゆる種類のリモート例外を投げることができます"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:799
msgid "When the call to the remote throws an exception, the cache does not store the result, so that a subsequent call to `callRemote()` with the same parameter value will not be answered out of the cache.  It will instead result in another attempt to call the remote."
msgstr "リモートへの呼び出しが例外をスローした場合、キャッシュは結果を保存しないので、 同じパラメーター値を持つ `callRemote()` への後続の呼び出しがキャッシュから応答されることはありません。その代わりに、リモートへの呼び出しを再度試みることになります。"

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:800
#, no-wrap
msgid "Going native"
msgstr "ネイティブ化"

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:803
msgid "The Cache extension supports building native executables."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:807
msgid "However, to optimize runtime speed, Caffeine embarks many cache implementation classes that are selected depending on the cache configuration.  We are not registering all of them for reflection (and the ones not registered are not included into the native executables) as registering all of them would be very costly."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:809
msgid "We are registering the most common implementations but, depending on your cache configuration, you might encounter errors like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:820
#, no-wrap
msgid ""
"2021-12-08 02:32:02,108 ERROR [io.qua.run.Application] (main) Failed to start application (with profile prod): java.lang.ClassNotFoundException: com.github.benmanes.caffeine.cache.PSAMS <1>\n"
"        at java.lang.Class.forName(DynamicHub.java:1433)\n"
"        at java.lang.Class.forName(DynamicHub.java:1408)\n"
"        at com.github.benmanes.caffeine.cache.NodeFactory.newFactory(NodeFactory.java:111)\n"
"        at com.github.benmanes.caffeine.cache.BoundedLocalCache.<init>(BoundedLocalCache.java:240)\n"
"        at com.github.benmanes.caffeine.cache.SS.<init>(SS.java:31)\n"
"        at com.github.benmanes.caffeine.cache.SSMS.<init>(SSMS.java:64)\n"
"        at com.github.benmanes.caffeine.cache.SSMSA.<init>(SSMSA.java:43)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:822
msgid "`PSAMS` is one of the many cache implementation classes of Caffeine so this part may vary."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:825
msgid "When you encounter this error, you can easily fix it by adding the following annotation to any of your application classes (or you can create a new class such as `Reflections` just to host this annotation if you prefer):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:829
#, no-wrap
msgid "@RegisterForReflection(classNames = { \"com.github.benmanes.caffeine.cache.PSAMS\" }) <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:831
msgid "It is an array so you can register several cache implementations in one go if your configuration requires several of them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:832
msgid "This annotation will register the cache implementation classes for reflection and this will include the classes into the native executable."
msgstr ""

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Now, we just need to update the generated `WeatherForecastResource` class to use the service and response:"
#~ msgstr "あとは、サービスとレスポンスを使用するために生成された `WeatherForecastResource` クラスを更新するだけです。"
