# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-20 02:48+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/config-reference.adoc:6
#, no-wrap
msgid "Configuration Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:16
msgid "The content of this guide has been revised and split into additional topics. Please check the <<additional-information,Additional Information>> section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:21
msgid "In this reference guide we're going to describe various aspects of Quarkus configuration. A Quarkus application and Quarkus itself (core and extensions) are both configured via the same mechanism that leverages the https://github.com/smallrye/smallrye-config[SmallRye Config] API an implementation of the https://microprofile.io/project/eclipse/microprofile-config[MicroProfile Config] specification."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:24
msgid "If you're looking for information how to make a Quarkus extension configurable then see the <<writing-extensions.adoc#configuration,Writing Your Own Extension>> guide."
msgstr "Quarkus エクステンションを設定可能にする方法については、link:writing-extensions.html#configuration[独自のエクステンションの作成] ガイドを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:26
#, fuzzy, no-wrap
msgid "Config Sources"
msgstr "その他の設定ソース"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:29
msgid "By default, Quarkus reads configuration properties from multiple sources (by descending ordinal):"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:31
msgid "(400) <<system-properties,System properties>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:32
msgid "(300) <<environment-variables,Environment variables>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:33
#, fuzzy
msgid "(295) <<env-file,.env>> file in the current working directory"
msgstr "現在の作業ディレクトリーに置かれている `.env` という名前の環境ファイル"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:34
#, fuzzy
msgid "(260) <<application-properties-file,Quarkus Application configuration file>> in `$PWD/config/application.properties`"
msgstr "`$PWD/config/application.properties` に置かれた設定ファイル"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:35
msgid "(250) <<application-properties-file,Quarkus Application configuration file>> `application.properties` in classpath"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:37
msgid "(100) <<microprofile-config-properties-file,MicroProfile Config configuration file>> `META-INF/microprofile-config.properties` in classpath"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:43
msgid "The final configuration is the aggregation of the properties defined by all these sources. A configuration property lookup starts by the highest ordinal configuration source available and works it way down to other sources until a match is found. This means that any configuration property may override a value just by setting a different value in a higher ordinal config source. For example, a property configured using an environment property overrides the value provided using the `application.properties` file."
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/config-reference.adoc:44
#, no-wrap
msgid "config-sources.png"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:47
#, no-wrap
msgid "System properties"
msgstr "システムプロパティー"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:51
msgid "System properties can be handed to the application through the `-D` flag during startup. The following examples assign the value `youshallnotpass` to the attribute `quarkus.datasource.password`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:53
msgid "For Quarkus dev mode: `./mvnw quarkus:dev -Dquarkus.datasource.password=youshallnotpass`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:54
msgid "For a runner jar: `java -Dquarkus.datasource.password=youshallnotpass -jar target/quarkus-app/quarkus-run.jar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:55
msgid "For a native executable: `./target/myapp-runner -Dquarkus.datasource.password=youshallnotpass`"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:57
#, no-wrap
msgid "Environment variables"
msgstr "環境変数"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:60
msgid "For a runner jar: `export QUARKUS_DATASOURCE_PASSWORD=youshallnotpass ; java -jar target/quarkus-app/quarkus-run.jar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:61
msgid "For a native executable: `export QUARKUS_DATASOURCE_PASSWORD=youshallnotpass ; ./target/myapp-runner`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:64
msgid "Environment variables names follow the conversion rules specified by link:https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources[MicroProfile Config]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:66
#, fuzzy, no-wrap
msgid "`.env` file in the current working directory"
msgstr "現在の作業ディレクトリーに置かれている `.env` という名前の環境ファイル"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:69
#: upstream/_versions/main/guides/config-reference.adoc:257
msgid "..env"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:72
#, no-wrap
msgid "QUARKUS_DATASOURCE_PASSWORD=youshallnotpass <1>\n"
msgstr "QUARKUS_DATASOURCE_PASSWORD=youshallnotpass <1>\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:74
msgid "The name `QUARKUS_DATASOURCE_PASSWORD` the same conversion rules used for <<environment-variables>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:77
msgid "For `dev` mode, this file can be placed in the root of the project, but it is advised to **not** check it in to version control."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:79
msgid "Environment variables in the `.env` file are not available via the `System.getenv(String)` API."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:81
#, fuzzy, no-wrap
msgid "Quarkus Application configuration file"
msgstr "カスタム設定ソース"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:89
msgid "The Quarkus Application configuration file is loaded from the classpath resources, for instance `src/main/resources/application.properties`, `src/test/resources/application.properties` or from a `jar` dependency that contains an `application.properties` entry. Each `application.properties` found is treated as a separate `ConfigSource` and follow the same rules as every other source (override per property). Additionally, the configuration file may also reside in `$PWD/config/application.properties`. The loading starts from the config folder and then classpath order (`application.properties` files in the application sources will have priority on the classloader loading order)."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/config-reference.adoc:90
#, fuzzy, no-wrap
msgid "`application.properties`"
msgstr "`application.yaml`"

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:95
#: upstream/_versions/main/guides/config-reference.adoc:113
#, no-wrap
msgid ""
"greeting.message=hello <1>\n"
"quarkus.http.port=9090 <2>\n"
msgstr ""
"greeting.message=hello <1>\n"
"quarkus.http.port=9090 <2>\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:97
#: upstream/_versions/main/guides/config-reference.adoc:115
msgid "This is a user-defined configuration property."
msgstr "これは、ユーザー定義の設定プロパティーです。"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:98
#: upstream/_versions/main/guides/config-reference.adoc:116
msgid "This is a configuration property consumed by the `quarkus-vertx-http` extension."
msgstr "これは `quarkus-vertx-http` 拡張モジュールによって消費される設定プロパティーです。"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:102
msgid "The `config/application.properties` is also available in `dev` mode. The file needs to be placed inside the build tool output directory (`target` for Maven and `build/classes/java/main` for Gradle). Keep in mind however that any cleaning operation from the build tool like `mvn clean` or `gradle clean` will remove the `config` directory as well."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:104
#, fuzzy, no-wrap
msgid "MicroProfile Config configuration file"
msgstr "プロファイル依存の設定"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:107
msgid "The MicroProfile Config configuration file in `src/main/resources/META-INF/microprofile-config.properties`."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/config-reference.adoc:108
#, no-wrap
msgid "`microprofile-config.properties`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:119
msgid "It works in the exact same way as Quarkus Application configuration file `application.properties`. Recommendation is to use Quarkus `application.properties`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:120
#, no-wrap
msgid "Additional Config Sources"
msgstr "その他の設定ソース"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:123
msgid "Quarkus provides additional extensions which cover other configuration formats and stores:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:125
msgid "xref:config-yaml.adoc[YAML]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:126
msgid "xref:vault.adoc[HashiCorp Vault]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:127
msgid "xref:consul-config.adoc[Consul]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:128
msgid "xref:spring-cloud-config-client.adoc[Spring Cloud]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:130
msgid "It is also possible to create a xref:config-extending-support.adoc#custom-config-source[Custom Config Source]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:131
#, no-wrap
msgid "Inject"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:135
msgid "Quarkus uses https://microprofile.io/project/eclipse/microprofile-config[MicroProfile Config] annotations to inject the configuration properties in the application."
msgstr "Quarkusでは、link:https://microprofile.io/project/eclipse/microprofile-config[MicroProfile Config] アノテーションを使用して、アプリケーションに設定プロパティーを注入しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:140
#: upstream/_versions/main/guides/config-reference.adoc:150
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.message\") <1>\n"
"String message;\n"
msgstr ""
"@ConfigProperty(name = \"greeting.message\") <1>\n"
"String message;\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:143
msgid "You can use `@Inject @ConfigProperty` or just `@ConfigProperty`. The `@Inject` annotation is not necessary for members annotated with `@ConfigProperty`."
msgstr "`@Inject @ConfigProperty` を使用することも、 `@ConfigProperty` だけを使用することもできます。 `@Inject` アノテーションは、 `@ConfigProperty` でアノテーションされたメンバーには必要ありません。"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:145
msgid "If the application attempts to inject a configuration property that is not set, an error is thrown."
msgstr "アプリケーションが設定されていない設定プロパティーを注入しようとすると、エラーがスローされます。"

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:153
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.suffix\", defaultValue=\"!\") <2>\n"
"String suffix;\n"
msgstr ""
"@ConfigProperty(name = \"greeting.suffix\", defaultValue=\"!\") <2>\n"
"String suffix;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:156
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.name\")\n"
"Optional<String> name; <3>\n"
msgstr ""
"@ConfigProperty(name = \"greeting.name\")\n"
"Optional<String> name; <3>\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:158
msgid "If you do not provide a value for this property, the application startup fails with `javax.enterprise.inject.spi.DeploymentException: No config value of type [class java.lang.String] exists for: greeting.message`."
msgstr "このプロパティーに値を指定しないと、アプリケーションの起動は失敗し、`javax.enterprise.inject.spi.DeploymentException: No config value of type [class java.lang.String] exists for: greeting.message` が出力されます。"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:159
msgid "The default value is injected if the configuration does not provide a value for `greeting.suffix`."
msgstr "デフォルト値は、設定が `greeting.suffix` の値を提供していない場合に注入されます。"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:160
msgid "This property is optional - an empty `Optional` is injected if the configuration does not provide a value for `greeting.name`."
msgstr "このプロパティーは任意です。設定が `greeting.name` の値を提供していない場合は、空の `Optional` が注入されます。"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:162
msgid "Use xref:config-mappings.adoc#config-mappings[Config Mappings] to group similar configuration properties."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:163
#, no-wrap
msgid "Default Values"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:170
msgid "If a property is associated with a default value (by way of the `defaultValue` attribute), and no configuration value is supplied for the property, then rather than throwing a `javax.enterprise.inject.spi.DeploymentException`, the default value will be used. The `defaultValue` value is expressed as a `String`, and uses the same conversion mechanism used to process configuration values. Several Built-in Converters already exist for primitives, boxed primitives, and other classes; for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:172
msgid "Primitives: `boolean`, `byte`, `short`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:173
msgid "Boxed primitives: `java.lang.Boolean`, `java.lang.Byte`, `java.lang.Short`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:174
msgid "Optional containers: `java.util.Optional`, `java.util.OptionalInt`, `java.util.OptionalLong`, and `java.util.OptionalDouble`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:175
msgid "Java `enum` types"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:176
msgid "JSR 310 `java.time.Duration`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:177
msgid "JDK networking `java.net.SocketAddress`, `java.net.InetAddress`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:180
msgid "As you might expect, these converters are `org.eclipse.microprofile.config.spi.Converter` implementations. Therefore these converters comply with the Microprofile or custom implementation providers expression rules, like:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:182
msgid "Boolean values will be `true` in cases \"true\", \"1\", \"YES\", \"Y\" \"ON\". Otherwise, value will be interpreted as false"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:183
msgid "For float and double values the fractional digits must be separated by a dot `.`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:188
msgid "Note that when a combination of `Optional*` types and the `defaultValue` attribute are used, the defined `defaultValue` will still be used and if no value is given for the property, the `Optional*` will be present and populated with the converted default value. However, when the property is explicitly empty, the default value is not used and the `Optional` will be empty. Consider this example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:193
#, no-wrap
msgid ""
"# missing value, optional property\n"
"greeting.name =\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:198
msgid "In this case, since `greeting.name` was configured to be `Optional*` up above, the corresponding property value will be an empty `Optional` and execution will continue normally. This would be the case even if there was a default value configured: the default value is *not* used if the property is explicitly cleared in the configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:200
msgid "On the other hand, this example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:205
#, no-wrap
msgid ""
"# missing value, non-optional\n"
"greeting.suffix =\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:209
msgid "will result in a `java.util.NoSuchElementException: SRCFG02004: Required property greeting.message not found` on startup and the default value will not be assigned."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:211
msgid "Below is an example of a Quarkus-supplied converter:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:216
#, fuzzy, no-wrap
msgid ""
"@ConfigProperty(name = \"server.address\", defaultValue = \"192.168.1.1\")\n"
"InetAddress serverAddress;\n"
msgstr ""
"@ConfigProperty(name = \"greeting.suffix\", defaultValue=\"!\") <2>\n"
"String suffix;\n"

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:218
#, no-wrap
msgid "Programmatically access"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:222
msgid "The `org.eclipse.microprofile.config.ConfigProvider.getConfig()` API allows to access the Config API programmatically.  This API is mostly useful in situations where CDI injection is not available."
msgstr "`org.eclipse.microprofile.config.ConfigProvider.getConfig()` APIを使用すると、Config APIにプログラムでアクセスすることができます。このAPIは、CDIインジェクションが利用できない状況で主に役立ちます。"

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:227
#, no-wrap
msgid ""
"String databaseName = ConfigProvider.getConfig().getValue(\"database.name\", String.class);\n"
"Optional<String> maybeDatabaseName = ConfigProvider.getConfig().getOptionalValue(\"database.name\", String.class);\n"
msgstr ""
"String databaseName = ConfigProvider.getConfig().getValue(\"database.name\", String.class);\n"
"Optional<String> maybeDatabaseName = ConfigProvider.getConfig().getOptionalValue(\"database.name\", String.class);\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:231
msgid "Do not use `System.getProperty(String)` or `System.getEnv(String)` to retrieve configuration values. These APIs are not configuration aware and do not support the features described in this guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:233
#, fuzzy, no-wrap
msgid "Profiles"
msgstr "親プロファイル"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:237
msgid "We often need to configure differently our application depending on the target _environment_. For example, the local development environment may be different from the production environment."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:240
msgid "Configuration Profiles allow for multiple configurations in the same file or separate files and select between them via a profile name."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:241
#, no-wrap
msgid "Profile in the property name"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:244
msgid "To be able to set properties with the same name, each property needs to be prefixed with a percentage sign `%` followed by the profile name and a dot `.` in the syntax `%{profile-name}.config.name`:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/config-reference.adoc:245
#: upstream/_versions/main/guides/config-reference.adoc:265
#: upstream/_versions/main/guides/config-reference.adoc:290
#: upstream/_versions/main/guides/config-reference.adoc:314
#: upstream/_versions/main/guides/config-reference.adoc:390
#: upstream/_versions/main/guides/config-reference.adoc:401
#: upstream/_versions/main/guides/config-reference.adoc:410
#: upstream/_versions/main/guides/config-reference.adoc:434
#: upstream/_versions/main/guides/config-reference.adoc:465
#: upstream/_versions/main/guides/config-reference.adoc:483
#, fuzzy, no-wrap
msgid "application.properties"
msgstr "プロパティーの削除"

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:250
#, no-wrap
msgid ""
"quarkus.http.port=9090\n"
"%dev.quarkus.http.port=8181\n"
msgstr ""
"quarkus.http.port=9090\n"
"%dev.quarkus.http.port=8181\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:253
msgid "The Quarkus HTTP port will be 9090. If the `dev` profile is active it will be 8181."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:255
msgid "Profiles in the `.env` file follow the syntax `_{PROFILE}_CONFIG_KEY=value`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:261
#, no-wrap
msgid ""
"QUARKUS_HTTP_PORT=9090\n"
"_DEV_QUARKUS_HTTP_PORT=8181\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:264
msgid "If a profile does not define a value for a specific attribute, the _default_ (no profile) value is used:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:271
#, no-wrap
msgid ""
"bar=”hello”\n"
"baz=”bonjour”\n"
"%dev.bar=”hallo”\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:276
msgid "With the `dev` profile enabled, the property `bar` has the value `hallo`, but the property `baz` has the value `bonjour`. If the `prod` profile is enabled, `bar` has the value `hello` (as there is no specific value for the `prod` profile), and `baz` the value `bonjour`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:277
#, fuzzy, no-wrap
msgid "Default Profiles"
msgstr "デフォルトの実行時プロファイル"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:280
msgid "By default, Quarkus provides three profiles, that activate automatically in certain conditions:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:282
#, no-wrap
msgid "*dev* - Activated when in development mode (i.e. `quarkus:dev`)\n"
msgstr "*dev* - 開発モードのときに有効になる (つまり `quarkus:dev`)\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:283
#, no-wrap
msgid "*test* - Activated when running tests\n"
msgstr "*test* - テストを実行しているときに有効になる\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:284
#, no-wrap
msgid "*prod* - The default profile when not running in development or test mode\n"
msgstr "*prod* - 開発モードまたはテストモード以外で使用されるデフォルトプロファイル\n"

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:285
#, fuzzy, no-wrap
msgid "Custom Profiles"
msgstr "親プロファイル"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:289
msgid "It is also possible to create additional profiles and activate them with the `quarkus.profile` configuration property. A single config property with the new profile name is the only requirement:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:295
#, no-wrap
msgid ""
"quarkus.http.port=9090\n"
"%staging.quarkus.http.port=9999\n"
msgstr ""
"quarkus.http.port=9090\n"
"%staging.quarkus.http.port=9999\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:298
msgid "Setting `quarkus.profile` to `staging` will activate the `staging` profile."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:300
msgid "Only a single profile may be active at a time."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/config-reference.adoc:305
msgid "The `io.quarkus.runtime.configuration.ProfileManager#getActiveProfile` API provides a way to retrieve the active profile programmatically."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/config-reference.adoc:307
msgid "Using `@ConfigProperty(\"quarkus.profile\")` will *not* work properly."
msgstr "`@ConfigProperty(\"quarkus.profile\")` を使用すると正常に**動作しません**。"

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:309
#, no-wrap
msgid "Profile aware files"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:313
msgid "In this case, properties for a specific profile may reside in an `application-{profile}.properties` named file. The previous example may be expressed as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:319
#, fuzzy, no-wrap
msgid ""
"quarkus.http.port=9090\n"
"%staging.quarkus.http.test-port=9091\n"
msgstr ""
"quarkus.http.port=9090\n"
"%staging.quarkus.http.port=9999\n"

#. type: Block title
#: upstream/_versions/main/guides/config-reference.adoc:321
#, fuzzy, no-wrap
msgid "application-staging.properties"
msgstr "プロパティーの削除"

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:326
#, fuzzy, no-wrap
msgid ""
"quarkus.http.port=9190\n"
"quarkus.http.test-port=9191\n"
msgstr ""
"quarkus.http.port=9090\n"
"%dev.quarkus.http.port=8181\n"

#. type: delimited block =
#: upstream/_versions/main/guides/config-reference.adoc:331
msgid "In this style, the configuration names in the profile aware file do not need to be prefixed with the profile name."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/config-reference.adoc:333
msgid "Properties in the profile aware file have priority over profile aware properties defined in the main file."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/config-reference.adoc:338
msgid "The profile aware file must be present in the exact same location as the main `application.properties` file."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:340
#, no-wrap
msgid "Parent Profile"
msgstr "親プロファイル"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:344
msgid "A Parent Profile adds one level of hierarchy to the current profile. The configuration `quarkus.config.profile.parent` accepts a single profile name."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:347
msgid "When the Parent Profile is active, if a property cannot be found in the current active Profile, the config lookup fallbacks to the Parent Profile. Consider:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:352
#, no-wrap
msgid ""
"quarkus.profile=dev\n"
"quarkus.config.profile.parent=common\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:355
#, fuzzy, no-wrap
msgid ""
"%common.quarkus.http.port=9090\n"
"%dev.quarkus.http.ssl-port=9443\n"
msgstr ""
"quarkus.http.port=9090\n"
"%dev.quarkus.http.port=8181\n"

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:358
#, fuzzy, no-wrap
msgid ""
"quarkus.http.port=8080\n"
"quarkus.http.ssl-port=8443\n"
msgstr ""
"quarkus.http.port=9090\n"
"%dev.quarkus.http.port=8181\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:361
msgid "Then"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:363
msgid "The active profile is `dev`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:364
msgid "The parent profile is `common`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:365
msgid "`quarkus.http.port` is 9090"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:366
msgid "`quarkus.http.ssl-port` is 9443"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:367
#, no-wrap
msgid "Default Runtime Profile"
msgstr "デフォルトの実行時プロファイル"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:370
msgid "The default Quarkus runtime profile is set to the profile used to build the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:375
#, no-wrap
msgid ""
"./mvnw package -Pnative -Dquarkus.profile=prod-aws\n"
"./target/my-app-1.0-runner // <1>\n"
msgstr ""
"./mvnw package -Pnative -Dquarkus.profile=prod-aws\n"
"./target/my-app-1.0-runner // <1>\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:377
msgid "The command will run with the `prod-aws` profile. This can be overridden using the `quarkus.profile` configuration."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:379
#, no-wrap
msgid "Property Expressions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:383
msgid "Quarkus provides property expressions expansion on configuration values. An expression string is a mix of plain strings and expression segments, which are wrapped by the sequence `${ ... }`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:387
msgid "These expressions are resolved when the property is read. So if the configuration property is build time the property expression will be resolved at build time. If the configuration property is overridable at runtime it will be resolved at runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:389
msgid "Consider:"
msgstr "以下だとすると、"

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:395
#, no-wrap
msgid ""
"remote.host=quarkus.io\n"
"callable.url=https://${remote.host}/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:398
msgid "The resolved value of the `callable.url` property is `https://quarkus.io/`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:400
msgid "Another example would be defining different database servers by profile:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:406
#, no-wrap
msgid ""
"%dev.quarkus.datasource.jdbc.url=jdbc:mysql://localhost:3306/mydatabase?useSSL=false\n"
"quarkus.datasource.jdbc.url=jdbc:mysql://remotehost:3306/mydatabase?useSSL=false\n"
msgstr ""
"%dev.quarkus.datasource.jdbc.url=jdbc:mysql://localhost:3306/mydatabase?useSSL=false\n"
"quarkus.datasource.jdbc.url=jdbc:mysql://remotehost:3306/mydatabase?useSSL=false\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:409
msgid "can be simplified to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:415
#, no-wrap
msgid ""
"%dev.application.server=localhost\n"
"application.server=remotehost\n"
msgstr ""
"%dev.application.server=localhost\n"
"application.server=remotehost\n"

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:417
#, no-wrap
msgid "quarkus.datasource.jdbc.url=jdbc:mysql://${application.server}:3306/mydatabase?useSSL=false\n"
msgstr "quarkus.datasource.jdbc.url=jdbc:mysql://${application.server}:3306/mydatabase?useSSL=false\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:420
msgid "Additionally, the Expression Expansion engine supports the following segments:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:422
msgid "`${expression:value}` - Provides a default value after the `:` if the expansion doesn't find a value."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:423
msgid "`${my.prop${compose}}` - Composed expressions. Inner expressions are resolved first."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:424
msgid "`${my.prop}${my.prop}` - Multiple expressions."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:426
msgid "If an expression cannot be expanded and no default is supplied a `NoSuchElementException` is thrown."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:429
msgid "Expressions lookups are performed in all config sources. The expression values and expansion values may reside in different config sources."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:430
#, fuzzy, no-wrap
msgid "With Environment Variables"
msgstr "環境変数"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:433
msgid "Property Expressions also work with Environment Variables."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:439
#, fuzzy, no-wrap
msgid ""
"remote.host=quarkus.io\n"
"application.host=${HOST:${remote.host}}\n"
msgstr "application.host=${HOST:localhost}\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:443
msgid "This will expand the `HOST` environment variable and use the value of the property `remote.host` as the default value if `HOST` is not set."
msgstr "これは `HOST` 環境変数を展開し、`HOST` が設定されていない場合は、プロパティー `remote.host` の値をデフォルト値として使用します。"

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:444
#, no-wrap
msgid "Accessing a generating UUID"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:449
msgid "The default config source from Quarkus provides a random UUID value.  It generates the UUID at startup time.  So, the value changes between startups, including reloads in dev mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:453
msgid "You can access the generated value using the `quarkus.uuid` property.  Use <<property-expressions, expressions>> to access it: `${quarkus.uuid}`.  For example, it can be useful to configure a Kafka client with a unique consumer group:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:457
#, no-wrap
msgid "mp.messaging.incoming.prices.group.id=${quarkus.uuid}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:459
#, no-wrap
msgid "Clearing properties"
msgstr "プロパティーの削除"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:464
msgid "Run time properties which are optional, and which have had values set at build time or which have a default value, may be explicitly cleared by assigning an empty string to the property. Note that this will _only_ affect runtime properties, and will _only_ work with properties whose values are not required."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:469
#, no-wrap
msgid "remote.host=quarkus.io\n"
msgstr "remote.host=quarkus.io\n"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:472
msgid "A lookup to `remote.host` with `-Dremote.host=` will throw an Exception, because the system property cleared the value."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:474
#, no-wrap
msgid "Indexed Properties"
msgstr "インデックスされたプロパティ"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:478
msgid "A config value which contains unescaped commas may be converted to `Collection`. This works for simple cases, but it becomes cumbersome and limited for more advanced cases."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:482
msgid "Indexed Properties provide a way to use indexes in config property names to map specific elements in a `Collection` type. Since the indexed element is part of the property name and not contained in the value, this can also be used to map complex object types as `Collectionª elements. Consider:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:487
#, no-wrap
msgid "my.collection=dog,cat,turtle\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-reference.adoc:491
#, no-wrap
msgid ""
"my.indexed.collection[0]=dog\n"
"my.indexed.collection[1]=cat\n"
"my.indexed.collection[2]=turtle\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:494
msgid "The indexed property syntax uses the property name and square brackets `[ ] with an index in between."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:499
msgid "A call to `Config#getValues(\"my.collection\", String.class)`, will automatically create and convert a `List<String>` that contains the values `dog`, `cat` and `turtle`. A call to `Config#getValues(\"my.indexed.collection\", String.class)` returns the exact same result. If the same property name exists in both froms (regular and indexed), the regular value has priority."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:503
msgid "The indexed property is sorted by their index before being added to the target `Collection`. Any gaps contained in the indexes do not resolve to the target `Collection`, which means that the `Collection` result will store all values without any gaps."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:505
msgid "Indexed Properties are not supported in Environment Variables."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:507
#, no-wrap
msgid "Configuring Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:512
msgid "Quarkus itself is configured via the same mechanism as your application. Quarkus reserves the `quarkus.` namespace for its own configuration. For example to configure the HTTP server port you can set `quarkus.http.port` in `application.properties`. All the Quarkus configuration properties are xref:all-config.adoc[documented and searchable]."
msgstr "Quarkus自体は、アプリケーションと同じメカニズムで設定されます。Quarkusは、自身の設定のために `quarkus.` 名前空間を予約します。例えば、HTTPサーバーポートを設定するには、 `quarkus.http.port` を `application.properties` に設定します。Quarkusのすべての設定プロパティは link:all-config.html[文書化されており、検索可能]です。"

#. type: delimited block =
#: upstream/_versions/main/guides/config-reference.adoc:517
msgid "As mentioned above, properties prefixed with `quarkus.` are effectively reserved for configuring Quarkus itself and its extensions. Therefore, the `quarkus.` prefix should **never** be used for application specific properties."
msgstr "上述したように、 `quarkus.` で始まるプロパティーは、Quarkus 自体を設定するために実質的に予約されているため、アプリケーション固有のプロパティーのプレフィックスとして `quarkus.` を使用してはいけ *ません* 。"

#. type: Title ===
#: upstream/_versions/main/guides/config-reference.adoc:519
#, fuzzy, no-wrap
msgid "Build Time configuration"
msgstr "プロファイル依存の設定"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:524
msgid "Some Quarkus configurations only take effect during build time, meaning is not possible to change them at runtime. These configurations are still available at runtime but as read-only and have no effect in Quarkus behaviour. A change to any of these configurations requires a rebuild of the application itself to reflect changes of such properties."
msgstr "Quarkusの設定の中には、ビルド時にのみ有効になるものがあり、ランタイムに変更することはできません。これらの設定はランタイムでも利用可能ですが、読み取り専用であり、Quarkusの動作には影響しません。これらの設定を変更するには、そのようなプロパティの変更を反映させる場合、アプリケーション自体を再ビルドする必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:526
msgid "The properties fixed at build time are marked with a lock icon (icon:lock[]) in the xref:all-config.adoc[list of all configuration options]."
msgstr "ビルド時に固定されたプロパティーは、 link:all-config[すべての設定オプションのリスト] でロックアイコン (icon:lock[]) でマークされます。"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:530
msgid "However, some extensions do define properties _overridable at runtime_. A simple example is the database URL, username and password which is only known specifically in your target environment, so they can be set and influence the application behaviour at runtime."
msgstr "しかし、いくつかのエクステンションは _実行時にオーバーライド可能な_ プロパティーを定義しています。定型的な例としては、データベースの URL、ユーザー名とパスワードがあります。これはターゲット環境によって定まるものであり、実行時にセットされ、アプリケーションの動作に影響を与えるものです。"

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:531
#, no-wrap
msgid "Change build time properties after your application has been published"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:534
msgid "If you are in the rare situation that you need to change the build time configuration after your application is built, then check out how xref:reaugmentation.adoc[re-augmentation] can be used to rebuild the augmentation output for a different build time configuration."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:536
#, fuzzy, no-wrap
msgid "Additional Information"
msgstr "その他の設定ソース"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:539
msgid "xref:config-yaml.adoc[YAML ConfigSource Extension]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:540
msgid "xref:vault.adoc[HashiCorp Vault ConfigSource Extension]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:541
msgid "xref:consul-config.adoc[Consul ConfigSource Extension]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:542
msgid "xref:spring-cloud-config-client.adoc[Spring Cloud ConfigSource Extension]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:543
msgid "xref:config-mappings.adoc[Mapping configuration to objects]"
msgstr "link:config-mappings.html[設定をオブジェクトにマッピング]"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:544
msgid "xref:config-extending-support.adoc[Extending configuration support]"
msgstr "link:config-extending-support.html[設定サポートの拡張]"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:546
msgid "Quarkus relies on link:https://github.com/smallrye/smallrye-config/[SmallRye Config] and inherits its features:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:548
#, fuzzy
msgid "Additional ``ConfigSource``s"
msgstr "その他の設定ソース"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:549
#, fuzzy
msgid "Additional ``Converter``s"
msgstr "その他の設定ソース"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:550
#, fuzzy
msgid "Indexed properties"
msgstr "インデックスされたプロパティ"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:551
#, fuzzy
msgid "Parent profile"
msgstr "親プロファイル"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:552
msgid "Interceptors for configuration value resolution"
msgstr "設定値解決のためのインターセプタ―"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:553
#, fuzzy
msgid "Relocate configuration properties"
msgstr "設定プロパティーの注入"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:554
#, fuzzy
msgid "Fallback configuration properties"
msgstr "設定プロパティーの注入"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:555
msgid "Logging"
msgstr "ロギング"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:556
msgid "Hide secrets"
msgstr "シークレットを隠す"

#. type: Plain text
#: upstream/_versions/main/guides/config-reference.adoc:559
msgid "For more information, please check the link:https://smallrye.io/docs/smallrye-config/index.html[SmallRye Config documentation]."
msgstr "詳細は、link:https://smallrye.io/docs/smallrye-config/index.html[SmallRye Config のドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/config-reference.adoc:560
#, fuzzy, no-wrap
msgid "Configuration Reference"
msgstr "設定例"

#~ msgid "/mvnw quarkus:generate-config"
#~ msgstr "/mvnw quarkus:generate-config"

#~ msgid "# # The HTTP port # #quarkus.http.port=8080"
#~ msgstr "# # The HTTP port # #quarkus.http.port=8080"

#~ msgid "Rather than generating an example config file, you can also add these to you actual config file by setting the `-Dfile` parameter:"
#~ msgstr "サンプルの設定ファイルを生成するのではなく、`-Dfile` パラメーターを設定して実際の設定ファイルに追加することもできます。"

#~ msgid "/mvnw quarkus:generate-config -Dfile=application.properties"
#~ msgstr "/mvnw quarkus:generate-config -Dfile=application.properties"

#~ msgid "<<pwd_config_application_file,`application.properties` file placed in the `$PWD/config/` directory>>"
#~ msgstr "link:#pwd_config_application_file[`application.properties` ファイルを `$PWD/config/` ディレクトリーに配置]"

#~ msgid "Example `.env` file"
#~ msgstr "`.env` ファイルの例"

#~ msgid "Environment variables without a configuration profile defined in `.env` file will overwrite all its related profiles in `application.properties`, e.g. `%test.application.value` is overwritten by `APPLICATION_VALUE` in `.env` file."
#~ msgstr "`.env` ファイルに設定プロファイルが定義されていない環境変数は、`application.properties` 内のすべての関連プロファイルを上書きします。たとえば、`%test.application.value` は `.env` ファイルの `APPLICATION_VALUE` により上書きされます。"

#~ msgid "An `application.properties` file placed in `$PWD/config/`"
#~ msgstr "`$PWD/config/` の `application.properties` ファイル"

#~ msgid "By placing an `application.properties` file inside a directory named `config` which resides in the directory where the application runs, any runtime properties defined in that file will override the default configuration.  Furthermore any runtime properties added to this file that were not part of the original `application.properties` file _will also_ be taken into account.  This works in the same way for runner jar and the native executable."
#~ msgstr "アプリケーションが実行するディレクトリーに存在する `config` という名前のディレクトリーに `application.properties` ファイルを置くことで、そのファイルで定義されている実行時プロパティーは、デフォルトの設定を上書きします。さらに、元の `application.properties` ファイルの一部ではない、このファイルに追加された実行時プロパティーも _取り入れられます_。これは、ランナー jar とネイティブ実行可能ファイルでも同じように動作します。"

#~ msgid "Quarkus supports the use of <<using_property_expressions,property expressions>> in the `application.properties` file."
#~ msgstr "Quarkusは、`application.properties` ファイルの link:#using_property_expressions[プロパティー式] の使用をサポートしています。"

#~ msgid "Embedding a configuration file inside a dependency"
#~ msgstr "依存関係の中に設定ファイルの埋め込み"

#~ msgid "You can embed a configuration file inside one of your dependencies by adding a `META-INF/microprofile-config.properties` configuration file to it (this is a standard functionality of MicroProfile Config)."
#~ msgstr "`META-INF/microprofile.properties` 設定ファイルを追加することで、依存関係の中に設定ファイルを埋め込むことができます (これは MicroProfile Config の標準機能です)。"

#~ msgid "When you add this dependency to your application, its configuration properties will be merged."
#~ msgstr "この依存関係をアプリケーションに追加すると、その設定プロパティーがマージされます。"

#~ msgid "You can override the properties coming from it inside your `application.properties` that takes precedence over it."
#~ msgstr "`application.properties` で、その設定プロパティーよりも優先されるプロパティーを上書きすることができます。"

#~ msgid "More `@ConfigProperty` Examples"
#~ msgstr "その他の `@ConfigProperty` の例"

#~ msgid "You can also access the configuration programmatically.  It can be handy to achieve dynamic lookup, or retrieve configured values from classes that are neither CDI beans or JAX-RS resources."
#~ msgstr "プログラムから設定にアクセスすることもできます。動的なルックアップを実現したり、CDI Beanでも JAX-RS リソースでもないクラスから設定値を取得したりするのに便利です。"

#~ msgid "You can access the configuration programmatically using `org.eclipse.microprofile.config.ConfigProvider.getConfig()` such as in:"
#~ msgstr "次のように、`org.eclipse.microprofile.config.ConfigProvider.getConfig()` を使用してプログラムから設定にアクセスできます。"

#~ msgid "Using @ConfigProperties"
#~ msgstr "@ConfigProperties の使用"

#~ msgid "As an alternative to injecting multiple related configuration values in the way that was shown in the previous example, users can also use the `@io.quarkus.arc.config.ConfigProperties` annotation to group these properties together."
#~ msgstr "前の例で示した方法で複数の関連する設定値を注入する代わりに、`@io.quarkus.arc.config.ConfigProperties` アノテーションを使用して、これらのプロパティーをまとめてグループを作成することもできます。"

#~ msgid "For the greeting properties above, a `GreetingConfiguration` class could be created like so:"
#~ msgstr "上記のグリーティングプロパティーについては、以下のように `GreetingConfiguration` クラスを作成することができます。"

#~ msgid "package org.acme.config;\n"
#~ msgstr "package org.acme.config;\n"

#~ msgid ""
#~ "import io.quarkus.arc.config.ConfigProperties;\n"
#~ "import java.util.Optional;\n"
#~ msgstr ""
#~ "import io.quarkus.arc.config.ConfigProperties;\n"
#~ "import java.util.Optional;\n"

#~ msgid ""
#~ "@ConfigProperties(prefix = \"greeting\") <1>\n"
#~ "public class GreetingConfiguration {\n"
#~ msgstr ""
#~ "@ConfigProperties(prefix = \"greeting\") <1>\n"
#~ "public class GreetingConfiguration {\n"

#~ msgid ""
#~ "    private String message;\n"
#~ "    private String suffix = \"!\"; <2>\n"
#~ "    private Optional<String> name;\n"
#~ msgstr ""
#~ "    private String message;\n"
#~ "    private String suffix = \"!\"; <2>\n"
#~ "    private Optional<String> name;\n"

#~ msgid ""
#~ "    public String getMessage() {\n"
#~ "        return message;\n"
#~ "    }\n"
#~ msgstr ""
#~ "    public String getMessage() {\n"
#~ "        return message;\n"
#~ "    }\n"

#~ msgid ""
#~ "    public void setMessage(String message) {\n"
#~ "        this.message = message;\n"
#~ "    }\n"
#~ msgstr ""
#~ "    public void setMessage(String message) {\n"
#~ "        this.message = message;\n"
#~ "    }\n"

#~ msgid ""
#~ "    public String getSuffix() {\n"
#~ "        return suffix;\n"
#~ "    }\n"
#~ msgstr ""
#~ "    public String getSuffix() {\n"
#~ "        return suffix;\n"
#~ "    }\n"

#~ msgid ""
#~ "    public void setSuffix(String suffix) {\n"
#~ "        this.suffix = suffix;\n"
#~ "    }\n"
#~ msgstr ""
#~ "    public void setSuffix(String suffix) {\n"
#~ "        this.suffix = suffix;\n"
#~ "    }\n"

#~ msgid ""
#~ "    public Optional<String> getName() {\n"
#~ "        return name;\n"
#~ "    }\n"
#~ msgstr ""
#~ "    public Optional<String> getName() {\n"
#~ "        return name;\n"
#~ "    }\n"

#~ msgid ""
#~ "    public void setName(Optional<String> name) {\n"
#~ "        this.name = name;\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    public void setName(Optional<String> name) {\n"
#~ "        this.name = name;\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "`prefix` is optional. If not set then the prefix to be used will be determined by the class name. In this case it would still be `greeting` (since the `Configuration` suffix is removed). If the class were named `GreetingExtraConfiguration` then the resulting default prefix would be `greeting-extra`."
#~ msgstr "`prefix` は任意です。設定していない場合は、使用される接頭辞はクラス名によって決まります。この場合も (`Configuration` の接尾辞は削除されているため) `greeting` となります。クラス名が `GreetingExtraConfiguration` の場合は、デフォルトの接頭辞が `greeting-extra` となります。"

#~ msgid "`!` will be the default value if `greeting.suffix` is not set."
#~ msgstr "`!` は、`greeting.suffix` が設定されていない場合のデフォルト値になります。"

#~ msgid "This class could then be injected into the `GreetingResource` using the familiar CDI `@Inject` annotation like so:"
#~ msgstr "このクラスは、おなじみの CDI `@Inject` アノテーションを使用して `GreetingResource` に注入することができます。"

#~ msgid ""
#~ "@Inject\n"
#~ "GreetingConfiguration greetingConfiguration;\n"
#~ msgstr ""
#~ "@Inject\n"
#~ "GreetingConfiguration greetingConfiguration;\n"

#~ msgid "Another alternative style provided by Quarkus is to create `GreetingConfiguration` as an interface like so:"
#~ msgstr "Quarkus が提供する別のスタイルは、`GreetingConfiguration` を以下のようなインターフェースとして作成することです。"

#~ msgid ""
#~ "import io.quarkus.arc.config.ConfigProperties;\n"
#~ "import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
#~ "import java.util.Optional;\n"
#~ msgstr ""
#~ "import io.quarkus.arc.config.ConfigProperties;\n"
#~ "import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
#~ "import java.util.Optional;\n"

#~ msgid ""
#~ "@ConfigProperties(prefix = \"greeting\")\n"
#~ "public interface GreetingConfiguration {\n"
#~ msgstr ""
#~ "@ConfigProperties(prefix = \"greeting\")\n"
#~ "public interface GreetingConfiguration {\n"

#~ msgid ""
#~ "    @ConfigProperty(name = \"message\") <1>\n"
#~ "    String message();\n"
#~ msgstr ""
#~ "    @ConfigProperty(name = \"message\") <1>\n"
#~ "    String message();\n"

#~ msgid ""
#~ "    @ConfigProperty(defaultValue = \"!\")\n"
#~ "    String getSuffix(); <2>\n"
#~ msgstr ""
#~ "    @ConfigProperty(defaultValue = \"!\")\n"
#~ "    String getSuffix(); <2>\n"

#~ msgid ""
#~ "    Optional<String> getName(); <3>\n"
#~ "}\n"
#~ msgstr ""
#~ "    Optional<String> getName(); <3>\n"
#~ "}\n"

#~ msgid "The `@ConfigProperty` annotation is needed because the name of the configuration property that the method corresponds to doesn't follow the getter method naming conventions."
#~ msgstr "メソッドが対応する構成プロパティーの名前が getter メソッドの命名規則に従っていないため、 `@ConfigProperty` アノテーションが必要です。"

#~ msgid "In this case since `name` was not set, the corresponding property will be `greeting.suffix`."
#~ msgstr "この場合、`name` が設定されていないため、対応するプロパティーは `greeting.suffix` です。"

#~ msgid "It is unnecessary to specify the `@ConfigProperty` annotation because the method name follows the getter method naming conventions (`greeting.name` being the corresponding property) and no default value is needed."
#~ msgstr "メソッド名は getter メソッドの命名規則 (`greeting.name` が対応するプロパティー) に従っており、デフォルト値は不要なため、`@ConfigProperty` アノテーションを指定する必要はありません。"

#~ msgid "When using `@ConfigProperties` on a class or an interface, if the value of one of its fields is not provided, the application startup will fail and a `javax.enterprise.inject.spi.DeploymentException` indicating the missing value information will be thrown.  This does not apply to `Optional` fields and fields with a default value."
#~ msgstr "クラスまたはインターフェイスで `@ConfigProperties` を使用する場合は、そのフィールドの 1 つの値が提供されていないと、アプリケーションの起動に失敗し、値情報の欠落を示す `javax.enterprise.inject.spi.DeploymentException` が発生します。これは `Optional` フィールドとデフォルト値を持つフィールドには適用されません。"

#~ msgid "Additional notes on @ConfigProperties"
#~ msgstr "@ConfigProperties に関する追加の注意事項"

#~ msgid "When using a regular class annotated with `@ConfigProperties` the class doesn't necessarily have to declare getters and setters.  Having simple public non-final fields is valid as well."
#~ msgstr "`@ConfigProperties` でアノテーションされた通常のクラスを使用する場合、クラスは必ずしも getter および setter を宣言する必要はありません。単純でパブリックな確定的でないフィールドを持つことも有効です。"

#~ msgid "Furthermore, the configuration classes support nested object configuration. Suppose there was a need to have an extra layer of greeting configuration named `content` that would contain a few fields. This could be achieved like so:"
#~ msgstr "さらに、設定クラスは入れ子になったオブジェクトの設定をサポートしています。たとえば、いくつかのフィールドを含む `content` という名前のグリーティング設定の追加レイヤーが必要であったと仮定します。これは次のように実現できます。"

#~ msgid ""
#~ "@ConfigProperties(prefix = \"greeting\")\n"
#~ "public class GreetingConfiguration {\n"
#~ msgstr ""
#~ "@ConfigProperties(prefix = \"greeting\")\n"
#~ "public class GreetingConfiguration {\n"

#~ msgid ""
#~ "    public String message;\n"
#~ "    public String suffix = \"!\";\n"
#~ "    public Optional<String> name;\n"
#~ "    public ContentConfig content; <1>\n"
#~ msgstr ""
#~ "    public String message;\n"
#~ "    public String suffix = \"!\";\n"
#~ "    public Optional<String> name;\n"
#~ "    public ContentConfig content; <1>\n"

#~ msgid ""
#~ "    public static class ContentConfig {\n"
#~ "        public Integer prizeAmount;\n"
#~ "        public List<String> recipients;\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    public static class ContentConfig {\n"
#~ "        public Integer prizeAmount;\n"
#~ "        public List<String> recipients;\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "The name of the field (not the class name) will determine the name of the properties that are bound to the object."
#~ msgstr "フィールドの名前 (クラス名ではありません) は、オブジェクトにバインドされるプロパティーの名前を決定します。"

#~ msgid "Setting the properties would occur in the normal manner, for example in `application.properties` one could have:"
#~ msgstr "プロパティーの設定は通常の方法で行われ、例えば `application.properties` の場合は次のようになります。"

#~ msgid ""
#~ "greeting.message = hello\n"
#~ "greeting.name = quarkus\n"
#~ "greeting.content.prize-amount=10\n"
#~ "greeting.content.recipients=Jane,John\n"
#~ msgstr ""
#~ "greeting.message = hello\n"
#~ "greeting.name = quarkus\n"
#~ "greeting.content.prize-amount=10\n"
#~ "greeting.content.recipients=Jane,John\n"

#~ msgid "Furthermore, classes annotated with `@ConfigProperties` can be annotated with Bean Validation annotations similar to the following example:"
#~ msgstr "さらに、`@ConfigProperties` でアノテーションされたクラスは、以下の例に似た Bean Validation アノテーションでアノテートできます。"

#~ msgid ""
#~ "    @Size(min = 20)\n"
#~ "    public String message;\n"
#~ "    public String suffix = \"!\";\n"
#~ msgstr ""
#~ "    @Size(min = 20)\n"
#~ "    public String message;\n"
#~ "    public String suffix = \"!\";\n"

#~ msgid "}\n"
#~ msgstr "}"

#~ msgid "For validation to work, the `quarkus-hibernate-validator` extension needs to be present."
#~ msgstr "検証が機能するようにするには、`quarkus-hibernate-validator` 拡張モジュールが存在する必要があります。"

#~ msgid "If the validation fails with the given configuration, the application will fail to start and indicate the corresponding validation errors in the log."
#~ msgstr "指定された設定で検証に失敗した場合、アプリケーションは起動に失敗し、対応する検証エラーをログに表示します。"

#~ msgid "In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from the entire interface hierarchy are used to bind properties."
#~ msgstr "`@ConfigProperties` でアノテートされたインターフェースの場合、インターフェースは他のインターフェースを拡張することができ、インターフェース階層全体のメソッドがプロパティーをバインドするために使用されます。"

#~ msgid "Using same ConfigProperties with different prefixes"
#~ msgstr "同じ ConfigProperties で異なる接頭辞を使用"

#~ msgid "Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.  Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.  In that case the code would look like so:"
#~ msgstr "Quarkus は、`io.quarkus.arc.config.@ConfigPrefix` アノテーションを使用して、注入ポイントごとに異なる接頭辞を持つ同じ `@ConfigProperties` オブジェクトの使用もサポートしています。たとえば、上の `GreetingConfiguration` を、`greeting` の接頭辞と `other` の接頭辞の両方に使用する必要があるとします。その場合のコードは以下のようになります。"

#~ msgid "`GreetingConfiguration.java`"
#~ msgstr "`GreetingConfiguration.java`"

#~ msgid "`SomeBean.java`"
#~ msgstr "`SomeBean.java`"

#~ msgid ""
#~ "@ApplicationScoped\n"
#~ "public class SomeBean {\n"
#~ msgstr ""
#~ "@ApplicationScoped\n"
#~ "public class SomeBean {\n"

#~ msgid ""
#~ "    @Inject <1>\n"
#~ "    GreetingConfiguration greetingConfiguration;\n"
#~ msgstr ""
#~ "    @Inject <1>\n"
#~ "    GreetingConfiguration greetingConfiguration;\n"

#~ msgid ""
#~ "    @ConfigPrefix(\"other\") <2>\n"
#~ "    GreetingConfiguration otherConfiguration;\n"
#~ msgstr ""
#~ "    @ConfigPrefix(\"other\") <2>\n"
#~ "    GreetingConfiguration otherConfiguration;\n"

#~ msgid "At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`."
#~ msgstr "この注入ポイントでは、`greetingConfiguration` は `@ConfigProperties` で定義されている `greeting` の接頭辞を使用します。"

#~ msgid "At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix` instead of the `greeting` prefix. Notice that in this case `@Inject` is not required."
#~ msgstr "この注入ポイントでは、`otherConfiguration` は、`greeting` の接頭辞の代わりに `@ConfigPrefix` から `other` の接頭辞を使用します。この場合、`@Inject` は必須ではないことに注意してください。"

#~ msgid "Using a list of objects"
#~ msgstr "オブジェクトリストの使用"

#~ msgid "In certain cases it might be necessary to support complex configuration structures that utilize a list of objects as shown in the following example:"
#~ msgstr "次の例のようにオブジェクトのリストを利用する複雑な構成構造をサポートしないといけない場合があります。"

#~ msgid "`ComplexConfiguration.java`"
#~ msgstr "`ComplexConfiguration.java`"

#~ msgid ""
#~ "@ConfigProperties(prefix = \"complex\")\n"
#~ "public class ComplexConfiguration {\n"
#~ "    public String name;\n"
#~ "    public String user;\n"
#~ "    public String password;\n"
#~ "    public List<Nested> inputs;\n"
#~ "    public List<Nested> outputs;\n"
#~ msgstr ""
#~ "@ConfigProperties(prefix = \"complex\")\n"
#~ "public class ComplexConfiguration {\n"
#~ "    public String name;\n"
#~ "    public String user;\n"
#~ "    public String password;\n"
#~ "    public List<Nested> inputs;\n"
#~ "    public List<Nested> outputs;\n"

#~ msgid ""
#~ "    public static class Nested {\n"
#~ "        public String user;\n"
#~ "        public String password;\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    public static class Nested {\n"
#~ "        public String user;\n"
#~ "        public String password;\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "Support for such use cases is only available when using YAML configuration with the `quarkus-config-yaml` extension. A corresponding example YAML configuration could be:"
#~ msgstr "このようなユースケースのサポートは、`quarkus-config-yaml` 拡張モジュールで YAML 設定を使用する場合にのみ利用できます。対応する YAML 設定の例は次のようになります。"

#~ msgid ""
#~ "complex:\n"
#~ "  name: defaultName\n"
#~ "  user: defaultUser\n"
#~ "  password: defaultPassword\n"
#~ "  inputs:\n"
#~ "    - user: user\n"
#~ "      password: secret\n"
#~ "    - user: otheruser\n"
#~ "      password: secret2\n"
#~ "  outputs:\n"
#~ "    - user: someuser\n"
#~ "      password: asecret\n"
#~ "    - user: someotheruser\n"
#~ "      password: anothersecret\n"
#~ msgstr ""
#~ "complex:\n"
#~ "  name: defaultName\n"
#~ "  user: defaultUser\n"
#~ "  password: defaultPassword\n"
#~ "  inputs:\n"
#~ "    - user: user\n"
#~ "      password: secret\n"
#~ "    - user: otheruser\n"
#~ "      password: secret2\n"
#~ "  outputs:\n"
#~ "    - user: someuser\n"
#~ "      password: asecret\n"
#~ "    - user: someotheruser\n"
#~ "      password: anothersecret\n"

#~ msgid "A limitation of such configuration is that the types used as the generic types of the lists need to be classes and not interfaces."
#~ msgstr "このような設定の制限は、リストの汎用型として使用される型がインターフェースではなくクラスである必要があることです。"

#~ msgid "The syntax for this is `%{profile}.config.key=value`. For example if I have the following:"
#~ msgstr "このための構文は `%{profile}.config.key=value` です。たとえば、次のものがあるとします。"

#~ msgid "To use profiles in the `.env` file, you can follow a `_{PROFILE}_CONFIG_KEY=value` pattern. An equivalent of the above example in an `.env` file would be:"
#~ msgstr "`.env` ファイルでプロファイルを使用するには、`_{PROFILE}_CONFIG_KEY=value` のパターンに従います。`.env` ファイル内の上記の例と同等のものは、次のようになります。"

#~ msgid "By default, Quarkus has three profiles, although it is possible to use as many as you like.  The default profiles are:"
#~ msgstr "デフォルトでは、Quarkus には 3 つのプロファイルがあります。デフォルトのプロファイルは以下の通りです。"

#~ msgid "There are two ways to set a custom profile, either via the `quarkus.profile` system property or the `QUARKUS_PROFILE` environment variable. If both are set the system property takes precedence. Note that it is not necessary to define the names of these profiles anywhere, all that is necessary is to create a config property with the profile name, and then set the current profile to that name. For example if I want a `staging` profile with a different HTTP port I can add the following to `application.properties`:"
#~ msgstr "カスタムプロファイルを設定するには、`quarkus.profile` システムプロパティーまたは `QUARKUS_PROFILE` 環境変数を介して設定する方法があります。両方が設定されている場合は、システムプロパティーが優先されます。これらのプロファイルの名前をどこかで定義する必要はないことに注意してください。必要なのは、プロファイル名を含む設定プロパティーを作成し、現在のプロファイルをその名前に設定することだけです。たとえば、`staging` プロファイルに異なる HTTP ポートを設定する場合は、`application.properties` に以下を追加できます。"

#~ msgid "And then set the `QUARKUS_PROFILE` environment variable to `staging` to activate my profile."
#~ msgstr "そして、`QUARKUS_PROFILE` 環境変数を `staging` に設定して、プロフィールを有効化します。"

#~ msgid "The proper way to check the active profile programmatically is to use the `getActiveProfile` method of `io.quarkus.runtime.configuration.ProfileManager`."
#~ msgstr "アクティブなプロファイルをプログラムで確認する適切な方法は、`io.quarkus.runtime.configuration.ProfileManager` の `getActiveProfile` メソッドを使用します。"

#~ msgid "Quarkus supports the use of property expressions in the `application.properties` file."
#~ msgstr "Quarkus は、`application.properties` ファイルのプロパティー式の使用をサポートしています。"

#~ msgid "You can use property expressions both for the Quarkus configuration or for your own configuration properties."
#~ msgstr "プロパティー式は、Quarkus の設定にも、独自の設定プロパティーにも使用できます。"

#~ msgid "Property expressions are defined this way: `${my-property-expression}`."
#~ msgstr "プロパティー式は、`${my-property-expression}` と定義されます。"

#~ msgid "For example, having the following property:"
#~ msgstr "たとえば、以下のようなプロパティーがあるとします。"

#~ msgid "and another property defined as:"
#~ msgstr "そして、以下のように定義された別のプロパティーがあるとします。"

#~ msgid "callable.url=https://quarkus.io/\n"
#~ msgstr "callable.url=https://quarkus.io/\n"

#~ msgid "It does result in one more line in this example but the value of `application.server` can be reused in other properties, diminishing the possibility of typos and providing more flexibility in property definitions."
#~ msgstr "この例ではさらに 1 行増えることになりますが、`application.server` の値は他のプロパティーで再利用でき、タイポの可能性を減らし、プロパティー定義の柔軟性を高めることができます。"

#~ msgid "Quarkus also supports the combination of both property expressions and environment variables."
#~ msgstr "また、Quarkus は、プロパティー式と環境変数の両方を組み合わせることもサポートしています。"

#~ msgid "Let's assume you have the following property defined in `application.properties`:"
#~ msgstr "`application.properties` で以下のようなプロパティーが定義されているとしましょう。"

#~ msgid "You can combine environment variables and property expressions by having a property defined as follows:"
#~ msgstr "以下のようにプロパティーを定義しておくことで、環境変数とプロパティー式を組み合わせることができます。"

#~ msgid "For the purpose of this section we used the property `remote.host` we defined previously.  It has to be noted that the value could have been a fixed one such as in:"
#~ msgstr "このセクションでは、先に定義したプロパティー `remote.host` を使用しています。値は、次のような固定値である可能性があることに注意する必要があります。"

#~ msgid "which will result in `localhost` as the default value if `HOST` is not set."
#~ msgstr "`HOST` が設定されていない場合は `localhost` がデフォルト値になります。"

#~ msgid "In the previous examples using `quarkus.message` instead of `greeting.message` would result in unexpected behavior."
#~ msgstr "前の例では、`greeting.message` の代わりに `quarkus.message` を使用すると、予期せぬ動作をすることになります。"

#~ msgid "Quarkus does much of its configuration and bootstrap at build time and some configuration properties are read and used during the build.  These properties are _fixed at build time_ and it's not possible to change them at runtime.  You always need to repackage your application in order to reflect changes of such properties."
#~ msgstr "Quarkus は、その設定とブートストラップの多くをビルド時に行い、いくつかの設定プロパティーはビルド中に読み込まれて使用されます。これらのプロパティーは _ビルド時に固定され_、実行時に変更することはできません。このようなプロパティーの変更を反映させるには、常にアプリケーションを再パッケージする必要があります。"

#~ msgid "See <<configuration_sources>> for more details."
#~ msgstr "詳細は、link:#configuration_sources[configuration_sources] を参照してください。"

#~ msgid "Generating configuration for your application"
#~ msgstr "アプリケーション設定の生成"

#~ msgid "The property may be cleared by setting the corresponding `application.properties` property, setting the corresponding system property, or setting the corresponding environment variable."
#~ msgstr "このプロパティーは、対応する `application.properties` プロパティーを設定したり、対応するシステムプロパティーを設定したり、対応する環境変数を設定したりすることで削除できます。"

#~ msgid "You can also introduce custom configuration sources in the standard MicroProfile Config manner.  To do this, you must provide a class which implements either `org.eclipse.microprofile.config.spi.ConfigSource` or `org.eclipse.microprofile.config.spi.ConfigSourceProvider`.  Create a https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html[service file] for the class and it will be detected and installed at application startup."
#~ msgstr "標準的な MicroProfile Config の方法でカスタム設定ソースを導入することもできます。これを行うには、`org.eclipse.microprofile.config.spi.ConfigSource` または `org.eclipse.microprofile.config.spi.ConfigSourceProvider` を実装したクラスを提供する必要があります。クラスに link:https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html[サービスファイル] を作成すると、アプリケーションの起動時に検出されてインストールされます。"

#~ msgid "Custom configuration converters"
#~ msgstr "カスタム設定コンバーター"

#~ msgid "You can also use your custom types for configuration values. This can be done by implementing `org.eclipse.microprofile.config.spi.Converter<T>` and adding its fully qualified class name in the `META-INF/services/org.eclipse.microprofile.config.spi.Converter` file."
#~ msgstr "設定値にカスタムタイプを使用することもできます。これは `org.eclipse.microprofile.config.spi.Converter<T>` を実装し、`META-INF/services/org.eclipse.microprofile.config.spi.Converter` ファイルにその完全修飾クラス名を追加することで行うことができます。"

#~ msgid "Let us assume you have a custom type like this one:"
#~ msgstr "このようなカスタムタイプを想定してみましょう。"

#~ msgid "public class MicroProfileCustomValue {\n"
#~ msgstr "public class MicroProfileCustomValue {\n"

#~ msgid "    private final int number;\n"
#~ msgstr "    private final int number;\n"

#~ msgid ""
#~ "    public MicroProfileCustomValue(int number) {\n"
#~ "        this.number = number;\n"
#~ "    }\n"
#~ msgstr ""
#~ "    public MicroProfileCustomValue(int number) {\n"
#~ "        this.number = number;\n"
#~ "    }\n"

#~ msgid ""
#~ "    public int getNumber() {\n"
#~ "        return number;\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    public int getNumber() {\n"
#~ "        return number;\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "The corresponding converter will look like the one below. Please note that your custom converter class must be `public` and must have a `public` no-argument constructor. It also must not be `abstract`."
#~ msgstr "対応するコンバータは以下のようになります。カスタムコンバータクラスは `public` で、`public` の引数がないコンストラクターを持つ必要があることに注意してください。また、`abstract` にはしないでください。"

#~ msgid "import org.eclipse.microprofile.config.spi.Converter;\n"
#~ msgstr "import org.eclipse.microprofile.config.spi.Converter;\n"

#~ msgid "public class MicroProfileCustomValueConverter implements Converter<MicroProfileCustomValue> {\n"
#~ msgstr "public class MicroProfileCustomValueConverter implements Converter<MicroProfileCustomValue> {\n"

#~ msgid ""
#~ "    @Override\n"
#~ "    public MicroProfileCustomValue convert(String value) {\n"
#~ "        return new MicroProfileCustomValue(Integer.parseInt(value));\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @Override\n"
#~ "    public MicroProfileCustomValue convert(String value) {\n"
#~ "        return new MicroProfileCustomValue(Integer.parseInt(value));\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "Then you need to include the fully qualified class name of the converter in a service file `META-INF/services/org.eclipse.microprofile.config.spi.Converter`.  If you have more converters, simply add their class names in this file as well. One fully qualified class name per line, for example:"
#~ msgstr "次に、コンバーターの完全修飾クラス名をサービスファイル `META-INF/services/org.eclipse.microprofile.config.spi.Converter` に含める必要があります。他にもコンバーターがある場合は、そのクラス名をこのファイルに追加してください。たとえば、1 行に 1 つの完全修飾クラス名を指定します。"

#~ msgid ""
#~ "org.acme.config.MicroProfileCustomValueConverter\n"
#~ "org.acme.config.SomeOtherConverter\n"
#~ "org.acme.config.YetAnotherConverter\n"
#~ msgstr ""
#~ "org.acme.config.MicroProfileCustomValueConverter\n"
#~ "org.acme.config.SomeOtherConverter\n"
#~ "org.acme.config.YetAnotherConverter\n"

#~ msgid "Please note that `SomeOtherConverter` and `YetAnotherConverter` were added just for demonstration purposes. If you include in this file classes which are not available at runtime, the converters loading will fail."
#~ msgstr "`SomeOtherConverter` と `YetAnotherConverter` はデモンストレーションのためだけに追加されたものであることに注意してください。実行時に利用できないクラスをこのファイルに含めると、コンバーターの読み込みに失敗します。"

#~ msgid "After this is done, you can use your custom type as a configuration value:"
#~ msgstr "これが終わったら、カスタムタイプを設定値として使用することができます。"

#~ msgid ""
#~ "@ConfigProperty(name = \"configuration.value.name\")\n"
#~ "MicroProfileCustomValue value;\n"
#~ msgstr ""
#~ "@ConfigProperty(name = \"configuration.value.name\")\n"
#~ "MicroProfileCustomValue value;\n"

#~ msgid "Converter priority"
#~ msgstr "コンバーターの優先順位"

#~ msgid "In some cases, you may want to use a custom converter to convert a type which is already converted by a different converter. In such cases, you can use the `javax.annotation.Priority` annotation to change converters precedence and make your custom converter of higher priority than the other in the list."
#~ msgstr "場合によっては、すでに別のコンバーターで変換されている型をカスタムコンバーターで変換したいこともあるでしょう。そのような場合は、`javax.annotation.Priority` アノテーションを使用してコンバーターの優先順位を変更し、カスタムコンバーターをリストの他のコンバーターよりも優先度の高いものにすることができます。"

#~ msgid "By default, if no `@Priority` can be found on a converter, it's registered with a priority of 100 and all Quarkus core converters are registered with a priority of 200, so depending on which converter you would like to replace, you need to set a higher value."
#~ msgstr "デフォルトでは、コンバーターに `@Priority` が見つからない場合は優先度 100 で登録され、Quarkus のコアコンバーターはすべて優先度 200 で登録されているため、どのコンバーターを置き換えるかによっては、より高い値を設定する必要があります。"

#~ msgid "To demonstrate the idea let us implement a custom converter which will take precedence over `MicroProfileCustomValueConverter` implemented in the previous example."
#~ msgstr "このアイデアを実証するために、先ほどの例で実装した `MicroProfileCustomValueConverter` よりも優先されるカスタムコンバーターを実装してみましょう。"

#~ msgid ""
#~ "import javax.annotation.Priority;\n"
#~ "import org.eclipse.microprofile.config.spi.Converter;\n"
#~ msgstr ""
#~ "import javax.annotation.Priority;\n"
#~ "import org.eclipse.microprofile.config.spi.Converter;\n"

#~ msgid ""
#~ "@Priority(150)\n"
#~ "public class MyCustomConverter implements Converter<MicroProfileCustomValue> {\n"
#~ msgstr ""
#~ "@Priority(150)\n"
#~ "public class MyCustomConverter implements Converter<MicroProfileCustomValue> {\n"

#~ msgid ""
#~ "    @Override\n"
#~ "    public MicroProfileCustomValue convert(String value) {\n"
#~ msgstr ""
#~ "    @Override\n"
#~ "    public MicroProfileCustomValue convert(String value) {\n"

#~ msgid ""
#~ "        final int secretNumber;\n"
#~ "        if (value.startsFrom(\"OBF:\")) {\n"
#~ "            secretNumber = Integer.parseInt(SecretDecoder.decode(value));\n"
#~ "        } else {\n"
#~ "            secretNumber = Integer.parseInt(value);\n"
#~ "        }\n"
#~ msgstr ""
#~ "        final int secretNumber;\n"
#~ "        if (value.startsFrom(\"OBF:\")) {\n"
#~ "            secretNumber = Integer.parseInt(SecretDecoder.decode(value));\n"
#~ "        } else {\n"
#~ "            secretNumber = Integer.parseInt(value);\n"
#~ "        }\n"

#~ msgid ""
#~ "        return new MicroProfileCustomValue(secretNumber);\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "        return new MicroProfileCustomValue(secretNumber);\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "Since it converts the same value type (namely `MicroProfileCustomValue`) and has a priority of 150, it will be used instead of a `MicroProfileCustomValueConverter` which has a default priority of 100."
#~ msgstr "これは同じ値タイプ (すなわち `MicroProfileCustomValue`) を変換し、優先度が 150 であるため、デフォルトの優先度が 100 の `MicroProfileCustomValueConverter` の代わりに使用されます。"

#~ msgid "This new converter also needs to be listed in a service file, i.e. `META-INF/services/org.eclipse.microprofile.config.spi.Converter`."
#~ msgstr "この新しいコンバーターは、サービスファイル、すなわち `META-INF/services/org.eclipse.microprofile.config.spi.Converter` に記載する必要があります。"

#~ msgid "YAML for Configuration"
#~ msgstr "設定用 YAML"

#~ msgid "You might want to use YAML over properties for configuration.  Since link:https://github.com/smallrye/smallrye-config[SmallRye Config] brings support for YAML configuration, Quarkus supports this as well."
#~ msgstr "設定に、プロパティーよりも YAML を使いたい場合があるかもしれません。link:https://github.com/smallrye/smallrye-config[SmallRye Config] は YAML 設定をサポートしているため、Quarkus でもこの設定がサポートされています。"

#~ msgid "First you will need to add the Config YAML extension to your `pom.xml`:"
#~ msgstr "最初に Config YAML 拡張モジュールを `pom.xml` に追加する必要があります。"

#~ msgid ""
#~ "<dependency>\n"
#~ "    <groupId>io.quarkus</groupId>\n"
#~ "    <artifactId>quarkus-config-yaml</artifactId>\n"
#~ "</dependency>\n"
#~ msgstr ""
#~ "<dependency>\n"
#~ "    <groupId>io.quarkus</groupId>\n"
#~ "    <artifactId>quarkus-config-yaml</artifactId>\n"
#~ "</dependency>\n"

#~ msgid "Or you can alternatively run this command in the directory containing your Quarkus project:"
#~ msgstr "または、Quarkus プロジェクトが含まれるディレクトリーでこのコマンドを実行することもできます。"

#~ msgid "./mvnw quarkus:add-extension -Dextensions=\"config-yaml\"\n"
#~ msgstr "./mvnw quarkus:add-extension -Dextensions=\"config-yaml\"\n"

#~ msgid "Now Quarkus can read YAML configuration files.  The config directories and priorities are the same as before."
#~ msgstr "これで Quarkus は YAML 設定ファイルを読み込めるようになりました。設定ディレクトリーと優先順位は以前と同じです。"

#~ msgid "Quarkus will choose an `application.yaml` over an `application.properties`.  YAML files are just an alternative way to configure your application.  You should decide and keep one configuration type to avoid errors."
#~ msgstr "Quarkus では、`application.yaml` が `application.properties` よりも優先されます。YAML ファイルは、アプリケーションを設定するための代替手段にすぎません。エラーを回避するには、設定タイプを 1 つ決めて保持しておく必要があります。"

#~ msgid ""
#~ "# YAML supports comments\n"
#~ "quarkus:\n"
#~ "  datasource:\n"
#~ "    db-kind: postgresql\n"
#~ "    jdbc:\n"
#~ "      url: jdbc:postgresql://localhost:5432/some-database\n"
#~ "    username: quarkus\n"
#~ "    password: quarkus\n"
#~ msgstr ""
#~ "# YAML supports comments\n"
#~ "quarkus:\n"
#~ "  datasource:\n"
#~ "    db-kind: postgresql\n"
#~ "    jdbc:\n"
#~ "      url: jdbc:postgresql://localhost:5432/some-database\n"
#~ "    username: quarkus\n"
#~ "    password: quarkus\n"

#~ msgid ""
#~ "# REST Client configuration property\n"
#~ "org:\n"
#~ "  acme:\n"
#~ "    restclient:\n"
#~ "      CountriesService/mp-rest/url: https://restcountries.eu/rest\n"
#~ msgstr ""
#~ "# REST Client configuration property\n"
#~ "org:\n"
#~ "  acme:\n"
#~ "    restclient:\n"
#~ "      CountriesService/mp-rest/url: https://restcountries.eu/rest\n"

#~ msgid ""
#~ "# For configuration property names that use quotes, do not split the string inside the quotes.\n"
#~ "quarkus:\n"
#~ "  log:\n"
#~ "    category:\n"
#~ "      \"io.quarkus.category\":\n"
#~ "        level: INFO\n"
#~ msgstr ""
#~ "# For configuration property names that use quotes, do not split the string inside the quotes.\n"
#~ "quarkus:\n"
#~ "  log:\n"
#~ "    category:\n"
#~ "      \"io.quarkus.category\":\n"
#~ "        level: INFO\n"

#~ msgid "Quarkus also supports using `application.yml` as the name of the YAML file. The same rules apply for this file as for `application.yaml`."
#~ msgstr "Quarkus は YAML ファイルの名前として `application.yml` を使用することもサポートしています。このファイルには、 `application.yaml` と同じルールが適用されます。"

#~ msgid "Providing profile dependent configuration with YAML is done like with properties.  Just add the `%profile` wrapped in quotation marks before defining the key-value pairs:"
#~ msgstr "プロファイル依存の設定を YAML で提供することはプロパティーと同じように行われます。キーと値のペアを定義する前に、引用符で囲んだ `%profile` を追加するだけです。"

#~ msgid ""
#~ "\"%dev\":\n"
#~ "  quarkus:\n"
#~ "    datasource:\n"
#~ "      db-kind: postgresql\n"
#~ "      jdbc:\n"
#~ "        url: jdbc:postgresql://localhost:5432/some-database\n"
#~ "      username: quarkus\n"
#~ "      password: quarkus\n"
#~ msgstr ""
#~ "\"%dev\":\n"
#~ "  quarkus:\n"
#~ "    datasource:\n"
#~ "      db-kind: postgresql\n"
#~ "      jdbc:\n"
#~ "        url: jdbc:postgresql://localhost:5432/some-database\n"
#~ "      username: quarkus\n"
#~ "      password: quarkus\n"

#~ msgid "The MicroProfile Config specification defines configuration keys as an arbitrary `.`-delimited string.  However, structured formats like YAML naively only support a subset of the possible configuration namespace.  For example, consider the two configuration properties `quarkus.http.cors` and `quarkus.http.cors.methods`.  One property is the prefix of another, so it may not be immediately evident how to specify both keys in your YAML configuration."
#~ msgstr "MicroProfile Config仕様は、設定キーを任意の `.` 区切り文字列として定義しています。ただし、YAML のような構造化されたフォーマットは、可能な設定名前空間のサブセットしかサポートしていません。たとえば、`quarkus.http.cors` および `quarkus.http.cors.methods` の 2 つの設定プロパティーについて考えてみましょう。あるプロパティーは別のプロパティーの接頭辞なので、YAML の設定で両方のキーをどのように指定するかは明確ではないかもしれません。"

#~ msgid "This is solved by using a `null` key (normally represented by `~`) for any YAML property which is a prefix of another one.  Here's an example:"
#~ msgstr "これは、別のプロパティーの接頭辞である YAML プロパティーに `null` キー (通常は `~` で示される) を使用することで解決されます。例を以下に示します。"

#~ msgid "An example YAML configuration resolving prefix-related key name conflicts"
#~ msgstr "接頭辞関連のキー名の競合を解決する YAML 設定の例"

#~ msgid ""
#~ "quarkus:\n"
#~ "  http:\n"
#~ "    cors:\n"
#~ "      ~: true\n"
#~ "      methods: GET,PUT,POST\n"
#~ msgstr ""
#~ "quarkus:\n"
#~ "  http:\n"
#~ "    cors:\n"
#~ "      ~: true\n"
#~ "      methods: GET,PUT,POST\n"

#~ msgid "In general, `null` YAML keys are not included in assembly of the configuration property name, allowing them to be used to any level for disambiguating configuration keys."
#~ msgstr "一般的に、`null` YAML キーは設定プロパティー名のアセンブリーには含まれていないため、設定キーを曖昧にするために任意のレベルで使用することができます。"

#~ msgid "More info on how to configure"
#~ msgstr "設定方法の詳細"

#~ msgid "SmallRye Config provides:"
#~ msgstr "SmallRye Config は以下を提供します。"
