# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 02:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/resteasy.adoc:6
#, no-wrap
msgid "RESTEasy Classic"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:13
msgid "This guide is about https://resteasy.dev[RESTEasy Classic] which used to be the default JAX-RS implementation until Quarkus 2.8."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:17
msgid "It is now recommended to use RESTEasy Reactive, which supports equally well traditional blocking workloads and reactive workloads.  For more information about RESTEasy Reactive, please see the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:resteasy-reactive.adoc[RESTEasy Reactive guide]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:20
msgid "there is another guide if you need a xref:rest-client.adoc[REST client based on RESTEasy Classic] (including support for JSON)."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:21
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:24
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "このガイドで開発するアプリケーションは非常にシンプルです: ユーザーはフォームを使用してリストに要素を追加することができ、リストが更新されます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:26
msgid "All the information between the browser and the server are formatted as JSON."
msgstr "ブラウザとサーバー間の情報はすべて JSON 形式になっています。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:27
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:30
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:37
msgid "This command generates a new project importing the RESTEasy/JAX-RS and https://github.com/FasterXML/jackson[Jackson] extensions, and in particular adds the following dependency:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/resteasy.adoc:39
#: upstream/_versions/main/guides/resteasy.adoc:68
#: upstream/_versions/main/guides/resteasy.adoc:604
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:45
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/resteasy.adoc:48
#: upstream/_versions/main/guides/resteasy.adoc:77
#: upstream/_versions/main/guides/resteasy.adoc:613
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:51
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:56
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr "ユーザーエクスペリエンスを向上させるために、Quarkusは3つのJackson link:https://github.com/FasterXML/jackson-modules-java8[Java 8モジュール] を登録しているので、手動で登録する必要はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:59
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] so, if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy JSON-B extension instead:"
msgstr "Quarkusは https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] もサポートしているので、JacksonよりもJSON-Bが好きな場合は、代わりにRESTEasy JSON-B エクステンションに依存したプロジェクトを作成することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:66
msgid "This command generates a new project importing the RESTEasy/JAX-RS and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions, and in particular adds the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:74
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jsonb</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:80
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-jsonb\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:82
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr "初めてのJSON RESTサービスの作成"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:85
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、果物のリストを管理するアプリケーションを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:87
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "まず、以下のように `Fruit` Bean を作成してみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:91
#: upstream/_versions/main/guides/resteasy.adoc:114
#: upstream/_versions/main/guides/resteasy.adoc:477
#: upstream/_versions/main/guides/resteasy.adoc:500
#: upstream/_versions/main/guides/resteasy.adoc:655
#, no-wrap
msgid "package org.acme.rest.json;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:93
#, no-wrap
msgid "public class Fruit {\n"
msgstr "public class Fruit {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:96
#: upstream/_versions/main/guides/resteasy.adoc:482
#, no-wrap
msgid ""
"    public String name;\n"
"    public String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:99
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""
"    public Fruit() {\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:105
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:108
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "派手なことは何もありません。注意すべき重要なことは、デフォルトのコンストラクタを持つことはJSONシリアライズレイヤーで必須であるということです。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:110
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr "ここで、 `org.acme.rest.json.FruitResource` クラスを以下のように編集します:"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:118
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashMap;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:123
#, no-wrap
msgid ""
"import javax.ws.rs.DELETE;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:126
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:128
#, no-wrap
msgid "    private Set<Fruit> fruits = Collections.newSetFromMap(Collections.synchronizedMap(new LinkedHashMap<>()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:133
#, no-wrap
msgid ""
"    public FruitResource() {\n"
"        fruits.add(new Fruit(\"Apple\", \"Winter fruit\"));\n"
"        fruits.add(new Fruit(\"Pineapple\", \"Tropical fruit\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:138
#, no-wrap
msgid ""
"    @GET\n"
"    public Set<Fruit> list() {\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:144
#, no-wrap
msgid ""
"    @POST\n"
"    public Set<Fruit> add(Fruit fruit) {\n"
"        fruits.add(fruit);\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:151
#, no-wrap
msgid ""
"    @DELETE\n"
"    public Set<Fruit> delete(Fruit fruit) {\n"
"        fruits.removeIf(existingFruit -> existingFruit.name.contentEquals(fruit.name));\n"
"        return fruits;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:154
msgid "The implementation is pretty straightforward and you just need to define your endpoints using the JAX-RS annotations."
msgstr "実装は非常に簡単で、JAX-RSのアノテーションを使ってエンドポイントを定義するだけです。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:157
msgid "The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson], depending on the extension you chose when initializing the project."
msgstr "`Fruit` オブジェクトは、プロジェクトの初期化時に選択したエクステンションに応じて、 https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] または link:https://github.com/FasterXML/jackson[Jackson] によって自動的にシリアライズ/デシリアライズされます。"

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:164
msgid "When a JSON extension is installed such as `quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream` respectively)."
msgstr "`quarkus-resteasy-jackson` や `quarkus-resteasy-jsonb` などの JSON エクステンションがインストールされている場合、メディアタイプが `@Produces` や `@Consumes` アノテーションで明示的に設定されていない限り、Quarkus はほとんどの戻り値に `application/json` メディアタイプをデフォルトで使用します( `String` や `File` などのよく知られたタイプには例外があり、それぞれ `text/plain` と `application/octet-stream` がデフォルトとなっています)。"

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:167
msgid "If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr "デフォルトでJSONを使用したくない場合は、 `quarkus.resteasy-json.default-json=false` を設定すると、デフォルトは自動ネゴシエーションに戻ります。これを設定した場合、JSON を使用するためには `@Produces(MediaType.APPLICATION_JSON)` と `@Consumes(MediaType.APPLICATION_JSON)` をエンドポイントに追加する必要があります。"

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:170
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr "JSON のデフォルトに頼らない場合は、エンドポイントに `@Produces` や `@Consumes` のアノテーションを付けて、期待されるコンテンツタイプを正確に定義することを強くお勧めします。これにより、ネイティブ実行可能ファイルに含まれる JAX-RS プロバイダ (コンバータとみなすことができます) の数を絞り込むことができます。"

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:173
#, no-wrap
msgid "Configuring JSON support"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/resteasy.adoc:175
#, no-wrap
msgid "Jackson"
msgstr "Jackson"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:179
msgid "In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (and consumed by the Quarkus extensions) is configured to ignore unknown properties (by disabling the `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` feature)."
msgstr "Quarkusでは、CDI経由で取得した(そしてQuarkusのエクステンションによって消費される)デフォルトのJackson `ObjectMapper` は、未知のプロパティーを無視するように設定されています( `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` 機能を無効にすることで)。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:182
msgid "You can restore the default behavior of Jackson by setting `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties` or on a per class basis via `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr "`application.properties` で `quarkus.jackson.fail-on-unknown-properties=true` を設定するか、 `@JsonIgnoreProperties(ignoreUnknown = false)` を経由してクラスごとに設定することで、Jackson のデフォルトの動作を復元することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:185
msgid "Furthermore, the `ObjectMapper` is configured to format dates and time in ISO-8601 (by disabling the `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` feature)."
msgstr "さらに、 `ObjectMapper` 、日付と時刻をISO-8601でフォーマットするように設定されています（ `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` の機能を無効にすることで）。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:189
msgid "The default behaviour of Jackson can be restored by setting `quarkus.jackson.write-dates-as-timestamps=true` in your `application.properties`. If you want to change the format for a single field, you can use the `@JsonFormat` annotation."
msgstr "`application.properties` で `quarkus.jackson.fail-on-unknown-properties=true` を設定するか、 `@JsonIgnoreProperties(ignoreUnknown = false)` を経由してクラスごとに設定することで、Jackson のデフォルトの動作を復元することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:193
msgid "Also, Quarkus makes it very easy to configure various Jackson settings via CDI beans.  The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer` inside of which any Jackson configuration can be applied."
msgstr "また、Quarkusは、CDI Bean を介して、様々なJackson設定を非常に簡単に設定することができます。最も単純な(そして推奨される)アプローチは、 `io.quarkus.jackson.ObjectMapperCustomizer` 型の CDI Bean を定義し、その中で、Jackson の設定を適用することです。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:195
msgid "An example where a custom module needs to be registered would look like so:"
msgstr "カスタムモジュールを登録する必要がある場合の例は次のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:201
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:204
#, no-wrap
msgid ""
"@Singleton\n"
"public class RegisterCustomModuleCustomizer implements ObjectMapperCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:209
#, no-wrap
msgid ""
"    public void customize(ObjectMapper mapper) {\n"
"        mapper.registerModule(new CustomModule());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:214
msgid "Users can even provide their own `ObjectMapper` bean if they so choose.  If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.  Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr "ユーザーは、選択すれば自分の `ObjectMapper` Beanを提供することもできます。この場合、 `ObjectMapper` を生成する CDI プロデューサの中で、すべての `io.quarkus.jackson.ObjectMapperCustomizer` Bean を手動で注入して適用することが非常に重要です。これを怠ると、様々なエクステンションによって提供される Jackson 固有のカスタマイズが適用されなくなります。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:219
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:222
#, no-wrap
msgid ""
"import javax.enterprise.inject.Instance;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:224
#, no-wrap
msgid "public class CustomObjectMapper {\n"
msgstr "public class CustomObjectMapper {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:229
#, no-wrap
msgid ""
"    // Replaces the CDI producer for ObjectMapper built into Quarkus\n"
"    @Singleton\n"
"    ObjectMapper objectMapper(Instance<ObjectMapperCustomizer> customizers) {\n"
"        ObjectMapper mapper = myObjectMapper(); // Custom `ObjectMapper`\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:234
#, no-wrap
msgid ""
"        // Apply all ObjectMapperCustomizer beans (incl. Quarkus)\n"
"        for (ObjectMapperCustomizer customizer : customizers) {\n"
"            customizer.customize(mapper);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:238
#, no-wrap
msgid ""
"        return mapper;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/resteasy.adoc:240
#, no-wrap
msgid "JSON-B"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:243
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr "上記のように、Quarkusでは、 `quarkus-resteasy-jsonb` エクステンションを使用することで、Jacksonの代わりにJSON-Bを使用するオプションを提供しています。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:245
msgid "Following the same approach as described in the previous section, JSON-B can be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr "前項と同様のアプローチで、 `io.quarkus.jsonb.JsonbConfigCustomizer` beanを使用してJSON-Bを設定することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:247
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr "例えば、 `FooSerializer` という名前のカスタムシリアライザを `com.example.Foo` タイプで JSON-B で登録する必要がある場合、以下のような Bean を追加すれば十分です。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:254
#, no-wrap
msgid ""
"import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
"import javax.inject.Singleton;\n"
"import javax.json.bind.JsonbConfig;\n"
"import javax.json.bind.serializer.JsonbSerializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:257
#, no-wrap
msgid ""
"@Singleton\n"
"public class FooSerializerRegistrationCustomizer implements JsonbConfigCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:262
#, no-wrap
msgid ""
"    public void customize(JsonbConfig config) {\n"
"        config.withSerializers(new FooSerializer());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:267
msgid "A more advanced option would be to directly provide a bean of `javax.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `javax.json.bind.Jsonb` (with a `Singleton` scope).  If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `javax.json.bind.Jsonb`.  Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr "より高度なオプションとしては、 `javax.json.bind.JsonbConfig` ( `Dependent` スコープ付き)の Bean を直接提供するか、極端な場合には `javax.json.bind.Jsonb` ( `Singleton` スコープ付き)のタイプの Bean を提供することが考えられます。後者のアプローチを利用する場合は、 `javax.json.bind.Jsonb` を生成する CDI プロデューサに `io.quarkus.jsonb.JsonbConfigCustomizer` Bean をすべて手動で注入して適用することが非常に重要です。これを怠ると、様々なエクステンションによって提供される JSON-B 固有のカスタマイズが適用されなくなります。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:271
#, no-wrap
msgid "import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:275
#, no-wrap
msgid ""
"import javax.enterprise.context.Dependent;\n"
"import javax.enterprise.inject.Instance;\n"
"import javax.json.bind.JsonbConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:277
#, no-wrap
msgid "public class CustomJsonbConfig {\n"
msgstr "public class CustomJsonbConfig {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:282
#, no-wrap
msgid ""
"    // Replaces the CDI producer for JsonbConfig built into Quarkus\n"
"    @Dependent\n"
"    JsonbConfig jsonConfig(Instance<JsonbConfigCustomizer> customizers) {\n"
"        JsonbConfig config = myJsonbConfig(); // Custom `JsonbConfig`\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:287
#, no-wrap
msgid ""
"        // Apply all JsonbConfigCustomizer beans (incl. Quarkus)\n"
"        for (JsonbConfigCustomizer customizer : customizers) {\n"
"            customizer.customize(config);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:291
#, no-wrap
msgid ""
"        return config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:294
#, no-wrap
msgid "JSON Hypertext Application Language (HAL) support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:297
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:299
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-resteasy-jsonb` or the `quarkus-resteasy-jackson` extension."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/resteasy.adoc:300
#, no-wrap
msgid "Table Context object"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/resteasy.adoc:302
#, no-wrap
msgid "GAV"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/resteasy.adoc:304
#, no-wrap
msgid "Usage"
msgstr "使用方法"

#. type: Table
#: upstream/_versions/main/guides/resteasy.adoc:305
#, no-wrap
msgid "`io.quarkus:quarkus-hal`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/resteasy.adoc:307
#, no-wrap
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:310
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:315
#, fuzzy, no-wrap
msgid ""
"@Path(\"/records\")\n"
"public class RecordsResource {\n"
msgstr ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:322
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.APPLICATION_JSON, \"application/hal+json\" })\n"
"    @LinkResource(entityClassName = \"org.acme.Record\", rel = \"list\")\n"
"    public List<TestRecord> getAll() {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:331
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/first\")\n"
"    @Produces({ MediaType.APPLICATION_JSON, \"application/hal+json\" })\n"
"    @LinkResource(rel = \"first\")\n"
"    public TestRecord getFirst() {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:334
msgid "Now, the endpoints `/records` and `/records/first` will accept the media type both `json` and `hal+json` to print the records in Hal format."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:336
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:377
#, no-wrap
msgid ""
"& curl -H \"Accept:application/hal+json\" -i localhost:8080/records\n"
"{\n"
"    \"_embedded\": {\n"
"        \"items\": [\n"
"            {\n"
"                \"id\": 1,\n"
"                \"slug\": \"first\",\n"
"                \"value\": \"First value\",\n"
"                \"_links\": {\n"
"                    \"list\": {\n"
"                        \"href\": \"http://localhost:8081/records\"\n"
"                    },\n"
"                    \"first\": {\n"
"                        \"href\": \"http://localhost:8081/records/first\"\n"
"                    }\n"
"                }\n"
"            },\n"
"            {\n"
"                \"id\": 2,\n"
"                \"slug\": \"second\",\n"
"                \"value\": \"Second value\",\n"
"                \"_links\": {\n"
"                    \"list\": {\n"
"                        \"href\": \"http://localhost:8081/records\"\n"
"                    },\n"
"                    \"first\": {\n"
"                        \"href\": \"http://localhost:8081/records/first\"\n"
"                    }\n"
"                }\n"
"            }\n"
"        ]\n"
"    },\n"
"    \"_links\": {\n"
"        \"list\": {\n"
"            \"href\": \"http://localhost:8081/records\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:380
msgid "When we call a resource `/records/first` that returns only one instance, then the output is:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:397
#, no-wrap
msgid ""
"& curl -H \"Accept:application/hal+json\" -i localhost:8080/records/first\n"
"{\n"
"    \"id\": 1,\n"
"    \"slug\": \"first\",\n"
"    \"value\": \"First value\",\n"
"    \"_links\": {\n"
"        \"list\": {\n"
"            \"href\": \"http://localhost:8081/records\"\n"
"        },\n"
"        \"first\": {\n"
"            \"href\": \"http://localhost:8081/records/first\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:399
#, no-wrap
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:404
msgid "Now let's add a simple web page to interact with our `FruitResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr "ここで、 `FruitResource` .Quarkusと対話するための簡単なウェブページを追加してみましょう。Quarkusは、 `META-INF/resources` ディレクトリーの下にある静的リソースを自動的に提供します。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] ファイルの内容を含む `fruits.html` ファイルを追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:406
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:410
msgid "start Quarkus with:"
msgstr "Quarkusを起動します。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:413
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "ブラウザで `http://localhost:8080/fruits.html` を開きます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:414
msgid "add new fruits to the list via the form"
msgstr "フォームを使って新しいフルーツをリストに追加します。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:417
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:420
msgid "You can build a native executable with the usual command:"
msgstr "ネイティブ実行可能ファイルは、通常のコマンド `./mvnw package -Pnative` でビルドできます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:424
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "実行は簡単で、 `./target/rest-json-quickstart-1.0-SNAPSHOT-runner` を実行するだけです。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:426
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:427
#, no-wrap
msgid "About serialization"
msgstr "シリアライゼーションについて"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:430
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr "JSONシリアライズライブラリは、Javaのリフレクションを使用してオブジェクトのプロパティーを取得してシリアライズします。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:434
msgid "When using native executables with GraalVM, all classes that will be used with reflection need to be registered.  The good news is that Quarkus does that work for you most of the time.  So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr "GraalVMでネイティブ実行可能ファイルを使用する場合、リフレクションで使用されるすべてのクラスを登録する必要があります。良いニュースは、Quarkusがほとんどの場合、その作業を代行してくれるということです。これまでのところ、 `Fruit` でさえ、リフレクトを使用するためのクラスを登録しておらず、すべてが正常に動作しています。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:437
msgid "Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.  When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr "Quarkusは、RESTメソッドからシリアライズされた型を推論することができる場合に、何らかのマジックを実行します。以下のようなRESTメソッドがある場合、Quarkusは、 `Fruit` がシリアライズされると判断します。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:444
#, no-wrap
msgid ""
"@GET\n"
"public List<Fruit> list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:448
msgid "Quarkus does that for you automatically by analyzing the REST methods at build time and that's why we didn't need any reflection registration in the first part of this guide."
msgstr "Quarkusは、ビルド時にRESTメソッドを分析することで、自動的にそのような処理を行ってくれます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:451
msgid "Another common pattern in the JAX-RS world is to use the `Response` object.  `Response` comes with some nice perks:"
msgstr "JAX-RSの世界では、 `Response` オブジェクトを使用するのがもう一つの一般的なパターンです。 `Response` にはいくつかの素晴らしい特典があります。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:453
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr "メソッドで何が起こるかによって異なるエンティティータイプを返すことができます (例えば `Legume` や `Error` )。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:454
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr " `Response` の属性を設定することができます (エラーが発生した時にステータスを知ることができます)。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:456
msgid "Your REST method then looks like this:"
msgstr "RESTメソッドは次のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:463
#, no-wrap
msgid ""
"@GET\n"
"public Response list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:467
msgid "It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.  In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr "`Response` に含まれるタイプは情報がないため、Quarkusがビルド時に判断することはできません。この場合、Quarkusは必要なクラスを自動的に反映登録することができません。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:469
msgid "This leads us to our next section."
msgstr "これが次のセクションにつながります。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:470
#, no-wrap
msgid "Using Response"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:473
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr "`Fruit` クラスと同じモデルに従って、JSON としてシリアライズされる `Legume` クラスを作成してみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:479
#, no-wrap
msgid "public class Legume {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:485
#, no-wrap
msgid ""
"    public Legume() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:491
#, no-wrap
msgid ""
"    public Legume(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:494
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr "それでは、マメ科植物のリストを返すメソッドを一つだけ持つ `LegumeResource` REST サービスを作成してみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:496
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr "このメソッドは `Response` を返し、 `Legume` のリストではありません。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:504
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashSet;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:511
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:516
#, no-wrap
msgid ""
"@Path(\"/legumes\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class LegumeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:518
#, no-wrap
msgid "    private Set<Legume> legumes = Collections.synchronizedSet(new LinkedHashSet<>());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:523
#, no-wrap
msgid ""
"    public LegumeResource() {\n"
"        legumes.add(new Legume(\"Carrot\", \"Root vegetable, usually orange\"));\n"
"        legumes.add(new Legume(\"Zucchini\", \"Summer squash\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:529
#, no-wrap
msgid ""
"    @GET\n"
"    public Response list() {\n"
"        return Response.ok(legumes).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:534
msgid "Now let's add a simple web page to display our list of legumes.  In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr "ここで、マメ科植物のリストを表示するための簡単なウェブページを追加してみましょう。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] ファイルの内容を含む `legumes.html` ファイルを追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:536
msgid "Open a browser to http://localhost:8080/legumes.html and you will see our list of legumes."
msgstr "ブラウザを開いて http://localhost:8080/legumes.html にアクセスすると、マメ科植物のリストが表示されます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:538
msgid "The interesting part starts when running the application as a native executable:"
msgstr "興味深い部分は、アプリケーションをネイティブ実行可能ファイルとして実行するときに始まります。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:542
#: upstream/_versions/main/guides/resteasy.adoc:581
msgid "create the native executable with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:545
#: upstream/_versions/main/guides/resteasy.adoc:584
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr "`./target/rest-json-quickstart-1.0-SNAPSHOT-runner` で実行します"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:546
#: upstream/_versions/main/guides/resteasy.adoc:585
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:550
msgid "No legumes there."
msgstr "そこには豆類はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:553
msgid "As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.  The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list so it does not serialize the fields' data."
msgstr "上記のように、Quarkusが `Legume` クラスを判断できなかったことが問題となっており、REST エンドポイントを解析して何らかの反映が必要となります。JSONシリアライズライブラリは、 `Legume` のフィールドのリストを取得しようとすると空のリストを取得するので、フィールドのデータをシリアライズしません。"

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:558
msgid "At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.  GraalVM will simply return an empty list of fields."
msgstr "現時点では、JSON-BやJacksonがクラスのフィールドのリストを取得しようとしたときに、そのクラスがリフレクションに登録されていない場合、例外はスローされません。GraalVMは単に空のフィールドのリストを返します。"

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:560
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr "うまくいけば、将来的にはこれが変化して、エラーがより明白になるでしょう。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:563
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr "`Legume` クラスに `@RegisterForReflection` アノテーションを追加することで、手動で `Legume` を リフレクション用に登録することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:566
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:571
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Legume {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:574
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:576
msgid "Let's do that and follow the same steps as before:"
msgstr "それを実行して、今までと同じ手順を踏んでみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:580
msgid "hit `Ctrl+C` to stop the application"
msgstr "`Ctrl+C` を叩いてアプリケーションを停止させる"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:589
msgid "This time, you can see our list of legumes."
msgstr "今回はマメ科の一覧が表示されました。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:591
#, no-wrap
msgid "Being reactive"
msgstr "リアクティブであること"

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:596
msgid "For reactive workloads, please always use xref:resteasy-reactive.adoc[RESTEasy Reactive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:600
msgid "You can return _reactive types_ to handle asynchronous processing.  Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr "非同期処理を処理するために _リアクティブ型_ を返すことができます。Quarkusでは、リアクティブで非同期なコードを書くために link:https://smallrye.io/smallrye-mutiny[Mutiny] の使用を推奨しています。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:602
msgid "To integrate Mutiny and RESTEasy, you need to add the `quarkus-resteasy-mutiny` dependency to your project:"
msgstr "Mutiny と RESTEasy を統合するには、 `quarkus-resteasy-mutiny` 依存関係をプロジェクトに追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:610
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:616
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-mutiny\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:619
msgid "Then, your endpoint can return `Uni` or `Multi` instances:"
msgstr "そして、エンドポイントは `Uni` や `Multi` のインスタンスを返すことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:628
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{name}\")\n"
"public Uni<Fruit> getOne(@PathParam String name) {\n"
"    return findByName(name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:633
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> getAll() {\n"
"    return findAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:637
msgid "Use `Uni` when you have a single result.  Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr "単一の結果がある場合は `Uni` を使用します。 `Multi` は、非同期的に放出される可能性のある複数の項目がある場合に使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:639
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr "`Uni` と `Response` を使用して、非同期 HTTP レスポンスを返すことができます: `Uni<Response>` ."

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:641
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutinyについての詳細は、 xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] に記載されています。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:642
#, no-wrap
msgid "HTTP filters and interceptors"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:648
msgid "Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter` implementations respectively. These filters are suitable for processing the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata. They also have the capability to abort the request processing, for instance when the user does not have the permissions to access the endpoint."
msgstr "HTTP リクエストとレスポンスの両方とも、それぞれ `ContainerRequestFilter` または `ContainerResponseFilter` の実装を提供することで、 インターセプトすることができます。これらのフィルタは、メッセージに関連付けられたメタデータを処理するのに適しています。HTTP ヘッダ、クエリパラメーター、メディアタイプ、その他のメタデータです。また、ユーザーがエンドポイントにアクセスする権限を持っていない場合など、リクエスト処理を中止する機能も持っています。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:651
msgid "Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing `ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr "`ContainerRequestFilter` を使用して、サービスにロギング機能を追加してみましょう。 `ContainerRequestFilter` を実装して、 `@Provider` アノテーションをつけることで実現できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:658
#, no-wrap
msgid ""
"import io.vertx.core.http.HttpServerRequest;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:664
#, no-wrap
msgid ""
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.UriInfo;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:667
#, no-wrap
msgid ""
"@Provider\n"
"public class LoggingFilter implements ContainerRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:669
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(LoggingFilter.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:672
#, no-wrap
msgid ""
"    @Context\n"
"    UriInfo info;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:675
#, no-wrap
msgid ""
"    @Context\n"
"    HttpServerRequest request;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:678
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ContainerRequestContext context) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:682
#, no-wrap
msgid ""
"        final String method = context.getMethod();\n"
"        final String path = info.getPath();\n"
"        final String address = request.remoteAddress().toString();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:686
#, no-wrap
msgid ""
"        LOG.infof(\"Request %s %s from IP %s\", method, path, address);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:689
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr "これで、RESTメソッドが呼び出されるたびに、リクエストがコンソールにログとして記録されるようになりました。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:696
#, no-wrap
msgid ""
"2019-06-05 12:44:26,526 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /legumes from IP 127.0.0.1\n"
"2019-06-05 12:49:19,623 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:50:44,019 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request POST /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:51:04,485 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 127.0.0.1\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:698
#, no-wrap
msgid "CORS filter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:703
msgid "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served."
msgstr "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[クロスオリジンリソース共有] (CORS)は、ウェブページ上の制限されたリソースを、最初のリソースが提供されたドメイン以外の別のドメインから要求できるようにするメカニズムです。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:706
msgid "Quarkus comes with a CORS filter. Read the xref:http-reference.adoc#cors-filter[HTTP Reference Documentation] to learn how to use it."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:707
#, no-wrap
msgid "GZip Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:710
msgid "Quarkus comes with GZip support (even though it is not enabled by default). The following configuration knobs allow to configure GZip support."
msgstr "QuarkusにはGZipサポートが搭載されています(デフォルトでは有効になっていませんが)。以下の設定ノブを使用して、GZipサポートを設定できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:715
#, no-wrap
msgid ""
"quarkus.resteasy.gzip.enabled=true // <1>\n"
"quarkus.resteasy.gzip.max-input=10M // <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:718
msgid "Enable Gzip support."
msgstr "Gzipサポートを有効にします。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:720
msgid "Configure the upper limit on deflated request body. This is useful to mitigate potential attacks by limiting their reach. The default value is `10M`.  This configuration option would recognize strings in this format (shown as a regular expression): `[0-9]+[KkMmGgTtPpEeZzYy]?`. If no suffix is given, assume bytes."
msgstr "デフレーションされたリクエストボディの上限を設定します。これは、リーチを制限することで潜在的な攻撃を緩和するのに便利です。既定値は `10M` です。この設定オプションは、以下の形式の文字列を認識します(正規表現で表示されます): `[0-9]+[KkMmGgTtPpEeZzYy]?` .サフィックスが指定されていない場合は、バイトとみなします。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:722
msgid "Once GZip support has been enabled you can use it on an endpoint by adding the `@org.jboss.resteasy.annotations.GZIP` annotation to your endpoint method."
msgstr "GZip サポートが有効になったら、エンドポイントメソッドに `@org.jboss.resteasy.annotations.GZIP` アノテーションを追加することで、エンドポイントで使用することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:724
msgid "The configuration property `quarkus.http.enable-compression` has no effect on compression support of RESTEasy Classic endpoints."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:725
#, no-wrap
msgid "Multipart Support"
msgstr "マルチパートサポート"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:728
msgid "RESTEasy supports multipart via the https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider]."
msgstr "RESTEasyは link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider] を介してマルチパートをサポートしています。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:730
msgid "Quarkus provides an extension called `quarkus-resteasy-multipart` to make things easier for you."
msgstr "Quarkusは、 `quarkus-resteasy-multipart` というエクステンションを提供しています。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:732
msgid "This extension slightly differs from the RESTEasy default behavior as the default charset (if none is specified in your request) is UTF-8 rather than US-ASCII."
msgstr "このエクステンションは、デフォルトの文字セットが US-ASCII ではなく UTF-8 であるため、RESTEasy のデフォルトの動作とは若干異なります。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:734
msgid "You can configure this behavior with the following configuration properties:"
msgstr "この動作は、以下の構成プロパティーで設定できます。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:737
#, no-wrap
msgid "Servlet compatibility"
msgstr "サーブレットとの互換性"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:740
msgid "In Quarkus, RESTEasy can either run directly on top of the Vert.x HTTP server, or on top of Undertow if you have any servlet dependency."
msgstr "Quarkusでは、RESTEasyはVert.x HTTPサーバーの上で直接実行するか、サーブレットに依存している場合はUndertowの上で実行することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:747
msgid "As a result, certain classes, such as `HttpServletRequest` are not always available for injection. Most use-cases for this particular class are covered by JAX-RS equivalents, except for getting the remote client's IP. RESTEasy comes with a replacement API which you can inject: https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`], which has the methods https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`] and https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`] to solve this problem."
msgstr "その結果、 `HttpServletRequest` のような特定のクラスが常にインジェクションに利用できるわけではありません。この特定のクラスのほとんどのユースケースは、リモートクライアントの IP を取得することを除いて、JAX-RS と同等のものでカバーされています。RESTEasy には、インジェクション可能な代替 API が付属しています。 link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`] これは以下のメソッドを持っています。 link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`] そして link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`] を解決するために、この問題を解決します。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:748
#, no-wrap
msgid "RESTEasy and REST Client interactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:752
msgid "In Quarkus, the RESTEasy extension and xref:rest-client.adoc[the REST Client extension] share the same infrastructure.  One important consequence of this consideration is that they share the same list of providers (in the JAX-RS meaning of the word)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:755
msgid "For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls, which might not be the desired behavior."
msgstr "例えば、 `WriterInterceptor` を宣言した場合、デフォルトではサーバーの呼び出しとクライアントの呼び出しの両方をインターセプトしますが、これは望ましい動作ではないかもしれません。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:757
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr "しかし、このデフォルトの動作を変更してプロバイダを制約することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:759
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.SERVER)` アノテーションを追加することで、 *サーバー* コールのみを考慮します。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:760
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.CLIENT)` アノテーションを追加することで、 *クライアント* コールのみを考慮します。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:761
#, no-wrap
msgid "What's Different from Jakarta EE Development"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:763
#, no-wrap
msgid "No Need for `Application` Class"
msgstr "`Application` クラスは不要"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:766
msgid "Configuration via an application-supplied subclass of `Application` is supported, but not required."
msgstr "`Application` のアプリケーションが提供するサブクラスによる設定もサポートされていますが、必須ではありません。"

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:767
#, no-wrap
msgid "Only a single JAX-RS application"
msgstr "単一のJAX-RSアプリケーションのみ"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:771
msgid "In contrast to JAX-RS (and RESTeasy) running in a standard servlet-container, Quarkus only supports the deployment of a single JAX-RS application.  If multiple JAX-RS `Application` classes are defined, the build will fail with the message `Multiple classes have been annotated with @ApplicationPath which is currently not supported`."
msgstr "JAX-RS(およびRESTeasy)が標準のサーブレットコンテナーで実行されているのとは対照的に、Quarkusは単一のJAX-RSアプリケーションのデプロイのみをサポートしています。複数のJAX-RS `Application` クラスが定義されている場合、ビルドは `Multiple classes have been annotated with @ApplicationPath which is currently not supported` というメッセージとともに失敗するでしょう。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:773
msgid "If multiple JAX-RS applications are defined, the property `quarkus.resteasy.ignore-application-classes=true` can be used to ignore all explicit `Application` classes. This makes all resource-classes available via the application-path as defined by `quarkus.resteasy.path` (default: `/`)."
msgstr "複数の JAX-RS アプリケーションが定義されている場合、プロパティー `quarkus.resteasy.ignoreApplicationClasses=true` を使用して、すべての明示的な `Application` クラスを無視することができます。これにより、すべてのリソースクラスが `quarkus.resteasy.path` で定義されたアプリケーションパス(デフォルトは `/` )を介して利用できるようになります。"

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:774
#, no-wrap
msgid "Support limitations of JAX-RS application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:779
msgid "The RESTEasy extension doesn't support the method `getProperties()` of the class `javax.ws.rs.core.Application`. Moreover, it only relies on the methods `getClasses()` and `getSingletons()` to filter out the annotated resource, provider and feature classes.  It doesn't filter out the built-in resource, provider and feature classes and also the resource, provider and feature classes registered by the other extensions.  Finally the objects returned by the method `getSingletons()` are ignored, only the classes are took into account to filter out the resource, provider and feature classes, in other words the method `getSingletons()` is actually managed the same way as `getClasses()`."
msgstr "RESTEasyエクステンションは、クラス `javax.ws.rs.core.Application` のメソッド `getProperties()` をサポートしていません。さらに、アノテーションされたリソース、プロバイダ、フィーチャークラスをフィルタリングするために、 `getClasses()` と `getSingletons()` のメソッドにのみ依存しています。組み込みのリソース、プロバイダ、機能クラスや、他の拡張機能で登録されたリソース、プロバイダ、機能クラスは除外されません。最後に、メソッド `getSingletons()` が返すオブジェクトは無視され、リソース、プロバイダ、機能クラスをフィルタリングするためにクラスのみが考慮されます。言い換えれば、メソッド `getSingletons()` は実際には `getClasses()` と同じように管理されます。"

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:780
#, no-wrap
msgid "Lifecycle of Resources"
msgstr "リソースのライフサイクル"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:784
msgid "In Quarkus all JAX-RS resources are treated as CDI beans.  It's possible to inject other beans via `@Inject`, bind interceptors using bindings such as `@Transactional`, define `@PostConstruct` callbacks, etc."
msgstr "Quarkusでは、すべてのJAX-RSリソースはCDI Bean として扱われます。 `@Inject` を介して他の Bean を注入したり、 `@Transactional` のようなバインディングを使用してインターセプターをバインドしたり、 `@PostConstruct` コールバックを定義したりすることが可能です。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:790
msgid "If there is no scope annotation declared on the resource class then the scope is defaulted.  The default scope can be controlled through the `quarkus.resteasy.singleton-resources` property.  If set to `true` (default) then a *single instance* of a resource class is created to service all requests (as defined by `@javax.inject.Singleton`).  If set to `false` then a *new instance* of the resource class is created per each request.  An explicit CDI scope annotation (`@RequestScoped`, `@ApplicationScoped`, etc.) always overrides the default behavior and specifies the lifecycle of resource instances."
msgstr "リソースクラスでスコープアノテーションが宣言されていない場合は、スコープはデフォルトになります。デフォルトのスコープは `quarkus.resteasy.singleton-resources` プロパティーで制御できます。 `true` (デフォルト) に設定すると、( `@javax.inject.Singleton` で定義されているように) すべてのリクエストにサービスを提供するためのリソースクラスの *単一のインスタンス* が作成されます。 `false` に設定すると、各リクエストごとにリソースクラスの *新しい インスタンス* が作成されます。明示的な CDI スコープアノテーション ( `@RequestScoped` , `@ApplicationScoped` , など) は常にデフォルトの動作を上書きし、リソースインスタンスのライフサイクルを指定します。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:791
#, no-wrap
msgid "Include/Exclude JAX-RS classes with build time conditions"
msgstr "ビルド時条件でJAX-RSクラスを含める/除外する"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:795
msgid "Quarkus enables the inclusion or exclusion of JAX-RS Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.  Thus, the various JAX-RS classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these JAX-RS classes should be included."
msgstr "Quarkusでは、CDI Beanの場合と同様に、ビルド時の条件に応じて、JAX-RSリソース、プロバイダー、および機能を直接包含または除外することができます。したがって、さまざまなJAX-RSクラスは、プロファイル条件（ `@io.quarkus.arc.profile.IfBuildProfile` または `@io.quarkus.arc.profile.UnlessBuildProfile` ）および／またはプロパティ条件（ `io.quarkus.arc.properties.IfBuildProperty` または `io.quarkus.arc.properties.UnlessBuildProperty` ）でアノテーションすることができ、構築時にどの条件でこれらのJAX-RSクラスが含まれるべきかをQuarkusに示すことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:797
msgid "In the following example, Quarkus includes the endpoint `sayHello` if and only if the build profile `app1` has been enabled."
msgstr "次の例では、Quarkusは、ビルドプロファイル `app1` が有効になっている場合に限り、エンドポイント `sayHello` を含めます。"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:802
#, no-wrap
msgid ""
"@IfBuildProfile(\"app1\")\n"
"public class ResourceForApp1Only {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:809
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"sayHello\")\n"
"    public String sayHello() {\n"
"        return \"hello\";\n"
"     }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:812
msgid "Please note that if a JAX-RS Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the JAX-RS Application."
msgstr "JAX-RSアプリケーションが検出され、メソッド `getClasses()` および／または `getSingletons()` がオーバーライドされている／されている場合、Quarkusはビルド時の条件を無視し、JAX-RSアプリケーションで定義されているもののみを考慮することに注意してください。"

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:813
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:816
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr "Quarkusを使用したJSON RESTサービスの作成は、実績のあるよく知られたテクノロジーに依存しているため、簡単に行えます。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:818
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr "いつものように、Quarkusは、アプリケーションをネイティブ実行可能ファイルとして実行する際に、水面下の作業をさらに簡略化しています。"

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:819
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr "覚えておくべきことは一つだけあります。 `Response` を使用していて、Quarkus がシリアライズされているBeanを特定できない場合は、 `@RegisterForReflection` を使ってアノテーションを付ける必要があります。"

#~ msgid "If you want to compress everything then we recommended that you use the `quarkus.http.enable-compression=true` setting instead to globally enable compression support."
#~ msgstr "すべてを圧縮したい場合は、代わりに `quarkus.http.enable-compression=true` の設定を使用してグローバルに圧縮サポートを有効にすることをお勧めします。"
