# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/amazon-s3.adoc:6
#, no-wrap
msgid "Quarkus - Amazon S3 Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:14
msgid "Amazon S3 is an object storage service. It can be employed to store any type of object which allows for uses like storage for Internet applications, backup and recovery, disaster recovery, data archives, data lakes for analytics, any hybrid cloud storage.  This extension provides functionality that allows the client to communicate with the service when running in Quarkus.  You can find more information about S3 at https://aws.amazon.com/s3/[the Amazon S3 website]."
msgstr "Amazon S3はオブジェクトストレージサービスです。インターネットアプリケーションのストレージ、バックアップとリカバリ、災害復旧、データアーカイブ、分析用のデータレイク、あらゆるハイブリッドクラウドストレージなどの用途に使用できるように、あらゆるタイプのオブジェクトを保存するために採用することができます。このエクステンションは、Quarkusで実行しているときにクライアントがサービスと通信できるようにする機能を提供します。S3についての詳細は、 link:https://aws.amazon.com/s3/[Amazon S3のウェブサイト] で確認できます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:17
msgid "The S3 extension is based on https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html[AWS Java SDK 2.x].  It's a major rewrite of the 1.x code base that offers two programming models (Blocking & Async)."
msgstr "S3 エクステンションは link:https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html[AWS Java SDK 2.x] をベースにしており、2つのプログラミングモデル(Blocking & Async)を提供する1.xのコードベースを大幅に書き換えています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:19
msgid "The Quarkus extension supports two programming models:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:21
msgid "Blocking access using URL Connection HTTP client (by default) or the Apache HTTP Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:22
msgid "https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html[Asynchronous programming] based on JDK's `CompletableFuture` objects and the Netty HTTP client."
msgstr "JDK の `CompletableFuture` オブジェクトと Netty HTTP クライアントをベースにした link:https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html[非同期プログラミング]"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:24
msgid "In this guide, we see how you can get your REST services to use S3 locally and on AWS."
msgstr "このガイドでは、ローカルでAWS上でS3を使用するためのRESTサービスを取得する方法を見ていきます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/amazon-s3.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:28
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:30
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:31
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:32
msgid "Apache Maven 3.5.3+"
msgstr "Apache Maven 3.5.3+"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:33
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS Command line interface]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:34
msgid "An AWS Account to access the S3 service. Before you can use the AWS SDKs with Amazon S3, you must get an AWS access key ID and secret access key."
msgstr "S3サービスにアクセスするためのAWSアカウント。Amazon S3でAWS SDKを利用する前に、AWSのアクセスキーIDとシークレットアクセスキーを取得する必要があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:35
msgid "Optionally, Docker for your system to run S3 locally for testing purposes"
msgstr "オプションで、テスト目的でローカルでS3を実行するためのシステムのためのDocker"

#. type: Title ===
#: upstream/_versions/1.7/guides/amazon-s3.adoc:36
#, no-wrap
msgid "Provision S3 locally"
msgstr "ローカルでの S3 の準備"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:39
msgid "The easiest way to start working with S3 is to run a local instance as a container."
msgstr "S3を使い始める最も簡単な方法は、ローカルインスタンスをコンテナーとして実行することです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:43
#, no-wrap
msgid "docker run -it --publish 8008:4572 -e SERVICES=s3 -e START_WEB=0 localstack/localstack\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:45
msgid "This starts a S3 instance that is accessible on port `8008`."
msgstr "これは、ポート `8008` でアクセス可能な S3 インスタンスを起動します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:47
msgid "Create an AWS profile for your local instance using AWS CLI:"
msgstr "AWS CLIを使ってローカルインスタンスのAWSプロファイルを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:54
#, no-wrap
msgid ""
"$ aws configure --profile localstack\n"
"AWS Access Key ID [None]: test-key\n"
"AWS Secret Access Key [None]: test-secret\n"
"Default region name [None]: us-east-1\n"
"Default output format [None]:\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/amazon-s3.adoc:56
#, no-wrap
msgid "Create a S3 bucket"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:59
msgid "Create a S3 bucket using AWS CLI"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:63
#, no-wrap
msgid "aws s3 mb s3://quarkus.s3.quickstart --profile localstack --endpoint-url=http://localhost:8008\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/amazon-s3.adoc:65
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:68
msgid "The application built here allows to manage files stored in Amazon S3."
msgstr "ここで構築したアプリケーションでは、Amazon S3に保存されているファイルを管理することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:71
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:73
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:75
msgid "The solution is located in the `amazon-s3-quickstart` {quickstarts-tree-url}/amazon-s3-quickstart[directory]."
msgstr "ソリューションは `amazon-s3-quickstart` {quickstarts-tree-url}/amazon-s3-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/amazon-s3.adoc:76
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:79
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:89
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amazon-s3-quickstart \\\n"
"    -DclassName=\"org.acme.s3.S3SyncClientResource\" \\\n"
"    -Dpath=\"/s3\" \\\n"
"    -Dextensions=\"resteasy-jsonb,amazon-s3\"\n"
"cd amazon-s3-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:93
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS and S3 Client extensions.  After this, the `amazon-s3` extension has been added to your `pom.xml`."
msgstr "このコマンドは、RESTEasy/JAX-RSとS3クライアントエクステンションをインポートするMaven構造を生成します。この後、 `amazon-s3` エクステンションが `pom.xml` に追加されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:95
msgid "Then, we'll add the following dependency to support `multipart/form-data` requests:"
msgstr "そして、 `multipart/form-data` リクエストをサポートするために、以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:102
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.jboss.resteasy</groupId>\n"
"    <artifactId>resteasy-multipart-provider</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/amazon-s3.adoc:104
#, no-wrap
msgid "Setting up the model"
msgstr "モデルのセットアップ"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:107
msgid "In this example, we will create an application to manage a list of files. The example application will demonstrate the two programming models supported by the extension."
msgstr "この例では、ファイルのリストを管理するアプリケーションを作成します。この例のアプリケーションでは、エクステンションでサポートされている2つのプログラミングモデルをデモします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:110
msgid "Because the primary goal of our application is to upload a file into the S3 bucket, we need to setup the model we will be using to define the `multipart/form-data` payload, in the form of a `MultipartBody` POJO."
msgstr "私たちのアプリケーションの主な目的はファイルをS3バケットにアップロードすることなので、 `multipart/form-data` ペイロードを定義するために使用するモデルを `MultipartBody` POJO の形で設定する必要があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:112
msgid "Create a `org.acme.s3.FormData` class as follows:"
msgstr "以下のように `org.acme.s3.FormData` クラスを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:116
#: upstream/_versions/1.7/guides/amazon-s3.adoc:152
#: upstream/_versions/1.7/guides/amazon-s3.adoc:203
#: upstream/_versions/1.7/guides/amazon-s3.adoc:262
#: upstream/_versions/1.7/guides/amazon-s3.adoc:441
#, no-wrap
msgid "package org.acme.s3;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:118
#, no-wrap
msgid "import java.io.InputStream;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:121
#, no-wrap
msgid ""
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:123
#, no-wrap
msgid "import org.jboss.resteasy.annotations.providers.multipart.PartType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:125
#, no-wrap
msgid "public class FormData {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:129
#, no-wrap
msgid ""
"    @FormParam(\"file\")\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public InputStream data;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:133
#, no-wrap
msgid ""
"    @FormParam(\"filename\")\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String fileName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:137
#, no-wrap
msgid ""
"    @FormParam(\"mimetype\")\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String mimeType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:139
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:142
msgid "The class defines three fields:"
msgstr "クラスは3つのフィールドを定義しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:144
msgid "`data` that fill capture stream of uploaded bytes from the client"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:145
msgid "`fileName` that captures a filename as provided by the submited form"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:146
msgid "`mimeType` content type of the uploaded file"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:148
msgid "In the second step let's create a bean that will represent a file in a Amazon S3 bucket as follows:"
msgstr "第2ステップでは、以下のようにAmazon S3バケット内のファイルを表すBeanを作成してみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:154
#, no-wrap
msgid "import software.amazon.awssdk.services.s3.model.S3Object;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:157
#, no-wrap
msgid ""
"public class FileObject {\n"
"    private String objectKey;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:159
#, no-wrap
msgid "    private Long size;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:162
#, no-wrap
msgid ""
"    public FileObject() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:171
#, no-wrap
msgid ""
"    public static FileObject from(S3Object s3Object) {\n"
"        FileObject file = new FileObject();\n"
"        if (s3Object != null) {\n"
"            file.setObjectKey(s3Object.key());\n"
"            file.setSize(s3Object.size());\n"
"        }\n"
"        return file;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:175
#, no-wrap
msgid ""
"    public String getObjectKey() {\n"
"        return objectKey;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:179
#, no-wrap
msgid ""
"    public Long getSize() {\n"
"        return size;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:184
#, no-wrap
msgid ""
"    public FileObject setObjectKey(String objectKey) {\n"
"        this.objectKey = objectKey;\n"
"        return this;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:190
#, no-wrap
msgid ""
"    public FileObject setSize(Long size) {\n"
"        this.size = size;\n"
"        return this;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:194
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer. The static `from` method creates a bean based on the `S3Object` object provided by the S3 client response when listing all the objects in a bucket."
msgstr "派手なことは何もありません。注意すべき重要なことは、デフォルトのコンストラクタを持つことは、JSONシリアライゼーションレイヤーによって要求されるということです。static `from` メソッドは、バケット内のすべてのオブジェクトをリストアップする際に、S3 クライアントのレスポンスで提供される `S3Object` オブジェクトに基づいてBeanを作成します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/amazon-s3.adoc:195
#, no-wrap
msgid "Create JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:199
msgid "Now create a `org.acme.s3.CommonResource` that will consist of methods to prepare S3 request to get object from a S3 bucket, or to put file into a S3 bucket.  Note a configuration property `bucket.name` is defined here as the request method required name of the S3 bucket."
msgstr "ここで、S3バケットからオブジェクトを取得したり、S3バケットにファイルを入れたりするためのS3リクエストを準備するためのメソッドからなる `org.acme.s3.CommonResource` を作成します。ここでは、S3バケットのリクエストメソッドの必要な名前として、設定プロパティー `bucket.name` が定義されていることに注意してください。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:210
#, no-wrap
msgid ""
"import java.io.File;\n"
"import java.io.InputStream;\n"
"import java.nio.file.Files;\n"
"import java.nio.file.StandardCopyOption;\n"
"import java.util.Date;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:212
#, no-wrap
msgid "import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:215
#, no-wrap
msgid ""
"import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n"
"import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:218
#, no-wrap
msgid ""
"abstract public class CommonResource {\n"
"    private final static String TEMP_DIR = System.getProperty(\"java.io.tmpdir\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:221
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"bucket.name\")\n"
"    String bucketName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:229
#, no-wrap
msgid ""
"    protected PutObjectRequest buildPutRequest(FormData formData) {\n"
"        return PutObjectRequest.builder()\n"
"                .bucket(bucketName)\n"
"                .key(formData.fileName)\n"
"                .contentType(formData.mimeType)\n"
"                .build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:236
#, no-wrap
msgid ""
"    protected GetObjectRequest buildGetRequest(String objectKey) {\n"
"        return GetObjectRequest.builder()\n"
"                .bucket(bucketName)\n"
"                .key(objectKey)\n"
"                .build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:242
#, no-wrap
msgid ""
"    protected File tempFilePath() {\n"
"        return new File(TEMP_DIR, new StringBuilder().append(\"s3AsyncDownloadedTemp\")\n"
"                .append((new Date()).getTime()).append(UUID.randomUUID())\n"
"                .append(\".\").append(\".tmp\").toString());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:251
#, no-wrap
msgid ""
"    protected File uploadToTemp(InputStream data) {\n"
"        File tempPath;\n"
"        try {\n"
"            tempPath = File.createTempFile(\"uploadS3Tmp\", \".tmp\");\n"
"            Files.copy(data, tempPath.toPath(), StandardCopyOption.REPLACE_EXISTING);\n"
"        } catch (Exception ex) {\n"
"            throw new RuntimeException(ex);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:255
#, no-wrap
msgid ""
"        return tempPath;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:258
msgid "Then, create a `org.acme.s3.S3SyncClientResource` that will provides an API to upload/download files as well as to list all the files in a bucket."
msgstr "次に、ファイルをアップロード/ダウンロードするためのAPIを提供する `org.acme.s3.S3SyncClientResource` を作成し、バケットのすべてのファイルを一覧表示します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:267
#, no-wrap
msgid ""
"import java.io.ByteArrayOutputStream;\n"
"import java.util.Comparator;\n"
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:279
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.core.Response.ResponseBuilder;\n"
"import javax.ws.rs.core.Response.Status;\n"
"import javax.ws.rs.core.StreamingOutput;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:282
#: upstream/_versions/1.7/guides/amazon-s3.adoc:459
#, no-wrap
msgid ""
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
"import org.jboss.resteasy.annotations.providers.multipart.MultipartForm;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:290
#, no-wrap
msgid ""
"import software.amazon.awssdk.core.sync.RequestBody;\n"
"import software.amazon.awssdk.core.sync.ResponseTransformer;\n"
"import software.amazon.awssdk.services.s3.S3Client;\n"
"import software.amazon.awssdk.services.s3.model.GetObjectResponse;\n"
"import software.amazon.awssdk.services.s3.model.ListObjectsRequest;\n"
"import software.amazon.awssdk.services.s3.model.PutObjectResponse;\n"
"import software.amazon.awssdk.services.s3.model.S3Object;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:295
#, no-wrap
msgid ""
"@Path(\"/s3\")\n"
"public class S3SyncClientResource extends CommonResource {\n"
"    @Inject\n"
"    S3Client s3;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:300
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"upload\")\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    public Response uploadFile(@MultipartForm FormData formData) throws Exception {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:304
#, no-wrap
msgid ""
"        if (formData.fileName == null || formData.fileName.isEmpty()) {\n"
"            return Response.status(Status.BAD_REQUEST).build();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:308
#, no-wrap
msgid ""
"        if (formData.mimeType == null || formData.mimeType.isEmpty()) {\n"
"            return Response.status(Status.BAD_REQUEST).build();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:317
#, no-wrap
msgid ""
"        PutObjectResponse putResponse = s3.putObject(buildPutRequest(formData),\n"
"                RequestBody.fromFile(uploadToTemp(formData.data)));\n"
"        if (putResponse != null) {\n"
"            return Response.ok().status(Status.CREATED).build();\n"
"        } else {\n"
"            return Response.serverError().build();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:324
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"download/{objectKey}\")\n"
"    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public Response downloadFile(@PathParam(\"objectKey\") String objectKey) {\n"
"        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n"
"        GetObjectResponse object = s3.getObject(buildGetRequest(objectKey), ResponseTransformer.toOutputStream(baos));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:330
#, no-wrap
msgid ""
"        ResponseBuilder response = Response.ok((StreamingOutput) output -> baos.writeTo(output));\n"
"        response.header(\"Content-Disposition\", \"attachment;filename=\" + objectKey);\n"
"        response.header(\"Content-Type\", object.contentType());\n"
"        return response.build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:335
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public List<FileObject> listFiles() {\n"
"        ListObjectsRequest listRequest = ListObjectsRequest.builder().bucket(bucketName).build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:341
#, no-wrap
msgid ""
"        //HEAD S3 objects to get metadata\n"
"        return s3.listObjects(listRequest).contents().stream().sorted(Comparator.comparing(S3Object::lastModified).reversed())\n"
"                .map(FileObject::from).collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/amazon-s3.adoc:343
#, no-wrap
msgid "Configuring S3 clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:346
msgid "Both S3 clients (sync and async) are configurable via the `application.properties` file that can be provided in the `src/main/resources` directory."
msgstr "S3クライアント(同期と非同期)は、 `src/main/resources` ディレクトリーで提供される `application.properties` ファイルを介して設定可能です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:349
msgid "You need to add to the classpath a proper implementation of the sync client. By default the extension uses the URL connection HTTP client, so add a URL connection client dependency to the `pom.xml` file:"
msgstr "同期クライアントの適切な実装をクラスパスに追加する必要があります。デフォルトでは、エクステンションは URL Connection 接続 HTTP クライアントを使用するので、URL 接続クライアントの依存関係を `pom.xml` ファイルに追加してください。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:356
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>url-connection-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:359
msgid "If you want to use Apache HTTP client instead, configure it as follows:"
msgstr "代わりにApache HTTPクライアントを使用したい場合は、以下のように設定します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:362
#, no-wrap
msgid "quarkus.s3.sync-client.type=apache\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:365
msgid "And add following dependency to the application `pom.xml`:"
msgstr "そして、以下の依存関係をアプリケーションの `pom.xml` に追加します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:371
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>apache-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:374
msgid "For asynchronous client refer to <<Going asynchronous>> for more information."
msgstr "非同期クライアントについては、 link:#Going asynchronous[非同期にする] を参照してください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:377
msgid "If you're going to use a local S3 instance, configure it as follows:"
msgstr "ローカルのS3インスタンスを使う場合は、以下のように設定します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:381
#, no-wrap
msgid "quarkus.s3.endpoint-override=http://localhost:8008\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:386
#, no-wrap
msgid ""
"quarkus.s3.aws.region=us-east-1\n"
"quarkus.s3.aws.credentials.type=static\n"
"quarkus.s3.aws.credentials.static-provider.access-key-id=test-key\n"
"quarkus.s3.aws.credentials.static-provider.secret-access-key=test-secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:388
#, no-wrap
msgid "bucket.name=quarkus.s3.quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:391
msgid "`quarkus.s3.aws.region` - It's required by the client, but since you're using a local S3 instance you can pick any valid AWS region."
msgstr "`quarkus.s3.aws.region` - クライアントが必要としていますが、ローカルのS3インスタンスを使用しているので、有効なAWSリージョンを選ぶことができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:392
msgid "`quarkus.s3.aws.credentials.type` - Set `static` credentials provider with any values for `access-key-id` and `secret-access-key`"
msgstr "`quarkus.s3.aws.credentials.type` - `static` の資格情報プロバイダを `access-key-id` と `secret-access-key` の任意の値で設定します。 "

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:393
msgid "`quarkus.s3.endpoint-override` - Override the S3 client to use a local instance instead of an AWS service"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:394
msgid "`bucket.name` - Name of the S3 bucket"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:396
msgid "If you want to work with an AWS account, you'd need to set it with:"
msgstr "AWSアカウントで作業したい場合は、次のようにして設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:399
#, no-wrap
msgid "bucket.name=<your-bucket-name>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:402
#, no-wrap
msgid ""
"quarkus.s3.aws.region=<YOUR_REGION>\n"
"quarkus.s3.aws.credentials.type=default\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:405
msgid "`bucket.name` - name of the S3 bucket on your AWS account."
msgstr "`bucket.name` - AWSアカウント上のS3バケット名"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:406
msgid "`quarkus.s3.aws.region` you should set it to the region where your S3 bucket was created,"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:407
msgid "`quarkus.s3.aws.credentials.type` - use the `default` credentials provider chain that looks for credentials in this order:"
msgstr "`quarkus.s3.aws.credentials.type` - `default` クレデンシャル・プロバイダ・チェーンを使用して、この順番でクレデンシャルを検索します"

#. type: Title ==
#: upstream/_versions/1.7/guides/amazon-s3.adoc:410
#, no-wrap
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:415
msgid "Now let's add a simple web page to interact with our `S3SyncClientResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `s3.html` file with the content from this {quickstarts-blob-url}/amazon-s3-quickstart/src/main/resources/META-INF/resources/s3.html[s3.html] file in it."
msgstr "ここで、 `S3SyncClientResource` .Quarkusと対話するための簡単なウェブページを追加してみましょう。Quarkusは、 `META-INF/resources` ディレクトリーの下にある静的リソースを自動的に提供します。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/amazon-s3-quickstart/src/main/resources/META-INF/resources/s3.html[s3.html] ファイルの内容を含む `s3.html` ファイルを追加します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:417
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:419
msgid "start Quarkus with `./mvnw compile quarkus:dev`"
msgstr "`./mvnw compile quarkus:dev` で Quarkus を起動します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:420
msgid "open a browser to `http://localhost:8080/s3.html`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:421
msgid "upload new file to the current S3 bucket via the form and see the list of files in the bucket"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/amazon-s3.adoc:422
#, no-wrap
msgid "Next steps"
msgstr "次のステップ"

#. type: Title ===
#: upstream/_versions/1.7/guides/amazon-s3.adoc:424
#, no-wrap
msgid "Packaging"
msgstr "パッケージング"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:428
msgid "Packaging your application is as simple as `./mvnw clean package`.  It can be run with `java -jar target/amazon-s3-quickstart-1.0-SNAPSHOT-runner.jar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:431
msgid "With GraalVM installed, you can also create a native executable binary: `./mvnw clean package -Dnative`.  Depending on your system, that will take some time."
msgstr "GraalVMをインストールした状態で、ネイティブの実行バイナリーを作成することもできます: `./mvnw clean package -Dnative` お使いのシステムにもよりますが、時間がかかります。"

#. type: Title ===
#: upstream/_versions/1.7/guides/amazon-s3.adoc:432
#, no-wrap
msgid "Going asynchronous"
msgstr "非同期にする"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:435
msgid "Thanks to the AWS SDK v2.x used by the Quarkus extension, you can use the asynchronous programming model out of the box."
msgstr "Quarkusのエクステンションで使われているAWS SDK v2.xのおかげで、非同期プログラミングモデルをすぐに使えるようになりました。"

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:437
msgid "Create a `org.acme.s3.S3AsyncClientResource` that will be similar to our `S3SyncClientResource` but using an asynchronous programming model."
msgstr "`S3SyncClientResource` と同様の `org.acme.s3.S3AsyncClientResource` を作成しますが、非同期プログラミングモデルを使用します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:446
#, no-wrap
msgid ""
"import java.io.File;\n"
"import java.util.Comparator;\n"
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:456
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.core.Response.Status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:467
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import software.amazon.awssdk.core.async.AsyncRequestBody;\n"
"import software.amazon.awssdk.core.async.AsyncResponseTransformer;\n"
"import software.amazon.awssdk.services.s3.S3AsyncClient;\n"
"import software.amazon.awssdk.services.s3.model.ListObjectsRequest;\n"
"import software.amazon.awssdk.services.s3.model.ListObjectsResponse;\n"
"import software.amazon.awssdk.services.s3.model.S3Object;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:472
#, no-wrap
msgid ""
"@Path(\"/async-s3\")\n"
"public class S3AsyncClientResource extends CommonResource {\n"
"    @Inject\n"
"    S3AsyncClient s3;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:477
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"upload\")\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    public Uni<Response> uploadFile(@MultipartForm FormData formData) throws Exception {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:481
#, no-wrap
msgid ""
"        if (formData.fileName == null || formData.fileName.isEmpty()) {\n"
"            return Uni.createFrom().item(Response.status(Status.BAD_REQUEST).build());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:485
#, no-wrap
msgid ""
"        if (formData.mimeType == null || formData.mimeType.isEmpty()) {\n"
"            return Uni.createFrom().item(Response.status(Status.BAD_REQUEST).build());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:496
#, no-wrap
msgid ""
"        return Uni.createFrom()\n"
"                .completionStage(() -> {\n"
"                    return s3.putObject(buildPutRequest(formData), AsyncRequestBody.fromFile(uploadToTemp(formData.data)));\n"
"                })\n"
"                .onItem().ignore().andSwitchTo(Uni.createFrom().item(Response.created(null).build()))\n"
"                .onFailure().recoverWithItem(th -> {\n"
"                    th.printStackTrace();\n"
"                    return Response.serverError().build();\n"
"                });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:502
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"download/{objectKey}\")\n"
"    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public Uni<Response> downloadFile(@PathParam(\"objectKey\") String objectKey) throws Exception {\n"
"        File tempFile = tempFilePath();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:510
#, no-wrap
msgid ""
"        return Uni.createFrom()\n"
"                .completionStage(() -> s3.getObject(buildGetRequest(objectKey), AsyncResponseTransformer.toFile(tempFile)))\n"
"                .onItem()\n"
"                .apply(object -> Response.ok(tempFile)\n"
"                        .header(\"Content-Disposition\", \"attachment;filename=\" + objectKey)\n"
"                        .header(\"Content-Type\", object.contentType()).build());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:517
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public Uni<List<FileObject>> listFiles() {\n"
"        ListObjectsRequest listRequest = ListObjectsRequest.builder()\n"
"                .bucket(bucketName)\n"
"                .build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:521
#, no-wrap
msgid ""
"        return Uni.createFrom().completionStage(() -> s3.listObjects(listRequest))\n"
"                .onItem().transform(result -> toFileItems(result));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:528
#, no-wrap
msgid ""
"    private List<FileObject> toFileItems(ListObjectsResponse objects) {\n"
"        return objects.contents().stream()\n"
"                .sorted(Comparator.comparing(S3Object::lastModified).reversed())\n"
"                .map(FileObject::from).collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:531
msgid "You need the RESTEasy Mutiny support for asynchronous programming. Add the dependency to the `pom.xml`:"
msgstr "非同期プログラミングにはRESTEasy Mutinyのサポートが必要です。依存関係を `pom.xml` に追加します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:538
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:541
msgid "Or you can alternatively run this command in your project base directory:"
msgstr "あるいは、プロジェクトのベースディレクトリーでこのコマンドを実行することもできます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:545
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"resteasy-mutiny\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/amazon-s3.adoc:548
msgid "And add the Netty HTTP client dependency to the `pom.xml`:"
msgstr "そして、 `pom.xml` に Netty HTTPクライアントの依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/amazon-s3.adoc:555
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>netty-nio-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/amazon-s3.adoc:557
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
