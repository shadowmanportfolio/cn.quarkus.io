# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/rest-json.adoc:6
#, no-wrap
msgid "Quarkus - Writing JSON REST Services"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:11
msgid "JSON is now the _lingua franca_ between microservices."
msgstr "JSON は今やマイクロサービス間の _共通言語_ となっています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:13
msgid "In this guide, we see how you can get your REST services to consume and produce JSON payloads."
msgstr "このガイドでは、REST サービスが JSON ペイロードを消費および生成する方法を見ていきます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:15
msgid "there is another guide if you need a link:rest-client[REST client] (including support for JSON)."
msgstr "link:rest-client[REST クライアント] が必要な場合は、別のガイドがあります (JSON のサポートを含む)。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:16
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:19
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:21
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:22
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:23
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:24
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:25
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:28
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "このガイドで開発するアプリケーションは非常にシンプルです: ユーザーはフォームを使用してリストに要素を追加することができ、リストが更新されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:30
msgid "All the information between the browser and the server are formatted as JSON."
msgstr "ブラウザとサーバー間の情報はすべて JSON 形式になっています。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:31
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:35
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:37
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:39
msgid "The solution is located in the `rest-json-quickstart` {quickstarts-tree-url}/rest-json-quickstart[directory]."
msgstr "ソリューションは `rest-json-quickstart` {quickstarts-tree-url}/rest-json-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:40
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:43
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:53
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=rest-json-quickstart \\\n"
"    -DclassName=\"org.acme.rest.json.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy-jsonb\"\n"
"cd rest-json-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:57
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS and http://json-b.net/[JSON-B] extensions, and in particular adds the following dependency:"
msgstr "このコマンドは、RESTEasy/JAX-RSと link:http://json-b.net/[JSON-B] 拡張をインポートするMaven構造を生成し、特に以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:64
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jsonb</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:67
msgid "Quarkus also supports https://github.com/FasterXML/jackson[Jackson] so, if you prefer Jackson over JSON-B, you can create a project relying on the RESTEasy Jackson extension instead:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:77
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=rest-json-quickstart \\\n"
"    -DclassName=\"org.acme.rest.json.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy-jackson\"\n"
"cd rest-json-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:81
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS and https://github.com/FasterXML/jackson[Jackson] extensions, and in particular adds the following dependency:"
msgstr "このコマンドは、RESTEasy/JAX-RSと link:https://github.com/FasterXML/jackson[Jackson] エクステンションをインポートするMaven構造を生成し、特に以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:88
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:91
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr "ユーザーエクスペリエンスを向上させるために、Quarkusは3つのJackson link:https://github.com/FasterXML/jackson-modules-java8[Java 8モジュール] を登録しているので、手動で登録する必要はありません。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:92
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr "初めてのJSON RESTサービスの作成"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:95
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、果物のリストを管理するアプリケーションを作成します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:97
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "まず、以下のように `Fruit` Bean を作成してみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:101
#: upstream/_versions/1.7/guides/rest-json.adoc:124
#: upstream/_versions/1.7/guides/rest-json.adoc:307
#: upstream/_versions/1.7/guides/rest-json.adoc:330
#: upstream/_versions/1.7/guides/rest-json.adoc:460
#, no-wrap
msgid "package org.acme.rest.json;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:103
#, no-wrap
msgid "public class Fruit {\n"
msgstr "public class Fruit {\n"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:106
#: upstream/_versions/1.7/guides/rest-json.adoc:312
#, no-wrap
msgid ""
"    public String name;\n"
"    public String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:109
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""
"    public Fruit() {\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:115
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:118
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "派手なことは何もありません。注意すべき重要なことは、デフォルトのコンストラクタを持つことはJSONシリアライズレイヤーで必須であるということです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:120
msgid "Now, edit the `org.acme.rest.json.FruitResource` class as follows:"
msgstr "ここで、 `org.acme.rest.json.FruitResource` クラスを以下のように編集します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:128
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashMap;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:136
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.DELETE;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:141
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:143
#, no-wrap
msgid "    private Set<Fruit> fruits = Collections.newSetFromMap(Collections.synchronizedMap(new LinkedHashMap<>()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:148
#, no-wrap
msgid ""
"    public FruitResource() {\n"
"        fruits.add(new Fruit(\"Apple\", \"Winter fruit\"));\n"
"        fruits.add(new Fruit(\"Pineapple\", \"Tropical fruit\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:153
#, no-wrap
msgid ""
"    @GET\n"
"    public Set<Fruit> list() {\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:159
#, no-wrap
msgid ""
"    @POST\n"
"    public Set<Fruit> add(Fruit fruit) {\n"
"        fruits.add(fruit);\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:166
#, no-wrap
msgid ""
"    @DELETE\n"
"    public Set<Fruit> delete(Fruit fruit) {\n"
"        fruits.removeIf(existingFruit -> existingFruit.name.contentEquals(fruit.name));\n"
"        return fruits;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:169
msgid "The implementation is pretty straightforward and you just need to define your endpoints using the JAX-RS annotations."
msgstr "実装は非常に簡単で、JAX-RSのアノテーションを使ってエンドポイントを定義するだけです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:172
msgid "The `Fruit` objects will be automatically serialized/deserialized by http://json-b.net/[JSON-B] or https://github.com/FasterXML/jackson[Jackson], depending on the extension you chose when initializing the project."
msgstr "`Fruit` オブジェクトは、プロジェクトの初期化時に選択したエクステンションに応じて、 link:http://json-b.net/[JSON-B] または link:https://github.com/FasterXML/jackson[Jackson] によって自動的にシリアライズ/デシリアライズされます。"

#. type: delimited block =
#: upstream/_versions/1.7/guides/rest-json.adoc:178
msgid "While RESTEasy supports auto-negotiation, when using Quarkus, it is very important to define the `@Produces` and `@Consumes` annotations.  They are analyzed at build time and Quarkus restricts the number of JAX-RS providers included in the native executable to the minimum required by the application.  It allows to reduce the size of the native executable."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/rest-json.adoc:180
#, no-wrap
msgid "Configuring JSON support"
msgstr ""

#. type: Title ====
#: upstream/_versions/1.7/guides/rest-json.adoc:182
#, no-wrap
msgid "JSON-B"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:186
msgid "Quarkus makes it very easy to configure various JSON-B settings via CDI beans. The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jsonb.JsonbConfigCustomizer` inside of which any JSON-B configuration can be applied."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:188
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr "例えば、 `FooSerializer` という名前のカスタムシリアライザを `com.example.Foo` タイプで JSON-B で登録する必要がある場合、以下のような Bean を追加すれば十分です。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:195
#, no-wrap
msgid ""
"import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
"import javax.inject.Singleton;\n"
"import javax.json.bind.JsonbConfig;\n"
"import javax.json.bind.serializer.JsonbSerializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:198
#, no-wrap
msgid ""
"@Singleton\n"
"public class FooSerializerRegistrationCustomizer implements JsonbConfigCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:203
#, no-wrap
msgid ""
"    public void customize(JsonbConfig config) {\n"
"        config.withSerializers(new FooSerializer());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:208
msgid "A more advanced option would be to directly provide a bean of `javax.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `javax.json.bind.Jsonb` (with a `Singleton` scope).  If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `javax.json.bind.Jsonb`.  Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr "より高度なオプションとしては、 `javax.json.bind.JsonbConfig` ( `Dependent` スコープ付き)の Bean を直接提供するか、極端な場合には `javax.json.bind.Jsonb` ( `Singleton` スコープ付き)のタイプの Bean を提供することが考えられます。後者のアプローチを利用する場合は、 `javax.json.bind.Jsonb` を生成する CDI プロデューサに `io.quarkus.jsonb.JsonbConfigCustomizer` Bean をすべて手動で注入して適用することが非常に重要です。これを怠ると、様々なエクステンションによって提供される JSON-B 固有のカスタマイズが適用されなくなります。"

#. type: Title ====
#: upstream/_versions/1.7/guides/rest-json.adoc:209
#, no-wrap
msgid "Jackson"
msgstr "Jackson"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:212
msgid "As stated above, Quarkus provides the option of using https://github.com/FasterXML/jackson[Jackson] instead of JSON-B via the use of the `quarkus-resteasy-jackson` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:215
msgid "Following the same approach as described in the previous section, Jackson's `ObjectMapper` can be configured using a `io.quarkus.jackson.ObjectMapperCustomizer` bean.  An example where a custom module needs to be registered would like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:221
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:224
#, no-wrap
msgid ""
"@Singleton\n"
"public class RegisterCustomModuleCustomizer implements ObjectMapperCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:229
#, no-wrap
msgid ""
"    public void customize(ObjectMapper mapper) {\n"
"        mapper.registerModule(new CustomModule());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:234
msgid "Users can even provide their own `ObjectMapper` bean if they so choose.  If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.  Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr "ユーザーは、選択すれば自分の `ObjectMapper` Beanを提供することもできます。この場合、 `ObjectMapper` を生成する CDI プロデューサの中で、すべての `io.quarkus.jackson.ObjectMapperCustomizer` Bean を手動で注入して適用することが非常に重要です。これを怠ると、様々なエクステンションによって提供される Jackson 固有のカスタマイズが適用されなくなります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:235
#, no-wrap
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:240
msgid "Now let's add a simple web page to interact with our `FruitResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr "ここで、 `FruitResource` .Quarkusと対話するための簡単なウェブページを追加してみましょう。Quarkusは、 `META-INF/resources` ディレクトリーの下にある静的リソースを自動的に提供します。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] ファイルの内容を含む `fruits.html` ファイルを追加します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:242
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:244
msgid "start Quarkus with `./mvnw compile quarkus:dev`"
msgstr "`./mvnw compile quarkus:dev` で Quarkus を起動します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:245
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "ブラウザで `http://localhost:8080/fruits.html` を開きます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:246
msgid "add new fruits to the list via the form"
msgstr "フォームを使って新しいフルーツをリストに追加します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:247
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:250
msgid "You can build a native executable with the usual command `./mvnw package -Pnative`."
msgstr "ネイティブ実行可能ファイルは、通常のコマンド `./mvnw package -Pnative` でビルドできます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:252
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0-SNAPSHOT-runner`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:254
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:255
#, no-wrap
msgid "About serialization"
msgstr "シリアライゼーションについて"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:258
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr "JSONシリアライズライブラリは、Javaのリフレクションを使用してオブジェクトのプロパティーを取得してシリアライズします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:262
msgid "When using native executables with GraalVM, all classes that will be used with reflection need to be registered.  The good news is that Quarkus does that work for you most of the time.  So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr "GraalVMでネイティブ実行可能ファイルを使用する場合、リフレクションで使用されるすべてのクラスを登録する必要があります。良いニュースは、Quarkusがほとんどの場合、その作業を代行してくれるということです。これまでのところ、 `Fruit` でさえ、リフレクトを使用するためのクラスを登録しておらず、すべてが正常に動作しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:265
msgid "Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.  When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr "Quarkusは、RESTメソッドからシリアライズされた型を推論することができる場合に、何らかのマジックを実行します。以下のようなRESTメソッドがある場合、Quarkusは、 `Fruit` がシリアライズされると判断します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:273
#, no-wrap
msgid ""
"@GET\n"
"@Produces(\"application/json\")\n"
"public List<Fruit> list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:277
msgid "Quarkus does that for you automatically by analyzing the REST methods at build time and that's why we didn't need any reflection registration in the first part of this guide."
msgstr "Quarkusは、ビルド時にRESTメソッドを分析することで、自動的にそのような処理を行ってくれます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:280
msgid "Another common pattern in the JAX-RS world is to use the `Response` object.  `Response` comes with some nice perks:"
msgstr "JAX-RSの世界では、 `Response` オブジェクトを使用するのがもう一つの一般的なパターンです。 `Response` にはいくつかの素晴らしい特典があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:282
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr "メソッドで何が起こるかによって異なるエンティティータイプを返すことができます (例えば `Legume` や `Error` )。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:283
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr " `Response` の属性を設定することができます (エラーが発生した時にステータスを知ることができます)。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:285
msgid "Your REST method then looks like this:"
msgstr "RESTメソッドは次のようになります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:293
#, no-wrap
msgid ""
"@GET\n"
"@Produces(\"application/json\")\n"
"public Response list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:297
msgid "It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.  In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr "`Response` に含まれるタイプは情報がないため、Quarkusがビルド時に判断することはできません。この場合、Quarkusは必要なクラスを自動的に反映登録することができません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:299
msgid "This leads us to our next section."
msgstr "これが次のセクションにつながります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:300
#, no-wrap
msgid "Using Response"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:303
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr "`Fruit` クラスと同じモデルに従って、JSON としてシリアライズされる `Legume` クラスを作成してみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:309
#, no-wrap
msgid "public class Legume {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:315
#, no-wrap
msgid ""
"    public Legume() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:321
#, no-wrap
msgid ""
"    public Legume(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:324
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr "それでは、マメ科植物のリストを返すメソッドを一つだけ持つ `LegumeResource` REST サービスを作成してみましょう。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:326
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr "このメソッドは `Response` を返し、 `Legume` のリストではありません。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:334
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashSet;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:341
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:346
#, no-wrap
msgid ""
"@Path(\"/legumes\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class LegumeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:348
#, no-wrap
msgid "    private Set<Legume> legumes = Collections.synchronizedSet(new LinkedHashSet<>());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:353
#, no-wrap
msgid ""
"    public LegumeResource() {\n"
"        legumes.add(new Legume(\"Carrot\", \"Root vegetable, usually orange\"));\n"
"        legumes.add(new Legume(\"Zucchini\", \"Summer squash\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:359
#, no-wrap
msgid ""
"    @GET\n"
"    public Response list() {\n"
"        return Response.ok(legumes).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:364
msgid "Now let's add a simple web page to display our list of legumes.  In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr "ここで、マメ科植物のリストを表示するための簡単なウェブページを追加してみましょう。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] ファイルの内容を含む `legumes.html` ファイルを追加します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:366
msgid "Open a browser to http://localhost:8080/legumes.html and you will see our list of legumes."
msgstr "ブラウザを開いて http://localhost:8080/legumes.html にアクセスすると、マメ科植物のリストが表示されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:368
msgid "The interesting part starts when running the application as a native executable:"
msgstr "興味深い部分は、アプリケーションをネイティブ実行可能ファイルとして実行するときに始まります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:370
#: upstream/_versions/1.7/guides/rest-json.adoc:401
msgid "create the native executable with `./mvnw package -Pnative`."
msgstr "`./mvnw package -Pnative` でネイティブ実行可能ファイルを作成します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:371
#: upstream/_versions/1.7/guides/rest-json.adoc:402
msgid "execute it with `./target/rest-json-quickstart-1.0-SNAPSHOT-runner`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:372
#: upstream/_versions/1.7/guides/rest-json.adoc:403
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:374
msgid "No legumes there."
msgstr "そこには豆類はありません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:377
msgid "As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.  The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list so it does not serialize the fields' data."
msgstr "上記のように、Quarkusが `Legume` クラスを判断できなかったことが問題となっており、REST エンドポイントを解析して何らかの反映が必要となります。JSONシリアライズライブラリは、 `Legume` のフィールドのリストを取得しようとすると空のリストを取得するので、フィールドのデータをシリアライズしません。"

#. type: delimited block =
#: upstream/_versions/1.7/guides/rest-json.adoc:382
msgid "At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.  GraalVM will simply return an empty list of fields."
msgstr "現時点では、JSON-BやJacksonがクラスのフィールドのリストを取得しようとしたときに、そのクラスがリフレクションに登録されていない場合、例外はスローされません。GraalVMは単に空のフィールドのリストを返します。"

#. type: delimited block =
#: upstream/_versions/1.7/guides/rest-json.adoc:384
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr "うまくいけば、将来的にはこれが変化して、エラーがより明白になるでしょう。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:387
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr "`Legume` クラスに `@RegisterForReflection` アノテーションを追加することで、手動で `Legume` を リフレクション用に登録することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:390
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:395
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Legume {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:398
msgid "Let's do that and follow the same steps as before:"
msgstr "それを実行して、今までと同じ手順を踏んでみましょう。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:400
msgid "hit `Ctrl+C` to stop the application"
msgstr "`Ctrl+C` を叩いてアプリケーションを停止させる"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:405
msgid "This time, you can see our list of legumes."
msgstr "今回はマメ科の一覧が表示されました。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:407
#, no-wrap
msgid "Being reactive"
msgstr "リアクティブであること"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:411
msgid "You can return _reactive types_ to handle asynchronous processing.  Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr "非同期処理を処理するために _リアクティブ型_ を返すことができます。Quarkusでは、リアクティブで非同期なコードを書くために link:https://smallrye.io/smallrye-mutiny[Mutiny] の使用を推奨しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:413
msgid "To integrate Mutiny and RESTEasy, you need to add the `quarkus-resteasy-mutiny` dependency to your project:"
msgstr "Mutiny と RESTEasy を統合するには、 `quarkus-resteasy-mutiny` 依存関係をプロジェクトに追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:420
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:423
msgid "Then, your endpoint can return `Uni` or `Multi` instances:"
msgstr "そして、エンドポイントは `Uni` や `Multi` のインスタンスを返すことができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:432
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{name}\")\n"
"public Uni<Fruit> getOne(@PathParam String name) {\n"
"    return findByName(name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:437
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> getAll() {\n"
"    return findAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:441
msgid "Use `Uni` when you have a single result.  Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr "単一の結果がある場合は `Uni` を使用します。 `Multi` は、非同期的に放出される可能性のある複数の項目がある場合に使用します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:443
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr "`Uni` と `Response` を使用して、非同期 HTTP レスポンスを返すことができます: `Uni<Response>` ."

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:445
msgid "More details about Mutiny can be found in the link:getting-started-reactive#mutiny[Getting Started with Reactive guide]."
msgstr "Mutinyについての詳細は、 link:getting-started-reactive#mutiny[Reactiveの入門ガイド] に記載されています。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:447
#, no-wrap
msgid "HTTP filters and interceptors"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:453
msgid "Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter` implementations respectively. These filters are suitable for processing the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata. They also have the capability to abort the request processing, for instance when the user does not have the permissions to access the endpoint."
msgstr "HTTP リクエストとレスポンスの両方とも、それぞれ `ContainerRequestFilter` または `ContainerResponseFilter` の実装を提供することで、 インターセプトすることができます。これらのフィルタは、メッセージに関連付けられたメタデータを処理するのに適しています。HTTP ヘッダ、クエリパラメーター、メディアタイプ、その他のメタデータです。また、ユーザーがエンドポイントにアクセスする権限を持っていない場合など、リクエスト処理を中止する機能も持っています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:456
msgid "Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing `ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr "`ContainerRequestFilter` を使用して、サービスにロギング機能を追加してみましょう。 `ContainerRequestFilter` を実装して、 `@Provider` アノテーションをつけることで実現できます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:463
#, no-wrap
msgid ""
"import io.vertx.core.http.HttpServerRequest;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:469
#, no-wrap
msgid ""
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.UriInfo;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:472
#, no-wrap
msgid ""
"@Provider\n"
"public class LoggingFilter implements ContainerRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:474
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(LoggingFilter.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:477
#, no-wrap
msgid ""
"    @Context\n"
"    UriInfo info;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:480
#, no-wrap
msgid ""
"    @Context\n"
"    HttpServerRequest request;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:483
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ContainerRequestContext context) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:487
#, no-wrap
msgid ""
"        final String method = context.getMethod();\n"
"        final String path = info.getPath();\n"
"        final String address = request.remoteAddress().toString();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:491
#, no-wrap
msgid ""
"        LOG.infof(\"Request %s %s from IP %s\", method, path, address);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:494
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr "これで、RESTメソッドが呼び出されるたびに、リクエストがコンソールにログとして記録されるようになりました。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:501
#, no-wrap
msgid ""
"2019-06-05 12:44:26,526 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /legumes from IP 127.0.0.1\n"
"2019-06-05 12:49:19,623 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:50:44,019 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request POST /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:51:04,485 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 127.0.0.1\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:503
#, no-wrap
msgid "CORS filter"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:508
msgid "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served."
msgstr "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[クロスオリジンリソース共有] (CORS)は、ウェブページ上の制限されたリソースを、最初のリソースが提供されたドメイン以外の別のドメインから要求できるようにするメカニズムです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:511
msgid "Quarkus comes with a CORS filter. Read the link:http-reference#cors-filter[HTTP Reference Documentation] to learn how to use it."
msgstr "QuarkusにはCORSフィルターが付属しています。使用方法については、 link:http-reference#cors-filter[HTTPリファレンスドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:512
#, no-wrap
msgid "GZip Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:515
msgid "Quarkus comes with GZip support (even though it is not enabled by default). The following configuration knobs allow to configure GZip support."
msgstr "QuarkusにはGZipサポートが搭載されています(デフォルトでは有効になっていませんが)。以下の設定ノブを使用して、GZipサポートを設定できます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/rest-json.adoc:520
#, no-wrap
msgid ""
"quarkus.resteasy.gzip.enabled=true // <1>\n"
"quarkus.resteasy.gzip.max-input=10M // <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:523
msgid "Enable Gzip support."
msgstr "Gzipサポートを有効にします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:525
msgid "Configure the upper limit on deflated request body. This is useful to mitigate potential attacks by limiting their reach. The default value is `10M`.  This configuration option would recognize strings in this format (shown as a regular expression): `[0-9]+[KkMmGgTtPpEeZzYy]?`. If no suffix is given, assume bytes."
msgstr "デフレーションされたリクエストボディの上限を設定します。これは、リーチを制限することで潜在的な攻撃を緩和するのに便利です。既定値は `10M` です。この設定オプションは、以下の形式の文字列を認識します(正規表現で表示されます): `[0-9]+[KkMmGgTtPpEeZzYy]?` .サフィックスが指定されていない場合は、バイトとみなします。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:526
#, no-wrap
msgid "Servlet compatibility"
msgstr "サーブレットとの互換性"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:529
msgid "In Quarkus, RESTEasy can either run directly on top of the Vert.x HTTP server, or on top of Undertow if you have any servlet dependency."
msgstr "Quarkusでは、RESTEasyはVert.x HTTPサーバーの上で直接実行するか、サーブレットに依存している場合はUndertowの上で実行することができます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:537
#, no-wrap
msgid "What's Different from Jakarta EE Development"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/rest-json.adoc:539
#, no-wrap
msgid "No Need for `Application` Class"
msgstr "`Application` クラスは不要"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:542
msgid "Configuration via an application-supplied subclass of `Application` is supported, but not required."
msgstr "`Application` のアプリケーションが提供するサブクラスによる設定もサポートされていますが、必須ではありません。"

#. type: Title ===
#: upstream/_versions/1.7/guides/rest-json.adoc:543
#, no-wrap
msgid "Lifecycle of Resources"
msgstr "リソースのライフサイクル"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:547
msgid "In Quarkus all JAX-RS resources are treated as CDI beans.  It's possible to inject other beans via `@Inject`, bind interceptors using bindings such as `@Transactional`, define `@PostConstruct` callbacks, etc."
msgstr "Quarkusでは、すべてのJAX-RSリソースはCDI Bean として扱われます。 `@Inject` を介して他の Bean を注入したり、 `@Transactional` のようなバインディングを使用してインターセプターをバインドしたり、 `@PostConstruct` コールバックを定義したりすることが可能です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:553
msgid "If there is no scope annotation declared on the resource class then the scope is defaulted.  The default scope can be controlled through the `quarkus.resteasy.singleton-resources` property.  If set to `true` (default) then a *single instance* of a resource class is created to service all requests (as defined by `@javax.inject.Singleton`).  If set to `false` then a *new instance* of the resource class is created per each request.  An explicit CDI scope annotation (`@RequestScoped`, `@ApplicationScoped`, etc.) always overrides the default behavior and specifies the lifecycle of resource instances."
msgstr "リソースクラスでスコープアノテーションが宣言されていない場合は、スコープはデフォルトになります。デフォルトのスコープは `quarkus.resteasy.singleton-resources` プロパティーで制御できます。 `true` (デフォルト) に設定すると、( `@javax.inject.Singleton` で定義されているように) すべてのリクエストにサービスを提供するためのリソースクラスの *単一のインスタンス* が作成されます。 `false` に設定すると、各リクエストごとにリソースクラスの *新しい インスタンス* が作成されます。明示的な CDI スコープアノテーション ( `@RequestScoped` , `@ApplicationScoped` , など) は常にデフォルトの動作を上書きし、リソースインスタンスのライフサイクルを指定します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/rest-json.adoc:554
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:557
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr "Quarkusを使用したJSON RESTサービスの作成は、実績のあるよく知られたテクノロジーに依存しているため、簡単に行えます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:559
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr "いつものように、Quarkusは、アプリケーションをネイティブ実行可能ファイルとして実行する際に、水面下の作業をさらに簡略化しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/rest-json.adoc:560
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr "覚えておくべきことは一つだけあります。 `Response` を使用していて、Quarkus がシリアライズされているBeanを特定できない場合は、 `@RegisterForReflection` を使ってアノテーションを付ける必要があります。"
