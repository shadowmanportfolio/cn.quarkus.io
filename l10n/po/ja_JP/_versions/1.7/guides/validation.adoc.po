# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/validation.adoc:6
#, no-wrap
msgid "Quarkus - Validation with Hibernate Validator"
msgstr "Quarkus - Validation with Hibernate Validator"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:11
msgid "This guide covers how to use Hibernate Validator/Bean Validation for:"
msgstr "このガイドでは、以下の場合のHibernate Validator/Bean Validation の使用方法について説明します:"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:13
msgid "validating the input/output of your REST services;"
msgstr "REST サービスの入出力の検証"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:14
msgid "validating the parameters and return values of the methods of your business services."
msgstr "ビジネスサービスのメソッドのパラメーターと戻り値の検証"

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:15
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:18
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:20
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:21
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:22
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:23
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:24
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:29
msgid "The application built in this guide is quite simple. The user fills a form on a web page.  The web page sends the form content to the `BookResource` as JSON (using Ajax). The `BookResource` validates the user input and returns the _result_ as JSON."
msgstr "このガイドで構築されたアプリケーションは非常にシンプルです。ユーザーはウェブページ上でフォームを入力します。Web ページはフォームの内容を JSON として `BookResource` に送信します (Ajax を使用)。 `BookResource` はユーザーの入力を検証し、 _結果_ をJSON として返します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:31
msgid "image:validation-guide-architecture.png[alt=Architecture]"
msgstr "image:validation-guide-architecture.png[alt=Architecture]"

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:32
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:36
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:38
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:40
msgid "The solution is located in the `validation-quickstart` {quickstarts-tree-url}/validation-quickstart[directory]."
msgstr "ソリューションは `validation-quickstart` {quickstarts-tree-url}/validation-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:41
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:44
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:54
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=validation-quickstart \\\n"
"    -DclassName=\"org.acme.validation.BookResource\" \\\n"
"    -Dpath=\"/books\" \\\n"
"    -Dextensions=\"resteasy-jsonb, hibernate-validator\"\n"
"cd validation-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:57
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS, JSON-B and Hibernate Validator/Bean Validation extensions."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:60
msgid "If you already have your Quarkus project configured, you can add the `hibernate-validator` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `hibernate-validator` エクステンションを追加することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:64
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"hibernate-validator\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:67
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:74
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-validator</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:76
#, no-wrap
msgid "Accessing the Validator"
msgstr "バリデータへのアクセス"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:79
msgid "Edit the `org.acme.validation.BookResource` class, and inject the `Validator` object as follows:"
msgstr "`org.acme.validation.BookResource` クラスを編集し、以下のように `Validator` オブジェクトを注入します:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:84
#, no-wrap
msgid ""
"@Inject\n"
"Validator validator;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:87
msgid "The `Validator` allows checking constraints on a specific object."
msgstr "`Validator` では、特定のオブジェクトに対する制約をチェックすることができます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:88
#, no-wrap
msgid "Constraints"
msgstr "制約"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:92
msgid "In this application, we are going to test an elementary object, but we support complicated constraints and can validate graphs of objects.  Create the `org.acme.validation.Book` class with the following content:"
msgstr "今回のアプリケーションでは、基本のオブジェクトをテストすることになりますが、複雑な制約にも対応しており、オブジェクトのグラフを検証することができます。以下の内容で `org.acme.validation.Book` クラスを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:96
#: upstream/_versions/1.7/guides/validation.adoc:215
#, no-wrap
msgid "package org.acme.validation;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:99
#, no-wrap
msgid ""
"import javax.validation.constraints.NotBlank;\n"
"import javax.validation.constraints.Min;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:101
#, no-wrap
msgid "public class Book {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:104
#, no-wrap
msgid ""
"    @NotBlank(message=\"Title may not be blank\")\n"
"    public String title;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:107
#, no-wrap
msgid ""
"    @NotBlank(message=\"Author may not be blank\")\n"
"    public String author;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:111
#, no-wrap
msgid ""
"    @Min(message=\"Author has been very lazy\", value=1)\n"
"    public double pages;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:115
msgid "Constraints are added on fields, and when an object is validated, the values are checked.  The getter and setter methods are also used for JSON mapping."
msgstr "フィールドに制約を加え、オブジェクトが検証されると値がチェックされます。ゲッターメソッドとセッターメソッドはJSONマッピングにも使われています。"

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:116
#, no-wrap
msgid "JSON mapping and validation"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:120
msgid "Back to the `BookResource` class.  Add the following method:"
msgstr "`BookResource` クラスに戻り、以下のメソッドを追加します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:135
#, no-wrap
msgid ""
"@Path(\"/manual-validation\")\n"
"@POST\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public Result tryMeManualValidation(Book book) {\n"
"    Set<ConstraintViolation<Book>> violations = validator.validate(book);\n"
"    if (violations.isEmpty()) {\n"
"        return new Result(\"Book is valid! It was validated by manual validation.\");\n"
"    } else {\n"
"        return new Result(violations);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:138
msgid "Yes it does not compile, `Result` is missing, but we will add it very soon."
msgstr "はい、これはコンパイル出来ません。 `Result` がありませんが、私たちはすぐに追加します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:140
msgid "The method parameter (`book`) is created from the JSON payload automatically."
msgstr "メソッドパラメーター( `book` )は、JSONペイロードから自動的に作成されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:145
msgid "The method uses the `Validator` to check the payload.  It returns a set of violations.  If this set is empty, it means the object is valid.  In case of failures, the messages are concatenated and sent back to the browser."
msgstr "このメソッドは `Validator` を使用してペイロードをチェックします。これは違反のセットを返します。このセットが空の場合は、オブジェクトが有効であることを意味します。失敗した場合は、メッセージを連結してブラウザに送り返します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:147
msgid "Let's now create the `Result` class as an inner class:"
msgstr "それでは、 `Result` クラスをインナークラスとして作成してみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:151
#, no-wrap
msgid "public static class Result {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:156
#, no-wrap
msgid ""
"    Result(String message) {\n"
"        this.success = true;\n"
"        this.message = message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:163
#, no-wrap
msgid ""
"    Result(Set<? extends ConstraintViolation<?>> violations) {\n"
"        this.success = false;\n"
"        this.message = violations.stream()\n"
"             .map(cv -> cv.getMessage())\n"
"             .collect(Collectors.joining(\", \"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:166
#, no-wrap
msgid ""
"    private String message;\n"
"    private boolean success;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:170
#, no-wrap
msgid ""
"    public String getMessage() {\n"
"        return message;\n"
"    }\n"
msgstr ""
"    public String getMessage() {\n"
"        return message;\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:174
#, no-wrap
msgid ""
"    public boolean isSuccess() {\n"
"        return success;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:176
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:180
msgid "The class is very simple and only contains 2 fields and the associated getters and setters.  Because we indicate that we produce JSON, the mapping to JSON is made automatically."
msgstr "このクラスは非常にシンプルで、2つのフィールドとそれに関連するゲッターとセッターだけが含まれています。JSONを生成することを示しているので、JSONへのマッピングは自動的に行われます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:181
#, no-wrap
msgid "REST end point validation"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:187
msgid "While using the `Validator` manually might be useful for some advanced usage, if you simply want to validate the parameters or the return value or your REST end point, you can annotate it directly, either with constraints (`@NotNull`, `@Digits`...)  or with `@Valid` (which will cascade the validation to the bean)."
msgstr "`Validator` を手動で使用することは、高度な使用法には便利かもしれませんが、単にパラメーターや戻り値、RESTのエンドポイントを検証したい場合は、制約( `@NotNull`, `@Digits`...)や `@Valid` (Beanに検証をカスケードします)を使用して直接アノテーションすることができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:189
msgid "Let's create an end point validating the `Book` provided in the request:"
msgstr "リクエストで提供された `Book` を検証するエンドポイントを作成してみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:199
#, no-wrap
msgid ""
"@Path(\"/end-point-method-validation\")\n"
"@POST\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public Result tryMeEndPointMethodValidation(@Valid Book book) {\n"
"    return new Result(\"Book is valid! It was validated by end point method validation.\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:202
msgid "As you can see, we don't have to manually validate the provided `Book` anymore as it is automatically validated."
msgstr "ご覧のように、提供された `Book` は自動的に検証されるので、もう手動で検証する必要はありません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:205
msgid "If a validation error is triggered, a violation report is generated and serialized as JSON as our end point produces a JSON output.  It can be extracted and manipulated to display a proper error message."
msgstr "検証エラーが発生した場合、違反レポートが生成され、そしてエンドポイントがJSON出力を生成することによってJSONとしてシリアライズされます。これを抽出して操作することで、適切なエラーメッセージを表示することができます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:206
#, no-wrap
msgid "Service method validation"
msgstr "サービスメソッドの検証"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:209
msgid "It might not always be handy to have the validation rules declared at the end point level as it could duplicate some business validation."
msgstr "バリデーションルールをエンドポイントレベルで宣言するのは、必ずしも便利とは限りません。ビジネスバリデーションと重複する可能性があるためです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:211
msgid "The best option is then to annotate a method of your business service with your constraints (or in our particular case with `@Valid`):"
msgstr "最良の選択肢は、ビジネスサービスのメソッドに制約をアノテーションすることです(私たちの場合は `@Valid` ):"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:218
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.validation.Valid;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:221
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class BookService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:226
#, no-wrap
msgid ""
"    public void validateBook(@Valid Book book) {\n"
"        // your business logic here\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:229
msgid "Calling the service in your rest end point triggers the `Book` validation automatically:"
msgstr "RESTエンドポイントでサービスを呼び出すと、自動的に `Book` の検証が行われます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:233
#, no-wrap
msgid "@Inject BookService bookService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:246
#, no-wrap
msgid ""
"@Path(\"/service-method-validation\")\n"
"@POST\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public Result tryMeServiceMethodValidation(Book book) {\n"
"    try {\n"
"        bookService.validateBook(book);\n"
"        return new Result(\"Book is valid! It was validated by service method validation.\");\n"
"    } catch (ConstraintViolationException e) {\n"
"        return new Result(e.getConstraintViolations());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:250
msgid "Note that, if you want to push the validation errors to the frontend, you have to catch the exception and push the information yourselves as they will not be automatically pushed to the JSON output."
msgstr "検証エラーをフロントエンドにプッシュしたい場合は、例外をキャッチして自分で情報をプッシュしなければなりません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:252
msgid "Keep in mind that you usually don't want to expose to the public the internals of your services"
msgstr "あなたは通常、あなたのサービスの内部を公開したくないことを覚えておいてください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:253
msgid "and especially not the validated value contained in the violation object."
msgstr "特に違反オブジェクトに含まれる検証された値は公開したくありません。"

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:254
#, no-wrap
msgid "A frontend"
msgstr "フロントエンド"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:259
msgid "Now let's add the simple web page to interact with our `BookResource`.  Quarkus automatically serves static resources contained in the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, replace the `index.html` file with the content from this {quickstarts-blob-url}/validation-quickstart/src/main/resources/META-INF/resources/index.html[index.html] file in it."
msgstr "それでは、 `BookResource`.Quarkusと対話するためのシンプルなウェブページを追加してみましょう。Quarkusは、 `META-INF/resources` ディレクトリーに含まれる静的リソースを自動的に提供します。 `src/main/resources/META-INF/resources` ディレクトリーで、 `index.html` ファイルをこの {quickstarts-blob-url}/validation-quickstart/src/main/resources/META-INF/resources/index.html[index.html] ファイルの内容で置き換えます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:260
#, no-wrap
msgid "Run the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:263
msgid "Now, let's see our application in action. Run it with:"
msgstr "では、実際にアプリケーションを見てみましょう。以下のように実行してみてください:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:267
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr "./mvnw compile quarkus:dev\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:270
msgid "Then, open your browser to http://localhost:8080/:"
msgstr "そして、ブラウザで http://localhost:8080/ を開いてください:"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:272
msgid "Enter the book details (valid or invalid)"
msgstr "書籍の詳細を入力してください(有効または無効)"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:273
msgid "Click on the _Try me..._ buttons to check if your data is valid using one of the methods we presented above."
msgstr "_Try me..._ ボタンをクリックして、上記で紹介した方法のいずれかを使用してデータが有効かどうかを確認してください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:275
msgid "image:validation-guide-screenshot.png[alt=Application]"
msgstr "image:validation-guide-screenshot.png[alt=Application]"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:278
msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.  You can also build the native executable using `./mvnw package -Pnative`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:279
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: Title ===
#: upstream/_versions/1.7/guides/validation.adoc:281
#, no-wrap
msgid "Hibernate Validator extension and CDI"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:284
msgid "The Hibernate Validator extension is tightly integrated with CDI."
msgstr "Hibernate ValidatorエクステンションはCDIと緊密に統合されています。"

#. type: Title ====
#: upstream/_versions/1.7/guides/validation.adoc:285
#, no-wrap
msgid "Configuring the ValidatorFactory"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:288
msgid "Sometimes, you might need to configure the behavior of the `ValidatorFactory`, for instance to use a specific `ParameterNameProvider`."
msgstr "時には、 `ValidatorFactory` の動作を設定する必要があるかもしれません。例えば、特定の `ParameterNameProvider` を使用するためなどです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:291
msgid "While the `ValidatorFactory` is instantiated by Quarkus itself, you can very easily tweak it by declaring replacement beans that will be injected in the configuration."
msgstr "`ValidatorFactory` は、Quarkus 自体によってインスタンス化されていますが、設定に注入される代わりのBeanを宣言することで、非常に簡単に微調整することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:293
msgid "If you create a bean of the following types in your application, it will automatically be injected into the `ValidatorFactory` configuration:"
msgstr "アプリケーションで以下のタイプのBeanを作成すると、自動的に `ValidatorFactory` の設定に注入されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:295
msgid "`javax.validation.ClockProvider`"
msgstr "`javax.validation.ClockProvider`"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:296
msgid "`javax.validation.ConstraintValidator`"
msgstr "`javax.validation.ConstraintValidator`"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:297
msgid "`javax.validation.ConstraintValidatorFactory`"
msgstr "`javax.validation.ConstraintValidatorFactory`"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:298
msgid "`javax.validation.MessageInterpolator`"
msgstr "`javax.validation.MessageInterpolator`"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:299
msgid "`javax.validation.ParameterNameProvider`"
msgstr "`javax.validation.ParameterNameProvider`"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:300
msgid "`javax.validation.TraversableResolver`"
msgstr "`javax.validation.TraversableResolver`"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:301
msgid "`org.hibernate.validator.spi.properties.GetterPropertySelectionStrategy`"
msgstr "`org.hibernate.validator.spi.properties.GetterPropertySelectionStrategy`"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:302
msgid "`org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory`"
msgstr "`org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory`"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:304
msgid "You don't have to wire anything."
msgstr "何も設定しなくても大丈夫です。"

#. type: delimited block =
#: upstream/_versions/1.7/guides/validation.adoc:308
msgid "Obviously, for each listed type, you can declare only one bean."
msgstr "勿論、リストされた各型に対して、宣言することができるのは1つのBeanだけです。"

#. type: delimited block =
#: upstream/_versions/1.7/guides/validation.adoc:310
msgid "These beans should be declared as `@ApplicationScoped`."
msgstr "これらのBeanは、 `@ApplicationScoped` として宣言する必要があります。"

#. type: Title ====
#: upstream/_versions/1.7/guides/validation.adoc:312
#, no-wrap
msgid "Constraint validators as beans"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:315
msgid "You can declare your constraint validators as CDI beans:"
msgstr "制約バリデータをCDI Beanとして宣言することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:320
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyConstraintValidator implements ConstraintValidator<MyConstraint, String> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:323
#, no-wrap
msgid ""
"    @Inject\n"
"    MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:329
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isValid(String value, ConstraintValidatorContext context) {\n"
"        if (value == null) {\n"
"            return true;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:333
#, no-wrap
msgid ""
"        return service.validate(value);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:337
msgid "When initializing a constraint validator of a given type, Quarkus will check if a bean of this type is available and, if so, it will use it instead of instantiating one."
msgstr "指定された型の制約バリデータを初期化する際、Quarkusはこの型のBeanが利用可能かどうかをチェックし、利用可能な場合はインスタンスを作成する代わりにそれを使用します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:339
msgid "Thus, as demonstrated in our example, you can fully use injection in your constraint validator beans."
msgstr "このように、例で示したように、制約バリデータBeanでインジェクションを完全に使用することができます。"

#. type: delimited block =
#: upstream/_versions/1.7/guides/validation.adoc:343
msgid "Except in very specific situations, it is recommended to make the said beans `@ApplicationScoped`."
msgstr "非常に特定の状況を除いて、このBeanは `@ApplicationScoped` として作ることをお勧めします."

#. type: Title ===
#: upstream/_versions/1.7/guides/validation.adoc:345
#, no-wrap
msgid "Validation and localization"
msgstr "バリデーションとローカリゼーション"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:348
msgid "By default, constraint violation messages will be returned in the build system locale."
msgstr "デフォルトでは、制約違反のメッセージはビルドシステムのロケールで返されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:350
msgid "You can configure this behavior by adding the following configuration in your `application.properties`:"
msgstr "この動作は、以下の設定を `application.properties` に追加することで変更することが出来ます:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:355
#, no-wrap
msgid ""
"# The default locale to use\n"
"quarkus.default-locale=fr-FR\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/validation.adoc:359
msgid "If you are using RESTEasy, in the context of a JAX-RS endpoint, Hibernate Validator will automatically resolve the optimal locale to use from the `Accept-Language` HTTP header, provided the supported locales have been properly specified in the `application.properties`:"
msgstr "RESTEasyを使用している場合、JAX-RSエンドポイントのコンテキストでは、 サポートされるロケールが `application.properties` で適切に指定されている場合、Hibernate Validatorが使用する最適なロケールを `Accept-Language` HTTPヘッダから自動的に解決します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/validation.adoc:364
#, no-wrap
msgid ""
"# The list of all the supported locales\n"
"quarkus.locales=en-US,es-ES,fr-FR\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/validation.adoc:367
#, no-wrap
msgid "Hibernate Validator Configuration Reference"
msgstr ""
