# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-27 20:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/cassandra.adoc:6
#, no-wrap
msgid "Quarkus - Using the Cassandra Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:13
msgid "Apache Cassandra® is a free and open-source, distributed, wide column store, NoSQL database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure."
msgstr "Apache Cassandra®は、フリーでオープンソースの分散型ワイドカラムストアのNoSQLデータベース管理システムで、多くのコモディティサーバーにまたがる大量のデータを処理するように設計されており、単一障害点のない高可用性を提供します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:15
msgid "In this guide, we will see how you can get your REST services to use a Cassandra database."
msgstr "このガイドでは、RESTサービスでCassandraデータベースを使用する方法を見ていきます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:21
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:23
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:24
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:25
msgid "GraalVM installed with `GRAALVM_HOME` configured appropriately if you want to use the native mode."
msgstr "ネイティブモードを使用したい場合は、 `GRAALVM_HOME` を適切に設定して GraalVM をインストールしてください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:26
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:27
msgid "Cassandra or Docker installed"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:28
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:32
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form, and the items list is updated."
msgstr "このガイドで構築されたアプリケーションは非常にシンプルです: ユーザーはフォームを使用してリストに要素を追加することができ、アイテムリストが更新されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:34
msgid "All the information between the browser and the server is formatted as JSON."
msgstr "ブラウザとサーバー間の情報はすべてJSON形式になっています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:36
msgid "The elements are stored in the Cassandra database."
msgstr "要素は Cassandra データベースに格納されています。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:37
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:46
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:50
msgid "First, create a new Maven project and copy the `pom.xml` file that is present in the `quickstart` directory."
msgstr "まず、新しいMavenプロジェクトを作成し、 `quickstart` ディレクトリーに存在する `pom.xml` ファイルをコピーします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:53
msgid "The `pom.xml` is importing the RESTEasy/JAX-RS, JSON-B, Context Propagation and Cassandra Client extensions."
msgstr "`pom.xml` は、RESTEasy/JAX-RS、JSON-B、Context Propagation、Cassandraクライアントエクステンションをインポートしています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:57
msgid "We will be building a REST application using the link:https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper[DataStax Object Mapper] to simplify the Data Access Layer code."
msgstr "Data Access Layerのコードを簡略化するために、 link:https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper[DataStax Object Mapper] を使ってRESTアプリケーションを構築します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:59
msgid "The most important part of the `pom.xml` is adding the `cassandra-quarkus` extension:"
msgstr "`pom.xml` で最も重要なのは、 `cassandra-quarkus` のエクステンションを追加することです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:67
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.datastax.oss.quarkus</groupId>\n"
"    <artifactId>cassandra-quarkus-client</artifactId>\n"
"    <version>${quarkus.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:69
#, no-wrap
msgid "Creating JSON REST service"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:72
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、果物のリストを管理するアプリケーションを作成します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:74
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "まず、以下のように `Fruit` Bean を作成してみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:79
#, no-wrap
msgid ""
"@Entity\n"
"public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:83
#, no-wrap
msgid ""
"    @PartitionKey private String storeId;\n"
"    @ClusteringColumn private String name;\n"
"    private String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:85
#, no-wrap
msgid "    public Fruit() {}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:91
#, no-wrap
msgid ""
"    public Fruit(String storeId, String name, String description) {\n"
"      this.storeId = storeId;\n"
"      this.name = name;\n"
"      this.description = description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:94
#, no-wrap
msgid ""
"    // getters, setters, hashCode and equals omitted for brevity\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:100
msgid "We are using DataStax Java driver Object Mapper, which is why this class is annotated with an `@Entity`. Also, the `storeId` field represents a Cassandra partition key and `name` represents a clustering column, and so we are using the corresponding annotations from the Object Mapper library.  It will allow the Mapper to generate proper CQL queries underneath."
msgstr "DataStax JavaドライバーのObject Mapperを使用しているので、このクラスには `@Entity` がアノテーションされています。また、 `storeId` フィールドは Cassandra パーティション・キーを表し、 `name` はクラスタリング・カラムを表しているので、Object Mapper ライブラリから対応するアノテーションを使用しています。これにより、Mapperはその下に適切なCQLクエリを生成することができるようになります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:102
msgid "Entity classes are required to have a default no-args constructor."
msgstr "エンティティクラスには、デフォルトの引数なしのコンストラクタが必要です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:104
msgid "To leverage the Mapper logic in this app we need to create a DAO:"
msgstr "このアプリでMapperロジックを活用するには、DAOを作成する必要があります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:111
#, no-wrap
msgid ""
"@Dao\n"
"public interface FruitDao {\n"
"  @Update\n"
"  void update(Fruit fruit);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:115
#, no-wrap
msgid ""
"  @Select\n"
"  PagingIterable<Fruit> findById(String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:118
msgid "This class exposes operations that will be used in the REST service."
msgstr "このクラスは、RESTサービスで使用される操作を公開します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:120
msgid "Finally, the Mapper itself:"
msgstr "最後に、マッパー本体です。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:128
#, no-wrap
msgid ""
"@Mapper\n"
"public interface FruitMapper {\n"
"  @DaoFactory\n"
"  FruitDao fruitDao();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:133
msgid "The mapper is responsible for constructing instances of `FruitDao`. In the example above, the `FruitDao` instance will be connected to the same keyspace as the underlying session. More on that below."
msgstr "マッパーは， `FruitDao` のインスタンスを構築する役割を果たします．上の例では、 `FruitDao` のインスタンスは、基礎となるセッションと同じキースペースに接続されます。詳細は後述します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:137
msgid "It is also possible to create DAO instances for different keyspaces. To learn how, see link:https://docs.datastax.com/en/developer/java-driver/4.7/manual/mapper/mapper/#dao-parameterization[DAO parameterization] in the driver docs."
msgstr "異なるキースペース用の DAO インスタンスを作成することも可能です。方法については、ドライバードキュメントの link:https://docs.datastax.com/en/developer/java-driver/4.7/manual/mapper/mapper/#dao-parameterization[DAO パラメーター化] を参照してください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:141
msgid "Next, we need a component to create our DAO instances: `FruitDaoProducer`. Indeed, Mapper and Dao instances are stateful objects, and should be created only once, as application-scoped singletons.  This component will do exactly that, leveraging Quarkus Dependency Injection container:"
msgstr "次に，DAOインスタンスを生成するためのコンポーネント `FruitDaoProducer` が必要です。実際、マッパーとDAOのインスタンスはステートフルなオブジェクトであり、アプリケーションスコープのシングルトンとして、一度だけ作成されるべきです。  このコンポーネントは、QuarkusのDependency Injectionコンテナを利用して、まさにそれを行います。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:150
#, no-wrap
msgid ""
"import com.datastax.oss.driver.api.core.CqlIdentifier;\n"
"import com.datastax.oss.quarkus.runtime.api.config.CassandraClientConfig;\n"
"import com.datastax.oss.quarkus.runtime.api.session.QuarkusCqlSession;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Produces;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:152
#, no-wrap
msgid "public class FruitDaoProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:155
#, no-wrap
msgid ""
"  private final FruitDao fruitDao;\n"
"  private final FruitDaoReactive fruitDaoReactive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:164
#, no-wrap
msgid ""
"  @Inject\n"
"  public FruitDaoProducer(QuarkusCqlSession session) {\n"
"    // create a mapper\n"
"    FruitMapper mapper = new FruitMapperBuilder(session).build();\n"
"    // instantiate our Daos\n"
"    fruitDao = mapper.fruitDao();\n"
"    fruitDaoReactive = mapper.fruitDaoReactive();\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:170
#, no-wrap
msgid ""
"  @Produces\n"
"  @ApplicationScoped\n"
"  FruitDao produceFruitDao() {\n"
"    return fruitDao;\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:177
#, no-wrap
msgid ""
"  @Produces\n"
"  @ApplicationScoped\n"
"  FruitDaoReactive produceFruitDaoReactive() {\n"
"    return fruitDaoReactive;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:181
msgid "Note how the `QuarkusCqlSession` instance is injected automatically by the cassandra-quarkus extension in the `FruitDaoProducer` constructor."
msgstr "`QuarkusCqlSession` のインスタンスが `FruitDaoProducer` コンストラクタの cassandra-quarkus エクステンションによって自動的に注入されていることに注意してください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:184
msgid "Now create a `FruitService` that will be the business layer of our application and store/load the fruits from the Cassandra database."
msgstr "ここで、アプリケーションのビジネス層となる `FruitService` を作成し、Cassandraデータベースから果物をセーブ/ロードします。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:189
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:191
#, no-wrap
msgid "  private final FruitDao dao;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:196
#, no-wrap
msgid ""
"  @Inject\n"
"  public FruitService(FruitDao dao) {\n"
"    this.dao = dao;\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:200
#, no-wrap
msgid ""
"  public void save(Fruit fruit) {\n"
"    dao.update(fruit);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:205
#, no-wrap
msgid ""
"  public List<Fruit> get(String id) {\n"
"    return dao.findById(id).all();\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:209
msgid "Note how the service receives a `FruitDao` instance in the constructor. This DAO instance is provided by `FruitDaoProducer` and injected automatically."
msgstr "コンストラクタで，サービスが `FruitDao` インスタンスを受け取っていることに注目してください．この DAO インスタンスは `FruitDaoProducer` によって提供され、自動的に注入されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:211
msgid "The last missing piece is the REST API that will expose GET and POST methods:"
msgstr "最後に必要なのは、GETとPOSTのメソッドを公開するREST APIです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:218
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:220
#, no-wrap
msgid "  private static final String STORE_NAME = \"acme\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:222
#, no-wrap
msgid "  @Inject FruitService fruitService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:229
#, no-wrap
msgid ""
"  @GET\n"
"  public List<FruitDto> list() {\n"
"    return fruitService.get(STORE_NAME).stream()\n"
"        .map(fruit -> new FruitDto(fruit.getName(), fruit.getDescription()))\n"
"        .collect(Collectors.toList());\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:234
#, no-wrap
msgid ""
"  @POST\n"
"  public void add(FruitDto fruit) {\n"
"    fruitService.save(covertFromDto(fruit));\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:239
#: upstream/_versions/1.7/guides/cassandra.adoc:521
#, no-wrap
msgid ""
"  private Fruit covertFromDto(FruitDto fruitDto) {\n"
"    return new Fruit(fruitDto.getName(), fruitDto.getDescription(), STORE_NAME);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:245
msgid "The `list` and `add` operations are executed for the `storeId` \"acme\". This is the partition key of our data model. We can easily retrieve all rows from cassandra using that partition key.  They will be sorted by the clustering column. `FruitResource` is using `FruitService` which encapsulates the data access logic."
msgstr "`list` と `add` の操作は `storeId` の \"acme \" に対して実行されます。これは私たちのデータモデルのパーティション・キーです。このパーティション・キーを使って、Cassandraからすべての行を簡単に取り出すことができます。  それらはクラスタリングカラムでソートされます。 `FruitResource` はデータアクセスロジックをカプセル化した `FruitService` を使用しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:251
msgid "When creating the REST API we should not share the same entity object between REST API and data access layers. They should not be coupled to allow the API to evolve independently of the storage layer. This is the reason why the API is using a `FruitDto` class. This class will be used by Quarkus to convert JSON to java objects for client requests and java objects to JSON for the responses. The translation is done by quarkus-resteasy extension."
msgstr "REST APIを作成する際には、REST APIとデータアクセス層の間で同じエンティティーオブジェクトを共有すべきではありません。それらは、APIがストレージ層から独立して進化できるように結合されるべきではありません。これが、APIが `FruitDto` クラスを使用している理由です。このクラスは、Quarkusによって、クライアントのリクエストに対してはJSONをjavaオブジェクトに、レスポンスに対してはjavaオブジェクトをJSONに変換するために使用されます。変換はquarkus-resteasyエクステンションによって行われます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:255
#, no-wrap
msgid "public class FruitDto {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:258
#, no-wrap
msgid ""
"  private String name;\n"
"  private String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:260
#, no-wrap
msgid "  public FruitDto() {}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:267
#, no-wrap
msgid ""
"  public FruitDto(String name, String description) {\n"
"    this.name = name;\n"
"    this.description = description;\n"
"  }\n"
"  // getters and setters omitted for brevity\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:271
msgid "DTO classes used by the JSON serialization layer are required to have a default no-arg constructor."
msgstr "JSONのシリアライゼーションレイヤーで使用されるDTOクラスは、デフォルトの引数なしのコンストラクタが必要です。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:272
#, no-wrap
msgid "Configuring the Cassandra database"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/cassandra.adoc:274
#, no-wrap
msgid "Connecting to Apache Cassandra or DataStax Enterprise (DSE)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:278
msgid "The main properties to configure are: `contact-points`, to access the Cassandra database, `local-datacenter`, which is required by the driver, and – optionally – the keyspace to bind to."
msgstr "構成する主なプロパティーは次のとおりです。 Cassandraデータベースにアクセスするための `contact-points` 、ドライバーによって必要とされる `local-datacenter` そしてオプションでバインド先のキースペースです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:280
msgid "A sample configuration should look like this:"
msgstr "設定のサンプルは以下のようになります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:286
#, no-wrap
msgid ""
"quarkus.cassandra.contact-points={cassandra_ip}:9042\n"
"quarkus.cassandra.local-datacenter={dc_name}\n"
"quarkus.cassandra.keyspace={keyspace}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:290
msgid "In this example, we are using a single instance running on localhost, and the keyspace containing our data is `k1`:"
msgstr "この例では、localhost上で動作する単一のインスタンスを使用しており、データを含むキースペースは `k1` となっています。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:296
#, no-wrap
msgid ""
"quarkus.cassandra.contact-points=127.0.0.1:9042\n"
"quarkus.cassandra.local-datacenter=datacenter1\n"
"quarkus.cassandra.keyspace=k1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:300
msgid "If your cluster requires plain text authentication, you can also provide two more settings: `username` and `password`."
msgstr "クラスタがプレーンテキスト認証を必要とする場合は、さらに2つの設定を行うことができます。 `username` と `password` です。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:305
#, no-wrap
msgid ""
"quarkus.cassandra.auth.username=john\n"
"quarkus.cassandra.auth.password=s3cr3t\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/cassandra.adoc:307
#, no-wrap
msgid "Connecting to a cloud DataStax Astra database"
msgstr "クラウドDataStax Astraデータベースへの接続"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:312
msgid "When connecting to Astra, instead of providing a contact point and a datacenter, you should provide `secure-connect-bundle`, which should point to a valid path to an Astra secure connect bundle, as well as `username` and`password`, since authentication is always required on Astra clusters."
msgstr "Astra に接続する際には、コンタクトポイントとデータセンターを提供する代わりに、`secure-connect-bundle` を提供する必要があります。これは、Astra のセキュアな接続バンドルへの有効なパスを指すとともに、Astra クラスタでは常に認証が必要となるため、 `username` と `password` も提供する必要があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:314
msgid "A sample configuration for DataStax Astra should look like this:"
msgstr "DataStax Astraのサンプル構成は次のようになります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:321
#, no-wrap
msgid ""
"quarkus.cassandra.cloud.secure-connect-bundle=/path/to/secure-connect-bundle.zip\n"
"quarkus.cassandra.auth.username=john\n"
"quarkus.cassandra.auth.password=s3cr3t\n"
"quarkus.cassandra.keyspace=k1\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/cassandra.adoc:323
#, no-wrap
msgid "Advanced driver configuration"
msgstr "高度なドライバー設定"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:330
msgid "You can configure other Java driver settings using `application.conf` or `application.json` files.  They need to be located in the classpath of your application.  All settings will be passed automatically to the underlying driver configuration mechanism.  Settings defined in `application.properties` with the `quarkus.cassandra` prefix will have priority over settings defined in `application.conf` or `application.json`."
msgstr "`application.conf` または `application.json` ファイルを使用して、他の Java ドライバーの設定を設定することができます。これらのファイルは、アプリケーションのクラスパスに配置する必要があります。すべての設定は、基礎となるドライバー設定メカニズムに自動的に渡されます。 `application.properties` で `quarkus.cassandra` のプレフィックスを付けて定義された設定は、 `application.conf` または `application.json` で定義された設定よりも優先されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:333
msgid "To see the full list of settings, please refer to the link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[driver settings reference]."
msgstr "設定の全リストを見るには、 link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[ドライバーの設定リファレンス] を参照してください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:334
#, no-wrap
msgid "Running a Cassandra Database"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:338
msgid "By default, `CassandraClient` is configured to access a local Cassandra database on port 9042 (the default Cassandra port)."
msgstr "デフォルトでは、 `CassandraClient` は、ポート 9042(デフォルトの Cassandra ポート)でローカル Cassandra データベースにアクセスするように構成されています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:341
msgid "Make sure that the setting `quarkus.cassandra.local-datacenter` matches the datacenter of your Cassandra cluster."
msgstr "設定 `quarkus.cassandra.local-datacenter` が、Cassandraクラスターのデータセンターと一致していることを確認してください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:344
msgid "If you don't know the name of your local datacenter, this value can be found by running the following CQL query: `SELECT data_center FROM system.local`."
msgstr "ローカルのデータセンターの名前がわからない場合は、以下の CQL クエリを実行することでこの値を見つけることができます : `SELECT data_center FROM system.local` "

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:347
msgid "If you want to use Docker to run a Cassandra database, you can use the following command to launch one:"
msgstr "Dockerを使用してCassandraデータベースを起動したい場合は、以下のコマンドを使用して起動することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:360
#, no-wrap
msgid ""
"docker run \\\n"
"   --name local-cassandra-instance \\\n"
"   -p 7000:7000 \\\n"
"   -p 7001:7001 \\\n"
"   -p 7199:7199 \\\n"
"   -p 9042:9042 \\\n"
"   -p 9160:9160 \\\n"
"   -p 9404:9404 \\\n"
"   -d \\\n"
"   launcher.gcr.io/google/cassandra3\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:364
msgid "Note that only the 9042 port is required. All others all optional but provide enhanced features like JMX monitoring of the Cassandra instance."
msgstr "9042ポートのみが必要であることに注意してください。他のすべてはオプションですが、CassandraインスタンスのJMX監視などのエクステンションを提供します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:367
msgid "Next you need to create the keyspace and table that will be used by your application. If you are using Docker, run the following commands:"
msgstr "次に、アプリケーションで使用するキースペースとテーブルを作成する必要があります。Dockerを使用している場合は、以下のコマンドを実行します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:372
#, no-wrap
msgid ""
"docker exec -it local-cassandra-instance cqlsh -e \"CREATE KEYSPACE IF NOT EXISTS k1 WITH replication = {'class':'SimpleStrategy', 'replication_factor':1}\"\n"
"docker exec -it local-cassandra-instance cqlsh -e \"CREATE TABLE IF NOT EXISTS k1.fruit(id text, name text, description text, PRIMARY KEY((id), name))\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:375
msgid "If you're running Cassandra locally you can execute the cqlsh commands directly:"
msgstr "ローカルでCassandraを実行している場合は、cqlshコマンドを直接実行できます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:380
#, no-wrap
msgid ""
"cqlsh -e \"CREATE KEYSPACE IF NOT EXISTS k1 WITH replication = {'class':'SimpleStrategy', 'replication_factor':1}\n"
"cqlsh -e \"CREATE TABLE IF NOT EXISTS k1.fruit(id text, name text, description text, PRIMARY KEY((id), name))\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:382
#, no-wrap
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:385
msgid "Now let's add a simple web page to interact with our `FruitResource`."
msgstr "それでは、 `FruitResource` と対話するためのシンプルなウェブページを追加してみましょう。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:391
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:393
#: upstream/_versions/1.7/guides/cassandra.adoc:536
msgid "start Quarkus with `mvn clean quarkus:dev`"
msgstr "Quarkusを起動する `mvn clean quarkus:dev`"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:394
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "ブラウザで `http://localhost:8080/fruits.html` を開きます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:395
#: upstream/_versions/1.7/guides/cassandra.adoc:538
msgid "add new fruits to the list via the form"
msgstr "フォームを使って新しいフルーツをリストに追加します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:397
#, no-wrap
msgid "Reactive Cassandra Client"
msgstr "リアクティブCassandraクライアント"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:401
msgid "When using `QuarkusCqlSession` you have access to reactive variant of methods that integrate with Quarkus and Mutiny."
msgstr "`QuarkusCqlSession` を使うと、QuarkusとMutinyを統合したメソッドのリアクティブなバリアントにアクセスできます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:404
msgid "If you're not familiar with Mutiny, read the link:getting-started-reactive[Getting Started with Reactive guide] first."
msgstr "Mutinyに慣れていない場合は、まず link:https://quarkus.io/guides/getting-started-reactive[Getting Started with Reactiveガイド] を読んでください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:406
msgid "Let's rewrite the previous example using reactive programming with Mutiny."
msgstr "先ほどの例をMutinyを使ったリアクティブプログラミングで書き換えてみましょう。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:408
msgid "Firstly, we need to implement the `@Dao` that works in a reactive way:"
msgstr "まず、リアクティブに動作する `@Dao` を実装する必要があります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:413
#, no-wrap
msgid ""
"@Dao\n"
"public interface FruitDaoReactive {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:416
#, no-wrap
msgid ""
"  @Update\n"
"  Uni<Void> updateAsync(Fruit fruitDao);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:420
#, no-wrap
msgid ""
"  @Select\n"
"  MutinyMappedReactiveResultSet<Fruit> findByIdAsync(String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:427
msgid "Please note the usage of `MutinyMappedReactiveResultSet` - it is a specialized `Mutiny` type converted from the original `Publisher` returned by the driver, which also exposes a few extra methods, e.g. to obtain the query execution info. If you don't need anything in that interface, you can also simply declare your method to return `Multi`: `Multi<Fruit> findByIdAsync(String id)`,"
msgstr "`MutinyMappedReactiveResultSet` の使い方に注意してください。これは、ドライバが返すオリジナルの `Publisher` から変換された特殊な `Mutiny` 型で、クエリの実行情報を取得するなど、いくつかの追加メソッドも公開されています。このインターフェイスで何も必要としない場合は、単純に `Multi` を返すようにメソッドを宣言することもできます。`Multi<Fruit> findByIdAsync(String id)`"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:430
msgid "Similarly, the method `updateAsync` returns a `Uni` - it is automatically converted from the original result set returned by the driver."
msgstr "同様に、メソッド `updateAsync` は `Uni` を返します。これは、ドライバーが返す元の結果セットから自動的に変換されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:438
msgid "The Cassandra driver uses the Reactive Streams `Publisher` API for reactive calls. The Quarkus framework however uses Mutiny. Because of that, the `CqlQuarkusSession` interface transparently converts the `Publisher` instances returned by the driver into the reactive type `Multi`.  `CqlQuarkusSession` is also capable of converting a `Publisher` into a `Uni` – in this case, the publisher is expected to emit at most one row, then complete. This is suitable for write queries (they return no rows), or for read queries guaranteed to return one row at most (count queries, for example)."
msgstr "Cassandraドライバは、リアクティブコールにReactive Streamsの `Publisher` APIを使用しています。しかし、QuarkusフレームワークではMutinyを使用しています。そのため、 `CqlQuarkusSession` インターフェイスは、ドライバが返す `Publisher` インスタンスを透過的にリアクティブ型の `Multi` に変換します。 `CqlQuarkusSession` は `Publisher` を `Uni` に変換することもできます - この場合、パブリッシャーは最大で1行を出力し、その後完了することが期待されます。これは書き込みクエリ(行を返さない)や、最大で1行を返すことが 保証されている読み込みクエリ(例えばカウントクエリ)に適しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:440
msgid "Next, we need to adapt the `FruitMapper` to construct a `FruitDaoReactive` instance:"
msgstr "次に、 `FruitDaoReactive` のインスタンスを構築するために、 `FruitMapper` を適応させる必要があります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:446
#, no-wrap
msgid ""
"@Mapper\n"
"public interface FruitMapper {\n"
"  // the existing method omitted\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:450
#, no-wrap
msgid ""
"  @DaoFactory\n"
"  FruitDaoReactive fruitDaoReactive();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:454
msgid "Now, we can create a `FruitReactiveService` that leverages the reactive `@Dao`:"
msgstr "これで、リアクティブな `@Dao` を利用した `FruitReactiveService` を作成することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:459
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitReactiveService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:461
#, no-wrap
msgid "  private final FruitDaoReactive fruitDao;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:466
#, no-wrap
msgid ""
"  @Inject\n"
"  public FruitReactiveService(FruitDaoReactive fruitDao) {\n"
"    this.fruitDao = fruitDao;\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:470
#, no-wrap
msgid ""
"  public Uni<Void> add(Fruit fruit) {\n"
"    return fruitDao.update(fruit);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:475
#, no-wrap
msgid ""
"  public Multi<Fruit> get(String id) {\n"
"    return fruitDao.findById(id);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:479
msgid "The `get()` method above returns `Multi`, and the `add()` method returns `Uni`; these types are compatible with the Quarkus reactive REST API."
msgstr "上記の `get()` メソッドは `Multi` を返し、 `add()` メソッドは `Uni` を返します。これらのタイプは、Quarkus のリアクティブ REST API と互換性があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:482
msgid "To integrate the reactive logic with REST API, you need to have a dependency to `quarkus-resteasy-mutiny`:"
msgstr "リアクティブロジックをRESTAPIと統合するには、 `quarkus-resteasy-mutiny` への依存関係が必要です。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:489
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:492
msgid "It provides an integration layer between `Multi`, `Uni` and the REST API."
msgstr "これは `Multi` 、`Uni` 、REST APIの間の統合レイヤーを提供します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:494
msgid "Finally, we can create a `FruitReactiveResource`:"
msgstr "最後に、 `FruitReactiveResource` を作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:503
#, no-wrap
msgid ""
"@Path(\"/reactive-fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class FruitReactiveResource {\n"
"  private static final String STORE_NAME = \"acme\";\n"
"  @Inject FruitReactiveService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:510
#, no-wrap
msgid ""
"  @GET\n"
"  public Multi<FruitDto> getAll() {\n"
"    return service\n"
"        .get(STORE_NAME)\n"
"        .map(fruit -> new FruitDto(fruit.getName(), fruit.getDescription()));\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:516
#, no-wrap
msgid ""
"  @POST\n"
"  public Multi<FruitDto> add(FruitDto fruitDto) {\n"
"    Fruit fruit = covertFromDto(fruitDto);\n"
"    return service.add(fruit).then(ignored -> getAll());\n"
"  }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:524
msgid "All methods exposed via REST interface are returning reactive types from the Mutiny API."
msgstr "RESTインターフェースを介して公開されているすべてのメソッドは、Mutiny APIからリアクティブ型を返しています。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:525
#, no-wrap
msgid "Creating a reactive frontend"
msgstr "リアクティブなフロントエンドの作成"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:534
msgid "You can now interact with your reactive REST service:"
msgstr "これで、リアクティブな REST サービスと対話できるようになりました。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:537
msgid "open a browser to `http://localhost:8080/reactive-fruits.html`"
msgstr "ブラザで `http://localhost:8080/reactive-fruits.html` を開きます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:540
#, no-wrap
msgid "Connection Health Check"
msgstr "接続のヘルスチェック"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:544
msgid "If you are using the `quarkus-smallrye-health` extension, `cassandra-quarkus` will automatically add a readiness health check to validate the connection to the cluster."
msgstr "`quarkus-smallrye-health` エクステンションを使用している場合、 `quarkus-quarkus` は、クラスタへの接続を検証するための Readiness ヘルスチェックを自動的に追加します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:547
msgid "So when you access the `/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:550
msgid "This behavior can be disabled by setting the `quarkus.cassandra.health.enabled` property to `false` in your `application.properties`."
msgstr "この動作は、 `application.properties` で `quarkus.cassandra.health.enabled` プロパティを `false` に設定することで無効にできます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:551
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:555
msgid "If you are using the `quarkus-smallrye-metrics` extension, `cassandra-quarkus` can provide metrics about QuarkusCqlSession and Cassandra nodes."
msgstr "`quarkus-smallrye-metrics` エクステンションを使用している場合、 `cassandra-quarkus` は、QuarkusCqlSession と Cassandra ノードに関するメトリクスを提供できます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:558
msgid "This behavior must first be enabled by setting the `quarkus.cassandra.metrics.enabled` property to `true` in your `application.properties`."
msgstr "この動作を有効にするには、まず `application.properties` で `quarkus.cassandra.metrics.enabled` プロパティを `true` に設定する必要があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:560
msgid "The next step that you need to do is set explicitly which metrics should be enabled."
msgstr "次のステップでは、どのメトリクスを有効にするかを明示的に設定します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:565
msgid "The `quarkus.cassandra.metrics.session-enabled` and `quarkus.cassandra.metrics.node-enabled` properties should be used for enabling metrics; the former should contain a list of session-level metrics to enable, while the latter should contain a list of node-level metrics to enable. Both properties accept a comma-separated list of valid metric names."
msgstr "`quarkus.cassandra.metrics.session-enabled` および `quarkus.cassandra.metrics.node-enabled` プロパティは、メトリクスを有効にするために使用する必要があります。前者は有効にするセッション・レベル・メトリクスのリストを含み、後者は有効にするノード・レベル・メトリクスのリストを含む必要があります。どちらのプロパティも、有効なメトリクス名をコンマで区切ったリストを受け付けます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:568
msgid "For example, to enable `session.connected-nodes`, `session.bytes-sent`, and `node.pool.open-connections` you should add the following settings to your `application.properties`:"
msgstr "例えば、 `session.connected-nodes` 、 `session.bytes-sent` 、 `node.pool.open-connections` を有効にするには、 `application.properties` に以下の設定を追加します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cassandra.adoc:574
#, no-wrap
msgid ""
"quarkus.cassandra.metrics.enabled=true\n"
"quarkus.cassandra.metrics.session-enabled=connected-nodes,bytes-sent\n"
"quarkus.cassandra.metrics.node-enabled=pool.open-connections\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:579
msgid "For the full list of available metrics, please refer to the link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[driver settings reference] and the `advanced.metrics` section."
msgstr "利用可能なメトリクスの全リストについては、リンク:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[ドライバーの設定リファレンス] と `advanced.metrics` セクションを参照してください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:582
msgid "When metrics are properly enabled and when you access the `/metrics` endpoint of your application, you will see metric reports for all enabled metrics."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:583
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:586
msgid "You can use the Cassandra client in a native executable."
msgstr "ネイティブ実行可能ファイルでCassandraクライアントを使用することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:588
msgid "You can build a native executable with the `mvn clean package -Dnative` command."
msgstr "`mvn clean package -Dnative` コマンドでネイティブ実行可能ファイルをビルドすることができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:590
msgid "Running it is as simple as executing `./target/quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "実行は `./target/quickstart-1.0.0-SNAPSHOT-runner` を実行するだけで簡単です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:592
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cassandra.adoc:593
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/1.7/guides/cassandra.adoc:597
msgid "Accessing a Cassandra database from a client application is easy with Quarkus and the Cassandra extension, which provides configuration and native support for the DataStax Java driver for Apache Cassandra."
msgstr "クライアント・アプリケーションからのCassandraデータベースへのアクセスは、QuarkusとCassandraエクステンションで簡単に行えます。"
