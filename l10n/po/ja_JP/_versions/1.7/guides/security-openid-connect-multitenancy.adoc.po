# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:6
#, no-wrap
msgid "Quarkus - Using OpenID Connect Multi-Tenancy"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:12
msgid "This guide demonstrates how your OpenID Connect application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:14
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:16
msgid "Please read the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:18
msgid "Please read the link:security-openid-connect-web-authentication[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenId Connect Authorization Code Flow."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:22
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:24
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:25
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:26
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:27
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:28
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:29
msgid "Docker"
msgstr "Docker"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:30
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:33
msgid "In this example, we build a very simple application which offers a single land page:"
msgstr "この例では、単一のランディングページを提供する非常にシンプルなアプリケーションを構築しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:35
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:37
msgid "The land page is served by a JAX-RS Resource and shows information obtained from the OpenID Provider about the authenticated user and the current tenant."
msgstr "ランディングページはJAX-RSリソースによって提供され、認証されたユーザーと現在のテナントに関するOpenIDプロバイダから取得した情報を表示します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:38
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:46
msgid "The solution is located in the `security-openid-connect-multi-tenancy` {quickstarts-tree-url}/security-openid-connect-multi-tenancy[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:47
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:50
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:58
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-openid-connect-multi-tenancy \\\n"
"    -Dextensions=\"oidc, resteasy-jsonb\"\n"
"cd security-openid-connect-multi-tenancy\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:62
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `oidc` エクステンションを追加することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:66
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:69
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:76
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:78
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:81
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/{tenant}` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:85
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:128
#, no-wrap
msgid "package org.acme.quickstart.oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:89
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:91
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:93
#, no-wrap
msgid "import io.quarkus.oidc.IdToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:96
#, no-wrap
msgid ""
"@Path(\"/{tenant}\")\n"
"public class HomeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:103
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider \n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:113
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose these tokens in a real application.\n"
"     * \n"
"     * @return the landing page HTML\n"
"     */\n"
"    @GET\n"
"    public String getHome() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\").append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:116
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:120
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:124
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantResolver` interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:130
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:302
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:133
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:136
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:141
#, no-wrap
msgid ""
"    @Override \n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:146
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:319
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant configuration\n"
"            return null;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:150
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:153
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:154
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:162
#, no-wrap
msgid ""
"# Default Tenant Configuration\n"
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=multi-tenant-client\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:167
#, no-wrap
msgid ""
"# Tenant A Configuration\n"
"quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/auth/realms/tenant-a\n"
"quarkus.oidc.tenant-a.client-id=multi-tenant-client\n"
"quarkus.oidc.tenant-a.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:171
#, no-wrap
msgid ""
"# HTTP Security Configuration\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:174
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. This configuration is using a Keycloak instance to authenticate users."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:176
msgid "The second configuration is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:178
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:180
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:181
#, no-wrap
msgid "Google OpenID Provider Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:184
msgid "In order to set-up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:186
msgid "Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:196
#, no-wrap
msgid ""
"# Tenant configuration using Google OpenID Provider\n"
"quarkus.oidc.tenant-b.auth-server-url=https://accounts.google.com\n"
"quarkus.oidc.tenant-b.application-type=web-app\n"
"quarkus.oidc.tenant-b.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.tenant-b.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.tenant-b.token.issuer=https://accounts.google.com\n"
"quarkus.oidc.tenant-b.authentication.scopes=email,profile,openid\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:198
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:201
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:205
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 {keycloak-docker-image}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:208
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr "Keycloakサーバーには、 link:http://localhost:8180/auth[localhost:8180/auth] でアクセスできるはずです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:210
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:212
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr "さて、以下の手順に従って、2つのテナントのためのレルムをインポートします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:214
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:215
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:217
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:218
#, no-wrap
msgid "Running and Using the Application"
msgstr "アプリケーションの実行と使用"

#. type: Title ===
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:220
#, no-wrap
msgid "Running in Developer Mode"
msgstr "デベロッパーモードでの実行"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:223
msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr "マイクロサービスをdevモードで実行するには、 `./mvnw clean compile quarkus:dev` を使用します。"

#. type: Title ===
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:224
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:227
msgid "When you're done playing with \"dev-mode\" you can run it as a standard Java application."
msgstr "\"dev-mode\" で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:229
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:233
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:236
msgid "Then run it:"
msgstr "次に、以下を実行してください。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:240
#, no-wrap
msgid "java -jar ./target/security-openid-connect-multi-tenancy-quickstart-runner.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:242
#, no-wrap
msgid "Running in Native Mode"
msgstr "ネイティブモードでの実行"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:245
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:249
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:252
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:256
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr "./mvnw package -Pnative\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:259
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:263
#, no-wrap
msgid "./target/security-openid-connect-multi-tenancy-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:265
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:268
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "テストするには、ブラウザを開いて以下のURLにアクセスする必要があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:270
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:273
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:275
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "アプリケーションを認証するためには、Keycloakのログインページで以下の認証情報を入力する必要があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:277
msgid "Username: *alice*"
msgstr "Username: *alice*"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:278
msgid "Password: *alice*"
msgstr "Password: *alice*"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:280
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "`Login` ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:282
msgid "If you try now to access the application at the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:284
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:286
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:289
msgid "In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:290
#, no-wrap
msgid "Programmatically Resolving Tenants Configuration"
msgstr "テナントの設定をプログラムで解決"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:294
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "サポートしたいさまざまなテナントに対して、より動的な設定が必要で、設定ファイルに複数のエントリーを入れたくない場合は、 `io.quarkus.oidc.TenantConfigResolver` が利用出来ます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:296
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "このインターフェイスを使用すると、実行時にテナント設定を動的に作成することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:300
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:306
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.quarkus.oidc.runtime.OidcTenantConfig;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:309
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantConfigResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:314
#, no-wrap
msgid ""
"    @Override\n"
"    public OidcTenantConfig resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:322
#, no-wrap
msgid ""
"        if (\"tenant-c\".equals(parts[1])) {\n"
"            OidcTenantConfig config = new OidcTenantConfig();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:327
#, no-wrap
msgid ""
"            config.setTenantId(\"tenant-c\");\n"
"            config.setAuthServerUrl(\"http://localhost:8180/auth/realms/tenant-c\");\n"
"            config.setClientId(\"multi-tenant-client\");\n"
"            OidcTenantConfig.Credentials credentials = new OidcTenantConfig.Credentials();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:329
#, no-wrap
msgid "            credentials.setSecret(\"my-secret\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:331
#, no-wrap
msgid "            config.setCredentials(credentials);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:333
#, no-wrap
msgid "            // any other setting support by the quarkus-oidc extension\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:336
#, no-wrap
msgid ""
"            return config;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:341
#, no-wrap
msgid ""
"        // resolve to default tenant configuration\n"
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:344
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:345
#, no-wrap
msgid "Disabling Tenant Configurations"
msgstr "テナント設定を無効にする"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:348
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "カスタムの `TenantResolver` および `TenantConfigResolver` の実装では、現在のリクエストからテナントを推測できず、デフォルトのテナント設定へのフォールバックが必要な場合は `null` を返すことがあります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:350
msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
msgstr "カスタムリゾルバが常にテナントを推論することが予想される場合、デフォルトのテナント設定は必要ありません。 `quarkus.oidc.tenant-enabled=false` の設定で無効にすることができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:352
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "テナント固有の設定を無効にすることもできます。例: `quarkus.oidc.tenant-a.tenant-enabled=false`"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:353
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:357
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:360
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:361
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:362
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:363
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-multitenancy.adoc:363
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus Security]"
