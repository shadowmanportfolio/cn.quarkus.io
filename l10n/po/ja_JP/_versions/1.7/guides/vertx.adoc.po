# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/vertx.adoc:6
#, no-wrap
msgid "Quarkus - Using Eclipse Vert.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:13
msgid "Eclipse https://vertx.io[Vert.x] is a toolkit for building reactive applications.  It is designed to be lightweight and embeddable.  Vert.x defines a reactive execution model and provides a large ecosystem."
msgstr "Eclipse link:https://vertx.io[Vert.x] は、リアクティブなアプリケーションを構築するためのツールキットです。軽量で埋め込み可能なように設計されています。Vert.xはリアクティブ実行モデルを定義し、大規模なエコシステムを提供します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:18
msgid "Quarkus is based on Vert.x, and almost all network-related features rely on Vert.x.  While lots of reactive features from Quarkus don't _show_ Vert.x, it's used underneath.  Quarkus also integrates smoothly with the Vert.x event bus (to enable asynchronous messaging passing between application components) and some reactive clients.  You can also use various Vert.x APIs in your Quarkus application, such as deploying _verticles_, instantiating clients..."
msgstr "QuarkusはVert.xをベースにしており、ほとんどすべてのネットワーク関連機能はVert.xに依存しています。Quarkusのリアクティブ機能の多くはVert.xを _表に出して_ いませんが、その下で使用されています。また、Quarkusは、Vert.xイベントバス(アプリケーションコンポーネント間の非同期メッセージングの受け渡しを可能にするため)やいくつかのリアクティブクライアントとスムーズに統合されています。また、Quarkusアプリケーションでは、さまざまなVert.x APIを使用することができます(例えば、 _バーティクル_ のデプロイ、クライアントのインスタンス化など)。"

#. type: Title ==
#: upstream/_versions/1.7/guides/vertx.adoc:20
#, no-wrap
msgid "Installing"
msgstr "インストール"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:24
msgid "To access Vert.x, well, you need to enable the `vertx` extension to use this feature.  If you are creating a new project, set the `extensions` parameter are follows:"
msgstr "Vert.xにアクセスするに、この機能を利用するには、 `vertx` エクステンションを有効にする必要があります。新規プロジェクトを作成する場合は、 `extensions` パラメーターを以下のように設定します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:32
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-quickstart \\\n"
"    -Dextensions=\"vertx\"\n"
"cd vertx-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:36
msgid "If you have an already created project, the `vertx` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr "すでに作成済みのプロジェクトがある場合は、 `vertx` エクステンションを既存のQuarkusプロジェクトに `add-extension` コマンドで追加することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:40
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vertx\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:43
msgid "Otherwise, you can manually add this to the dependencies section of your `pom.xml` file:"
msgstr "そうでなければ、 `pom.xml` ファイルの依存関係セクションに手動で追加することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:50
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/vertx.adoc:52
#, no-wrap
msgid "Native Transport"
msgstr "ネイティブトランスポート"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:58
msgid "Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports] which offers performance improvements on certain platforms. To enable them you must include the appropriate dependency for your platform. It's usually a good idea to include both to keep your application platform agnostic. Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:66
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-epoll</artifactId>\n"
"  <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:72
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-kqueue</artifactId>\n"
"  <classifier>osx-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:75
msgid "You will also have to explicitly configure Vert.x to use the native transport. In `application.properties` add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:79
#, no-wrap
msgid "quarkus.vertx.prefer-native-transport=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:82
msgid "Or in `application.yml`:"
msgstr "あるいは、 `application.yml` で次のように設定します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:88
#, no-wrap
msgid ""
"quarkus:\n"
"  vertx:\n"
"    prefer-native-transport: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:91
msgid "If all is well quarkus will log:"
msgstr "すべてがうまくいけば、クァーカス以下のログ出力を行います。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:94
#, no-wrap
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/vertx.adoc:96
#, no-wrap
msgid "Native Linux Transport"
msgstr "ネイティブLinuxトランスポート"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:99
msgid "On Linux you can enable the following socket options:"
msgstr "Linuxでは、以下のソケットオプションを有効にすることができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:101
#: upstream/_versions/1.7/guides/vertx.adoc:122
msgid "SO_REUSEPORT"
msgstr "SOREUSEPORT"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:103
#: upstream/_versions/1.7/guides/vertx.adoc:124
#, no-wrap
msgid "quarkus.http.so-reuse-port=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:105
msgid "TCP_QUICKACK"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:107
#, no-wrap
msgid "quarkus.http.tcp-quick-ack=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:109
msgid "TCP_CORK"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:111
#, no-wrap
msgid "quarkus.http.tcp-cork=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:113
msgid "TCP_FASTOPEN"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:115
#, no-wrap
msgid "quarkus.http.tcp-fast-open=true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/vertx.adoc:117
#, no-wrap
msgid "Native MacOS Transport"
msgstr "ネイティブMacOSトランスポート"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:120
msgid "On MacOS Sierra and above you can enable the following socket options:"
msgstr "MacOS Sierra以上では、以下のソケットオプションを有効にすることができます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/vertx.adoc:126
#, no-wrap
msgid "Accessing Vert.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:129
msgid "Once the extension has been added, you can access the _managed_ Vert.x instance using `@Inject`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:133
#: upstream/_versions/1.7/guides/vertx.adoc:599
#, no-wrap
msgid "@Inject Vertx vertx;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:137
msgid "If you are familiar with Vert.x, you know that Vert.x provides different API models.  For instance _bare_ Vert.x uses callbacks, the Mutiny variants uses `Uni` and `Multi`, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`..."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:139
msgid "Quarkus provides 4 Vert.x APIs:"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:143
#, no-wrap
msgid "Name"
msgstr "名前"

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:143
#, no-wrap
msgid "Code"
msgstr "コード"

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:145
#, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:145
#, no-wrap
msgid "_bare_"
msgstr "_bare_"

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:145
#, no-wrap
msgid "`@Inject io.vertx.core.Vertx vertx`"
msgstr "`@Inject io.vertx.core.Vertx vertx`"

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:147
#, no-wrap
msgid "_bare_ Vert.x instance, the API uses callbacks."
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:147
#, no-wrap
msgid "https://smallrye.io/smallrye-mutiny/[Mutiny]"
msgstr "https://smallrye.io/smallrye-mutiny/[Mutiny]"

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:147
#, no-wrap
msgid "`@Inject io.vertx.mutiny.core.Vertx vertx`"
msgstr "`@Inject io.vertx.mutiny.core.Vertx vertx`"

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:149
#, no-wrap
msgid "The Mutiny API for Vert.x."
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:149
#, no-wrap
msgid "RX Java 2"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:149
#, no-wrap
msgid "`@Inject io.vertx.reactivex.core.Vertx vertx`"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:151
#, no-wrap
msgid "RX Java 2 Vert.x, the API uses RX Java 2 types (deprecated)."
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:151
#, no-wrap
msgid "_Axle_"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:151
#, no-wrap
msgid "`@Inject io.vertx.axle.core.Vertx vertx`"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/vertx.adoc:153
#, no-wrap
msgid "Axle Vert.x, the API uses `CompletionStage` and `Reactive Streams` (deprecated)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:157
msgid "You may inject any of the 4 flavors of `Vertx` as well as the `EventBus` in your Quarkus application beans: `bare`, `Mutiny`, `Axle`, `RxJava2`.  They are just shims and rely on a single _managed_ Vert.x instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:159
msgid "You will pick one or the other depending on your use cases."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:161
msgid "`bare`: for advanced usage or if you have existing Vert.x code you want to reuse in your Quarkus application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:162
msgid "`mutiny`: Mutiny is an event-driven reactive programming API. It uses 2 types: `Uni` and `Multi`. This is the recommended API."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:163
msgid "`Axle`: works well with Quarkus and MicroProfile APIs (`CompletionStage` for single results and `Publisher` for streams) - deprecated, it is recommended to switch to Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:164
msgid "`Rx Java 2`: when you need support for a wide range of data transformation operators on your streams - deprecated, it is recommended to switch to Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:166
msgid "The following snippets illustrate the difference between these 4 APIs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:177
#, no-wrap
msgid ""
"// Bare Vert.x:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\", ar -> {\n"
"    if (ar.succeeded()) {\n"
"        System.out.println(\"Content:\" + ar.result().toString(\"UTF-8\"));\n"
"    } else {\n"
"        System.out.println(\"Cannot read the file: \" + ar.cause().getMessage());\n"
"    }\n"
"});\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:186
#, no-wrap
msgid ""
"// Mutiny Vert.x:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\")\n"
"    .onItem().transform(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .subscribe()\n"
"    .with(\n"
"            content -> System.out.println(\"Content: \" + content),\n"
"            err -> System.out.println(\"Cannot read the file: \" + err.getMessage())\n"
"    );\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:194
#, no-wrap
msgid ""
"// Rx Java 2 Vert.x\n"
"vertx.fileSystem().rxReadFile(\"lorem-ipsum.txt\")\n"
"    .map(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .subscribe(\n"
"            content -> System.out.println(\"Content: \" + content),\n"
"            err -> System.out.println(\"Cannot read the file: \" + err.getMessage())\n"
"    );\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:205
#, no-wrap
msgid ""
"// Axle API:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\")\n"
"    .thenApply(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .whenComplete((content, err) -> {\n"
"        if (err != null) {\n"
"            System.out.println(\"Cannot read the file: \" + err.getMessage());\n"
"        } else {\n"
"            System.out.println(\"Content: \" + content);\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/vertx.adoc:208
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_versions/1.7/guides/vertx.adoc:211
msgid "If you're not familiar with Mutiny, we recommend to read the link:getting-started-reactive#mutiny[Getting Started with Reactive guide] first."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/vertx.adoc:213
#, no-wrap
msgid "Using Vert.x in Reactive JAX-RS resources"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:216
msgid "Quarkus web resources support asynchronous processing and streaming results over https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events[server-sent events]."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/vertx.adoc:217
#, no-wrap
msgid "Asynchronous processing"
msgstr "非同期処理"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:220
msgid "To asynchronously handle the HTTP request, the endpoint method must return a `java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` (requires the `quarkus-resteasy-mutiny` extension):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:225
#: upstream/_versions/1.7/guides/vertx.adoc:263
#, no-wrap
msgid ""
"@Path(\"/lorem\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:235
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public Uni<String> doSomethingAsync() {\n"
"        // Mimic an asynchronous computation.\n"
"        return Uni.createFrom()\n"
"                .item(() -> \"Hello!\")\n"
"                .onItem().delayIt().by(Duration.ofMillis(10));\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:241
#: upstream/_versions/1.7/guides/vertx.adoc:562
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr "./mvnw compile quarkus:dev\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:244
msgid "Then, open your browser to http://localhost:8080/lorem and you should get the message."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:247
msgid "So far so good.  Now let's use the Vert.x API instead of this artificial delay:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:251
#: upstream/_versions/1.7/guides/vertx.adoc:316
#: upstream/_versions/1.7/guides/vertx.adoc:500
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:254
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:260
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:266
#: upstream/_versions/1.7/guides/vertx.adoc:333
#: upstream/_versions/1.7/guides/vertx.adoc:522
#, no-wrap
msgid ""
"    @Inject\n"
"    Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:274
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public Uni<String> doSomethingAsync() {\n"
"        return vertx.fileSystem().readFile(\"/META-INF/resources/lorem.txt\")\n"
"                .onItem().transform(b -> b.toString(\"UTF-8\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:277
msgid "In this code, we inject the `vertx` instance (`io.vertx.mutiny.core.Vertx`) and read a file from the file system."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:279
msgid "Create the `src/main/resources/META_INF/resources/lorem.txt` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:283
#, no-wrap
msgid "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:286
msgid "Then, refresh the page, you should see the _lorem ipsum_ text."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/vertx.adoc:287
#, no-wrap
msgid "Streaming using Server-Sent Events"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:290
msgid "Quarkus web resources that need to send content as https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events[server-sent events] must have a method:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:292
msgid "declaring the `text/event-stream` response content type"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:293
msgid "returning a https://www.reactive-streams.org/[Reactive Streams] `Publisher` or Mutiny `Multi` (requires the `quarkus-resteasy-mutiny` extension)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:295
msgid "In practice, a streaming greeting service would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:300
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class StreamingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:309
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @Path(\"/{name}\")\n"
"    public Multi<String> greeting(@PathParam String name) {\n"
"        // TODO: create a Reactive Streams publisher or a Mutiny Multi\n"
"        return publisher;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:312
msgid "Now we just need to return our `Publisher` or `Multi`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:320
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:327
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.util.Date;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:330
#, no-wrap
msgid ""
"@Path(\"/stream\")\n"
"public class StreamingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:342
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @Path(\"/{name}\")\n"
"    public Multi<String> greeting(@PathParam String name) {\n"
"        return vertx.periodicStream(2000).toMulti()\n"
"                .map(l -> String.format(\"Hello %s! (%s)%n\", name, new Date()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:346
msgid "The server side is ready.  In order to see the result in the browser, we need a web page."
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/vertx.adoc:348
#, no-wrap
msgid "META-INF/resources/streaming.html"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:361
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>SSE with Vert.x - Quarkus</title>\n"
"    <script type=\"application/javascript\" src=\"streaming.js\"></script>\n"
"</head>\n"
"<body>\n"
"<div id=\"container\"></div>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:365
msgid "Our web page just has an empty `<div>` container.  The magic, as always, lies in the Javascript code:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/vertx.adoc:367
#, no-wrap
msgid "META-INF/resources/streaming.js"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:380
#, no-wrap
msgid ""
"if (!!window.EventSource) {\n"
"    var eventSource = new EventSource(\"/stream/Quarkus\");\n"
"    eventSource.onmessage = function (event) {\n"
"        var container = document.getElementById(\"container\");\n"
"        var paragraph = document.createElement(\"p\");\n"
"        paragraph.innerHTML = event.data;\n"
"        container.appendChild(paragraph);\n"
"    };\n"
"} else {\n"
"    window.alert(\"EventSource not available on this browser.\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:384
msgid "Most browsers support SSE but some don't.  More about this in Mozilla's https://developer.mozilla.org/en-US/docs/Web/API/EventSource#Browser_compatibility[SSE browser-compatibility list]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:387
msgid "Navigate to http://localhost:8080/streaming.html.  A new greeting should show-up every 2 seconds."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:391
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:55 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:393
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:57 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:395
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:59 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:397
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:14:01 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:399
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:14:03 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:401
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/vertx.adoc:403
#, no-wrap
msgid "Using Vert.x JSON"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:407
msgid "Vert.x API heavily relies on JSON, namely the `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray` types.  They are both supported as Quarkus web resource request and response bodies."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:409
msgid "Consider these endpoints:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:415
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class VertxJsonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:421
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/object\")\n"
"    public JsonObject jsonObject(@PathParam String name) {\n"
"        return new JsonObject().put(\"Hello\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:428
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/array\")\n"
"    public JsonArray jsonArray(@PathParam String name) {\n"
"        return new JsonArray().add(\"Hello\").add(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:431
msgid "In your browser, navigate to http://localhost:8080/hello/Quarkus/object. You should see:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:435
#, no-wrap
msgid "{\"Hello\":\"Quarkus\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:438
msgid "Then, navigate to http://localhost:8080/hello/Quarkus/array:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:442
#, no-wrap
msgid "[\"Hello\",\"Quarkus\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:445
msgid "Needless to say, this works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/vertx.adoc:446
#, no-wrap
msgid "Using Vert.x Clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:450
msgid "As you can inject a Vert.x instance, you can use Vert.x clients in a Quarkus application.  This section gives an example with the `WebClient`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/vertx.adoc:451
#, no-wrap
msgid "Picking the right dependency"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:454
msgid "Depending on the API model you want to use you need to add the right dependency to your `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:462
#, no-wrap
msgid ""
"<!-- bare API -->\n"
"<dependency>\n"
"  <groupId>io.vertx</groupId>\n"
"  <artifactId>vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:468
#, no-wrap
msgid ""
"<!-- Mutiny API -->\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:474
#, no-wrap
msgid ""
"<!-- Axle API -->\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-axle-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:480
#, no-wrap
msgid ""
"<!-- RX Java 2 API -->\n"
"<dependency>\n"
"  <groupId>io.vertx</groupId>\n"
"  <artifactId>vertx-rx-java2</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:483
msgid "The `vertx-rx-java2` provides the RX Java 2 API for the whole Vert.x stack, not only the web client."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:485
msgid "In this guide, we are going to use the Mutiny API, so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:492
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:495
msgid "Now, create a new resource in your project with the following content:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/vertx.adoc:497
#, no-wrap
msgid "src/main/java/org/acme/vertx/ResourceUsingWebClient.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:508
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:511
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:516
#, no-wrap
msgid ""
"import io.vertx.mutiny.core.Vertx;\n"
"import io.vertx.mutiny.ext.web.client.WebClient;\n"
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.ext.web.client.WebClientOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:519
#, no-wrap
msgid ""
"@Path(\"/fruit-data\")\n"
"public class ResourceUsingWebClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:524
#, no-wrap
msgid "    private WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:531
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    void initialize() {\n"
"        this.client = WebClient.create(vertx,\n"
"                new WebClientOptions().setDefaultHost(\"fruityvice.com\")\n"
"                    .setDefaultPort(443).setSsl(true).setTrustAll(true));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:548
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Path(\"/{name}\")\n"
"    public Uni<JsonObject> getFruitData(@PathParam(\"name\") String name) {\n"
"        return client.get(\"/api/fruit/\" + name)\n"
"                .send()\n"
"                .onItem().transform(resp -> {\n"
"                    if (resp.statusCode() == 200) {\n"
"                        return resp.bodyAsJsonObject();\n"
"                    } else {\n"
"                        return new JsonObject()\n"
"                                .put(\"code\", resp.statusCode())\n"
"                                .put(\"message\", resp.bodyAsString());\n"
"                    }\n"
"                });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:550
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:556
msgid "This resource creates a `WebClient` and upon request use this client to invoke the _fruityvice_ API.  Depending on the result the response is forwarded as it's received, or a new JSON object is created with the status and body.  The `WebClient` is obviously asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:558
msgid "Run the application with:"
msgstr "アプリケーションを実行します:"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:565
msgid "And then, open a browser to: `http://localhost:8080/fruit-data/pear`. You should get some details about pears."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:569
msgid "The application can also run as a native executable.  But, first, we need to instruct Quarkus to enable _ssl_.  Open the `src/main/resources/application.properties` and add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:573
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:576
msgid "Then, create the native executable with:"
msgstr "そして、ネイティブ実行可能ファイルを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:580
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr "./mvnw package -Pnative\n"

#. type: Title ==
#: upstream/_versions/1.7/guides/vertx.adoc:582
#, no-wrap
msgid "Deploying verticles"
msgstr "verticleの展開"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:587
msgid "link:https://vertx.io/docs/vertx-core/java/#\\_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.  This model does not claim to be a strict actor-model implementation, but it does share similarities especially with respect to concurrency, scaling and deployment.  To use this model, you write and _deploy_ verticles, communicating with each other by sending messages on the event bus."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:590
msgid "You can deploy _verticles_ in Quarkus.  It supports:"
msgstr "Quarkusで _verticles_ をデプロイすることができます。次をサポートしています:"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:592
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:593
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:595
msgid "To deploy verticles, use the regular Vert.x API:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:603
#, no-wrap
msgid ""
"// ...\n"
"vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n"
"vertx.deployVerticle(new MyVerticle(), ar -> { });\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:606
msgid "You can also pass deployment options to configure the verticle as well as set the number of instances."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:609
msgid "Verticles are not _beans_ by default.  However, you can implement them as _ApplicationScoped_ beans and get injection support:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:613
#: upstream/_versions/1.7/guides/vertx.adoc:641
#, no-wrap
msgid "package io.quarkus.vertx.verticles;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:617
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:619
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:622
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBeanVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:624
#, no-wrap
msgid "    @ConfigProperty(name = \"address\") String address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:632
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(address)\n"
"                .handler(m -> m.replyAndForget(\"hello\"))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:635
msgid "You don't have to inject the `vertx` instance but instead leverage the instance stored in the protected field of `AbstractVerticle`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:637
msgid "Then, deploy the verticle instance with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:644
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:647
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:650
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class VerticleDeployer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:655
#, no-wrap
msgid ""
"    public void init(@Observes StartupEvent e, Vertx vertx, MyBeanVerticle verticle) {\n"
"         vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:658
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr "露出しているすべての `AbstractVerticle` をデプロイしたい場合は、次のようにします。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:666
#, no-wrap
msgid ""
"public void init(@Observes StartupEvent e, Vertx vertx, Instance<AbstractVerticle> verticles) {\n"
"    for (AbstractVerticle verticle : verticles) {\n"
"        vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/vertx.adoc:668
#, no-wrap
msgid "Listening to a Unix Domain Socket"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:674
msgid "Listening on a unix domain socket allows us to dispense with the overhead of TCP if the connection to the quarkus service is established from the same host. This can happen if access to the service goes through a proxy which is often the case if you're setting up a service mesh with a proxy like Envoy."
msgstr "unix ドメインソケットをリスンすることで、同じホストから quarkus サービスへの接続が確立されている場合、TCP のオーバーヘッドを省くことができます。これはサービスへのアクセスがプロキシーを経由している場合に起こる可能性があり、Envoyのようなプロキシーでサービスメッシュを設定している場合によく起こります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:676
msgid "This will only work on platforms that support <<native-transport>>."
msgstr "これは、 link:#native-transport[[native-transport]] をサポートするプラットフォームでのみ動作します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:679
msgid "To setup please enable the appropriate <<native-transport>> and set the following environment property:"
msgstr "設定するには、適切な link:#native-transport[native-transport] を有効にし、以下の環境プロパティーを設定してください。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:683
#, no-wrap
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:687
msgid "By itself this will not disable the tcp socket which by default will open on `0.0.0.0:8080`. It can be explicitly disabled:"
msgstr "これだけでは、デフォルトで `0.0.0.0:8080` で開かれる tcp ソケットを無効にすることはできません。これは次のように明示的に無効にすることができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:690
#, no-wrap
msgid "quarkus.http.host-enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:694
msgid "These properties can be set through Java's `-D` command line parameter or on `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/vertx.adoc:695
#, no-wrap
msgid "Read only deployment environments"
msgstr "読み取り専用のデプロイメント環境"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:698
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr "ファイルシステムが読み取り専用の環境では、次のようなエラーが発生することがあります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:702
#, no-wrap
msgid "java.lang.IllegalStateException: Failed to create cache dir\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:705
msgid "Assuming `/tmp/` is writeable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/vertx.adoc:706
#, no-wrap
msgid "Running behind a reverse proxy"
msgstr "リバースプロキシーの背後での実行"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:712
msgid "Quarkus could be accessed through proxies that additionally generate headers (e.g. `X-Forwarded-Host`) to keep information from the client-facing side of the proxy servers that is altered or lost when they are involved.  In those scenarios, Quarkus can be configured to automatically update information like protocol, host, port and URI reflecting the values in these headers."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:715
msgid "Activating this feature makes the server exposed to several security issues (i.e. information spoofing).  Consider activate it only when running behind a reverse proxy."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:717
msgid "To setup this feature, please include the following lines in `src/main/resources/application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:720
#, no-wrap
msgid "quarkus.http.proxy-address-forwarding=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:723
msgid "To consider only de-facto standard header (`Forwarded` header), please include the following lines in `src/main/resources/application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:726
#, no-wrap
msgid "quarkus.http.allow-forwarded=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:729
msgid "To consider only non-standard headers, please include the following lines instead in `src/main/resources/application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/vertx.adoc:735
#, no-wrap
msgid ""
"quarkus.http.proxy-address-forwarding=true\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.enable-forwarded-prefix=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:739
msgid "Both configurations related with standard and non-standard headers can be combine.  In this case, the `Forwarded` header will have precedence in presence of both set of headers."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:741
msgid "Supported forwarding address headers are:"
msgstr "サポートされている転送アドレスヘッダは以下の通りです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:743
msgid "`Forwarded`"
msgstr "`Forwarded`"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:744
msgid "`X-Forwarded-Proto`"
msgstr "`X-Forwarded-Proto`"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:745
msgid "`X-Forwarded-Host`"
msgstr "`X-Forwarded-Host`"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:746
msgid "`X-Forwarded-Port`"
msgstr "`X-Forwarded-Port`"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:747
msgid "`X-Forwarded-Ssl`"
msgstr "`X-Forwarded-Ssl`"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:748
msgid "`X-Forwarded-Prefix`"
msgstr "`X-Forwarded-Prefix`"

#. type: Title ==
#: upstream/_versions/1.7/guides/vertx.adoc:750
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:753
msgid "There are many other facets of Quarkus using Vert.x underneath:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:757
msgid "The event bus is the connecting tissue of Vert.x applications.  Quarkus integrates it so different beans can interact with asynchronous messages.  This part is covered in the link:reactive-event-bus[event bus documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:761
msgid "Data streaming and Apache Kafka are a important parts of modern systems.  Quarkus integrates data streaming using Reactive Messaging.  More details on link:kafka[Interacting with Kafka]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/vertx.adoc:762
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the link:reactive-sql-clients[Reactive SQL Clients]."
msgstr ""
