# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:6
#, no-wrap
msgid "Quarkus - Using OpenID Connect and Keycloak to Centralize Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:11
msgid "This guide demonstrates how your Quarkus application can authorize a bearer token access to protected resources using https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services]."
msgstr "このガイドでは、Quarkusアプリケーションが link:https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services] を使用して保護されたリソースへのベアラートークンアクセスを認証する方法を説明します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:15
msgid "The `quarkus-keycloak-authorization` extension is based on `quarkus-oidc` and provides a policy enforcer that enforces access to protected resources based on permissions managed by Keycloak and currently can only be used with the Quarkus link:security-openid-connect[OIDC service applications].  It provides a flexible and dynamic authorization capability based on Resource-Based Access Control.  In other words, instead of explicitly enforcing access based on some specific access control mechanism (e.g.: RBAC), you just check whether or not a request is allowed to access a resource based on its name, identifier or URI."
msgstr "`quarkus-keycloak-authorization` エクステンションは `quarkus-oidc` をベースにしており、Keycloakによって管理されるパーミッションに基づいて保護されたリソースへのアクセスを強制するポリシーエンフォーサーを提供しており、現在はQuarkus link:security-openid-connect[OIDCサービスアプリケーション] でのみ使用できます。これは、Resource-Based Access Controlに基づいた柔軟で動的な権限付与機能を提供します。言い換えれば、特定のアクセス制御メカニズム(RBACなど)に基づいて明示的にアクセスを強制するのではなく、名前、識別子、またはURIに基づいて、リクエストがリソースへのアクセスを許可されているかどうかをチェックするだけです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:17
msgid "By externalizing authorization from your application, you are allowed to protect your applications using different access control mechanisms as well as avoid re-deploying your application every time your security requirements change, where Keycloak will be acting as a centralized authorization service from where your protected resources and their associated permissions are managed."
msgstr "アプリケーションから認証を外部化することで、異なるアクセス制御メカニズムを使用してアプリケーションを保護することができ、セキュリティー要件が変更されるたびにアプリケーションを再デプロイする必要がなくなります。Keycloakは、保護されたリソースおよび関連する権限が管理される一元化された認可サービスとして機能します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:20
msgid "If you are already familiar with Keycloak, you’ll notice that the extension is basically another adapter implementation but specific for Quarkus applications.  Otherwise, you can find more information in the Keycloak https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_overview[documentation]."
msgstr "すでにKeycloakに慣れ親しんでいる方は、このエクステンションは基本的にはアダプターの別実装ですが、Quarkusアプリケーションに特化したものであることにお気づきでしょう。それ以外の場合は、Keycloakの link:https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_overview[ドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:21
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:24
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:26
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:27
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:28
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:29
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:30
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:31
msgid "https://www.keycloak.org/docs/latest/server_installation/index.html[Keycloak]"
msgstr "https://www.keycloak.org/docs/latest/server_installation/index.html[Keycloak]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:32
msgid "Docker"
msgstr "Docker"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:33
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:36
msgid "In this example, we build a very simple microservice which offers two endpoints:"
msgstr "この例では、2つのエンドポイントを提供する非常にシンプルなマイクロサービスを構築しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:38
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:39
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:41
msgid "These endpoints are protected and can only be accessed if a client is sending a bearer token along with the request, which must be valid (e.g.: signature, expiration and audience) and trusted by the microservice."
msgstr "これらのエンドポイントは保護されており、クライアントがリクエストと一緒にベアラートークンを送信している場合にのみアクセスすることができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:48
msgid "The `/api/users/me` endpoint can be accessed by any user with a valid token.  As a response, it returns a JSON document with details about the user where these details are obtained from the information carried on the token.  This endpoint is protected with RBAC (Role-Based Access Control) and only users granted with the `user` role can access this endpoint."
msgstr "`/api/users/me` エンドポイントは、有効なトークンを持つ任意のユーザーがアクセスできます。応答として、ユーザーに関する詳細が記載された JSON ドキュメントを返却します。このエンドポイントは RBAC (Role-Based Access Control) で保護されており、 `user` のロールで許可されたユーザーのみがこのエンドポイントにアクセスできます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:50
msgid "The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) and only users granted with the `admin` role can access it."
msgstr "`/api/admin` エンドポイントは RBAC (役割ベースのアクセス制御) で保護されており、 `admin` の役割を付与されたユーザーのみがアクセスできます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:54
msgid "This is a very simple example using RBAC policies to govern access to your resources.  However, Keycloak supports other types of policies that you can use to perform even more fine-grained access control.  By using this example, you'll see that your application is completely decoupled from your authorization policies with enforcement being purely based on the accessed resource."
msgstr "これは、RBACポリシーを使用してリソースへのアクセスを制御する非常にシンプルな例です。しかし、Keycloakは他のタイプのポリシーをサポートしており、より詳細なアクセス制御を行うために使用することができます。この例を使用すると、アプリケーションが認可ポリシーから完全に切り離されており、エンフォースメントは純粋にアクセスされたリソースに基づいていることがわかるでしょう。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:55
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:59
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:61
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:63
msgid "The solution is located in the `security-keycloak-authorization-quickstart` {quickstarts-tree-url}/security-keycloak-authorization-quickstart[directory]."
msgstr "ソリューションは `security-keycloak-authorization-quickstart` {quickstarts-tree-url}/security-keycloak-authorization-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:64
#, no-wrap
msgid "Creating the Project"
msgstr "プロジェクトの作成"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:68
msgid "First, we need a new project.  Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:76
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-keycloak-authorization-quickstart \\\n"
"    -Dextensions=\"oidc, keycloak-authorization, resteasy-jsonb\"\n"
"cd security-keycloak-authorization-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:79
msgid "This command generates a Maven project, importing the `keycloak-authorization` extension which is an implementation of a Keycloak Adapter for Quarkus applications and provides all the necessary capabilities to integrate with a Keycloak Server and perform bearer token authorization."
msgstr "このコマンドは、Quarkusアプリケーション用のKeycloakアダプターの実装であり、Keycloakサーバーと統合してベアラートークン認証を実行するために必要なすべての機能を提供する `keycloak-authorization` エクステンションをインポートして、Mavenプロジェクトを生成します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:82
msgid "If you already have your Quarkus project configured, you can add the `oidc` and `keycloak-authorization` extensions to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで次のコマンドを実行することで、 `oidc` と `keycloak-authorization` のエクステンションをプロジェクトに追加できます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:86
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc,keycloak-authorization\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:89
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:100
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-keycloak-authorization</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:108
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:153
#, no-wrap
msgid "package org.acme.security.keycloak.authorization;;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:114
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:116
#, no-wrap
msgid "import org.jboss.resteasy.annotations.cache.NoCache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:118
#, no-wrap
msgid "import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:121
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UsersResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:124
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:315
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:132
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/me\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @NoCache\n"
"    public User me() {\n"
"        return new User(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:134
#, no-wrap
msgid "    public static class User {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:136
#, no-wrap
msgid "        private final String userName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:140
#, no-wrap
msgid ""
"        User(SecurityIdentity identity) {\n"
"            this.userName = identity.getPrincipal().getName();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:146
#, no-wrap
msgid ""
"        public String getUserName() {\n"
"            return userName;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:149
msgid "The source code for the `/api/admin` endpoint is also very simple:"
msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:158
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:160
#, no-wrap
msgid "import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:164
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"@Authenticated\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:171
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:175
msgid "Note that we did not define any annotation such as `@RoleAllowed` to explicitly enforce access to a resource.  The extension will be responsible to map the URIs of the protected resources you have in Keycloak and evaluate the permissions accordingly, granting or denying access depending on the permissions that will be granted by Keycloak."
msgstr "リソースへのアクセスを明示的に強制するために `@RoleAllowed` のようなアノテーションは定義していないことに注意してください。このエクステンションは、Keycloakに保存されている、保護されているリソースのURIをマッピングし、 Keycloakで付与されるパーミッションに応じてアクセスを許可したり拒否したりして、パーミッションを評価します。"

#. type: Title ===
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:176
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:179
msgid "The OpenID Connect extension allows you to define the adapter configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr "OpenID Connect エクステンションを使用すると、`src/main/resources` ディレクトリーに配置される `application.properties` ファイルを使用してアダプター設定を定義することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:186
#, no-wrap
msgid ""
"# OIDC Configuration\n"
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:189
#, no-wrap
msgid ""
"# Enable Policy Enforcement\n"
"quarkus.keycloak.policy-enforcer.enable=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:192
msgid "By default, applications using the `quarkus-oidc` extension are marked as a `service` type application (see `quarkus.oidc.application-type`). This extension currently supports only such `service` type applications."
msgstr "デフォルトでは、 `quarkus-oidc` エクステンションを使用するアプリケーションは `service` タイプのアプリケーションとしてマークされます ( `quarkus.oidc.application-type` を参照)。このエクステンションは現在、そのような `service` タイプのアプリケーションのみをサポートしています。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:193
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:196
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:200
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 {keycloak-docker-image}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:203
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr "Keycloakサーバーには、 link:http://localhost:8180/auth[localhost:8180/auth] でアクセスできるはずです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:209
msgid "Import the {quickstarts-tree-url}/security-keycloak-authorization-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.  For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "{quickstarts-tree-url}/security-keycloak-authorization-quickstart/config/quarkus-realm.json[realm設定ファイル]をインポートして、新しいrealmを作成します。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムを作成する] 方法についてのKeycloakのドキュメントを参照してください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:210
#, no-wrap
msgid "Running and Using the Application"
msgstr "アプリケーションの実行と使用"

#. type: Title ===
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:212
#, no-wrap
msgid "Running in Developer Mode"
msgstr "デベロッパーモードでの実行"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:215
msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr "マイクロサービスをdevモードで実行するには、 `./mvnw clean compile quarkus:dev` を使用します。"

#. type: Title ===
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:216
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:219
msgid "When you're done playing with \"dev-mode\" you can run it as a standard Java application."
msgstr "\"dev-mode\" で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:221
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:225
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:228
msgid "Then run it:"
msgstr "次に、以下を実行してください。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:232
#, no-wrap
msgid "java -jar ./target/security-keycloak-authorization-quickstart-runner.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:234
#, no-wrap
msgid "Running in Native Mode"
msgstr "ネイティブモードでの実行"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:237
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:239
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:241
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:245
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr "./mvnw package -Pnative\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:248
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:252
#, no-wrap
msgid "./target/security-keycloak-authorization-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:254
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:257
msgid "The application is using bearer token authorization and the first thing to do is obtain an access token from the Keycloak Server in order to access the application resources:"
msgstr "アプリケーションはベアラートークン認可を使用しており、まず最初に行うべきことは、アプリケーションのリソースにアクセスするためにKeycloak サーバーからアクセストークンを取得することです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:266
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl -X POST http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:269
msgid "The example above obtains an access token for user `alice`."
msgstr "上記の例では、ユーザー `alice` のアクセストークンを取得しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:273
msgid "Any user is allowed to access the `http://localhost:8080/api/users/me` endpoint which basically returns a JSON payload with details about the user."
msgstr "どのユーザーでも `http://localhost:8080/api/users/me` エンドポイントで、基本的にはユーザーに関する詳細な情報を含む JSON ペイロードを返します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:279
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/api/users/me \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:283
msgid "The `http://localhost:8080/api/admin` endpoint can only be accessed by users with the `admin` role.  If you try to access this endpoint with the previously issued access token, you should get a `403` response from the server."
msgstr "`http://localhost:8080/api/admin` エンドポイントは、 `admin` ロールを持つユーザーのみがアクセスできます。先程発行されたアクセストークンを使用してこのエンドポイントにアクセスしようとすると、サーバーから `403` 応答が返ってくるはずです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:289
#, no-wrap
msgid ""
" curl -v -X GET \\\n"
"   http://localhost:8080/api/admin \\\n"
"   -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:292
msgid "In order to access the admin endpoint you should obtain a token for the `admin` user:"
msgstr "admin エンドポイントにアクセスするには、 `admin` ユーザーのトークンを取得する必要があります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:301
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl -X POST http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:303
#, no-wrap
msgid "Checking Permissions Programmatically"
msgstr "プログラムで権限をチェックする"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:307
msgid "In some cases, you may want to programmatically check whether or not a request is granted to access a protected resource. By injecting a `SecurityIdentity` instance in your beans, you are allowed to check permissions as follows:"
msgstr "場合によっては、保護されたリソースにアクセスするためのリクエストが許可されているかどうかを プログラムでチェックしたいこともあるでしょう。Beanに `SecurityIdentity` インスタンスを注入することで、以下のようにパーミッションをチェックすることができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:312
#, no-wrap
msgid ""
"@Path(\"/api/protected\")\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:329
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public CompletionStage<List<Permission>> get() {\n"
"        return identity.checkPermission(new AuthPermission(\"{resource_name}\"))\n"
"                .thenCompose(granted -> {\n"
"                    if (granted) {\n"
"                        return CompletableFuture.completedFuture(doGetState());\n"
"                    }\n"
"                    throw new ForbiddenException();\n"
"                });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:331
#, no-wrap
msgid "Mapping Protected Resources"
msgstr "保護リソースのマッピング"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:334
msgid "By default, the extension is going to fetch resources on-demand from Keycloak where their `URI` are used to map the resources in your application that should be protected."
msgstr "デフォルトでは、エクステンションは Keycloak からオンデマンドでリソースを取得します。 `URI` は、保護されるべきアプリケーション内のリソースをマップするために使用されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:336
msgid "If you want to disable this behavior and fetch resources during startup, you can use the following configuration:"
msgstr "この動作を無効にして、起動時にリソースをフェッチしたい場合は、以下の設定を使用します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:340
#, no-wrap
msgid "quarkus.keycloak.policy-enforcer.lazy-load-paths=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:343
msgid "Note that, depending on how many resources you have in Keycloak the time taken to fetch them may impact your application startup time."
msgstr "Keycloakにあるリソースの数によっては、それらを取得するのにかかる時間がアプリケーションの起動時間に影響することに注意してください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:344
#, no-wrap
msgid "More About Configuring Protected Resources "
msgstr "保護されたリソースの設定についてさらに詳しく"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:347
msgid "In the default configuration, Keycloak is responsible for managing the roles and deciding who can access which routes."
msgstr "デフォルトの構成では、Keycloakはロールを管理し、誰がどのルートにアクセスできるかを決定します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:349
msgid "To configure the protected routes using the `@RolesAllowed` annotation or the `application.properties` file, check the link:security-openid-connect[Using OpenID Connect Adapter to Protect JAX-RS Applications] guide. For more details, check the link:security[Security guide]."
msgstr "`@RolesAllowed` アノテーションまたは `application.properties` ファイルを使用して保護されたルートを構成するには、「 link:security-openid-connect[Using OpenID Connect Adapter to Protect JAX-RS Applications] 」ガイドを確認してください。詳細については、 link:security[セキュリティー] ガイドを確認してください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:350
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:353
msgid "The configuration is based on the official https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_filter[Keycloak Policy Enforcer Configuration]. If you are looking for more details about the different configuration options, please take a look at this documentation,"
msgstr "この設定は、 link:https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_filter[Keycloak Policy Enforcer] の公式設定に基づいています。異なる設定オプションについての詳細をお探しの方は、こちらのドキュメントをご覧ください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:356
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:359
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:360
msgid "https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:361
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:362
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-keycloak-authorization.adoc:362
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus Security]"
