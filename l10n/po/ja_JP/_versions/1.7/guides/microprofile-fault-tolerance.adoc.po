# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:6
#, no-wrap
msgid "Quarkus - Fault Tolerance"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:13
msgid "One of the challenges brought by the distributed nature of microservices is that communication with external systems is inherently unreliable. This increases demand on resiliency of applications. To simplify making more resilient applications, Quarkus contains an implementation of the MicroProfile Fault Tolerance specification."
msgstr "マイクロサービスの分散型の性質がもたらす課題の1つは、外部システムとの通信が本質的に信頼性が低いことです。これにより、アプリケーションの回復力に対する要求が高まります。より回復力の高いアプリケーションを簡単に作成するために、QuarkusにはMicroProfile Fault Tolerance仕様の実装が含まれています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:16
msgid "In this guide, we demonstrate usage of MicroProfile Fault Tolerance annotations such as `@Timeout`, `@Fallback`, `@Retry` and `@CircuitBreaker`."
msgstr "このガイドでは、 `@Timeout` , `@Fallback` , `@Retry` および `@CircuitBreaker` などの MicroProfile Fault Tolerance アノテーションの使用法を説明します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:20
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:22
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:23
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:24
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:25
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:26
#, no-wrap
msgid "The Scenario"
msgstr "シナリオ"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:30
msgid "The application built in this guide simulates a simple backend for a gourmet coffee e-shop. It implements a REST endpoint providing information about coffee samples we have on store."
msgstr "このガイドで構築されたアプリケーションは、グルメコーヒーのeショップのためのシンプルなバックエンドをシミュレートします。これは、店舗にあるコーヒーサンプルに関する情報を提供する REST エンドポイントを実装しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:33
msgid "Let's imagine, although it's not implemented as such, that some of the methods in our endpoint require communication to external services like a database or an external microservice, which introduces a factor of unreliability."
msgstr "このように実装されてはいませんが、エンドポイント内のメソッドの一部がデータベースや外部マイクロサービスなどの外部サービスとの通信を必要とし、信頼性の低い要素を導入していることを想像してみましょう。"

#. type: Title ==
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:34
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:38
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:40
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:42
msgid "The solution is located in the `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory]."
msgstr "ソリューションは `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:43
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:46
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:56
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=microprofile-fault-tolerance-quickstart \\\n"
"    -DclassName=\"org.acme.microprofile.faulttolerance.CoffeeResource\" \\\n"
"    -Dpath=\"/coffee\" \\\n"
"    -Dextensions=\"smallrye-fault-tolerance, resteasy-jsonb\"\n"
"cd microprofile-fault-tolerance-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:60
msgid "This command generates a Maven structure, importing the extensions for RESTEasy/JAX-RS and SmallRye Fault Tolerance, which is an implementation of the MicroProfile Fault Tolerance spec that Quarkus uses."
msgstr "このコマンドは、RESTEasy/JAX-RSとSmallRye Fault ToleranceのエクステンションをインポートしてMaven構造体を生成し、Quarkusが使用するMicroProfile Fault Tolerance仕様の実装です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:63
msgid "If you already have your Quarkus project configured, you can add the `smallrye-fault-tolerance` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `smallrye-fault-tolerance` エクステンションを追加することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:67
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:462
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"smallrye-fault-tolerance\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:70
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:77
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:471
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-fault-tolerance</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:79
#, no-wrap
msgid "Preparing an Application: REST Endpoint and CDI Bean"
msgstr "アプリケーションの準備: RESTエンドポイントとCDI Bean"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:83
msgid "In this section we create a skeleton of our application, so that we have something that we can extend and to which we can add fault tolerance features later on."
msgstr "このセクションでは、後でフォールトトレランス機能を追加できるよう、拡張可能なようにアプリケーションの骨組を作成します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:85
msgid "First, create a simple entity representing a coffee sample in our store:"
msgstr "まず、店舗内のコーヒーサンプルを表すシンプルなエンティティーを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:89
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:114
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:159
#, no-wrap
msgid "package org.acme.microprofile.faulttolerance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:91
#, no-wrap
msgid "public class Coffee {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:96
#, no-wrap
msgid ""
"    public Integer id;\n"
"    public String name;\n"
"    public String countryOfOrigin;\n"
"    public Integer price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:99
#, no-wrap
msgid ""
"    public Coffee() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:107
#, no-wrap
msgid ""
"    public Coffee(Integer id, String name, String countryOfOrigin, Integer price) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"        this.countryOfOrigin = countryOfOrigin;\n"
"        this.price = price;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:110
msgid "Let's continue with a simple CDI bean, that would work as a repository of our coffee samples."
msgstr "コーヒーサンプルのリポジトリとして機能するシンプルな CDI Beanを続けてみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:122
#, no-wrap
msgid ""
"import java.util.ArrayList;\n"
"import java.util.Collections;\n"
"import java.util.HashMap;\n"
"import java.util.List;\n"
"import java.util.Map;\n"
"import java.util.stream.Collectors;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:125
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CoffeeRepositoryService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:127
#, no-wrap
msgid "    private Map<Integer, Coffee> coffeeList = new HashMap<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:133
#, no-wrap
msgid ""
"    public CoffeeRepositoryService() {\n"
"        coffeeList.put(1, new Coffee(1, \"Fernandez Espresso\", \"Colombia\", 23));\n"
"        coffeeList.put(2, new Coffee(2, \"La Scala Whole Beans\", \"Bolivia\", 18));\n"
"        coffeeList.put(3, new Coffee(3, \"Dak Lak Filter\", \"Vietnam\", 25));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:137
#, no-wrap
msgid ""
"    public List<Coffee> getAllCoffees() {\n"
"        return new ArrayList<>(coffeeList.values());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:141
#, no-wrap
msgid ""
"    public Coffee getCoffeeById(Integer id) {\n"
"        return coffeeList.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:152
#, no-wrap
msgid ""
"    public List<Coffee> getRecommendations(Integer id) {\n"
"        if (id == null) {\n"
"            return Collections.emptyList();\n"
"        }\n"
"        return coffeeList.values().stream()\n"
"                .filter(coffee -> !id.equals(coffee.id))\n"
"                .limit(2)\n"
"                .collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:155
msgid "Finally, edit the `org.acme.microprofile.faulttolerance.CoffeeResource` class as follows:"
msgstr "最後に、 `org.acme.microprofile.faulttolerance.CoffeeResource` クラスを以下のように編集します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:168
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.Random;\n"
"import java.util.concurrent.atomic.AtomicLong;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:170
#, no-wrap
msgid "import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:174
#, no-wrap
msgid ""
"@Path(\"/coffee\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class CoffeeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:176
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(CoffeeResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:179
#, no-wrap
msgid ""
"    @Inject\n"
"    private CoffeeRepositoryService coffeeRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:181
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:377
#, no-wrap
msgid "    private AtomicLong counter = new AtomicLong(0);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:185
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Coffee> coffees() {\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:187
#, no-wrap
msgid "        maybeFail(String.format(\"CoffeeResource#coffees() invocation #%d failed\", invocationNumber));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:191
#, no-wrap
msgid ""
"        LOGGER.infof(\"CoffeeResource#coffees() invocation #%d returning successfully\", invocationNumber);\n"
"        return coffeeRepository.getAllCoffees();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:199
#, no-wrap
msgid ""
"    private void maybeFail(String failureLogMessage) {\n"
"        if (new Random().nextBoolean()) {\n"
"            LOGGER.error(failureLogMessage);\n"
"            throw new RuntimeException(\"Resource failure.\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:204
msgid "At this point, we expose a single REST method that will show a list of coffee samples in a JSON format. Note that we introduced some fault making code in our `CoffeeResource#maybeFail()` method, which is going to cause failures in the `CoffeeResource#coffees()` endpoint method in about 50 % of requests."
msgstr "この時点で、コーヒーサンプルのリストを JSON 形式で表示する単一の REST メソッドを公開しています。 `CoffeeResource#maybeFail()` メソッドにいくつかの障害を発生させるコードを導入したことに注意してください。これにより、リクエストの約 50 % で `CoffeeResource#coffees()` エンドポイントメソッドに障害が発生します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:206
msgid "Why not check that our application works? Run the Quarkus development server with:"
msgstr "アプリケーションが動作することを確認してみませんか? Quarkus開発サーバーを以下のコマンドで実行します:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:210
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr "./mvnw compile quarkus:dev\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:215
msgid "and open `http://localhost:8080/coffee` in your browser. Make couple of requests (remember, some of them we expect to fail). At least some of the requests should show us the list of our coffee samples in JSON, the rest will fail with a `RuntimeException` thrown in `CoffeeResource#maybeFail()`."
msgstr "そして `http://localhost:8080/coffee` をブラウザで開いてください。いくつかのリクエストをしてみてください (いくつかは失敗することが予想されることを覚えておいてください)。少なくともいくつかのリクエストでは、コーヒーサンプルのリストを JSON で表示するでしょう、そして残りのリクエストでは `RuntimeException` が `CoffeeResource#maybeFail()` で発生するでしょう。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:217
msgid "Congratulations, you've just made a working (although somewhat unreliable) Quarkus application!"
msgstr "おめでとうございます。（いくらか不安定ですが）動作するQuarkus アプリケーションが出来ました!"

#. type: Title ==
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:218
#, no-wrap
msgid "Adding Resiliency: Retries"
msgstr "レジリエンスの追加: 再試行"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:222
msgid "Let the Quarkus development server running and in your IDE add the `@Retry` annotation to the `CoffeeResource#coffees()` method as follows and save the file:"
msgstr "Quarkusの開発サーバーを稼働させ、IDEで以下のように `CoffeeResource#coffees()` メソッドに `@Retry` アノテーションを追加し、ファイルを保存します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:227
#, no-wrap
msgid ""
"import org.eclipse.microprofile.faulttolerance.Retry;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:237
#, no-wrap
msgid ""
"public class CoffeeResource {\n"
"    ...\n"
"    @GET\n"
"    @Retry(maxRetries = 4)\n"
"    public List<Coffee> coffees() {\n"
"        ...\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:241
msgid "Hit refresh in your browser. The Quarkus development server will automatically detect the changes and recompile the app for you, so there's no need to restart it."
msgstr "ブラウザの更新を実行します。Quarkusの開発サーバーが自動的に変更を検出してアプリを再コンパイルしてくれるので、再起動する必要はありません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:245
msgid "You can hit refresh couple more times. Practically all requests should now be succeeding. The `CoffeeResource#coffees()` method is still in fact failing in about 50 % of time, but every time it happens, the platform will automatically retry the call!"
msgstr "もう何度か更新ボタンを押してください。実質的にすべてのリクエストが成功しているはずです。 `CoffeeResource#coffees()` メソッドは、実際にはまだ約 50% の時間で失敗していますが、そのたびにプラットフォームは自動的に呼び出しを再試行します!"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:248
msgid "To see that that the failures still happen, check the output of the development server. The log messages should be similar to these:"
msgstr "障害がまだ発生していることを確認するには、開発サーバーの出力を確認してください。ログメッセージは以下のようになっているはずです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:256
#, no-wrap
msgid ""
"2019-03-06 12:17:41,725 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #5 returning successfully\n"
"2019-03-06 12:17:44,187 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #6 returning successfully\n"
"2019-03-06 12:17:45,166 ERROR [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #7 failed\n"
"2019-03-06 12:17:45,172 ERROR [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #8 failed\n"
"2019-03-06 12:17:45,176 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #9 returning successfully\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:261
msgid "You can see that every time an invocation fails, it's immediately followed by another invocation, until one succeeds.  Since we allowed 4 retries, it would require 5 invocations to fail in a row, in order for the user to be actually exposed to a failure. Which is fairly unlikely to happen."
msgstr "呼び出しが失敗するたびに、すぐに別の呼び出しが成功するまで続いていることがわかります。4回のリトライを許可しているので、ユーザーが実際に失敗にさらされるためには、5回の呼び出しが連続して失敗する必要があります。これは起こりそうもないことです。"

#. type: Title ==
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:262
#, no-wrap
msgid "Adding Resiliency: Timeouts"
msgstr "レジリエンスの追加: タイムアウト"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:265
msgid "So what else have we got in MicroProfile Fault Tolerance? Let's look into timeouts."
msgstr "では、MicroProfile の耐障害性には他に何があるのでしょうか?タイムアウトについて見てみましょう。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:268
msgid "Add following two methods to our `CoffeeResource` endpoint. Again, no need to restart the server, just paste the code and save the file."
msgstr "`CoffeeResource` エンドポイントに以下の 2 つのメソッドを追加します。ここでもサーバーを再起動する必要はなく、コードを貼り付けてファイルを保存するだけです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:282
#, no-wrap
msgid ""
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
"import org.eclipse.microprofile.faulttolerance.Timeout;\n"
"...\n"
"public class CoffeeResource {\n"
"    ...\n"
"    @GET\n"
"    @Path(\"/{id}/recommendations\")\n"
"    @Timeout(250)\n"
"    public List<Coffee> recommendations(@PathParam int id) {\n"
"        long started = System.currentTimeMillis();\n"
"        final long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:293
#, no-wrap
msgid ""
"        try {\n"
"            randomDelay();\n"
"            LOGGER.infof(\"CoffeeResource#recommendations() invocation #%d returning successfully\", invocationNumber);\n"
"            return coffeeRepository.getRecommendations(id);\n"
"        } catch (InterruptedException e) {\n"
"            LOGGER.errorf(\"CoffeeResource#recommendations() invocation #%d timed out after %d ms\",\n"
"                    invocationNumber, System.currentTimeMillis() - started);\n"
"            return null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:298
#, no-wrap
msgid ""
"    private void randomDelay() throws InterruptedException {\n"
"        Thread.sleep(new Random().nextInt(500));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:304
msgid "We added some new functionality. We want to be able to recommend some related coffees based on a coffee that a user is currently looking at. It's not a critical functionality, it's a nice-to-have. When the system is overloaded and the logic behind obtaining recommendations takes too long to execute, we would rather time out and render the UI without recommendations."
msgstr "いくつかの新しい機能を追加しました。ユーザーが現在見ているコーヒーに基づいて、関連するコーヒーをお勧めできるようにしたいのです。これは重要な機能ではなく、あれば望ましい機能です。システムに負荷がかかり、おすすめ情報を得るためのロジックの実行に時間がかかりすぎる場合は、むしろタイムアウトしておすすめ情報のないUIを表示したいと考えています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:307
msgid "Note that the timeout was configured to 250 ms, and a random artificial delay between 0 to 500 ms was introduced into the `CoffeeResource#recommendations()` method."
msgstr "なお、タイムアウトは250msに設定し、0～500msのランダムな人工的な遅延を `CoffeeResource#recommendations()` メソッドに導入しました。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:309
msgid "In your browser, go to `http://localhost:8080/coffee/2/recommendations` and hit refresh a couple of times."
msgstr "お使いのブラウザで `http://localhost:8080/coffee/2/recommendations` にアクセスして、2、3回更新してください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:312
msgid "You should see some requests time out with `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`.  Requests that do not time out should show two recommended coffee samples in JSON."
msgstr "`org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException` でいくつかのリクエストがタイムアウトになるはずです。タイムアウトにならなかったリクエストでは、JSONに2つのおすすめコーヒーサンプルが表示されます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:313
#, no-wrap
msgid "Adding Resiliency: Fallbacks"
msgstr "レジリエンスの追加: フォールバック"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:317
msgid "Let's make our recommendations feature even better by providing a fallback (and presumably faster) way of getting related coffees."
msgstr "関連するコーヒーを入手するための代替手段（おそらくより迅速な方法）を提供することで、おすすめ機能をさらに改善しましょう。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:320
msgid "Add a fallback method to `CoffeeResource` and a `@Fallback` annotation to `CoffeeResource#recommendations()` method as follows:"
msgstr "`CoffeeResource` にフォールバック・メソッドを、 `CoffeeResource#recommendations()` メソッドに `@Fallback` アノテーションを以下のように追加します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:332
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import org.eclipse.microprofile.faulttolerance.Fallback;\n"
"...\n"
"public class CoffeeResource {\n"
"    ...\n"
"    @Fallback(fallbackMethod = \"fallbackRecommendations\")\n"
"    public List<Coffee> recommendations(@PathParam int id) {\n"
"        ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:340
#, no-wrap
msgid ""
"    public List<Coffee> fallbackRecommendations(int id) {\n"
"        LOGGER.info(\"Falling back to RecommendationResource#fallbackRecommendations()\");\n"
"        // safe bet, return something that everybody likes\n"
"        return Collections.singletonList(coffeeRepository.getCoffeeById(1));\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:346
msgid "Hit refresh several times on `http://localhost:8080/coffee/2/recommendations`.  The `TimeoutException` should not appear anymore. Instead, in case of a timeout, the page will display a single recommendation that we hardcoded in our fallback method `fallbackRecommendations()`, rather than two recommendations returned by the original method."
msgstr "`http://localhost:8080/coffee/2/recommendations` を何回も更新してください。 `TimeoutException` はもう表示されないはずです。代わりに、タイムアウトが発生した場合、元のメソッドが返す2つのレコメンデーションではなく、フォールバックメソッド `fallbackRecommendations()` にハードコードされた1つのレコメンデーションが表示されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:348
msgid "Check the server output to see that fallback is really happening:"
msgstr "フォールバックが本当に行われているかどうか、サーバーの出力を確認してください。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:354
#, no-wrap
msgid ""
"2020-01-09 13:21:34,250 INFO  [org.acm.fau.CoffeeResource] (executor-thread-1) CoffeeResource#recommendations() invocation #1 returning successfully\n"
"2020-01-09 13:21:36,354 ERROR [org.acm.fau.CoffeeResource] (executor-thread-1) CoffeeResource#recommendations() invocation #2 timed out after 250 ms\n"
"2020-01-09 13:21:36,355 INFO  [org.acm.fau.CoffeeResource] (executor-thread-1) Falling back to RecommendationResource#fallbackRecommendations()\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:357
msgid "The fallback method is required to have the same parameters as the original method."
msgstr "フォールバックメソッドには、元のメソッドと同じパラメータが必要です。"

#. type: Title ==
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:358
#, no-wrap
msgid "Adding Resiliency: Circuit Breaker"
msgstr "レジリエンスの追加: サーキットブレーカー"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:364
msgid "A circuit breaker is useful for limiting number of failures happening in the system, when part of the system becomes temporarily unstable. The circuit breaker records successful and failed invocations of a method, and when the ratio of failed invocations reaches the specified threshold, the circuit breaker _opens_ and blocks all further invocations of that method for a given time."
msgstr "サーキットブレーカーは，システムの一部が一時的に不安定になったときに，システム内で発生する障害の数を制限するのに有効です。サーキットブレーカーは、あるメソッドの成功と失敗を記録し、失敗したメソッドの割合が指定された閾値に達すると、サーキットブレーカーが _開き_、それ以降のメソッドの呼び出しを一定時間ブロックします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:366
msgid "Add the following code into the `CoffeeRepositoryService` bean, so that we can demonstrate a circuit breaker in action:"
msgstr "次のコードを `CoffeeRepositoryService` ビーンに追加して、サーキットブレーカーの動作をデモできるようにします。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:372
#, no-wrap
msgid ""
"import java.util.concurrent.atomic.AtomicLong;\n"
"import org.eclipse.microprofile.faulttolerance.CircuitBreaker;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:375
#, no-wrap
msgid ""
"public class CoffeeRepositoryService {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:383
#, no-wrap
msgid ""
"    @CircuitBreaker(requestVolumeThreshold = 4)\n"
"    public Integer getAvailability(Coffee coffee) {\n"
"        maybeFail();\n"
"        return new Random().nextInt(30);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:392
#, no-wrap
msgid ""
"    private void maybeFail() {\n"
"        // introduce some artificial failures\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
"        if (invocationNumber % 4 > 1) { // alternate 2 successful and 2 failing invocations\n"
"            throw new RuntimeException(\"Service failed.\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:395
msgid "And inject the code below into the `CoffeeResource` endpoint:"
msgstr "そして、以下のコードを `CoffeeResource` のエンドポイントに注入します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:404
#, no-wrap
msgid ""
"public class CoffeeResource {\n"
"    ...\n"
"    @Path(\"/{id}/availability\")\n"
"    @GET\n"
"    public Response availability(@PathParam int id) {\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:410
#, no-wrap
msgid ""
"        Coffee coffee = coffeeRepository.getCoffeeById(id);\n"
"        // check that coffee with given id exists, return 404 if not\n"
"        if (coffee == null) {\n"
"            return Response.status(Response.Status.NOT_FOUND).build();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:426
#, no-wrap
msgid ""
"        try {\n"
"            Integer availability = coffeeRepository.getAvailability(coffee);\n"
"            LOGGER.infof(\"CoffeeResource#availability() invocation #%d returning successfully\", invocationNumber);\n"
"            return Response.ok(availability).build();\n"
"        } catch (RuntimeException e) {\n"
"            String message = e.getClass().getSimpleName() + \": \" + e.getMessage();\n"
"            LOGGER.errorf(\"CoffeeResource#availability() invocation #%d failed: %s\", invocationNumber, message);\n"
"            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)\n"
"                    .entity(message)\n"
"                    .type(MediaType.TEXT_PLAIN_TYPE)\n"
"                    .build();\n"
"        }\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:430
msgid "We added another functionality - the application can return the amount of remaining packages of given coffee on our store (just a random number)."
msgstr "もう一つの機能を追加しました。このアプリケーションは、私たちの店における、指定されたコーヒーの残りのパッケージの量を返すことができます（単なる乱数です）。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:433
msgid "This time an artificial failure was introduced in the CDI bean: the `CoffeeRepositoryService#getAvailability()` method is going to alternate between two successful and two failed invocations."
msgstr "今回は、CDIビーンに人工的な失敗を導入しました。 `CoffeeRepositoryService#getAvailability()` メソッドは、2回の成功と2回の失敗の呼び出しを交互に行うことになります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:437
msgid "We also added a `@CircuitBreaker` annotation with `requestVolumeThreshold = 4`. `CircuitBreaker.failureRatio` is by default 0.5, and `CircuitBreaker.delay` is by default 5 seconds. That means that a circuit breaker will open when 2 of the last 4 invocations failed and it will stay open for 5 seconds."
msgstr "また、 `requestVolumeThreshold = 4` と一緒に `@CircuitBreaker` のアノテーションを追加しました。 `CircuitBreaker.failureRatio` はデフォルトで 0.5 秒、 `CircuitBreaker.delay` はデフォルトで 5 秒です。つまり、過去4回の起動のうち2回が失敗したときにサーキットブレーカーが開き、5秒間その状態が続くということです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:439
msgid "To test this out, do the following:"
msgstr "これを試すには、次のようにします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:441
msgid "Go to `http://localhost:8080/coffee/2/availability` in your browser. You should see a number being returned."
msgstr " `http://localhost:8080/coffee/2/availability` をブラウザで開いて下さい。数字が返ってくるのが見えるでしょう。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:442
msgid "Hit refresh, this second request should again be successful and return a number."
msgstr "リフレッシュすると、この2回目のリクエストが再び成功し、数字が返ってくるはずです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:444
msgid "Refresh two more times. Both times you should see text \"RuntimeException: Service failed.\", which is the exception thrown by `CoffeeRepositoryService#getAvailability()`."
msgstr "さらに2回リフレッシュします。2回とも、\"RuntimeException:Service failed.\" というテキストが表示されます。これは、 `CoffeeRepositoryService#getAvailability()` によってスローされる例外です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:447
msgid "Refresh a couple more times. Unless you waited too long, you should again see exception, but this time it's \"CircuitBreakerOpenException: getAvailability\". This exception indicates that the circuit breaker opened and the `CoffeeRepositoryService#getAvailability()` method is not being called anymore."
msgstr "さらに数回更新します。長く待ちすぎていなければ、再び例外が表示されるはずですが、今回は \"CircuitBreakerOpenException: getAvailability\" となっています。この例外は、サーキットブレーカーが開き、 `CoffeeRepositoryService#getAvailability()` メソッドが呼び出されなくなったことを示しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:449
msgid "Give it 5 seconds during which circuit breaker should close and you should be able to make two successful requests again."
msgstr "5秒後にサーキットブレーカーが閉じて、再び2回のリクエストを成功させることができます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:450
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:454
msgid "MicroProfile Fault Tolerance allows to improve resiliency of your application, without having an impact on the complexity of our business logic."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:456
msgid "All that is needed to enable the fault tolerance features in Quarkus is:"
msgstr "Quarkusのフォールトトレランス機能を有効にするために必要なのは"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:458
msgid "adding the `smallrye-fault-tolerance` Quarkus extension to your project using the `quarkus-maven-plugin`:"
msgstr "`quarkus-maven-plugin` で `smallrye-fault-tolerance` Quarkus エクステンションをプロジェクトに追加することです :"

#. type: Plain text
#: upstream/_versions/1.7/guides/microprofile-fault-tolerance.adoc:464
msgid "or simply adding the following Maven dependency:"
msgstr "または、以下のMavenの依存関係を単純に追加することもできます。"
