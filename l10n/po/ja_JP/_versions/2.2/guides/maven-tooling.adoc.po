# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-12 13:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:6
#, no-wrap
msgid "Building applications with Maven"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/maven-tooling.adoc:11
#, no-wrap
msgid "Creating a new project"
msgstr "新規プロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:14
msgid "With Maven, you can scaffold a new project with:"
msgstr "Mavenを使えば、新しいプロジェクトをスキャフォールド(足場の作成)できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:22
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=my-groupId \\\n"
"    -DprojectArtifactId=my-artifactId \\\n"
"    -DprojectVersion=my-version \\\n"
"    -DclassName=\"org.my.group.MyResource\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:26
msgid "If you just launch `mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create` the Maven plugin asks for user inputs. You can disable (and use default values) this interactive mode by passing `-B` to the Maven command."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:28
msgid "The following table lists the attributes you can pass to the `create` command:"
msgstr "次の表は、 `create`  コマンドに渡すことができる属性の一覧です。"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:32
#, no-wrap
msgid "Attribute"
msgstr "属性"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:33
#: upstream/_versions/2.2/guides/maven-tooling.adoc:851
#, no-wrap
msgid "Default Value"
msgstr "デフォルト値"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:35
#: upstream/_versions/2.2/guides/maven-tooling.adoc:853
#, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:36
#, no-wrap
msgid "`projectGroupId`"
msgstr "`projectGroupId`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:37
#, no-wrap
msgid "`org.acme.sample`"
msgstr "`org.acme.sample`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:39
#, no-wrap
msgid "The group id of the created project"
msgstr "作成されたプロジェクトのグループID"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:40
#, no-wrap
msgid "`projectArtifactId`"
msgstr "`projectArtifactId`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:41
#, no-wrap
msgid "_mandatory_"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:43
#, no-wrap
msgid "The artifact id of the created project. Not passing it triggers the interactive mode."
msgstr "作成されたプロジェクトのアーティファクトID。これを渡さないと、インタラクティブモードがトリガされます。"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:44
#, no-wrap
msgid "`projectVersion`"
msgstr "`projectVersion`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:45
#, no-wrap
msgid "`1.0.0-SNAPSHOT`"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:47
#, no-wrap
msgid "The version of the created project"
msgstr "作成されたプロジェクトのバージョン"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:48
#, no-wrap
msgid "`platformGroupId`"
msgstr "`platformGroupId`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:49
#, no-wrap
msgid "`io.quarkus.platform`"
msgstr "`io.quarkus.platform`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:51
#, no-wrap
msgid "The group id of the target platform."
msgstr "ターゲットプラットフォームのグループID"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:52
#, no-wrap
msgid "`platformArtifactId`"
msgstr "`platformArtifactId`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:53
#, no-wrap
msgid "`quarkus-bom`"
msgstr "`quarkus-bom`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:55
#, no-wrap
msgid "The artifact id of the target platform BOM."
msgstr "ターゲットプラットフォームBOMのアーティファクトID"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:56
#, no-wrap
msgid "`platformVersion`"
msgstr "`platformVersion`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:57
#, no-wrap
msgid "The version currently recommended by the https://quarkus.io/guides/extension-registry-user[Quarkus Extension Registry]"
msgstr "現在、 link:https://quarkus.io/guides/extension-registry-user[Quarkus Extension Registry]で推奨されているバージョン"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:59
#, no-wrap
msgid "The version of the platform you want the project to use. It can also accept a version range, in which case the latest from the specified range will be used."
msgstr "プロジェクトで使用したいプラットフォームのバージョンを指定します。バージョンの範囲を指定することもでき、その場合は指定した範囲の最新のものが使用されます。"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:60
#, no-wrap
msgid "`className`"
msgstr "`className`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:61
#, no-wrap
msgid "_Not created if omitted_"
msgstr "_省略された場合は作成されない_"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:63
#, no-wrap
msgid "The fully qualified name of the generated resource"
msgstr "生成されたリソースの完全修飾名"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:64
#, no-wrap
msgid "`path`"
msgstr "`path`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:65
#, no-wrap
msgid "`/hello`"
msgstr "`/hello`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:67
#, no-wrap
msgid "The resource path, only relevant if `className` is set."
msgstr "リソースパス、 `className` が設定されている場合のみ関連します。"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:68
#, no-wrap
msgid "`extensions`"
msgstr "`extensions`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:69
#, no-wrap
msgid "_[]_"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:71
#, no-wrap
msgid "The list of extensions to add to the project (comma-separated)"
msgstr "プロジェクトに追加するエクステンションのリスト (カンマ区切り)"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:74
msgid "By default, the command will target the `io.quarkus.platform:quarkus-bom:{quarkus-version}` platform release (unless the coordinates of the desired platform release have been specified)."
msgstr "デフォルトでは、コマンドは `io.quarkus.platform:quarkus-bom:{quarkus-version}` のプラットフォーム・リリースをターゲットにします（希望するプラットフォーム・リリースの座標が指定されていない場合）。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:77
msgid "If you decide to generate a REST resource (using the `className` attribute), the endpoint is exposed at: `http://localhost:8080/$path`.  If you use the default `path`, the URL is: http://localhost:8080/hello."
msgstr "REST リソースを生成することにした場合 ( `className` 属性を使用)、エンドポイントは次の場所で公開されます: `http://localhost:8080/$path` 。デフォルトの `path` を使用する場合、URL は http://localhost:8080/hello です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:80
msgid "The project is generated in a directory named after the passed artifactId.  If the directory already exists, the generation fails."
msgstr "プロジェクトは、渡された artifactId にちなんだ名前のディレクトリーに生成されます。ディレクトリーが既に存在する場合は、生成に失敗します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:83
msgid "A pair of Dockerfiles for native and jvm mode are also generated in `src/main/docker`.  Instructions to build the image and run the container are written in those Dockerfiles."
msgstr "ネイティブモードと jvm モード用の Dockerfile も `src/main/docker`  に生成されています。イメージのビルドとコンテナーの実行の指示は、これらの Dockerfile に書かれています。"

#. type: Title ==
#: upstream/_versions/2.2/guides/maven-tooling.adoc:84
#, no-wrap
msgid "Dealing with extensions"
msgstr "エクステンションへの対応"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:87
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr "Quarkusプロジェクトの内部から、利用可能なエクステンションのリストを取得することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:91
#, no-wrap
msgid "./mvnw quarkus:list-extensions\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:94
msgid "You can enable an extension using:"
msgstr "以下を使ってエクステンションを有効化できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:98
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"hibernate-validator\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:101
msgid "Extensions are passed using a comma-separated list."
msgstr "エクステンションは、カンマ区切りのリストを使用して渡されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:106
msgid "The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.  But you can pass a partial name and Quarkus will do its best to find the right extension.  For example, `agroal`, `Agroal` or `agro` will expand to `io.quarkus:quarkus-agroal`.  If no extension is found or if more than one extensions match, you will see a red check mark ❌ in the command result."
msgstr "`io.quarkus:quarkus-agroal` エクステンション名は、エクステンションのGAV名です。しかし、部分的な名前を渡すことができ、Quarkusは適切なエクステンションを見つけるために最善を尽くします。例えば、 `agroal`  、 `Agroal`  、 `agro`  は `io.quarkus:quarkus-agroal`  に展開されます。エクステンションが見つからなかったり、複数のエクステンションが一致した場合は、コマンドの結果に赤いチェックマーク❌が表示されます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:119
#, no-wrap
msgid ""
"$ ./mvnw quarkus:add-extensions -Dextensions=jdbc,agroal,non-exist-ent\n"
"[...]\n"
"❌ Multiple extensions matching 'jdbc'\n"
"     * io.quarkus:quarkus-jdbc-h2\n"
"     * io.quarkus:quarkus-jdbc-mariadb\n"
"     * io.quarkus:quarkus-jdbc-postgresql\n"
"     Be more specific e.g using the exact name or the full gav.\n"
"✅ Adding extension io.quarkus:quarkus-agroal\n"
"❌ Cannot find a dependency matching 'non-exist-ent', maybe a typo?\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:122
msgid "You can install all extensions which match a globbing pattern :"
msgstr "グロブパターンに一致するすべてのエクステンションをインストールすることができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:126
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"hibernate-*\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/maven-tooling.adoc:129
#, no-wrap
msgid "Development mode"
msgstr "開発モード"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:133
msgid "Quarkus comes with a built-in development mode.  Run your application with:"
msgstr "Quarkusには開発モードが組み込まれています。以下でアプリケーションを実行します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:137
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr "./mvnw compile quarkus:dev\n"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:142
msgid "You can then update the application sources, resources and configurations.  The changes are automatically reflected in your running application.  This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr "その後、アプリケーションのソース、リソース、および設定を更新することができます。変更は実行中のアプリケーションに自動的に反映されます。変更がすぐに反映されるので、UIやデータベースにまたがった開発をするのに最適です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:150
msgid "`quarkus:dev` enables hot deployment with background compilation, which means that when you modify your Java files or your resource files and refresh your browser these changes will automatically take effect.  This works too for resource files like the configuration property file.  The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the Java files are compiled, and the application is redeployed, then your request is serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr "`quarkus:dev`  は、バックグラウンドでのコンパイルによるホットデプロイを可能にします。つまり、Java ファイルやリソースファイルを変更してブラウザを更新すると、これらの変更が自動的に有効になります。これは、設定プロパティーファイルのようなリソースファイルにも適用されます。ブラウザをリフレッシュする行為は、ワークスペースのスキャンをトリガし、変更が検出された場合、Javaファイルがコンパイルされ、アプリケーションが再配置されると、あなたの要求は再配置されたアプリケーションによって処理されます。コンパイルやデプロイに問題がある場合は、エラーページでお知らせします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:152
msgid "Hit `CTRL+C` to stop the application."
msgstr "`CTRL+C`  を叩いてアプリケーションを停止させます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:156
msgid "By default, `quarkus:dev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr "デフォルトでは、 `quarkus:dev` はデバッグホストを `localhost` に設定します (セキュリティー上の理由から)。これを変更する必要がある場合、例えばすべてのホストでデバッグを有効にしたい場合は、 `-DdebugHost` オプションを次のように使用します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:160
#, no-wrap
msgid "./mvnw compile quarkus:dev -DdebugHost=0.0.0.0\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/maven-tooling.adoc:163
#, no-wrap
msgid "Remote Development Mode"
msgstr "リモート開発モード"

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:167
msgid "It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)  and have changes made to your local files become immediately visible."
msgstr "開発モードをリモートで使用することができるので、コンテナー環境(OpenShiftなど)でQuarkusを実行して、ローカルファイルに加えられた変更をすぐに確認できるようにすることができます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:169
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr "これにより、実際にアプリを実行するのと同じ環境で、同じサービスにアクセスしながら開発することができます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:171
msgid "Do not use this in production. This should only be used in a development environment. You should not run production application in dev mode."
msgstr "本番環境では使用しないでください。開発環境でのみ使用してください。本番環境のアプリケーションを開発モードで実行してはいけません。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:173
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.properties`:"
msgstr "これを行うには、 `mutable-jar` 形式を使用して、ミュータブルアプリケーションをビルドする必要があります。 `application.xml` で以下のプロパティーを設定してください。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:179
#, no-wrap
msgid ""
"quarkus.package.type=mutable-jar <1>\n"
"quarkus.live-reload.password=changeit <2>\n"
"quarkus.live-reload.url=http://my.cluster.host.com:8080 <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:183
msgid "This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus, so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application, however they can also be started in dev mode."
msgstr "これは、QuarkusにMutable-jar形式を使用するように指示します。ミュータブルアプリケーションには、Quarkusのデプロイメント時間の部分も含まれているため、より多くのディスクスペースを占有します。普通に実行した場合は、イミュータブルアプリケーションと同じ速度で起動し、同じメモリーを使用しますが、devモードで起動することもできます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:184
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr "リモート側とローカル側の通信を安全に保つためのパスワードです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:186
msgid "The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr "アプリがdevモードで実行されるURL。これはローカル側でのみ必要なので、プロパティー ファイルから除外して、コマンド ラインでシステム プロパティーとして指定するとよいでしょう。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:188
msgid "The `mutable-jar` is then built in the same way that a regular Quarkus jar is built, i.e. by issuing:"
msgstr "`mutable-jar` は、通常のQuarkus jarをビルドするのと同じ方法で発行することでビルドされます。つまり以下のように発行できます:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:192
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:196
msgid "Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are on bare metal you can set it via the `export QUARKUS_LAUNCH_DEVMODE=true` command and then run the application with the proper `java -jar ...` command to run the application."
msgstr "リモートホストでQuarkusを起動する前に、環境変数 `QUARKUS_LAUNCH_DEVMODE=true`  を設定します。ベアメタルを使用している場合は、 `export QUARKUS_LAUNCH_DEVMODE=true`  コマンドで設定し、適切に `java -jar ...` コマンドでアプリケーションを実行します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:199
msgid "If you plan on running the application via Docker, then you'll need to add `-e QUARKUS_LAUNCH_DEVMODE=true` to the `docker run` command.  When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`."
msgstr "アプリケーションをdocker経由で実行する場合は、 `docker run` コマンドに `-e QUARKUS_LAUNCH_DEVMODE=true` を追加してイメージを起動します。アプリケーションが起動すると、ログに次のような行が表示されるはずです: `Profile dev activated. Live Coding activated` ."

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:203
msgid "The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner jar, do not attempt to run normal devmode."
msgstr "リモート側にはMavenなどの開発ツールを入れる必要はありません。新しいQuarkusアプリケーションで生成される通常の `fast-jar`  Dockerfileがあれば大丈夫です。ベアメタルでQuarkus runner jarを起動している場合は、通常のdevmodeを実行しようとしないでください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:205
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr "ここで、 `remote-dev`  コマンドを使用して、ローカルエージェントをリモートホストに接続する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:209
#, no-wrap
msgid "./mvnw quarkus:remote-dev -Dquarkus.live-reload.url=http://my-remote-host:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:214
msgid "Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote app. This is done via a HTTP based long polling transport, that will synchronize your local workspace and the remote application via HTTP calls."
msgstr "これで、ブラウザを更新するたびに、ローカルで行った変更がリモート アプリに即座に表示されるようになりました。これは、HTTPベースのロングポーリングトランスポートを介して行われ、HTTPコールを介してローカルのワークスペースとリモートアプリケーションを同期させます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:218
msgid "If you do not want to use the HTTP feature then you can simply run the `remote-dev` command without specifying the URL.  In this mode the command will continuously rebuild the local application, so you can use an external tool such as odo or rsync to sync to the remote application."
msgstr "HTTP 機能を使用したくない場合は、URL を指定せずに `remote-dev`  コマンドを実行するだけです。このモードでは、コマンドはローカルアプリケーションを継続的に再構築するので、 odo や rsync のような外部ツールを使ってリモートアプリケーションに同期することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:220
msgid "All the config options are shown below:"
msgstr "全ての設定オプションは以下の通りです:"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:227
msgid "It is recommended you use SSL when using remote dev mode, however even if you are using an unencrypted connection your password is never sent directly over the wire. For the initial connection request the password is hashed with the initial state data, and subsequent requests hash it with a random session id generated by the server and any body contents for POST requests, and the path for DELETE requests, as well as an incrementing counter to prevent replay attacks."
msgstr "リモート開発モードを使用する際には SSL を使用することを推奨しますが、たとえ暗号化されていない接続を使用していても、パスワードが直接ネットワーク上で送信されることはありません。最初の接続リクエストでは、パスワードは初期状態のデータでハッシュ化され、それ以降のリクエストでは、サーバーによって生成されたランダムなセッションIDと、POSTリクエストのためのボディコンテンツ、DELETEリクエストのためのパス、そしてリプレイ攻撃を防ぐためのインクリメントカウンタでハッシュ化されます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/maven-tooling.adoc:228
#, no-wrap
msgid "Configuring Development Mode"
msgstr "開発モードの設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:232
msgid "By default, the Maven plugin picks up compiler flags to pass to `javac` from `maven-compiler-plugin`."
msgstr "デフォルトでは、Maven プラグインは `maven-compiler-plugin`  から `javac`  に渡すコンパイラフラグをピックアップします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:239
msgid "If you need to customize the compiler flags used in development mode, add a `configuration` section to the `plugin` block and set the `compilerArgs` property just as you would when configuring `maven-compiler-plugin`.  You can also set `source`, `target`, and `jvmArgs`.  For example, to pass `--enable-preview` to both the JVM and `javac`:"
msgstr "開発モードで使用するコンパイラ・フラグをカスタマイズする必要がある場合は、 `plugin`  ブロックに `configuration`  セクションを追加し、 `maven-compiler-plugin`  を設定するときと同じように `compilerArgs`  プロパティーを設定します。また、 `source`  、 `target`  、および `jvmArgs`  を設定することもできます。例えば、 `--enable-preview`  を JVM と `javac`  の両方に渡すには、 を設定します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:246
#, no-wrap
msgid ""
"<plugin>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-maven-plugin</artifactId>\n"
"  <version>${quarkus-plugin.version}</version>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:255
#, no-wrap
msgid ""
"  <configuration>\n"
"    <source>${maven.compiler.source}</source>\n"
"    <target>${maven.compiler.target}</target>\n"
"    <compilerArgs>\n"
"      <arg>--enable-preview</arg>\n"
"    </compilerArgs>\n"
"    <jvmArgs>--enable-preview</jvmArgs>\n"
"  </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:258
#, no-wrap
msgid ""
"  ...\n"
"</plugin>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/maven-tooling.adoc:261
#, no-wrap
msgid "Debugging"
msgstr "デバッグ"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:264
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr "開発モードでは、Quarkusはデフォルトでデバッグモードを有効にして起動し、JVMをサスペンドせずにポート `5005`  をリッスンします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:266
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr "この動作は、 `debug` システム・プロパティーに以下の値のいずれかを与えることで変更できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:268
msgid "`false` - the JVM will start with debug mode disabled"
msgstr "`false`  - JVMはデバッグモードを無効にして起動します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:269
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr "`true`  - JVM はデバッグモードで起動され、 `5005`ポートをリッスンします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:270
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr "`client`  - JVM はクライアントモードで起動し、 `localhost:5005`に接続を試みます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:271
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr "`{port}` - JVM はデバッグモードで起動されています。 `{port}`"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:273
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr "追加のシステム・プロパティー `suspend` は、デバッグ・モードで起動されたときに JVM をサスペンドするために使用できます。 `suspend` は以下の値をサポートしています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:275
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr "`y` または `true` - デバッグモードの JVM 起動が中断されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:276
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr "`n` または `false` - デバッグモードの JVM をサスペンドせずに起動します。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:281
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using `./mvnw compile quarkus:dev -Dsuspend` which is a shorthand for `./mvnw compile quarkus:dev -Dsuspend=true`."
msgstr "`./mvnw compile quarkus:dev -Dsuspend` を使用して、サスペンドされたJVMでQuarkusアプリケーションをデバッグモードで実行することもできます( `./mvnw compile quarkus:dev -Dsuspend=true` ."

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:283
msgid "Then, attach your debugger to `localhost:5005`."
msgstr "次に、デバッガーを `localhost:5005`  にアタッチします。"

#. type: Title ==
#: upstream/_versions/2.2/guides/maven-tooling.adoc:285
#, no-wrap
msgid "Import in your IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:289
msgid "Once you have a <<project-creation, project generated>>, you can import it in your favorite IDE.  The only requirement is the ability to import a Maven project."
msgstr "<<project-creation, プロジェクトを生成したら>>、お気に入りのIDEでインポートすることができます。唯一の要件は、Mavenプロジェクトをインポートできることです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:291
#, no-wrap
msgid "**Eclipse**\n"
msgstr "**Eclipse**\n"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:296
msgid "In Eclipse, click on: `File -> Import`.  In the wizard, select: `Maven -> Existing Maven Project`.  On the next screen, select the root location of the project.  The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr "Eclipse で、 `File → Import`  をクリックします。ウィザードで、 `Maven → Existing Maven Project`  を選択します。次の画面で、プロジェクトのルートの場所を選択します。次の画面では、見つかったモジュールのリストが表示されるので、生成されたプロジェクトを選択して `Finish` をクリックします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:298
msgid "In a separated terminal, run `./mvnw compile quarkus:dev`, and enjoy a highly productive environment."
msgstr "分離された端末で `./mvnw compile quarkus:dev`  を実行し、生産性の高い環境を楽しむことができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:300
#, no-wrap
msgid "**IntelliJ**\n"
msgstr "**IntelliJ**\n"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:302
msgid "In IntelliJ:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:304
msgid "From inside IntelliJ select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr "IntelliJの内部から `File → New → Project From Existing Sources…​`  を選択するか、ウェルカム・ダイアログであれば `Import project`  を選択してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:305
#: upstream/_versions/2.2/guides/maven-tooling.adoc:317
msgid "Select the project root"
msgstr "プロジェクトのルートを選択します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:306
msgid "Select `Import project from external model` and `Maven`"
msgstr "`Import project from external model`  を選択して `Maven`を選択"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:307
msgid "Next a few times (review the different options if needed)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:308
msgid "On the last screen click on Finish"
msgstr "最後の画面でFinishをクリックします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:310
msgid "In a separated terminal or in the embedded terminal, run `./mvnw compile quarkus:dev`. Enjoy!"
msgstr "別のターミナルまたは組み込みのターミナルで、 `./mvnw compile quarkus:dev`  を実行してください。お楽しみください!"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:312
#, no-wrap
msgid "**Apache NetBeans**\n"
msgstr "**Apache NetBeans**\n"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:314
msgid "In NetBeans:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:316
msgid "Select `File -> Open Project`"
msgstr "`File → Open Project` を選択"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:318
msgid "Click on `Open Project`"
msgstr "`Open Project` をクリックしてください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:320
msgid "In a separated terminal or the embedded terminal, go to the project root and run `./mvnw compile quarkus:dev`. Enjoy!"
msgstr "分離されたターミナルまたは埋め込みターミナルで、プロジェクトのルートに移動し、 `./mvnw compile quarkus:dev`  を実行します。お楽しみください!"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:322
#, no-wrap
msgid "**Visual Studio Code**\n"
msgstr "**Visual Studio Code**\n"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:324
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Maven project."
msgstr "VS Codeでプロジェクトディレクトリーを開きます。Java Extension Pack(Java拡張のセットをグループ化したもの)をインストールしている場合、プロジェクトはMavenプロジェクトとしてロードされます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/maven-tooling.adoc:325
#, no-wrap
msgid "Logging Quarkus application build classpath tree"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:330
msgid "Usually, dependencies of an application (which is a Maven project) could be displayed using `mvn dependency:tree` command. In case of a Quarkus application, however, this command will list only the runtime dependencies of the application.  Given that the Quarkus build process adds deployment dependencies of the extensions used in the application to the original application classpath, it could be useful to know which dependencies and which versions end up on the build classpath.  Luckily, the `quarkus` Maven plugin includes the `dependency-tree` goal which displays the build dependency tree for the application."
msgstr "通常、アプリケーション(Mavenプロジェクト)の依存関係は、 `mvn dependency:tree`  コマンドを使用して表示することができます。しかし、Quarkusアプリケーションの場合、このコマンドはアプリケーションの実行時の依存関係のみを表示します。Quarkusのビルドプロセスは、アプリケーションで使用されているエクステンションのデプロイメント依存関係を元のアプリケーションのクラスパスに追加するので、どの依存関係とどのバージョンがビルドクラスパスで終わるかを知ることは便利です。幸いにも、 `quarkus-bootstrap`  Mavenプラグインには、アプリケーションのビルド依存関係ツリーを表示する `build-tree`  ゴールが含まれています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:332
msgid "Executing `./mvnw quarkus:dependency-tree` on your project should result in an output similar to:"
msgstr "プロジェクトで `./mvnw quarkus:dependency-tree` を実行すると、次のような出力が得られるはずです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:344
#, no-wrap
msgid ""
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:build-tree (default-cli) @ getting-started ---\n"
"[INFO] org.acme:getting-started:jar:1.0.0-SNAPSHOT\n"
"[INFO] └─ io.quarkus:quarkus-resteasy-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    ├─ io.quarkus:quarkus-resteasy-server-common-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    │  ├─ io.quarkus:quarkus-core-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    │  │  ├─ commons-beanutils:commons-beanutils:jar:1.9.3 (compile)\n"
"[INFO]    │  │  │  ├─ commons-logging:commons-logging:jar:1.2 (compile)\n"
"[INFO]    │  │  │  └─ commons-collections:commons-collections:jar:3.2.2 (compile)\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:347
msgid "The goal accepts the optional `mode` parameter whose default value is `prod`, i.e. the production build dependency tree. Alternatively, it accepts values `test` to display the test dependency tree and `dev` to display the dev mode dependency tree."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/maven-tooling.adoc:348
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:351
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr "ネイティブ実行可能ファイルにより、Quarkusアプリケーションはコンテナーやサーバーレスのワークロードに最適です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:354
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to GraalVM version {graalvm-version} (Make sure to use a Java 11 version of GraalVM).  Verify that your `pom.xml` has the proper `native` profile (see <<build-tool-maven>>)."
msgstr "`GRAALVM_HOME`  を設定し、GraalVM バージョン {graalvm-version} を指していることを確認してください。(GraalVMのJava 11バージョンを使用していることを確認してください)。あなたの `pom.xml`  が適切な `native`  プロファイルを持っていることを確認してください( link:#build-tool-maven[[build-tool-maven]を]参照してください)。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:357
msgid "Create a native executable using: `./mvnw package -Pnative`.  A native executable will be present in `target/`."
msgstr "`./mvnw package -Pnative` を使用してネイティブ実行可能ファイルを作成します。ネイティブ実行可能ファイルは `target/` に出来ます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:359
msgid "To run Integration Tests on the native executable, make sure to have the proper Maven plugin configured (see <<build-tool-maven>>) and launch the `verify` goal."
msgstr "ネイティブ実行可能ファイルで統合テストを実行するには、適切なMavenプラグインが設定されていることを確認し( link:#build-tool-maven[[build-tools-maven]を]参照)、 `verify`  ゴールを起動します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:387
#, no-wrap
msgid ""
"$ ./mvnw verify -Pnative\n"
"...\n"
"[quarkus-quickstart-runner:50955]     universe:     391.96 ms\n"
"[quarkus-quickstart-runner:50955]      (parse):     904.37 ms\n"
"[quarkus-quickstart-runner:50955]     (inline):   1,143.32 ms\n"
"[quarkus-quickstart-runner:50955]    (compile):   6,228.44 ms\n"
"[quarkus-quickstart-runner:50955]      compile:   9,130.58 ms\n"
"[quarkus-quickstart-runner:50955]        image:   2,101.42 ms\n"
"[quarkus-quickstart-runner:50955]        write:     803.18 ms\n"
"[quarkus-quickstart-runner:50955]      [total]:  33,520.15 ms\n"
"[INFO]\n"
"[INFO] --- maven-failsafe-plugin:2.22.0:integration-test (default) @ quarkus-quickstart-native ---\n"
"[INFO]\n"
"[INFO] -------------------------------------------------------\n"
"[INFO]  T E S T S\n"
"[INFO] -------------------------------------------------------\n"
"[INFO] Running org.acme.quickstart.GreetingResourceIT\n"
"Executing [/Users/starksm/Dev/JBoss/Quarkus/starksm64-quarkus-quickstarts/getting-started-native/target/quarkus-quickstart-runner, -Dquarkus.http.port=8081, -Dtest.url=http://localhost:8081, -Dquarkus.log.file.path=target/quarkus.log]\n"
"2019-02-28 16:52:42,020 INFO  [io.quarkus] (main) Quarkus started in 0.007s. Listening on: http://localhost:8080\n"
"2019-02-28 16:52:42,021 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.081 s - in org.acme.quickstart.GreetingResourceIT\n"
"[INFO]\n"
"[INFO] Results:\n"
"[INFO]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:389
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/maven-tooling.adoc:391
#, no-wrap
msgid "Build a container friendly executable"
msgstr "コンテナーフレンドリーな実行ファイルをビルドする"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:395
msgid "The native executable will be specific to your operating system.  To create an executable that will run in a container, use the following:"
msgstr "ネイティブ実行可能ファイルは、お使いのオペレーティングシステムに固有のものになります。コンテナー内で実行される実行ファイルを作成するには、次のようにします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:399
#, no-wrap
msgid "./mvnw package -Dnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:404
msgid "The produced executable will be a 64 bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a Docker container.  Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr "生成される実行ファイルは64bitのLinux実行ファイルになるので、OSによっては実行できなくなる可能性があります。しかし、Dockerコンテナーにコピーするので問題ありません。この場合、ビルド自体もDockerコンテナー内で動作するので、ローカルにGraalVMをインストールする必要はないことに注意してください。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:408
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` Docker image."
msgstr "デフォルトでは、 `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}`  Dockerイメージを使用してネイティブ実行可能ファイルが生成されます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:411
msgid "If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version), use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr "異なるDockerイメージでネイティブ実行可能ファイルをビルドしたい場合(例えば、異なるGraalVMのバージョンを使用するなど)、 `-Dquarkus.native.builder-image=<image name>` のbuild引数を使用してください。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:414
msgid "The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io].  Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr "利用可能なDockerイメージのリストは、 link:https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io]にあります。特定のQuarkusのバージョンは、利用可能なすべてのイメージと互換性がない場合があることに注意してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:417
msgid "You can follow the link:building-native-image[Build a native executable guide] as well as link:deploying-to-kubernetes[Deploying Application to Kubernetes and OpenShift] for more information."
msgstr "詳細については、 link:building-native-image[ネイティブ実行可能ファイルのビルドガイド]と同様に、 link:deploying-to-kubernetes[アプリケーションをKubernetesとOpenShiftにデプロイ]を参照してください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/maven-tooling.adoc:419
#, no-wrap
msgid "Maven configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:422
msgid "If you have not used <<project-creation,project scaffolding>>, add the following elements in your `pom.xml`"
msgstr "<<project-creation,プロジェクトのスキャフォールド>>を使用していない場合は、以下の要素を `pom.xml` に追加してください"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:436
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency> <1>\n"
"            <groupId>io.quarkus.platform</groupId>\n"
"            <artifactId>quarkus-bom</artifactId>\n"
"            <version>${quarkus.platform.version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:467
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin> <2>\n"
"            <groupId>io.quarkus.platform</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus.platform.version}</version>\n"
"            <extensions>true</extensions> <3>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        <plugin> <4>\n"
"            <groupId>org.apache.maven.plugins</groupId>\n"
"            <artifactId>maven-surefire-plugin</artifactId>\n"
"            <version>${surefire-plugin.version}</version>\n"
"            <configuration>\n"
"                <systemPropertyVariables>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                </systemPropertyVariables>\n"
"            </configuration>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:500
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile> <5>\n"
"        <id>native</id>\n"
"        <properties> <6>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"        </properties>\n"
"        <build>\n"
"            <plugins>\n"
"                <plugin> <7>\n"
"                    <groupId>org.apache.maven.plugins</groupId>\n"
"                    <artifactId>maven-failsafe-plugin</artifactId>\n"
"                    <version>${surefire-plugin.version}</version>\n"
"                    <executions>\n"
"                        <execution>\n"
"                            <goals>\n"
"                                <goal>integration-test</goal>\n"
"                                <goal>verify</goal>\n"
"                            </goals>\n"
"                            <configuration>\n"
"                                <systemPropertyVariables>\n"
"                                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                                    <maven.home>${maven.home}</maven.home>\n"
"                                </systemPropertyVariables>\n"
"                            </configuration>\n"
"                        </execution>\n"
"                    </executions>\n"
"                </plugin>\n"
"            </plugins>\n"
"        </build>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:503
msgid "Optionally use a BOM file to omit the version of the different Quarkus dependencies."
msgstr "オプションで、BOMファイルを使用して、異なるQuarkus依存関係のバージョンを省略することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:504
msgid "Use the Quarkus Maven plugin that will hook into the build process."
msgstr "ビルドプロセスにフックするQuarkus Mavenプラグインを使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:505
msgid "Enabling Maven plugin extensions will register a Quarkus `MavenLifecycleParticipant` which will make sure the Quarkus classloaders used during the build are properly closed. During the `generate-code` and `generate-code-tests` goals the Quarkus application bootstrap is initialized and re-used in the `build` goal (which actually builds and packages a production application). The Quarkus classloaders will be properly closed in the `build` goal of the `quarkus-maven-plugin`. However, if the build fails in between the `generate-code` or `generate-code-tests` and `build` then the Quarkus augmentation classloader won't be properly closed, which may lead to locking of JAR files that happened to be on the classpath on Windows OS."
msgstr "Mavenプラグインのエクステンションを有効にすると、Quarkus `MavenLifecycleParticipant` が登録され、ビルド中に使用されるQuarkusクラスローダが適切にクローズされるようになります。 `generate-code` と `generate-code-tests` のゴールでは、Quarkusアプリケーションブートストラップが初期化され、 `build` のゴール（本番アプリケーションを実際にビルドしてパッケージ化する）で再利用されます。 `quarkus-maven-plugin` の `build` ゴールでは、Quarkus のクラスローダが適切にクローズされます。しかし、 `generate-code` または `generate-code-tests` と `build` の間でビルドが失敗すると、Quarkus augmentation classloaderは適切に閉じられず、Windows OSのクラスパス上にたまたまあったJARファイルがロックされる可能性があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:507
msgid "Add system properties to `maven-surefire-plugin`. + `maven.home` is only required if you have custom configuration in `${maven.home}/conf/settings.xml`."
msgstr "システムのプロパティーを `maven-surefire-plugin`  に追加します。+ `maven.home`  は、 `${maven.home}/conf/settings.xml`  にカスタム設定がある場合にのみ必要です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:508
msgid "Use a specific `native` profile for native executable building."
msgstr "ネイティブ実行可能ファイルのビルドには、特定の `native`  プロファイルを使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:509
msgid "Enable the `native` package type. The build will therefore produce a native executable."
msgstr "`native`  パッケージタイプを有効にします。そのため、ビルドはネイティブ実行可能ファイルを生成します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:510
msgid "If you want to test your native executable with Integration Tests, add the following plugin configuration. Test names `*IT` and annotated `@NativeImageTest` will be run against the native executable. See the link:building-native-image[Native executable guide] for more info."
msgstr "Integration Testsでネイティブ実行可能ファイルをテストしたい場合は、以下のプラグイン設定を追加してください。テスト名 `*IT`  と注釈付き `@NativeImageTest`  は、ネイティブ実行可能ファイルに対して実行されます。詳細は link:building-native-image[ネイティブ実行可能ファイルガイド]を参照してください。"

#. type: Title ===
#: upstream/_versions/2.2/guides/maven-tooling.adoc:512
#, no-wrap
msgid "Using fast-jar"
msgstr "fast-jar の使用"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:515
msgid "`fast-jar` is now the default quarkus package type. The result of `./mvnw package` command is a new directory under `target` named `quarkus-app`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:517
msgid "You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "アプリケーションを実行するには、次のようにします: `java -jar target/quarkus-app/quarkus-run.jar`"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:520
msgid "In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or might not function correctly."
msgstr "生成された jar を正常に実行するためには、 `quarkus-app` ディレクトリのすべての内容が必要です。いずれかのファイルが欠落していると、アプリケーションが起動しなかったり、正しく機能しない可能性があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:524
msgid "The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar on the classpath that the legacy jar necessitates, when loading a class or resource."
msgstr "`fast-jar` パッケージングでは、どの依存関係のjarにクラスやリソースが含まれているかという情報がインデックス化されているため、レガシーのQuarkus jarよりも起動が少し速く、メモリ消費量もわずかに少ないアーティファクトを作成できます。このため、クラスやリソースをロードする際に、レガシー jar が必要とするクラスパス上のすべての jar を検索する必要がなくなります。"

#. type: Title ===
#: upstream/_versions/2.2/guides/maven-tooling.adoc:526
#, no-wrap
msgid "Uber-Jar Creation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:530
msgid "Quarkus Maven plugin supports the generation of Uber-Jars by specifying a `quarkus.package.type=uber-jar` configuration option in your `application.properties` (or `<quarkus.package.type>uber-jar</quarkus.package.type>` in your `pom.xml`)."
msgstr "Quarkus Mavenプラグインは、 `application.properties` .Quarkus Mavenプラグインで `quarkus.package.type=uber-jar`  設定オプションを指定することで、UberJar の生成をサポートしています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:532
msgid "The original jar will still be present in the `target` directory but it will be renamed to contain the `.original` suffix."
msgstr "元の jar は `target`  ディレクトリーに残っていますが、 `.original`  の接尾辞を含むように名前が変更されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:535
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `quarkus.package.ignored-entries` configuration option, this takes a comma separated list of entries to ignore."
msgstr "Uber-jar をビルドする際に、 `quarkus.package.ignored-entries`  設定オプションを使用して生成された jar から除外したいエントリーを指定することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:537
msgid "Uber-Jar creation by default excludes link:https://docs.oracle.com/javase/tutorial/deployment/jar/intro.html[signature files] that might be present in the dependencies of the application."
msgstr "デフォルトでは、Uber-Jar の作成は、アプリケーションの依存関係に存在する可能性のある link:https://docs.oracle.com/javase/tutorial/deployment/jar/intro.html[署名ファイル]を除外します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:539
msgid "Uber-Jar's final name is configurable via a Maven's build settings `finalName` option."
msgstr "Uber-Jarの最終的な名前は、Mavenのビルド設定 `finalName`  オプションで設定できます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/maven-tooling.adoc:541
#, no-wrap
msgid "Working with multi-module projects"
msgstr "マルチモジュールプロジェクトでの作業"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:544
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr "デフォルトでは、Quarkusは別のモジュール内のCDI Bean を検出しません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:547
msgid "The best way to enable CDI bean discovery for a module in a multi-module project would be to include the `jandex-maven-plugin`, unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will indexed automatically."
msgstr "マルチモジュールプロジェクト内のモジュールでCDI Bean検出を有効にするベストの方法は、 モジュールがメインアプリケーションモジュールでquarkus-maven-pluginが既に構成されていない限り、`jandex-maven-plugin`  をインクルードすることです。モジュールがメインアプリケーションモジュールでquarkus-maven-pluginが既に構成されている場合は自動的にインデックスが作成されます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:567
#, no-wrap
msgid ""
"<build>\n"
"  <plugins>\n"
"    <plugin>\n"
"      <groupId>org.jboss.jandex</groupId>\n"
"      <artifactId>jandex-maven-plugin</artifactId>\n"
"      <version>1.1.0</version>\n"
"      <executions>\n"
"        <execution>\n"
"          <id>make-index</id>\n"
"          <goals>\n"
"            <goal>jandex</goal>\n"
"          </goals>\n"
"        </execution>\n"
"      </executions>\n"
"    </plugin>\n"
"  </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:570
msgid "More information on this topic can be found on the link:cdi-reference#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr "このトピックの詳細については、CDIガイドの link:cdi-reference#bean_discovery[Bean Discovery]セクションを参照してください。"

#. type: Title ===
#: upstream/_versions/2.2/guides/maven-tooling.adoc:572
#, no-wrap
msgid "Building with a specific configuration profile"
msgstr "特定の設定プロファイルでビルド"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:575
msgid "Quarkus supports xref:config-reference.adoc#profiles[configuration profiles] in order to provide a specific configuration according to the target environment."
msgstr "Quarkusは、対象となる環境に応じて特定の設定を提供するために、 link:config-reference.html#profiles[設定プロファイル]をサポートしています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:578
msgid "The profile can be provided directly in the Maven build's command thanks to the system property `quarkus.profile` with a command of type `./mvnw package -Dquarkus.profile=<profile-name-here>`, however it is also possible to specify the profile directly in the POM file of the project using project properties, the Quarkus Maven plugin configuration properties or system properties set in the Quarkus Maven plugin configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:580
msgid "In order of precedence (greater precedence first):"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/maven-tooling.adoc:581
#, no-wrap
msgid "1. System properties set in the Quarkus Maven plugin configuration"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:607
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus-plugin.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <configuration>\n"
"          <systemProperties>\n"
"            <quarkus.profile>prod-aws</quarkus.profile> <1>\n"
"          </systemProperties>\n"
"        </configuration>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:609
#: upstream/_versions/2.2/guides/maven-tooling.adoc:638
#: upstream/_versions/2.2/guides/maven-tooling.adoc:654
msgid "The default configuration profile of this project is `prod-aws`."
msgstr "このプロジェクトのデフォルトの構成プロファイルは `prod-aws` です。"

#. type: Block title
#: upstream/_versions/2.2/guides/maven-tooling.adoc:610
#, no-wrap
msgid "2. Quarkus Maven plugin configuration properties"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:636
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus-plugin.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <configuration>\n"
"          <properties>\n"
"            <quarkus.profile>prod-aws</quarkus.profile> <1>\n"
"          </properties>\n"
"        </configuration>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/maven-tooling.adoc:639
#, no-wrap
msgid "3. Project properties"
msgstr "3. プロジェクトプロパティ"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:652
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <properties>\n"
"    <quarkus.profile>prod-aws</quarkus.profile> <1>\n"
"    ...\n"
"  </properties>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:656
msgid "Whatever the approach is chosen, the profile can still be overridden with the `quarkus.profile` system property or the `QUARKUS_PROFILE` environment variable."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/maven-tooling.adoc:658
#, no-wrap
msgid "Building several artifacts from a single module"
msgstr "1つのモジュールから複数のアーティファクトの作成"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:662
msgid "In some particular use cases, it can be interesting to build several artifacts of your application from the same module.  A typical example is when you want to build your application with different configuration profiles."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:664
msgid "In that case, it is possible to add as many executions as needed to the Quarkus Maven plugin configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:666
msgid "Below is an example of a Quarkus Maven plugin configuration that will produce two builds of the same application: one using the `prod-oracle` profile and the other one using the `prod-postgresql` profile."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:712
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus-plugin.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <executions>\n"
"          <execution>\n"
"            <id>oracle</id>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"              <properties>\n"
"                <quarkus.profile>prod-oracle</quarkus.profile> <1>\n"
"                <quarkus.package.output-directory>oracle-quarkus-app</quarkus.package.output-directory> <2>\n"
"              </properties>\n"
"            </configuration>\n"
"          </execution>\n"
"          <execution>\n"
"            <id>postgresql</id>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"              <properties>\n"
"                <quarkus.profile>prod-postgresql</quarkus.profile> <3>\n"
"                <quarkus.package.output-directory>postgresql-quarkus-app</quarkus.package.output-directory> <4>\n"
"              </properties>\n"
"            </configuration>\n"
"          </execution>\n"
"        </executions>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:714
msgid "The default configuration profile of the first execution of the plugin is `prod-oracle`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:715
msgid "The output directory of the first execution of the plugin is set to `oracle-quarkus-app` instead of `quarkus-app` to have a dedicated directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:716
msgid "The default configuration profile of the second execution of the plugin is `prod-postgresql`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:717
msgid "The output directory of the second execution of the plugin is set to `postgresql-quarkus-app` instead of `quarkus-app` to have a dedicated directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:719
msgid "With the configuration above, both profile builds will be using the same dependencies, so if we added dependencies on the Oracle and PostgreSQL drivers to the application, both of the drivers will appear in both builds."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:722
msgid "To isolate profile-specific dependencies from other profiles, the JDBC drivers could be added as optional dependencies to the application but configured to be included in each profile that requires them, e.g.:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:768
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <dependencies>\n"
"    ...\n"
"    <dependency>\n"
"      <groupId>org.postgresql</groupId>\n"
"      <artifactId>postgresql</artifactId>\n"
"      <version>${postgresql.driver.version}</version>\n"
"      <optional>true</optional> <1>\n"
"    </dependency>\n"
"  </dependencies>\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus-plugin.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <executions>\n"
"          ...\n"
"          <execution>\n"
"            <id>postgresql</id>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"              <properties>\n"
"                <quarkus.profile>prod-postgresql</quarkus.profile>\n"
"                <quarkus.package.output-directory>postgresql-quarkus-app</quarkus.package.output-directory>\n"
"                <quarkus.package.filter-optional-dependencies>true</quarkus.package.filter-optional-dependencies> <2>\n"
"                <quarkus.package.included-optional-dependencies>org.postgresql:postgresql::jar</quarkus.package.included-optional-dependencies> <3>\n"
"              </properties>\n"
"            </configuration>\n"
"          </execution>\n"
"        </executions>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:770
msgid "The JDBC driver of PostgreSQL is defined as an optional dependency"
msgstr "PostgreSQLのJDBCドライバは、オプションの依存関係として定義されています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:771
msgid "For backward compatibility reasons, it is necessary to explicitly indicate that the optional dependencies need to be filtered."
msgstr "後方互換性の理由から、オプションの依存関係をフィルタリングする必要があることを明示的に示す必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:772
msgid "Only the optional dependency corresponding to the JDBC driver of PostgreSQL is expected in the final artifact."
msgstr "PostgreSQLのJDBCドライバに対応するオプションの依存関係のみが、最終的な成果物として期待されます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/maven-tooling.adoc:774
#, no-wrap
msgid "Configuring the Project Output"
msgstr "プロジェクト出力の設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:778
msgid "There are a several configuration options that will define what the output of your project build will be.  These are provided in `application.properties` the same as any other config property."
msgstr "プロジェクトのビルドの出力を定義するための設定オプションがいくつかあります。これらは他の設定プロパティーと同じように `application.properties`  で提供されています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:780
msgid "The properties are shown below:"
msgstr "プロパティーは以下の通りです:"

#. type: Title ===
#: upstream/_versions/2.2/guides/maven-tooling.adoc:784
#, no-wrap
msgid "Custom test configuration profile in JVM mode"
msgstr "JVMモードでのカスタムテスト構成プロファイル"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:789
msgid "By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus configuration profiles, everything you need to know is explained in the link:config#configuration-profiles[Configuration Profiles Documentation]."
msgstr "デフォルトでは、JVMモードでのQuarkusテストは、 `test`  設定プロファイルを使用して実行されます。Quarkusの設定プロファイルについてよく知らない場合は、必要な情報はすべて link:config#configuration-profiles[設定プロファイルのドキュメント]で説明されています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:793
msgid "It is however possible to use a custom configuration profile for your tests with the Maven Surefire and Maven Failsafe configurations shown below. This can be useful if you need for example to run some tests using a specific database which is not your default testing database."
msgstr "ただし、以下に示すMaven SurefireおよびMaven Failsafe構成で、テストにカスタム構成プロファイルを使用することは可能です。これは、例えば、デフォルトのテストデータベースではない特定のデータベースを使用してテストを実行する必要がある場合に便利です。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:828
#, no-wrap
msgid ""
"<project>\n"
"  [...]\n"
"  <build>\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-surefire-plugin</artifactId>\n"
"        <version>${surefire-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <quarkus.test.profile>foo</quarkus.test.profile> <1>\n"
"            <buildDirectory>${project.build.directory}</buildDirectory>\n"
"            [...]\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-failsafe-plugin</artifactId>\n"
"        <version>${failsafe-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <quarkus.test.profile>foo</quarkus.test.profile> <1>\n"
"            <buildDirectory>${project.build.directory}</buildDirectory>\n"
"            [...]\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"    </plugins>\n"
"  </build>\n"
"  [...]\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:831
msgid "The `foo` configuration profile will be used to run the tests."
msgstr "`foo`  設定プロファイルがテストの実行に使用されます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/maven-tooling.adoc:836
msgid "It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the `prod` profile."
msgstr "今のところ、ネイティブモードでカスタムテスト設定プロファイルを使用することはできません。ネイティブテストは常に `prod`  プロファイルを使用して実行されます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/maven-tooling.adoc:839
#, no-wrap
msgid "Bootstrap Maven properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:842
msgid "Quarkus bootstrap includes a Maven resolver implementation that is used to resolve application runtime and build time dependencies. The Quarkus Maven resolver is initialized from the same Maven command line that launched the build, test or dev mode. Typically, there is no need to add any extra configuration for it. However, there could be cases where an extra configuration option may be necessary to properly resolve application dependencies in test or dev modes, or IDEs."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:844
msgid "Maven test plugins (such as `surefire` and `failsafe`), for example, are not propagating build system properties to the running tests by default. Which means some of the system properties set by the Maven CLI aren't available for the Quarkus Maven resolver initialized for the tests, which may result in test dependencies being resolved using different settings than the main Maven build."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:846
msgid "Here is a list of system properties the Quarkus bootstrap Maven resolver checks during its initialization."
msgstr "以下は、Quarkus bootstrap Maven resolverが初期化時にチェックするシステムプロパティのリストです。"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:850
#, no-wrap
msgid "Property name"
msgstr "プロパティ名"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:854
#, no-wrap
msgid "`maven.home`"
msgstr "`maven.home`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:855
#, no-wrap
msgid "`MAVEN_HOME` envvar"
msgstr "`MAVEN_HOME` envvar"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:857
#, no-wrap
msgid "The Maven home dir is used to resolve the global settings file unless it was explicitly provided on the command line with the `-gs` argument"
msgstr "Maven のホームディレクトリは、コマンドラインで `-gs` 引数を使って明示的に提供されていない限り、グローバル設定ファイルの解決に使用されます。"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:858
#, no-wrap
msgid "`maven.settings`"
msgstr "`maven.settings`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:859
#, no-wrap
msgid "`~/m2/settings.xml`"
msgstr "`~/m2/settings.xml`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:861
#, no-wrap
msgid "Unless the custom settings file has been provided with the `-s` argument, this property can be used to point the resolver to a custom Maven settings file"
msgstr "カスタム設定ファイルが `-s` 引数で提供されていない限り、このプロパティを使用してリゾルバにカスタム Maven 設定ファイルを指定できます。"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:862
#, no-wrap
msgid "`maven.repo.local`"
msgstr "`maven.repo.local`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:863
#, no-wrap
msgid "`~/m2/repository`"
msgstr "`~/m2/repository`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:865
#, no-wrap
msgid "This property could be used to configure a custom local Maven repository directory, if it is different from the default one and the one specified in the `settings.xml`"
msgstr "これがデフォルトのものや `settings.xml`で設定されたものと異なる場合、このプロパティを使用して、カスタムのローカル Maven リポジトリ・ディレクトリを構成することができます。"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:866
#, no-wrap
msgid "`maven.top-level-basedir`"
msgstr "`maven.top-level-basedir`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:867
#, no-wrap
msgid "none"
msgstr "none"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:869
#, no-wrap
msgid "This property may be useful to help the Maven resolver identify the top-level Maven project in the workspace. By default, the Maven resolver will be discovering a project's workspace by navigating the parent-module POM relationship. However there could be project layouts that are using an aggregator module which isn't appearing as the parent for its modules. In this case, this property will help the Quarkus Maven resolver to properly discover the workspace."
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:870
#, no-wrap
msgid "`quarkus.bootstrap.effective-model-builder`"
msgstr "`quarkus.bootstrap.effective-model-builder`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:871
#, no-wrap
msgid "`false`"
msgstr "`false`"

#. type: Table
#: upstream/_versions/2.2/guides/maven-tooling.adoc:873
#, no-wrap
msgid "By default, the Quarkus Maven resolver is reading project's POMs directly when discovering the project's layout. While in most cases it works well enough and relatively fast, reading raw POMs has its limitation. E.g. if a POM includes modules in a profile, these modules will not be discovered. This system property enables project's layout discovery based on the effective POM models, that are properly interpolated, instead of the raw ones. The reason this option is not enabled by default is it may appear to be significantly more time consuming that could increase, e.g. CI testing times. Until there is a better approach found that could be used by default, projects that require it should enable this option."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:876
msgid "These system properties above could be added to, e.g., a `surefire` and/or `failsafe` plugin configuration as"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/maven-tooling.adoc:900
#, no-wrap
msgid ""
"<project>\n"
"  [...]\n"
"  <build>\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-surefire-plugin</artifactId>\n"
"        <version>${surefire-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <maven.home>${maven.hom}</maven.home> <1>\n"
"            <maven.repo.local>${settings.localRepository}</maven.repo.local> <2>\n"
"            <maven.settings>${session.request.userSettingsFile.path}</maven.settings> <3>\n"
"            <maven.top-level-basedir>${session.topLevelProject.basedir.absolutePath}</maven.top-level-basedir> <4>\n"
"            <quarkus.bootstrap.effective-model-builder>true</quarkus.bootstrap.effective-model-builder> <5>\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"    </plugins>\n"
"  </build>\n"
"  [...]\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:903
msgid "Propagate `maven.home` system property set by the Maven CLI to the tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:904
msgid "Set the Maven local repository directory for the tests"
msgstr "テスト用のMavenローカルリポジトリのディレクトリを設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:905
msgid "Set the Maven settings file the tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:906
msgid "Point to the top-level project directory for the tests"
msgstr "テスト用のトップレベルのプロジェクト・ディレクトリを指定"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:907
msgid "Enable effective POM-based project layout discovery"
msgstr "効果的なPOMベースのプロジェクト・レイアウト・ディスカバリーを有効化"

#. type: Title ====
#: upstream/_versions/2.2/guides/maven-tooling.adoc:908
#, no-wrap
msgid "Top-level vs Multi-module project directory"
msgstr "トップレベルとマルチモジュールのプロジェクトディレクトリ"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:912
msgid "In Maven there appears to be a notion of the top-level project (that is exposed as a project property `${session.topLevelProject.basedir.absolutePath}`)  and the multi-module project directory (that is available as property `${maven.multiModuleProjectDirectory}`). These directories might not always match!"
msgstr "Mavenでは、トップレベルのプロジェクト(プロジェクトのプロパティとして公開されています。 `${session.topLevelProject.basedir.absolutePath}`)と、マルチモジュールのプロジェクトディレクトリ(プロパティとして公開されています。 `${maven.multiModuleProjectDirectory}`)という概念があるようです。これらのディレクトリは常に一致するとは限りません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:914
msgid "`maven.multiModuleProjectDirectory` is meant to be consulted by the Maven code itself and not something to be relied upon by user code. So, if you find it useful, use it at your own risk!"
msgstr "`maven.multiModuleProjectDirectory` は、Maven コード自体が参照することを意図しており、ユーザーコードが頼るべきものではありません。なので、もし便利だと思っても、自分の責任で使ってくださいね。"

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:918
msgid "The `${maven.multiModuleProjectDirectory}` will be resolved to the first directory that contains `.mvn` directory as its child going up the workspace file system tree starting from the current directory (or the one specified with the `-f` argument) from which the `mvn` command was launched. If the `.mvn` directory was not found, however, the `${maven.multiModuleProjectDirectory}` will be pointing to the directory from which the `mvn` command was launched (or the one targeted with the `-f` argument)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/maven-tooling.adoc:920
msgid "The `${session.topLevelProject.basedir.absolutePath}` will be pointing either to the directory from which the `mvn` command was launched or to the directory targeted with the `-f` argument, if it was specified."
msgstr ""
