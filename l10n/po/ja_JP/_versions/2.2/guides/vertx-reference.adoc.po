# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-12 13:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/vertx-reference.adoc:6
#, no-wrap
msgid "Vert.x Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:12
msgid "https://vertx.io[Vert.x] is a toolkit for building reactive applications.  As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr "link:https://vertx.io[Vert.x]は、リアクティブなアプリケーションを構築するためのツールキットです。 link:quarkus-reactive-architecture.html[Quarkus Reactive Architecture]に記載されているように、QuarkusではVert.xを下地に使用しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:15
msgid "This guide is the companion to the xref:vertx.adoc[Using Eclipse Vert.x API from a Quarkus Application] guide.  It provides more advanced details about the usage and the configuration of the Vert.x instance used by Quarkus."
msgstr "このガイドは、 link:vertx.html[QuarkusアプリケーションからEclipse Vert.x APIの使用] ガイドの姉妹編です。Quarkusで使用されるVert.xインスタンスの使用方法や設定について、より詳細に説明しています。"

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx-reference.adoc:18
#, no-wrap
msgid "Accessing the Vert.x instance"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:22
msgid "To access the managed Vert.x instance, add the `quarkus-vertx` extension to your project.  Note that this dependency may already be installed (as a transitive dependency)."
msgstr "マネージドVert.xインスタンスにアクセスするには、 `quarkus-vertx` エクステンションをプロジェクトに追加してください。この依存関係がすでにインストールされている可能性があることに注意してください（推移的依存関係として）。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:24
msgid "With this extension, you can retrieve the managed instance of Vert.x using either field or constructor injection:"
msgstr "このエクステンションでは、フィールドまたはコンストラクタ・インジェクションのいずれかを使用して、Vert.xのマネージドインスタンスを取得できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:31
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBean {\n"
"// Field injection\n"
"@Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:36
#, no-wrap
msgid ""
"// Constructor injection\n"
"MyBean(Vertx vertx) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:38
#: upstream/_versions/2.2/guides/vertx-reference.adoc:201
#: upstream/_versions/2.2/guides/vertx-reference.adoc:723
#: upstream/_versions/2.2/guides/vertx-reference.adoc:784
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:41
msgid "You can inject either the:"
msgstr "以下のどちらかを注入することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:43
msgid "`io.vertx.core.Vertx` instance exposing the _bare_ Vert.x API"
msgstr "_裸の_ Vert.x APIを公開する `io.vertx.core.Vertx` インスタンス"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:44
msgid "`io.vertx.mutiny.core.Vertx` instance exposing the _Mutiny_ API"
msgstr "_Mutiny_ APIを公開する `io.vertx.mutiny.core.Vertx` インスタンス"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:46
msgid "We recommend using the Mutiny variant as it integrates with the other reactive APIs provided by Quarkus."
msgstr "Mutiny variantは、Quarkusが提供する他のリアクティブAPIと統合されているため、Mutiny variantの使用をお勧めします。"

#. type: Block title
#: upstream/_versions/2.2/guides/vertx-reference.adoc:48
#: upstream/_versions/2.2/guides/vertx-reference.adoc:462
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_versions/2.2/guides/vertx-reference.adoc:51
msgid "If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - 直感的なリアクティブプログラミングライブラリ]をご覧ください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:54
msgid "Documentation about the Vert.x Mutiny variant is available on https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "Vert.x Mutiny バリアントに関するドキュメントは https://smallrye.io/smallrye-mutiny-vertx-bindings にあります。"

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx-reference.adoc:56
#, no-wrap
msgid "Configuring the Vert.x instance"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:60
msgid "You can configure the Vert.x instance from the `application.properties` file.  The following table lists the supported properties:"
msgstr "`application.properties` ファイルから Vert.x インスタンスを設定することができます。次の表は、サポートされているプロパティの一覧です。"

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx-reference.adoc:65
#, no-wrap
msgid "Using Vert.x clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:69
msgid "In addition to Vert.x core, you can use most Vert.x ecosystem libraries.  Some Quarkus extension already wraps Vert.x libraries."
msgstr "Vert.xコアに加えて、ほとんどのVert.xエコシステムライブラリを使用することができます。いくつかのQuarkusエクステンションは、すでにVert.xライブラリをラップしています。"

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:70
#, no-wrap
msgid "Available APIs"
msgstr "利用可能なAPI"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:75
msgid "The following table lists the most used libraries from the Vert.x ecosystem.  To access these APIs, add the indicated extension or dependency to your project.  Refer to the associated documentation to learn how to use them."
msgstr "次の表は、Vert.xエコシステムで最も使用されているライブラリの一覧です。これらのAPIにアクセスするには、指定されたエクステンションまたは依存関係をプロジェクトに追加します。使用方法については、関連ドキュメントを参照してください。"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:79
#, no-wrap
msgid "API"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:80
#, no-wrap
msgid "Extension or Dependency"
msgstr "エクステンションか依存関係"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:82
#, no-wrap
msgid "Documentation"
msgstr "ドキュメント"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:83
#, no-wrap
msgid "AMQP Client"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:84
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:86
#, no-wrap
msgid "https://quarkus.io/guides/amqp"
msgstr "https://quarkus.io/guides/amqp"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:87
#, no-wrap
msgid "Circuit Breaker"
msgstr "サーキットブレーカー"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:88
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:90
#, no-wrap
msgid "https://vertx.io/docs/vertx-circuit-breaker/java/"
msgstr "https://vertx.io/docs/vertx-circuit-breaker/java/"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:91
#, no-wrap
msgid "Consul Client"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:92
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:94
#, no-wrap
msgid "https://vertx.io/docs/vertx-consul-client/java/"
msgstr "https://vertx.io/docs/vertx-consul-client/java/"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:95
#, no-wrap
msgid "DB2 Client"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:96
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-db2-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-db2-client` (extension)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:98
#: upstream/_versions/2.2/guides/vertx-reference.adoc:114
#: upstream/_versions/2.2/guides/vertx-reference.adoc:118
#: upstream/_versions/2.2/guides/vertx-reference.adoc:122
#, no-wrap
msgid "https://quarkus.io/guides/reactive-sql-clients"
msgstr "https://quarkus.io/guides/reactive-sql-clients"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:99
#, no-wrap
msgid "Kafka Client"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:100
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:102
#, no-wrap
msgid "https://quarkus.io/guides/kafka"
msgstr "https://quarkus.io/guides/kafka"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:103
#, no-wrap
msgid "Mail Client"
msgstr "メールクライアント"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:104
#, no-wrap
msgid "`io.quarkus:quarkus-mailer` (extension)"
msgstr "`io.quarkus:quarkus-mailer` (extension)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:106
#, no-wrap
msgid "https://quarkus.io/guides/mailer"
msgstr "https://quarkus.io/guides/mailer"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:107
#, no-wrap
msgid "MQTT Client"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:108
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:110
#, no-wrap
msgid "https://quarkus.io/guides/mqtt"
msgstr "https://quarkus.io/guides/mqtt"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:111
#, no-wrap
msgid "MS SQL Client"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:112
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-mssql-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-mssql-client` (extension)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:115
#, no-wrap
msgid "MySQL Client"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:116
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-mysql-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-mysql-client` (extension)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:119
#, no-wrap
msgid "PostgreSQL Client"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:120
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-pg-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-pg-client` (extension)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:123
#, no-wrap
msgid "RabbitMQ Client"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:124
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:126
#, no-wrap
msgid "https://vertx.io/docs/vertx-rabbitmq-client/java"
msgstr "https://vertx.io/docs/vertx-rabbitmq-client/java"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:127
#, no-wrap
msgid "Redis Client"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:128
#, no-wrap
msgid "`io.quarkus:quarkus-redis-client` (extension)"
msgstr "`io.quarkus:quarkus-redis-client` (extension)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:130
#, no-wrap
msgid "https://quarkus.io/guides/redis"
msgstr "https://quarkus.io/guides/redis"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:131
#, no-wrap
msgid "Web Client"
msgstr "ウェブクライアント"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:132
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"

#. type: Table
#: upstream/_versions/2.2/guides/vertx-reference.adoc:134
#, no-wrap
msgid "https://vertx.io/docs/vertx-web-client/java/"
msgstr "https://vertx.io/docs/vertx-web-client/java/"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:137
msgid "To learn more about the usage of the Vert.x Mutiny API, refer to https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "Vert.x Mutiny APIの使用方法について詳しくは、 https://smallrye.io/smallrye-mutiny-vertx-bindings を参照してください。"

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:138
#, no-wrap
msgid "Example of usage"
msgstr "使用例"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:142
msgid "This section gives an example using the Vert.x `WebClient`.  As indicated in the table above, add the following dependency to your project:"
msgstr "このセクションでは、Vert.x `WebClient` を使った例を紹介します。上の表にあるように、プロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:149
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:152
msgid "Now, in your code, you can create an instance of `WebClient`:"
msgstr "さて、コードの中で、 `WebClient` のインスタンスを作成することが可能です。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:156
#: upstream/_versions/2.2/guides/vertx-reference.adoc:398
#: upstream/_versions/2.2/guides/vertx-reference.adoc:436
#: upstream/_versions/2.2/guides/vertx-reference.adoc:567
#: upstream/_versions/2.2/guides/vertx-reference.adoc:669
#: upstream/_versions/2.2/guides/vertx-reference.adoc:709
#: upstream/_versions/2.2/guides/vertx-reference.adoc:758
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:164
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:167
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:172
#, no-wrap
msgid ""
"import io.vertx.mutiny.core.Vertx;\n"
"import io.vertx.mutiny.ext.web.client.WebClient;\n"
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.ext.web.client.WebClientOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:175
#, no-wrap
msgid ""
"@Path(\"/fruit-data\")\n"
"public class ResourceUsingWebClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:177
#, no-wrap
msgid "    private final WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:182
#, no-wrap
msgid ""
"    @Inject\n"
"    VertxResource(Vertx vertx) {\n"
"        this.client = WebClient.create(vertx);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:199
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Path(\"/{name}\")\n"
"    public Uni<JsonObject> getFruitData(@PathParam(\"name\") String name) {\n"
"        return client.getAbs(\"https://.../api/fruit/\" + name)\n"
"                .send()\n"
"                .onItem().transform(resp -> {\n"
"                    if (resp.statusCode() == 200) {\n"
"                        return resp.bodyAsJsonObject();\n"
"                    } else {\n"
"                        return new JsonObject()\n"
"                                .put(\"code\", resp.statusCode())\n"
"                                .put(\"message\", resp.bodyAsString());\n"
"                    }\n"
"                });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:207
msgid "This resource creates a `WebClient` and, upon request, uses this client to invoke a remote HTTP API.  Depending on the result, the response is forwarded as received, or it creates a JSON object wrapping the error.  The `WebClient` is asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr "このリソースは、 `WebClient` を作成し、リクエストに応じて、このクライアントを使用してリモート HTTP API を呼び出します。結果に応じて、レスポンスは受信したまま転送されるか、エラーをラップしたJSONオブジェクトが作成されます。 `WebClient` は非同期（かつノンブロッキング）で、エンドポイントからは `Uni` が返されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:211
msgid "The application can also run as a native executable.  But, first, we need to instruct Quarkus to enable _ssl_ (if the remote API uses HTTPS).  Open the `src/main/resources/application.properties` and add:"
msgstr "このアプリケーションは、ネイティブ実行可能ファイルとしても実行できます。しかし、その前に、Quarkusに _ssl_ を有効にするよう指示する必要があります（リモートAPIがHTTPSを使用している場合）。 `src/main/resources/application.properties` を開き、以下を追加します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:215
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:218
msgid "Then, create the native executable with:"
msgstr "そして、ネイティブ実行可能ファイルを作成します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:222
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr "./mvnw package -Pnative\n"

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx-reference.adoc:225
#, no-wrap
msgid "Using Vert.x JSON"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:229
msgid "Vert.x APIs often rely on JSON.  Vert.x provides two convenient classes to manipulate JSON document: `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray`."
msgstr "Vert.xのAPIはしばしばJSONに依存しています。Vert.xは、JSONドキュメントを操作する2つの便利なクラスを提供しています： `io.vertx.core.json.JsonObject` および `io.vertx.core.json.JsonArray` 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:231
msgid "`JsonObject` can be used to map an object into its JSON representation and build an object from a JSON document:"
msgstr "`JsonObject` は、オブジェクトをJSON表現にマッピングしたり、JSONドキュメントからオブジェクトを構築するために使用できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:237
#, no-wrap
msgid ""
"// Map an object into JSON\n"
"Person person = ...;\n"
"JsonObject json = JsonObject.mapFrom(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:241
#, no-wrap
msgid ""
"// Build an object from JSON\n"
"json = new JsonObject();\n"
"person = json.mapTo(Person.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:245
msgid "Note that these features use the mapper managed by the `quarkus-jackson` extension.  Refer to xref:rest-json.adoc#json[Jackson configuration] to customize the mapping."
msgstr "なお、これらの機能は、 `quarkus-jackson` エクステンションで管理されているマッパーを使用しています。マッピングをカスタマイズするには link:rest-json.html#json[Jacksonの設定] を参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:249
msgid "JSON Object and JSON Array are both supported as Quarkus HTTP endpoint requests and response bodies (using classic RESTEasy and RESTEasy Reactive).  Consider these endpoints:"
msgstr "JSON ObjectとJSON Arrayは、QuarkusのHTTPエンドポイントのリクエストとレスポンスボディとしてサポートされています（従来のRESTEasyとRESTEasy Reactiveを使用）。これらのエンドポイントについて考えてみましょう。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:256
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class VertxJsonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:262
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/object\")\n"
"    public JsonObject jsonObject(@PathParam String name) {\n"
"        return new JsonObject().put(\"Hello\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:269
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/array\")\n"
"    public JsonArray jsonArray(@PathParam String name) {\n"
"        return new JsonArray().add(\"Hello\").add(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:272
msgid "http://localhost:8080/hello/Quarkus/object returns:"
msgstr "http://localhost:8080/hello/Quarkus/object は次を返却します"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:276
#, no-wrap
msgid "{\"Hello\":\"Quarkus\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:279
msgid "http://localhost:8080/hello/Quarkus/array returns:"
msgstr "http://localhost:8080/hello/Quarkus/array は次を返却します"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:283
#, no-wrap
msgid "[\"Hello\",\"Quarkus\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:286
msgid "This works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr "これは、JSONコンテンツがリクエストボディである場合や、 `Uni`, `Multi`, `CompletionStage`, `Publisher` で包まれている場合にも同様に機能します。"

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx-reference.adoc:287
#, no-wrap
msgid "Deploying verticles"
msgstr "verticleの展開"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:292
msgid "link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.  This model does not claim to be a strict actor-model implementation, but it shares similarities, especially concerning concurrency, scaling, and deployment.  To use this model, you write and _deploy_ verticles, communicating with each other by sending messages on the event bus."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:295
msgid "You can deploy _verticles_ in Quarkus.  It supports:"
msgstr "Quarkusで _verticles_ をデプロイすることができます。次をサポートしています:"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:297
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:298
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:300
msgid "To deploy verticles, use the regular Vert.x API:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:304
#, no-wrap
msgid "@Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:308
#, no-wrap
msgid ""
"// ...\n"
"vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n"
"vertx.deployVerticle(new MyVerticle(), ar -> { });\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:311
msgid "An example explaining how to deploy verticles during the initialization of the application will follow."
msgstr "アプリケーションの初期化時にVerticleをデプロイする方法については、次の例で説明します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:313
msgid "You can also pass deployment options to configure the verticle as well as set the number of instances."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:316
msgid "Verticles are not _beans_ by default.  However, you can implement them as _ApplicationScoped_ beans and get injection support:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:320
#: upstream/_versions/2.2/guides/vertx-reference.adoc:348
#, no-wrap
msgid "package io.quarkus.vertx.verticles;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:324
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:326
#: upstream/_versions/2.2/guides/vertx-reference.adoc:402
#: upstream/_versions/2.2/guides/vertx-reference.adoc:713
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:329
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBeanVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:331
#, no-wrap
msgid "    @ConfigProperty(name = \"address\") String address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:339
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(address)\n"
"                .handler(m -> m.replyAndForget(\"hello\"))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:342
msgid "You don't have to inject the `vertx` instance but instead, leverage the instance stored in the protected field of `AbstractVerticle`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:344
msgid "Then, deploy the verticle instances with:"
msgstr "そして、バーティクルインスタンスをデプロイします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:351
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:354
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:357
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class VerticleDeployer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:362
#, no-wrap
msgid ""
"    public void init(@Observes StartupEvent e, Vertx vertx, MyBeanVerticle verticle) {\n"
"         vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:365
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr "露出しているすべての `AbstractVerticle` をデプロイしたい場合は、次のようにします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:373
#, no-wrap
msgid ""
"public void init(@Observes StartupEvent e, Vertx vertx, Instance<AbstractVerticle> verticles) {\n"
"    for (AbstractVerticle verticle : verticles) {\n"
"        vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx-reference.adoc:376
#, no-wrap
msgid "Using the event bus"
msgstr "イベントバスの使用"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:380
msgid "Vert.x comes with a built-in https://vertx.io/docs/vertx-core/java/#event_bus[event bus] that you can use from your Quarkus application.  So, your application components (CDI beans, resources...) can interact using asynchronous events, thus promoting loose-coupling."
msgstr "Vert.xには、Quarkusアプリケーションから使用できる link:https://vertx.io/docs/vertx-core/java/#event_bus[イベントバス]が組み込まれています。そのため、アプリケーションコンポーネント（CDI Bean、リソース...）は、非同期イベントを使用して相互に作用することができ、疎結合を促進します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:383
msgid "With the event bus, you send _messages_ to _virtual addresses_.  The event bus offers three types of delivery mechanisms:"
msgstr "イベントバスでは、 _仮想アドレス_ に _メッセージ_ を送信します。イベントバスには、3種類の配送メカニズムが用意されています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:385
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "point-to-point - メッセージを送信すると、1人の消費者がそれを受信します。複数の消費者がそのアドレスを聞く場合は、ラウンドロビンが適用されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:386
msgid "publish/subscribe - publish a message; all the consumers listening to the address are receiving the message;"
msgstr "publish/subscribe - メッセージを発行し、そのアドレスを聞いているすべてのコンシューマーがメッセージを受信します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:387
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous fashion."
msgstr "request/reply - メッセージを送信し、応答を期待します。受信者は非同期的にメッセージに応答することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:389
msgid "All these delivery mechanisms are non-blocking and are providing one of the fundamental bricks to build reactive applications."
msgstr "これらの配信メカニズムはすべてノンブロッキングであり、リアクティブなアプリケーションを構築するための基本的な要素の一つとなっています。"

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:390
#, no-wrap
msgid "Consuming events"
msgstr "イベントのコンシューム"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:394
msgid "While you can use the Vert.x API to register consumers, Quarkus comes with declarative support.  To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr "Vert.x APIを使用してコンシューマーを登録することができますが、Quarkusには宣言型のサポートがあります。イベントを消費するには、 `io.quarkus.vertx.ConsumeEvent` アノテーションを使用します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:400
#: upstream/_versions/2.2/guides/vertx-reference.adoc:438
#: upstream/_versions/2.2/guides/vertx-reference.adoc:711
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:405
#: upstream/_versions/2.2/guides/vertx-reference.adoc:446
#: upstream/_versions/2.2/guides/vertx-reference.adoc:716
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:411
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:413
msgid "If not set, the address is the fully qualified name of the bean; for instance, in this snippet, it's `org.acme.vertx.GreetingService`."
msgstr "設定されていない場合、アドレスはBeanの完全修飾名となります。例えば、このスニペットでは、 `org.acme.vertx.GreetingService` となります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:414
msgid "The method parameter is the message body. If the method returns _something_, it's the message response."
msgstr "メソッドのパラメータはメッセージボディです。メソッドが _何か_ を返す場合は、それがメッセージのレスポンスとなります。"

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:415
#, no-wrap
msgid "Configuring the address"
msgstr "アドレスの設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:418
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "`@ConsumeEvent` アノテーションでアドレスを設定することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:425
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:427
msgid "Receive the messages sent to the `greeting` address"
msgstr "`greeting` アドレスに送信されたメッセージを受信する"

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:428
#, no-wrap
msgid "Asynchronous processing"
msgstr "非同期処理"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:432
msgid "The previous examples use synchronous processing.  Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr "これまでの例では、同期処理を行っています。 `io.smallrye.mutiny.Uni` または `java.util.concurrent.CompletionStage` を返却することで、非同期処理も可能です。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:443
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:452
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public CompletionStage<String> consume(String name) {\n"
"        // return a CompletionStage completed when the processing is finished.\n"
"        // You can also fail the CompletionStage explicitly\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:459
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/vertx-reference.adoc:466
msgid "The previous example uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前の例はMutinyリアクティブ型を使用しています。Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - 直感的なリアクティブプログラミングライブラリ]をご覧ください。"

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:468
#, no-wrap
msgid "Blocking processing"
msgstr "ブロッキング処理"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:472
msgid "By default, the code consuming the event must be _non-blocking_, as it's called on an I/O thread.  If your processing is blocking, use the `@io.smallrye.common.annotation.Blocking` annotation:"
msgstr "デフォルトでは、イベントを消費するコードは、I/Oスレッドで呼び出されるため、 _ノンブロッキング_ でなければなりません。処理がブロッキングの場合は、 `@io.smallrye.common.annotation.Blocking` アノテーションを使用してください。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:480
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\")\n"
"@Blocking\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:483
msgid "Alternatively, you can use the `blocking` attribute from the `@ConsumeEvent` annotation:"
msgstr "あるいは、 `@ConsumeEvent` アノテーションの `blocking` 属性を使用することもできます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:490
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:493
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`."
msgstr "`@Blocking` を使用する場合、 `@ConsumeEvent` の `blocking` 属性の値は無視されます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:494
#, no-wrap
msgid "Replying to messages"
msgstr "メッセージへの返信"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:498
msgid "The _return_ value of a method annotated with `@ConsumeEvent` is used to respond to the incoming message.  For instance, in the following snippet, the returned `String` is the response."
msgstr "`@ConsumeEvent` でアノテーションされたメソッドの _戻り_ 値は、受信したメッセージへの応答に使用されます。たとえば、次のスニペットでは、返された `String` が応答となります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:505
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:508
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "また、 `Uni<T>` や `CompletionStage<T>` を返すことで、非同期応答を扱うこともできます。。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:515
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/vertx-reference.adoc:520
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "Context Propagation エクステンションを使えば、 `executor` を注入することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:523
#, no-wrap
msgid "@Inject Executor executor;\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:526
#, no-wrap
msgid "Implementing fire and forget interactions"
msgstr "fire and forget インタラクションの実装"

#. type: delimited block =
#: upstream/_versions/2.2/guides/vertx-reference.adoc:531
msgid "You don't have to reply to received messages.  Typically, for a _fire and forget_ interaction, the messages are consumed, and the sender does not need to know about it.  To implement this pattern, your consumer method returns `void`."
msgstr "受信したメッセージに返信する必要はありません。通常、 _fire and forget_ のインタラクションでは、メッセージは消費され、送信者はそのことを知る必要はありません。このパターンを実装するために、コンシューマー・メソッドは `void` を返します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:538
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:540
#, no-wrap
msgid "Dealing with messages"
msgstr "メッセージの処理"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:543
msgid "Unlike the previous example using the _payloads_ directly, you can also use `Message` directly:"
msgstr "_ペイロード_ を直接使用する前の例とは異なり、 `Message` を直接使用することもできます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:551
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:553
#, no-wrap
msgid "Handling Failures"
msgstr "失敗のハンドリング"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:556
msgid "If a method annotated with `@ConsumeEvent` throws an exception, then:"
msgstr "`@ConsumeEvent` でアノテーションされたメソッドが例外を発生させた場合、"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:558
msgid "if a reply handler is set, then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr "返信ハンドラが設定されている場合、失敗はコード `ConsumeEvent#FAILURE_CODE` と例外メッセージを含む `io.vertx.core.eventbus.ReplyException` を通じて送信者に伝えられます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:559
msgid "if no reply handler is set, then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, i.e. `io.vertx.core.Vertx#exceptionHandler()`."
msgstr "応答ハンドラが設定されていない場合、例外は再スローされ（必要に応じて `RuntimeException` でラップされる）、デフォルトの例外ハンドラ、すなわち `io.vertx.core.Vertx#exceptionHandler()` で処理することができます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:560
#, no-wrap
msgid "Sending messages"
msgstr "メッセージの送信"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:563
msgid "Sending and publishing messages use the Vert.x event bus:"
msgstr "メッセージの送信と公開にはVert.x Event busを使用します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:572
#: upstream/_versions/2.2/guides/vertx-reference.adoc:674
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:578
#: upstream/_versions/2.2/guides/vertx-reference.adoc:680
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:581
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:584
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                            // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:593
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(@PathParam String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().transform(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:595
msgid "Inject the Event bus"
msgstr "イベントバスのインジェクト"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:596
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "アドレス `greeting` にメッセージを送信。メッセージのペイロードは `name`"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:598
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` オブジェクトは、以下のメソッドを提供します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:600
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 特定のアドレスへのメッセージ - 一人のコンシューマーがメッセージを受信する。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:601
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 特定のアドレスにメッセージを送る - すべてのコンシューマーがメッセージを受け取る。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:602
msgid "`request` a message and expect a reply"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:612
#, no-wrap
msgid ""
"// Case 1\n"
"bus.sendAndForget(\"greeting\", name)\n"
"// Case 2\n"
"bus.publish(\"greeting\", name)\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are you?\")\n"
"        .onItem().transform(Message::body);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:614
#, no-wrap
msgid "Using codecs"
msgstr "コーデックを使う"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:619
msgid "The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.  Quarkus provides a default codec for local delivery.  So you can exchange objects as follows:"
msgstr "link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.xイベントバス] では、コーデックを使用してオブジェクトの _シリアライズ_ と _デシリアライズ_ を行います。Quarkusでは、ローカル配信用のデフォルトのコーデックを提供しています。そのため、以下のようにオブジェクトを交換することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:629
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(@PathParam String name) {\n"
"    return bus.<String>request(\"greeting\", new MyName(name))\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:634
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\")\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \" + name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:637
msgid "If you want to use a specific codec, you need to set it on both ends explicitly:"
msgstr "特定のコーデックを使用したい場合は、両サイドで明示的に設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:648
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(@PathParam String name) {\n"
"    return bus.<String>request(\"greeting\", name,\n"
"        new DeliveryOptions().setCodecName(MyNameCodec.class.getName())) // <1>\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:653
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\", codec = MyNameCodec.class)            // <2>\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \"+name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:655
msgid "Set the name of the codec to use to send the message"
msgstr "メッセージの送信に使用するコーデックの名前を設定します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:656
msgid "Set the codec to use to receive the message"
msgstr "メッセージの受信に使用するコーデックを設定します。"

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:657
#, no-wrap
msgid "Combining HTTP and the event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:663
msgid "Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.  It uses the request/reply dispatching mechanism.  Instead of implementing the business logic inside the JAX-RS endpoint, we are sending a message.  Another bean consumes this message, and the response is sent using the _reply_ mechanism."
msgstr "greeting HTTPエンドポイントに戻り、非同期メッセージパッシングを使用して呼び出しを別のBeanに委譲しましょう。 要求/応答ディスパッチメカニズムを使用します。 JAX-RSエンドポイント内にビジネスロジックを実装する代わりに、メッセージを送信しています。 別のBeanがこのメッセージを消費し、_応答_ メカニズムを使用して応答が送信されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:665
msgid "In your HTTP endpoint class, inject the event bus and uses the `request` method to send a message to the event bus and expect a response:"
msgstr "HTTPエンドポイントクラスでは、イベントバスを注入し、 `request` メソッドを使用して、イベントバスにメッセージを送信し、応答を期待します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:683
#, no-wrap
msgid ""
"@Path(\"/bus\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:686
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:695
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(@PathParam String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().transform(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:697
msgid "send the `name` to the `greeting` address and request a response"
msgstr "`greeting` アドレスに  `name`  を送信し、レスポンスを要求します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:698
msgid "when we get the response, extract the body and send it to the user"
msgstr "レスポンスを取得したら、ボディを抽出してユーザーに送信します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:702
msgid "the HTTP method returns a `Uni`.  If you are using RESTEasy Reactive, `Uni` support is built-in.  If you are using _classic_ RESTEasy, you need to add the `quarkus resteasy-mutiny` extension to your project."
msgstr "HTTP メソッドは `Uni` を返します。RESTEasy Reactive を使用している場合は、 `Uni` のサポートが組み込まれています。 _従来の_ RESTEasyを使用している場合は、 `quarkus resteasy-mutiny` 拡張機能をプロジェクトに追加する必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:705
msgid "We need a consumer listening on the `greeting` address.  This consumer can be in the same class or another bean such as:"
msgstr "`greeting` のアドレスをリッスンするコンシューマーが必要です。このコンシューマーは、同じクラスでも、次のような別のBeanでも構いません。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:721
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:726
msgid "This bean receives the name and returns the greeting message."
msgstr "このBeanは、名前を受け取り、グリーティングメッセージを返します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:728
msgid "With this in place, every HTTP request on `/bus/quarkus` sends a message to the event bus, waits for a reply, and when this one arrives, writes the HTTP response:"
msgstr "これにより、 `/bus/quarkus` のすべてのHTTPリクエストは、イベントバスにメッセージを送信し、応答を待ち、その応答が到着すると、HTTPレスポンスを書き込みます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:732
#, no-wrap
msgid "Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:735
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "より理解しやすくするために、HTTP リクエスト/レスポンスがどのように処理されたかを詳しく見てみましょう。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:737
msgid "The request is received by the `greeting` method"
msgstr "リクエストは、 `greeting` メソッドで受信されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:738
msgid "a message containing the _name_ is sent to the event bus"
msgstr "_name_ を含むメッセージがイベントバスに送信されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:739
msgid "Another bean receives this message and computes the response"
msgstr "別の Bean がこのメッセージを受信して、レスポンスを計算します."

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:740
msgid "This response is sent back using the reply mechanism"
msgstr "このレスポンスは、応答機構を使用して返信されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:741
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "送信者が応答を受信すると、HTTP レスポンスに内容が書き込まれます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:743
#, no-wrap
msgid "Bi-directional communication with browsers using SockJS"
msgstr "SockJSによるブラウザとの双方向通信"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:749
msgid "The SockJS bridge provided by Vert.x allows browser applications and Quarkus applications to communicate using the event bus.  It connects both sides.  So, both sides can send messages received on the other side.  It supports the three delivery mechanisms."
msgstr "Vert.xが提供するSockJSブリッジは、ブラウザアプリケーションとQuarkusアプリケーションがイベントバスを使って通信できるようにします。双方を接続します。そのため、双方が相手側で受信したメッセージを送信することができます。3つの配信メカニズムをサポートしています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:752
msgid "SockJS negotiates the communication channel between the Quarkus application and the browser.  If WebSockets are supported, it uses them; otherwise, it degrades to SSE, long polling, etc."
msgstr "SockJSは、Quarkusアプリケーションとブラウザの間の通信チャネルをネゴシエートします。WebSocketがサポートされている場合はそれを使用し、そうでない場合はSSEや長いポーリングなどにダウングレードします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:754
msgid "So use SockJS, you need to configure the bridge, especially the addresses that will be used to communicate:"
msgstr "SockJSを使用するためには、ブリッジの設定、特に通信に使用されるアドレスの設定が必要です。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:764
#, no-wrap
msgid ""
"import io.vertx.core.Vertx;\n"
"import io.vertx.ext.bridge.PermittedOptions;\n"
"import io.vertx.ext.web.Router;\n"
"import io.vertx.ext.web.handler.sockjs.SockJSBridgeOptions;\n"
"import io.vertx.ext.web.handler.sockjs.SockJSHandler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:769
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
"import javax.inject.Inject;\n"
"import java.util.concurrent.atomic.AtomicInteger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:772
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SockJsExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:775
#, no-wrap
msgid ""
"    @Inject\n"
"    Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:782
#, no-wrap
msgid ""
"    public void init(@Observes Router router) {\n"
"        SockJSHandler sockJSHandler = SockJSHandler.create(vertx);\n"
"        sockJSHandler.bridge(new SockJSBridgeOptions()\n"
"                .addOutboundPermitted(new PermittedOptions().setAddress(\"ticks\")));\n"
"        router.route(\"/eventbus/*\").handler(sockJSHandler);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:788
msgid "This code configures the SockJS bridge to send all the messages targeting the `ticks` address to the connected browsers.  More detailled explanations about the configuration can be found on https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[the Vert.x SockJS Bridge documentation]."
msgstr "このコードは、SockJSブリッジが接続されたブラウザに `ticks` のアドレスをターゲットとしたすべてのメッセージを送信するように設定します。設定についての詳細な説明は、 link:https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[Vert.x SockJS Bridge のドキュメント]にあります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:790
msgid "The browser must use the `vertx-eventbus` JavaScript library to consume the message:"
msgstr "ブラウザは、メッセージを消費するために、 `vertx-eventbus` JavaScriptライブラリを使用する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:804
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>SockJS example - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\"></script>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/vertx3-eventbus-client@3.8.5/vertx-eventbus.min.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:806
#, no-wrap
msgid "<h1>SockJS Examples</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:808
#, no-wrap
msgid "<p><strong>Last Tick:</strong> <span id=\"tick\"></span></p>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:812
#, no-wrap
msgid ""
"</body>\n"
"<script>\n"
"    var eb = new EventBus('/eventbus');\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:814
#, no-wrap
msgid "    eb.onopen = function () {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:819
#, no-wrap
msgid ""
"        eb.registerHandler('ticks', function (error, message) {\n"
"            $(\"#tick\").html(message.body);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:822
#, no-wrap
msgid ""
"</script>\n"
"</html>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx-reference.adoc:825
#, no-wrap
msgid "Native Transport"
msgstr "ネイティブトランスポート"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:828
msgid "Native transports are not supported in GraalVM produced binaries."
msgstr "GraalVMで作られたバイナリでは、ネイティブトランスポートはサポートされていません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:833
msgid "Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports], which offers performance improvements on specific platforms.To enable them, you must include the appropriate dependency for your platform. It's usually a good idea to have both to keep your application platform agnostic. Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr "Vert.xは link:https://netty.io/wiki/native-transports.html[Nettyのネイティブトランスポート]を使用することができ、特定のプラットフォームでパフォーマンスを向上させることができます。これらを有効にするには、お使いのプラットフォームに適切な依存関係を含める必要があります。これらを有効にするには、プラットフォームに適した依存関係を含める必要があります。通常、アプリケーションをプラットフォームに依存しないようにするためには、両方を持つことが良いアイデアです。Nettyは賢いので、サポートされていないプラットフォームでは一切使用しないなど、適切な方を使用します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:841
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-epoll</artifactId>\n"
"  <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:847
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-kqueue</artifactId>\n"
"  <classifier>osx-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:851
msgid "You will also have to explicitly configure Vert.x to use the native transport.  In `application.properties` add:"
msgstr "また、Vert.xでネイティブトランスポートを使用するように明示的に設定する必要があります。 `application.properties` に次を追加します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:855
#, no-wrap
msgid "quarkus.vertx.prefer-native-transport=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:858
msgid "Or in `application.yml`:"
msgstr "あるいは、 `application.yml` で次のように設定します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:864
#, no-wrap
msgid ""
"quarkus:\n"
"  vertx:\n"
"    prefer-native-transport: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:867
msgid "If all is well quarkus will log:"
msgstr "すべてがうまくいけば、クァーカス以下のログ出力を行います。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:870
#, no-wrap
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:872
#, no-wrap
msgid "Native Linux Transport"
msgstr "ネイティブLinuxトランスポート"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:875
msgid "On Linux you can enable the following socket options:"
msgstr "Linuxでは、以下のソケットオプションを有効にすることができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:877
#: upstream/_versions/2.2/guides/vertx-reference.adoc:898
msgid "SO_REUSEPORT"
msgstr "SOREUSEPORT"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:879
#: upstream/_versions/2.2/guides/vertx-reference.adoc:900
#, no-wrap
msgid "quarkus.http.so-reuse-port=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:881
msgid "TCP_QUICKACK"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:883
#, no-wrap
msgid "quarkus.http.tcp-quick-ack=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:885
msgid "TCP_CORK"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:887
#, no-wrap
msgid "quarkus.http.tcp-cork=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:889
msgid "TCP_FASTOPEN"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:891
#, no-wrap
msgid "quarkus.http.tcp-fast-open=true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/vertx-reference.adoc:893
#, no-wrap
msgid "Native MacOS Transport"
msgstr "ネイティブMacOSトランスポート"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:896
msgid "On MacOS Sierra and above you can enable the following socket options:"
msgstr "MacOS Sierra以上では、以下のソケットオプションを有効にすることができます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx-reference.adoc:903
#, no-wrap
msgid "Listening to a Unix Domain Socket"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:909
msgid "Listening on a Unix domain socket allows us to dispense with the overhead of TCP if the connection to the quarkus service is established from the same host. This can happen if access to the service goes through a proxy which is often the case if you're setting up a service mesh with a proxy like Envoy."
msgstr "Unixドメインソケットでリスニングすることにより、quarkusサービスへの接続が同じホストから確立されている場合、TCPのオーバーヘッドを省略することができます。これは、サービスへのアクセスがプロキシを経由する場合に起こります。Envoyのようなプロキシを使ってサービスメッシュを設定している場合によく見られます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:911
msgid "This will only work on platforms that support <<native-transport>>."
msgstr "これは、 link:#native-transport[[native-transport]] をサポートするプラットフォームでのみ動作します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:914
msgid "Enable the appropriate <<native-transport>> and set the following environment property:"
msgstr "適切な <<native-transport>> を有効にし、以下の環境プロパティを設定します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:918
#, no-wrap
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:922
msgid "By itself this will not disable the tcp socket which by default will open on `0.0.0.0:8080`. It can be explicitly disabled:"
msgstr "これだけでは、デフォルトで `0.0.0.0:8080` で開かれる tcp ソケットを無効にすることはできません。これは次のように明示的に無効にすることができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:925
#, no-wrap
msgid "quarkus.http.host-enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:929
msgid "These properties can be set through Java's `-D` command line parameter or on `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx-reference.adoc:930
#, no-wrap
msgid "Read only deployment environments"
msgstr "読み取り専用のデプロイメント環境"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:933
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr "ファイルシステムが読み取り専用の環境では、次のようなエラーが発生することがあります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx-reference.adoc:937
#, no-wrap
msgid "java.lang.IllegalStateException: Failed to create cache dir\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx-reference.adoc:939
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr "`/tmp/` が書き込み可能である場合、これは `vertx.cacheDirBase` プロパティが `/tmp/` のディレクトリを指すように設定することで修正できます。例えば、OpenShift では環境変数 `JAVA_OPTS` を作成して `-Dvertx.cacheDirBase=/tmp/vertx` という値を設定します。"
