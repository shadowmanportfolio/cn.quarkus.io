# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-12 13:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:6
#, no-wrap
msgid "Getting Started With Reactive"
msgstr "リアクティブ入門"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:12
msgid "_Reactive_ is a set of principles to build robust, efficient, and concurrent applications and systems.  These principles let you handle more load than traditional approaches while using the resources (CPU and memory) more efficiently while also reacting to failures gracefully."
msgstr "_リアクティブ_ とは、堅牢で効率的、かつコンカレントなアプリケーションやシステムを構築するための一連の原則です。これらの原則により、従来のアプローチよりも多くの負荷を処理しながら、リソース（CPUやメモリ）をより効率的に使用し、また障害にも適切に対応することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:16
msgid "Quarkus is a _Reactive_ framework.  Since the beginning, _Reactive_ has been an essential tenet of the Quarkus architecture.  It includes many reactive features and offers a broad ecosystem."
msgstr "Quarkusは _Reactive_ フレームワークです。当初から、 _Reactive_はQuarkusのアーキテクチャに欠かせない要素でした。多くのReactive機能が含まれており、幅広いエコシステムを提供しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:19
msgid "This guide is not an in-depth article about what _Reactive_ is and how Quarkus enables reactive architectures.  If you want to read more about these topics, refer to the xref:quarkus-reactive-architecture.adoc[Reactive Architecture guide], which provides an overview of the Quarkus reactive ecosystem."
msgstr "このガイドは、 _リアクティブ_ とは何か、Quarkusでどのようにリアクティブアーキテクチャを実現するかについての詳細な記事ではありません。これらのトピックについて詳しく知りたい場合は、Quarkusのリアクティブエコシステムの概要を説明した xref:quarkus-reactive-architecture.adoc[リアクティブアーキテクチャガイド] を参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:23
msgid "In this guide, we will get you started with some reactive features of Quarkus.  We are going to implement a simple CRUD application.  Yet, unlike in the xref:hibernate-orm-panache.adoc[Hibernate with Panache guide], it uses the reactive features of Quarkus."
msgstr "このガイドでは、Quarkusのリアクティブな機能をご紹介します。簡単なCRUDアプリケーションを実装する予定です。ただし、 xref:hibernate-orm-panache.adoc[Hibernate with Panacheガイド] とは異なり、Quarkusのリアクティブ機能を使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:25
msgid "This guide will help you with:"
msgstr "このガイドでは、次の情報を提供します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:27
msgid "Bootstrapping a reactive CRUD application with Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:28
msgid "Using Hibernate Reactive with Panache to interact with a database in a reactive fashion"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:29
msgid "Using RESTEasy Reactive to implement HTTP API while enforcing the reactive principle"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:30
msgid "Packaging and Running the application"
msgstr "アプリケーションのパッケージ化と実行"

#. type: Title ==
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:31
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:34
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:36
msgid "around 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:37
msgid "your favorite IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:38
msgid "Java 11+ installed with `JAVA_HOME` configured appropriately."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:39
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:43
msgid "Verify that Maven is using the Java version you expect.  If you have multiple JDKs installed, make sure Maven is using the expected one.  You can verify which JDK Maven uses by running `mvn --version.`"
msgstr "Mavenが期待するJavaバージョンを使用していることを確認します。複数のJDKがインストールされている場合、Mavenが期待されるものを使用していることを確認してください。 `mvn --version.` を実行することで、Mavenが使用するJDKを確認することができます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:44
#, no-wrap
msgid "Imperative vs. Reactive: a question of threads"
msgstr "命令型かリアクティブ型か: スレッドの問題だ"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:48
msgid "As mentioned above, in this guide, we are going to implement a reactive CRUD application.  But you may wonder what the differences and benefits are in comparison to the traditional and imperative model."
msgstr "前述したように、このガイドでは、リアクティブなCRUDアプリケーションを実装します。しかし、伝統的なモデルや命令型のモデルと比べて、どのような違いや利点があるのか疑問に思うかもしれません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:51
msgid "To better understand the contrast, we need to explain the difference between the reactive and imperative execution models.  It's essential to comprehend that _Reactive_ is not just a different execution model, but that distinction is necessary to understand this guide."
msgstr "この対比をよりよく理解するためには、リアクティブ型と命令型の実行モデルの違いを説明する必要があります。 _リアクティブ_ は単なる実行モデルの違いではなく、このガイドを理解するためにはその区別が必要であることを理解しておく必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:58
msgid "In the traditional and imperative approach, frameworks assign a thread to handle the request.  So, the whole processing of the request runs on this worker thread.  This model does not scale very well.  Indeed, to handle multiple concurrent requests, you need multiple threads; and so your application concurrency is constrained by the number of threads.  In addition, these threads are blocked as soon as your code interacts with remote services.  So, it leads to inefficient usage of the resources, as you may need more threads, and each thread, as they are mapped to OS threads, has a cost in terms of memory and CPU."
msgstr "伝統的な命令型のアプローチでは、フレームワークはリクエストを処理するスレッドを割り当てます。つまり、リクエストの処理全体がこのワーカースレッド上で実行されるのです。このモデルは、スケールがあまりよくありません。実際、複数の同時リクエストを処理するためには、複数のスレッドが必要となり、アプリケーションの同時実行性はスレッドの数によって制限されます。さらに、これらのスレッドは、コードがリモートサービスとやり取りするとすぐにブロックされます。そのため、より多くのスレッドが必要となり、各スレッドはOSのスレッドにマッピングされているため、メモリやCPUのコストがかかり、リソースの非効率的な使用につながります。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:59
#, no-wrap
msgid "Imperative"
msgstr "命令型"

#. type: Target for macro image
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:59
#, no-wrap
msgid "blocking-threads.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:67
msgid "On the other side, the reactive model relies on non-blocking I/Os and a different execution model.  Non-blocking I/O provides an efficient way to deal with concurrent I/O.  A minimal amount of threads called I/O threads, can handle many concurrent I/O.  With such a model, request processing is not delegated to a worker thread but uses these I/O threads directly.It saves memory and CPU as there is no need to create worker threads to handle the requests.  It also improves the concurrency as it removes the constraint on the number of threads.  Finally, it also improves response time as it reduces the number of thread switches."
msgstr "一方、リアクティブモデルは、ノンブロッキングI/Oおよび、異なる実行モデルに依存しています。ノンブロッキングI/Oは、同時I/Oを効率的に処理する方法です。I/Oスレッドと呼ばれる最小限のスレッドで、多くの同時I/Oを処理することができます。このようなモデルでは、リクエスト処理をワーカースレッドに委ねるのではなく、I/Oスレッドを直接使用します。リクエストを処理するためにワーカースレッドを作成する必要がないため、メモリとCPUを節約できます。リクエストを処理するためにワーカスレッドを作成する必要がないため、メモリやCPUを節約できます。また、スレッド数の制約がなくなるため、同時実行性も向上します。最後に、スレッドの切り替え回数が減ることで、応答時間も改善されます。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:68
#, no-wrap
msgid "Reactive"
msgstr "リアクティブ"

#. type: Target for macro image
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:68
#, no-wrap
msgid "reactive-thread.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:71
#, no-wrap
msgid "From sequential to continuation style"
msgstr "シーケンシャルから継続タイルへ"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:77
msgid "So, with the reactive execution model, the requests are processed using I/O threads.  But that's not all.  An I/O thread can handle multiple concurrent requests.  How? Here is the trick and one of the most significant differences between reactive and imperative."
msgstr "つまり、リアクティブな実行モデルでは、I/Oスレッドを使ってリクエストを処理します。しかし、それだけではありません。I/Oスレッドは、複数の同時リクエストを処理することができます。どうやって？これが、リアクティブとインペラティブの最も重要な違いの一つであるトリックです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:83
msgid "When processing a request requires interacting with a remote service, like an HTTP API or a database, it does not block the execution while waiting for the response.  Instead, it schedules the I/O operation and attaches a continuation, i.e., the request processing remaining code.  This continuation can be passed as a callback (a function invoked with the I/O outcome), or use more advanced constructs such as reactive programming or co-routines.  Regardless of how the continuation is expressed, the essential aspect is the release of the I/O thread and, as a consequence, the fact that this thread can be used to process another request.  When the scheduled I/O completes, the I/O thread executes the continuation, and the processing of the pending request continues."
msgstr "リクエストの処理に、HTTP APIやデータベースなどのリモートサービスとのやりとりが必要な場合、レスポンスを待つ間に実行をブロックすることはありません。代わりに、I/O操作をスケジューリングし、リクエスト処理の残りのコードである継続を添付します。この継続は、コールバック（I/Oの結果とともに呼び出される関数）として渡すこともできますし、リアクティブプログラミングやコルーティンなどのより高度な構成を使用することもできます。継続をどのように表現するかに関わらず、重要な点はI/Oスレッドの解放であり、その結果、このスレッドを使って別のリクエストを処理することができるという事実です。スケジュールされたI/Oが完了すると、I/Oスレッドは継続を実行し、保留中のリクエストの処理は継続されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:86
msgid "So, unlike the imperative model, where I/O blocks the execution, reactive switches to a continuation-based design, where the I/O threads are released, and continuation invoked when the I/Os complete.  As a result, the I/O thread can handle multiple concurrent requests, improving the overall concurrency of the application."
msgstr "そのため、I/Oが実行をブロックするような命令型モデルとは異なり、リアクティブ型ではI/Oスレッドを解放し、I/Oが完了した時点で継続を呼び出す継続型のデザインに切り替わります。その結果、I/Oスレッドは複数の同時リクエストを処理できるようになり、アプリケーション全体の同時性が向上します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:91
msgid "But, there is a catch.  We need a way to write continuation-passing code.  There are many ways of doing this.  In Quarkus, we propose:"
msgstr "しかし、これには問題があります。継続パッシングのコードを書くための方法が必要なのです。これにはいろいろな方法があります。Quarkusでは、以下を提案しています:"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:93
msgid "Mutiny - an intuitive and event-driven reactive programming library"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:94
msgid "Kotlin co-routines - a way to write asynchronous code in a sequential manner"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:97
msgid "In this guide, we will use Mutiny.  To know more about Mutiny, check the xref:mutiny-primer.adoc[Mutiny documentation]."
msgstr "このガイドでは、Mutinyを使用します。Mutinyについて詳しく知りたい方は、 link:mutiny-primer.html[Mutinyのドキュメント]をご覧ください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:100
msgid "Project Loom is coming to the JDK soon and proposes a virtual thread-based model.  The Quarkus architecture is ready to support Loom as soon as it's become globally available."
msgstr "JDKに近々導入されるProject Loomは、仮想スレッドベースのモデルを提案しています。Quarkusのアーキテクチャは、Loomがグローバルに利用可能になり次第、サポートする準備ができています。"

#. type: Title ==
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:101
#, no-wrap
msgid "Bootstrapping the Reactive Fruits application"
msgstr "リアクティブフルーツアプリケーションの起動"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:104
msgid "With this in mind, let's see how we can develop a CRUD application with Quarkus, which will use the I/O thread to handle the HTTP requests, interact with a database, process the result, and write the HTTP response; in other words: a reactive CRUD application."
msgstr "これを念頭に置いて、Quarkusを使用してCRUDアプリケーションを開発する方法を見てみましょう。このアプリケーションは、I / Oスレッドを使用してHTTPリクエストを処理し、データベースとやり取りし、結果を処理し、HTTP応答を記述します。言い換えれば、リアクティブCRUDアプリケーションです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:106
msgid "While we recommend you to follow the step-by-step instructions, you can find the final solution on https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart."
msgstr "ステップバイステップの手順に従うことをお勧めしますが、最終的なソリューションは https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart  で見つけることができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:108
msgid "First, go to https://code.quarkus.io[code.quarkus.io] and select the following extensions:"
msgstr "まず、 link:https://code.quarkus.io[code.quarkus.io]にアクセスし、以下のエクステンションを選択します:"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:110
msgid "RESTEasy Reactive Jackson"
msgstr "RESTEasy Reactive Jackson"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:111
msgid "Hibernate Reactive with Panache"
msgstr "Hibernate Reactive with Panache"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:112
msgid "Reactive PostgreSQL client"
msgstr "リアクティブなPostgreSQLクライアント"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:113
#, no-wrap
msgid "Extensions"
msgstr "エクステンション"

#. type: Target for macro image
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:113
#, no-wrap
msgid "reactive-guide-code.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:117
msgid "The last extension is the reactive database driver for PostgreSQL.  Hibernate Reactive uses that driver to interact with the database without blocking the caller thread."
msgstr "最後のエクステンションは、PostgreSQL用のリアクティブデータベースドライバです。Hibernate Reactiveはこのドライバを使用して、呼び出し元のスレッドをブロックすることなくデータベースと対話します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:119
msgid "Once selected, click on \"Generate your application\", download the zip file, unzip it and open the code in your favorite IDE."
msgstr "選択したら、\"Generate your application \"をクリックし、zipファイルをダウンロードして解凍し、お好みのIDEでコードを開きます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:120
#, no-wrap
msgid "Reactive Panache Entity"
msgstr "Reactive Panache Entity"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:123
msgid "Let's start with the `Fruit` entity.Create the `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` file with the following content:"
msgstr "では、 `Fruit` から始めましょう。以下の内容で `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:127
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:188
#, no-wrap
msgid "package org.acme.hibernate.orm.panache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:131
#, no-wrap
msgid ""
"import javax.persistence.Cacheable;\n"
"import javax.persistence.Column;\n"
"import javax.persistence.Entity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:133
#, no-wrap
msgid "import io.quarkus.hibernate.reactive.panache.PanacheEntity;  // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:137
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Fruit extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:140
#, no-wrap
msgid ""
"\t @Column(length = 40, unique = true)\n"
"\t public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:142
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:197
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:144
msgid "Make sure you import the reactive variant of `PanacheEntity`."
msgstr "`PanacheEntity` のリアクティブ版をインポートしてください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:152
msgid "This class represents `Fruits`.  It's a straightforward entity with a single field (`name`).  Note that it uses `io.quarkus.hibernate.reactive.panache.PanacheEntity`, the reactive variant of `PanacheEntity`.  So, behind the scenes, Hibernate uses the execution model we described above.  It interacts with the database without blocking the thread.  In addition, this reactive `PanacheEntity` proposes a reactive API.  We will use this API to implement the REST endpoint."
msgstr "このクラスは `Fruits` を表します。1つのフィールド( `name`)を持つ単純なエンティティです。なお、このクラスは `PanacheEntity` のリアクティブ版である `io.quarkus.hibernate.reactive.panache.PanacheEntity` を使用しています。つまり、舞台裏では、Hibernate は上述の実行モデルを使用しています。スレッドをブロックすることなく、データベースと対話します。さらに、このリアクティブな `PanacheEntity` は、リアクティブな API を提案しています。このAPIを使用してRESTエンドポイントを実装します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:154
msgid "Before going further, open the `src/main/resource/application.properties` file and add:"
msgstr "その前に、 `src/main/resource/application.properties` ファイルを開き、次を追加してください。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:159
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:162
msgid "It instructs the application to use PostgreSQL for the database and to handle the database schema generation."
msgstr "データベースにPostgreSQLを使用し、データベーススキーマの生成を処理するようにアプリケーションに指示します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:164
msgid "In the same directory, create an `import.sql` file, which inserts a few fruits, so we don't start with an empty database in dev mode:"
msgstr "同じディレクトリに、 `import.sql` ファイルを作成します。このファイルにはいくつかのフルーツが挿入されており、開発モードで空のデータベースから始めないようになっています。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:170
#, no-wrap
msgid ""
"INSERT INTO fruit(id, name) VALUES (nextval('hibernate_sequence'), 'Cherry');\n"
"INSERT INTO fruit(id, name) VALUES (nextval('hibernate_sequence'), 'Apple');\n"
"INSERT INTO fruit(id, name) VALUES (nextval('hibernate_sequence'), 'Banana');\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:174
msgid "In a terminal, launch the application in dev mode using: `./mvnw quarkus:dev`.  Quarkus automatically starts a database instance for you and configure the application. Now we only need to implement the HTTP endpoint."
msgstr "ターミナルで、次のようにしてアプリケーションを開発モードで起動します： `./mvnw quarkus:dev`. Quarkusは自動的にデータベースインスタンスを起動し、アプリケーションの設定を行います。あとは、HTTPエンドポイントを実装するだけです。"

#. type: Title ==
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:176
#, no-wrap
msgid "Reactive Resource"
msgstr "リアクティブリソース"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:182
msgid "Because the interaction with the database is non-blocking and asynchronous, we need to use asynchronous constructs to implement our HTTP resource.  Quarkus uses Mutiny as its central reactive programming model.  So, it supports returning Mutiny types (`Uni` and `Multi`) from HTTP endpoints.  Also, our Fruit Panache entity exposes methods using these types, so we only need to implement the _glue_."
msgstr "データベースとのやりとりはノンブロッキングで非同期なので、HTTPリソースを実装するために非同期の構造を使用する必要があります。Quarkusは、中心となるリアクティブプログラミングモデルとしてMutinyを使用しています。そのため、HTTPエンドポイントからMutinyタイプ（ `Uni` と `Multi` ）を返すことをサポートしています。また、Fruit Panacheのエンティティはこれらの型を使ったメソッドを公開していますので、私たちは _糊_ を実装するだけで済みます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:184
msgid "Create the `src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` ファイルを以下の内容で作成します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:191
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:195
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"@ApplicationScoped\n"
"public class FruitResource {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:201
msgid "Let's start with the `getAll` method. The `getAll` method returns all the fruits stored in the database.  In the `FruitResource`, add the following code:"
msgstr "まずは、 `getAll` のメソッドから見てみましょう。 `getAll` メソッドは、データベースに保存されているすべてのフルーツを返します。 `FruitResource` の中に、以下のコードを追加します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:208
#, no-wrap
msgid ""
"@GET\n"
"public Uni<List<Fruit>> get() {\n"
"    return Fruit.listAll(Sort.by(\"name\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:211
msgid "Open http://localhost:8080/fruits to invoke this method:"
msgstr "http://localhost:8080/fruits を開いて、このメソッドを呼び出します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:215
#, no-wrap
msgid "[{\"id\":2,\"name\":\"Apple\"},{\"id\":3,\"name\":\"Banana\"},{\"id\":1,\"name\":\"Cherry\"},{\"id\":4,\"name\":\"peach\"}]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:219
msgid "We get the expected JSON array.  RESTEasy Reactive automatically maps the list into a JSON Array, except if instructed otherwise."
msgstr "期待通りのJSON配列が得られます。RESTEasy Reactiveでは、特に指示がない限り、リストを自動的にJSON配列にマッピングします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:226
msgid "Look at the return type; it returns a `Uni` of `List<Fruit>`.  `Uni` is an asynchronous type.  It's a bit like a future.  It's a placeholder that will get its value (item) later.  When it receives the item (Mutiny says it _emits_ its item), you can attach some behavior.  That's how we express the continuation: get a uni, and when the uni emits its item, execute the rest of the processing."
msgstr "戻り値の型を見てください。これは `List<Fruit>` の `Uni` を返します。 `Uni` は非同期型です。これはfutureのようなものです。これは後で値（アイテム）を得るためのプレースホルダーです。アイテムを受け取ったら（Mutinyではアイテムを _emit_すると言っています）、何らかの動作を付けることができます。Uniを取得し、そのUniがアイテムをemitしたら、残りの処理を実行する、という継続を表現しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:236
msgid "Reactive developers may wonder why we can't return a stream of fruits directly.  It tends to be a bad idea when dealing with a database.  Relational databases do not handle streaming well.  It’s a problem of protocols not designed for this use case.  So, to stream rows from the database, you need to keep a connection (and sometimes a transaction) open until all the rows are consumed.  If you have slow consumers, you break the golden rule of databases: don’t hold connections for too long.  Indeed, the number of connections is rather low, and having consumers keeping them for too long will dramatically reduce the concurrency of your application.  So, when possible, use a `Uni<List<T>>` and load the content.  If you have a large set of results, implement pagination."
msgstr "リアクティブな開発者は、なぜフルーツのストリームを直接返すことができないのかと思うかもしれません。それは、データベースを扱うときにはよくない考えになりがちです。リレーショナル・データベースはストリーミングをうまく扱えません。これは、このユースケースのために設計されていないプロトコルの問題です。そのため、データベースから行をストリーミングするには、すべての行が消費されるまで、コネクション（場合によってはトランザクション）を開いておく必要があります。コンシューマーが遅い場合、データベースの黄金律である「コネクションを長く保持しない」を破ってしまいます。実際、コネクションの数はかなり少なく、コンシューマーがコネクションを長時間保持することは、アプリケーションの並行性を劇的に低下させます。ですから、可能な限り `Uni<List<T>>` を使用し、コンテンツをロードしてください。結果のセットが大きい場合は、ページネーションを実装してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:238
msgid "Let's continue our API with `getSingle`:"
msgstr "`getSingle` でAPIを継続してみましょう。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:246
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{id}\")\n"
"public Uni<Fruit> getSingle(Long id) {\n"
"    return Fruit.findById(id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:250
msgid "In this case, we use `Fruit.findById` to retrieve the fruit.  It returns a `Uni`, which will complete when the database has retrieved the row."
msgstr "この場合、 `Fruit.findById` を使ってフルーツを取得します。これは、データベースが行を取得したときに完了する `Uni` を返します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:252
msgid "The `create` method allows adding a new fruit to the database:"
msgstr "`create` メソッドでは、新しいフルーツをデータベースに追加することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:260
#, no-wrap
msgid ""
"@POST\n"
"public Uni<Response> create(Fruit fruit) {\n"
"    return Panache.<Fruit>withTransaction(fruit::persist)\n"
"            .onItem().transform(inserted -> Response.created(URI.create(\"/fruits/\" + inserted.id)).build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:269
msgid "The code is a bit more involved.  To write to a database, we need a transaction.  So we use `Panache.withTransaction` to get one (asynchronously) and call the `persist` method when we receive the transaction.  The `persist` method is also returning a `Uni`.  This `Uni` emits the result of the insertion of the fruit in the database.  Once the insertion completes (and that's our continuation), we create a `201 CREATED` response.  RESTEasy Reactive automatically reads the request body as JSON and creates the `Fruit` instance."
msgstr "コードはもう少し複雑になっています。データベースへの書き込みには、トランザクションが必要です。そこで、 `Panache.withTransaction` を使って（非同期に）トランザクションを取得し、トランザクションを受け取ったら `persist` メソッドを呼び出します。 `persist` メソッドも `Uni` を返しています。この `Uni` は、データベースにフルーツを挿入した結果を出力します。挿入が完了すると（これが私たちの継続です）、 `201 CREATED` レスポンスを作成します。RESTEasy Reactiveは自動的にリクエスト・ボディをJSONとして読み込み、 `Fruit` インスタンスを作成します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:272
msgid "The `.onItem().transform(...)` can be replaced with `.map(...)`.  `map` is a shortcut."
msgstr "`.onItem().transform(…​)` は `.map(…​)` に置き換えることができます。 `map` はショートカットです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:274
msgid "If you have https://curl.se/[curl] on your machine, you can try the endpoint using:"
msgstr "マシンに link:https://curl.se/[curl]があれば、エンドポイントを使って試すことができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:281
#, no-wrap
msgid ""
"> curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"name\":\"peach\"}' \\\n"
"  http://localhost:8080/fruits\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:284
msgid "Following the same ideas, you can implement the other CRUD methods."
msgstr "同じ考え方で、他のCRUDメソッドも実装できます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:285
#, no-wrap
msgid "Testing and Running"
msgstr "テストと実行"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:289
msgid "Testing a reactive application is similar to testing a non-reactive one: use the HTTP endpoint and verify the HTTP responses.  The fact that the application is reactive does not change anything."
msgstr "リアクティブなアプリケーションのテストは、非リアクティブなアプリケーションのテストと同様に、 HTTP エンドポイントを使用して、HTTP レスポンスを検証します。アプリケーションがリアクティブであることによる差異はありません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:291
msgid "In https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java] you can see how the test for the fruit application can be implemented."
msgstr "link:https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java]では、Fruitアプリケーションのテストがどのように実装出来るかを見ることができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:293
msgid "Packaging and running the application does not change either.The `./mvnw package` and `./mvnw package -Pnative` to generate a native executable works as usual.You can also package the application in a container."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:295
msgid "To run the application, don’t forget to start a database and provide the configuration to your application."
msgstr "アプリケーションを実行するには、データベースを起動し、アプリケーションに設定を提供することを忘れないでください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:297
msgid "For example, you can use Docker to run your database:"
msgstr "例えば、Dockerを使ってデータベースを動かすことができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:304
#, no-wrap
msgid ""
"docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 \\\n"
"    --name postgres-quarkus -e POSTGRES_USER=quarkus \\\n"
"    -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=fruits \\\n"
"    -p 5432:5432 postgres:13.1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:307
msgid "Then, launch the application using:"
msgstr "そして、アプリケーションを起動します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:315
#, no-wrap
msgid ""
"java \\\n"
"   -Dquarkus.datasource.reactive.url=postgresql://localhost/fruits \\\n"
"   -Dquarkus.datasource.username=quarkus \\\n"
"   -Dquarkus.datasource.password=quarkus \\\n"
"   -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:318
msgid "Or, if you packaged your application as native executable, use:"
msgstr "あるいは、アプリケーションをネイティブ実行可能ファイルとしてパッケージ化する場合は、次を使用します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:326
#, no-wrap
msgid ""
"./target/getting-started-with-reactive-runner \\\n"
"  -Dquarkus.datasource.reactive.url=postgresql://localhost/fruits \\\n"
"  -Dquarkus.datasource.username=quarkus \\\n"
"  -Dquarkus.datasource.password=quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:330
msgid "The parameters passed to the application are described in the datasource guide.  There are other ways to configure the application - please check the link:config-reference#configuration_sources[configuration guide] to have an overview of the possibilities (such as env variable, .env files and so on)."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:331
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:335
msgid "This guide is a brief introduction to some reactive features offered by Quarkus.  Quarkus is a reactive framework, and so offers a lot of reactive features."
msgstr "このガイドでは、Quarkusが提供するいくつかのリアクティブ機能を簡単に紹介しました。Quarkusはリアクティブフレームワークであるため、多くのリアクティブ機能を提供しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:337
msgid "If you want to continue on this topic check:"
msgstr "このトピックを続けたい方は以下をチェック下さい:"

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:339
msgid "xref:quarkus-reactive-architecture.adoc[The Quarkus Reactive Architecture]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/getting-started-reactive.adoc:340
msgid "xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]"
msgstr "xref:mutiny-primer.adoc[Mutiny -直感的なリアクティブプログラミングライブラリ]"
