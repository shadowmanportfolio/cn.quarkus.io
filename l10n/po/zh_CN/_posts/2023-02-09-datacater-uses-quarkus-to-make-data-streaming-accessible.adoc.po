# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-02-09 10:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, fuzzy, no-wrap
msgid "ssprenger"
msgstr "严正声明"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, fuzzy, no-wrap
msgid "2023-02-09"
msgstr "2023-02-09"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, fuzzy, no-wrap
msgid "DataCater provides a developer-friendly ETL platform. Learn why it chose Quarkus for its recent rewrite."
msgstr "DataCater提供了一个方便开发者的ETL平台。了解它为什么选择Quarkus进行最近的重写。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, fuzzy, no-wrap
msgid "user-story"
msgstr "用户故事"

#. type: Title =
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:10
#, fuzzy, no-wrap
msgid "DataCater uses Quarkus to make Data Streaming more accessible"
msgstr "DataCater使用Quarkus使数据流更容易获取"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:14
#, fuzzy
msgid "This article gives a brief overview of the data streaming platform DataCater, discusses how we moved from Scala Play! and Kafka Streams to Quarkus, and presents why we think that Quarkus is an exceptional framework for developing cloud-native Java applications."
msgstr "本文简要介绍了数据流平台DataCater，讨论了我们如何从Scala Play！和Kafka Streams转移到Quarkus，并介绍了为什么我们认为Quarkus是开发云原生Java应用的一个特殊框架。"

#. type: Title ==
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:15
#, fuzzy, no-wrap
msgid "What is DataCater?"
msgstr "什么是DataCater？"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:22
#, fuzzy
msgid "https://datacater.io[DataCater^] is a real-time, cloud-native data pipeline platform based on Apache Kafka and Kubernetes. It allows users to build streaming data pipelines that stream records between different Apache Kafka topics and can apply filters or transforms to the records on the way.  Given its focus on data scientists and data engineers as target users, DataCater enables users to develop transforms in Python. It provides an https://www.loom.com/share/15947f13e71540948e3f9d57eac64976[interactive, UI-based preview of streaming data pipelines^] and uses Kubernetes as the runtime for pipeline deployments."
msgstr "link:https://datacater.io[DataCater, target=\"_blank\"] 是一个基于Apache Kafka和Kubernetes的实时、云原生数据管道平台。它允许用户建立流式数据管道，在不同的Apache Kafka主题之间流动记录，并可以在途中对记录应用过滤器或转换。鉴于其专注于数据科学家和数据工程师作为目标用户，DataCater使用户可以用Python开发转换。它提供了一个 link:https://www.loom.com/share/15947f13e71540948e3f9d57eac64976[互动的、基于用户界面的流式数据管道预览, target=\"_blank\"] ，并使用Kubernetes作为管道部署的运行时间。"

#. type: Title ==
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:23
#, fuzzy, no-wrap
msgid "Why did DataCater choose Quarkus?"
msgstr "为什么DataCater选择Quarkus？"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:27
#, fuzzy
msgid "DataCater was created in 2020 and initially built its control plane on top of the Scala framework https://www.playframework.com/[Play^] and implemented pipelines with https://kafka.apache.org/documentation/streams/[Kafka Streams^].  Over time, we experienced the following limitations and issues with the chosen technologies:"
msgstr "DataCater创建于2020年，最初在Scala框架 link:https://www.playframework.com/[Play, target=\"_blank\"] 之上构建其控制平面，并使用 link:https://kafka.apache.org/documentation/streams/[Kafka Streams, target=\"_blank\"] 实现管道。随着时间的推移，我们在所选择的技术上遇到了以下限制和问题。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:29
#, fuzzy, no-wrap
msgid "*Inefficient resource usage:* Kafka Streams applications consume a considerable amount of main memory, making it quite expensive to operate at scale.\n"
msgstr " *资源使用效率不高。* Kafka流应用程序消耗了相当多的主内存，使其在规模上的操作相当昂贵。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:30
#, fuzzy, no-wrap
msgid "*Long startup times:* Starting a Kafka Streams application can take up to a few minutes, which has a negative impact on the availability of streaming data pipelines.\n"
msgstr " *启动时间长。* 启动一个Kafka Streams应用程序可能需要几分钟的时间，这对流式数据管道的可用性产生了负面影响。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:32
#, fuzzy, no-wrap
msgid ""
"*Restriction to intra-cluster streaming:* By default, Kafka Streams can only stream data between topics of the same Apache Kafka cluster. When facing use cases that stream data between different Kafka clusters, for instance, between a production and test cluster,\n"
"we had to employ additional tooling, e.g., MirrorMaker 2.\n"
msgstr " *对集群内流的限制。* 默认情况下，Kafka Streams只能在同一个Apache Kafka集群的主题之间进行数据流。当面对在不同的Kafka集群之间进行数据流的用例时，例如在生产和测试集群之间，我们不得不采用额外的工具，例如MirrorMaker 2。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:33
#, fuzzy, no-wrap
msgid "*No support for Java 17:* The current Play! version 2.8 does not support running on top of Java 17.\n"
msgstr " *不支持Java 17：* 目前的Play！2.8版本不支持在Java 17之上运行。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:35
#, fuzzy
msgid "Especially the first two issues, inefficient resource usage and long startup times, hurt a lot when operating in the cloud at scale."
msgstr "特别是前两个问题，即资源使用效率低下和启动时间长，在云计算中大规模运行时伤害很大。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:39
#, fuzzy
msgid "In 2022, we rewrote DataCater to implement lots of learnings that we made when working with early users.  Using this unique opportunity, we also switched from Play! and Kafka Streams to Quarkus, thus using Quarkus for implementing both our control plane and the data pipelines."
msgstr "在2022年，我们重写了DataCater，以实现我们在与早期用户合作时的很多经验。利用这个独特的机会，我们也从Play！和Kafka Streams切换到Quarkus，从而用Quarkus来实现我们的控制平面和数据管道。"

#. type: delimited block _
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:44
#, fuzzy
msgid "With Quarkus, we are able to bring the best of cloud native and messaging applications together. Streaming messages, especially in the context of Apache Kafka, is still a Java-dominated environment, while the traditional Java stack lacks the characteristics of cloud-native applications, like small footprints, fast startups, and self-containment.  *-Hakan Lofcali, CTO, DataCater*"
msgstr "通过Quarkus，我们能够将云原生和消息应用的优点结合起来。流媒体消息，特别是在Apache Kafka的背景下，仍然是一个以Java为主导的环境，而传统的Java堆栈缺乏云原生应用的特点，如占地面积小、启动速度快和自我封闭。 *-Hakan Lofcali，DataCater公司CTO* "

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:47
#, fuzzy
msgid "In the following, we list the main reasons why we chose Quarkus over other Java frameworks:"
msgstr "在下文中，我们列出了我们选择Quarkus而不是其他Java框架的主要原因。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:49
#, fuzzy, no-wrap
msgid "*Versatility:* We cannot only implement the API of our control plane with the Quarkus RESTeasy extension but can also employ Quarkus as the base for implementing streaming data pipelines using its https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging^] extension.\n"
msgstr " *多功能性。* 我们不能只用Quarkus RESTeasy扩展来实现我们的控制平面的API，还可以用Quarkus作为基础，使用其 link:https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging, target=\"_blank\"] 扩展来实现流式数据管道。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:51
#, no-wrap
msgid ""
"*Dev services:* Quarkus' dev services help us to spin up dependencies, like PostgreSQL or Apache Kafka, very fast and provide an outstanding developer experience. Our developers can focus on their job instead of\n"
"messing with the configuration of tooling.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:52
#, no-wrap
msgid "*Support for native executables:* Quarkus allows us to easily build native executables, which are very beneficial when operating in a cloud context. They require much fewer resources and achieve faster startup times.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:53
#, no-wrap
msgid "*Minimal footprint:* Quarkus’ build time optimizations allow for smaller footprints of JVM- and GraalVM-based containers.\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:54
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:57
msgid "https://github.com/DataCater/datacater[DataCater GitHub repository^]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:57
msgid "https://docs.datacater.io[DataCater documentation^]"
msgstr ""
