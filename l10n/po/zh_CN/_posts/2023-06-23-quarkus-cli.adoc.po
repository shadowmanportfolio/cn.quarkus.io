# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-23 15:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, fuzzy, no-wrap
msgid "iocanel"
msgstr "钛合金板"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, fuzzy, no-wrap
msgid "2023-06-23"
msgstr "2023-06-23"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, fuzzy, no-wrap
msgid "New Quarkus CLI features in 3.0 that will simplify your workflow and make your life easier"
msgstr "3.0版Quarkus CLI的新功能将简化你的工作流程，使你的生活更轻松"

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, fuzzy, no-wrap
msgid "feature"
msgstr "特征"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, fuzzy, no-wrap
msgid "Dev productivity - Quarkus CLI"
msgstr "开发效率 - Quarkus CLI"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:12
#, fuzzy
msgid "People hardly realize that the Quarkus CLI was available from the first public release of Quarkus back in 2019.  It originally only allowed project creation and extension manipulation. The following command shows the list of supported commands:"
msgstr "人们几乎没有意识到，Quarkus CLI早在2019年Quarkus的第一个公开版本中就已经存在。它最初只允许创建项目和扩展操作。下面的命令显示了支持的命令列表："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:17
#, no-wrap
msgid ""
"quarkus --help\n"
"Usage: quarkus <command> [<args>]\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:19
#, no-wrap
msgid "These are the common quarkus commands used in various situations\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:22
#, no-wrap
msgid ""
"Options:\n"
"  -h, --help\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:27
#, no-wrap
msgid ""
"quarkus commands:\n"
"    list-extensions  List extensions for a project\n"
"    add-extension  Adds extensions to a project\n"
"    create-project  Creates a base Quarkus maven project\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:32
#, fuzzy
msgid "Today, in version `3.1.2.Final` it includes almost 30 commands spread across 6 main categories. 3 of those categories were part of the 3.0 roadmap and will be the focus of this post. In particular, this post is about building container images, deploying and extending the Quarkus CLI."
msgstr "今天，在 `3.1.2.Final` ，它包括近30个命令，分布在6个主要类别。其中3个类别是3.0路线图的一部分，将是本篇文章的重点。特别是，这篇文章是关于构建容器镜像、部署和扩展Quarkus CLI的。"

#. type: Title ====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:34
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:65
#, fuzzy, no-wrap
msgid "Building container images using the Quarkus CLI"
msgstr "使用Quarkus CLI构建容器镜像"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:37
#, fuzzy
msgid "Providing a simple way for creating container images with Quarkus is not something new. Since, its early days Quarkus provided extensions that took care of building container images with technologies like:"
msgstr "用Quarkus提供一个简单的方法来创建容器镜像并不是什么新鲜事。从早期开始，Quarkus就提供了一些扩展功能，通过这些技术来构建容器镜像："

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:39
#, fuzzy
msgid "https://quarkus.io/guides/container-image#docker[docker]"
msgstr "link:https://quarkus.io/guides/container-image#docker[装载机]"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:40
#, fuzzy
msgid "https://quarkus.io/guides/container-image#openshift[openshift]"
msgstr "link:https://quarkus.io/guides/container-image#openshift[openshift]"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:41
#, fuzzy
msgid "https://quarkus.io/guides/container-image#jib[jib]"
msgstr "link:https://quarkus.io/guides/container-image#jib[摇臂]"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:42
#, fuzzy
msgid "https://quarkus.io/guides/container-image#buildpacks[buildpacks]"
msgstr "link:https://quarkus.io/guides/container-image#buildpacks[构建包]"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:44
#, fuzzy
msgid "Using these extensions required their addition to the project, for example:"
msgstr "使用这些扩展需要将它们添加到项目中，例如："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:48
#, no-wrap
msgid "quarkus ext add quarkus-container-image-docker\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:51
#, fuzzy
msgid "Also, it required additional configuration options, in order to trigger the container image build:"
msgstr "此外，它还需要额外的配置选项，以触发容器镜像的构建："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:55
#, no-wrap
msgid "./mvnw package -Dquarkus.container-image.build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:59
#, fuzzy
msgid "While this is something that works well, users still needed to know about these extensions and the special configuration options needed to enable them.  In other words, users needed to have a link to https://quarkus.io/guides/container-image[Quarkus container image documentation] handy in order to check the available and their usage options."
msgstr "虽然这是工作得很好的东西，但用户仍然需要了解这些扩展和启用它们所需的特殊配置选项。换句话说，用户需要有一个 link:https://quarkus.io/guides/container-image[Quarkus容器镜像文档] 的链接，以便检查可用的和它们的使用选项。"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:63
#, fuzzy
msgid "Moreover, users needed to modify the project configuration each time they needed to switch between extensions.  This is trivial, but something that should be optional as the actual application does not depend on how the container images are built.  Also, it can potentially increase the noise in the version control log."
msgstr "此外，用户每次需要在扩展之间切换时，都需要修改项目配置。这是微不足道的，但应该是可有可无的，因为实际应用并不取决于容器镜像的构建方式。而且，它有可能会增加版本控制日志中的噪音。"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:68
#, fuzzy
msgid "Quarkus 3.0 introduces an alternative way of building container images using the Quarkus CLI. In the recent version of the CLI new sub commands are available for building and pushing container images.  These are listed in the output of `quarkus --help`."
msgstr "Quarkus 3.0引入了一种使用Quarkus CLI构建容器镜像的替代方法。在CLI的最新版本中，新的子命令可用于构建和推送容器镜像。这些命令在 `quarkus --help` 的输出中列出。"

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:79
#, no-wrap
msgid ""
"quarkus --help | grep image\n"
" image                   Build or push project container image.\n"
"   build                 Build a container image.\n"
"     docker              Build a container image using Docker.\n"
"     buildpack           Build a container image using Buildpack.\n"
"     jib                 Build a container image using Jib.\n"
"     openshift           Build a container image using Openshift.\n"
"   push                  Push a container image.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:82
#, fuzzy
msgid "For example in order to perform a docker build:"
msgstr "例如，为了进行docker构建："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:86
#, no-wrap
msgid "quarkus image build docker\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:90
#, fuzzy
msgid "Note, that the command does not require users to edit their build files (e.g. pom.xml or build.gradle) in any way and can be run in any project without requiring any particular extension.  It can be even run on blank quarkus project:"
msgstr "请注意，该命令不需要用户以任何方式编辑他们的构建文件（如pom.xml或build.gradle），可以在任何项目中运行，而不需要任何特定的扩展。它甚至可以在空白的quarkus项目中运行："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:96
#, no-wrap
msgid ""
"quarkus create app hello\n"
"cd hello\n"
"quarkus image build docker\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:99
#, fuzzy
msgid "No additional configuration needed, even when users decide to switch to a different container image technology like jib:"
msgstr "不需要额外的配置，即使用户决定切换到不同的容器图像技术，如jib："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:103
#, no-wrap
msgid "quarkus image build jib\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:106
#, fuzzy
msgid "Last but not least, the CLI does provide additional help like code completion and help messages:"
msgstr "最后但并非最不重要的是，CLI确实提供了额外的帮助，如代码完成和帮助信息："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:110
#, no-wrap
msgid "quarkus image build jib --help\n"
msgstr ""

#. type: Title ====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:113
#, fuzzy, no-wrap
msgid "Deploying applications"
msgstr "部署应用程序"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:117
#, fuzzy
msgid "In a way similar to building container images Quarkus allowed the application deployment to platforms like https://kubernetes.io[Kubernetes] and https://openshift.com[OpenShift].  Again, this is something the required the use of extensions and additional build options to enable deployment.  For example to deploy an application on https://kubernetes.io[Kubernetes] one needed to explicitly add the extension to the project and enable deployment using the `quakrus.kubernetes.deploy` property."
msgstr "与构建容器镜像类似，Quarkus允许应用程序部署到 link:https://kubernetes.io[Kubernetes] 和 link:https://openshift.com[OpenShift] 等平台。同样，这也需要使用扩展和额外的构建选项来实现部署。例如，要在 link:https://kubernetes.io[Kubernetes] 上部署一个应用程序，需要明确地将扩展添加到项目中，并使用 `quakrus.kubernetes.deploy` 属性进行部署。"

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:122
#, no-wrap
msgid ""
"quarkus ext add quarkus-kubernetes\n"
"./mvnw package -Dquarkus.kubernetes.deploy=true\n"
msgstr ""

#. type: Title ====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:125
#, fuzzy, no-wrap
msgid "Deploying using the Quarkus CLI"
msgstr "使用Quarkus CLI进行部署"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:128
#, fuzzy
msgid "In Quarkus 3.0 the CLI includes the `deploy` sub command that is the entry point to commands related to deployment.  Using `quarkus --help` one can list all the related commands:"
msgstr "在Quarkus 3.0中，CLI包括 `deploy` 子命令，是与部署有关的命令的入口。使用 `quarkus --help` ，可以列出所有相关的命令："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:138
#, no-wrap
msgid ""
"quarkus --help | grep deploy\n"
"deploy                  Deploy application.\n"
"  kubernetes            Perform the deploy action on kubernetes.\n"
"  openshift             Perform the deploy action on openshift.\n"
"  knative               Perform the deploy action on knative.\n"
"  kind                  Perform the deploy action on kind.\n"
"  minikube              Perform the deploy action on minikube.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:141
#, fuzzy
msgid "These commands allow developers to easily deploy their Quarkus application from one platform to the other without messing with their project files."
msgstr "这些命令允许开发者轻松地将他们的Quarkus应用程序从一个平台部署到另一个平台，而不需要搞乱他们的项目文件。"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:146
#, fuzzy
msgid "Imagine a team with some developers using https://kind.sigs.k8s.io/[kind] and some others https://minikube.sigs.k8s.io/docs/start/[minikube]. Prior to 3.0 they would have to stash and apply the extension of their choice each time they needed to pull changes from version control. Alternatively, they could configure build profiles. Using the CLI users are able to deploy to the platform of their choice even in cases where it's not aligned with what is present in the project configuration. For example if the project includes the https://quarkus.io/guides/deploying-to-kubernetes[Quarkus Kubernetes exntension] but user prefers to use https://kind.sigs.k8s.io/[kind] extension and make use of optimized manifests for https://kind.sigs.k8s.io/[kind]:"
msgstr "想象一下，在一个团队中，有些开发者使用 link:https://kind.sigs.k8s.io/[kind] ，有些则使用 link:https://minikube.sigs.k8s.io/docs/start/[minikube] 。在3.0之前，他们必须在每次需要从版本控制中提取修改时，将他们选择的扩展存放起来并加以应用。另外，他们也可以配置构建配置文件。使用CLI，用户能够部署到他们选择的平台上，即使它与项目配置中的内容不一致。例如，如果项目包括 link:https://quarkus.io/guides/deploying-to-kubernetes[Quarkus Kubernetes扩展] ，但用户更倾向于使用 link:https://kind.sigs.k8s.io/[kind] 扩展，并使用 link:https://kind.sigs.k8s.io/[kind] 的优化清单："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:150
#, no-wrap
msgid "quarkus deploy kind\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:153
#, fuzzy
msgid "It's important to note, that by having a command per platform, users can easily set platform specific configuration when executing these commands (see the `--help` output)."
msgstr "值得注意的是，通过每个平台有一个命令，用户在执行这些命令时可以很容易地设置平台的具体配置（见 `--help` 输出）。"

#. type: Title ====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:155
#, fuzzy, no-wrap
msgid "Summarizing image building and deployment commands"
msgstr "总结图像构建和部署命令"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:158
#, fuzzy
msgid "Quarkus 3.0 introduces new CLI commands for building container images and deploying. The commands improve the developer experience as they eliminate steps related to project setup and configuration. They allow developers to easily experiment with different technologies and guide them by providing help messages, hints and completion."
msgstr "Quarkus 3.0引入了新的CLI命令来构建容器镜像和部署。这些命令改善了开发者的体验，因为它们消除了与项目设置和配置有关的步骤。它们允许开发者轻松地尝试不同的技术，并通过提供帮助信息、提示和完成来指导他们。"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:160
#, fuzzy
msgid "Future releases of Quarkus will expand this concept to cover areas like https://quarkus.io/guides/azure-functions[Quarkus Azure Functions] and https://quarkus.io/guides/amazon-lambda[Quarkus Amazon Lambda]."
msgstr "Quarkus的未来版本将扩展这一概念，以涵盖 link:https://quarkus.io/guides/azure-functions[Quarkus Azure Functions] 和 link:https://quarkus.io/guides/amazon-lambda[Quarkus Amazon Lambda] 等领域。"

#. type: Title ====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:162
#, fuzzy, no-wrap
msgid "CLI Plugins"
msgstr "CLI插件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:165
#, fuzzy
msgid "The CLI brings some really interesting features for Developers, but unfortunately it can't grow indefinitely as it needs to be reasonably sized.  This need lead to the implementation of a plugin system for the CLI, that allows the dynamic addition of commands in the form of plugins."
msgstr "CLI为开发者带来了一些非常有趣的功能，但不幸的是，它不能无限制地增长，因为它需要有合理的规模。这种需要导致了CLI插件系统的实现，它允许以插件的形式动态添加命令。"

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:167
#, fuzzy, no-wrap
msgid "What is a Plugin ?"
msgstr "什么是插件？"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:169
#, fuzzy
msgid "A plugin implements a command in one of the following ways:"
msgstr "一个插件以下列方式之一实现一个命令："

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:171
#, fuzzy
msgid "As an arbitrary executable"
msgstr "作为一个任意的可执行文件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:172
#, fuzzy
msgid "As a java source file"
msgstr "作为一个java源文件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:173
#, fuzzy
msgid "As a jar (with main)"
msgstr "作为一个罐子(带主)"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:174
#, fuzzy
msgid "As a maven artifact"
msgstr "作为一个maven工件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:175
#, fuzzy
msgid "As a https://www.jbang.dev/[JBang] alias"
msgstr "作为一个 link:https://www.jbang.dev/[JBang] 的别名"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:177
#, fuzzy
msgid "Plugins are added to the CLI either explicitly using the Quarkus CLI, or implicitly by adding extensions to the project."
msgstr "插件可以通过Quarkus CLI显式添加到CLI中，也可以通过添加扩展到项目中隐式添加。"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:179
#, fuzzy
msgid "Let's see what the CLI commands related to plugins are available:"
msgstr "让我们看看与插件有关的CLI命令有哪些："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:187
#, no-wrap
msgid ""
"quarkus --help | grep plug\n"
"plugin, plug            Configure plugins of the Quarkus CLI.\n"
"  list, ls              List CLI plugins.\n"
"  add                   Add plugin(s) to the Quarkus CLI.\n"
"  remove                Remove plugin(s) to the Quarkus CLI.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:190
#, fuzzy
msgid "Initially, there are no plugins installed so, `quarkus plug list` returns an empty list:"
msgstr "最初，没有安装任何插件，所以， `quarkus plug list` ，返回一个空列表："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:196
#, no-wrap
msgid ""
"quarkus plug list\n"
"No plugins installed!\n"
"To include the installable plugins in the list, append --installable to the command.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:199
#, fuzzy
msgid "It also returns a hint suggesting the use of the `--installable`, but what are `installable` plugins ?"
msgstr "它还返回一个提示，建议使用 `--installable` ，但什么是 `installable` 的插件？"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:202
#, fuzzy
msgid "Installable refers to executables found in PATH, or https://www.jbang.dev/[JBang] aliases prefixed with the `quarkus` prefix.  **Note**: The command does require https://www.jbang.dev/[JBang] (and prompts users for installation if not already installed)."
msgstr "Installable指的是在PATH中找到的可执行文件，或以 `quarkus` 为前缀的 link:https://www.jbang.dev/[JBang] 别名。 *注意* ：该命令确实需要 link:https://www.jbang.dev/[JBang] （如果尚未安装，会提示用户安装）。"

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:210
#, no-wrap
msgid ""
"quarkus plug list --installable\n"
"  Name    \t Type  \t Scope \t Location               \t Description\n"
"  fmt     \t jbang \t user  \t quarkus-fmt@quarkusio\n"
"  kill    \t jbang \t user  \t quarkus-kill@quarkusio\n"
"  quarkus \t jbang \t user  \t quarkus@quarkusio\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:214
#, fuzzy
msgid "The plugins listed are https://www.jbang.dev/[JBang] aliases that are available in the https://github.com/quarkusio/jbang-catalog/blob/HEAD/jbang-catalog.json[quarkus.io JBang catalog] (enabled by default).  More catalogs can be added using the https://www.jbang.dev/[JBang] binary."
msgstr "列出的插件是 link:https://github.com/quarkusio/jbang-catalog/blob/HEAD/jbang-catalog.json[quarkus.io JBang目录] （默认启用）中的 link:https://www.jbang.dev/[JBang] 别名。更多的目录可以使用 link:https://www.jbang.dev/[JBang] 二进制添加。"

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:216
#, fuzzy, no-wrap
msgid "Writing plugins"
msgstr "编写插件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:218
#, fuzzy
msgid "Let's see how to create a plugin for the Quarkus CLI. Out of the box the Quarkus CLI provides 3 ways of creating projects:"
msgstr "让我们看看如何为Quarkus CLI创建一个插件。Quarkus CLI提供了三种创建项目的方法："

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:220
#, fuzzy
msgid "A webapp"
msgstr "一个网络应用程序"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:221
#, fuzzy
msgid "A command line application"
msgstr "一个命令行应用程序"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:222
#, fuzzy
msgid "A Quarkus extension"
msgstr "一个Quarkus扩展"

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:230
#, no-wrap
msgid ""
"quarkus --help | grep -A3 create\n"
"create                  Create a new project.\n"
"  app                   Create a Quarkus application project.\n"
"  cli                   Create a Quarkus command-line project.\n"
"  extension             Create a Quarkus extension project\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:237
#, fuzzy
msgid "We are going to create a plugin for `create` that creates new applications using https://github.com/quarkusio/quarkus-quickstarts[Quarkus Quickstarts].  This is as simple as writing a script that clones the repository from Github and copies the quickstart of choice.  To add some extra value on top of it let's use a https://git-scm.com/docs/git-sparse-checkout[Sparse Checkout] and also limit depth to 1.  This minimizes the amount of data transferred and speeds things up.  Moreover, recalling the actual steps needed for a https://git-scm.com/docs/git-sparse-checkout[Sparse Checkout] is not easy, therefore it's something that is really handy to have as a script:"
msgstr "我们将为 `create` 创建一个插件，使用 link:https://github.com/quarkusio/quarkus-quickstarts[Quarkus Quickstarts] 创建新的应用程序。这就像编写一个脚本，从Github克隆软件库并复制所选择的快速启动一样简单。为了在上面增加一些额外的价值，让我们使用 link:https://git-scm.com/docs/git-sparse-checkout[稀疏检出] ，并将深度限制为1。这可以最大限度地减少传输的数据量，并加快事情。此外，回忆起 link:https://git-scm.com/docs/git-sparse-checkout[稀疏结账] 所需的实际步骤并不容易，因此它作为一个脚本是非常方便的："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:241
#, no-wrap
msgid "#!/bin/bash\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:244
#, no-wrap
msgid ""
"DIRECTORY=$1\n"
"REPO_URL=\"https://github.com/quarkusio/quarkus-quickstarts.git\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:248
#, no-wrap
msgid ""
"# Create a new directory for your Git repo and navigate into it\n"
"mkdir $DIRECTORY\n"
"cd $DIRECTORY\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:251
#, no-wrap
msgid ""
"# Initialize a new Git repository here\n"
"git init\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:256
#, no-wrap
msgid ""
"# Add the repository from GitHub as a place your local Git repo can fetch from\n"
"git remote add origin $REPO_URL\n"
"git config core.sparseCheckout true\n"
"echo \"$DIRECTORY\" >> .git/info/sparse-checkout\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:259
#, no-wrap
msgid ""
"# Fetch just the history of the specific directory\n"
"git fetch --depth 1 origin main:$DIRECTORY\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:265
#, no-wrap
msgid ""
"# Checkout the specific directory\n"
"git checkout $DIRECTORY\n"
"mv $DIRECTORY/* .\n"
"rm -rf $DIRECTORY\n"
"rm -rf .git\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:270
#, fuzzy
msgid "Let's save the script above in a file named `quarkus-create-from-quickstart` and add it to the PATH.  The `quarkus-` is the required prefix and `create` is the name of the command under which the plugin is going to be installed.  Next time `quarkus plug list --installable` is run it picks up the script:"
msgstr "让我们把上面的脚本保存在一个名为 `quarkus-create-from-quickstart` 的文件中，并把它添加到PATH中。 `quarkus-` 是必要的前缀， `create` 是要安装该插件的命令名称。下次运行 `quarkus plug list --installable` ，它就会拾取这个脚本："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:279
#, no-wrap
msgid ""
"quarkus plug list --installable\n"
"  Name                   \t Type       \t Scope \t Location                                         \t Description\n"
"  create-from-quickstart \t executable \t user  \t /home/iocanel/bin/quarkus-create-from-quickstart\n"
"  fmt                    \t jbang      \t user  \t quarkus-fmt@quarkusio\n"
"  kill                   \t jbang      \t user  \t quarkus-kill@quarkusio\n"
"  quarkus                \t jbang      \t user  \t quarkus@quarkusio\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:281
#, no-wrap
msgid "Use the 'plugin add' subcommand and pass the location of any plugin listed above, or any remote location in the form of URL / GACTV pointing to a remote plugin.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:284
#, fuzzy
msgid "The plugin can be now installed using:"
msgstr "该插件现在可以通过以下方式安装："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:291
#, no-wrap
msgid ""
"quarkus plug add create-from-quickstart\n"
"Added plugin:\n"
"    Name                   \t Type       \t Scope \t Location                                         \t Description\n"
" *  create-from-quickstart \t executable \t user  \t /home/iocanel/bin/quarkus-create-from-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:294
#, fuzzy
msgid "The plugin now appears in the `quarkus --help` under the `create` command:"
msgstr "该插件现在出现在 `create` 命令下的 `quarkus --help` ："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:303
#, no-wrap
msgid ""
"quarkus --help | grep -A4 create\n"
"create                  Create a new project.\n"
"  app                   Create a Quarkus application project.\n"
"  cli                   Create a Quarkus command-line project.\n"
"  extension             Create a Quarkus extension project\n"
"  from-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:306
#, fuzzy
msgid "And it can be used as regular command. Let's use it to create an application from the https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-panache-quickstart[Hibernate ORM Panache Quickstart]:"
msgstr "而且它可以作为常规命令使用。让我们用它来创建一个来自 link:https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-panache-quickstart[Hibernate ORM Panache Quickstart] 的应用程序："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:310
#, no-wrap
msgid "quarkus create from-quickstart hibernate-orm-panache-quickstart\n"
msgstr ""

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:313
#, fuzzy, no-wrap
msgid "Using your Java skills to write plugins"
msgstr "使用你的Java技能来编写插件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:318
#, fuzzy
msgid "Using shell scripts or arbitrary binaries (written in any language) is one of writing plugins.  Java developers can alternatively put their java skills to use.  Any source file that contains a main or any jar that defines a main class can be used directly by passing their location (Path or URL).  In case of jars maven coordinates in the form of GACTV (<Group ID>:<Artifact Id>:<Classifier>:<Type>:<Version>) are also supported."
msgstr "使用shell脚本或任意的二进制文件（用任何语言编写）是编写插件的一种。Java开发者也可以把他们的java技能用上。任何包含main的源文件或定义了main类的jar都可以通过传递其位置（Path或URL）直接使用。如果是jar，也支持GACTV形式的maven坐标（<Group ID>:<Artifact Id>:<Classifier>:<Type>:<Version>）。"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:322
#, fuzzy
msgid "Let's rewrite the `create-from-github` in Java and see how we can plug a java source file to the Quarkus CLI.  The implementation will use https://www.eclipse.org/jgit/[jgit] and https://commons.apache.org/proper/commons-io/[commons.io]. To simplify dependency management the source file includes https://www.jbang.dev/[JBang] meta comments that define the fore mentioned dependencies:"
msgstr "让我们用Java重写 `create-from-github` ，看看我们如何将java源文件插入Quarkus CLI。这个实现将使用 link:https://www.eclipse.org/jgit/[jgit] 和 link:https://commons.apache.org/proper/commons-io/[commons.io] 。为了简化依赖性管理，源文件包括 link:https://www.jbang.dev/[JBang] 元注释，定义前述的依赖性："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:329
#, no-wrap
msgid ""
"///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n"
"//DEPS org.eclipse.jgit:org.eclipse.jgit:6.5.0.202303070854-r\n"
"//DEPS commons-io:commons-io:2.11.0\n"
"//JAVA_OPTIONS -Djava.io.tmpdir=/tmp\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:333
#, no-wrap
msgid ""
"import org.eclipse.jgit.api.*;\n"
"import org.eclipse.jgit.lib.*;\n"
"import org.eclipse.jgit.transport.*;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:342
#, no-wrap
msgid ""
"import java.io.File;\n"
"import java.io.IOException;\n"
"import java.nio.file.Files;\n"
"import java.nio.file.Path;\n"
"import java.nio.file.Paths;\n"
"import java.util.Arrays;\n"
"import java.util.Set;\n"
"import org.apache.commons.io.FileUtils;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:344
#, no-wrap
msgid "public class CreateFromQuickstart {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:347
#, no-wrap
msgid ""
"    private static final String REPO_URL = \"https://github.com/quarkusio/quarkus-quickstarts.git\";\n"
"    private static final String FETCH = \"+refs/heads/*:refs/remotes/origin/*\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:354
#, no-wrap
msgid ""
"    public static void main(String[] args) {\n"
"        String directory = args[0];\n"
"        Set<String> paths = Set.of(directory);\n"
"        try {\n"
"            Path cloneDir = Files.createTempDirectory(\"create-from-quickstart-\");\n"
"            Git git = Git.init().setDirectory(cloneDir.toFile()).call();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:361
#, no-wrap
msgid ""
"            StoredConfig config = git.getRepository().getConfig();\n"
"            config.setString(\"remote\", \"origin\", \"url\", REPO_URL);\n"
"            config.setString(\"remote\", \"origin\", \"fetch\", FETCH);\n"
"            config.setBoolean(\"core\", null, \"sparseCheckout\", true);\n"
"            config.setBoolean(\"core\", null, \"sparseCheckout\", true);\n"
"            config.save();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:377
#, no-wrap
msgid ""
"            Path file = cloneDir.resolve(\".git\").resolve(\"info\").resolve(\"sparse-checkout\");\n"
"            file.getParent().toFile().mkdirs();\n"
"            Files.write(file, directory.getBytes());\n"
"            FetchResult result = git.fetch().setRemote(\"origin\").setRefSpecs(new RefSpec(FETCH)).setThin(false).call();\n"
"            git.checkout().setName(\"origin/main\").call();\n"
"            File source = cloneDir.resolve(directory).toFile();\n"
"            File destination = new File(directory);\n"
"            FileUtils.copyDirectory(source, destination);\n"
"            FileUtils.deleteDirectory(cloneDir.toFile());\n"
"        } catch (Exception e) {\n"
"            e.printStackTrace();\n"
"            System.exit(1);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:380
#, fuzzy
msgid "To add this source file as a Quarkus CLI plugin:"
msgstr "要把这个源文件作为Quarkus CLI插件加入："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:387
#, no-wrap
msgid ""
"quarkus plug add /path/to/CreateFromQuickstart.java\n"
"Added plugin:\n"
"    Name                 \t Type \t Scope \t Location                                     \t Description\n"
" *  CreateFromQuickstart \t java \t user  \t /path/to/CreateFromQuickstart.java\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:391
#, fuzzy
msgid "Note that the name derived from the actual file/class name that is using https://en.wikipedia.org/wiki/Camel_case[Camel Case] and therefore is not matched to the `create` sub command.  Instead, it is added as a sibling to `create`:"
msgstr "请注意，这个名字来源于使用 link:https://en.wikipedia.org/wiki/Camel_case[Camel Case] 的实际文件/类名，因此没有与 `create` 子命令匹配。相反，它被作为一个兄弟姐妹添加到 `create` ："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:402
#, no-wrap
msgid ""
"quarkus --help\n"
"Commands:\n"
"  create                  Create a new project.\n"
"    app                   Create a Quarkus application project.\n"
"    cli                   Create a Quarkus command-line project.\n"
"    extension             Create a Quarkus extension project\n"
"  # more commands here\n"
"  CreateFromQuickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:406
#, fuzzy
msgid "As of `3.1.2.Final` there is no direct way to alias a plugin. However, aliases are supported by https://www.jbang.dev/[JBang].  Here's how aliases can be used:"
msgstr "截止到 `3.1.2.Final` ，没有直接的方法来别名一个插件。然而， link:https://www.jbang.dev/[JBang] 支持别名。下面是如何使用别名的："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:415
#, no-wrap
msgid ""
"jbang alias add --name quarkus-create-from-quickstart ~/path/to/CreateFromQuickstart.java\n"
"[jbang] Alias 'quarkus-create-from-quickstart' added to '/home/user/.jbang/jbang-catalog.json'\n"
"quarkus plug add create-from-quickstart\n"
"Added plugin:\n"
"    Name                   \t Type  \t Scope \t Location                       \t Description\n"
" *  create-from-quickstart \t jbang \t user  \t quarkus-create-from-quickstart\n"
msgstr ""

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:418
#, fuzzy, no-wrap
msgid "Project specific plugins"
msgstr "项目特定的插件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:421
#, fuzzy
msgid "In all the examples so far the plugins listed as `user scoped`. This means that the plugins are global to the user. It is possible however to also have `project scoped` plugins.  This is important as it allows:"
msgstr "在到目前为止的所有例子中，插件都被列为 `user scoped` 。这意味着，这些插件对用户来说是全局性的。然而，也可以有 `project scoped` 的插件。这很重要，因为它允许："

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:423
#, fuzzy
msgid "Having project specific plugins"
msgstr "拥有项目特定的插件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:424
#, fuzzy
msgid "Overriding versions per project"
msgstr "每个项目的重写版本"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:425
#, fuzzy
msgid "Sharing the plugin catalog (via version control)"
msgstr "共享插件目录（通过版本控制）。"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:426
#, fuzzy
msgid "Support extension provided plugins"
msgstr "支持扩展提供的插件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:430
#, fuzzy
msgid "When the `quarkus plug add` command is called from within a project, the plugin is added to the project catalog, unless the `--user` options is used.  The plugin catalog is persisted in `.quarkus` in the root of the project. By adding this folder to version control, the project plugin catalog is shared between users of the project.  In this case, its a good idea to also include the actual plugin source files in version control, or use a shared https://www.jbang.dev/[JBang] catalog."
msgstr "当在项目中调用 `quarkus plug add` 命令时，除非使用 `--user` 选项，否则该插件将被添加到项目目录中。插件目录被保存在项目根部的 `.quarkus` 。通过将这个文件夹添加到版本控制中，项目的插件目录就会在项目的用户之间共享。在这种情况下，最好在版本控制中也包括实际的插件源文件，或者使用一个共享的 link:https://www.jbang.dev/[JBang] 目录。"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:434
#, fuzzy
msgid "Let's create script that allows users to setup their project in an https://argoproj.github.io/cd/[ArgoCD] developer instance.  https://argoproj.github.io/cd/[ArgoCD] is a GitOps continous delivery tool for https://kubernetes.io[Kubernetes].  The following example demonstrates its setup process can be automated as a Quarkus CLI plugin:"
msgstr "让我们创建一个脚本，让用户在 link:https://argoproj.github.io/cd/[ArgoCD] 开发者实例中设置他们的项目。 link:https://argoproj.github.io/cd/[ArgoCD] 是一个用于 link:https://kubernetes.io[Kubernetes] 的GitOps持续交付工具。下面的例子展示了它的设置过程可以作为Quarkus CLI插件自动化："

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:436
#, fuzzy
msgid "More specifically the plugin performs the following:"
msgstr "更具体地说，该插件执行以下操作："

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:438
#, fuzzy
msgid "Installs the https://argoproj.github.io/cd/[ArgoCD] binary"
msgstr "安装 link:https://argoproj.github.io/cd/[ArgoCD] 二进制文件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:439
#, fuzzy
msgid "Installs the https://argoproj.github.io/cd/[ArgoCD] resources to the target cluster"
msgstr "将 link:https://argoproj.github.io/cd/[ArgoCD] 资源安装到目标集群上"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:440
#, fuzzy
msgid "It generated https://kubernetes.io[Kubernetes] manifests for the project"
msgstr "它为项目生成了 link:https://kubernetes.io[Kubernetes] 清单"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:441
#, fuzzy
msgid "It adds the generated resources to version control"
msgstr "它将生成的资源添加到版本控制中"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:442
#, fuzzy
msgid "It setups the project to https://argoproj.github.io/cd/[ArgoCD]"
msgstr "它将项目设置为 link:https://argoproj.github.io/cd/[ArgoCD]"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:446
#, fuzzy
msgid "Even though some of the steps above need only need to be performed once (e.g. adding manifests to version control) the remaining steps have to be performed for each developer environment.  So, instead of adding the script to some shared folder or repository forever to be forgotten, it makes sense to have it inside the project as a CLI plugin.  The source of the script could be something like:"
msgstr "尽管上面的一些步骤只需要执行一次（例如将清单添加到版本控制中），但其余步骤必须在每个开发环境中执行。因此，与其把脚本添加到某个共享文件夹或资源库中永远被遗忘，不如把它作为一个CLI插件放在项目中。脚本的来源可以是这样的："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:452
#, no-wrap
msgid ""
"#!/bin/bash\n"
"set -e\n"
"ARGOCD_VERSION=\"v2.7.4\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:458
#, no-wrap
msgid ""
"check_requirements() {\n"
"    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n"
"        echo \"Error: The current folder is not under version control.\"\n"
"        exit 1\n"
"    fi\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:467
#, no-wrap
msgid ""
"    if [ ! -f \"target/kubernetes/kubernetes.yml\" ]; then\n"
"        mvn quarkus:deploy -Dquarkus.kubernetes.deploy=false\n"
"        if [ ! -f \"target/kubernetes/kubernetes.yml\" ]; then\n"
"         echo \"Error: The target/kubernetes/kubernetes.yml file does not exist.\"\n"
"         exit 1\n"
"        fi\n"
"    fi\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:479
#, no-wrap
msgid ""
"install_argocd_binary() {\n"
"    OS=\"`uname`\"\n"
"    case $OS in\n"
"        'Linux')\n"
"        OS='linux'\n"
"        ;;\n"
"        'Darwin')\n"
"        OS='darwin'\n"
"        ;;\n"
"        *) ;;\n"
"    esac\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:486
#, no-wrap
msgid ""
"    if ! command -v argocd &> /dev/null\n"
"    then\n"
"        curl -sSL -o $HOME/bin/argocd https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_VERSION}/argocd-${OS}-amd64\n"
"        chmod +x $HOME/bin/argocd\n"
"    fi\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:493
#, no-wrap
msgid ""
"install_argocd_resources() {\n"
"    if ! kubectl get namespace | grep -q 'argocd'; then\n"
"        kubectl create namespace argocd\n"
"    fi\n"
"    if ! kubectl get pods -n argocd | grep -q 'argocd-server'; then\n"
"        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/${ARGOCD_VERSION}/manifests/install.yaml\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:497
#, no-wrap
msgid ""
"        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=120s\n"
"    fi\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:513
#, no-wrap
msgid ""
"wait_for_port() {\n"
"    local PORT=$1\n"
"    local TIMEOUT=5\n"
"    local START_TIME=$SECONDS\n"
"    while :\n"
"    do\n"
"        if nc -v $1 &> /dev/null; then\n"
"            nc -z localhost $PORT  && return\n"
"        fi\n"
"        if (( SECONDS - START_TIME >= TIMEOUT )); then\n"
"            return\n"
"        fi\n"
"        sleep 1\n"
"    done\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:517
#, no-wrap
msgid ""
"cleanup() {\n"
"    kill $PORT_FORWARD_PID\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:525
#, no-wrap
msgid ""
"create_app() {\n"
"    NAMESPACE=`kubectl config view --minify --output 'jsonpath={..namespace}'`\n"
"    GIT_URL=`git remote get-url origin | sed -s \"s/git@github.com:/https:\\/\\/github.com\\//\"`\n"
"    GIT_BRANCH=`git branch -l | grep \"*\" | awk '{print $2}'`\n"
"    APP_DIR=`git rev-parse --show-toplevel`\n"
"    APP_NAME=`git rev-parse --show-toplevel | xargs basename`\n"
"    ARGOCD_PASSWORD=`argocd admin initial-password argo -n argocd | head -n1`\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:540
#, no-wrap
msgid ""
"    if [ -f \"$APP_DIR/.argocd\" ]; then\n"
"        mkdir $APP_DIR/.argocd\n"
"    fi\n"
"    cp target/kubernetes/kubernetes.yml $APP_DIR/.argocd/\n"
"    if [ -n \"$(git status --porcelain | grep -v '?')\" ]; then\n"
"        git add $APP_DIR/.argocd\n"
"        git commit -m \"Add generated manifests to argocd\" && git push origin $BRANCH\n"
"    fi\n"
"    kubectl port-forward svc/argocd-server -n argocd 9443:443 > /dev/null 2>&1 &\n"
"    PORT_FORWARD_PID=$!\n"
"    trap  \"cleanup\" EXIT SIGINT SIGTERM\n"
"    wait_for_port 9443\n"
"    argocd login localhost:9443 --username admin --password $ARGOCD_PASSWORD --insecure\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:544
#, no-wrap
msgid ""
"    argocd app create $APP_NAME --repo $GIT_URL --path .argocd --dest-server https://kubernetes.default.svc --dest-namespace default\n"
"    argocd app sync $APP_NAME\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:549
#, no-wrap
msgid ""
"check_requirements\n"
"install_argocd_binary\n"
"install_argocd_resources\n"
"create_app\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:552
#, fuzzy
msgid "Let's save the file under `bin/quarkus-argocd-setup` and add it as a plugin:"
msgstr "让我们把文件保存在 `bin/quarkus-argocd-setup` ，并把它作为一个插件添加："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:556
#, no-wrap
msgid "quarkus plug add bin/quarkus-argocds-setup\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:559
#, fuzzy
msgid "Now by calling `quarkus argocd-setup` the application is setup for use with https://argoproj.github.io/cd/[ArgoCD]."
msgstr "现在通过调用 `quarkus argocd-setup` ，应用程序被设置为与 link:https://argoproj.github.io/cd/[ArgoCD] 一起使用。"

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:561
#, fuzzy, no-wrap
msgid "Extension provided plugins"
msgstr "扩展提供的插件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:564
#, fuzzy
msgid "A Quarkus extension may contribute to the CLI plugins that are available to a project.  At the moment the following Quarkiverse extensions provide plugins:"
msgstr "一个Quarkus扩展可以为一个项目提供CLI插件。目前，以下Quarkiverse扩展提供插件："

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:566
#, fuzzy
msgid "https://github.com/quarkiverse/quarkus-authzed-client[Quarkus Authzed Client]"
msgstr "link:https://github.com/quarkiverse/quarkus-authzed-client[Quarkus授权的客户端]"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:567
#, fuzzy
msgid "https://github.com/quarkiverse/quarkus-helm[Quarkus Helm]"
msgstr "link:https://github.com/quarkiverse/quarkus-helm[夸库斯头盔]"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:570
#, fuzzy
msgid "Let's see how things work when such an extension is added to a project.  The following command adds the https://github.com/quarkiverse/quarkus-helm[Quarkus Helm] extension, along with the https://kubernetes.io[Kubernetes] and docker extensions that often are used together."
msgstr "让我们看看当这样的扩展被添加到一个项目中时，事情是如何进行的。下面的命令添加了 link:https://github.com/quarkiverse/quarkus-helm[Quarkus Helm] 扩展，以及经常一起使用的 link:https://kubernetes.io[Kubernetes] 和docker扩展。"

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:577
#, no-wrap
msgid ""
"quarkus ext add quarkus-helm quarkus-kubernetes quarkus-container-image-docker\n"
"[SUCCESS] ✅  Extension io.quarkiverse.helm:quarkus-helm:1.0.7 has been installed\n"
"[SUCCESS] ✅  Extension io.quarkus:quarkus-kubernetes has been installed\n"
"[SUCCESS] ✅  Extension io.quarkus:quarkus-container-image-docker has been installed\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:580
#, fuzzy
msgid "Now the ``helm` plugin should be automatically added next time the CLI used:"
msgstr "现在， ``helm` 插件应该在下次使用CLI时自动添加："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:591
#, no-wrap
msgid ""
"quarkus --help\n"
"Plugin catalog last updated on: 07/06/2023 10:29:05. Syncing!\n"
"Looking for the newly published extensions in registry.quarkus.io\n"
"Options:\n"
"# option details\n"
"Commads:\n"
"# commands\n"
"helm\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:595
#, fuzzy
msgid "The plugin can now be used to install the application using https://helm.sh/[Helm] charts. The plugin itself is a simple wrapper around the official https://helm.sh/[Helm] binary that simplifies its use. For example the app can be easily installed using:"
msgstr "现在可以使用该插件来安装使用 link:https://helm.sh/[Helm] 图表的应用程序。该插件本身是一个围绕官方 link:https://helm.sh/[Helm] 二进制文件的简单包装，简化了其使用。例如，该应用程序可以很容易地用以下方式安装："

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:599
#, no-wrap
msgid "quarkus helm install\n"
msgstr ""

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:602
#, fuzzy, no-wrap
msgid "Summarizing plugins"
msgstr "总结插件"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:605
#, fuzzy
msgid "The Quarkus CLI plugin system is not just a way for the Quarkus team to rightsize and modularize the Quarkus CLI, it also offers teams a way of creating scripts and recipes specific to their project and distribute them along with the code."
msgstr "Quarkus CLI插件系统不仅仅是Quarkus团队将Quarkus CLI权利化和模块化的一种方式，它还为团队提供了一种创建特定于其项目的脚本和配方的方式，并将它们与代码一起分发。"

#. type: Title ===
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:607
#, fuzzy, no-wrap
msgid "See also"
msgstr "另见"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:610
#, fuzzy
msgid "If you want to see more about the new Quarkus CLI features make sure to check the following https://quarkus.io/insights/[Quarkus Insights] episodes.  They demonstrate the new features in action and will hopefully inspire you with ideas for your own plugins."
msgstr "如果你想看到更多关于Quarkus CLI的新功能，请务必查看以下 link:https://quarkus.io/insights/[Quarkus Insights的] 节目。他们展示了新的功能，希望能给你带来灵感，为你自己的插件提供灵感。"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:612
#, fuzzy
msgid "https://www.youtube.com/watch?v=82NjJ7gDzv0[Quarkus Insigts #124: 1000 ways to deploy Quarkus]"
msgstr "link:https://www.youtube.com/watch?v=82NjJ7gDzv0[Quarkus Insigts #124: 部署Quarkus的1000种方法]"

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:612
msgid "https://www.youtube.com/watch?v=iskDa-i82RU[Quarkus Insights #129: Quarkus CLI plugins: JBang]"
msgstr ""
