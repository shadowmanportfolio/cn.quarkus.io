# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-24 12:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "hcummins"
msgstr "hcummins"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "2023-05-15"
msgstr "2023-05-15"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "With Quarkus 3 and the Quarkiverse Pact extensions, Quarkus can run continuous tests continuously."
msgstr "通过Quarkus 3和Quarkiverse Pact扩展，Quarkus可以连续运行连续测试。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "extension"
msgstr "延伸"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "Using Pact and Quarkus to Tame Microservices Testing"
msgstr "使用Pact和Quarkus来驯服微服务测试"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:13
#, fuzzy
msgid "In a microservices architecture, making sure each microservices works is (relatively) easy.  The microservices are usually small, and easy to test.  But how do you make sure the microservices work together? How do you know if the system as a whole works?"
msgstr "在微服务架构中，确保每个微服务的工作是（相对）容易的。微服务通常很小，而且容易测试。但是，你如何确保这些微服务一起工作？你怎么知道系统作为一个整体是否工作？"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:16
#, fuzzy
msgid "One answer is contract testing.  Contract testing gives more confidence than testing individual services, but the cost is far lower than end-to-end testing."
msgstr "一个答案是合同测试。合同测试比测试单个服务更有信心，但成本远远低于端到端测试。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:17
#, fuzzy, no-wrap
msgid "What's wrong with end-to-end testing?"
msgstr "端到端测试有什么问题？"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:23
#, fuzzy
msgid "Even when developing, standing up all the dependencies and consumers for an individual microservice can be hard work.  Recently, our consulting colleagues received a plea for help from the CTO of a tech startup, who couldn't run his dev stack on a brand new laptop with 64 GB of RAM, because the application involved dozens of microservices and they consumed so many resources.  (If this sounds familiar, Quarkus can help https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[lower the resource consumption of the stack], but that's a different topic!)"
msgstr "即使在开发时，为单个微服务建立所有的依赖关系和消费者也是一项艰巨的工作。最近，我们的咨询同事收到了一个科技创业公司CTO的求助，他无法在一台拥有64GB内存的全新笔记本电脑上运行他的开发堆栈，因为该应用涉及几十个微服务，它们消耗了很多资源。(如果这听起来很熟悉，Quarkus可以帮助 link:https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[降低堆栈的资源消耗] ，但这是另一个话题！)"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:27
#, fuzzy, no-wrap
msgid ""
"Teams sometimes address the challenge of local microservices development by providing remote environments into which local code can be injected.\n"
" This is sometimes called https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"remocal development\"] or telepresence.\n"
"Another, purely local, model, is https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[local virtual environments].\n"
msgstr "团队有时会通过提供可注入本地代码的远程环境来解决本地微服务开发的挑战。这有时被称为 link:https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"remocal开发 \"] 或telepresence。另一种纯粹的本地模式，是 link:https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[本地虚拟环境] 。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:29
#, fuzzy
msgid "While these environments can be useful, they can also be fragile, and managing them often needs a dedicated platform team."
msgstr "虽然这些环境可能是有用的，但它们也可能是脆弱的，而且管理它们往往需要一个专门的平台团队。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:30
#, fuzzy, no-wrap
msgid "What's wrong with mocks?"
msgstr "嘲讽有什么不好？"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:38
#, fuzzy
msgid "When having 'real' versions of the rest of the system to test against is too heavy, teams often use mocks or stubs.  (Mocks and stubs are subtly different, but for simplicity I'll use \"mocks\" to describe both.)  Mocks have many advantages; they're lightweight and enable unit testing of code with external dependencies.  However, mocks also have a big disadvantage; there's no guarantee the mock behaves like real the thing.  Users of a service will bake their own assumptions about how a service behaves into a mock.  If a service changes, it's up to consuming code to figure out what's changed and update the mocks."
msgstr "当拥有系统其他部分的 \"真实 \"版本来进行测试太过沉重时，团队通常会使用mocks或stubs（mocks和stubs有细微的不同，但为了简单起见，我会用 \"mocks \"来描述两者）。Mocks有很多优点；它们是轻量级的，能够对具有外部依赖性的代码进行单元测试。然而，模拟也有一个很大的缺点；不能保证模拟的行为像真实的东西。服务的用户会把他们自己对服务行为方式的假设放入模拟中。如果一个服务发生了变化，就需要消耗代码来找出变化的地方并更新模拟。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:40
#, fuzzy
msgid "Sometimes, the first time these assumptions are tested is in production."
msgstr "有时，这些假设第一次被测试是在生产中。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:41
#, fuzzy, no-wrap
msgid "Contract tests"
msgstr "合同测试"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:45
#, fuzzy
msgid "How can we make a link between the mock being used by a consumer, and the functional validation being done by the provider? This is where contract testing helps. A contract testing framework powers two things:"
msgstr "我们如何在消费者使用的模拟和提供者进行的功能验证之间建立联系？这就是合同测试的作用。契约测试框架有两方面的作用："

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:47
#, fuzzy
msgid "A generated mock, which is used by the consumer to validate the consumer code behaves correctly. The mock is generated from the contract and examples."
msgstr "一个生成的模拟，消费者使用它来验证消费者代码的行为是否正确。该模拟是由合同和例子生成的。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:48
#, fuzzy
msgid "Generated functional tests, which is validates the provider behaves as expected. These tests are generated from the same contract and examples as the consumer's mock."
msgstr "生成的功能测试，即验证提供者的行为是否符合预期。这些测试是由与消费者模拟相同的合同和实例生成的。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:53
#, fuzzy
msgid "With https://en.wikipedia.org/wiki/Test-driven_development[Test Driven Development(TDD)], you start with tests (a description of the desired behaviour) and work backwards to an implementation.  You can do the same thing with contract testing; you start with the contract, which describes what the service needs to do, and work backwards to the implementation.  This is known as \"contract-first\", and it can be a very effective development technique.  My colleagues in Red Hat App Dev Consulting have written some great articles about https://appdev.consulting.redhat.com/tracks/contract-first/[how they use contract-first development]."
msgstr "在 link:https://en.wikipedia.org/wiki/Test-driven_development[测试驱动开发（TDD）] 中，你从测试（对所需行为的描述）开始，然后倒退到实现。你可以用合同测试做同样的事情；你从合同开始，合同描述了服务需要做什么，然后倒推到实现。这被称为 \"合同第一\"，它可以是一种非常有效的开发技术。我在红帽应用开发咨询公司的同事写了一些关于 link:https://appdev.consulting.redhat.com/tracks/contract-first/[他们如何使用合同优先开发] 的好文章。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:54
#, fuzzy, no-wrap
msgid "Contract test options"
msgstr "合同测试选项"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:60
#, fuzzy
msgid "There are a few different contract-testing frameworks out there, including Pact, Microcks, Spring Cloud Contract.  Some teams also build up their own OpenAPI-based toolchains, such as Schemathesis for functional tests, and Prism for the mocking.  Arguably the most popular contract testing solution is Pact, so it's where the Quarkiverse support for contract testing has started."
msgstr "现在有一些不同的合同测试框架，包括Pact、Microcks、Spring Cloud Contract。一些团队还建立了自己的基于OpenAPI的工具链，如用于功能测试的Schemathesis和用于嘲讽的Prism。可以说，最流行的合同测试解决方案是Pact，所以它是Quarkiverse对合同测试支持的开始。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:62
#, fuzzy
msgid "Pact is polyglot, with bindings for almost all popular languages."
msgstr "Pact是多语种的，几乎所有流行语言都有绑定。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:63
#, fuzzy
msgid "It's an integrated solution which provides both mocks for consumers and functional tests for providers."
msgstr "它是一个集成的解决方案，既为消费者提供模拟，也为提供者提供功能测试。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:64
#, fuzzy
msgid "It's standalone, and can be run without standing up any extra services, although a Pact Broker with some nice value-adds is available."
msgstr "它是独立的，可以在不建立任何额外服务的情况下运行，尽管有一个带有一些不错的增值功能的契约经纪人。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:65
#, fuzzy
msgid "Although Pact started as a REST-only solution, it is now https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[pluggable], which allows it to support a range of protocols and transports"
msgstr "尽管Pact一开始只是一个REST解决方案，但它现在是 link:https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[可插拔的] ，这使它能够支持一系列的协议和传输。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:68
#, fuzzy
msgid "The Pact team have a https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[good overview] of the advantages and disadvantages of schema-based testing (such as validation based on an OpenAPI spec) and contract testing."
msgstr "Pact团队对基于模式的测试（如基于OpenAPI规范的验证）和合同测试的优缺点有一个 link:https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[很好的概述] 。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:69
#, fuzzy, no-wrap
msgid "What's new with Pact and Quarkus"
msgstr "契约》和《夸克》的新内容"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:73
#, fuzzy
msgid "Using Pact with Quarkus isn't new; Quarkus contributors made https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[several] https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[classloading adjustments] in Quarkus core to support Pact testing in Quarkus 2.0, but this support was limited. In particular, Pact tests couldn't run in continuous testing mode."
msgstr "在Quarkus中使用Pact并不新鲜；Quarkus的贡献者在Quarkus核心中做了 link:https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[一些] link:https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[类加载的调整] ，以支持Quarkus 2.0中的Pact测试，但这种支持是有限的。特别是，Pact测试不能在连续测试模式下运行。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:78
#, fuzzy
msgid "Quarkus 3.0 moves Pact support from Quarkus core to its own Quarkiverse extension, where it can be deeper.  Quarkus core also includes classloading changes in the Kotlin extension and some classloading fixes in continuous testing itself.  These mean that, with the Pact Quarkiverse http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[provider] and http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[consumer extensions] Pact tests work properly with `quarkus test` and `quarkus dev`."
msgstr "Quarkus 3.0将Pact支持从Quarkus核心移到了它自己的Quarkiverse扩展中，在那里它可以更深入。Quarkus core还包括Kotlin扩展中的classloading变化和持续测试本身的一些classloading修复。这些意味着，有了Pact Quarkiverse link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[提供者] 和 link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[消费者扩展] ，Pact测试可以在 `quarkus test` 和 `quarkus dev` 。"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:80
#, fuzzy
msgid "To install the consumer extensions, run"
msgstr "要安装消费者扩展，运行"

#. type: delimited block -
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:83
#, fuzzy, no-wrap
msgid "quarkus ext add io.quarkiverse.pact:quarkus-pact-consumer\n"
msgstr " `` "

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:86
#, fuzzy
msgid "The provider extension can be installed with"
msgstr "提供者扩展可以通过以下方式安装"

#. type: delimited block -
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:88
#, fuzzy, no-wrap
msgid "quarkus ext add io.quarkiverse.pact:quarkus-pact-provider\n"
msgstr " `` "

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:91
#, fuzzy
msgid "For a deeper dive into contract testing, check out https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights #117]."
msgstr "关于合同测试的更深入研究，请查看 link:https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights #117] 。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:93
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:98
#, fuzzy
msgid "If you're using microservices, you should seriously consider contract testing.  With the new Pact extension, Quarkus 3 allows contract tests to be developed using the same great workflow as other tests."
msgstr "如果你正在使用微服务，你应该认真考虑合约测试。通过新的Pact扩展，Quarkus 3允许使用与其他测试相同的伟大工作流程来开发合约测试。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:99
#, fuzzy, no-wrap
msgid "More resources"
msgstr "更多资源"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:102
#, fuzzy
msgid "https://quarkiverse.github.io/quarkiverse-docs/quarkus-pact/dev/index.html[Documentation for the Pact extensions]"
msgstr "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-pact/dev/index.html[契约扩展的文件]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:103
#, fuzzy
msgid "https://docs.pact.io/implementation_guides/jvm[The Pact JVM binding documentation]"
msgstr "link:https://docs.pact.io/implementation_guides/jvm[Pact JVM绑定文档]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:104
#, fuzzy
msgid "https://quarkus.io/quarkus-workshops/super-heroes/index.html#contract-testing[Contract Testing Module] of the Quarkus Superheroes workshop"
msgstr "夸库斯超级英雄工作室的 link:https://quarkus.io/quarkus-workshops/super-heroes/index.html#contract-testing[合同测试模块]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:105
#, fuzzy
msgid "https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights about the Pact extension]"
msgstr "link:https://www.youtube.com/watch?v=d9CSY8HuZ9U[夸克斯关于契约扩展的洞察力]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:106
#, fuzzy
msgid "https://github.com/holly-cummins/pact-quarkus-sweater-demo[Sample application showing the Quarkus Pact extension]"
msgstr "link:https://github.com/holly-cummins/pact-quarkus-sweater-demo[显示Quarkus Pact扩展的示例应用程序]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:107
msgid "https://appdev.consulting.redhat.com/tracks/contract-first/[Contract-first development] (with OpenAPIGenerator, Schemathesis, and Prism)"
msgstr ""

#, fuzzy
#~ msgid "The provider extension can be installed with ``` quarkus ext add io.quarkiverse.pact:quarkus-pact-provider ```"
#~ msgstr "提供者扩展可以用 `` quarkus ext add io.quarkiverse.pact:quarkus-pact-provider` `安装。"
