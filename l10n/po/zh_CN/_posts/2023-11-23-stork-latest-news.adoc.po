# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-23 07:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:1
#, no-wrap
msgid "aureamunoz"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:1
#, no-wrap
msgid "2023-11-23"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:1
#, no-wrap
msgid "Explore in detail the latest features added to Smallrye Stork"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:1
#, no-wrap
msgid "extension smallrye-stork"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:1
#, no-wrap
msgid "SmallRye Stork Unwrapped: Exploring New Features and Enhancements"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:11
msgid "Since its initial release in January 2022, Stork has undergone significant development, introducing new features that extended its capabilities and improved developer experience."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:18
msgid "This blog post takes a deep dive into the evolution of SmallRye Stork beyond its initial release, providing a detailed exploration of its fresh additions.  But first, let's describe briefly what Stork can do for you.  SmallRye Stork is a client-side service discovery and selection framework.  It provides out-of-the-box integrations with Kubernetes, Eureka, and Hashicorp Consul, as well as a few selection strategies, including round-robin.  But the most noteworthy feature of Stork is its extensibility. You can create your own service selection strategy or plug in your own service discovery mechanism.  If you don't know it yet, a good way to get started is to take a look at our https://quarkus.io/guides/stork[getting started guide]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:22
msgid "Additionally, our documentation has also been enhanced, offering comprehensive guides for both seasoned users and those taking their first steps with Stork.  To further support your exploration, there is https://www.youtube.com/watch?v=fCNwxPDGt7Q[a video] and supplementary content that show Stork's capabilities in detail, don’t hesitate to check them out.  Don't have much time? Don't worry, we have the https://www.youtube.com/shorts/F4Gd1I1zfjs[perfect video] to understand Stork in less than 1 minute."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:25
msgid "With the latest added additions we highlight how Stork continues to reshape the game of service discovery and selection from the client side."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:26
#, no-wrap
msgid "Programmatic Service definition"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:32
msgid "Stork, from the 1.2.0 version, proposes a programmatic API to allow users to define the service discovery and selection configuration through code rather than through declarative or external configuration files. This means that you can use the full expressive power of Java to explicitly specify new service definitions and do manual lookup and selection. This is particularly beneficial when the configuration requirements of an application are not known until runtime, and it provides the ability to adjust settings without restarting the application."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:38
msgid "When using the programmatic API of Stork, you can: Retrieve the singleton Stork instance. This instance is configured with the set of Services it manages.  Register new service definition.  Retrieve the Service you want to use. Each Service is associated with a name.  Retrieve the ServiceInstance, which will provide the metadata to access the actual instance."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:40
msgid "In the following code, we are using Stork programmatic API to set up and configure services with different discovery methods and selection strategies:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:44
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:128
#, no-wrap
msgid "package examples;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:51
#, no-wrap
msgid ""
"import io.smallrye.stork.Stork;\n"
"import io.smallrye.stork.api.ServiceDefinition;\n"
"import io.smallrye.stork.loadbalancer.random.RandomConfiguration;\n"
"import io.smallrye.stork.servicediscovery.consul.ConsulRegistrarConfiguration;\n"
"import io.smallrye.stork.servicediscovery.staticlist.StaticConfiguration;\n"
"import io.smallrye.stork.servicediscovery.staticlist.StaticRegistrarConfiguration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:53
#, no-wrap
msgid "public class DefinitionExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:56
#, no-wrap
msgid ""
"    public static void example(Stork stork) {\n"
"        String example = \"localhost:8080, localhost:8081\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:61
#, no-wrap
msgid ""
"        // A service using a static list of locations as discovery\n"
"        // As not set, it defaults to round-robin to select the instance.\n"
"        stork.defineIfAbsent(\"my-service\",\n"
"                ServiceDefinition.of(new StaticConfiguration().withAddressList(example)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:66
#, no-wrap
msgid ""
"        // Another service using the random selection strategy, instead of round-robin\n"
"        stork.defineIfAbsent(\"my-second-service\",\n"
"                ServiceDefinition.of(new StaticConfiguration().withAddressList(example),\n"
"                        new RandomConfiguration()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:74
#, no-wrap
msgid ""
"        // Another service using the random selection strategy, instead of round-robin\n"
"        // and a static service registrar\n"
"        stork.defineIfAbsent(\"my-second-service\",\n"
"                ServiceDefinition.of(new StaticConfiguration().withAddressList(example),\n"
"                        new RandomConfiguration(), new StaticRegistrarConfiguration()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:78
msgid "It’s important to note that the choice between programmatic and declarative configuration often depends on the specific requirements and constraints of your application."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:80
#, no-wrap
msgid "Service discovery and selection strategies provided as CDI beans."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:86
msgid "Users may prefer using a framework that leverages CDI mechanism to easily manage and inject dependencies and have a more testable and maintainable code.  Stork can now do that. Starting from the 2.0.1 release, users can use the service discovery and load balancer as beans.  For that, it looks for CDI beans during the initialization in addition to the SPI providers.  It is worth mentioning that this enhancement also contributes to improving the Quarkus experience."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:88
#, no-wrap
msgid "New Service Discovery approaches added."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:97
msgid "We are happy to announce a few added service discovery strategies leveraging the power of DNS and Knative from 1.2 and 1.4 releases.  With Knative, Smallrye Stork introduces seamless service discovery through its serverless infrastructure.  The Stork Knative service discovery implementation is very similar to the Kubernetes one.  Stork will ask for https://knative.dev/docs/serving/reference/serving-api/#serving.knative.dev/v1.Service[Knative services] to the cluster instead of vanilla https://kubernetes.io/docs/concepts/services-networking/service/#service-resource[Kubernetes services] used by the Kubernetes implementation.  Again, to do so, Stork uses https://github.com/fabric8io/kubernetes-client/blob/master/extensions/knative/client/src/main/java/io/fabric8/knative/client/KnativeClient.java[Fabric 8 Knative Client] which is just an extension of Fabric8 Kubernetes Client The DNS-based service discovery is also here to stay. When a service has registered one or more instances in a Domain Name System (DNS) server, Stork will be able to discover them by querying the DNS. This strategy is simple and widely used, so Stork could not fail to implement it."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:99
#, no-wrap
msgid "New Sticky service selection strategy"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:102
msgid "The Stork load balancer family has been improved with a new one: the sticky service selection implementation."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:107
msgid "The sticky service selection implemented by Stork refers to a strategy where a client \"sticks\" to a particular instance of a service until it fails, then it selects another one. It is also possible to configure a backoff period for specifying how long a failing service instance should be retried.  This can be useful in scenarios where maintaining a consistent connection to the same instance is beneficial, such as when dealing with sessions or stateful applications."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:109
#, no-wrap
msgid "Enhance the service instances cache expiration policy."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:114
msgid "From almost the very beginning, Stork has supported in-memory caching of discovered instances through the extension of the CachingServiceDiscovery class.  As of version 1.3, this capability has been expanded to allow not only the retention of the cache for a specified duration but also the implementation of custom business logic for decision-making and data expiration."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:117
msgid "This enhancement was driven by the specific requirements of Kubernetes service discovery as contacting the cluster too frequently can result in performance problems. So, out of the box, Stork Kubernetes service discovery now comes with a tailored cache expiration strategy to keep service instances until an event occurs."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:119
msgid "If you would like to do so for your custom service discovery implementations, you need:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:120
msgid "Extend the CachingServiceDiscovery as mentioned above."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:121
msgid "Implement the `cache` method where the expiration strategy is defined."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:122
msgid "Invalidate the cache when the expiration condition evaluates to `true`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:124
msgid "Look at the example bellow:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:134
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.stork.api.ServiceInstance;\n"
"import io.smallrye.stork.impl.CachingServiceDiscovery;\n"
"import io.smallrye.stork.impl.DefaultServiceInstance;\n"
"import io.smallrye.stork.utils.ServiceInstanceIds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:138
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.List;\n"
"import java.util.concurrent.atomic.AtomicBoolean;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:140
#, no-wrap
msgid "public class CustomExpirationCachedAcmeServiceDiscovery extends CachingServiceDiscovery {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:143
#, no-wrap
msgid ""
"    private final String host;\n"
"    private final int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:145
#, no-wrap
msgid "    private AtomicBoolean invalidated = new AtomicBoolean();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:151
#, no-wrap
msgid ""
"    public CustomExpirationCachedAcmeServiceDiscovery(CachedAcmeConfiguration configuration) {\n"
"        super(configuration.getRefreshPeriod()); // (1)\n"
"        this.host = configuration.getHost();\n"
"        this.port = Integer.parseInt(configuration.getPort());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:159
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<List<ServiceInstance>> fetchNewServiceInstances(List<ServiceInstance> previousInstances) {\n"
"        // Retrieve services...\n"
"        DefaultServiceInstance instance =\n"
"                new DefaultServiceInstance(ServiceInstanceIds.next(), host, port, false);\n"
"        return Uni.createFrom().item(() -> Collections.singletonList(instance));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:164
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<List<ServiceInstance>> cache(Uni<List<ServiceInstance>> uni) {\n"
"        return uni.memoize().until(() -> invalidated.get());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:169
#, no-wrap
msgid ""
"    //command-based cache invalidation: user triggers the action to invalidate the cache.\n"
"    public void invalidate() {\n"
"        invalidated.set(true);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:171
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:174
msgid "You can check the https://github.com/smallrye/smallrye-stork/blob/main/service-discovery/kubernetes/src/main/java/io/smallrye/stork/servicediscovery/kubernetes/KubernetesServiceDiscovery.java[Kubernetes Service Discovery code] for further details about an event-based invalidation example."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:176
#, no-wrap
msgid "Observability"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:182
msgid "Observability refers to the ability to understand and gain insights into the internal workings and behaviors of a system through the analysis of its external outputs or observations. Stork becomes observable from the 3.6.0 release. This addition brings automated observability to the forefront of service discovery and selection providing a window into how Stork behaves in real-time. Now you can effortlessly monitor metrics such as service discovery and selection durations and error rates."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:185
msgid "If you're leveraging Stork within your Quarkus application, now, you can easily check and analyze metrics such as service discovery and selection response times and errors directly in Prometheus. Check the https://quarkus.io/version/main/guides/stork-reference#configure-stork-observability[Stork reference guide] for details."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:187
msgid "In conclusion, all these advancements in Stork signify our commitment to enhancing your experience with service discovery and selection."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-11-23-stork-latest-news.adoc:188
msgid "Stay tuned for more updates. Your feedback is invaluable to us so share it and contribute to making Stork even better."
msgstr ""
