# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-25 15:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:1
#, no-wrap
msgid "2023-09-25"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:1
#, no-wrap
msgid "Describe how you can implement a CRUD / RESTFul application using virtual threads and Quarkus."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:1
#, no-wrap
msgid "virtual-threads reactive crud database"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:1
#, no-wrap
msgid "Writing CRUD applications using virtual threads"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:12
msgid "Last week, we published a video demonstrating the creation of a CRUD application using virtual threads in Quarkus. It's as simple as adding the `@RunOnVirtualThread` annotation on your HTTP resource (or your controller class if you use the Spring compatibility layer)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:16
msgid "+++ <iframe style=\"margin-left: auto; margin-right: auto; display: block;\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sJ49s7ctpf8?si=XfBB10eabMzGQCKz\" title=\"Writing CRUD applications using virtual threads\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe> +++"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:18
msgid "This companion post explains how it works behind the scenes."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:19
#, no-wrap
msgid "The code"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:22
msgid "The application is a simple implementation of the https://todobackend.com/[Todo Backend].  The complete code of this post is available https://github.com/quarkusio/virtual-threads-demos/tree/main/crud-example[here]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:24
msgid "The important part is the https://github.com/quarkusio/virtual-threads-demos/blob/main/crud-example/src/main/java/org/acme/crud/TodoResource.java[TodoResource.java]:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:28
#, no-wrap
msgid "package org.acme.crud;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:31
#, no-wrap
msgid ""
"import io.quarkus.logging.Log;\n"
"import io.quarkus.panache.common.Sort;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:40
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.NonBlocking;\n"
"import io.smallrye.common.annotation.RunOnVirtualThread;\n"
"import jakarta.transaction.Transactional;\n"
"import jakarta.validation.Valid;\n"
"import jakarta.ws.rs.*;\n"
"import jakarta.ws.rs.core.Response;\n"
"import jakarta.ws.rs.core.Response.Status;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:45
#, no-wrap
msgid ""
"@Path(\"/api\")\n"
"@RunOnVirtualThread\n"
"public class TodoResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:52
#, no-wrap
msgid ""
"    /**\n"
"     * Just print on which thread the method is invoked.    \n"
"     */\n"
"    private void log() {\n"
"        Log.infof(\"Called on %s\", Thread.currentThread());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:58
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Todo> getAll() {\n"
"        log();\n"
"        return Todo.listAll(Sort.by(\"order\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:70
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Todo getOne(@PathParam(\"id\") Long id) {\n"
"        log();\n"
"        Todo entity = Todo.findById(id);\n"
"        if (entity == null) {\n"
"            throw new WebApplicationException(\"Todo with id of \" + id + \" does not exist.\", \n"
"                Status.NOT_FOUND);\n"
"        }\n"
"        return entity;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:78
#, no-wrap
msgid ""
"    @POST\n"
"    @Transactional\n"
"    public Response create(@Valid Todo item) {\n"
"        log();\n"
"        item.persist();\n"
"        return Response.status(Status.CREATED).entity(item).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:92
#, no-wrap
msgid ""
"    @PATCH\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public Response update(@Valid Todo todo, @PathParam(\"id\") Long id) {\n"
"        log();\n"
"        Todo entity = Todo.findById(id);\n"
"        entity.id = id;\n"
"        entity.completed = todo.completed;\n"
"        entity.order = todo.order;\n"
"        entity.title = todo.title;\n"
"        entity.url = todo.url;\n"
"        return Response.ok(entity).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:100
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Transactional\n"
"    public Response deleteCompleted() {\n"
"        log();\n"
"        Todo.deleteCompleted();\n"
"        return Response.noContent().build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:114
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Transactional\n"
"    @Path(\"/{id}\")\n"
"    public Response deleteOne(@PathParam(\"id\") Long id) {\n"
"        log();\n"
"        Todo entity = Todo.findById(id);\n"
"        if (entity == null) {\n"
"            throw new WebApplicationException(\"Todo with id of \" + id + \" does not exist.\", \n"
"                Status.NOT_FOUND);\n"
"        }\n"
"        entity.delete();\n"
"        return Response.noContent().build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:116
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:119
msgid "The application uses:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:121
msgid "RESTEasy Reactive - the recommended REST stack for Quarkus. It supports virtual threads."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:122
msgid "Hibernate Validation - to validate the Todos created by the user."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:123
msgid "Hibernate ORM with Panache - to interact with the database."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:124
msgid "The Argroal connection pool - to manage and recycle database connections."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:125
msgid "The Narayana transaction manager - to run our code inside transactions."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:126
msgid "The PostgreSQL driver - as we use a PostgreSQL database"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:130
msgid "The code is similar to a regular implementation of a CRUD service with Quarkus, except for https://github.com/quarkusio/virtual-threads-demos/blob/main/crud-example/src/main/java/org/acme/crud/TodoResource.java#L22[one line].  We added the `@RunOnVirtualThread` annotation on the resource class (line 17).  It instructs Quarkus to invoke these methods on virtual threads instead of regular platform threads (learn more about the difference in the https://quarkus.io/blog/virtual-thread-1/[previous blog post]), including `@Transactional` methods."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:132
msgid "### The threading model"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:137
msgid "As we have seen in the code, the development model is synchronous.  The interactions with the database uses blocking APIs: you wait for the replies.  That's where virtual thread introduces their magic.  Instead of blocking a platform thread, it only blocks the virtual threads:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:138
#, no-wrap
msgid "Threading model of the application"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:138
#, no-wrap
msgid "crud-database.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:143
msgid "Thus, when another request comes, the carrier thread can handle it.  It radically reduces the number of platform threads required when there are many concurrent requests.  As a result, the number of worker threads, generally used when using a synchronous and blocking development model, is not the bottleneck anymore."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:150
msgid "However, that's not because you use virtual threads that your application has no more concurrency limit.  There is a new bottleneck: the **database connection pool**.  When you interact with the database, you ask for a connection to the connection pool (Agroal in our case).  The number of connections is not infinite (20 by default).  Once all the connections are used, you must wait until another processing completes and releases its connection.  You can still handle many requests concurrently, but they will wait for database connections to be available, reducing the response time."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:152
msgid "### A note about pinning"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:155
msgid "As the https://quarkus.io/blog/virtual-thread-1/[previous blog post] described, pinning happens when the virtual thread cannot be unmounted from the carrier thread.  In this case, blocking the virtual thread also blocks the carrier thread:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:156
#, no-wrap
msgid "Pinning of the carrier thread"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:156
#, no-wrap
msgid "pinning.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:163
msgid "Fortunately, in this application, there is no pinning.  The PostgreSQL driver is one of the only JDBC drivers that does not pin.  If you plan to use another database, check first.  We will be discussing how to detect pinning in the next post.  Quarkus, Narayana and Hibernate have been patched to avoid the pinning."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:167
msgid "Pinning is one of many problems that can arise.  The application will suffer from the default object pooling mechanism used by Jackson.  Fortunately, we contributed an SPI to https://github.com/FasterXML/jackson-core/pull/1064[Jackson] that will allow us to remove this allocation hog."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:169
msgid "## Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:173
msgid "This post explains implementing a CRUD application using virtual threads in Quarkus.  You can now use an imperative development model without compromising the application's concurrency.  It's as simple as using RESTEasy Reactive and adding one annotation: `@RunOnVirtualThread` on your resource."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:176
msgid "We tailored Quarkus and upstream projects (such as Hibernate, Narayana, SmallRye Mutiny, etc.) to become virtual-thread-friendly.  As we will see in other posts, most Quarkus extensions are ready to be used with virtual threads."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:178
msgid "That said, while virtual threads increase the concurrency, you will likely hit other bottlenecks, such as the number of database connections managed in the pool."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:180
msgid "In the next post and video, we will see how to test our application and detect pinning."
msgstr ""
