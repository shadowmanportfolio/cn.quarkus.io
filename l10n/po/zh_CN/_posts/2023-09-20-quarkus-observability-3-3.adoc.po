# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-26 09:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:1
#, no-wrap
msgid "brunobat"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:1
#, no-wrap
msgid "2023-09-20"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:1
#, no-wrap
msgid "What has changed in Observability on Quarkus from version 3.0 to 3.3."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:1
#, no-wrap
msgid "observability micrometer opentelemetry metrics tracing"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:1
#, no-wrap
msgid "Observability in Quarkus 3"
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:10
#, no-wrap
msgid "Observability in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:14
msgid "Observability on a software system can be described as the capability to allow a human to ask and answer questions.  To enable developers and support engineers in understanding how their applications behave, Quarkus 3.3 includes many improvements to its main observability related extensions:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:16
msgid "https://quarkus.io/guides/opentelemetry[`quarkus-opentelemetry`] (tracing)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:17
msgid "https://quarkus.io/guides/telemetry-micrometer[`quarkus-micrometer`] (metrics)"
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:18
#, no-wrap
msgid "OpenTelemetry"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:21
msgid "https://opentelemetry.io/docs/concepts/signals/traces/[OpenTelemetry tracing] is used to understand the flow of requests as they traverse through multiple services."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:23
msgid "The `quarkus-opentelemetry` extension already had a major upgrade on https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.0#opentelemetry[Quarkus 3.0], where the configurations aligned with the ones used by the OpenTelemetry (OTel) community. This made available many configurations that were not previously available in Quarkus. Other improvements include:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:25
msgid "The OpenTelemetry extension can be used in dev mode and now reloads properly."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:26
msgid "OTel Service Provider Interface (SPI) hooks for Sampler and SpanExporter were made available along with the existing user implementations with CDI for many OTel classes: `IdGenerator`, Resource attributes, `Sampler` and `SpanProcessor`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:30
msgid "At the same time, the JDBC tracing activation was made simpler, just requiring the use of a property: ```[source, application.properties] quarkus.datasource.jdbc.telemetry=true ```"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:32
msgid "On https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3#opentelemetry-otel[Quarkus 3.3] many improvements were made to the `quarkus-opentelemetry` extension. The most impactful ones are"
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:33
#, no-wrap
msgid "Removal of the OkHttp dependency"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:36
msgid "In previous versions of the Quarkus exporter used the upstream OTel libraries and leveraged the OkHttp library to send the spans to the OTel Collector. This unnecessary dependency was removed and replaced by Quarkus specific Vert.x GRPC and HTTP clients. As previously, the exporter continues to be automatically wired with CDI, that’s why the `quarkus.otel.traces.exporter` property defaults to `cdi` on Quarkus 3+."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:37
#, no-wrap
msgid "Exporter support fot the HTTP protocol"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:44
msgid "Up until Quarkus 3.2, the OTel exporter could only use the GRPC protocol, while Quarkus now supports HTTP as well. To use the new HTTP protocol, the `quarkus.otel.exporter.otlp.traces.protocol` property must be set to `http/protobuf`. The `quarkus.otel.traces.exporter.endpoint` property must also be set to the OTel Collector HTTP endpoint. Here's an example when using 4318, the default HTTP port on the OTel Collector: ```[source, application.properties] quarkus.otel.exporter.otlp.traces.protocol=http/protobuf quarkus.otel.exporter.otlp.endpoint=http://localhost:4318 ```"
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:45
#, no-wrap
msgid "Exporters support TLS"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:48
msgid "Both GRPC and HTTP exporters now support Transport Layer Security (TLS) and custom certificates."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:53
msgid "Like the other rest clients in Quarkus, the exporter's certificate verification will also be disabled if you set: ```[source, application.properties] quarkus.tls.trust-all=true ```"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:56
msgid "This setting should not be used in production as it will disable any kind of SSL verification."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:58
#, no-wrap
msgid "Customise the propagation header"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:61
msgid "We added a way to customise the propagation header."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:63
msgid "You can create a CDI bean implementing the `TextMapPropagatorCustomizer` interface."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:65
msgid "This can be used to restrict propagation of OpenTelemetry trace headers and prevent potentially sensitive data to be sent to third party systems."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:80
#, no-wrap
msgid ""
"This is an example of a customizer that removes the Baggage header:\n"
"```[source, java]\n"
"@Singleton\n"
"public static class TestTextMapPropagatorCustomizer implements TextMapPropagatorCustomizer {\n"
"    @Override\n"
"    public TextMapPropagator customize(Context context) {\n"
"        TextMapPropagator propagator = context.propagator();\n"
"        if (propagator instanceof W3CBaggagePropagator) {\n"
"            return TextMapPropagator.noop();\n"
"        }\n"
"        return propagator;\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:81
#, no-wrap
msgid "Identify the user in the spans"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:88
msgid "Valuable debugging information about the user related to each span can be added by setting: ```[source, application.properties] quarkus.otel.traces.eusp.enabled=true ``` The user’s ID and roles will be added to the span attributes, if available."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:89
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:167
#, no-wrap
msgid "Hardening"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:92
msgid "Many bug fixes and small improvements were made to the extension, including:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:94
msgid "Reduce the memory allocation needed to report spans."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:95
msgid "Fix the `http.route` span attribute value in some cases."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:96
msgid "Properly report of the `service.name` value. The value can be set in 3 different properties, from higher to lower priority:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:97
msgid "`quarkus.otel.service.name`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:98
msgid "`quarkus.otel.resource.attributes`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:99
msgid "`quarkus.application.name`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:100
msgid "Exception's stack traces are now reported in the span attributes."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:101
#, no-wrap
msgid "OpenTelemetry upgrades."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:104
msgid "OTel moves fast! Since working on Quarkus 3.0 we have performed 7 version upgrades, moving `opentelemetry-java` from version 1.21.0 to 1.28.0."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:105
#, no-wrap
msgid "Micrometer"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:108
msgid "Metrics in Quarkus are based on the https://micrometer.io/[Micrometer library]. Data can be exported directly to Prometheus with the `quarkus-micrometer-registry-prometheus extension`. If you want to send data to an OTel Collector, you can use the https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/micrometer-registry-otlp.html[`quarkus-micrometer-registry-otlp`] Quarkiverse extension, among https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/index.html[other options]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:110
msgid "These were some of the recent improvements to the `quarkus-micrometer` extension:"
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:111
#, no-wrap
msgid "Netty allocator metrics"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:114
msgid "The extension will now provide Netty allocation metrics by default. Netty uses memory allocators to pool the memory buffers for reuse. These metrics will give you a deeper understanding of the memory usage of your application. Direct and Heap memory usage will be reported."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:119
msgid "To disable these metrics, please set: ```[source, application.properties] quarkus.micrometer.binder.netty.enabled=false ```"
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:120
#, no-wrap
msgid "Custom tags with HTTP server data"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:123
msgid "Customise emitted tags by creating a CDI bean implementing the `HttpServerMetricsTagsContributor` interface. This allows user code to compute arbitrary tags based on the details of HTTP requests. This is an implementation example were the `Foo` header value is used to set the `foo` tag."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:127
msgid "```[source, java] @Singleton public class HeaderTag implements HttpServerMetricsTagsContributor {"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:139
#, no-wrap
msgid ""
"    @Override\n"
"    public Tags contribute(Context context) {\n"
"        String headerValue = context.request().getHeader(\"Foo\");\n"
"        String value = \"UNSET\";\n"
"        if ((headerValue != null) && !headerValue.isEmpty()) {\n"
"            value = headerValue;\n"
"        }\n"
"        return Tags.of(\"foo\", value);\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:142
msgid "Only set tags with low cardinality values, meaning that the number of possible different values is low. For example, a tag with the HTTP method is a good candidate, but a tag with the HTTP full path is not."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:144
#, no-wrap
msgid "Use `MeterRegistryCustomizer` for arbitrary customizations to meter registries"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:148
msgid "By providing CDI beans that implement `io.quarkus.micrometer.runtime.MeterRegistryCustomizer`, the user code can change the configuration of any `MeterRegistry` that has been activated.  Unless an implementation is annotated with `@io.quarkus.micrometer.runtime.MeterRegistryCustomizerConstraint`, the customization applies to all `MeterRegistry` instances."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:164
#, no-wrap
msgid ""
"This is a method example with a customizer that sets the `foo` tag oo all metrics:\n"
"```[source, java]\n"
"@Produces\n"
"@Singleton\n"
"public MeterRegistryCustomizer customizeAllRegistries() {\n"
"    return new MeterRegistryCustomizer() {\n"
"        @Override\n"
"        public void customize(MeterRegistry registry) {\n"
"            registry.config()\n"
"                    .meterFilter(MeterFilter.commonTags(List.of(\n"
"                            Tag.of(\"foo\", \"foo-value\"))));\n"
"        }\n"
"    };\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:166
msgid "and emitted metrics by implementing `MeterRegistryCustomizer`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:170
msgid "Some small bug fixes and other features like:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:172
msgid "Auth failures will now populate the metrics URI tag."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:173
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-20-quarkus-observability-3-3.adoc:175
msgid "Quarkus observability extensions have now improved across the board. We currently recommend using OpenTelemetry for tracing and Micrometer for metrics and export all the data using OTel's OTLP protocol to the OpenTelemetry Collector. This will allow you to use the best of both worlds."
msgstr ""
