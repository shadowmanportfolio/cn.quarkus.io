# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-04 08:25+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "mkouba"
msgstr "mkouba"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "2023-07-10"
msgstr "2023-07-10"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "Quarkus 3.2 introduced an experimental feature to ease the testing of CDI components and mocking of their dependencies."
msgstr "Quarkus 3.2引入了一个实验性的功能，以简化CDI组件的测试和对其依赖关系的嘲弄。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "testing"
msgstr "检验"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "Explore a new way of testing CDI components in Quarkus"
msgstr "探索Quarkus中测试CDI组件的新方法"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:21
#, fuzzy
msgid "The Quarkus component model is built on top of CDI.  However, writing unit tests for beans without a running CDI container is often a tedious work.  Without the container services up and running, all the work has to be done manually.  First of all, no dependency injection is performed.  Furthermore, no events are fired and no observers are notified.  Also, interceptors are not applied.  In short, everything needs to be wired together by hand.  But Quarkus can do better, right? Of course, it can! Quarkus 3.2 introduced an experimental feature to ease the testing of CDI components and mocking of their dependencies.  It's a lightweight JUnit 5 extension that does not start a full Quarkus application but merely runs the services needed to make the testing a joyful experience."
msgstr "Quarkus组件模型是建立在CDI之上的。然而，在没有运行CDI容器的情况下，为Bean编写单元测试往往是一项乏味的工作。在没有容器服务运行的情况下，所有的工作都必须手动完成。首先，没有进行依赖性注入。此外，没有事件被触发，没有观察者被通知。另外，拦截器也没有被应用。简而言之，所有的东西都需要手工连接起来。但是Quarkus可以做得更好，对吗？当然，它可以!Quarkus 3.2引入了一个实验性的功能来简化CDI组件的测试和对其依赖关系的嘲弄。这是一个轻量级的JUnit 5扩展，它不会启动一个完整的Quarkus应用程序，而只是运行所需的服务，使测试成为一种快乐的体验。"

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:22
#, fuzzy, no-wrap
msgid "A simple example"
msgstr "一个简单的例子"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:25
#, fuzzy
msgid "First of all, add the `quarkus-junit5-component` module dependency to your project."
msgstr "首先，在你的项目中添加 `quarkus-junit5-component` 模块的依赖关系。"

#. type: Block title
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:27
#, fuzzy, no-wrap
msgid "Maven"
msgstr "雯雯"

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:36
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-component</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:39
#, fuzzy, no-wrap
msgid "Gradle"
msgstr "渐进式"

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:46
#, no-wrap
msgid ""
"dependencies {\n"
"    testImplementation(\"io.quarkus:quarkus-junit5-component\")\n"
"}\n"
msgstr ""

#. type: delimited block *
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:50
#, fuzzy
msgid "Now, imagine that we have a component `Foo` which is an `@ApplicationScoped` CDI bean."
msgstr "现在，想象一下，我们有一个组件 `Foo` ，这是一个 `@ApplicationScoped` CDI bean。"

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:54
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:57
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:60
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Foo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:63
#, no-wrap
msgid ""
"    @Inject\n"
"    Charlie charlie; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:66
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"bar\") <2>\n"
"    boolean bar; \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:71
#, no-wrap
msgid ""
"    public String ping() { <3>\n"
"        return bar ? charlie.ping() : \"nok\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:74
#, fuzzy
msgid "<1>\t`Foo` depends on `Charlie` which declares a method `ping()`.  <2>\t`Foo` depends on the config property `bar`."
msgstr "  `Foo` 依赖于 ，它声明了一个方法 。<2> 依赖于配置属性 。 `Charlie` `ping()` `Foo` `bar`  "

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:75
#, fuzzy
msgid "The goal is to test this method which makes use of the `Charlie` dependency and the `bar` config property."
msgstr "我们的目标是测试这个方法，它利用了 `Charlie` 依赖关系和 `bar` 配置属性。"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:77
#, fuzzy
msgid "Then, a simple component test looks like this:"
msgstr "然后，一个简单的组件测试看起来像这样："

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:81
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:156
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:190
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:232
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:88
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.TestConfigProperty;\n"
"import io.quarkus.test.component.QuarkusComponentTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:92
#, no-wrap
msgid ""
"@QuarkusComponentTest <1>\n"
"@TestConfigProperty(key = \"bar\", value = \"true\") <2>\n"
"public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:95
#, no-wrap
msgid ""
"    @Inject\n"
"    Foo foo; <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:98
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Charlie charlieMock; <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:105
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        Mockito.when(charlieMock.ping()).thenReturn(\"OK\"); <5>\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:107
#, fuzzy
msgid "`@QuarkusComponentTest` registers the `QuarkusComponentTestExtension` that does all the heavy lifting under the hood."
msgstr " `@QuarkusComponentTest` 注册送彩金不限ip链接 ，在引擎盖下做所有的重活。 `QuarkusComponentTestExtension` "

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:108
#, fuzzy
msgid "`@TestConfigProperty` is used to set the value of a configuration property for the test."
msgstr " `@TestConfigProperty` 是用来设置测试的配置属性值的。"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:109
#, fuzzy
msgid "The test injects the tested component. The types of all fields annotated with `@Inject` are considered the component types under test."
msgstr "该测试注入被测试的组件。所有用 `@Inject` 注释的字段的类型都被认为是被测试的组件类型。"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:110
#, fuzzy
msgid "The test also injects a mock of `Charlie`, a dependency for which a `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "该测试还注入了一个 `Charlie` 的模拟，这个依赖关系中的 `@Singleton` bean是自动注册的。注入的引用是一个 \"未配置的 \"Mockito模拟。"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:111
#, fuzzy
msgid "The Mockito API is used to configure the behavior of the injected mock."
msgstr "Mockito的API被用来配置注入的模拟的行为。"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:115
#, fuzzy
msgid "In this particular test, the only \"real\" component under the test is `org.acme.Foo`.  The `Charlie` dependency is a mock that is created automatically.  And the value of the `bar` configuration property is set with the `@TestConfigProperty` annotation."
msgstr "在这个特定的测试中，唯一被测试的 \"真实 \"组件是 `org.acme.Foo` 。 `Charlie` 依赖关系是一个自动创建的模拟。而 `bar` 配置属性的值是通过 `@TestConfigProperty` 注释设置的。"

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:116
#, fuzzy, no-wrap
msgid "How does it work?"
msgstr "它是如何工作的？"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:124
#, fuzzy
msgid "The `QuarkusComponentTestExtension` does several things during the `before all` test phase.  It starts ArC - the CDI container in Quarkus.  It also registers a dedicated configuration object.  The container is then stopped and the config is released during the `after all` test phase.  The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.  Finally, the CDI request context is activated and terminated per each test method."
msgstr " `QuarkusComponentTestExtension` 在 `before all` 测试阶段做了几件事。它启动ArC - Quarkus中的CDI容器。它还注册了一个专门的配置对象。然后在 `after all` 测试阶段，容器被停止，配置被释放。用 `@Inject` 和 `@InjectMock` 注释的字段在测试实例被创建后被注入。最后，CDI请求上下文被激活并按每个测试方法终止。"

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:125
#, fuzzy, no-wrap
msgid "Tested components"
msgstr "经过测试的组件"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:130
#, fuzzy
msgid "By default, the types of all fields annotated with `@Inject` are considered component types.  However, you can also specify additional test components: either with the `@QuarkusComponentTest#value()` or programmatically as the arguments of the <<advanced_features,`QuarkusComponentTestExtension(Class<?>...)`>> constructor.  Finally, the static nested classes declared on the test class are components too."
msgstr "默认情况下，所有用 `@Inject` 注释的字段的类型都被视为组件类型。然而，你也可以指定额外的测试组件：要么用 `@QuarkusComponentTest#value()` ，要么以编程方式作为 link:#advanced_features[`QuarkusComponentTestExtension(Class<?>…)`] 构造函数的参数。最后，在测试类上声明的静态嵌套类也是组件。"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:132
#, fuzzy
msgid "Static nested classed declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a regular `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr " `@QuarkusComponentTest` 当运行常规的 `@QuarkusTest` ，在测试类上声明的静态嵌套类被排除在Bean发现之外，以防止无意中的CDI冲突。"

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:133
#, fuzzy, no-wrap
msgid "Automatic mocking of unsatisfied dependencies"
msgstr "对不满足的依赖关系进行自动嘲弄"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:140
#, fuzzy
msgid "Unlike in regular CDI environments, the test does not fail if a component injects an unsatisfied dependency.  Instead, a mock bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.  The mock bean has the `@Singleton` scope so it’s shared across all injection points with the same required type and qualifiers.  And the injected reference is an unconfigured Mockito mock.  This mock can be injected in the test with `@io.quarkus.test.InjectMock` and configured with the Mockito API."
msgstr "与常规的CDI环境不同，如果一个组件注入了一个不满意的依赖关系，测试不会失败。相反，一个模拟Bean会被自动注册，以满足注入点的每一个所需类型和限定条件的组合，并解析为一个不满足的依赖关系。模拟Bean有 `@Singleton` 范围，所以它在所有具有相同要求类型和限定符的注入点中共享。而注入的引用是一个未配置的Mockito mock。这个模拟可以通过 `@io.quarkus.test.InjectMock` ，并通过Mockito API进行配置，注入到测试中。"

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:141
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "配置"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:146
#, fuzzy
msgid "A dedicated `SmallRyeConfig` is registered during the `before all` test phase.  It’s possible to set the configuration properties with the `@TestConfigProperty` annotation or programmatically with the `QuarkusComponentTestExtension#configProperty(String, String)` method.  If you need to use the default values for missing config properties, then `@QuarkusComponentTest#useDefaultConfigProperties()` and `QuarkusComponentTestExtension#useDefaultConfigProperties()` might come in useful."
msgstr "一个专门的 `SmallRyeConfig` ，在 `before all` 测试阶段被注册。可以用 `@TestConfigProperty` 注解来设置配置属性，也可以用 `QuarkusComponentTestExtension#configProperty(String, String)` 方法来编程。如果你需要使用缺失的配置属性的默认值，那么 `@QuarkusComponentTest#useDefaultConfigProperties()` 和 `QuarkusComponentTestExtension#useDefaultConfigProperties()` 可能会有用。"

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:148
#, fuzzy, no-wrap
msgid "Advanced features"
msgstr "高级功能"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:152
#, fuzzy
msgid "It is possible to configure the `QuarkusComponentTestExtension` programatically.  The simple example above could be rewritten like:"
msgstr "可以通过程序配置 `QuarkusComponentTestExtension` 。上面的简单例子可以改写成这样："

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:162
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.QuarkusComponentTestExtension;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:164
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:199
#, no-wrap
msgid "public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:168
#, no-wrap
msgid ""
"    @RegisterExtension <1>\n"
"    static final QuarkusComponentTestExtension extension = new QuarkusComponentTestExtension()\n"
"            .configProperty(\"bar\",\"true\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:171
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:211
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:242
#, no-wrap
msgid ""
"    @Inject\n"
"    Foo foo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:174
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Charlie charlieMock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:181
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        Mockito.when(charlieMock.ping()).thenReturn(\"OK\");\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:183
#, fuzzy
msgid "Annotate a `static` field of type `QuarkusComponentTestExtension` with the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr " `QuarkusComponentTestExtension` 用 `@RegisterExtension` 注释来注释一个 `static` 类型的字段，并以编程方式配置扩展。"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:186
msgid "Sometimes you need full control over the bean attributes and maybe even configure the default behavior of a mocked dependency.  In this case, the mock configurator API and the `QuarkusComponentTestExtension#mock()` method is the right choice."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:197
#, no-wrap
msgid ""
"import jakarta.enterprise.context.Dependent;\n"
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.QuarkusComponentTestExtension;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:208
#, no-wrap
msgid ""
"    @RegisterExtension \n"
"    static final QuarkusComponentTestExtension extension = new QuarkusComponentTestExtension()\n"
"            .configProperty(\"bar\",\"true\")\n"
"            .mock(Charlie.class)\n"
"                .scope(Dependent.class) <1>\n"
"                .createMockitoMock(mock -> {\n"
"                    Mockito.when(mock.pong()).thenReturn(\"BAR\"); <2>\n"
"                });\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:217
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        assertEquals(\"BAR\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:219
msgid "The scope of the mocked bean is `@Dependent`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:220
msgid "Configure the default behavior of the mock."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:221
#, no-wrap
msgid "Mocking CDI interceptors"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:224
msgid "This feature is only available in Quarkus 3.3+."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:228
msgid "If a tested component class declares an interceptor binding then you might need to mock the interception too.  You can define a mock interceptor class as a static nested class of the test class.  This interceptor class is then automatically discovered"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:236
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.component.QuarkusComponentTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:239
#, no-wrap
msgid ""
"@QuarkusComponentTest\n"
"public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:247
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:250
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    static class Foo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:255
#, no-wrap
msgid ""
"       @SimpleBinding <1>\n"
"       String ping() {\n"
"         return \"ok\";\n"
"       }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:257
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:261
#, no-wrap
msgid ""
"    @SimpleBinding\n"
"    @Interceptor\n"
"    static class SimpleMockInterceptor {  <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:266
#, no-wrap
msgid ""
"        @AroundInvoke\n"
"        Object aroundInvoke(InvocationContext context) throws Exception {\n"
"            return context.proceed().toString().toUpperCase();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:269
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:271
msgid "`@SimpleBinding` is an interceptor binding."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:272
msgid "The interceptor class is automatically considered a tested component and therefore used during the test execution."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:273
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:275
msgid "In this article, we discussed the possibilities of a new way of testing CDI components in a Quarkus application."
msgstr ""

#, fuzzy
#~ msgid "By default, a new test instance is created for each test method. Therefore, a new CDI container is started for each test method. However, if the test class is annotated with `@org.junit.jupiter.api.TestInstance` and the test instance lifecycle is set to `org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS` then the CDI container will be shared across all test method executions of a given test class."
#~ msgstr "默认情况下，每个测试方法都会创建一个新的测试实例。因此，每个测试方法都会启动一个新的CDI容器。然而，如果测试类被注释为 `@org.junit.jupiter.api.TestInstance` ，并且测试实例的生命周期被设置为 `org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS` ，那么CDI容器将在给定测试类的所有测试方法执行中被共享。"
