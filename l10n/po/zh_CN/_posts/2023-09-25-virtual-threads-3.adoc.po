# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-02 08:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:1
#, no-wrap
msgid "2023-10-02"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:1
#, no-wrap
msgid "How to detect pinning while running tests."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:1
#, no-wrap
msgid "virtual threads, reactive, test"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:1
#, no-wrap
msgid "Testing virtual thread applications"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:13
msgid "https://quarkus.io/blog/virtual-threads-2/[In a previous post], we have seen how to implement a CRUD application using virtual threads in Quarkus.  The following video shows how to test this application and, specifically, how to detect pinning."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:17
msgid "+++ <iframestyle=\"margin-left: auto; margin-right: auto; display: block;\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GOHAEh3Ujh8?si=t8n8jLek0X7JC4MR\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe> +++"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:19
msgid "The complete code of the application and the tests are available in the https://github.com/quarkusio/virtual-threads-demos/tree/main/crud-example[virtual threads demos repository]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:21
msgid "## Pinning and Monopolization"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:25
msgid "Virtual threads combine an imperative development model with a reactive execution mode.  It may provide a simple way to increase the concurrency of an application.  However, this might not always be the case."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:29
msgid "As described in https://quarkus.io/blog/virtual-thread-1/[another blog post], there are a few limitations, including monopolizing and pinning carrier threads.  When this happens, the application's performance can drastically decrease and increase memory usage.  Pinning for a short period can be tolerated, but it can be dramatic under load."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:31
msgid "While, at the moment, there are no reliable ways to detect monopolization, there are mechanisms to detect pinning."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:33
msgid "## Printing stack traces when a carrier thread gets pinned"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:38
msgid "Suppose you have your application, and your code base contains tests.  You can configure Surefire (or the plugin you use to execute your tests) to dump a stack trace as soon as a virtual thread is going to pin the carrier thread (instead of being unmounted smoothly).  You must set the `jdk.tracePinnedThreads` system property to achieve this.  For the Surefire Maven plugin, add the `argLine` parameter to the configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:42
#, no-wrap
msgid "<argLine>-Djdk.tracePinnedThreads</argLine>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:45
msgid "With this configuration, when, while running your test, a carrier thread is pinned, the stack trace is dumped in the console:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:64
#, no-wrap
msgid ""
"2023-09-15 07:51:18,312 INFO  [org.acm.cru.TodoResource] (quarkus-virtual-thread-0) Called on VirtualThread[#140,quarkus-virtual-thread-0]/runnable@ForkJoinPool-1-worker-1\n"
"Thread[#141,ForkJoinPool-1-worker-1,5,CarrierThreads]\n"
"    java.base/java.lang.VirtualThread$VThreadContinuation.onPinned(VirtualThread.java:185)\n"
"    java.base/jdk.internal.vm.Continuation.onPinned0(Continuation.java:393)\n"
"    java.base/java.lang.VirtualThread.parkNanos(VirtualThread.java:631)\n"
"    java.base/java.lang.VirtualThread.sleepNanos(VirtualThread.java:803)\n"
"    java.base/java.lang.Thread.sleep(Thread.java:507)\n"
"    org.acme.crud.TodoResource.pinTheCarrierThread(TodoResource.java:93) <== monitors:1\n"
"    org.acme.crud.TodoResource.getAll(TodoResource.java:32)\n"
"    org.acme.crud.TodoResource$quarkusrestinvoker$getAll_0e9c86666ef01bafda5560c4bf86952c6cf09993.invoke(Unknown Source)\n"
"    org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)\n"
"    io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:141)\n"
"    org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\n"
"    io.quarkus.virtual.threads.ContextPreservingExecutorService$1.run(ContextPreservingExecutorService.java:36)\n"
"    java.base/java.util.concurrent.ThreadPerTaskExecutor$TaskRunner.run(ThreadPerTaskExecutor.java:314)\n"
"    java.base/java.lang.VirtualThread.run(VirtualThread.java:311)\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:70
msgid "Analyzing the application logs will tell you whether your application is pinning.  Furthermore, a closer look at the stack trace will give you the reason.  In our example, the `pinTheCarrierThread` method is taking a lock.  This is indicated by the `monitors:1` text:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:74
#, no-wrap
msgid "    org.acme.crud.TodoResource.pinTheCarrierThread(TodoResource.java:93) <== monitors:1\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:78
msgid "This approach can also be used in production (so, not only in tests).  You can also determine how long the carrier thread was blocked by correlating the pinned stack trace with other log events (like what happened just after in the same thread)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:80
msgid "## Failing tests"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:84
msgid "Dumping the stack trace may not be very convenient when your logs are already long.  Fortunately, we released a small Junit 5 extension that allows you to fail the tests when pinning is detected.  It's advantageous when you integrate a third-party library, and you need to know how virtual-thread-friendly it is (to decide between regular worker threads and virtual threads)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:87
msgid "The loom-unit Junit5 extension is currently a separated project.  We are integrating it into the Quarkus test framework (under the `junit5-virtual-threads` name), so some of the steps mentioned below won't be necessary anymore or will be changed slightly."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:89
msgid "To use this extension, make sure you have the loom-unit extension in your project:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:98
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>me.escoffier.loom</groupId> <!-- Will become io.quarkus.junit5 -->\n"
"    <artifactId>loom-unit</artifactId>   <!-- Will become junit5-virtual-threads -->\n"
"    <version>0.3.0</version>             <!-- Will become unnecessary --> \n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:101
msgid "Then, in your test, use `@ExtendWith` to enable the extension:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:111
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n"
"@ExtendWith(LoomUnitExtension.class) // <--- Enable the extension (will become @VirtualThreadUnit)\n"
"@ShouldNotPin  // <--- Detect pinning\n"
"class TodoResourceTest {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:115
msgid "Finally, use the `@ShouldNotPin` annotation to indicate to fail the test if any of the methods of the test case pins the carrier thread.  You can also use the `@ShouldNotPin` annotation on methods."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:118
msgid "If, during the execution of a test, a pinning event is captured, the test fails.  The stack trace of the event is attached to the test failure:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:141
#, no-wrap
msgid ""
"java.lang.AssertionError: The test testInitialItems() was expected to NOT pin the carrier thread, but we collected 1 event(s)\n"
"* Pinning event captured: \n"
"\tjava.lang.VirtualThread.parkOnCarrierThread(java.lang.VirtualThread.java:687)\n"
"\tjava.lang.VirtualThread.parkNanos(java.lang.VirtualThread.java:646)\n"
"\tjava.lang.VirtualThread.sleepNanos(java.lang.VirtualThread.java:803)\n"
"\tjava.lang.Thread.sleep(java.lang.Thread.java:507)\n"
"\torg.acme.crud.TodoResource.pinTheCarrierThread(org.acme.crud.TodoResource.java:93)\n"
"\torg.acme.crud.TodoResource.getAll(org.acme.crud.TodoResource.java:32)\n"
"\torg.acme.crud.TodoResource$quarkusrestinvoker$getAll_0e9c86666ef01bafda5560c4bf86952c6cf09993.invoke(org.acme.crud.TodoResource$quarkusrestinvoker$getAll_0e9c86666ef01bafda5560c4bf86952c6cf09993.java:-1)\n"
"\torg.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(org.jboss.resteasy.reactive.server.handlers.InvocationHandler.java:29)\n"
"\tio.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.java:141)\n"
"\torg.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.java:147)\n"
"\tio.quarkus.virtual.threads.ContextPreservingExecutorService$1.run(io.quarkus.virtual.threads.ContextPreservingExecutorService$1.java:36)\n"
"\tjava.util.concurrent.ThreadPerTaskExecutor$TaskRunner.run(java.util.concurrent.ThreadPerTaskExecutor$TaskRunner.java:314)\n"
"\tjava.lang.VirtualThread.runWith(java.lang.VirtualThread.java:341)\n"
"\tjava.lang.VirtualThread.run(java.lang.VirtualThread.java:311)\n"
"\tjava.lang.VirtualThread$VThreadContinuation$1.run(java.lang.VirtualThread$VThreadContinuation$1.java:192)\n"
"\tjdk.internal.vm.Continuation.enter0(jdk.internal.vm.Continuation.java:320)\n"
"\tjdk.internal.vm.Continuation.enter(jdk.internal.vm.Continuation.java:312)\n"
"\tjdk.internal.vm.Continuation.enterSpecial(jdk.internal.vm.Continuation.java:-1)\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:144
msgid "Find more about the loom-unit extension on https://github.com/cescoffier/loom-unit[the project repository] or its https://github.com/quarkusio/quarkus/tree/main/independent-projects/junit5-virtual-threads[Quarkus sibling]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:146
msgid "## Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-09-25-virtual-threads-3.adoc:151
msgid "This blog explains how you can detect pinning events while running your tests.  First, you can dump the stack trace in the log.  Second, you can use the `@ShouldNotPin` annotation to fail the tests if a pinning event is captured.  Thanks to this https://github.com/quarkusio/quarkus/pull/35992[PR], the loom-unit extension will be integrated into the `@QuarkusTest` to provide a simpler developer experience.  It will be part of Quarkus in the next release (3.5.x)."
msgstr ""
