# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-26 15:23+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:1
#, fuzzy, no-wrap
msgid "karm"
msgstr "业力"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:1
#, fuzzy, no-wrap
msgid "2023-06-26"
msgstr "2023-06-26"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:1
#, fuzzy, no-wrap
msgid "development-tips windows"
msgstr "开发-提示窗口"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:1
#, fuzzy, no-wrap
msgid "Podman for Windows"
msgstr "用于Windows的Podman"

#. type: Title =
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:10
#, fuzzy, no-wrap
msgid "Quarkus Native with Podman for Windows"
msgstr "Quarkus Native与Podman for Windows"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:12
#, fuzzy, no-wrap
msgid "Quarkus and Podman"
msgstr "夸库斯和波德曼"

#. type: Target for macro image
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:12
#, no-wrap
msgid "quarkus-podman-790x103.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:19
#, fuzzy
msgid "Developers who use Windows workstations might face the challenge of running Linux-native workflows.  One way to achieve this is by using Podman, a container engine that provides a command line capability to run Linux containers. Podman supports running containers both as \"rootful\" and as \"rootless\", with the latter being the default that doesn't require elevated privileges. In this blog post, we'll explore how to use Podman with Quarkus Native to build and run applications on Windows."
msgstr "使用Windows工作站的开发者可能会面临运行Linux原生工作流的挑战。实现这一目标的方法之一是使用Podman，这是一个容器引擎，提供运行Linux容器的命令行功能。Podman支持以 \"有根 \"和 \"无根 \"两种方式运行容器，而后者是默认的，不需要提升权限。在这篇博文中，我们将探讨如何使用Podman和Quarkus Native在Windows上构建和运行应用程序。"

#. type: Title ==
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:20
#, fuzzy, no-wrap
msgid "Installing Podman on Windows"
msgstr "在Windows上安装Podman"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:28
#, fuzzy
msgid "In my latest experience, I used two setups, a Windows 10 on an older baremetal Xeon based desktop and a Windows 10 Qemu driven VM on my CentOS 8 Stream Linux laptop. The former being without any hiccups using https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md[Podman for Windows] guide while the latter required some link:/assets/examples/posts/podman-for-windows/win10.xml.txt[manual tweaks] in `+/etc/libvirt/qemu/win10.xml+` to allow for nested virtualization.  Your mileage might vary with guest Windows and hypervisor versions though."
msgstr "在我最近的经历中，我使用了两种设置，一种是在老式裸机Xeon桌面上的Windows 10，另一种是在我的CentOS 8 Stream Linux笔记本电脑上的Windows 10 Qemu驱动的虚拟机。前者使用 link:https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md[Windows] 指南 link:https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md[的Podman] 没有任何障碍，而后者则需要在 `/etc/libvirt/qemu/win10.xml` 中进行一些 link:/assets/examples/posts/podman-for-windows/win10.xml.txt[手动调整] ，以允许嵌套虚拟化。不过，你的里程可能因客人的Windows和管理程序版本而异。"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:31
#, fuzzy
msgid "Besides the command line, there is also a full Podman Desktop experience available on https://podman-desktop.io/.  The installer checks your setup and guides you:"
msgstr "除了命令行，还有一个完整的Podman桌面体验，可在 https://podman-desktop.io/ 安装程序会检查你的设置并指导你："

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:32
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:98
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:122
#, fuzzy, no-wrap
msgid "Podman Desktop"
msgstr "波德曼桌面"

#. type: Target for macro image
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:32
#, no-wrap
msgid "podman-desktop-790x623.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:34
#, fuzzy, no-wrap
msgid "Quarkus Native builder image"
msgstr "Quarkus Native builder形象"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:38
#, fuzzy
msgid "Both the latest Quarkus 2 and Quarkus 3 autodetects whether either Podman or Docker is installed, and it uses it to run containers."
msgstr "最新的Quarkus 2和Quarkus 3都能自动检测是否安装了Podman或Docker，并使用它来运行容器。"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:43
#, fuzzy
msgid "We will use a QuickStart example that watermarks images. The example depends on Quarkus AWT extension that is not yet ported to run natively on Windows, yet we use a Windows workstation to develop our Java code, so using a Linux container to do the native build suits us well. We use https://github.com/cmderdev/cmder[cmder] terminal on Windows, but a plain cmd prompt would do too."
msgstr "我们将使用一个给图像加水印的QuickStart例子。这个例子依赖于Quarkus AWT扩展，该扩展还没有被移植到Windows上运行，但我们使用Windows工作站来开发我们的Java代码，所以使用Linux容器来进行本地构建很适合我们。我们在Windows上使用 link:https://github.com/cmderdev/cmder[cmder] 终端，但普通的cmd提示符也可以。"

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:50
#, no-wrap
msgid ""
"C:\\tmp\n"
"λ git clone https://github.com/quarkusio/quarkus-quickstarts.git\n"
"λ cd quarkus-quickstarts\\awt-graphics-rest-quickstart\n"
"λ git checkout development\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:53
#, fuzzy
msgid "Depending on your Podman installation, you might need to run `+podman machine start+` too.  link:/assets/examples/posts/podman-for-windows/podman-win-output-sdasff.txt[Podman output]."
msgstr "根据你的Podman安装，你可能也需要运行 `podman machine start` 。 link:/assets/examples/posts/podman-for-windows/podman-win-output-sdasff.txt[Podman输出] 。"

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:56
#, no-wrap
msgid ""
"C:\\tmp\\quarkus-quickstarts\\awt-graphics-rest-quickstart (development -> origin)\n"
"λ mvnw package -Dnative -Dquarkus.native.container-build=true -Dquarkus.platform.version=3.1.2.Final\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:58
#, fuzzy
msgid "link:/assets/examples/posts/podman-for-windows/podman-win-awt-quickstart-build.txt[Full output]"
msgstr "link:/assets/examples/posts/podman-for-windows/podman-win-awt-quickstart-build.txt[全面输出]"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:63
#, fuzzy
msgid "We can see in the log that Quarkus detected that we had `+podman.exe+` available, and it used Mandrel builder image to do the build, i.e. our Java bytecode alongside with various resources and properties was made available inside a Linux container where a `+native-image+` tool created an ELF64 Linux executable. We can see that artifact right in our `+target+` directory now:"
msgstr "我们可以在日志中看到Quarkus检测到我们有 `podman.exe` ，它使用Mandrel builder image来进行构建，也就是说，我们的Java字节码以及各种资源和属性在一个Linux容器中是可用的， `native-image` 工具创建了一个ELF64 Linux可执行文件。我们现在可以在我们的 `target` 目录中看到这个工件："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:70
#, no-wrap
msgid ""
"λ file target\\awt-graphics-rest-quickstart-1.0.0-SNAPSHOT-runner\n"
"target\\awt-graphics-rest-quickstart-1.0.0-SNAPSHOT-runner: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),\n"
"  dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0,\n"
"  BuildID[sha1]=20820fdafc19e803147d91fbba6823ad45024041, not stripped\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:74
#, fuzzy
msgid "We cannot run the executable here on our Windows workstation, yet we can immediately use another Linux image to run it in a container:"
msgstr "我们不能在这里的Windows工作站上运行这个可执行文件，然而我们可以立即使用另一个Linux镜像在容器中运行它："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:78
#, no-wrap
msgid "λ podman build -f src/main/docker/Dockerfile.native -t quarkus/awt-graphics-rest .\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:81
#, fuzzy
msgid "link:/assets/examples/posts/podman-for-windows/podman-win-container-build.txt[Full output]"
msgstr "link:/assets/examples/posts/podman-for-windows/podman-win-container-build.txt[全面输出]"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:83
#, fuzzy
msgid "Let’s run it:"
msgstr "让我们来运行它："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:94
#, no-wrap
msgid ""
"C:\\tmp\\quarkus-quickstarts\\awt-graphics-rest-quickstart (development -> origin)\n"
"λ podman run -i --rm -p 8080:8080 quarkus/awt-graphics-rest\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2023-06-22 15:53:03,890 INFO  [io.quarkus] (main) awt-graphics-rest-quickstart 1.0.0-SNAPSHOT native (powered by Quarkus 3.1.2.Final) started in 0.169s. Listening on: http://0.0.0.0:8080\n"
"2023-06-22 15:53:03,890 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2023-06-22 15:53:03,890 INFO  [io.quarkus] (main) Installed features: [awt, cdi, resteasy, resteasy-multipart, smallrye-context-propagation, vertx]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:97
#, fuzzy
msgid "We can have the application watermark an image for us now. First, we need some image to watermark:"
msgstr "我们现在可以让应用程序为我们的图像加水印。首先，我们需要一些图像来做水印："

#. type: Target for macro image
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:98
#, no-wrap
msgid "orig-790x230.png"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:104
#, no-wrap
msgid ""
"C:\\tmp\n"
"λ curl https://quarkus.io/assets/images/posts/podman-for-windows/orig-790x230.png --output C:/tmp/example.png\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:107
#, fuzzy
msgid "Next, we use our locally running container to watermark it:"
msgstr "接下来，我们用我们本地运行的容器来做水印："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:112
#, no-wrap
msgid ""
"C:\\tmp\n"
"λ curl -F \"image=@C:/tmp/example.png\" http://localhost:8080/watermark --output C:/tmp/result.png\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:115
#, fuzzy
msgid "And see the result, word Mandrel in the top left corner and a Quarkus logotype in the bottom right corner:"
msgstr "请看结果，左上角有Mandrel字样，右下角有Quarkus标识："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:120
#, no-wrap
msgid ""
"C:\\tmp\n"
"λ mspaint.exe C:/tmp/result.png\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:122
#, no-wrap
msgid "result-790x230.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:124
#, fuzzy, no-wrap
msgid "Linux containers in your test flow"
msgstr "在你的测试流程中使用Linux容器"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:127
#, fuzzy
msgid "You can use Podman to run your tests in Linux containers too. For example, you can take advantage of the `+quarkus-container-image-docker+` extension. Add it to the `+pom.xml+`:"
msgstr "你也可以使用Podman在Linux容器中运行你的测试。例如，你可以利用 `quarkus-container-image-docker` 扩展。将其添加到 `pom.xml` ："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:142
#, no-wrap
msgid ""
"...\n"
"     <artifactId>quarkus-junit5</artifactId>\n"
"     <scope>test</scope>\n"
"   </dependency>\n"
"+  <dependency>\n"
"+    <groupId>io.quarkus</groupId>\n"
"+    <artifactId>quarkus-container-image-docker</artifactId>\n"
"+  </dependency>\n"
"   <dependency>\n"
"     <groupId>io.rest-assured</groupId>\n"
"     <artifactId>rest-assured</artifactId>\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:145
#, fuzzy
msgid "Let's run it:"
msgstr "让我们来运行它："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:149
#, no-wrap
msgid "λ mvnw verify -Ddocker -Dnative -Dquarkus.native.container-build=true -Dquarkus.container-image.build=true -Dquarkus.platform.version=3.1.2.Final\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:152
#, fuzzy
msgid "Here is the link:/assets/examples/posts/podman-for-windows/podman-win-test-in-linux-container.txt[Full output]."
msgstr "这里是 link:/assets/examples/posts/podman-for-windows/podman-win-test-in-linux-container.txt[完整的输出] 。"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:154
#, fuzzy
msgid "Browsing the log, we can see that the JVM based test passed first:"
msgstr "浏览日志，我们可以看到，基于JVM的测试首先通过："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:161
#, no-wrap
msgid ""
"...\n"
"[INFO] Running org.acme.awt.rest.ImageResourceTest\n"
"INFO  [io.quarkus] (main) awt-graphics-rest-quickstart 1.0.0-SNAPSHOT on JVM\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:164
#, fuzzy
msgid "Then the Linux builder image is used to build a Linux executable:"
msgstr "然后使用Linux构建器图像来构建一个Linux可执行文件："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:173
#, no-wrap
msgid ""
"...\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildContainerRunner] Using podman to run the native image builder\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildContainerRunner] Checking image status quay.io/quarkus/ubi-quarkus-mandrel-builder-image:22.3-java17\n"
"...\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] podman run...\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:176
#, fuzzy
msgid "Next we can see that the integration testsuite decided to build a Linux container image with our newly built executable in it:"
msgstr "接下来我们可以看到，集成测试工具决定建立一个Linux容器镜像，其中有我们新建立的可执行文件："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:183
#, no-wrap
msgid ""
"...\n"
"[INFO] [io.quarkus.container.image.docker.deployment.DockerProcessor] Starting (local) container image build for native binary using docker.\n"
"[INFO] [io.quarkus.container.image.docker.deployment.DockerProcessor] Executing the following command to build docker image: 'podman build -f C:\\tmp\\quarkus-quickstarts\\awt-graphics-rest-quickstart\\src\\main\\docker\\Dockerfile.native -t karm/awt-graphics-rest-quickstart:1.0.0-SNAPSHOT C:\\tmp\\quarkus-quickstarts\\awt-graphics-rest-quickstart'\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:186
#, fuzzy
msgid "Finally, the integration testsuite starts the application in a container and runs the tests against it:"
msgstr "最后，集成测试套件在一个容器中启动应用程序，并针对它运行测试："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:193
#, no-wrap
msgid ""
"...\n"
"[INFO] Running org.acme.awt.rest.ImageResourceIT\n"
" INFO  [io.qua.tes.com.DefaultDockerContainerLauncher] (main) Executing \"podman run...\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:196
#, fuzzy
msgid "We can check in the preserved `+target/quarkus.log+` that the application was indeed ran in a Linux container as a native executable:"
msgstr "我们可以在保留的 `target/quarkus.log` ，应用程序确实是作为一个本地可执行文件在Linux容器中运行："

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:200
#, no-wrap
msgid "λ type target\\quarkus.log\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:208
#, no-wrap
msgid ""
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2023-06-22 21:41:27,637 INFO  [io.quarkus] (main) awt-graphics-rest-quickstart 1.0.0-SNAPSHOT native (powered by Quarkus 3.1.2.Final) started in 0.062s. Listening on: http://0.0.0.0:8081\n"
"2023-06-22 21:41:27,637 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2023-06-22 21:41:27,637 INFO  [io.quarkus] (main) Installed features: [awt, cdi, resteasy, resteasy-multipart, smallrye-context-propagation, vertx]\n"
"2023-06-22 21:41:30,264 INFO  [io.quarkus] (Shutdown thread) awt-graphics-rest-quickstart stopped in 0.002s\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:211
#, fuzzy
msgid "This way we can have our test application executed in a Linux container while keeping our Windows development environment."
msgstr "这样，我们就可以让我们的测试应用程序在Linux容器中执行，同时保持我们的Windows开发环境。"

#. type: Title ==
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:212
#, fuzzy, no-wrap
msgid "Troubleshooting"
msgstr "故障排除"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:214
#, fuzzy, no-wrap
msgid "**File permissions:** The Linux executable file might have missing its executable flag, so you might need to set\n"
msgstr " *文件权限：* Linux的可执行文件可能缺少可执行标志，所以你可能需要设置"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:215
#, fuzzy, no-wrap
msgid "it in your Dockerfile as we do in the Quickstart AWT example, i.e. `+RUN chmod \"ugo+x\" /work/application+`.\n"
msgstr "它在你的Docker文件中，就像我们在Quickstart AWT例子中做的那样，即 `RUN chmod \"ugo+x\" /work/application` 。"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:216
#, fuzzy, no-wrap
msgid "**Podman machine must be inited:** If something goes south, an Administrator can fix it by removing the machine\n"
msgstr " *Podman机器必须被启动：* 如果出现问题，管理员可以通过移除机器来解决。"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:218
#, fuzzy, no-wrap
msgid ""
"(the Linux VM providing podman services), e.g. `+podman machine rm \"podman-machine-default\"+` and then\n"
"`+podman machine init+`.\n"
msgstr "(提供podman服务的Linux虚拟机)，例如： `podman machine rm \"podman-machine-default\"` ，然后 `podman machine init` 。"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:219
#, fuzzy, no-wrap
msgid "*Directory or a file access:* When more services or more complex multimodule projects are being built, one could\n"
msgstr " *目录或文件访问：* 当更多的服务或更复杂的多模块项目被建立时，人们可以"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:221
#, fuzzy, no-wrap
msgid ""
"hit `+The process cannot access the file because it is being used by another process+`. The easiest way to debug\n"
"such situation is to use https://download.sysinternals.com/files/Handle.zip[Handle] tool by Sysinternals.\n"
msgstr "点击 `The process cannot access the file because it is being used by another process` 。调试这种情况的最简单方法是使用Sysinternals的 link:https://download.sysinternals.com/files/Handle.zip[Handle] 工具。"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:223
#, fuzzy
msgid "Note that none of the aforementioned situations is Quarkus specific per se."
msgstr "请注意，上述情况本身都不是Quarkus特有的。"

#. type: Title ==
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:224
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "总结"

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:227
msgid "Podman is perfectly capable of running your Linux containers on Windows, being it test apps or databases. It is definitely worth trying out."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:228
msgid "Do you have a question regarding this post? Feel free to hit us up on https://quarkusio.zulipchat.com/#[Zulip chat], https://stackoverflow.com/questions/tagged/quarkus%20podman?sort=Newest[Stack Overflow] or on https://github.com/quarkusio/quarkus/issues?q=label%3Aenv%2Fpodman[GitHub]."
msgstr ""
