# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-06-21 15:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "gwenneg"
msgstr "gwenneg"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "2022-06-21"
msgstr "2022-06-21"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "We moved our Qute templates from the file storage to a database to improve the tenants experience in a multitenant Quarkus app."
msgstr "我们把我们的Qute模板从文件存储转移到数据库，以改善多租户Quarkus应用程序的租户体验。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "qute development-tips"
msgstr "经验发展-提示"

#. type: YAML Front Matter: title
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "Using Qute with templates from a database"
msgstr "用数据库中的模板使用Qute"

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:11
#, fuzzy, no-wrap
msgid "Introduction"
msgstr "简介"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:16
#, fuzzy
msgid "I'm part of a Red Hat team that created a multitenant notifications service which sends the notifications from many https://console.redhat.com[Red Hat Hybrid Cloud Console] apps (the tenants).  Our service can be used to send several kinds of notifications, including emails.  Each tenant can create as many email templates as they need and link them with the events that will trigger the notifications."
msgstr "我是红帽团队的一员，他们创建了一个多租户通知服务，从许多 link:https://console.redhat.com[红帽混合云控制台] 应用程序（租户）发送通知。我们的服务可以用来发送几种通知，包括电子邮件。每个租户可以根据自己的需要创建任意多的电子邮件模板，并将它们与将触发通知的事件联系起来。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:22
#, fuzzy
msgid "We implemented that with the amazing https://quarkus.io/guides/qute-reference[Qute templating engine] and templates stored as files in the `src/main/resources/templates` folder.  It allowed our tenants to design templates tailored to fit their needs with minimal knowledge of Qute.  However, we quickly realized that editing the templates was a slow and heavy process for the tenants.  Indeed, they had to create a GitHub pull request in our repository, wait for a review and then wait again for a deployment before the templates could be tested.  We needed to make that process easier for the tenants, ideally even self-serviced."
msgstr "我们通过神奇的 link:https://quarkus.io/guides/qute-reference[Qute模板引擎] 和以文件形式存储在 `src/main/resources/templates` 文件夹中的模板来实现这一点。它允许我们的租户在对Qute了解不多的情况下，设计出适合他们需求的模板。然而，我们很快意识到，编辑模板对租户来说是一个缓慢而沉重的过程。事实上，他们必须在我们的存储库中创建一个GitHub拉动请求，等待审查，然后再次等待部署，然后才能测试模板。我们需要使这个过程对租户来说更容易，最好是自我服务。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:25
#, fuzzy
msgid "Then we decided to move the templates from the file storage to a database using Qute's `TemplateLocator`.  It helped us offer the tenants an easier, frictionless and self-serviced way of editing the templates."
msgstr "然后，我们决定使用Qute的 `TemplateLocator` ，将模板从文件存储转移到数据库中。它帮助我们为租户提供一个更容易、无摩擦和自助式的模板编辑方式。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:27
#, fuzzy
msgid "image:/assets/images/posts/qute-templates-from-db/before-after.png[]"
msgstr "image:/assets/images/posts/qute-templates-from-db/before-after.png[alt=\"before after\"]"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:29
#, fuzzy
msgid "Here's how we did it."
msgstr "以下是我们的做法。"

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:30
#, fuzzy, no-wrap
msgid "The obvious part: persisting the templates into the database"
msgstr "显而易见的部分：将模板持久化到数据库中"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:36
#, fuzzy
msgid "Before using templates from the DB with Qute, the templates obviously need to be persisted.  It doesn't matter how this is performed.  Any flavor of Hibernate (reactive or not, with Panache or not) will work.  This post will show examples based on https://quarkus.io/guides/hibernate-orm-panache[Hibernate with Panache]."
msgstr "在用Qute使用数据库中的模板之前，模板显然需要被持久化。如何执行并不重要。任何形式的Hibernate（无论是否反应式，无论是否带有Panache）都可以使用。这篇文章将展示基于 link:https://quarkus.io/guides/hibernate-orm-panache[Hibernate与Panache的] 例子。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:38
#, fuzzy
msgid "The next sections will make use of this JPA entity:"
msgstr "接下来的章节将利用这个JPA实体。"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:42
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:69
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:135
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:168
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:199
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:230
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:44
#, no-wrap
msgid "import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:47
#, no-wrap
msgid ""
"import javax.persistence.Entity;\n"
"import javax.persistence.Id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:50
#, no-wrap
msgid ""
"@Entity\n"
"public class DbTemplate extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:53
#, no-wrap
msgid ""
"    @Id\n"
"    public String name; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:56
#, no-wrap
msgid ""
"    public String content;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:58
#, fuzzy
msgid "The template name will be the DB primary key."
msgstr "模板名称将是DB的主键。"

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:59
#, fuzzy, no-wrap
msgid "The interesting part: connecting Qute to the database"
msgstr "有趣的部分：将Qute连接到数据库"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:63
#, fuzzy
msgid "Now that templates can be persisted, we need a way to use them from Qute.  Fortunately, Qute comes with a very interesting interface called `TemplateLocator` that can be used to load templates from any location, including from a DB."
msgstr "现在模板可以被持久化了，我们需要一种方法来从Qute使用它们。幸运的是，Qute带有一个非常有趣的接口，叫做 `TemplateLocator` ，可以用来从任何地方加载模板，包括从数据库中。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:65
#, fuzzy
msgid "Here's how it can be used with the `DbTemplate` entity we defined earlier:"
msgstr "下面是它如何与我们前面定义的 `DbTemplate` 实体一起使用。"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:74
#, no-wrap
msgid ""
"import io.quarkus.logging.Log;\n"
"import io.quarkus.qute.EngineBuilder;\n"
"import io.quarkus.qute.TemplateLocator;\n"
"import io.quarkus.qute.Variant;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:80
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
"import java.io.Reader;\n"
"import java.io.StringReader;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:83
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class DbTemplateLocator implements TemplateLocator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:95
#, no-wrap
msgid ""
"    @Override\n"
"    public Optional<TemplateLocation> locate(String name) {\n"
"        DbTemplate template = DbTemplate.findById(name);\n"
"        if (template == null) {\n"
"            Log.tracef(\"Template with [name=%s] not found in the database\", name);\n"
"            return Optional.empty();\n"
"        } else {\n"
"            Log.tracef(\"Template with [name=%s] found in the database\", name);\n"
"            return Optional.of(buildTemplateLocation(template.getContent()));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:100
#, no-wrap
msgid ""
"    @Override\n"
"    public int getPriority() { <1>\n"
"        return DEFAULT_PRIORITY - 1;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:104
#, no-wrap
msgid ""
"    void configureEngine(@Observes EngineBuilder builder) { <2>\n"
"        builder.addLocator(this);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:107
#, no-wrap
msgid ""
"    private TemplateLocation buildTemplateLocation(String templateContent) {\n"
"        return new TemplateLocation() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:112
#, no-wrap
msgid ""
"            @Override\n"
"            public Reader read() {\n"
"                return new StringReader(templateContent);\n"
"            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:120
#, no-wrap
msgid ""
"            @Override\n"
"            public Optional<Variant> getVariant() {\n"
"                return Optional.empty();\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:122
#, fuzzy
msgid "If your Quarkus app contains templates loaded from both the file system and a database, you will need to override the template locator default priority. Otherwise, Quarkus will try to load templates from the file system using `DbTemplateLocator` which could lead to exceptions or unpredictable behaviors."
msgstr "如果你的Quarkus应用程序包含从文件系统和数据库加载的模板，你将需要覆盖模板定位器的默认优先级。否则，Quarkus将尝试使用 `DbTemplateLocator` 从文件系统加载模板，这可能会导致异常或不可预测的行为。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:123
#, fuzzy
msgid "Before Quarkus 2.10, integrating `DbTemplateLocator` with the Qute engine instance provided by Quarkus could only be done with a CDI observer like this."
msgstr "在Quarkus 2.10之前，将 `DbTemplateLocator` 与Quarkus提供的Qute引擎实例集成只能通过这样的CDI观察器来完成。"

#. type: delimited block =
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:127
#, fuzzy
msgid "Quarkus 2.10 recently introduced a new `@Locate` annotation that makes the https://quarkus.io/version/main/guides/qute-reference#template-locator-registration[Template Locator Registration] even simpler."
msgstr "Quarkus 2.10最近引入了一个新的 `@Locate` 注释，使 link:https://quarkus.io/version/main/guides/qute-reference#template-locator-registration[模板定位器注册] 变得更加简单。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:131
#, fuzzy
msgid "Now that the template locator is registered, we're ready to compile and render templates from the database with Qute.  As you can see in the following example, DB templates are used exactly like file templates:"
msgstr "现在模板定位器已经注册，我们准备用Qute从数据库中编译和渲染模板。正如你在下面的例子中看到的，DB模板的使用与文件模板完全一样。"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:138
#, no-wrap
msgid ""
"import io.quarkus.qute.Engine;\n"
"import io.quarkus.qute.Template;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:141
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:173
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:205
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:144
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class EmailSender {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:147
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:179
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:211
#, no-wrap
msgid ""
"    @Inject\n"
"    Engine engine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:156
#, no-wrap
msgid ""
"    public void sendEmail(String templateName) {\n"
"        Template template = engine.getTemplate(templateName);\n"
"        if (template != null) {\n"
"            String rendered = template.render();\n"
"            // Send an email using the template.\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:158
#, fuzzy, no-wrap
msgid "Beware of Qute's internal cache"
msgstr "小心Qute的内部缓存"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:162
#, fuzzy
msgid "Whenever Qute loads a template, it is stored into an internal `ConcurrentHashMap` and stays in memory forever, unless Qute is instructed otherwise.  This means that you will need to remove a DB template from the Qute internal cache after it's been updated or deleted in the database."
msgstr "每当Qute加载一个模板，它就会被存储到一个内部 `ConcurrentHashMap` ，并永远留在内存中，除非Qute另有指示。这意味着，在数据库中更新或删除DB模板后，你需要从Qute的内部缓存中删除它。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:164
#, fuzzy
msgid "There are several ways of achieving that:"
msgstr "有几种方法可以实现这一点。"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:170
#, no-wrap
msgid "import io.quarkus.qute.Engine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:176
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class DbEngineCacheManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:183
#, no-wrap
msgid ""
"    public void removeTemplates(String name) {\n"
"        engine.removeTemplates(templateName -> templateName.equals(name)); <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:188
#, no-wrap
msgid ""
"    public void clearAll() {\n"
"        engine.clearTemplates(); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:190
#, fuzzy
msgid "This removes the templates for which the mapping id matches the given predicate."
msgstr "这将删除映射ID与给定谓词相匹配的模板。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:191
#, fuzzy
msgid "This removes all templates from the cache."
msgstr "这将从缓存中删除所有模板。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:195
#, fuzzy
msgid "Clearing that internal cache can become tricky if your app is running on a Kubernetes cluster with several replicas.  You will indeed need a way to broadcast to all pods (possibly using a Kafka topic or a DB table) an instruction to remove from the cache the templates that have been updated or deleted.  There is a cheaper (yet very imperfect) way of keeping all pods caches synced though, using a scheduled job:"
msgstr "如果你的应用程序运行在有多个副本的Kubernetes集群上，清除内部缓存会变得很棘手。你确实需要一种方法来向所有的pods广播（可能使用Kafka主题或DB表），指示从缓存中删除已经更新或删除的模板。不过有一个更便宜（但非常不完美）的方法来保持所有pods缓存的同步，那就是使用计划作业。"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:202
#, no-wrap
msgid ""
"import io.quarkus.qute.Engine;\n"
"import io.quarkus.scheduler.Scheduled;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:208
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class DbEngineCacheScheduledCleaner {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:217
#, no-wrap
msgid ""
"    @Scheduled(every = \"5m\", delayed = \"5m\") <1>\n"
"    public void clearTemplates() {\n"
"        engine.clearTemplates();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:219
#, fuzzy
msgid "All templates will be cleared from the internal cache every 5 minutes."
msgstr "所有模板将每5分钟从内部缓存中清除一次。"

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:220
#, fuzzy, no-wrap
msgid "Preventing the deletion of an included template"
msgstr "防止删除一个包含的模板"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:224
msgid "A Qute template can be included into another template.  If the inner template is deleted, then the outer template compilation will fail, which is obviously something that needs to be prevented while loading the templates from the DB."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:226
msgid "Here's a way to look for the inclusion of a template into another one before deleting it:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:235
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.persistence.EntityManager;\n"
"import javax.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:238
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class TemplateRepository {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:241
#, no-wrap
msgid ""
"    @Inject\n"
"    EntityManager entityManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:257
#, no-wrap
msgid ""
"    @Transactional\n"
"    public void deleteTemplate(String name) {\n"
"        long count = entityManager.createQuery(\"SELECT COUNT(*) FROM DbTemplate WHERE name != :name AND content LIKE :include\", Long.class)\n"
"                .setParameter(\"name\", name)\n"
"                .setParameter(\"include\", \"%{#include \" + name + \"%\")\n"
"                .getSingleResult();\n"
"        if (count > 0) {\n"
"            throw new IllegalStateException(\"Included templates can't be deleted, remove the inclusion or delete the outer template first\");\n"
"        } else {\n"
"            entityManager.createQuery(\"DELETE FROM DbTemplate WHERE name = :name\")\n"
"                    .setParameter(\"name\", name)\n"
"                    .executeUpdate();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:259
#, no-wrap
msgid "Database templates validation"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:262
msgid "Database templates come with a significant drawback: Quarkus is no longer able to perform https://quarkus.io/guides/qute-reference#typesafe_templates[type-safe] validation."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:264
msgid "The syntax validation is also delayed from build time to runtime but this is expected as templates can be created or edited at runtime."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:265
#, no-wrap
msgid "Special thanks"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:267
msgid "Thanks to Josejulio Martinez Magana and Martin Kouba for helping me during the implementation of the DB templates in our notifications service!"
msgstr ""
