# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-07 16:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "鹤壁市"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, fuzzy, no-wrap
msgid "2022-09-07"
msgstr "2022-09-07"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, fuzzy, no-wrap
msgid "How to implement a simple cache with the Redis data source"
msgstr "如何用Redis数据源实现一个简单的缓存"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, fuzzy, no-wrap
msgid "redis"
msgstr "Redis"

#. type: YAML Front Matter: title
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, fuzzy, no-wrap
msgid "Introducing the new Redis API - How to cache with Redis?"
msgstr "介绍一下新的Redis API - 如何用Redis进行缓存？"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:13
#, fuzzy
msgid "In Quarkus 2.11, we introduced a new API to interact with Redis.  The Redis DataSource APIs aim to be simpler, more extensive, and type-safe.  Under the hood, it uses a performant, non-blocking client (that you can also use if you prefer low-level APIs)."
msgstr "在Quarkus 2.11中，我们引入了一个新的API来与Redis进行交互。Redis DataSource APIs的目标是更简单、更广泛和类型安全的。在引擎盖下，它使用了一个高性能、非阻塞的客户端（如果你喜欢低级别的API，你也可以使用）。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:15
#, fuzzy
msgid "In this post, we will introduce this new API and use it to build a cache, one of the main Redis use cases."
msgstr "在这篇文章中，我们将介绍这个新的API，并使用它来建立一个缓存，这是Redis的主要用例之一。"

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:16
#, fuzzy, no-wrap
msgid "What is Redis?"
msgstr "什么是Redis？"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:23
#, fuzzy
msgid "https://redis.io/[Redis] is an open-source, in-memory data store that can be used as a database, cache, streaming engine, and message broker.  Redis is often used as real-time data stores, cache backends, data storage for geospatial entities, and so on.  To interact with Redis, you emit _commands_ and receive responses.  These commands target _keys_ and manipulate the associated data.  There are many commands divided into groups, including:"
msgstr "link:https://redis.io/[Redis] 是一个开源的内存数据存储，可以作为数据库、缓存、流媒体引擎和消息代理使用。Redis经常被用作实时数据存储、缓存后端、地理空间实体的数据存储，等等。为了与Redis互动，你发出 _命令_ 并接收响应。这些命令 _以键_ 为目标，操作相关的数据。有许多命令被分为不同的组，包括。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:25
#, fuzzy
msgid "the BitMap group to manipulate bit vectors"
msgstr "用BitMap组来操作位向量"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:26
#, fuzzy
msgid "the Generic group to manipulate the keys"
msgstr "通用组来操作钥匙"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:27
#, fuzzy
msgid "the Geospatial group to manipulate geo items"
msgstr "通过地理空间组来操作地理项目"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:28
#, fuzzy
msgid "the Hash group to manipulate sets of `+field -> item+` pairs (like `Map` in Java)"
msgstr "Hash组来操作 `field -> item` 对的集合（像Java中的 `Map` ）。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:29
#, fuzzy
msgid "the List, Set, and Sorted Set groups to store list, set, and sorted set of items"
msgstr "列表、集和排序集组，以存储列表、集和排序集的项目。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:30
#, fuzzy
msgid "the Pub/Sub group to emit messages on channels and receive them"
msgstr "在信道上发出信息和接收信息的Pub/Sub组"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:31
#, fuzzy
msgid "the String group to manipulate value (in Redis, Strings represent values including binary, numbers...)"
msgstr "操作值的字符串组（在Redis中，字符串代表包括二进制、数字在内的值。）"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:32
#, fuzzy
msgid "the Transaction group to execute transactions"
msgstr "交易组来执行交易"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:34
#, fuzzy
msgid "You can find the complete list of commands on the https://redis.io/commands/[Redis Commands page]."
msgstr "你可以在 link:https://redis.io/commands/[Redis命令页面] 找到完整的命令列表。"

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:35
#, fuzzy, no-wrap
msgid "The new Quarkus Redis API"
msgstr "新的Quarkus Redis API"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:38
#, fuzzy
msgid "The entry point of the new Quarkus Redis API are the two _data sources_ interfaces:"
msgstr "新的Quarkus Redis API的入口是两个 _数据源_ 接口。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:40
#, fuzzy
msgid "`io.quarkus.redis.datasource.RedisDataSource` - the imperative (blocking) API"
msgstr " `io.quarkus.redis.datasource.RedisDataSource` - 命令式（阻塞式）API"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:41
#, fuzzy
msgid "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - the reactive API"
msgstr " `io.quarkus.redis.datasource.ReactiveRedisDataSource` - 反应式API"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:43
#, fuzzy
msgid "As mentioned above, these APIs are implemented on top of a lower-level client:"
msgstr "如上所述，这些API是在一个较低级别的客户端之上实现的。"

#. type: Target for macro image
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:44
#, no-wrap
msgid "/assets/images/posts/redis-intro/redis-clients.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:50
#, fuzzy
msgid "The data source APIs follow the command group structure.  For each group, you retrieve an object dedicated to emitting the commands of that group.  In that regard, this new API is not an abstraction of Redis.  You still need to know the command you need."
msgstr "数据源API遵循命令组结构。对于每个组，你检索到一个专门用于发射该组命令的对象。在这方面，这个新的API不是Redis的抽象。你仍然需要知道你需要的命令。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:52
#, fuzzy
msgid "For example, to manipulate a `Set<Person>`, you will use the following code:"
msgstr "例如，要操作一个 `Set<Person>` ，你将使用以下代码。"

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:56
#, no-wrap
msgid "record Person(String firstName, String lastName) {}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:59
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class PersonService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:61
#, no-wrap
msgid "    private final SetCommands<String, Person> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:66
#, no-wrap
msgid ""
"    public PersonService(RedisDataSource ds) {\n"
"\t    // Retrieve the `set` group\n"
"        commands = ds.set(Person.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:72
#, no-wrap
msgid ""
"    public void add(Person person) {\n"
"\t    // Emit the `sadd` command\n"
"        commands.sadd(\"key\", person);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:76
#, fuzzy
msgid "The API manages the serialization and deserialization for you.  Currently, it uses JSON for objects (using Jackson), but soon the API will offer more advanced features."
msgstr "该API为你管理序列化和反序列化的工作。目前，它对对象使用JSON（使用Jackson），但很快API将提供更多高级功能。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:78
#, fuzzy
msgid "This example uses the imperative API, but the reactive API is symmetric."
msgstr "这个例子使用了命令式的API，但反应式API是对称的。"

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:79
#, fuzzy, no-wrap
msgid "Implementing a Redis cache"
msgstr "实现Redis缓存"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:83
#, fuzzy
msgid "Time for more cohesive code.  Let's imagine the following https://github.com/cescoffier/quarkus-redis-demo[application]:"
msgstr "是时候让代码更有凝聚力了。让我们想象一下下面的 link:https://github.com/cescoffier/quarkus-redis-demo[应用程序] 。"

#. type: Target for macro image
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:84
#, no-wrap
msgid "/assets/images/posts/redis-intro/application.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:89
#, fuzzy
msgid "We have a database storing `Heroes`, a lot of them.  You need to return the 3 most powerful heroes based on their level.  Of course, you can use your SQL ninja skills, but let's imagine that this code was coded a long time ago, cannot be changed, and is very time-consuming:"
msgstr "我们有一个数据库，储存了 `Heroes` ，有很多。你需要根据他们的等级来返回3个最强大的英雄。当然，你可以使用你的SQL忍者技能，但让我们想象一下，这段代码是很久以前编码的，不能更改，而且非常耗时。"

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:102
#, no-wrap
msgid ""
"// Dumb approach, don't do this\n"
"return new Ranking(Hero.<Hero>listAll()\n"
"\t.stream()\n"
"\t.sorted((o1, o2) -> Integer.compare(o2.level, o1.level))\n"
"\t.peek(h -> {\n"
"\t\t// do something very long...\n"
"\t\tnap();\n"
"\t})\n"
"\t.limit(3)\n"
"\t.collect(Collectors.toList()));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:106
#, fuzzy
msgid "So, one solution to avoid having to re-compute this set of heroes on every call is to cache the result for a bit of time, let's say 10 seconds.  Let's consider that it's acceptable in this case to return a potentially outdated result set."
msgstr "所以，避免每次调用都要重新计算这组英雄的一个解决方案是将结果缓存一段时间，比方说10秒。让我们考虑一下，在这种情况下，返回一个可能过时的结果集是可以接受的。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:109
#, fuzzy
msgid "To use the new Redis API, we need to use the `redis-client` extension.  For users from the previous API, it's the same extension. The previous API is still available but is deprecated, and we plan to remove it at some point."
msgstr "要使用新的Redis API，我们需要使用 `redis-client` 扩展。对于来自以前的API的用户来说，这是同一个扩展。以前的API仍然可用，但已被废弃，我们计划在某个时候将其删除。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:111
#, fuzzy
msgid "Now that we can use the `RedisDataSource`, we can implement the https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/MyRedisCache.java[`MyRedisCache` class] as follows:"
msgstr "现在我们可以使用 `RedisDataSource` ，我们可以实现 link:https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/MyRedisCache.java[`MyRedisCache`] 类，如下所示。"

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:115
#, no-wrap
msgid "package me.escoffier.quarkus.supes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:119
#, no-wrap
msgid ""
"import io.quarkus.redis.datasource.RedisDataSource;\n"
"import io.quarkus.redis.datasource.string.SetArgs;\n"
"import io.quarkus.redis.datasource.string.StringCommands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:123
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.time.Duration;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:126
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyRedisCache {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:128
#, no-wrap
msgid "    private final StringCommands<String, Ranking> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:132
#, no-wrap
msgid ""
"    public MyRedisCache(RedisDataSource ds) {\n"
"        this.commands = ds.string(Ranking.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:136
#, no-wrap
msgid ""
"    public Ranking get(String key) {\n"
"        return commands.get(key);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:140
#, no-wrap
msgid ""
"    public void set(String key, Ranking result) {\n"
"        commands.set(key, result, new SetArgs().ex(Duration.ofSeconds(10)));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:144
#, no-wrap
msgid ""
"    public void evict(String key) {\n"
"        commands.getdel(key);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:157
#, no-wrap
msgid ""
"    public Ranking getOrSetIfAbsent(String key,\n"
"           Supplier<Ranking> computation) {\n"
"        var cached = get(key);\n"
"        if (cached != null) {\n"
"            return cached;\n"
"        } else {\n"
"            var result = computation.get();\n"
"            set(key, result);\n"
"            return result;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:161
#, fuzzy
msgid "Note that it's a simple cache without any fancy features.  Redis provides more advanced commands to implement more complicated strategies."
msgstr "注意，这是一个简单的缓存，没有任何花哨的功能。Redis提供了更高级的命令来实现更复杂的策略。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:164
#, fuzzy
msgid "The constructor receives the `RedisDataSource` and gets an object to manipulate Redis _values_.  In our case, https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/Ranking.java[`Ranking`] (the top 3 heroes)"
msgstr "构造函数接收 `RedisDataSource` ，并获得一个对象来操作Redis _的值_ 。在我们的例子中。 link:https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/Ranking.java[`Ranking`] (最上面的3个英雄)"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:166
#, fuzzy
msgid "The `get` method emits the Redis `get` command to retrieve an already stored ``Ranking(``null` if it does not)."
msgstr " `get` 方法发出Redis `get` 命令来检索已经存储的 `Ranking(` null`，如果没有的话）。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:171
#, fuzzy
msgid "The `set` method emits the Redis `set` command and store a `Ranking` to the passed key.  The command also configures the expiration time.  So, after 10 seconds, the value is removed by Redis.  As mentioned above, the Ranking instance is serialized into a JSON document."
msgstr " `set` 方法发出Redis `set` 命令，并向传递的密钥存储一个 `Ranking` 。该命令还配置了过期时间。因此，10秒后，该值会被Redis删除。如上所述，Ranking实例被序列化为一个JSON文档。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:174
#, fuzzy
msgid "The `evict` method allows removing the stored value.  Multiple commands can do this, such as the `del` or `getdel` (which also returned the stored value)."
msgstr " `evict` 方法允许删除存储的值。多个命令可以做到这一点，如 `del` 或 `getdel` （也是返回存储值）。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:179
#, fuzzy
msgid "For our application, we need something a bit more fancy.  We want to check if we have a value in Redis.  If so, uses that value, and if not, compute the value and store it.  This is implemented in the `getOrSetIfAbsent`."
msgstr "对于我们的应用程序，我们需要一些更花哨的东西。我们想检查我们在Redis中是否有一个值。如果有，则使用该值，如果没有，则计算该值并存储它。这是在 `getOrSetIfAbsent` .NET中实现的。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:181
#, fuzzy
msgid "Now, we can just use this cache to avoid the heavy computation on every call (check the https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/HeroService.java[HeroService] class to see the complete code):"
msgstr "现在，我们可以直接使用这个缓存来避免每次调用时的繁重计算（查看 link:https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/HeroService.java[HeroService] 类的完整代码）。"

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:186
#, no-wrap
msgid ""
"@Inject\n"
"MyRedisCache cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:201
#, no-wrap
msgid ""
"public Ranking getTopHeroes() {\n"
"    return cache.getOrSetIfAbsent(\"top\", () -> {\n"
"                // Dumb approach, don't do this\n"
"                return new Ranking(Hero.<Hero>listAll()\n"
"                        .stream()\n"
"                        .sorted((o1, o2) -> Integer.compare(o2.level, o1.level))\n"
"                        .peek(h -> {\n"
"                            // do something very long...\n"
"                            nap();\n"
"                        })\n"
"                        .limit(3)\n"
"                        .collect(Collectors.toList()));\n"
"            });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:204
#, fuzzy
msgid "To run the application, just start `mvn quarkus:dev` and open your browser to http://localhost:8080:"
msgstr "要运行该应用程序，只需启动 `mvn quarkus:dev` ，并打开浏览器到 http://localhost:8080 "

#. type: Target for macro image
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:205
#, no-wrap
msgid "/assets/images/posts/redis-intro/screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:210
#, fuzzy
msgid "To see the cache in action, check the time displayed on the page and refresh the page.  Don't forget that the cached value is only valid for 10 seconds (as set in `MyRedisCache`).  So, if you wait 10 seconds, it will recompute the result."
msgstr "要看到缓存的作用，请检查页面上显示的时间，并刷新页面。不要忘了，缓存值只在10秒内有效（如 `MyRedisCache` 中设置的）。所以，如果你等待10秒，它将重新计算结果。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:212
#, fuzzy
msgid "Quarkus comes with a Redis Dev Service that automatically starts a Redis instance on your machine and configures the application. Note that you need to be able to run containers locally to use this feature."
msgstr "Quarkus自带的Redis Dev Service可以在你的机器上自动启动一个Redis实例并配置应用程序。注意，你需要能够在本地运行容器才能使用这个功能。"

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:213
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "总结"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:217
msgid "This post briefly introduces the new Redis API and demonstrates its usage with a cache implementation example.  The complete code is available from this https://github.com/cescoffier/quarkus-redis-demo[GitHub repo]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:220
msgid "The API supports many more features, such as geospatial data, pub/sub, and transactions, which could be used to improve the `getOrSetIfAbsent` method.  We will cover more advanced use cases in future posts."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:222
msgid "You can find more details about the new API in the:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:224
msgid "https://quarkus.io/guides/redis[Quarkus Getting Started guide]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:225
msgid "https://quarkus.io/guides/redis-reference[Quarkus Redis Reference guide]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:226
msgid "Also, the Quarkus team is working on integrating https://github.com/quarkusio/quarkus/issues/27785[Redis as a cache implementation]. So, eventually, you will just need to use `@CacheResult`, and let the magic happens."
msgstr ""
