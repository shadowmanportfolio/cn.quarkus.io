# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-08-29 11:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, fuzzy, no-wrap
msgid "gsmet"
msgstr "gsmet"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, fuzzy, no-wrap
msgid "2022-08-30"
msgstr "2022-08-30"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, fuzzy, no-wrap
msgid "The unique build infrastructure of Quarkus allows you to solve complex issues in a very simple way by developing custom extensions."
msgstr "Quarkus独特的构建基础设施允许你通过开发自定义扩展，以非常简单的方式解决复杂问题。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, fuzzy, no-wrap
msgid "extensions development-tips"
msgstr "延伸发展-提示"

#. type: YAML Front Matter: title
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, fuzzy, no-wrap
msgid "Solving problems with Quarkus extensions (2/n)"
msgstr "用Quarkus扩展来解决问题 (2/n)"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:13
#, fuzzy
msgid "We are all good: 2 posts make a series!"
msgstr "我们都很好：2个帖子组成一个系列!"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:15
#, fuzzy
msgid "If you haven't looked at the first post of this series, I invite you to link:/blog/solving-problems-with-extensions/[read it]!"
msgstr "如果你还没有看这个系列的第一篇文章，我邀请你去 link:/blog/solving-problems-with-extensions/[读一读] !"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:18
#, fuzzy, no-wrap
msgid ""
"**Problem of the day:** A library is using the `@Inject` annotation to handle its internal injection and, when used on beans, that will conflict with the CDI injection we have in Quarkus.\n"
"Leading to the impossibility for the CDI layer to inject these objects as they are not CDI beans.\n"
msgstr " *今天的问题。一* 个库使用 `@Inject` 注释来处理它的内部注入，当在Bean上使用时，这将与我们在Quarkus中的CDI注入相冲突。导致CDI层不可能注入这些对象，因为它们不是CDI豆子。"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:19
#, fuzzy, no-wrap
msgid "Some context"
msgstr "一些背景"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:23
#, fuzzy
msgid "As for the first post of the series, this post is based on my work on https://github.com/quarkiverse/quarkus-github-app[the Quarkus GitHub App extension] that allows you to develop GitHub Apps based on Quarkus at light speed with very little boilerplate."
msgstr "至于该系列的第一篇文章，这篇文章是基于我在 link:https://github.com/quarkiverse/quarkus-github-app[Quarkus GitHub应用程序扩展] 方面的工作，该 link:https://github.com/quarkiverse/quarkus-github-app[扩展] 允许你以光速开发基于Quarkus的GitHub应用程序，而只需极少的模板。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:26
#, fuzzy
msgid "The newest feature of this extension is the ability to easily develop comment-based commands in your GitHub apps.  For instance, do something when a user posts a `@bot do-something` in a comment of a pull request."
msgstr "这个扩展的最新功能是能够在你的GitHub应用程序中轻松开发基于评论的命令。例如，当用户在拉动请求的评论中发布 `@bot do-something` ，就可以做些什么。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:29
#, fuzzy
msgid "While it is possible to implement it all by yourself with the standard features of Quarkus GitHub App, we developed an additional extension to make things even easier."
msgstr "虽然可以通过Quarkus GitHub App的标准功能自行实现，但我们开发了一个额外的扩展，使事情变得更加简单。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:31
#, fuzzy
msgid "Implementing a comment-based command with this extension is as easy as:"
msgstr "用这个扩展实现基于评论的命令，就像这样简单。"

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:36
#, no-wrap
msgid ""
"@Cli(name = \"@bot\", commands = { DoSomething.class }) \n"
"public class MyFirstCli {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:39
#, no-wrap
msgid ""
"    @Command(name = \"do-something\") \n"
"    static class DoSomething implements Runnable { \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:46
#, no-wrap
msgid ""
"        @Override\n"
"        public void run() { \n"
"            // do something\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:49
#, fuzzy
msgid "The `run()` method of the `DoSomething` class will be called any time a user posts `@bot do-something` as a comment in an issue or pull request."
msgstr "当用户在问题或拉动请求中发布 `@bot do-something` 作为评论时， `DoSomething` 类的 `run()` 方法将被调用。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:51
#, fuzzy
msgid "These are the basics but the extension has a ton of other features such as reaction-based feedback, scopes, permissions..."
msgstr "这些是最基本的，但该扩展有大量的其他功能，如基于反应的反馈、作用域、权限等。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:55
#, fuzzy
msgid "This extension is based on the https://rvesse.github.io/airline/[Airline library].  This library is designed to easily parse and execute command lines.  While originally designed to develop CLI applications, it is a perfect fit for our usage."
msgstr "这个扩展是基于 link:https://rvesse.github.io/airline/[Airline库] 的。这个库被设计用来轻松解析和执行命令行。虽然最初是为开发CLI应用程序而设计的，但它非常适合我们的使用。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:57
#, fuzzy
msgid "One problem that we have with this library is that it uses the `@Inject` annotation for injecting some objects into commands such as `GlobalMetadata`:"
msgstr "我们在这个库中遇到的一个问题是，它使用 `@Inject` 注解来将一些对象注入到命令中，如 `GlobalMetadata` 。"

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:62
#, no-wrap
msgid ""
"@Command(name = \"do-something\") \n"
"static class DoSomething implements Runnable { \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:65
#, no-wrap
msgid ""
"    @Inject\n"
"    GlobalMetadata metadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:71
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() { \n"
"        // do something\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:75
#, fuzzy
msgid "This is a problem for us as this `@Inject` annotation is used by CDI injection and, in the context of our extension, the `@Command` classes are CDI beans.  Thus, this particular `@Inject` annotation will also be interpreted by ArC, our CDI implementation, and ArC will try to inject `GlobalMetadata` as a CDI bean... and fail because it is not a CDI bean."
msgstr "这对我们来说是个问题，因为这个 `@Inject` 注解是由CDI注入使用的，在我们的扩展中， `@Command` 类是CDI Bean。因此，这个特定的 `@Inject` 注解也将被我们的CDI实现ArC所解释，ArC将尝试把 `GlobalMetadata` 注入为CDI Bean...但由于它不是CDI Bean而失败。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:77
#, fuzzy
msgid "Suffice to say it won't work very well and we need to fix it."
msgstr "可以说，这不会有很好的效果，我们需要解决这个问题。"

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:81
#, fuzzy
msgid "Not making `@Command` classes CDI beans is NOT an option as we want regular CDI injection to work."
msgstr "不使 `@Command` 类的CDI豆不是一个选项，因为我们希望常规的CDI注入能够工作。"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:83
#, fuzzy, no-wrap
msgid "How can we work around this?"
msgstr "我们如何才能解决这个问题？"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:87
#, fuzzy
msgid "Ideally, the Airline library wouldn't use the `@Inject` annotation for its internal purpose and the good news is, in the latest versions, the annotation used for injection can be specified."
msgstr "理想情况下，Airline库不会将 `@Inject` 注释用于其内部目的，好消息是，在最新版本中，可以指定用于注入的注释。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:89
#, fuzzy
msgid "But for the sake of the exercise, let's stick to the previous Airline version."
msgstr "但为了练习，让我们坚持使用以前的航空公司版本。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:91
#, fuzzy
msgid "So now what?"
msgstr "那么现在怎么办？"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:94
#, fuzzy
msgid "The set of classes the Airline library is susceptible to inject is limited: it is used to inject a limited number of classes and to handle composition (i.e. sharing components across several commands)."
msgstr "Airline库容易被注入的类集是有限的：它被用来注入有限的类和处理组合（即在几个命令中共享组件）。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:96
#, fuzzy
msgid "For these use cases, we somehow need ArC to ignore the injection points."
msgstr "对于这些用例，我们在某种程度上需要ArC来忽略注入点。"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:97
#, fuzzy, no-wrap
msgid "AnnotationTransformers to the rescue"
msgstr "AnnotationTransformers to rescue"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:101
#, fuzzy
msgid "If you are familiar with Quarkus, you are probably familiar with the notion of Jandex index.  In Quarkus, we build indexes of the project annotations and these indexes are used by our core and extensions to find annotations (and more)."
msgstr "如果你熟悉Quarkus，你可能对Jandex索引的概念很熟悉。在Quarkus中，我们建立了项目注释的索引，这些索引被我们的核心和扩展用来寻找注释（以及更多）。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:103
#, fuzzy
msgid "ArC, our CDI implementation, is one of the components that consumes the Jandex indexes."
msgstr "ArC，我们的CDI实现，是消耗Jandex索引的组件之一。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:105
#, fuzzy
msgid "Interestingly though, ArC does not consume the Jandex index as is:"
msgstr "但有趣的是，ArC并不像现在这样消耗Jandex指数。"

#. type: Target for macro image
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:106
#, no-wrap
msgid "annotations-transformers.svg"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:110
#, fuzzy
msgid "Annotations transformers can add, remove, update existing annotations before consumption by ArC.  These are used by several features in Quarkus, for instance Hibernate Validator interceptor support."
msgstr "注释转化器可以在ArC消费之前添加、删除、更新现有的注释。Quarkus的一些功能使用了这些注释，例如支持Hibernate Validator拦截器。"

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:114
#, fuzzy
msgid "Annotations transformers do NOT modify the original classes, nor do they modify the Jandex indexes."
msgstr "注释变换器不会修改原始类，也不会修改Jandex索引。"

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:116
#, fuzzy
msgid "Using annotations transfomers will solely impact ArC, our CDI implementation."
msgstr "使用注释变换器将完全影响ArC，即我们的CDI实现。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:121
#, fuzzy
msgid "This behavior is of great interest to us: we could hide the annotations from ArC using an annotations transformer while keeping them available for Airline to consume them via reflection."
msgstr "这种行为让我们非常感兴趣：我们可以使用注解变换器将注解从ArC中隐藏起来，同时让Airline通过反射来消费它们，保持它们的可用性。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:123
#, fuzzy
msgid "Let's create our annotations transformer:"
msgstr "让我们来创建我们的注释转化器。"

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:127
#, no-wrap
msgid "public class HideAirlineInjectAnnotationsTransformer implements AnnotationsTransformer { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:129
#, no-wrap
msgid "    private final IndexView index;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:133
#, no-wrap
msgid ""
"    HideAirlineInjectAnnotationsTransformer(IndexView index) { <2>\n"
"        this.index = index;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:138
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean appliesTo(Kind kind) {\n"
"        return Kind.FIELD == kind; <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:142
#, no-wrap
msgid ""
"    @Override\n"
"    public void transform(TransformationContext transformationContext) {\n"
"        FieldInfo fieldInfo = transformationContext.getTarget().asField();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:146
#, no-wrap
msgid ""
"        if (!fieldInfo.hasAnnotation(DotNames.INJECT)) { <4>\n"
"            return;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:156
#, no-wrap
msgid ""
"        if (fieldInfo.hasAnnotation(ARGUMENTS) ||\n"
"                fieldInfo.hasAnnotation(OPTION) ||\n"
"                GLOBAL_METADATA.equals(fieldInfo.type().name()) || <5>\n"
"                COMMAND_GROUP_METADATA.equals(fieldInfo.type().name()) ||\n"
"                COMMAND_METADATA.equals(fieldInfo.type().name()) ||\n"
"                isComposition(fieldInfo)) { <6>\n"
"            transformationContext.transform().remove(ai -> DotNames.INJECT.equals(ai.name())).done(); <7>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:159
#, no-wrap
msgid ""
"    private boolean isComposition(FieldInfo fieldInfo) { <8>\n"
"        Type fieldType = fieldInfo.type();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:163
#, no-wrap
msgid ""
"        if (fieldType.kind() != Type.Kind.CLASS) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:165
#, no-wrap
msgid "        ClassInfo fieldClass = index.getClassByName(fieldType.asClassType().name());\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:169
#, no-wrap
msgid ""
"        if (fieldClass == null) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:171
#, no-wrap
msgid "        Set<DotName> fieldClassAnnotations = fieldClass.annotationsMap().keySet();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:175
#, no-wrap
msgid ""
"        return fieldClassAnnotations.contains(ARGUMENTS) || fieldClassAnnotations.contains(OPTION);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:177
#, fuzzy
msgid "Our class implements `AnnotationsTransformer`."
msgstr "我们的类实现了 `AnnotationsTransformer` 。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:178
#, fuzzy
msgid "We inject the Jandex index in our transformer as we will need it to detect composition."
msgstr "我们将Jandex指数注入我们的转化器中，因为我们需要它来检测组成。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:179
#, fuzzy
msgid "We are only interested in fields so let's apply our transformer to fields only."
msgstr "我们只对字段感兴趣，所以让我们的变换器只应用于字段。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:180
#, fuzzy
msgid "If the field is not annotated with `@Inject`, it is of no interest to us."
msgstr "如果这个字段没有注释 `@Inject` ，那么我们对它就没有兴趣。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:181
#, fuzzy
msgid "If the field type is `GlobalMetadata`, `GroupMetadata` or `CommandMetadata`, we know it is the responsibility of Airline to inject it."
msgstr "如果字段类型是 `GlobalMetadata` , `GroupMetadata` 或 `CommandMetadata` ，我们知道这是航空公司的责任，要注入它。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:182
#, fuzzy
msgid "We are also detecting composition."
msgstr "我们也在检测成分。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:184
#, fuzzy
msgid "We remove the `@Inject` annotation from the transformed view visible to ArC.  Make sure you don't forget to finalize the transformation with `.done()`."
msgstr "我们从ArC可见的转换后的视图中删除 `@Inject` 注释。确保你不要忘记用 `.done()` 来最终完成转换。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:185
#, fuzzy
msgid "For composition, we detect if the field is of a type that contains `@Arguments` or `@Option` annotations."
msgstr "对于组成，我们检测字段是否属于包含 `@Arguments` 或 `@Option` 注释的类型。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:188
#, fuzzy
msgid "Now that we have created our annotations transformer, we need to make sure Quarkus knows about it."
msgstr "现在我们已经创建了我们的注释转化器，我们需要确保Quarkus知道它。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:190
#, fuzzy
msgid "As usual, for the Quarkus build process, you just need to produce a `BuildItem` to register the annotations transformer:"
msgstr "像往常一样，对于Quarkus的构建过程，你只需要产生一个 `BuildItem` ，以注册注解转化器。"

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:199
#, no-wrap
msgid ""
"@BuildStep\n"
"public void beanConfig(CombinedIndexBuildItem index,\n"
"        BuildProducer<AnnotationsTransformerBuildItem> annotationsTransformer) {\n"
"    annotationsTransformer\n"
"            .produce(new AnnotationsTransformerBuildItem(new HideAirlineInjectAnnotationsTransformer(index.getIndex())));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:203
#, fuzzy
msgid "And that's it, from now on, the `@Inject` annotations consumed by the Airline library will be hidden from ArC, while still being visible from the Airline library, which uses reflection."
msgstr "就这样，从现在开始，Airline库所消耗的 `@Inject` 注释将被ArC隐藏，而从使用反射的Airline库中仍然可见。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:205
msgid "Regular CDI injection is still supported as only the `@Inject` annotations handled by Airline are hidden from ArC."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:206
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:209
msgid "Once again, we have seen how the unique build infrastructure of Quarkus can solve real life issues with very little boilerplate.  And that with unified concepts that are very easy to grasp."
msgstr ""
