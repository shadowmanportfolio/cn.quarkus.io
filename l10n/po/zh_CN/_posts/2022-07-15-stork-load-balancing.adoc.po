# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-07-15 12:23+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "鹤壁市"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:1
#, fuzzy, no-wrap
msgid "2022-07-15"
msgstr "2022-07-15"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:1
#, fuzzy, no-wrap
msgid "How Stork selects the best service instance and the various built-in stategies."
msgstr "Stork如何选择最佳服务实例和各种内置策略。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:1
#, fuzzy, no-wrap
msgid "stork"
msgstr "鹳鸟"

#. type: YAML Front Matter: title
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:1
#, fuzzy, no-wrap
msgid "How to select the \"right\" service with Stork?"
msgstr "如何用Stork选择 \"正确 \"的服务？"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:12
#, fuzzy
msgid "The essence of distributed systems resides in the interaction between _services_.  In modern architectures, you often have multiple instances of your service to share the load or improve the resilience by redundancy."
msgstr "分布式系统的本质在于 _服务_ 之间的互动。在现代架构中，你经常有多个服务实例来分担负载或通过冗余来提高弹性。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:16
#, fuzzy
msgid "But, when you have all these instances, how do you select the _best_ one? That's where Stork helps.  Stork is a service discovery and load balancing framework. Stork will locate and choose the most appropriate instance for each call.  In this post, we will look into some of the load-balancing strategies offered by Stork, so you can decide which one is the best for you."
msgstr "但是，当你有所有这些情况时，你如何选择 _最好的_ 一个？这就是Stork的帮助所在。Stork是一个服务发现和负载平衡框架。Stork将为每次调用定位并选择最合适的实例。在这篇文章中，我们将研究Stork提供的一些负载平衡策略，因此你可以决定哪一个是最适合你的。"

#. type: Title ==
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:17
#, fuzzy, no-wrap
msgid "Playground"
msgstr "游乐场"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:23
#, fuzzy
msgid "When your application needs to invoke a remote service (2), it asks Stork to locate this service (3).  This service discovery step retrieves the service instances. You may have a single instance, which eases the selection process, but you can also have multiple instances available.  Then, you need to pick one.  That's where Stork load balancing capability comes and selects the instance (4)."
msgstr "当你的应用程序需要调用一个远程服务（2）时，它要求Stork定位这个服务（3）。这个服务发现步骤会检索到服务实例。你可能只有一个实例，这就简化了选择过程，但你也可能有多个实例可用。然后，你需要挑选一个。这就是Stork的负载平衡能力来选择实例的地方（4）。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:26
#, fuzzy
msgid "To illustrate this service selection feature, we need an application.  The following picture represents our system:"
msgstr "为了说明这个服务选择功能，我们需要一个应用程序。下面的图片代表了我们的系统。"

#. type: Target for macro image
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:27
#, no-wrap
msgid "/assets/images/posts/stork-load-balancing/architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:30
#, fuzzy
msgid "You can find the source code on https://github.com/cescoffier/stork-load-balancing-playground[https://github.com/cescoffier/stork-load-balancing-playground]."
msgstr "你可以在 link:https://github.com/cescoffier/stork-load-balancing-playground[https://github.com/cescoffier/stork-load-balancing-playground] ，找到源代码。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:32
#, fuzzy
msgid "The system is composed of three service instances: blue, yellow, and green:"
msgstr "该系统由三个服务实例组成：蓝色、黄色和绿色。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:34
#, fuzzy
msgid "The blue instance returns 🔵 ."
msgstr "蓝色实例返回🔵。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:35
#, fuzzy
msgid "The yellow instance returns 🟡 . This service is slightly slower than the blue service."
msgstr "黄色实例返回🟡 。这个服务比蓝色服务稍微慢一些。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:36
#, fuzzy
msgid "The green instance returns 🟢 . It's the fastest but with a 20% chance of failing."
msgstr "绿色的实例返回🟢。这是最快的，但有20%的机会失败。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:38
#, fuzzy
msgid "The main application contains a REST Client configured to use stork:"
msgstr "主应用程序包含一个配置为使用stork的REST客户端。"

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:49
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"// The client delegates the discovery and selection to stork.\n"
"@RegisterRestClient(baseUri = \"stork://my-service\")\n"
"public interface Client {\n"
"   @GET\n"
"   @Produces(MediaType.TEXT_PLAIN)\n"
"   String invoke();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:52
#, fuzzy
msgid "The main endpoint delegates the invocation to the client:"
msgstr "主端点将调用委托给客户端。"

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:57
#, no-wrap
msgid ""
"@Path(\"/dispatcher\")\n"
"public class Dispatcher {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:60
#, no-wrap
msgid ""
"   @RestClient\n"
"   Client client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:66
#, no-wrap
msgid ""
"   @GET\n"
"   @Produces(MediaType.TEXT_PLAIN)\n"
"   public String invoke() {\n"
"       return client.invoke(); // just delegate to the REST client.\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:69
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:73
#, fuzzy
msgid "The UI (exposed on http://localhost:8080[http://localhost:8080]) allows you to invoke the `/dispatcher` endpoint ten times. It will use the REST Client ten times, which will lead to ten service selections.  These calls can be either:"
msgstr "UI（暴露在 link:http://localhost:8080[http://localhost:8080）] 允许你调用 `/dispatcher` 端点十次。它将使用REST客户端十次，这将导致十个服务的选择。这些调用可以是"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:75
#, fuzzy
msgid "Sequential calls: it calls the service ten times sequentially, waiting for the previous call to complete before emitting the next one. This approach preserves the ordering."
msgstr "顺序调用：它按顺序调用服务十次，在发出下一次调用之前，等待前一次调用的完成。这种方法保留了排序。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:76
#, fuzzy
msgid "Concurrent calls: it emits ten requests concurrently. You do not control how these requests are sent and the order they are received and processed."
msgstr "并发调用：它同时发出十个请求。你不能控制这些请求的发送方式以及接收和处理的顺序。"

#. type: Target for macro image
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:77
#, no-wrap
msgid "/assets/images/posts/stork-load-balancing/demo.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:80
#, fuzzy
msgid "Let's now look at the various load-balancing strategies offered by Stork."
msgstr "现在我们来看看Stork提供的各种负载平衡策略。"

#. type: Title ==
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:81
#, fuzzy, no-wrap
msgid "The round-robin strategy"
msgstr "循环战略"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:85
#, fuzzy
msgid "Stork uses a round-robin if you do not set any load balancing strategy.  When you call the service (either sequentially or concurrently), you get something like:"
msgstr "如果你不设置任何负载平衡策略，Stork会使用一个循环。当你调用该服务时（无论是顺序调用还是并发调用），你会得到类似的结果。"

#. type: Target for macro image
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:86
#, no-wrap
msgid "/assets/images/posts/stork-load-balancing/round-robin.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:91
#, fuzzy
msgid "Stork iterates over the available instances. So we can see 🔵 🟡 🟢 🔵 🟡 🟢 🔵 🟡 🟢 sequences.  It does not change the strategy when the call fails.  When the green instance fails (❌), it does not evict the instance, continues the iteration, and picks the blue instance, then the yellow instance, and then the green one again."
msgstr "Stork在可用的实例上进行迭代。所以我们可以看到🔵 🟡 🟢 🔵 🟡 🟢 🔵 🟢 的序列。当调用失败时，它不会改变策略。当绿色实例失败时（❌），它不驱逐该实例，继续迭代，并选择蓝色实例，然后是黄色实例，然后再选择绿色实例。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:94
#, fuzzy
msgid "The round-robin strategy is convenient to dispatch the load equally among a set of service instances.  When there is a failure, and when a retry is possible, you can use `@Retry` to use the next service instance."
msgstr "轮回策略便于在一组服务实例之间平均分配负载。当出现故障，并且有可能重试时，你可以使用 `@Retry` ，使用下一个服务实例。"

#. type: Title ==
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:95
#, fuzzy, no-wrap
msgid "The random strategy"
msgstr "随机策略"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:99
#, fuzzy
msgid "Unlike the round-robin, iterating over a set of service instances, the random strategy randomly picks an instance.  The following dependency provides the random strategy:"
msgstr "与在一组服务实例上迭代的round-robin不同，随机策略是随机地挑选一个实例。下面的依赖关系提供了随机策略。"

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:106
#, no-wrap
msgid ""
"<dependency>\n"
" <groupId>io.smallrye.stork</groupId>\n"
" <artifactId>stork-load-balancer-random</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:109
#, fuzzy
msgid "To use this load balancing strategy, you must configure the load balancer of your service:"
msgstr "要使用这种负载平衡策略，你必须配置你的服务的负载平衡器。"

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:113
#, no-wrap
msgid "quarkus.stork.my-service.load-balancer.type=random\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:116
#, fuzzy
msgid "As you can see in the picture below, it does not follow a pattern. So, the same service instance can be called multiple times consecutively."
msgstr "正如你在下图中看到的，它并不遵循一个模式。所以，同一个服务实例可以被连续调用多次。"

#. type: Target for macro image
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:117
#, no-wrap
msgid "/assets/images/posts/stork-load-balancing/random.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:123
#, fuzzy
msgid "This strategy does not share the load equally between the instances.  It can, in the worst case, pick a busy instance.  However, suppose the invoked service is also used by other applications (also using the random load balancing).  In that case, it can be convenient to share the load and avoid overloading a specific instance globally."
msgstr "这种策略并不是在各实例之间平均分担负载。在最坏的情况下，它可以选择一个繁忙的实例。然而，假设被调用的服务也被其他应用程序使用（也使用随机负载平衡）。在这种情况下，可以方便地分担负载，避免全局性地让某个特定实例超载。"

#. type: Title ==
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:124
#, fuzzy, no-wrap
msgid "Least-Requests"
msgstr "最少的请求"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:130
#, fuzzy
msgid "The two previous strategies do not monitor the invocations.  The _least-requests_ strategy does. When an instance is selected, it tracks the invocations, which counts the number of inflight requests in the case of this strategy.  When a call completes (successfully or not), it decrements the counter.  Thus, selecting an instance returns the instance with fewer inflight calls."
msgstr "前面的两个策略没有监控调用。 _最少请求的_ 策略则是这样。当一个实例被选中时，它跟踪调用，在这个策略中，它计算机上请求的数量。当一个调用完成时（无论成功与否），它就会递减该计数器。因此，选择一个实例会返回具有较少机内调用的实例。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:132
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:172
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:202
#, fuzzy
msgid "To use this strategy, you need the following dependency:"
msgstr "要使用这一策略，你需要以下依赖性。"

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:139
#, no-wrap
msgid ""
"<dependency>\n"
" <groupId>io.smallrye.stork</groupId>\n"
" <artifactId>stork-load-balancer-least-requests</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:142
#, fuzzy
msgid "You also need to configure the load balancer of your service:"
msgstr "你还需要配置你的服务的负载平衡器。"

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:146
#, no-wrap
msgid "quarkus.stork.my-service.load-balancer.type=least-requests\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:149
#, fuzzy
msgid "If you call the service sequentially, it always picks the same instance:"
msgstr "如果你连续调用该服务，它总是选择同一个实例。"

#. type: Target for macro image
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:150
#, no-wrap
msgid "/assets/images/posts/stork-load-balancing/least-requests-seq.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:154
#, fuzzy
msgid "Indeed, the number of inflight requests for the service is always 0, as it waits for the response before calling it another time.  However, when you call the service concurrently, this strategy becomes a lot more relevant:"
msgstr "事实上，该服务的机内请求数始终为0，因为它在等待响应后再调用它。然而，当你同时调用该服务时，这个策略就变得更有意义了。"

#. type: Target for macro image
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:155
#, no-wrap
msgid "/assets/images/posts/stork-load-balancing/least-requests-con.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:159
#, fuzzy
msgid "As the green service is the fastest, it gets called more frequently as inflight requests decrease quickly.  Thus, while the blue and yellow services still have inflight calls, the green service is back to 0 and selected."
msgstr "由于绿色服务是最快的，它被更频繁地调用，因为机上请求迅速减少。因此，当蓝色和黄色服务仍有机上呼叫时，绿色服务又回到了0并被选中。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:162
#, fuzzy
msgid "This strategy is convenient when you have services with an API having different response times.  For example, you can have endpoints answering quickly and endpoints doing a lot more work, thus taking more time."
msgstr "当你有API的服务有不同的响应时间时，这种策略很方便。例如，你可以让端点快速回答，而端点则做更多的工作，从而花费更多的时间。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:165
#, fuzzy
msgid "This strategy has one drawback.  If you have many service instances, you need to iterate over the whole set to find the one to pick."
msgstr "这个策略有一个缺点。如果你有很多服务实例，你需要在整个集合上迭代以找到要挑选的实例。"

#. type: Title ==
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:166
#, fuzzy, no-wrap
msgid "The power of two random choices"
msgstr "两个随机选择的力量"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:170
#, fuzzy
msgid "This strategy extends the _least-request_ one and addresses the drawback mentioned above.  Instead of iterating over the whole list of instances, it picks two instances randomly and selects the one with the fewer inflight requests."
msgstr "这个策略扩展了 _最少请求的_ 策略，解决了上面提到的缺点。它不是在整个实例列表上迭代，而是随机挑选两个实例，并选择机上请求较少的那个。"

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:179
#, no-wrap
msgid ""
"<dependency>\n"
" <groupId>io.smallrye.stork</groupId>\n"
" <artifactId>stork-load-balancer-power-of-two-choices</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:182
#, fuzzy
msgid "You also need to configure the load balancer for the service:"
msgstr "你还需要为该服务配置负载平衡器。"

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:186
#, no-wrap
msgid "quarkus.stork.my-service.load-balancer.type=power-of-two-choices\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:189
#, fuzzy
msgid "The results are similar to the _least-request_ as we have only three instances:"
msgstr "结果与 _最小请求_ 相似，因为我们只有三个实例。"

#. type: Target for macro image
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:190
#, no-wrap
msgid "/assets/images/posts/stork-load-balancing/power-of-two-choices.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:194
#, fuzzy
msgid "However, this strategy is less expensive when you have many instances and when the iteration takes too much time.  In the worst case, it would pick the two most busy instances and select the one with fewer requests."
msgstr "然而，当你有很多实例和迭代需要太多时间时，这种策略的成本较低。在最坏的情况下，它将挑选两个最忙的实例，并选择请求较少的那个。"

#. type: Title ==
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:195
#, fuzzy, no-wrap
msgid "Least response time"
msgstr "最短的响应时间"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:200
#, fuzzy
msgid "The least response time keeps track of the response time and failures.  Thus, it selects the fastest instances.  That strategy handles failures by adding a penalty to failing instances."
msgstr "最短响应时间记录了响应时间和失败情况。因此，它选择最快的实例。该策略通过给失败的实例增加惩罚来处理失败。"

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:209
#, no-wrap
msgid ""
"<dependency>\n"
" <groupId>io.smallrye.stork</groupId>\n"
" <artifactId>stork-load-balancer-least-response-time</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:212
#, fuzzy
msgid "You also need to configure the load-balancer for the service:"
msgstr "你还需要为服务配置负载平衡器。"

#. type: delimited block -
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:216
#, no-wrap
msgid "quarkus.stork.my-service.load-balancer.type=least-response-time\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:220
#, fuzzy
msgid "This strategy selects the green instance more often.  However, due to the chance of failure, it will also pick the other ones once in a while."
msgstr "这种策略更经常地选择绿色实例。然而，由于有失败的机会，它也会偶尔选择其他的。"

#. type: Target for macro image
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:221
#, no-wrap
msgid "/assets/images/posts/stork-load-balancing/least-response-time.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:223
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:227
#, fuzzy
msgid "This blog post has presented the load balancing strategies offered by Stork.  You can find the full list on http://smallrye.io/smallrye-stork/latest[the Stork web site]."
msgstr "这篇博文介绍了Stork提供的负载平衡策略。你可以在 link:http://smallrye.io/smallrye-stork/latest[Stork网站] 上找到完整的列表。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:230
#, fuzzy
msgid "Strategies like `random` or `round-robin` allow dispatching the load between instances.  The `least-request`, `power-of-two-choices`, and `least-response-time` strategies monitor the calls to select the less loaded or fastest instance."
msgstr "像 `random` 或 `round-robin` 这样的策略允许在实例之间调度负载。 `least-request` , `power-of-two-choices` , 和 `least-response-time` 策略监控调用以选择负载较少或最快的实例。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:232
#, fuzzy
msgid "If these strategies do not fit your requirements, that's not a problem because http://smallrye.io/smallrye-stork/latest/load-balancer/custom-load-balancer/[you can implement your own] and craft the perfect selection algorithm."
msgstr "如果这些策略不符合你的要求，那也不是问题，因为 link:http://smallrye.io/smallrye-stork/latest/load-balancer/custom-load-balancer/[你可以实现你自己的] 策略，并制作完美的选择算法。"

#. type: Plain text
#: upstream/_posts/2022-07-15-stork-load-balancing.adoc:234
msgid "You can also learn more about Stork and it integration in Quarkus in the http://smallrye.io/smallrye-stork/latest/quarkus/[Using Stork with Quarkus guide]."
msgstr ""
