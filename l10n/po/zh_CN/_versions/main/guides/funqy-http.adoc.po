# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-12 02:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/funqy-http.adoc:6
#, no-wrap
msgid "Funqy HTTP Binding (Standalone)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:16
msgid "The guide walks through quickstart code to show you how you can deploy Funqy as a standalone service and invoke on Funqy functions using HTTP."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:23
msgid "The Funqy HTTP binding is not a replacement for REST over HTTP.  Because Funqy needs to be portable across a lot of different protocols and function providers its HTTP binding is very minimalistic and you will lose REST features like linking and the ability to leverage HTTP features like cache-control and conditional GETs.  You may want to consider using Quarkus's Jakarta REST, Spring MVC, or Vert.x Web Reactive Routes support instead, although Funqy will have less overhead than these alternatives (except Vert.x which is still super fast)."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:24
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:29
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:30
#, no-wrap
msgid "The Quickstart"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:33
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:35
msgid "The solution is located in the `funqy-http-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:36
#, no-wrap
msgid "The Code"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:40
msgid "If you look at the Java code, you'll see that there is no HTTP specific API.  Its just simple Java methods annotated with `@Funq`.  Simple, easy, straightforward."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:41
#, no-wrap
msgid "Maven Dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:44
msgid "To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:51
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-funqy-http</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:53
#, no-wrap
msgid "Build Project"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:58
#, no-wrap
msgid "mvn clean quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:61
msgid "This starts your functions in Quarkus dev mode."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:62
#, no-wrap
msgid "Execute Funqy HTTP functions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:66
msgid "The URL path to execute a function is the function name.  For example if your function name is `foo` then the URL path to execute the function would be `/foo`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:70
msgid "The HTTP POST or GET methods can be used to invoke on a function.  The return value of the function is marshalled to JSON using the Jackson JSON library.  Jackson annotations can be used.  If your function has an input parameter, a POST invocation must use JSON as the input type.  Jackson is also used here for unmarshalling."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:73
msgid "You can invoke the `hello` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] by pointing your browser to http://localhost:8080/hello"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:77
msgid "Invoking the other functions in the quickstart requires an HTTP POST.  To execute the `greet` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.java] invoke this curl script."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:84
#, no-wrap
msgid ""
"curl \"http://localhost:8080/greet\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '{\"name\":\"Bill\"}'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:89
msgid "Primitive types can also be passed as input using the standard JSON mapping for them.  To execute the `toLowerCase` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] invoke this curl script:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:96
#, no-wrap
msgid ""
"curl \"http://localhost:8080/toLowerCase\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '\"HELLO WORLD\"'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:100
msgid "To execute the `double` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] invoke this curl script:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:107
#, no-wrap
msgid ""
"curl \"http://localhost:8080/double\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '2'\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:109
#, no-wrap
msgid "GET Query Parameter Mapping"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:115
msgid "For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.  Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple `Map`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:122
#, no-wrap
msgid ""
"@Funq\n"
"public String hello(Map<String, Integer> map) {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:126
msgid "Key values must be a primitive type (except char) or `String`.  Values can be primitives (except char), `String`, `OffsetDateTime` or a complex bean style class.  For the above example, here's the corresponding curl request:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:130
#, no-wrap
msgid "curl \"http://localhost:8080/a=1&b=2\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:133
msgid "The `map` input parameter of the `hello` function would have the key value pairs: `a`->1, `b`->2."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:135
msgid "Bean style classes can also be use as the input parameter type.  Here's an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:141
#, no-wrap
msgid ""
"public class Person {\n"
"    String first;\n"
"    String last;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:147
#, no-wrap
msgid ""
"    public String getFirst() { return first; }\n"
"    public void setFirst(String first) { this.first = first; }\n"
"    public String getLast() { return last; }\n"
"    public void setLast(String last) { this.last = last; }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:154
#, no-wrap
msgid ""
"public class MyFunctions {\n"
"    @Funq\n"
"    public String greet(Person p) {\n"
"       return \"Hello \" + p.getFirst() + \" \" + p.getLast();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:158
msgid "Property values can be any primitive type except `char`. It can also be `String`, and `OffsetDateTime`.  `OffsetDateTime` query param values must be in ISO-8601 format."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:160
msgid "You can invoke on this using an HTTP GET and query parameters:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:164
#, no-wrap
msgid "curl \"http://localhost:8080/greet?first=Bill&last=Burke\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:167
msgid "In the above request, the query parameter names are mapped to corresponding properties in the input class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:169
msgid "The input class can also have nested bean classes.  Expanding on the previous example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:175
#, no-wrap
msgid ""
"public class Family {\n"
"    private Person dad;\n"
"    private Person mom;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:181
#, no-wrap
msgid ""
"    public Person getDad() { return dad; }\n"
"    public void setDad(Person dad) { this.dad = dad; }\n"
"    public Person getMom() { return mom; }\n"
"    public void setMom(Person mom) { this.mom = mom; }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:188
#: upstream/_versions/main/guides/funqy-http.adoc:214
#: upstream/_versions/main/guides/funqy-http.adoc:241
#: upstream/_versions/main/guides/funqy-http.adoc:273
#: upstream/_versions/main/guides/funqy-http.adoc:298
#, no-wrap
msgid ""
"public class MyFunctions {\n"
"    @Funq\n"
"    public String greet(Family family) {\n"
"       ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:192
msgid "In this case, query parameters for nested values use the `.` notation.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:196
#, no-wrap
msgid "curl \"http://localhost:8080/greet?dad.first=John&dad.last=Smith&mom.first=Martha&mom.last=Smith\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:199
msgid "`java.util.List` and `Set` are also supported as property values.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:204
#: upstream/_versions/main/guides/funqy-http.adoc:231
#: upstream/_versions/main/guides/funqy-http.adoc:263
#: upstream/_versions/main/guides/funqy-http.adoc:288
#, no-wrap
msgid ""
"public class Family {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:207
#, no-wrap
msgid ""
"    List<String> pets;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:218
msgid "To invoke a GET request, just list the `pets` query parameter multiple times."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:222
#, no-wrap
msgid "curl \"http://localhost:8080/greet?pets=itchy&pets=scratchy\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:226
msgid "For more complex types, `List` and `Set` members must have an identifier in the query parameter.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:234
#, no-wrap
msgid ""
"    List<Person> kids;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:247
msgid "Each `kids` query parameter must identify the kid they are referencing so that the runtime can figure out which property values go to which members in the list.  Here's the curl request:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:251
#, no-wrap
msgid "curl \"http://localhost:8080/greet?kids.1.first=Buffy&kids.2.first=Charlie\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:255
msgid "The above URL uses the value `1` and `2` to identity the target member of the list, but any unique string can be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:258
msgid "A property can also be a `java.util.Map`.  The key of the map can be any primitive type and `String`.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:266
#, no-wrap
msgid ""
"    Map<String, String> address;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:276
msgid "The corresponding call would look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:280
#, no-wrap
msgid "curl \"http://localhost:8080/greet?address.state=MA&address.city=Boston\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:283
msgid "If your `Map` value is a complex type, then just continue the notation by adding the property to set at the end."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:291
#, no-wrap
msgid ""
"    Map<String, Address> addresses;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:303
#, no-wrap
msgid "curl \"http://localhost:8080/greet?addresses.home.state=MA&addresses.home.city=Boston\"\n"
msgstr ""
