# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-23 03:48+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/picocli.adoc:6
#, no-wrap
msgid "Command Mode with Picocli"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:11
msgid "https://picocli.info/[Picocli] is an open source tool for creating rich command line applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:13
msgid "Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:15
msgid "If you are not familiar with the Quarkus Command Mode, consider reading the xref:command-mode-reference.adoc[Command Mode reference guide] first."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:16
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:20
msgid "Once you have your Quarkus project configured you can add the `picocli` extension to your project by running the following command in your project base directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:25
#: upstream/_versions/main/guides/picocli.adoc:300
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:32
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-picocli</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:34
#, no-wrap
msgid "Simple command line application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:37
msgid "Simple PicocliApplication with only one `Command` can be created as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:41
#: upstream/_versions/main/guides/picocli.adoc:101
#: upstream/_versions/main/guides/picocli.adoc:136
#: upstream/_versions/main/guides/picocli.adoc:242
#, no-wrap
msgid "package com.acme.picocli;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:43
#, no-wrap
msgid "import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:46
#, no-wrap
msgid ""
"import javax.enterprise.context.Dependent;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:49
#, no-wrap
msgid ""
"@CommandLine.Command // <1>\n"
"public class HelloCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:52
#, no-wrap
msgid ""
"    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n"
"    String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:54
#, no-wrap
msgid "    private final GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:58
#, no-wrap
msgid ""
"    public HelloCommand(GreetingService greetingService) { // <2>\n"
"        this.greetingService = greetingService;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:64
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        greetingService.sayHello(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:71
#, no-wrap
msgid ""
"@Dependent\n"
"class GreetingService {\n"
"    void sayHello(String name) {\n"
"        System.out.println(\"Hello \" + name + \"!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:73
msgid "If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:74
msgid "All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:78
msgid "Beans with `@CommandLine.Command` should not use proxied scopes (e.g. do not use `@ApplicationScope`)  because Picocli will not be able to set field values in such beans. This extension will register classes with `@CommandLine.Command` annotation using `@Depended` scope. If you need to use proxied scope, then annotate setter and not field, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:84
#, no-wrap
msgid ""
"@CommandLine.Command\n"
"@ApplicationScoped\n"
"public class EntryCommand {\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:89
#, no-wrap
msgid ""
"    @CommandLine.Option(names = \"-n\")\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:91
#: upstream/_versions/main/guides/picocli.adoc:191
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:93
#, no-wrap
msgid "Command line application with multiple Commands"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:97
msgid "When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.  This can be overwritten with the `quarkus.picocli.top-command` property."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:104
#, no-wrap
msgid ""
"import io.quarkus.picocli.runtime.annotations.TopCommand;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:109
#, no-wrap
msgid ""
"@TopCommand\n"
"@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n"
"public class EntryCommand {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:112
#, no-wrap
msgid ""
"@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n"
"class HelloCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:118
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"Hello World!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:121
#, no-wrap
msgid ""
"@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n"
"class GoodByeCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:127
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"Goodbye World!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:129
#, no-wrap
msgid "Customizing Picocli CommandLine instance"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:132
msgid "You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:140
#, no-wrap
msgid ""
"import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n"
"import io.quarkus.picocli.runtime.annotations.TopCommand;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:143
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:149
#, no-wrap
msgid ""
"@TopCommand\n"
"@CommandLine.Command\n"
"public class EntryCommand implements Runnable {\n"
"    @CommandLine.Spec\n"
"    CommandLine.Model.CommandSpec spec;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:155
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"My name is: \" + spec.name());\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:158
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:164
#, no-wrap
msgid ""
"    @Produces\n"
"    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n"
"        return factory.create().setCommandName(\"CustomizedName\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:166
msgid "`PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:167
#, no-wrap
msgid "Different entry command for each profile"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:170
msgid "It is possible to create different entry command for each profile, using `@IfBuildProfile`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:175
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Config {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:182
#, no-wrap
msgid ""
"    @Produces\n"
"    @TopCommand\n"
"    @IfBuildProfile(\"dev\")\n"
"    public Object devCommand() {\n"
"        return DevCommand.class; // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:189
#, no-wrap
msgid ""
"    @Produces\n"
"    @TopCommand\n"
"    @IfBuildProfile(\"prod\")\n"
"    public Object prodCommand() {\n"
"        return new ProdCommand(\"Configured by me!\");\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:193
msgid "You can return instance of `java.lang.Class` here. In such case `CommandLine` will try to instantiate this class using `CommandLine.IFactory`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:194
#, no-wrap
msgid "Configure CDI Beans with parsed arguments"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:199
msgid "You can use `Event<CommandLine.ParseResult>` or just `CommandLine.ParseResult` to configure CDI beans based on arguments parsed by Picocli.  This event will be generated in `QuarkusApplication` class created by this extension. If you are providing your own `@QuarkusMain` this event will not be raised.  `CommandLine.ParseResult` is created from default `CommandLine` bean."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:204
#, no-wrap
msgid ""
"@CommandLine.Command\n"
"public class EntryCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:207
#, no-wrap
msgid ""
"    @CommandLine.Option(names = \"-c\", description = \"JDBC connection string\")\n"
"    String connectionString;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:210
#, no-wrap
msgid ""
"    @Inject\n"
"    DataSource dataSource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:220
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        try (Connection c = dataSource.getConnection()) {\n"
"            // Do something\n"
"        } catch (SQLException throwables) {\n"
"            // Handle error\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:223
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class DatasourceConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:232
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped // <1>\n"
"    DataSource dataSource(CommandLine.ParseResult parseResult) {\n"
"        PGSimpleDataSource ds = new PGSimpleDataSource();\n"
"        ds.setURL(parseResult.matchedOption(\"c\").getValue().toString());\n"
"        return ds;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:234
msgid "`@ApplicationScoped` used for lazy initialization"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:235
#, no-wrap
msgid "Providing own QuarkusMain"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:238
msgid "You can also provide your own application entry point annotated with `QuarkusMain` (as described in xref:command-mode-reference.adoc[Command Mode reference guide])."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:246
#, no-wrap
msgid ""
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:248
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:254
#, no-wrap
msgid ""
"@QuarkusMain\n"
"@CommandLine.Command(name = \"demo\", mixinStandardHelpOptions = true)\n"
"public class ExampleApp implements Runnable, QuarkusApplication {\n"
"    @Inject\n"
"    CommandLine.IFactory factory; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:259
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        // business logic\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:265
#, no-wrap
msgid ""
"    @Override\n"
"    public int run(String... args) throws Exception {\n"
"        return new CommandLine(this, factory).execute(args);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:267
msgid "Quarkus-compatible `CommandLine.IFactory` bean created by `picocli` extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:268
#, no-wrap
msgid "Native mode support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:271
msgid "This extension uses the Quarkus standard build steps mechanism to support GraalVM Native images. In the exceptional case that incompatible changes in a future picocli release cause any issue, the following configuration can be used to fall back to the annotation processor from the picocli project as a temporary workaround:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:278
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>info.picocli</groupId>\n"
"  <artifactId>picocli-codegen</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:281
msgid "For Gradle, you need to add the following in `dependencies` section of the `build.gradle` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:286
#, no-wrap
msgid ""
"annotationProcessor enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
"annotationProcessor 'info.picocli:picocli-codegen'\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:288
#, no-wrap
msgid "Development Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:291
msgid "In the development mode, i.e. when running `mvn quarkus:dev`, the application is executed and restarted every time the `Space bar` key is pressed. You can also pass arguments to your command line app via the `quarkus.args` system property, e.g. `mvn quarkus:dev -Dquarkus.args='--help'` and `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:292
#, no-wrap
msgid "Kubernetes support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:295
msgid "Once you have your command line application, you can also generate the resources necessary to install and use this application in Kubernetes by adding the `kubernetes` extension. To install the `kubernetes` extension, run the following command in your project base directory."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:307
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:310
msgid "And, next, build the application with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:314
msgid "The Kubernetes extension will detect the presence of the Picocli extension and hence generate a https://kubernetes.io/docs/concepts/workloads/controllers/job/[Job] resource instead of a https://kubernetes.io/docs/concepts/workloads/controllers/deployment/[Deployment] resource in the `target/kubernetes/` directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:316
msgid "If you don't want to generate a Job resource, you can specify the resource you want to generate using the property `quarkus.kubernetes.deployment-kind`. For example, if you want to generate a Deployment resource, use `quarkus.kubernetes.deployment-kind=Deployment`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:318
msgid "Moreover, you can provide the arguments that will be used by the Kubernetes job via the property `quarkus.kubernetes.arguments`. For example, after adding the property `quarkus.kubernetes.arguments=A,B` and building your project, the following Job resource will be generated:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/picocli.adoc:359
#, no-wrap
msgid ""
"apiVersion: batch/v1\n"
"kind: Job\n"
"metadata:\n"
"  labels:\n"
"    app.kubernetes.io/name: app\n"
"    app.kubernetes.io/version: 0.1-SNAPSHOT\n"
"  name: app\n"
"spec:\n"
"  completionMode: NonIndexed\n"
"  selector:\n"
"    matchLabels:\n"
"      app.kubernetes.io/name: app\n"
"      app.kubernetes.io/version: 0.1-SNAPSHOT\n"
"  suspend: false\n"
"  template:\n"
"    metadata:\n"
"      labels:\n"
"        app.kubernetes.io/name: app\n"
"        app.kubernetes.io/version: 0.1-SNAPSHOT\n"
"    spec:\n"
"      containers:\n"
"        - args:\n"
"            - A\n"
"            - B\n"
"          env:\n"
"            - name: KUBERNETES_NAMESPACE\n"
"              valueFrom:\n"
"                fieldRef:\n"
"                  fieldPath: metadata.namespace\n"
"          image: docker.io/user/app:0.1-SNAPSHOT\n"
"          imagePullPolicy: Always\n"
"          name: app\n"
"          ports:\n"
"            - containerPort: 8080\n"
"              name: http\n"
"              protocol: TCP\n"
"      restartPolicy: OnFailure\n"
"      terminationGracePeriodSeconds: 10\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/picocli.adoc:363
msgid "Finally, the Kubernetes job will be launched every time it is installed in Kubernetes. You can know more about how to run Kubernetes jobs in this https://kubernetes.io/docs/concepts/workloads/controllers/job/#running-an-example-job[document]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/picocli.adoc:365
#, no-wrap
msgid "Configuration Reference"
msgstr ""
