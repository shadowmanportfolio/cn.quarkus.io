# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-31 02:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:7
#, no-wrap
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:12
msgid "To protect your web applications, you can use the authorization code flow mechanism provided by the Quarkus OpenID Connect (OIDC) extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:13
#, no-wrap
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:16
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:20
msgid "The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.  After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.  Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:22
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:23
#, no-wrap
msgid "Authorization code flow mechanism in Quarkus"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:24
#, no-wrap
msgid "Authorization"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:24
#, no-wrap
msgid "authorization_code_flow.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:26
msgid "The Quarkus user requests access to a Quarkus web-app application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:27
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:28
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:29
msgid "At the prompt, the user enters their user credentials."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:30
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code then redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:31
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:34
msgid "The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.  The following tokens are issued:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:36
msgid "ID token: The Quarkus web-app uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web-app."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:37
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or propagate it to another endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:38
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:40
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:42
msgid "To learn about how you can protect web applications by using the OIDC authorization code flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:45
msgid "If you want to protect your applications by using Bearer Token authentication, see xref:security-oidc-bearer-token-authentication-concept.adoc[OIDC Bearer authentication].  For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:46
#, no-wrap
msgid "Using the authorization code flow mechanism"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:49
#, no-wrap
msgid "Accessing ID and access tokens"
msgstr ""

#. SJ: new concept topic to describe the different token types and usage proposed in next iteration
#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:52
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token, and Refresh Token."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:55
msgid "ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.  One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:62
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:66
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:90
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:70
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:76
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:79
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged-in user. The raw access token can be accessed as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:86
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:93
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:97
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:103
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:108
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:111
msgid "Note that `AccessTokenCredential` will have to be used if the Access Token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to `JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:113
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:115
msgid "RefreshToken is only used to refresh the current ID and access tokens as part of its xref:session-management[session management] process."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:117
#, no-wrap
msgid "User info"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:120
msgid "If the ID token does not provide enough information about the currently-authenticated user, then you can set a `quarkus.oidc.authentication.user-info-required=true` property for a https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC userinfo endpoint to be requested."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:122
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:124
#, no-wrap
msgid "Configuration metadata"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:127
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:129
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:131
#, no-wrap
msgid "Token claims and SecurityIdentity roles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:134
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication-concept.adoc[Bearer tokens] with the only difference being that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:136
msgid "Note if you use Keycloak then you should set a `microprofile_jwt` client scope for ID token to contain a `groups` claim, please see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide] for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:138
msgid "If only the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:140
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:142
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles. For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:144
#, no-wrap
msgid "Token verification and introspection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:147
msgid "Please see xref:security-oidc-bearer-token-authentication-concept.adoc#token-verification-introspection[Token Verification And Introspection] for details about how the tokens are verified and introspected."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:149
msgid "Note that in case of `web-app` applications only `IdToken` is verified by default since the access token is not used by default to access the current Quarkus `web-app` endpoint and instead meant to be propagated to the services expecting this access token, for example, to the OpenID Connect Provider's UserInfo endpoint, and so on. However, if you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:151
#, no-wrap
msgid "Token introspection and UserInfo cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:154
msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles but will be used to get `UserInfo`. So there will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:156
msgid "Please see xref:security-oidc-bearer-token-authentication-concept.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:158
#, no-wrap
msgid "JSON web token claim verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:162
msgid "Please see xref:security-oidc-bearer-token-authentication-concept.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.  It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:163
#, no-wrap
msgid "Redirection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:166
msgid "When the user is redirected to the OpenID Connect Provider to authenticate, the redirect URL includes a `redirect_uri` query parameter which indicates to the provider where the user has to be redirected to once the authentication has been completed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:168
msgid "Quarkus will set this parameter to the current request URL by default. For example, if the user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/1`. Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/2`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:171
msgid "OpenID Connect Providers may be configured to require the `redirect_uri` parameter to have the same value (e.g. `http://localhost:8080/service/callback`) for all the redirect URLs.  In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback` which will be the same regardless of the current request URL."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:173
msgid "If `quarkus.oidc.authentication.redirect-path` is set but the original request URL has to be restored after the user has been redirected back to a callback URL such as `http://localhost:8080/service/callback` then a `quarkus.oidc.authentication.restore-path-after-redirect` property has to be set to `true` which will restore the request URL such as `http://localhost:8080/service/1`, and so on."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:175
#, no-wrap
msgid "Cookies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:178
msgid "The OIDC adapter uses cookies to keep the session, code flow, and post-logout state."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:180
msgid "`quarkus.oidc.authentication.cookie-path` property is used to ensure the cookies are visible especially when you access the protected resources with overlapping or different roots, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:182
msgid "`/index.html` and `/web-app/service`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:183
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:184
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:186
msgid "`quarkus.oidc.authentication.cookie-path` is set to `/` by default but can be narrowed to the more specific root path such as `/web-app`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:189
msgid "You can also set a `quarkus.oidc.authentication.cookie-path-header` property if the cookie path needs to be set dynamically.  For example, setting `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` means that the value of HTTP `X-Forwarded-Prefix` header will be used to set a cookie path."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:191
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:193
msgid "If your application is deployed across multiple domains, make sure to set a `quarkus.oidc.authentication.cookie-domain` property for the session cookie be visible to all protected Quarkus services, for example, if you have 2 services deployed at:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:195
msgid "https://whatever.wherever.company.net/"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:196
msgid "https://another.address.company.net/"
msgstr ""

#. SJ: In next iteration, propose to recompose Logout information into a new concept topic
#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:198
msgid "then the `quarkus.oidc.authentication.cookie-domain` property must be set to `company.net`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:200
#, no-wrap
msgid "Logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:203
msgid "By default, the logout is based on the expiration time of the ID Token issued by the OpenID Connect Provider. When the ID Token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OpenID Connect Provider again to authenticate. If the session at the OpenID Connect Provider is still active, users are automatically re-authenticated without having to provide their credentials again."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:205
msgid "The current user session may be automatically extended by enabling a `quarkus.oidc.token.refresh-expired` property. If it is set to `true` then when the current ID Token expires a Refresh Token Grant will be used to refresh ID Token as well as Access and Refresh Tokens."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:207
#, no-wrap
msgid "User-initiated logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:211
msgid "Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.  For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:213
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:215
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:217
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a Jakarta REST filter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:219
msgid "Note that a cookie name will vary when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:221
msgid "Here is an example of how to configure an RP initiated logout flow:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:228
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:284
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:305
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:232
#, no-wrap
msgid ""
"quarkus.oidc.logout.path=/logout\n"
"# Logged-out users should be returned to the /welcome.html site which will offer an option to re-login:\n"
"quarkus.oidc.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:236
#, no-wrap
msgid ""
"# Only the authenticated users can initiate a logout:\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:240
#, no-wrap
msgid ""
"# All users can see the welcome page:\n"
"quarkus.http.auth.permission.public.paths=/welcome.html\n"
"quarkus.http.auth.permission.public.policy=permit\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:244
msgid "You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources which is `/` in this example.  For more information, see the xref:oidc-cookies[Cookies] section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:246
msgid "Note that some OpenID Connect providers do not support https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification (possibly because it is still technically a draft) and do not return an OpenID Connect well-known `end_session_endpoint` metadata property. However, it should not be a problem since these providers' specific logout mechanisms may only differ in how the logout URL query parameters are named."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:248
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter which will not be recognized by the providers which do not support this specification."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:250
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:257
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-xxx.us.auth0.com\n"
"quarkus.oidc.client-id=redacted\n"
"quarkus.oidc.credentials.secret=redacted\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:260
#, no-wrap
msgid ""
"quarkus.oidc.tenant-logout.logout.path=/logout\n"
"quarkus.oidc.tenant-logout.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:265
#, no-wrap
msgid ""
"# Auth0 does not return the `end_session_endpoint` metadata property, configure it instead\n"
"quarkus.oidc.end-session-path=v2/logout\n"
"# Auth0 will not recognize the 'post_logout_redirect_uri' query parameter so make sure it is named as 'returnTo'\n"
"quarkus.oidc.logout.post-logout-uri-param=returnTo\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:269
#, no-wrap
msgid ""
"# Set more properties if needed.\n"
"# For example, if 'client_id' is provided then a valid logout URI should be set as Auth0 Application property, without it - as Auth0 Tenant property.\n"
"quarkus.oidc.logout.extra-params.client_id=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:272
#, no-wrap
msgid "Back-channel logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:275
msgid "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] is used by OpenID Connect providers to log out the current user from all the applications this user is currently logged in, bypassing the user agent."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:277
msgid "You can configure Quarkus to support `Back-Channel Logout` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:286
#, no-wrap
msgid "quarkus.oidc.logout.backchannel.path=/back-channel-logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:289
msgid "Absolute `Back-Channel Logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`. You will need to configure this URL in the Admin Console of your OpenID Connect Provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:291
msgid "Note that you will also need to configure a token age property for the logout token verification to succeed if your OpenID Connect Provider does not set an expiry claim in the current logout token, for example, `quarkus.oidc.token.age=10S` sets a number of seconds that must not elapse since the logout token's `iat` (issued at) time to 10."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:293
#, no-wrap
msgid "Front-channel logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:296
msgid "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-Channel Logout] can be used to logout the current user directly from the user agent."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:298
msgid "You can configure Quarkus to support `Front-Channel Logout` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:307
#, no-wrap
msgid "quarkus.oidc.logout.frontchannel.path=/front-channel-logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:310
msgid "This path will be compared against the current request's path and the user will be logged out if these paths match."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:312
#, no-wrap
msgid "Local logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:315
msgid "If you work with a social provider such as Google and are concerned that the users can be logged out from all their Google applications with the xref:user-initiated-logout[User-initiated logout] which redirects the users to the provider's logout endpoint then you can support a local logout with the help of the xref:oidc-session[OidcSession] which only clears the local session cookie, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:321
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:323
#, no-wrap
msgid "import io.quarkus.oidc.OidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:326
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class ServiceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:329
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcSession oidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:336
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"logout\")\n"
"    public String logout() {\n"
"        oidcSession.logout().await().indefinitely();\n"
"        return \"You are logged out\".\n"
"    }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:339
#, no-wrap
msgid "Session management"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:342
msgid "If you have a xref:security-oidc-bearer-token-authentication-concept.adoc#single-page-applications[Single Page Application for Service Applications] where your OpenID Connect Provider script such as `keycloak.js` is managing an authorization code flow then that script will also control the SPA authentication session lifespan."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:344
msgid "If you work with a Quarkus OIDC `web-app` application then it is Quarkus OIDC Code Authentication mechanism which is managing the user session lifespan."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:346
msgid "The session age is calculated by adding the lifespan value of the current IDToken and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties. Of the last two properties only `quarkus.oidc.authentication.session-age-extension` should be used to significantly extend the session lifespan if required since `quarkus.oidc.token.lifespan-grace` is only meant for taking some small clock skews into consideration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:348
msgid "When the currently authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired then, by default, the user will be auto-redirected to the OIDC Authorization endpoint to re-authenticate. Most likely the OIDC provider will challenge the user again though not necessarily if the session between the user and this OIDC provider is still active which may happen if it is configured to last longer than the ID token."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:350
msgid "If the `quarkus.oidc.token.refresh-expired` then the expired ID token (as well as the access token) will be refreshed using the refresh token returned with the authorization code grant response. This refresh token may also be recycled (refreshed) itself as part of this process. As a result the new session cookie will be created and the session will be extended."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:352
msgid "Note, `quarkus.oidc.authentication.session-age-extension` can be important when dealing with expired ID tokens, when the user is not very active. In such cases, if the ID token expires, then the session cookie may not be returned to the Quarkus endpoint during the next user request and Quarkus will assume it is the first authentication request. Therefore, using `quarkus.oidc.authentication.session-age-extension` is important if you need to have even the expired ID tokens refreshed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:354
msgid "You can also complement refreshing the expired ID tokens by proactively refreshing the valid ID tokens which are about to be expired within the `quarkus.oidc.token.refresh-token-time-skew` value. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:356
msgid "You can have this process further optimized by having a simple JavaScript function periodically emulating the user activity by pinging your Quarkus endpoint thus minimizing the window during which the user may have to be re-authenticated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:358
msgid "Note this user session can not be extended forever - the returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:360
#, no-wrap
msgid "OidcSession"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:363
msgid "`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`. It can help to perform a xref:local-logout[Local logout], retrieve the current session's tenant identifier and check when the session will expire. More useful methods will be added to it over time."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:365
#, no-wrap
msgid "TokenStateManager"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:368
msgid "OIDC `CodeAuthenticationMechanism` is using the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access and refresh tokens returned in the authorization code or refresh grant responses in a session cookie. It makes Quarkus OIDC endpoints completely stateless."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:370
msgid "Note that some endpoints do not require the access token. An access token is only required if the endpoint needs to retrieve `UserInfo` or access the downstream service with this access token or use the roles associated with the access token (the roles in the ID token are checked by default). In such cases you can set either `quarkus.oidc.token-state-manager.strategy=id-refresh-token` (keep ID and refresh tokens only) or `quarkus.oidc.token-state-manager.strategy=id-token` (keep ID token only)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:373
msgid "If the ID, access and refresh tokens are JWT tokens then combining all of them (if the strategy is the default `keep-all-tokens`) or only ID and refresh tokens (if the strategy is `id-refresh-token`) may produce a session cookie value larger than 4KB and the browsers may not be able to keep this cookie.  In such cases, you can use `quarkus.oidc.token-state-manager.split-tokens=true` to have a unique session token per each of these tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:376
msgid "Note that `TokenStateManager` will encrypt the tokens before storing them in the session cookie.  For example, here is how you configure it to split the tokens and encrypt them:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:385
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.token-state-manager.split-tokens=true\n"
"quarkus.oidc.token-state-manager.encryption-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:388
msgid "The token encryption secret must be at least 32 characters long. If this key is not configured then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:390
msgid "`quarkus.oidc.token-state-manager.encryption-secret` should be configured if Quarkus authenticates to OpenId Connect Provider using either mTLS or `private_key_jwt` (where a private RSA or EC key is used to sign a JWT token) authentication methods, otherwise a random key will be generated which will be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:392
msgid "If you need you can disable encrypting the tokens in the session cookie with `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:394
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie. For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:396
msgid "Here is a simple example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:400
#, no-wrap
msgid "package io.quarkus.oidc.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:405
#, no-wrap
msgid ""
"import jakarta.annotation.Priority;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.inject.Alternative;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:412
#, no-wrap
msgid ""
"import io.quarkus.oidc.AuthorizationCodeTokens;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TokenStateManager;\n"
"import io.quarkus.oidc.runtime.DefaultTokenStateManager;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:417
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Alternative\n"
"@Priority(1)\n"
"public class CustomTokenStateManager implements TokenStateManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:420
#, no-wrap
msgid ""
"    @Inject\n"
"    DefaultTokenStateManager tokenStateManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:427
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            AuthorizationCodeTokens sessionContent, TokenStateManager.CreateTokenStateRequestContext requestContext) {\n"
"        return tokenStateManager.createTokenState(routingContext, oidcConfig, sessionContent, requestContext)\n"
"                .map(t -> (t + \"|custom\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:437
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            String tokenState, TokenStateManager.GetTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.getTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:448
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> deleteTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig, String tokenState,\n"
"            TokenStateManager.DeleteTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.deleteTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:450
#, no-wrap
msgid "Proof key for code exchange (PKCE)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:453
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of the authorization code interception."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:455
msgid "While `PKCE` is of primary importance to the public OpenID Connect clients (such as the SPA scripts running in a browser), it can also provide an extra level of protection to Quarkus OIDC `web-app` applications which are confidential OpenID Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:457
msgid "You can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32 characters long secret, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:462
#, no-wrap
msgid ""
"quarkus.oidc.authentication.pkce-required=true\n"
"quarkus.oidc.authentication.pkce-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:465
msgid "If you already have a 32 characters long client secret then `quarkus.oidc.authentication.pkce-secret` does not have to be set unless you prefer to use a different secret key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:467
msgid "The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to OpenID Connect Provider to authenticate. The `code_verifier` will be decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret and other parameters to complete the code exchange. The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` provided during the authentication request."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:468
#, no-wrap
msgid "Listening to important authentication events"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:471
msgid "One can register `@ApplicationScoped` bean which will observe important OIDC authentication events. The listener will be updated when a user has logged in for the first time or re-authenticated, as well as when the session has been refreshed. More events may be reported in the future. For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:476
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:481
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdTokenCredential;\n"
"import io.quarkus.oidc.SecurityEvent;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:484
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SecurityEventListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:491
#, no-wrap
msgid ""
"    public void event(@Observes SecurityEvent event) {\n"
"        String tenantId = event.getSecurityIdentity().getAttribute(\"tenant-id\");\n"
"        RoutingContext vertxContext = event.getSecurityIdentity().getAttribute(RoutingContext.class.getName());\n"
"        vertxContext.put(\"listener-message\", String.format(\"event:%s,tenantId:%s\", event.getEventType().name(), tenantId));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:493
#, no-wrap
msgid "Single-page applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:496
msgid "Check if implementing SPAs the way it is suggested in the xref:security-oidc-bearer-token-authentication-concept.adoc#single-page-applications[Single-page Applications for Service Applications] section can meet your requirements."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:498
msgid "If you prefer to use SPA and JavaScript API such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:500
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of `499`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:505
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-With\", \"JavaScript\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:514
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:516
#, no-wrap
msgid "Cross-origin resource sharing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:519
msgid "If you plan to consume this application from a Single-page application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). For more information, see the xref:http-reference.adoc#cors-filter[HTTP CORS documentation]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:521
#, no-wrap
msgid "Integration with GitHub and other OAuth2 providers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:524
msgid "Some well known providers such as GitHub or LinkedIn are not OpenID Connect but OAuth2 providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:526
msgid "The main difference between OpenID Connect and OAuth2 providers is that OpenID Connect providers, by building on top of OAuth2, return an `ID Token` representing a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:528
msgid "OAuth2 providers such as GitHub do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:531
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token which will allow it to request a GitHub profile of the current user.  In fact this is exactly how a standard OpenID Connect `UserInfo` acquisition also works - by authenticating into your OpenID Connect provider you also give a permission to Quarkus application to acquire your xref:user-info[UserInfo] on your behalf - and it also shows what is meant by OpenID Connect being built on top of OAuth2."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:533
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:535
msgid "It is required because `quarkus-oidc` expects that not only `access` and `refresh` tokens but also `IdToken` will be returned once the authorization code flow completes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:537
msgid "Note, even though you will configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` will be generated to support the way `quarkus-oidc` operates where an `IdToken` is used to support the authentication session and to avoid redirecting the user to the provider such as GitHub on every request. In this case the session lifespan is set to 5 minutes which can be extended further as described in the xref:session-management[session management] section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:540
msgid "The next step is to ensure that the returned access token can be useful to the current Quarkus endpoint.  If the OAuth2 provider supports the introspection endpoint then you may be able to use this access token as a source of roles with `quarkus.oidc.roles.source=accesstoken`. If no introspection endpoint is available then at the very least it should be possible to request xref:user-info[UserInfo] from this provider with `quarkus.oidc.authentication.user-info-required` - this is the case with GitHub."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:542
msgid "Configuring the endpoint to request xref:user-info[UserInfo] is the only way `quarkus-oidc` can be integrated with the providers such as GitHub."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:544
msgid "Note that requiring xref:user-info[UserInfo] involves making a remote call on every request - therefore you may want to consider caching `UserInfo` data, see xref:security-oidc-bearer-token-authentication-concept.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:546
msgid "Alternatively, you may want to request that `UserInfo` is embedded into the internal generated `IdToken` with the `quarkus.oidc.cache-user-info-in-idtoken=true` property - the advantage of this approach is that by default no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie. You may also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data. For more information, see xref:token-state-manager[Encrypt tokens with TokenStateManager]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:548
msgid "Also, OAuth2 servers may not support a well-known configuration endpoint in which case the discovery has to be disabled and the authorization, token, and introspection and/or userinfo endpoint paths have to be configured manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:550
msgid "Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:556
#, no-wrap
msgid ""
"quarkus.oidc.provider=github\n"
"quarkus.oidc.client-id=github_app_clientid\n"
"quarkus.oidc.credentials.secret=github_app_clientsecret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:559
#, no-wrap
msgid ""
"# user:email scope is requested by default, use 'quarkus.oidc.authentication.scopes' to request different scopes such as `read:user`.\n"
"# See https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps for more information.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:566
#, no-wrap
msgid ""
"# Consider enabling UserInfo Cache\n"
"# quarkus.oidc.token-cache.max-size=1000\n"
"# quarkus.oidc.token-cache.time-to-live=5M\n"
"#\n"
"# Or having UserInfo cached inside IdToken itself\n"
"# quarkus.oidc.cache-user-info-in-idtoken=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:569
msgid "See xref:security-openid-connect-providers.adoc[OpenID Connect providers] for more details about configuring other well-known providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:571
msgid "This is all what is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:578
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:649
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:581
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:585
#, no-wrap
msgid ""
"@Path(\"/github\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:588
#, no-wrap
msgid ""
"    @Inject\n"
"    UserInfo userInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:596
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/userinfo\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserInfo() {\n"
"        return userInfo.getUserInfoString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:599
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google which is an OpenID Connect Provider returning `IdToken` and GitHub which is an OAuth2 provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:603
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:605
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:607
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:615
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:618
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityIdentityAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:626
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        RoutingContext routingContext = identity.getAttribute(RoutingContext.class.getName());\n"
"        if (routingContext != null && routingContext.normalizedPath().endsWith(\"/github\")) {\n"
"\t        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
"\t        UserInfo userInfo = identity.getAttribute(\"userinfo\");\n"
"\t        builder.setPrincipal(new Principal() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:631
#, no-wrap
msgid ""
"\t            @Override\n"
"\t            public String getName() {\n"
"\t                return userInfo.getString(\"preferred_username\");\n"
"\t            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:637
#, no-wrap
msgid ""
"\t        });\n"
"\t        identity = builder.build();\n"
"        }\n"
"        return Uni.createFrom().item(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:639
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:642
msgid "Now, the following code will work when the user is signing in into your application with both Google or GitHub:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:652
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:656
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:659
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:666
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/google\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:674
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/github\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getUserName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:677
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` - with the providers which do not return `IdToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:679
msgid "The last important point is to make sure the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:680
#, no-wrap
msgid "Cloud services"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:682
#, no-wrap
msgid "Google Cloud"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:685
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google Developer Consoles."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:688
msgid "It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:690
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:946
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:979
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1099
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:697
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.googlecloudservices</groupId>\n"
"    <artifactId>quarkus-google-cloud-bigquery</artifactId>\n"
"    <version>${quarkiverse.googlecloudservices.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:700
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:967
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:989
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1109
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:703
#, no-wrap
msgid "implementation(\"io.quarkiverse.googlecloudservices:quarkus-google-cloud-bigquery:${quarkiverse.googlecloudservices.version}\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:706
msgid "and configure Google OIDC properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:713
#, no-wrap
msgid ""
"quarkus.oidc.provider=google\n"
"quarkus.oidc.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.token.issuer=https://accounts.google.com\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:715
#, no-wrap
msgid "Provider endpoint configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:718
msgid "OIDC `web-app` application needs to know OpenID Connect provider's authorization, token, `JsonWebKey` (JWK) set and possibly `UserInfo`, introspection and end session (RP-initiated logout) endpoint addresses."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:720
msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:722
msgid "Alternatively, if the discovery endpoint is not available, or if you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:739
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Authorization endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/auth\n"
"quarkus.oidc.authorization-path=/protocol/openid-connect/auth\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/token/introspect\n"
"# End session endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/logout\n"
"quarkus.oidc.end-session-path=/protocol/openid-connect/logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:742
msgid "Sometimes, your OpenId Connect provider supports a metadata discovery but does not return all the endpoint URLs required for the authorization code flow to complete or for the application to support the additional functions such as a user logout. In such cases, you can simply configure a missing endpoint URL locally:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:746
#, no-wrap
msgid "# Metadata is auto-discovered but it does not return an end-session endpoint URL\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:748
#, no-wrap
msgid "quarkus.oidc.auth-server-url=http://localhost:8180/oidcprovider/account\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:751
#, no-wrap
msgid ""
"# Configure the end-session URL locally, it can be an absolute or relative (to 'quarkus.oidc.auth-server-url') address\n"
"quarkus.oidc.end-session-path=logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:754
msgid "Exactly the same configuration can be used to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required. For example, one can imagine that in the above example, a provider which supports both global and application specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout` which will logout the user from all the applications this user is currently logged in, while the current application only wants to get this user logged out from this application, therefore, `quarkus.oidc.end-session-path=logout` is used to override the global end-session URL."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:755
#, no-wrap
msgid "Token propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:757
msgid "For information about Authorization Code Flow access token propagation to the downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:759
#, no-wrap
msgid "OIDC provider client authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:762
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. It has to authenticate to the OpenID Connect Provider when the authorization code has to be exchanged for the ID, access and refresh tokens, when the ID and access tokens have to be refreshed or introspected."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:764
msgid "All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:766
msgid "`client_secret_basic`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:772
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:775
msgid "or"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:781
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:784
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:816
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:789
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:821
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:794
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:797
msgid "`client_secret_post`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:804
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
"quarkus.oidc.credentials.client-secret.method=post\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:807
msgid "`client_secret_jwt`, signature algorithm is HS256:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:813
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:826
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:829
msgid "`private_key_jwt` with the PEM key file, signature algorithm is RS256:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:835
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:864
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:838
msgid "`private_key_jwt` with the key store file, signature algorithm is RS256:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:846
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:849
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:852
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:853
#, no-wrap
msgid "Additional JWT authentication options"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:856
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an Apple `post_jwt` method is used, then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:860
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:869
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:872
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:875
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:878
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:881
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:883
#, no-wrap
msgid "Apple POST JWT"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:886
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject claims."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:888
msgid "`quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:893
#, no-wrap
msgid ""
"# Apple provider configuration sets a 'client_secret_post_jwt' authentication method\n"
"quarkus.oidc.provider=apple\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:898
#, no-wrap
msgid ""
"quarkus.oidc.client-id=${apple.client-id}\n"
"quarkus.oidc.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc.credentials.jwt.token-key-id=${apple.key-id}\n"
"# Apple provider configuration sets ES256 signature algorithm\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:901
#, no-wrap
msgid ""
"quarkus.oidc.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:903
#, no-wrap
msgid "Mutual TLS (mTLS)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:906
msgid "Some OpenID Connect providers may require that a client is authenticated as part of the `Mutual TLS` authentication process."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:908
msgid "`quarkus-oidc` can be configured as follows to support `mTLS`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:912
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:916
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:920
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:926
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:928
#, no-wrap
msgid "Introspection endpoint authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:931
msgid "Some OpenID Connect Providers may require authenticating to its introspection endpoint using Basic authentication with the credentials different to `client_id` and `client_secret` which may have already been configured to support `client_secret_basic` or `client_secret_post` client authentication methods described in the xref:oidc-provider-client-authentication[OIDC provider client authentication] section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:933
msgid "If the tokens have to be introspected and the introspection endpoint specific authentication mechanism is required, then you can configure `quarkus-oidc` like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:938
#, no-wrap
msgid ""
"quarkus.oidc.introspection-credentials.name=introspection-user-name\n"
"quarkus.oidc.introspection-credentials.secret=introspection-user-secret\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:941
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:944
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:964
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>org.eclipse.jetty</groupId>\n"
"            <artifactId>*</artifactId>\n"
"       </exclusion>\n"
"    </exclusions>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:971
#, no-wrap
msgid ""
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:974
#, no-wrap
msgid "Wiremock"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:977
msgid "Add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:986
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:992
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:995
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1003
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-web-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1006
msgid "and finally write the test code, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1010
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1012
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1017
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1021
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1025
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class CodeFlowAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1031
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCodeFlow() throws Exception {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            // the test REST endpoint listens on '/code-flow'\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/code-flow\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1036
#, no-wrap
msgid ""
"            HtmlForm form = page.getFormByName(\"form\");\n"
"            // user 'alice' has the 'user' role\n"
"            form.getInputByName(\"username\").type(\"alice\");\n"
"            form.getInputByName(\"password\").type(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1038
#, no-wrap
msgid "            page = form.getInputByValue(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1042
#, no-wrap
msgid ""
"            assertEquals(\"alice\", page.getBody().asText());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1049
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1052
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1054
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1056
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1058
#, no-wrap
msgid "Dev services for Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1062
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1064
msgid "First, prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1066
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1070
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1073
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1078
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1082
msgid "Finally, write a test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.  The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1088
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1091
#, no-wrap
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1095
msgid "Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.  If you need to do the integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev services For Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1097
msgid "Start with adding the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1106
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1112
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1115
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1117
msgid "And configure the Maven Surefire plugin as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1133
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1136
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1139
msgid "And now set the configuration and write the test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.  The only difference is the name of `QuarkusTestResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1143
#, no-wrap
msgid "import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1148
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1151
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1154
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1156
#, no-wrap
msgid "TestSecurity annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1159
msgid "See xref:security-oidc-bearer-token-authentication-concept.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1160
#, no-wrap
msgid "Checking errors in the logs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1163
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1168
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1171
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1176
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1178
#, no-wrap
msgid "Running Quarkus application behind a reverse proxy"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1181
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1183
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, for more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1185
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1192
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.allow-forwarded=false\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.forwarded-host-header=X-ORIGINAL-HOST\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1195
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1197
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1198
#, no-wrap
msgid "External and internal access to the OIDC provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1202
msgid "Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.  In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1205
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1206
#, no-wrap
msgid "Customizing authentication requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1209
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1211
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`. For example, some OpenID Connect providers may choose to return the authorization code as part of the redirect URI's fragment which would break the authentication process - it can be fixed as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1215
#, no-wrap
msgid "quarkus.oidc.authentication.extra-params.response_mode=query\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1217
#, no-wrap
msgid "Customizing the authentication error response"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1220
msgid "If the user authentication has failed at the OpenID Connect Authorization endpoint, for example, due to an invalid scope or other invalid parameters included in the redirect to the provider, then the provider will redirect the user back to Quarkus not with the `code` but `error` and `error_description` parameters."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1222
msgid "In such cases HTTP `401` will be returned by default. However, you can instead request that a custom public error endpoint is called in order to return a user-friendly HTML error page. Use `quarkus.oidc.authentication.error-path`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1226
#, no-wrap
msgid "quarkus.oidc.authentication.error-path=/error\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1230
msgid "It has to start from a forward slash and be relative to the base URI of the current endpoint.  For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1232
msgid "It is important that this error endpoint is a public resource to avoid the user redirected to this page be authenticated again."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1233
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1236
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1237
msgid "xref:security-openid-connect-providers.adoc[OpenID Connect providers]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1238
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1239
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1240
msgid "xref:security-authentication-mechanisms-concept.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1241
msgid "xref:security-authentication-mechanisms-concept.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1242
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1243
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1244
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1245
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""
