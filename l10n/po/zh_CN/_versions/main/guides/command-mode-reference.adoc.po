# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-10 13:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/command-mode-reference.adoc:6
#, no-wrap
msgid "Command Mode Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:13
msgid "This reference covers how to write applications that run and then exit."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/command-mode-reference.adoc:14
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:18
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:20
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:22
msgid "The solution is located in the `getting-started-command-mode` link:{quickstarts-tree-url}/getting-started-command-mode[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/command-mode-reference.adoc:23
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:26
msgid "First, we need to create a new Quarkus project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:32
msgid "The suggested project creation command lines disable the codestarts to avoid including a REST server. Similarly, if you use code.quarkus.io to generate a project, you need to go to *MORE OPTIONS -> Starter Code* and select *No* to avoid adding the RESTEasy Reactive extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:34
msgid "The RESTEasy Reactive extension is added automatically only if you ask for codestarts and you didn't specify any extensions."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/command-mode-reference.adoc:36
#, no-wrap
msgid "Writing Command Mode Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:40
msgid "There are two different approaches that can be used to implement applications that exit."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:42
msgid "Implement `QuarkusApplication` and have Quarkus run this method automatically"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:43
msgid "Implement `QuarkusApplication` and a Java main method, and use the Java main method to launch Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:46
msgid "In this document the `QuarkusApplication` instance is referred to as the application main, and a class with a Java main method is the Java main."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:48
msgid "The simplest possible command mode application with access to Quarkus APIs might appear as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:53
#, no-wrap
msgid ""
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:62
#, no-wrap
msgid ""
"@QuarkusMain    // <.>\n"
"public class HelloWorldMain implements QuarkusApplication {\n"
"  @Override\n"
"  public int run(String... args) throws Exception {   // <.>\n"
"    System.out.println(\"Hello \" + args[0]);\n"
"    return 0;\n"
" }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:65
msgid "<.> The `@QuarkusMain` annotation tells Quarkus that this is the main entry point.  <.> The `run` method is invoked once Quarkus starts, and the application stops when it finishes."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/command-mode-reference.adoc:66
#, no-wrap
msgid "Contexts"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/command-mode-reference.adoc:69
#, no-wrap
msgid "Got a `ContextNotActiveException`?"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:74
msgid "A command mode application (like a CLI) is a bit different from say an HTTP service, there is a single call from the command line.  So the notion of _request_ let alone multiple requests does not exist per se.  Therefore, request scope is not the default."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:77
msgid "To get access to your application beans and services, be aware that a `@QuarkusMain` instance is an application scoped bean by default.  It has access to singletons, application and dependent scoped beans."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:81
msgid "If you want to interact with beans that requires a request scope, simply add the `@ActivateRequestContext` annotation on your `run()` method.  This let `run()` have access to methods like `listAll()` and `query*` methods on a Panache Entity.  Without it, you will eventually get a `ContextNotActiveException` when accessing such classes/beans."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/command-mode-reference.adoc:83
#, no-wrap
msgid "Main method"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:85
msgid "If we want to use a Java main to run the application main it would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:90
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:93
#, no-wrap
msgid ""
"@QuarkusMain\n"
"public class JavaMain {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:98
#, no-wrap
msgid ""
"    public static void main(String... args) {\n"
"        Quarkus.run(HelloWorldMain.class, args);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:102
msgid "This is effectively the same as running the `HelloWorldMain` application main directly, but has the advantage it can be run from the IDE."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:104
msgid "If a class that implements `QuarkusApplication` and has a Java main then the Java main will be run."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:109
msgid "It is recommended that a Java main perform very little logic, and just launch the application main. In development mode the Java main will run in a different ClassLoader to the main application, so may not behave as you would expect."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/command-mode-reference.adoc:110
#, no-wrap
msgid "Multiple Main Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:116
msgid "It is possible to have multiple main methods in an application, and select between them at build time.  The `@QuarkusMain` annotation takes an optional 'name' parameter, and this can be used to select the main to run using the `quarkus.package.main-class` build time configuration option. If you don't want to use annotations this can also be used to specify the fully qualified name of a main class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:120
msgid "By default, the `@QuarkusMain` with no name (i.e. the empty string) will be used, and if it is not present and `quarkus.package.main-class` is not specified then Quarkus will automatically generate a main class that just runs the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:124
msgid "The `name` of `@QuarkusMain` must be unique (including the default of the empty string). If you have multiple `@QuarkusMain` annotations in your application the build will fail if the names are not unique."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/command-mode-reference.adoc:125
#, no-wrap
msgid "The command mode lifecycle"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:128
msgid "When running a command mode application the basic lifecycle is as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:130
msgid "Start Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:131
msgid "Run the `QuarkusApplication` main method"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:132
msgid "Shut down Quarkus and exit the JVM after the main method returns"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:136
msgid "Shutdown is always initiated by the application main thread returning. If you want to run some logic on startup, and then run like a normal application (i.e. not exit) then you should call `Quarkus.waitForExit` from the main thread (A non-command mode application is essentially just running an application that just calls `waitForExit`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:139
msgid "If you want to shut down a running application and you are not in the main thread, then you should call `Quarkus.asyncExit` in order to unblock the main thread and initiate the shutdown process."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/command-mode-reference.adoc:140
#, no-wrap
msgid "Development Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:144
msgid "Also, for command mode applications, the dev mode is supported.  When you start your application in dev mode, the command mode application is executed:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:148
msgid "As command mode applications will often require arguments to be passed on the command line, this is also possible in dev mode:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/command-mode-reference.adoc:150
#, no-wrap
msgid "CLI"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:153
#, no-wrap
msgid "quarkus dev '--help'\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/command-mode-reference.adoc:156
#, no-wrap
msgid "Maven"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:159
#, no-wrap
msgid "./mvnw quarkus:dev -Dquarkus.args='--help'\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/command-mode-reference.adoc:162
#, no-wrap
msgid "Gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:165
#, no-wrap
msgid "./gradlew quarkusDev --quarkus-args='--help'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:168
msgid "You should see the following down the bottom of the screen after the application is stopped:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:171
#, no-wrap
msgid "--\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:173
msgid "Press [space] to restart, [e] to edit command line args (currently '-w --tags 1.0.1.Final'), [r] to resume testing, [o] Toggle test output, [h] for more options>"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:177
msgid "You can press the `Space bar` key and the application will be started again.  You can also use the `e` hotkey to edit the command line arguments and restart your application."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/command-mode-reference.adoc:178
#, no-wrap
msgid "Testing Command Mode Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:183
msgid "Command Mode applications can be tested using the `@QuarkusMainTest` and `@QuarkusMainIntegrationTest` annotations. These work in a similar way to `@QuarkusTest` and `@QuarkusIntegrationTest` where `@QuarkusMainTest` will run the CLI tests within the current JVM, while `QuarkusIntegrationTest` is used to run the generated executable (both jars and native)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:185
msgid "We can write a simple test for our CLI application above as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:194
#, no-wrap
msgid ""
"import io.quarkus.test.junit.main.Launch;\n"
"import io.quarkus.test.junit.main.LaunchResult;\n"
"import io.quarkus.test.junit.main.QuarkusMainLauncher;\n"
"import io.quarkus.test.junit.main.QuarkusMainTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:197
#, no-wrap
msgid ""
"@QuarkusMainTest\n"
"public class HelloTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:203
#, no-wrap
msgid ""
"    @Test\n"
"    @Launch(\"World\")\n"
"    public void testLaunchCommand(LaunchResult result) {\n"
"        Assertions.assertTrue(result.getOutput().contains(\"Hello World\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:208
#, no-wrap
msgid ""
"    @Test\n"
"    @Launch(value = {}, exitCode = 1)\n"
"    public void testLaunchCommandFailed() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:216
#, no-wrap
msgid ""
"    @Test\n"
"    public void testManualLaunch(QuarkusMainLauncher launcher) {\n"
"        LaunchResult result = launcher.launch(\"Everyone\");\n"
"        Assertions.assertEquals(0, result.exitCode());\n"
"        Assertions.assertTrue(result.getOutput().contains(\"Hello Everyone\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:221
msgid "Each test method must be annotated with `@Launch` to automatically start the application or have a `QuarkusMainLauncher` parameter to manually launch the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:223
msgid "We can then extend this with an integration test that can be used to test the native executable or runnable jar:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:227
#, no-wrap
msgid "import io.quarkus.test.junit.main.QuarkusMainIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:231
#, no-wrap
msgid ""
"@QuarkusMainIntegrationTest\n"
"public class HelloIT extends HelloTest {\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/command-mode-reference.adoc:233
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:237
msgid "CDI injection is not supported in the `@QuarkusMainTest` tests.  Consequently, mocking CDI beans with `QuarkusMock` or `@InjectMock` is not supported either."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:239
msgid "It is possible to mock CDI beans by leveraging xref:getting-started-testing.adoc#testing_different_profiles[test profiles] though."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:241
msgid "For instance, in the following test, the singleton `CdiBean1` will be mocked by `MockedCdiBean1`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:245
#, no-wrap
msgid "package org.acme.commandmode.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:247
#, no-wrap
msgid "import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:250
#, no-wrap
msgid ""
"import jakarta.enterprise.inject.Alternative;\n"
"import jakarta.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:253
#, no-wrap
msgid ""
"import org.junit.jupiter.api.Test;\n"
"import org.acme.commandmode.test.MyCommandModeTest.MyTestProfile;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:259
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTestProfile;\n"
"import io.quarkus.test.junit.TestProfile;\n"
"import io.quarkus.test.junit.main.Launch;\n"
"import io.quarkus.test.junit.main.LaunchResult;\n"
"import io.quarkus.test.junit.main.QuarkusMainTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:263
#, no-wrap
msgid ""
"@QuarkusMainTest\n"
"@TestProfile(MyTestProfile.class)\n"
"public class MyCommandModeTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:269
#, no-wrap
msgid ""
"    @Test\n"
"    @Launch(value = {})\n"
"    public void testLaunchCommand(LaunchResult result) {\n"
"        // ... assertions ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:271
#, no-wrap
msgid "    public static class MyTestProfile implements QuarkusTestProfile {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:277
#, no-wrap
msgid ""
"        @Override\n"
"        public Set<Class<?>> getEnabledAlternatives() {\n"
"            return Set.of(MockedCdiBean1.class); <1>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:281
#, no-wrap
msgid ""
"    @Alternative <2>\n"
"    @Singleton <3>\n"
"    public static class MockedCdiBean1 implements CdiBean1 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:288
#, no-wrap
msgid ""
"        @Override\n"
"        public String myMethod() {\n"
"            return \"mocked value\";\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:290
msgid "List all the CDI beans for which you want to enable an alternative mocked bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:291
msgid "Use `@Alternative` without a `@Priority`. Make sure you don't use `@Mock`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:292
msgid "The scope of the mocked bean should be consistent with the original one."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:293
msgid "Using this pattern, you can enable specific alternatives for any given test."
msgstr ""
