# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-09 03:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:6
#, no-wrap
msgid "Cross-Site Request Forgery Prevention"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:11
msgid "https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery(CSRF)] is an attack that forces an end user to execute unwanted actions on a web application in which they are currently authenticated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:13
msgid "Quarkus Security provides a CSRF prevention feature which consists of a xref:resteasy-reactive.adoc[Resteasy Reactive] server filter which creates and verifies CSRF tokens and an HTML form parameter provider which supports the xref:qute-reference.adoc#injecting-beans-directly-in-templates[injection of CSRF tokens in Qute templates]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:14
#, no-wrap
msgid "Creating the Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:18
msgid "First, we need a new project.  Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:24
msgid "This command generates a project which imports the `csrf-reactive` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:27
msgid "If you already have your Quarkus project configured, you can add the `csrf-reactive` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:32
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:34
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:40
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-csrf-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:43
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:46
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-csrf-reactive\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:49
msgid "Next lets add a Qute template producing an HTML form:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:60
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>User Name Input</title> \n"
"</head>\n"
"<body>\n"
"    <h1>User Name Input</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:63
#, no-wrap
msgid ""
"    <form action=\"/service/csrfTokenForm\" method=\"post\">\n"
"    \t<input type=\"hidden\" name=\"{inject:csrf.parameterName}\" value=\"{inject:csrf.token}\" />  <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:69
#, no-wrap
msgid ""
"    \t<p>Your Name: <input type=\"text\" name=\"name\" /></p>\n"
"    \t<p><input type=\"submit\" name=\"submit\"/></p>\n"
"    </form>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:72
msgid "This expression is used to inject a CSRF token into a hidden form field. This token will be verified by the CSRF filter against a CSRF cookie."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:74
msgid "You can name the file containing this template as `csrfToken.html` and put it in a `src/main/resources/templates` folder."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:76
msgid "Now let's create a resource class which returns an HTML form and handles form POST requests:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:80
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:135
#, no-wrap
msgid "package io.quarkus.it.csrf;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:89
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:92
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:149
#, no-wrap
msgid ""
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.TemplateInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:95
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:152
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class UserNameResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:98
#, no-wrap
msgid ""
"    @Inject\n"
"    Template csrfToken; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:105
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance(); <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:114
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@FormParam(\"name\") String name) {\n"
"        return userName; <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:117
msgid "Inject the `csrfToken.html` as a `Template`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:118
msgid "Return HTML form with a hidden form field containing a CSRF token created by the CSRF filter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:119
msgid "Handle the form POST request, this method can only be invoked only if the CSRF filter has successfully verified the token."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:121
msgid "The form POST request will fail with HTTP status `400` if the filter finds the hidden CSRF form field is missing, the CSRF cookie is missing, or if the CSRF form field and CSRF cookie values do not match."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:123
msgid "At this stage no additional configuration is needed - by default the CSRF form field and cookie name will be set to `csrf_token`, and the filter will verify the token. But lets change these names:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:128
#, no-wrap
msgid ""
"quarkus.csrf-reactive.form-field-name=csrftoken\n"
"quarkus.csrf-reactive.cookie-name=csrftoken\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:131
msgid "Note that the CSRF filter has to read the input stream in order to verify the token and then re-create the stream for the application code to read it as well. The filter performs this work on an event loop thread so for small form payloads such as the one shown in the example above it will have negligible peformance side-effects. However if you deal with large form payloads then it is recommended to compare the CSRF form field and cookie values in the application code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:146
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.CookieParam;\n"
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:155
#, no-wrap
msgid ""
"    @Inject\n"
"    Template csrfToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:162
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:174
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@CookieParam(\"csrf-token\") csrfCookie, @FormParam(\"csrf-token\") String formCsrfToken, @FormParam(\"name\") String userName) {\n"
"        if (!csrfCookie.getValue().equals(formCsrfToken)) { <1>\n"
"            throw new BadRequestException();\n"
"        }\n"
"        return userName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:177
msgid "Compare the CSRF form field and cookie values and fail with HTTP status `400` if they don't match."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:179
msgid "Also disable the token verification in the filter:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:183
#, no-wrap
msgid "quarkus.csrf-reactive.verify-token=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:187
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:191
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:194
msgid "https://owasp.org/www-community/attacks/csrf[OWASP Cross-Site Request Forgery]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:195
msgid "xref:resteasy-reactive.adoc[RESTEasy Reactive]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:196
msgid "xref:qute-reference.adoc[Qute Reference]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:196
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
