# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-12 02:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:6
#, no-wrap
msgid "OpenID Connect Client and Token Propagation Quickstart"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:14
msgid "This quickstart demonstrates how to use `OpenID Connect Client Reactive Filter` to acquire and propagate access tokens as `HTTP Authorization Bearer` access tokens, alongside `OpenID Token Propagation Reactive Filter` which propagates the incoming `HTTP Authorization Bearer` access tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:16
msgid "Please check xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide] for all the information related to `Oidc Client` and `Token Propagation` support in Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:18
msgid "Please also read xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide if you need to protect your applications using Bearer Token Authorization."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:24
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:25
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:28
msgid "In this example, we will build an application which consists of two Jakarta REST resources, `FrontendResource` and `ProtectedResource`. `FrontendResource` propagates access tokens to `ProtectedResource` and uses either `OpenID Connect Client Reactive Filter` to acquire a token first before propagating it or `OpenID Token Propagation Reactive Filter` to propagate the incoming, already existing access token."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:30
msgid "`FrontendResource` has 4 endpoints:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:32
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:33
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:34
msgid "`/frontend/user-name-with-propagated-token`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:35
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:37
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:270
msgid "`FrontendResource` will use REST Client with `OpenID Connect Client Reactive Filter` to acquire and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called. And it will use REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:39
msgid "`ProtecedResource` has 2 endpoints:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:41
msgid "`/protected/user-name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:42
msgid "`/protected/admin-name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:44
msgid "Both of these endpoints return the username extracted from the incoming access token which was propagated to `ProtectedResource` from `FrontendResource`. The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:45
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:49
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:51
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:53
msgid "The solution is located in the `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:54
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:57
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:63
msgid "This command generates a Maven project, importing the `oidc`, `oidc-client-reactive-filter`, `oidc-token-propagation-reactive-filter` and `resteasy-reactive` extensions."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:65
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:70
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:72
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:90
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:93
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:96
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc,oidc-client-reactive-filter,oidc-token-propagation-reactive,resteasy-reactive\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:98
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:101
msgid "Let's start by implementing `ProtectedResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:105
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:149
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:182
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:219
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:276
#, no-wrap
msgid "package org.acme.security.openid.connect.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:111
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:114
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:116
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:120
#, no-wrap
msgid ""
"@Path(\"/protected\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:123
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:131
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    public Uni<String> userName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:140
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    public Uni<String> adminName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:143
msgid "As you can see `ProtectedResource` returns a name from both `userName()` and `adminName()` methods. The name is extracted from the current `JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:145
msgid "Next let's add a REST Client with `OidcClientRequestReactiveFilter` and another REST Client with `AccessTokenRequestReactiveFilter`. `FrontendResource` will use these two clients to call `ProtectedResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:153
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:186
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:156
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:189
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:159
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:164
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface RestClientWithOidcClientFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:169
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:202
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    Uni<String> getUserName();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:175
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:208
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    Uni<String> getAdminName();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:178
msgid "where `RestClientWithOidcClientFilter` will depend on `OidcClientRequestReactiveFilter` to acquire and propagate the tokens and"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:192
#, no-wrap
msgid ""
"import io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:197
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface RestClientWithTokenPropagationFilter {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:211
msgid "where `RestClientWithTokenPropagationFilter` will depend on `AccessTokenRequestReactiveFilter` to propagate the incoming, already existing tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:213
msgid "Note that both `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces are identical - the reason behind it is that combining `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter` on the same REST Client will cause side effects as both filters can interfere with other, for example, `OidcClientRequestReactiveFilter` may override the token propagated by `AccessTokenRequestReactiveFilter` or `AccessTokenRequestReactiveFilter` can fail if it is called when no token is available to propagate and `OidcClientRequestReactiveFilter` is expected to acquire a new token instead."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:215
msgid "Now let's complete creating the application with adding `FrontendResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:224
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:226
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:228
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:234
#, no-wrap
msgid ""
"@Path(\"/frontend\")\n"
"public class FrontendResource {\n"
"    @Inject\n"
"    @RestClient\n"
"    RestClientWithOidcClientFilter restClientWithOidcClientFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:238
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    RestClientWithTokenPropagationFilter restClientWithTokenPropagationFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:245
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"user-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithOidcClientToken() {\n"
"        return restClientWithOidcClientFilter.getUserName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:252
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"admin-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithOidcClientToken() {\n"
"\t    return restClientWithOidcClientFilter.getAdminName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:259
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"user-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithPropagatedToken() {\n"
"        return restClientWithTokenPropagationFilter.getUserName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:267
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"admin-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithPropagatedToken() {\n"
"        return restClientWithTokenPropagationFilter.getAdminName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:272
msgid "Finally, let's add a Jakarta REST `ExceptionMapper`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:280
#, no-wrap
msgid ""
"import jakarta.ws.rs.core.Response;\n"
"import jakarta.ws.rs.ext.ExceptionMapper;\n"
"import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:282
#, no-wrap
msgid "import org.jboss.resteasy.reactive.ClientWebApplicationException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:285
#, no-wrap
msgid ""
"@Provider\n"
"public class FrontendExceptionMapper implements ExceptionMapper<ClientWebApplicationException> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:290
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Response toResponse(ClientWebApplicationException t) {\n"
"\t\treturn Response.status(t.getResponse().getStatus()).build();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:292
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:295
msgid "This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role. Without this mapper `RESTEasy Reactive` will correctly convert the exceptions which will escape from REST Client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource` but in the tests it will not be possible to assert that `500` is in fact caused by an authorization exception as opposed to some internal error."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:296
#, no-wrap
msgid "Configuring the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:299
msgid "We have prepared the code, and now let's configure the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:303
#, no-wrap
msgid "# Configure OIDC\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:307
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:310
#, no-wrap
msgid ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes but only in dev and test modes.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:312
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:314
#, no-wrap
msgid "# Configure OIDC Client\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:321
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url}\n"
"quarkus.oidc-client.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:323
#, no-wrap
msgid "# Configure REST Clients\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:327
#, no-wrap
msgid ""
"%prod.port=8080\n"
"%dev.port=8080\n"
"%test.port=8081\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:330
#, no-wrap
msgid ""
"org.acme.security.openid.connect.client.RestClientWithOidcClientFilter/mp-rest/url=http://localhost:${port}/protected\n"
"org.acme.security.openid.connect.client.RestClientWithTokenPropagationFilter/mp-rest/url=http://localhost:${port}/protected\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:333
msgid "This configuration references Keycloak which will be used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` using a `password` grant. Both RESTClients point to `ProtectedResource`'s HTTP address."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:335
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in dev or test modes. See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:336
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:339
msgid "Do not start the Keycloak server when you run the application in dev mode or test modes - `Dev Services for Keycloak` will launch a container. See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information. Make sure to put the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) so that it gets imported automatically when running in dev mode - unless you have already built a link:{quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] in which case this realm file will be added to the classpath during the build."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:341
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:345
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:348
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:350
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:352
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:354
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:356
msgid "This `quarkus` realm file will add a `frontend` client, and `alice` and `admin` users. `alice` has a `user` role, `admin` - both `user` and `admin` roles."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:358
#, no-wrap
msgid "Running the Application in Dev mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:361
msgid "To run the application in a dev mode, use:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:365
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:367
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-v1[/q/dev-v1] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:369
msgid "You will be asked to log in into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:371
msgid "Login as `alice` (password: `alice`) who has a `user` role"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:372
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:375
msgid "accessing `/frontend/user-name-with-propagated-token` will return `200`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:373
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `403`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:374
msgid "Logout and login as `admin` (password: `admin`) who has both `admin` and `user` roles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:376
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `200`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:378
msgid "In this case you are testing that `FrontendResource` can propagate the access tokens acquired by `OpenID Connect Dev UI`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:379
#, no-wrap
msgid "Running the Application in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:382
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:384
msgid "First compile it:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:388
msgid "Then run it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:392
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:394
#, no-wrap
msgid "Running the Application in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:397
msgid "This same demo can be compiled into native code: no modifications required."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:401
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:404
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:408
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:412
#, no-wrap
msgid "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:414
#, no-wrap
msgid "Testing the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:417
msgid "See xref:keycloak-dev-mode[Running the Application in Dev mode] section above about testing your application in dev mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:419
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:421
msgid "Obtain an access token for `alice`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:430
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:433
msgid "Now use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:439
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:471
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-propagated-token \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:442
msgid "will return `200` status code and the name `alice` while"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:448
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:480
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-propagated-token \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:451
msgid "will return `403` - recall that `alice` only has a `user` role."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:453
msgid "Next obtain an access token for `admin`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:462
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:465
msgid "and use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:474
msgid "will return `200` status code and the name `admin`, and"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:483
msgid "will also return `200` status code and the name `admin`, as `admin` has both `user` and `admin` roles."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:486
msgid "Now let's check `FrontendResource` methods which do not propagate the existing tokens but use `OidcClient` to acquire and propagate the tokens. You have seen that `OidcClient` is configured to acquire the tokens for the `alice` user, so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:491
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-oidc-client-token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:494
msgid "will return `200` status code and the name `alice`, but"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:499
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-oidc-client-token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:502
msgid "will return `403` status code."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:503
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:506
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:507
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:507
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
