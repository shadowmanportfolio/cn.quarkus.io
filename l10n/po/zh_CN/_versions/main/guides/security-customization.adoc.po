# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-11 02:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-customization.adoc:6
#, no-wrap
msgid "Security Tips and Tricks"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-customization.adoc:9
#, no-wrap
msgid "Quarkus Security Dependency"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:12
msgid "`io.quarkus:quarkus-security` module contains the core Quarkus Security classes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:15
msgid "In most cases, it does not have to be added directly to your project's build file as it is already provided by all the security extensions.  However, if you need to write your own custom security code (for example, register a xref:jaxrs-security-context[Custom Jakarta REST SecurityContext]) or use xref:bouncy-castle[BouncyCastle] libraries, then please make sure it is included:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-customization.adoc:17
#: upstream/_versions/main/guides/security-customization.adoc:415
#: upstream/_versions/main/guides/security-customization.adoc:450
#: upstream/_versions/main/guides/security-customization.adoc:478
#: upstream/_versions/main/guides/security-customization.adoc:529
#: upstream/_versions/main/guides/security-customization.adoc:601
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:23
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-customization.adoc:26
#: upstream/_versions/main/guides/security-customization.adoc:424
#: upstream/_versions/main/guides/security-customization.adoc:459
#: upstream/_versions/main/guides/security-customization.adoc:487
#: upstream/_versions/main/guides/security-customization.adoc:543
#: upstream/_versions/main/guides/security-customization.adoc:610
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:29
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-customization.adoc:31
#, no-wrap
msgid "HttpAuthenticationMechanism Customization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:35
msgid "One can customize `HttpAuthenticationMechanism` by registering a CDI implementation bean.  In the example below the custom authenticator delegates to `JWTAuthMechanism` provided by `quarkus-smallrye-jwt`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:42
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(1)\n"
"@ApplicationScoped\n"
"public class CustomAwareJWTAuthMechanism implements HttpAuthenticationMechanism {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:44
#: upstream/_versions/main/guides/security-customization.adoc:93
#, no-wrap
msgid "\tprivate static final Logger LOG = LoggerFactory.getLogger(CustomAwareJWTAuthMechanism.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:47
#, no-wrap
msgid ""
"\t@Inject\n"
"\tJWTAuthMechanism delegate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:53
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<SecurityIdentity> authenticate(RoutingContext context, IdentityProviderManager identityProviderManager) {\n"
"\t    // do some custom action and delegate\n"
"            return delegate.authenticate(context, identityProviderManager);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:58
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<ChallengeData> getChallenge(RoutingContext context) {\n"
"\t\treturn delegate.getChallenge(context);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:63
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Set<Class<? extends AuthenticationRequest>> getCredentialTypes() {\n"
"\t\treturn delegate.getCredentialTypes();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:68
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<HttpCredentialTransport> getCredentialTransport() {\n"
"\t\treturn delegate.getCredentialTransport();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:70
#: upstream/_versions/main/guides/security-customization.adoc:132
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-customization.adoc:73
#, no-wrap
msgid "Dealing with more than one HttpAuthenticationMechanism"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:76
msgid "More than one `HttpAuthenticationMechanism` can be combined, for example, the built-in `Basic` or `JWT` mechanism provided by `quarkus-smallrye-jwt` has to be used to verify the service clients credentials passed as the HTTP `Authorization` `Basic` or `Bearer` scheme values while the `Authorization Code` mechanism provided by `quarkus-oidc` has to be used to authenticate the users with Keycloak or other OpenID Connect providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:78
msgid "In such cases the mechanisms are asked to verify the credentials in turn until a `SecurityIdentity` is created. The mechanisms are sorted in the descending order using their priority. `Basic` authentication mechanism has the highest priority of `2000`, followed by the `Authorization Code` one with the priority of `1001`, with all other mechanisms provided by Quarkus having the priority of `1000`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:80
msgid "If no credentials are provided then the mechanism specific challenge is created, for example, `401` status is returned by either `Basic` or `JWT` mechanisms, URL redirecting the user to the OpenID Connect provider is returned by `quarkus-oidc`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:82
msgid "So if `Basic` and `Authorization Code` mechanisms are combined then `401` will be returned if no credentials are provided and if `JWT` and `Authorization Code` mechanisms are combined then a redirect URL will be returned."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:84
msgid "In some cases such a default logic of selecting the challenge is exactly what is required by a given application, but sometimes it may not meet the requirements. In such cases (or indeed in other similar cases where you'd like to change the order in which the mechanisms are asked to handle the current authentication or challenge request), you can create a custom mechanism and choose which mechanism should create a challenge, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:91
#, no-wrap
msgid ""
"@Alternative <1>\n"
"@Priority(1)\n"
"@ApplicationScoped\n"
"public class CustomAwareJWTAuthMechanism implements HttpAuthenticationMechanism {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:96
#, no-wrap
msgid ""
"\t@Inject\n"
"\tJWTAuthMechanism jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:99
#, no-wrap
msgid ""
"        @Inject\n"
"\tOidcAuthenticationMechanism oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:104
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<SecurityIdentity> authenticate(RoutingContext context, IdentityProviderManager identityProviderManager) {\n"
"\t    return selectBetweenJwtAndOidc(context).authenticate(context, identityProviderManager);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:109
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<ChallengeData> getChallenge(RoutingContext context) {\n"
"            return selectBetweenJwtAndOidcChallenge(context).getChallenge(context);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:117
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Set<Class<? extends AuthenticationRequest>> getCredentialTypes() {\n"
"            Set<Class<? extends AuthenticationRequest>> credentialTypes = new HashSet<>();\n"
"            credentialTypes.addAll(jwt.getCredentialTypes());\n"
"            credentialTypes.addAll(oidc.getCredentialTypes());\n"
"            return credentialTypes;\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:122
#, no-wrap
msgid ""
"        @Override\n"
"        public Uni<HttpCredentialTransport> getCredentialTransport(RoutingContext context) {\n"
"            return selectBetweenJwtAndOidc(context).getCredentialTransport(context);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:126
#, no-wrap
msgid ""
"        private HttpAuthenticationMechanism selectBetweenJwtAndOidc(RoutingContext context) {\n"
"            ....\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:130
#, no-wrap
msgid ""
"        private HttpAuthenticationMechanism selectBetweenJwtAndOidcChallenge(RoutingContext context) {\n"
"            // for example, if no `Authorization` header is available and no `code` parameter is provided - use `jwt` to create a challenge\n"
"        }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:134
msgid "Declaring the mechanism an alternative bean ensures this mechanism is used rather than `OidcAuthenticationMechanism` and `JWTAuthMechanism`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-customization.adoc:136
#, no-wrap
msgid "Security Identity Customization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:139
msgid "Internally, the identity providers create and update an instance of the `io.quarkus.security.identity.SecurityIdentity` class which holds the principal, roles, credentials which were used to authenticate the client (user) and other security attributes. An easy option to customize `SecurityIdentity` is to register a custom `SecurityIdentityAugmentor`. For example, the augmentor below adds an addition role:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:147
#, no-wrap
msgid ""
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:150
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:153
#: upstream/_versions/main/guides/security-customization.adoc:195
#: upstream/_versions/main/guides/security-customization.adoc:251
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RolesAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:157
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        return Uni.createFrom().item(build(identity));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:161
#, no-wrap
msgid ""
"        // Do 'return context.runBlocking(build(identity));'\n"
"        // if a blocking call is required to customize the identity\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:168
#, no-wrap
msgid ""
"    private Supplier<SecurityIdentity> build(SecurityIdentity identity) {\n"
"        if(identity.isAnonymous()) {\n"
"            return () -> identity;\n"
"        } else {\n"
"            // create a new builder and copy principal, attributes, credentials and roles from the original identity\n"
"            QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:175
#, no-wrap
msgid ""
"            // add custom role source here\n"
"            builder.addRole(\"dummy\");\n"
"            return builder::build;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:178
msgid "Here is another example showing how to use the client certificate available in the current xref:security-authentication-mechanisms.adoc#mutual-TLS-authentication[mutual TLS (mTLS) authentication] request to add more roles:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:188
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:192
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:200
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        return Uni.createFrom().item(build(identity));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:204
#, no-wrap
msgid ""
"    private Supplier<SecurityIdentity> build(SecurityIdentity identity) {\n"
"        // create a new builder and copy principal, attributes, credentials and roles from the original identity\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:211
#, no-wrap
msgid ""
"        CertificateCredential certificate = identity.getCredential(CertificateCredential.class);\n"
"        if (certificate != null) {\n"
"            builder.addRoles(extractRoles(certificate.getCertificate()));\n"
"        }\n"
"        return builder::build;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:214
#, no-wrap
msgid ""
"    private Set<String> extractRoles(X509Certificate certificate) {\n"
"        String name = certificate.getSubjectX500Principal().getName();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:225
#, no-wrap
msgid ""
"        switch (name) {\n"
"            case \"CN=client\":\n"
"                return Collections.singleton(\"user\");\n"
"            case \"CN=guest-client\":\n"
"                return Collections.singleton(\"guest\");\n"
"            default:\n"
"                return Collections.emptySet();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:231
msgid "If more than one custom `SecurityIdentityAugmentor` is registered then they will be considered equal candidates and invoked in random order.  You can enforce the order by implementing a default `SecurityIdentityAugmentor#priority` method. Augmentors with higher priorities will be invoked first."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:235
msgid "By default, the request context is not activated when augmenting the security identity, this means that if you want to use for example Hibernate that mandates a request context, you will have a `jakarta.enterprise.context.ContextNotActiveException`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:237
msgid "The solution is to activate the request context, the following example shows how to get the roles from an Hibernate with Panache `UserRoleEntity`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:244
#, no-wrap
msgid ""
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:248
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.inject.Instance;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:254
#, no-wrap
msgid ""
"    @Inject\n"
"    Instance<SecurityIdentitySupplier> identitySupplierInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:260
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        if(identity.isAnonymous()) {\n"
"            return Uni.createFrom().item(identity);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:267
#, no-wrap
msgid ""
"        // Hibernate ORM is blocking\n"
"        SecurityIdentitySupplier identitySupplier = identitySupplierInstance.get();\n"
"        identitySupplier.setIdentity(identity);\n"
"        return context.runBlocking(identitySupplier);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:273
#, no-wrap
msgid ""
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:277
#, no-wrap
msgid ""
"import jakarta.enterprise.context.Dependent;\n"
"import jakarta.enterprise.context.control.ActivateRequestContext;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:280
#, no-wrap
msgid ""
"@Dependent\n"
"class SecurityIdentitySupplier implements Supplier<SecurityIdentity> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:282
#, no-wrap
msgid "    private SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:288
#, no-wrap
msgid ""
"    @Override\n"
"    @ActivateRequestContext\n"
"    public SecurityIdentity get() {\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
"        String user = identity.getPrincipal().getName();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:292
#, no-wrap
msgid ""
"        UserRoleEntity.<userRoleEntity>streamAll()\n"
"                .filter(role -> user.equals(role.user))\n"
"                .forEach(role -> builder.addRole(role.role));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:295
#, no-wrap
msgid ""
"        return builder.build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:300
#, no-wrap
msgid ""
"    public void setIdentity(SecurityIdentity identity) {\n"
"        this.identity = identity;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-customization.adoc:303
#, no-wrap
msgid "Custom Jakarta REST SecurityContext"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:306
msgid "If you use Jakarta REST `ContainerRequestFilter` to set a custom Jakarta REST `SecurityContext` then make sure `ContainerRequestFilter` runs in the Jakarta REST pre-match phase by adding a `@PreMatching` annotation to it for this custom security context to be linked with Quarkus `SecurityIdentity`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:310
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:316
#, no-wrap
msgid ""
"import jakarta.ws.rs.container.ContainerRequestContext;\n"
"import jakarta.ws.rs.container.ContainerRequestFilter;\n"
"import jakarta.ws.rs.container.PreMatching;\n"
"import jakarta.ws.rs.core.SecurityContext;\n"
"import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:335
#, no-wrap
msgid ""
"@Provider\n"
"@PreMatching\n"
"public class SecurityOverrideFilter implements ContainerRequestFilter {\n"
"    @Override\n"
"    public void filter(ContainerRequestContext requestContext) throws IOException {\n"
"        String user = requestContext.getHeaders().getFirst(\"User\");\n"
"        String role = requestContext.getHeaders().getFirst(\"Role\");\n"
"        if (user != null && role != null) {\n"
"            requestContext.setSecurityContext(new SecurityContext() {\n"
"                @Override\n"
"                public Principal getUserPrincipal() {\n"
"                    return new Principal() {\n"
"                        @Override\n"
"                        public String getName() {\n"
"                            return user;\n"
"                        }\n"
"                    };\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:340
#, no-wrap
msgid ""
"                @Override\n"
"                public boolean isUserInRole(String r) {\n"
"                    return role.equals(r);\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:345
#, no-wrap
msgid ""
"                @Override\n"
"                public boolean isSecure() {\n"
"                    return false;\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:352
#, no-wrap
msgid ""
"                @Override\n"
"                public String getAuthenticationScheme() {\n"
"                    return \"basic\";\n"
"                }\n"
"            });\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:355
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-customization.adoc:357
#, no-wrap
msgid "Disabling Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:360
msgid "If you have a good reason to disable the authorization then you can register a custom `AuthorizationController`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:369
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(Interceptor.Priority.LIBRARY_AFTER)\n"
"@ApplicationScoped\n"
"public class DisabledAuthController extends AuthorizationController {\n"
"    @ConfigProperty(name = \"disable.authorization\", defaultValue = \"false\")\n"
"    boolean disableAuthorization;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:375
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isAuthorizationEnabled() {\n"
"        return !disableAuthorization;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:378
msgid "For manual testing Quarkus provides a convenient config property to disable authorization in dev mode. This property has the exact same effect as the custom `AuthorizationController` shown above, but is only available in dev mode:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:382
#, no-wrap
msgid "quarkus.security.auth.enabled-in-dev-mode=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:385
msgid "Please also see xref:security-testing.adoc#testing-security[TestingSecurity Annotation] section on how to disable the security checks using `TestSecurity` annotation."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-customization.adoc:386
#, no-wrap
msgid "Registering Security Providers"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-customization.adoc:388
#, no-wrap
msgid "Default providers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:394
msgid "When running in native mode, the default behavior for GraalVM native executable generation is to only include the main \"SUN\" provider unless you have enabled SSL, in which case all security providers are registered. If you are not using SSL, then you can selectively register security providers by name using the `quarkus.security.security-providers` property. The following example illustrates configuration to register the \"SunRsaSign\" and \"SunJCE\" security providers:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-customization.adoc:395
#, no-wrap
msgid "Example Security Providers Configuration"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:399
#, no-wrap
msgid "quarkus.security.security-providers=SunRsaSign,SunJCE\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-customization.adoc:402
#, no-wrap
msgid "BouncyCastle"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:405
msgid "If you need to register an `org.bouncycastle.jce.provider.BouncyCastleProvider` JCE provider then please set a `BC` provider name:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-customization.adoc:406
#, no-wrap
msgid "Example Security Providers BouncyCastle Configuration"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:410
#, no-wrap
msgid "quarkus.security.security-providers=BC\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:413
msgid "and add the BouncyCastle provider dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:421
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bcprov-jdk18on</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:427
#, no-wrap
msgid "implementation(\"org.bouncycastle:bcprov-jdk18on\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-customization.adoc:430
#, no-wrap
msgid "BouncyCastle JSSE"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:433
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it instead of the default SunJSSE provider then please set a `BCJSSE` provider name:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-customization.adoc:434
#, no-wrap
msgid "Example Security Providers BouncyCastle JSSE Configuration"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:438
#, no-wrap
msgid "quarkus.security.security-providers=BCJSSE\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:440
#: upstream/_versions/main/guides/security-customization.adoc:515
#, no-wrap
msgid "quarkus.http.ssl.client-auth=REQUIRED\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:445
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks\n"
"quarkus.http.ssl.certificate.key-store-password=password\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks\n"
"quarkus.http.ssl.certificate.trust-store-password=password\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:448
msgid "and add the BouncyCastle TLS dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:456
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bctls-jdk18on</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:462
#, no-wrap
msgid "implementation(\"org.bouncycastle:bctls-jdk18on\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-customization.adoc:465
#, no-wrap
msgid "BouncyCastle FIPS"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:468
msgid "If you need to register an `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE provider then please set a `BCFIPS` provider name:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-customization.adoc:469
#, no-wrap
msgid "Example Security Providers BouncyCastle FIPS Configuration"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:473
#, no-wrap
msgid "quarkus.security.security-providers=BCFIPS\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:476
msgid "and add the BouncyCastle FIPS provider dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:484
#: upstream/_versions/main/guides/security-customization.adoc:540
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bc-fips</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:490
#, no-wrap
msgid "implementation(\"org.bouncycastle:bc-fips\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:495
msgid "`BCFIPS` provider option is supported in native image but the algorithm self-tests which rely on `java.security.SecureRandom` to verify the generated keys have been removed for these tests to pass. The following classes have been affected:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:496
msgid "`org.bouncycastle.crypto.general.DSA`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:497
msgid "`org.bouncycastle.crypto.general.DSTU4145`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:498
msgid "`org.bouncycastle.crypto.general.ECGOST3410`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:499
msgid "`org.bouncycastle.crypto.general.GOST3410`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:500
msgid "`org.bouncycastle.crypto.fips.FipsDSA`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:501
msgid "`org.bouncycastle.crypto.fips.FipsEC`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:502
msgid "`org.bouncycastle.crypto.fips.FipsRSA`"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-customization.adoc:505
#, no-wrap
msgid "BouncyCastle JSSE FIPS"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:508
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it in combination with `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` instead of the default SunJSSE provider then please set a `BCFIPSJSSE` provider name:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-customization.adoc:509
#, no-wrap
msgid "Example Security Providers BouncyCastle FIPS JSSE Configuration"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:513
#, no-wrap
msgid "quarkus.security.security-providers=BCFIPSJSSE\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:524
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks\n"
"quarkus.http.ssl.certificate.key-store-password=password\n"
"quarkus.http.ssl.certificate.key-store-file-type=BCFKS\n"
"quarkus.http.ssl.certificate.key-store-provider=BCFIPS\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks\n"
"quarkus.http.ssl.certificate.trust-store-password=password\n"
"quarkus.http.ssl.certificate.trust-store-file-type=BCFKS\n"
"quarkus.http.ssl.certificate.trust-store-provider=BCFIPS\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:527
msgid "and the BouncyCastle TLS dependency optimized for using the BouncyCastle FIPS provider:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:535
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>org.bouncycastle</groupId>\n"
"  <artifactId>bctls-fips</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:547
#, no-wrap
msgid ""
"implementation(\"org.bouncycastle:bctls-fips\")\n"
"implementation(\"org.bouncycastle:bc-fips\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:551
msgid "Note that the keystore and truststore type and provider are set to `BCFKS` and `BCFIPS`.  One can generate a keystore with this type and provider like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:555
#, no-wrap
msgid "keytool -genkey -alias server -keyalg RSA -keystore server-keystore.jks -keysize 2048 -keypass password -provider org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider -providerpath $PATH_TO_BC_FIPS_JAR -storetype BCFKS\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:560
msgid "`BCFIPSJSSE` provider option is currently not supported in native image."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-customization.adoc:563
#, no-wrap
msgid "SunPKCS11"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:566
msgid "`SunPKCS11` provider provides a bridge to specific `PKCS#11` implementations such as cryptographic smartcards and other Hardware Security Modules, Network Security Services in FIPS mode, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:568
msgid "Typically, in order to work with `SunPKCS11`, one needs to install a `PKCS#11` implementation, generate a configuration which usually refers to a shared library, token slot, etc and write the following Java code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:573
#, no-wrap
msgid ""
"import java.security.Provider;\n"
"import java.security.Security;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:575
#, no-wrap
msgid "String configuration = \"pkcs11.cfg\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:581
#, no-wrap
msgid ""
"Provider sunPkcs11 = Security.getProvider(\"SunPKCS11\");\n"
"Provider pkcsImplementation = sunPkcs11.configure(configuration);\n"
"// or prepare configuration in the code or read it from the file such as \"pkcs11.cfg\" and do\n"
"// sunPkcs11.configure(\"--\" + configuration);\n"
"Security.addProvider(pkcsImplementation);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:584
msgid "In Quarkus you can achieve the same at the configuration level only without having to modify the code, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:589
#, no-wrap
msgid ""
"quarkus.security.security-providers=SunPKCS11\n"
"quarkus.security.security-provider-config.SunPKCS11=pkcs11.cfg\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-customization.adoc:594
msgid "Note that while accessing the `SunPKCS11` bridge provider is supported in native image, configuring `SunPKCS11` is currently not supported in native image at the Quarkus level."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-customization.adoc:596
#, no-wrap
msgid "Reactive Security"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:599
msgid "If you are going to use security in a reactive environment, you will likely need SmallRye Context Propagation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:607
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-context-propagation</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-customization.adoc:613
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-context-propagation\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:619
msgid "This will allow you to propagate the identity throughout the reactive callbacks. You also need to make sure you are using an executor that is capable of propagating the identity (e.g. no `CompletableFuture.supplyAsync`), to make sure that Quarkus can propagate it. For more information see the xref:context-propagation.adoc[Context Propagation Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-customization.adoc:620
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:623
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:624
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:625
msgid "xref:security-authentication-mechanisms.adoc#other-supported-authentication-mechanisms[Authentication mechanisms in Quarkus]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-customization.adoc:625
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr ""
