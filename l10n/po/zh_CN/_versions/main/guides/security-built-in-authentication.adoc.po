# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-08-02 09:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:6
#, no-wrap
msgid "Built-In Authentication Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:11
msgid "The following section describes the Quarkus built-in authentication mechanisms for HTTP based FORM, BASIC, and Mutual TLS authentication. Proactive authentication is also described."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:13
#, no-wrap
msgid "Basic Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:16
msgid "HTTP Basic Authentication uses fields in the HTTP header and is the easiest to set up. Also, it is one of the least resource-demanding techniques that enforce access controls to the Web resources without requiring HTTP cookies, session identifiers, or login pages."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:18
msgid "In the context of an HTTP request, Basic authentication is a method for an HTTP user agent, such as a web browser, to provide a user name and password when creating a request. In Basic HTTP Authentication, a request contains a header field in the form of `Authorization: Basic <credentials>`, where credentials are the Base64 encoding of a user ID and password joined by a colon as described in the following example."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:20
#, no-wrap
msgid "Example"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:23
msgid "If the user name is `Alice` and the password is `secret`, the HTTP authorization header looks authorization as `Authorization: Basic QWxjZTpzZWNyZXQ=`, where `QWxjZTpzZWNyZXQ=` is a Base64 encoded representation of the `Alice:secret` string."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:26
msgid "The Basic Authentication mechanism does not provide confidentiality protection for the transmitted credentials. The credentials are merely encoded with Base64 when in transit and not encrypted or hashed in any way. Therefore, Basic Authentication is used with HTTPS to provide confidentiality."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:28
msgid "Basic Authentication is a well-specified, simple challenge and response scheme that all web browsers and most web servers understand. However, there are a few limitations associated with Basic Authentication, which include:"
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:29
#, no-wrap
msgid "Credentials are sent as plain text"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:33
msgid "It is required to use HTTPS with Basic Authentication to avoid exposing the credentials. However, if the load balancer terminates HTTPS, the risk of exposing credentials as plain text increases when a request is forwarded to Quarkus over HTTP."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:35
msgid "Also, in multi-hop deployments, the credentials can be exposed if HTTPS is used between the client and the first Quarkus endpoint only, and the credentials are propagated to the next Quarkus endpoint over HTTP."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:37
#, no-wrap
msgid "Credentials are sent with each request"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:41
msgid "In Basic Authentication, a username and password need to be sent with each request, which increases the risk of credentials being exposed."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:43
#, no-wrap
msgid "Application complexity increases"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:47
msgid "The Quarkus application needs to ensure itself that usernames, passwords, and roles are managed securely, which increases the application complexity."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:50
#, no-wrap
msgid "Enabling Basic Authentication"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:52
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:55
msgid "You have installed at least one extension that provides an `IdentityProvider` based on username and password, such as xref:security-jdbc.adoc[Elytron JDBC]."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:56
#, no-wrap
msgid "Procedure"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:59
msgid "Enable Basic Authentication by setting the value of `quarkus.http.auth.basic` property to `true`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:63
#, no-wrap
msgid "quarkus.http.auth.basic=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:66
msgid "For a Basic Authentication configuration walk-through that uses `JPA`, see the xref:security-getting-started.adoc[Getting Started With Security] guide."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:67
#, no-wrap
msgid "Additional resources"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:70
msgid "xref:security.adoc#identity-providers[Security Identity Providers]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:71
msgid "xref:security-testing.adoc#configuring-user-information[Configuring User Information in application.properties]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:74
#, no-wrap
msgid "Form Based Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:80
msgid "Quarkus provides form based authentication that works in a similar manner to traditional Servlet form based auth. Unlike traditional form authentication, the authenticated user is not stored in an HTTP session, as Quarkus does not provide clustered HTTP session support. Instead, the authentication information is stored in an encrypted cookie, which can be read by all members of the cluster (provided they all share the same encryption key)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:86
msgid "The encryption key can be set using the `quarkus.http.auth.session.encryption-key` property, and it must be at least 16 characters long. This key is hashed using SHA-256 and the resulting digest is used as a key for AES-256 encryption of the cookie value. This cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their clocks synchronized. At one minute intervals a new cookie will be generated with an updated expiry time if the session is in use."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:88
msgid "The following properties can be used to configure form based auth:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:92
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:95
msgid "Quarkus provides mTLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:97
msgid "To use this authentication method, you should first enable SSL for your application. For more details, check the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:101
msgid "Once your application is accepting secure connections, the next step is to configure a `quarkus.http.ssl.certificate.trust-store-file` holding all the certificates that your application should trust as well as how your application should ask for certificates when a client (e.g.: browser or another service) tries to access one of its protected resources."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:109
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks            <1>\n"
"quarkus.http.ssl.certificate.key-store-password=the_key_store_secret\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks        <2>\n"
"quarkus.http.ssl.certificate.trust-store-password=the_trust_store_secret\n"
"quarkus.http.ssl.client-auth=required                                      <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:112
#, no-wrap
msgid ""
"quarkus.http.auth.permission.default.paths=/*                              <4>\n"
"quarkus.http.auth.permission.default.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:114
msgid "Configures a key store where the server's private key is located."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:115
msgid "Configures a trust store from where the trusted certificates are going to be loaded from."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:118
msgid "Defines that the server should *always* ask certificates from clients. You can relax this behavior by using `REQUEST` so that the server should still accept requests without a certificate. Useful when you are also supporting authentication methods other than mTLS."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:119
msgid "Defines a policy where only authenticated users should have access to resources from your application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:122
msgid "Once the incoming request matches a valid certificate in the truststore, your application should be able to obtain the subject by just injecting a `SecurityIdentity` as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:124
#, no-wrap
msgid "Obtaining the subject"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:129
#, no-wrap
msgid ""
"@Inject\n"
"SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:135
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello() {\n"
"    return String.format(\"Hello, %s\", identity.getPrincipal().getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:138
msgid "You should also be able to get the certificate as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:140
#, no-wrap
msgid "Obtaining the certificate"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:145
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:148
#, no-wrap
msgid ""
"CertificateCredential credential = identity.getCredential(CertificateCredential.class);\n"
"X509Certificate certificate = credential.getCertificate();\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:150
#, no-wrap
msgid "Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:154
msgid "The information from the client certificate can be used to enhance Quarkus `SecurityIdentity`. For example, one can add new roles after checking a client certificate subject name, and so on.  Please see the xref:security-customization.adoc#security-identity-customization[SecurityIdentity Customization] section for more information about customizing Quarkus `SecurityIdentity`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:156
#, no-wrap
msgid "Proactive Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:160
msgid "By default, Quarkus does what we call proactive authentication. This means that if an incoming request has a credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:163
msgid "This means that requests with an invalid credential will always be rejected, even for public pages. You can change this behavior and only authenticate when required by setting `quarkus.http.auth.proactive=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:167
msgid "If you disable proactive authentication then the authentication process will only be run when an identity is requested, either because there are security rules that requires the user to be authenticated, or due to programmatic access to the current identity."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:175
msgid "Note that if proactive authentication is in use accessing the `SecurityIdentity` is a blocking operation. This is because authentication may not have happened yet, and accessing it may require calls to external systems such as databases that may block. For blocking applications this is no problem, however if you have disabled authentication in a reactive application this will fail (as you cannot do blocking operations on the IO thread). To work around this you need to `@Inject` an instance of `io.quarkus.security.identity.CurrentIdentityAssociation`, and call the `Uni<SecurityIdentity> getDeferredIdentity();` method. You can then subscribe to the resulting `Uni` and will be notified when authentication is complete and the identity is available."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:180
msgid "It's still possible to access the `SecurityIdentity` synchronously with `public SecurityIdentity getIdentity()` in the xref:resteasy-reactive.adoc[RESTEasy Reactive] from endpoints annotated with `@RolesAllowed`, `@Authenticated`, or with respective configuration authorization checks as authentication has already happened. The same is also valid for the xref:reactive-routes.adoc[Reactive routes] if a route response is synchronous."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:181
#, no-wrap
msgid "How to customize authentication exception responses"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:185
msgid "By default, the authentication security constraints are enforced before the JAX-RS chain starts.  Disabling the proactive authentication effectively shifts this process to the moment when the JAX-RS chain starts running thus making it possible to use JAX-RS `ExceptionMapper` to capture Quarkus Security authentication exceptions such as `io.quarkus.security.AuthenticationFailedException`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:189
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:195
#, no-wrap
msgid ""
"import javax.annotation.Priority;\n"
"import javax.ws.rs.Priorities;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.ext.ExceptionMapper;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:197
#, no-wrap
msgid "import io.quarkus.security.AuthenticationFailedException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:201
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class AuthenticationFailedExceptionMapper implements ExceptionMapper<AuthenticationFailedException> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:204
#, no-wrap
msgid ""
"    @Context\n"
"    UriInfo uriInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:210
#, no-wrap
msgid ""
"    @Override\n"
"    public Response toResponse(AuthenticationFailedException exception) {\n"
"        return Response.status(401).header(\"WWW-Authenticate\", \"Basic realm=\\\"Quarkus\\\"\").build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:212
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-built-in-authentication.adoc:214
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
