# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-03-16 02:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/opentelemetry.adoc:6
#, no-wrap
msgid "Using OpenTelemetry"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:13
msgid "This guide explains how your Quarkus application can utilize https://opentelemetry.io/[OpenTelemetry] (OTel) to provide distributed tracing for interactive web applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:15
msgid "OpenTelemetry Metrics and Logging are not yet supported."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:21
msgid "Quarkus now supports the OpenTelemetry Autoconfiguration for Traces. The configurations match what you can see at https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] with the `quarkus.*` prefix."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:23
msgid "Extensions and the libraries they provide, are directly instrumented in Quarkus. The *use of the https://opentelemetry.io/docs/instrumentation/java/automatic/[OpenTelemetry Agent] is not needed nor recommended* due to context propagation issues between imperative and reactive libraries."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:30
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:33
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:34
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:38
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:40
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:42
msgid "The solution is located in the `opentelemetry-quickstart` {quickstarts-tree-url}/opentelemetry-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:43
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:46
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:54
msgid "This command generates the Maven project and imports the `quarkus-opentelemetry` extension, which includes the default OpenTelemetry support, and a gRPC span exporter for https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:57
msgid "If you already have your Quarkus project configured, you can add the `quarkus-opentelemetry` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:62
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:64
#: upstream/_versions/main/guides/opentelemetry.adoc:204
#: upstream/_versions/main/guides/opentelemetry.adoc:268
#: upstream/_versions/main/guides/opentelemetry.adoc:285
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:70
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-opentelemetry</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:73
#: upstream/_versions/main/guides/opentelemetry.adoc:213
#: upstream/_versions/main/guides/opentelemetry.adoc:277
#: upstream/_versions/main/guides/opentelemetry.adoc:294
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:76
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-opentelemetry\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:78
#, no-wrap
msgid "Examine the Jakarta REST resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:81
msgid "Create a `src/main/java/org/acme/opentelemetry/TracedResource.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:85
#, no-wrap
msgid "package org.acme.opentelemetry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:91
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:94
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:96
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:104
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\");\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:108
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any required code changes."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:109
#, no-wrap
msgid "Create the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:112
msgid "There are no mandatory configurations for the extension to work. If you need to change any of the default property values, here is an example on how to configure the default OTLP gRPC Exporter within the application, using the `src/main/resources/application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:118
#, no-wrap
msgid ""
"quarkus.application.name=myservice // <1>\n"
"quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317 // <2>\n"
"quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n  // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:121
#, no-wrap
msgid ""
"# Alternative to the console log\n"
"quarkus.http.access-log.pattern=\"...traceId=%{X,traceId} spanId=%{X,spanId}\" // <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:124
msgid "All spans created from the application will include an OpenTelemetry `Resource` indicating the span was created by the `myservice` application. If not set, it will default to the artifact id."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:125
msgid "gRPC endpoint to send spans. If not set, it will default to `http://localhost:4317`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:126
msgid "Add tracing information into log messages."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:127
msgid "You can also only put the trace info into the access log. In this case you must omit the info in the console log format."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:131
msgid "All configurations have been updated from `quarkus.opentelemetry.\\*` -> `quarkus.otel.*`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:133
msgid "The legacy configurations are now deprecated but will still work during a transition period."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:135
#, no-wrap
msgid "Run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:138
msgid "The first step is to configure and start the https://opentelemetry.io/docs/collector/[OpenTelemetry Collector] to receive, process and export telemetry data to https://www.jaegertracing.io/[Jaeger] that will display the captured traces."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:144
msgid "Jaeger-all-in-one includes the Jaeger agent, an OTel collector, and the query service/UI.  You do not need to install a separated collector. You can directly send the trace data to Jaeger (after enabling OTLP receivers there, see e.g. this https://medium.com/jaegertracing/introducing-native-support-for-opentelemetry-in-jaeger-eb661be8183c[blog entry] for details)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:147
msgid "Start the OpenTelemetry Collector and Jaeger system via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:152
#, no-wrap
msgid ""
"version: \"2\"\n"
"services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:164
#, no-wrap
msgid ""
"  # Jaeger\n"
"  jaeger-all-in-one:\n"
"    image: jaegertracing/all-in-one:latest\n"
"    ports:\n"
"      - \"16686:16686\" # Jaeger UI\n"
"      - \"14268:14268\" # Receive legacy OpenTracing traces, optional\n"
"      - \"4317:4317\"   # OTLP gRPC receiver\n"
"      - \"4318:4318\"   # OTLP HTTP receiver, not yet used by Quarkus, optional\n"
"      - \"14250:14250\" # Receive from external otel-collector, optional\n"
"    environment:\n"
"      - COLLECTOR_OTLP_ENABLED=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:166
msgid "You should remove the optional ports you don't need them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:168
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:172
msgid "or if configuring the OTLP gRPC endpoint via JVM arguments:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:178
msgid "With the OpenTelemetry Collector, the Jaeger system and the application running, you can make a request to the provided endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:183
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:186
msgid "When the first request has been submitted, you will be able to see the tracing information in the logs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:192
#, no-wrap
msgid ""
"10:49:02 INFO  traceId=, parentId=, spanId=, sampled= [io.quarkus] (main) Installed features: [cdi, opentelemetry, rest-client, resteasy, smallrye-context-propagation, vertx]\n"
"10:49:03 INFO  traceId=17ceb8429b9f25b0b879fa1503259456, parentId=3125c8bee75b7ad6, spanId=58ce77c86dd23457, sampled=true [or.ac.op.TracedResource] (executor-thread-1) hello\n"
"10:49:03 INFO  traceId=ad23acd6d9a4ed3d1de07866a52fa2df, parentId=, spanId=df13f5b45cf4d1e2, sampled=true [or.ac.op.TracedResource] (executor-thread-0) hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:196
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:198
msgid "Hit `CTRL+C` or type `q` to stop the application."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:199
#, no-wrap
msgid "JDBC"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:202
msgid "The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:210
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.instrumentation</groupId>\n"
"    <artifactId>opentelemetry-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:216
#, no-wrap
msgid "implementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:219
msgid "As it uses a dedicated JDBC datasource wrapper, you must enable telemetry for your datasource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:224
#, no-wrap
msgid ""
"# enable tracing\n"
"quarkus.datasource.jdbc.telemetry=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:228
#, no-wrap
msgid ""
"# configure datasource\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:230
#, no-wrap
msgid "Additional configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:233
msgid "Some use cases will require custom configuration of OpenTelemetry.  These sections will outline what is necessary to properly configure it."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:234
#, no-wrap
msgid "ID Generator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:237
msgid "The OpenTelemetry extension will use by default a random https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID Generator] when creating the trace and span identifier."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:240
msgid "Some vendor-specific protocols need a custom ID Generator, you can override the default one by creating a producer.  The OpenTelemetry extension will detect the `IdGenerator` CDI bean and will use it when configuring the tracer producer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:245
#: upstream/_versions/main/guides/opentelemetry.adoc:375
#, no-wrap
msgid ""
"@Singleton\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:253
#, no-wrap
msgid ""
"    /** Creates a custom IdGenerator for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public IdGenerator idGenerator() {\n"
"        return AwsXrayIdGenerator.getInstance();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:255
#, no-wrap
msgid "Propagators"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:258
msgid "OpenTelemetry propagates cross-cutting concerns through https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] that will share an underlying `Context` for storing state and accessing data across the lifespan of a distributed transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:261
msgid "By default, the OpenTelemetry extension enables the https://www.w3.org/TR/trace-context/[W3C Trace Context] and the https://www.w3.org/TR/baggage/[W3C Baggage] propagators, you can however choose any of the supported OpenTelemetry propagators by setting the `propagators` config that is described in the <<configuration-reference>>."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:266
msgid "The `b3`, `b3multi`, `jaeger` and `ottrace` propagators will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] extension to be added as a dependency to your project."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:274
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:280
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:283
msgid "The `xray` propagator will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/aws[aws] extension to be added as a dependency to your project."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:291
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-aws</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:297
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-aws\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:300
#, no-wrap
msgid "Resource"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:303
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[resource] is a representation of the entity that is producing telemetry, it adds attributes to the exported trace to characterize who is producing the trace."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:307
msgid "You can add attributes by setting the `resource-attributes` tracer config that is described in the <<configuration-reference>>.  Since this property can be overridden at runtime, the OpenTelemetry extension will pick up its value following the order of precedence that is described in the xref:config-reference.adoc#configuration-sources[Quarkus Configuration Reference]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:310
msgid "If by any means you need to use a custom resource or one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create multiple resource producers. The OpenTelemetry extension will detect the `Resource` CDI beans and will merge them when configuring the tracer producer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:315
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:321
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource osResource() {\n"
"        return OsResource.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:328
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource ecsResource() {\n"
"        return EcsResource.get();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:330
#, no-wrap
msgid "Sampler"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:334
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[sampler] decides whether a trace should be sampled and exported, controlling noise and overhead by reducing the number of sample of traces collected and sent to the collector."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:337
msgid "You can set a https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[built-in sampler] simply by setting the desired sampler config described in the <<configuration-reference>>."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:341
msgid "Quarkus 3.0 introduced breaking changes on the configuration."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:343
msgid "Sampler related property names and values change to comply with the latest Java OpenTelemetry SDK. During a transition period it will be possible to set the new configuration values in the old property because we are mapping `quarkus.opentelemetry.tracer.sampler` -> `quarkus.otel.traces.sampler`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:345
msgid "If the sampler is parent based, there is no need to set, the now dropped property, `quarkus.opentelemetry.tracer.sampler.parent-based`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:347
msgid "The values you need to set on `quarkus.opentelemetry.tracer.sampler` are now:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:349
#, no-wrap
msgid "Old Sampler config value"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:349
#, no-wrap
msgid "New Sampler config valu"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:351
#, no-wrap
msgid "New Sampler config value (Parent based)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:352
#, no-wrap
msgid "`on`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:353
#, no-wrap
msgid "`always_on`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:355
#, no-wrap
msgid "`parentbased_always_on`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:356
#, no-wrap
msgid "`off`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:357
#, no-wrap
msgid "`always_off`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:359
#, no-wrap
msgid "`parentbased_always_off`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:360
#, no-wrap
msgid "`ratio`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:361
#, no-wrap
msgid "`traceidratio`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:362
#, no-wrap
msgid "`parentbased_traceidratio`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:366
msgid "If you need to use a custom sampler there are now 2 different ways:"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:367
#, no-wrap
msgid "Sampler CDI Producer"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:370
msgid "You can create a sampler CDI producer. The Quarkus OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the Tracer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:385
#, no-wrap
msgid ""
"    /** Creates a custom sampler for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public Sampler sampler() {\n"
"        return JaegerRemoteSampler.builder()\n"
"        .setServiceName(\"my-service\")\n"
"        .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:387
#, no-wrap
msgid "OTel Sampler SPI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:391
msgid "This will use the SPI hooks available with the OTel Autoconfiguration.  You can create a simple Sampler class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:404
#, no-wrap
msgid ""
"public class CustomSPISampler implements Sampler {\n"
"    @Override\n"
"    public SamplingResult shouldSample(Context context,\n"
"            String s,\n"
"            String s1,\n"
"            SpanKind spanKind,\n"
"            Attributes attributes,\n"
"            List<LinkData> list) {\n"
"        // Do some sampling here\n"
"        return Sampler.alwaysOn().shouldSample(context, s, s1, spanKind, attributes, list);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:410
#, no-wrap
msgid ""
"    @Override\n"
"    public String getDescription() {\n"
"        return \"custom-spi-sampler-description\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:413
msgid "Then a Sampler Provider:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:420
#, no-wrap
msgid ""
"public class CustomSPISamplerProvider implements ConfigurableSamplerProvider {\n"
"    @Override\n"
"    public Sampler createSampler(ConfigProperties configProperties) {\n"
"        return new CustomSPISampler();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:426
#, no-wrap
msgid ""
"    @Override\n"
"    public String getName() {\n"
"        return \"custom-spi-sampler\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:428
msgid "Write the SPI loader text file at `resources/META-INF/services` with name `io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSamplerProvider` containing the full qualified name of the `CustomSPISamplerProvider` class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:430
msgid "Then activate on the configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:433
#, no-wrap
msgid "quarkus.opentelemetry.tracer.sampler=custom-spi-sampler\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:436
msgid "As you can see, CDI is much simpler to work with."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:437
#, no-wrap
msgid "Additional instrumentation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:441
msgid "Some Quarkus extensions will require additional code to ensure traces are propagated to subsequent execution.  These sections will outline what is necessary to propagate traces across process boundaries."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:443
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:444
#, no-wrap
msgid "CDI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:448
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.extension.annotations.WithSpan` annotation will create a new Span and establish any required relationships with the current Trace context."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:451
msgid "Method parameters can be annotated with the `io.opentelemetry.extension.annotations.SpanAttribute` annotation to indicate which method parameters should be part of the Trace."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:453
msgid "Example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:459
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class SpanBean {\n"
"    @WithSpan\n"
"    void span() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:461
#: upstream/_versions/main/guides/opentelemetry.adoc:466
#: upstream/_versions/main/guides/opentelemetry.adoc:471
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:464
#, no-wrap
msgid ""
"    @WithSpan(\"name\")\n"
"    void spanName() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:469
#, no-wrap
msgid ""
"    @WithSpan(kind = SERVER)\n"
"    void spanKind() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:474
#, no-wrap
msgid ""
"    @WithSpan\n"
"    void spanArgs(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:477
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:479
#, no-wrap
msgid "Available OpenTelemetry CDI injections"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:483
msgid "As per MicroProfile Telemetry Tracing specification, Quarkus supports the CDI injections of the following classes:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:485
msgid "`io.opentelemetry.api.OpenTelemetry`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:486
msgid "`io.opentelemetry.api.trace.Tracer`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:487
msgid "`io.opentelemetry.api.trace.Span`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:488
msgid "`io.opentelemetry.api.baggage.Baggage`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:490
msgid "You can inject these classes in any CDI enabled bean. For instance, the `Tracer` is particularly useful to start custom spans:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:495
#, no-wrap
msgid ""
"@Inject\n"
"Tracer tracer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:497
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:504
#, no-wrap
msgid ""
"public void tracedWork() {\n"
"    Span span = tracer.spanBuilder(\"My custom span\")\n"
"        .setAttribute(\"attr\", \"attr.value\")\n"
"        .setParent(Context.current().with(Span.current()))\n"
"        .setSpanKind(SpanKind.INTERNAL)\n"
"        .startSpan();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:506
#, no-wrap
msgid "    // traced work\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:509
#, no-wrap
msgid ""
"    span.end();\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:511
#, no-wrap
msgid "SmallRye Reactive Messaging - Kafka"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:515
msgid "When using the SmallRye Reactive Messaging extension for Kafka, we are able to propagate the span into the Kafka Record with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:520
#, no-wrap
msgid ""
"TracingMetadata tm = TracingMetadata.withPrevious(Context.current());\n"
"Message out = Message.of(...).withMetadata(tm);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:524
msgid "The above creates a `TracingMetadata` object we can add to the `Message` being produced, which retrieves the OpenTelemetry `Context` to extract the current span for propagation."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:525
#, no-wrap
msgid "Exporters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:528
msgid "Quarkus OpenTelemetry defaults to the standard OTLP exporter defined in OpenTelemetry."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:530
msgid "Additional exporters will be available in the Quarkiverse https://github.com/quarkiverse/quarkus-opentelemetry-exporter/blob/main/README.md[quarkus-opentelemetry-exporter] project."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:532
#, no-wrap
msgid "OpenTelemetry Configuration Reference"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:538
msgid "Quarkus supports the OpenTelemetry Autoconfiguration for Traces.  The configurations match what you can see at https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] adding the usual `quarkus.*` prefix."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:540
msgid "Quarkus OpenTelemetry configuration properties now have the `quarkus.otel.*` prefix."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:542
#, no-wrap
msgid "*The legacy properties* with prefix `quarkus.opentelemetry.*` are currently being mapped to the new ones as a default, during a transition period. See Default column in the details below.\n"
msgstr ""
