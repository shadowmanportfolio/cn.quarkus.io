# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-10 02:35+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/opentelemetry.adoc:6
#, no-wrap
msgid "Using OpenTelemetry"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:15
msgid "This guide explains how your Quarkus application can utilize https://opentelemetry.io/[OpenTelemetry] (OTel) to provide distributed tracing for interactive web applications."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:19
msgid "OpenTelemetry Metrics and Logging are not yet supported."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:22
msgid "Quarkus now supports the OpenTelemetry Autoconfiguration for Traces. The configurations match what you can see at https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] with the `quarkus.*` prefix."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:23
msgid "Extensions and the libraries they provide, are directly instrumented in Quarkus. The *use of the https://opentelemetry.io/docs/instrumentation/java/automatic/[OpenTelemetry Agent] is not needed nor recommended* due to context propagation issues between imperative and reactive libraries."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:24
msgid "If you come from the legacy OpenTracing extension, there is a xref:telemetry-opentracing-to-otel-tutorial.adoc[guide to help with the migration]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:26
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:31
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:34
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:35
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:39
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:41
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:43
msgid "The solution is located in the `opentelemetry-quickstart` link:{quickstarts-tree-url}/opentelemetry-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:44
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:47
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:55
msgid "This command generates the Maven project and imports the `quarkus-opentelemetry` extension, which includes the default OpenTelemetry support, and a gRPC span exporter for https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:58
msgid "If you already have your Quarkus project configured, you can add the `quarkus-opentelemetry` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:63
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:65
#: upstream/_versions/main/guides/opentelemetry.adoc:236
#: upstream/_versions/main/guides/opentelemetry.adoc:300
#: upstream/_versions/main/guides/opentelemetry.adoc:318
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:71
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-opentelemetry</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:74
#: upstream/_versions/main/guides/opentelemetry.adoc:245
#: upstream/_versions/main/guides/opentelemetry.adoc:309
#: upstream/_versions/main/guides/opentelemetry.adoc:327
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:77
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-opentelemetry\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:79
#, no-wrap
msgid "Examine the Jakarta REST resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:82
msgid "Create a `src/main/java/org/acme/opentelemetry/TracedResource.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:86
#, no-wrap
msgid "package org.acme.opentelemetry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:92
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:95
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:97
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:105
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\");\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:109
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any required code changes."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:110
#, no-wrap
msgid "Create the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:113
msgid "There are no mandatory configurations for the extension to work."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:115
msgid "If you need to change any of the default property values, here is an example on how to configure the default OTLP gRPC Exporter within the application, using the `src/main/resources/application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:122
#, no-wrap
msgid ""
"quarkus.application.name=myservice // <1>\n"
"quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317 // <2>\n"
"quarkus.otel.exporter.otlp.traces.headers=authorization=Bearer my_secret // <3>\n"
"quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n  // <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:125
#, no-wrap
msgid ""
"# Alternative to the console log\n"
"quarkus.http.access-log.pattern=\"...traceId=%{X,traceId} spanId=%{X,spanId}\" // <5>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:128
msgid "All spans created from the application will include an OpenTelemetry `Resource` indicating the span was created by the `myservice` application. If not set, it will default to the artifact id."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:129
msgid "gRPC endpoint to send spans. If not set, it will default to `http://localhost:4317`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:130
msgid "Optional gRPC headers commonly used for authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:131
msgid "Add tracing information into log messages."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:132
msgid "You can also only put the trace info into the access log. In this case you must omit the info in the console log format."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:136
msgid "All configurations have been updated from `quarkus.opentelemetry.\\*` -> `quarkus.otel.*`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:138
msgid "The legacy configurations are now deprecated but will still work during a transition period."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:140
#, no-wrap
msgid "Disable all or parts of the OpenTelemetry extension"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:143
msgid "Once you add the dependency, the extension will be enabled by default but there are a few ways to disable the OpenTelemetry extension globally or partially."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:145
#, no-wrap
msgid "Property name"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:145
#, no-wrap
msgid "Default value"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:147
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:148
#, no-wrap
msgid "`quarkus.otel.enabled`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:149
#: upstream/_versions/main/guides/opentelemetry.adoc:157
#: upstream/_versions/main/guides/opentelemetry.adoc:161
#, no-wrap
msgid "true"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:151
#, no-wrap
msgid "If false, disable the OpenTelemetry usage at *build* time."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:152
#, no-wrap
msgid "`quarkus.otel.sdk.disabled`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:153
#, no-wrap
msgid "false"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:155
#, no-wrap
msgid "Comes from the OpenTelemetry autoconfiguration. If true, will disable the OpenTelemetry SDK usage at *runtime*."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:156
#, no-wrap
msgid "`quarkus.otel.traces.enabled`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:159
#, no-wrap
msgid "If false, disable the OpenTelemetry tracing usage at *build* time."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:160
#, no-wrap
msgid "`quarkus.otel.exporter.otlp.enabled`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:162
#, no-wrap
msgid "If false will disable the default OTLP exporter at *build* time."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:165
msgid "If you need to enable or disable the exporter at runtime, you can use the xref:sampler[Sampler] because it has the ability to filter out all the spans if needed."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:167
#, no-wrap
msgid "Run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:170
msgid "The first step is to configure and start the https://opentelemetry.io/docs/collector/[OpenTelemetry Collector] to receive, process and export telemetry data to https://www.jaegertracing.io/[Jaeger] that will display the captured traces."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:176
msgid "Jaeger-all-in-one includes the Jaeger agent, an OTel collector, and the query service/UI.  You do not need to install a separated collector. You can directly send the trace data to Jaeger (after enabling OTLP receivers there, see e.g. this https://medium.com/jaegertracing/introducing-native-support-for-opentelemetry-in-jaeger-eb661be8183c[blog entry] for details)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:179
msgid "Start the OpenTelemetry Collector and Jaeger system via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:184
#, no-wrap
msgid ""
"version: \"2\"\n"
"services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:196
#, no-wrap
msgid ""
"  # Jaeger\n"
"  jaeger-all-in-one:\n"
"    image: jaegertracing/all-in-one:latest\n"
"    ports:\n"
"      - \"16686:16686\" # Jaeger UI\n"
"      - \"14268:14268\" # Receive legacy OpenTracing traces, optional\n"
"      - \"4317:4317\"   # OTLP gRPC receiver\n"
"      - \"4318:4318\"   # OTLP HTTP receiver, not yet used by Quarkus, optional\n"
"      - \"14250:14250\" # Receive from external otel-collector, optional\n"
"    environment:\n"
"      - COLLECTOR_OTLP_ENABLED=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:198
msgid "You should remove the optional ports you don't need them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:200
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:204
msgid "or if configuring the OTLP gRPC endpoint via JVM arguments:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:210
msgid "With the OpenTelemetry Collector, the Jaeger system and the application running, you can make a request to the provided endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:215
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:218
msgid "When the first request has been submitted, you will be able to see the tracing information in the logs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:224
#, no-wrap
msgid ""
"10:49:02 INFO  traceId=, parentId=, spanId=, sampled= [io.quarkus] (main) Installed features: [cdi, opentelemetry, rest-client, resteasy, smallrye-context-propagation, vertx]\n"
"10:49:03 INFO  traceId=17ceb8429b9f25b0b879fa1503259456, parentId=3125c8bee75b7ad6, spanId=58ce77c86dd23457, sampled=true [or.ac.op.TracedResource] (executor-thread-1) hello\n"
"10:49:03 INFO  traceId=ad23acd6d9a4ed3d1de07866a52fa2df, parentId=, spanId=df13f5b45cf4d1e2, sampled=true [or.ac.op.TracedResource] (executor-thread-0) hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:228
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:230
msgid "Hit `CTRL+C` or type `q` to stop the application."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:231
#, no-wrap
msgid "JDBC"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:234
msgid "The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:242
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.instrumentation</groupId>\n"
"    <artifactId>opentelemetry-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:248
#, no-wrap
msgid "implementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:251
msgid "As it uses a dedicated JDBC datasource wrapper, you must enable telemetry for your datasource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:256
#, no-wrap
msgid ""
"# enable tracing\n"
"quarkus.datasource.jdbc.telemetry=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:260
#, no-wrap
msgid ""
"# configure datasource\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:262
#, no-wrap
msgid "Additional configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:265
msgid "Some use cases will require custom configuration of OpenTelemetry.  These sections will outline what is necessary to properly configure it."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:266
#, no-wrap
msgid "ID Generator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:269
msgid "The OpenTelemetry extension will use by default a random https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID Generator] when creating the trace and span identifier."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:272
msgid "Some vendor-specific protocols need a custom ID Generator, you can override the default one by creating a producer.  The OpenTelemetry extension will detect the `IdGenerator` CDI bean and will use it when configuring the tracer producer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:277
#: upstream/_versions/main/guides/opentelemetry.adoc:454
#, no-wrap
msgid ""
"@Singleton\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:285
#, no-wrap
msgid ""
"    /** Creates a custom IdGenerator for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public IdGenerator idGenerator() {\n"
"        return AwsXrayIdGenerator.getInstance();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:287
#, no-wrap
msgid "Propagators"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:290
msgid "OpenTelemetry propagates cross-cutting concerns through https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] that will share an underlying `Context` for storing state and accessing data across the lifespan of a distributed transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:293
msgid "By default, the OpenTelemetry extension enables the https://www.w3.org/TR/trace-context/[W3C Trace Context] and the https://www.w3.org/TR/baggage/[W3C Baggage] propagators, you can however choose any of the supported OpenTelemetry propagators by setting the `propagators` config that is described in the xref:configuration-reference[OpenTelemetry Configuration Reference]."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:294
#, no-wrap
msgid "Additional Propagators"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:298
msgid "The `b3`, `b3multi`, `jaeger` and `ottrace` propagators will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] extension to be added as a dependency to your project."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:306
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:312
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:316
msgid "The `xray` propagator will need the https://github.com/open-telemetry/opentelemetry-java-contrib/tree/main/aws-xray-propagator[aws] extension to be added as a dependency to your project."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:324
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.contrib</groupId>\n"
"    <artifactId>opentelemetry-aws-xray-propagator</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:330
#, no-wrap
msgid "implementation(\"io.opentelemetry.contrib:opentelemetry-aws-xray-propagator\")\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:332
#, no-wrap
msgid "Customise Propagator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:335
msgid "To customise the propagation header you can implement the `TextMapPropagatorCustomizer` interface. This can be used, as an example, to restrict propagation of OpenTelemetry trace headers and prevent potentially sensitive data to be sent to third party systems."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:338
msgid "```java /**"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:339
msgid "/**"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:340
msgid "Meant to be implemented by a CDI bean that provides arbitrary customization for the TextMapPropagator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:341
msgid "that are to be registered with OpenTelemetry"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:343
#, no-wrap
msgid ""
"*/\n"
"public interface TextMapPropagatorCustomizer {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:345
#, no-wrap
msgid "    TextMapPropagator customize(Context context);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:348
#, no-wrap
msgid ""
"    interface Context {\n"
"        TextMapPropagator propagator();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:353
#, no-wrap
msgid ""
"        ConfigProperties otelConfigProperties();\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:354
#, no-wrap
msgid "Resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:357
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[resource] is a representation of the entity that is producing telemetry, it adds attributes to the exported trace to characterize who is producing the trace."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:361
msgid "You can add attributes by setting the `resource-attributes` tracer config that is described in the xref:configuration-reference[OpenTelemetry Configuration Reference].  Since this property can be overridden at runtime, the OpenTelemetry extension will pick up its value following the order of precedence that is described in the xref:config-reference.adoc#configuration-sources[Quarkus Configuration Reference]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:364
msgid "If by any means you need to use a custom resource or one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create multiple resource producers. The OpenTelemetry extension will detect the `Resource` CDI beans and will merge them when configuring the tracer producer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:369
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:375
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource osResource() {\n"
"        return OsResource.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:382
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource ecsResource() {\n"
"        return EcsResource.get();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:384
#, no-wrap
msgid "User data"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:387
msgid "By setting `quarkus.otel.traces.eusp.enabled=true` you can add information about the user related to each span. The user's ID and roles will be added to the span attributes, if available."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:389
#, no-wrap
msgid "Sampler"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:391
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[sampler] decides whether a trace should be discarded or forwarded, effectively managing noise and reducing overhead by limiting the number of collected traces sent to the collector."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:393
msgid "Quarkus comes equipped with a https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[built-in sampler], and you also have the option to create your custom sampler."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:395
msgid "To use the built-in sampler, you can configure it by setting the desired sampler parameters as detailed in the xref:configuration-reference[OpenTelemetry Configuration Reference]. As an example, you can configure the sampler to retain 50% of the traces:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:401
#, no-wrap
msgid ""
"# build time property only:\n"
"quarkus.otel.traces.sampler=traceidratio\n"
"# Runtime property:\n"
"quarkus.otel.traces.sampler.arg=0.5\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:406
msgid "An interesting use case for the sampler is to activate and deactivate tracing export at runtime, acording to this example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:414
#, no-wrap
msgid ""
"# build time property only:\n"
"quarkus.otel.traces.sampler=traceidratio\n"
"# On (default). All traces are exported:\n"
"quarkus.otel.traces.sampler.arg=1.0\n"
"# Off. No traces are exported:\n"
"quarkus.otel.traces.sampler.arg=0.0\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:420
msgid "Quarkus 3.0 introduced breaking changes on the configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:422
msgid "Sampler related property names and values change to comply with the latest Java OpenTelemetry SDK. During a transition period it will be possible to set the new configuration values in the old property because we are mapping `quarkus.opentelemetry.tracer.sampler` -> `quarkus.otel.traces.sampler`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:424
msgid "If the sampler is parent based, there is no need to set, the now dropped property, `quarkus.opentelemetry.tracer.sampler.parent-based`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:426
msgid "The values you need to set on `quarkus.opentelemetry.tracer.sampler` are now:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:428
#, no-wrap
msgid "Old Sampler config value"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:428
#, no-wrap
msgid "New Sampler config valu"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:430
#, no-wrap
msgid "New Sampler config value (Parent based)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:431
#, no-wrap
msgid "`on`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:432
#, no-wrap
msgid "`always_on`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:434
#, no-wrap
msgid "`parentbased_always_on`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:435
#, no-wrap
msgid "`off`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:436
#, no-wrap
msgid "`always_off`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:438
#, no-wrap
msgid "`parentbased_always_off`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:439
#, no-wrap
msgid "`ratio`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:440
#, no-wrap
msgid "`traceidratio`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:441
#, no-wrap
msgid "`parentbased_traceidratio`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:445
msgid "If you need to use a custom sampler there are now 2 different ways:"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:446
#, no-wrap
msgid "Sampler CDI Producer"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:449
msgid "You can create a sampler CDI producer. The Quarkus OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the Tracer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:464
#, no-wrap
msgid ""
"    /** Creates a custom sampler for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public Sampler sampler() {\n"
"        return JaegerRemoteSampler.builder()\n"
"        .setServiceName(\"my-service\")\n"
"        .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:466
#, no-wrap
msgid "OTel Sampler SPI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:470
msgid "This will use the SPI hooks available with the OTel Autoconfiguration.  You can create a simple Sampler class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:483
#, no-wrap
msgid ""
"public class CustomSPISampler implements Sampler {\n"
"    @Override\n"
"    public SamplingResult shouldSample(Context context,\n"
"            String s,\n"
"            String s1,\n"
"            SpanKind spanKind,\n"
"            Attributes attributes,\n"
"            List<LinkData> list) {\n"
"        // Do some sampling here\n"
"        return Sampler.alwaysOn().shouldSample(context, s, s1, spanKind, attributes, list);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:489
#, no-wrap
msgid ""
"    @Override\n"
"    public String getDescription() {\n"
"        return \"custom-spi-sampler-description\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:492
msgid "Then a Sampler Provider:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:499
#, no-wrap
msgid ""
"public class CustomSPISamplerProvider implements ConfigurableSamplerProvider {\n"
"    @Override\n"
"    public Sampler createSampler(ConfigProperties configProperties) {\n"
"        return new CustomSPISampler();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:505
#, no-wrap
msgid ""
"    @Override\n"
"    public String getName() {\n"
"        return \"custom-spi-sampler\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:507
msgid "Write the SPI loader text file at `resources/META-INF/services` with name `io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSamplerProvider` containing the full qualified name of the `CustomSPISamplerProvider` class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:509
msgid "Then activate on the configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:512
#, no-wrap
msgid "quarkus.otel.traces.sampler=custom-spi-sampler\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:515
msgid "As you can see, CDI is much simpler to work with."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:516
#, no-wrap
msgid "Additional instrumentation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:520
msgid "Some Quarkus extensions will require additional code to ensure traces are propagated to subsequent execution.  These sections will outline what is necessary to propagate traces across process boundaries."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:522
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:523
#, no-wrap
msgid "CDI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:527
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.instrumentation.annotations.WithSpan` annotation will create a new Span and establish any required relationships with the current Trace context."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:529
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.instrumentation.annotations.AddingSpanAttributes` will not create a new span but will add annotated method parameters to attributes in the current span."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:531
msgid "If a method is annotated by mistake with `@AddingSpanAttributes` and `@WithSpan` annotations, the `@WithSpan` annotation will take precedence."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:534
msgid "Method parameters can be annotated with the `io.opentelemetry.instrumentation.annotations.SpanAttribute` annotation to indicate which method parameters should be part of the span. The parameter name can be customized as well."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:536
msgid "Example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:542
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class SpanBean {\n"
"    @WithSpan\n"
"    void span() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:544
#: upstream/_versions/main/guides/opentelemetry.adoc:549
#: upstream/_versions/main/guides/opentelemetry.adoc:554
#: upstream/_versions/main/guides/opentelemetry.adoc:559
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:547
#, no-wrap
msgid ""
"    @WithSpan(\"name\")\n"
"    void spanName() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:552
#, no-wrap
msgid ""
"    @WithSpan(kind = SERVER)\n"
"    void spanKind() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:557
#, no-wrap
msgid ""
"    @WithSpan\n"
"    void spanArgs(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:562
#, no-wrap
msgid ""
"    @AddingSpanAttributes\n"
"    void addArgumentToExistingSpan(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:565
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:567
#, no-wrap
msgid "Available OpenTelemetry CDI injections"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:571
msgid "As per MicroProfile Telemetry Tracing specification, Quarkus supports the CDI injections of the following classes:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:573
msgid "`io.opentelemetry.api.OpenTelemetry`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:574
msgid "`io.opentelemetry.api.trace.Tracer`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:575
msgid "`io.opentelemetry.api.trace.Span`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:576
msgid "`io.opentelemetry.api.baggage.Baggage`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:578
msgid "You can inject these classes in any CDI enabled bean. For instance, the `Tracer` is particularly useful to start custom spans:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:583
#, no-wrap
msgid ""
"@Inject\n"
"Tracer tracer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:585
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:592
#, no-wrap
msgid ""
"public void tracedWork() {\n"
"    Span span = tracer.spanBuilder(\"My custom span\")\n"
"        .setAttribute(\"attr\", \"attr.value\")\n"
"        .setParent(Context.current().with(Span.current()))\n"
"        .setSpanKind(SpanKind.INTERNAL)\n"
"        .startSpan();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:594
#, no-wrap
msgid "    // traced work\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:597
#, no-wrap
msgid ""
"    span.end();\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:599
#, no-wrap
msgid "SmallRye Reactive Messaging - Kafka"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:603
msgid "When using the SmallRye Reactive Messaging extension for Kafka, we are able to propagate the span into the Kafka Record with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:608
#, no-wrap
msgid ""
"TracingMetadata tm = TracingMetadata.withPrevious(Context.current());\n"
"Message out = Message.of(...).withMetadata(tm);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:612
msgid "The above creates a `TracingMetadata` object we can add to the `Message` being produced, which retrieves the OpenTelemetry `Context` to extract the current span for propagation."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:613
#, no-wrap
msgid "Exporters"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:615
#, no-wrap
msgid "Default"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:618
msgid "The Quarkus OpenTelemetry extension uses its own exporter built on top of Vert.x for optimal performance and maintainability."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:620
msgid "The exporter is automatically wired with CDI, that's why the `quarkus.otel.traces.exporter` property defaults to `cdi`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:622
msgid "The `quarkus.otel.exporter.otlp.traces.protocol` default to `grpc` and `http/protobuf` can also be used."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:623
#, no-wrap
msgid "On Quarkiverse"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:625
msgid "Additional exporters will be available in the Quarkiverse https://github.com/quarkiverse/quarkus-opentelemetry-exporter/blob/main/README.md[quarkus-opentelemetry-exporter] project."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:627
#, no-wrap
msgid "Quarkus core extensions instrumented with OpenTelemetry tracing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:630
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-agroal[`quarkus-agroal`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:631
msgid "https://quarkus.io/guides/grpc-getting-started[`quarkus-grpc`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:632
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-jaxrs-client-reactive[`quarkus-jaxrs-client-reactive`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:633
msgid "https://quarkus.io/guides/resteasy[`quarkus-resteasy-jackson`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:634
msgid "https://quarkus.io/guides/resteasy-reactive[`quarkus-resteasy-reactive`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:635
msgid "https://quarkus.io/guides/rest-client[`quarkus-rest-client`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:636
msgid "https://quarkus.io/guides/scheduler[`quarkus-scheduler`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:637
msgid "https://quarkus.io/guides/smallrye-graphql[`quarkus-smallrye-graphql`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:638
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-smallrye-reactive-messaging[`quarkus-smallrye-reactive-messaging`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:639
msgid "AMQP 1.0"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:640
msgid "RabbitMQ"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:641
msgid "Kafka"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:642
msgid "Pulsar"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:643
msgid "https://quarkus.io/guides/vertx[`quarkus-vertx`] (http requests)"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:645
#, no-wrap
msgid "OpenTelemetry Configuration Reference"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:651
msgid "Quarkus supports the OpenTelemetry Autoconfiguration for Traces.  The configurations match what you can see at https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] adding the usual `quarkus.*` prefix."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:653
msgid "Quarkus OpenTelemetry configuration properties now have the `quarkus.otel.*` prefix."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:655
#, no-wrap
msgid "*The legacy properties* with prefix `quarkus.opentelemetry.*` are currently being mapped to the new ones as a default, during a transition period. See Default column in the details below.\n"
msgstr ""
