# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-27 02:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:7
#, no-wrap
msgid "Proactive authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:13
msgid "Proactive authentication is enabled in Quarkus by default. This means that if an incoming request has a credential then that request will always be authenticated, even if the target page does not require authentication."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:17
msgid "Requests with an invalid credential will always be rejected, even when the page is public."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:19
msgid "You can change the default behavior if you only want to authenticate when the target page requires authentication."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:21
msgid "To disable proactive authentication in Quarkus, set the following attribute in the `application.properties` configuration file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:25
#, no-wrap
msgid "`quarkus.http.auth.proactive=false` \n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:28
msgid "If you disable proactive authentication, the authentication process runs only when an identity is requested. An identity can be requested because of security rules that require the user to authenticate or because programmatic access to the current identity is required."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:34
msgid "If proactive authentication is in use, accessing the `SecurityIdentity` is a blocking operation.  This is because authentication may have yet to happen, and accessing it may require calls to external systems, such as databases that may block.  For blocking applications, this is no problem. However, if you have disabled authentication in a reactive application, this will fail (as you cannot do blocking operations on the IO thread).  To work around this, you need to `@Inject` an instance of `io.quarkus.security.identity.CurrentIdentityAssociation` and call the `Uni<SecurityIdentity> getDeferredIdentity();` method.  You can then subscribe to the resulting `Uni` and will be notified when authentication is complete and the identity is available."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:37
msgid "It's still possible to access the `SecurityIdentity` synchronously with `public SecurityIdentity getIdentity()` in the xref:resteasy-reactive.adoc[RESTEasy Reactive] from endpoints annotated with `@RolesAllowed`, `@Authenticated`, or with respective configuration authorization checks as authentication has already happened.  The same is also valid for the xref:reactive-routes.adoc[Reactive routes] if a route response is synchronous."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:40
msgid "xref:security-authorization.adoc#standard-security-annotations[Standard security annotations] on CDI beans are not supported on IO thread if a non-void secured method returns a value synchronously and proactive authentication is disabled, as they need to access the `SecurityIdentity`.  In the example below, we have defined `HelloResource` and `HelloService`. It's easy to see that any GET request to `/hello` will run on IO thread and throw `BlockingOperationNotAllowedException` exception."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:42
msgid "There is more than one way to fix the example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:44
msgid "switch to a worker thread (annotate `hello` endpoint with `@Blocking`)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:45
msgid "change `sayHello` method return type (use reactive or asynchronous data type)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:46
msgid "arguably the safest way is to move `@RolesAllowed` annotation to the endpoint, as accessing `SecurityIdentity` from endpoint methods is never the blocking operation"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:53
#, no-wrap
msgid ""
"import jakarta.annotation.security.PermitAll;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:55
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:59
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@PermitAll\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:62
#, no-wrap
msgid ""
"    @Inject\n"
"    HelloService helloService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:67
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<String> hello() {\n"
"        return Uni.createFrom().item(helloService.sayHello());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:69
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:85
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:75
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:78
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class HelloService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:83
#, no-wrap
msgid ""
"    @RolesAllowed(\"admin\")\n"
"    public String sayHello() {\n"
"        return \"Hello\";\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:87
#, no-wrap
msgid "How to customize authentication exception responses"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:90
msgid "You can use Jakarta REST `ExceptionMapper` to capture Quarkus Security authentication exceptions such as `io.quarkus.security.AuthenticationFailedException`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:94
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:126
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:100
#, no-wrap
msgid ""
"import jakarta.annotation.Priority;\n"
"import jakarta.ws.rs.Priorities;\n"
"import jakarta.ws.rs.core.Response;\n"
"import jakarta.ws.rs.ext.ExceptionMapper;\n"
"import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:102
#, no-wrap
msgid "import io.quarkus.security.AuthenticationFailedException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:106
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class AuthenticationFailedExceptionMapper implements ExceptionMapper<AuthenticationFailedException> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:109
#, no-wrap
msgid ""
"    @Context\n"
"    UriInfo uriInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:115
#, no-wrap
msgid ""
"    @Override\n"
"    public Response toResponse(AuthenticationFailedException exception) {\n"
"        return Response.status(401).header(\"WWW-Authenticate\", \"Basic realm=\\\"Quarkus\\\"\").build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:122
msgid "Some HTTP authentication mechanisms need to handle authentication exceptions themselves to create a correct authentication challenge.  For example, `io.quarkus.oidc.runtime.CodeAuthenticationMechanism` which manages OpenId Connect authorization code flow authentication, needs to build a correct redirect URL, cookies, etc.  For that reason, using custom exception mappers to customize authentication exceptions thrown by such mechanisms is not recommended.  Instead, a safer approach would be to ensure that proactive authentication is enabled and to use Vert.x HTTP route failure handlers. This is because events come to the handler with the correct response status and headers.  You will then only need to customize the response, as outlined in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:129
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:134
#, no-wrap
msgid ""
"import io.quarkus.security.AuthenticationFailedException;\n"
"import io.vertx.core.Handler;\n"
"import io.vertx.ext.web.Router;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:137
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class AuthenticationFailedExceptionHandler {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:151
#, no-wrap
msgid ""
"    public void init(@Observes Router router) {\n"
"        router.route().failureHandler(new Handler<RoutingContext>() {\n"
"            @Override\n"
"            public void handle(RoutingContext event) {\n"
"                if (event.failure() instanceof AuthenticationFailedException) {\n"
"                    event.response().end(\"CUSTOMIZED_RESPONSE\");\n"
"                } else {\n"
"                    event.next();\n"
"                }\n"
"            }\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:153
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:156
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:157
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:158
msgid "xref:security-authentication-mechanisms.adoc#other-supported-authentication-mechanisms[Authentication mechanisms in Quarkus]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:158
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr ""
