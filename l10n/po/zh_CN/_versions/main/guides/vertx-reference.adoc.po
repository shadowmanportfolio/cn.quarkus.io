# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-23 01:57+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/vertx-reference.adoc:6
#, no-wrap
msgid "Vert.x Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:14
msgid "https://vertx.io[Vert.x] is a toolkit for building reactive applications.  As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:17
msgid "This guide is the companion to the xref:vertx.adoc[Using Eclipse Vert.x API from a Quarkus Application] guide.  It provides more advanced details about the usage and the configuration of the Vert.x instance used by Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:19
#, no-wrap
msgid "Access the Vert.x instance"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:23
msgid "To access the managed Vert.x instance, add the `quarkus-vertx` extension to your project.  This dependency might already be available in your project (as a transitive dependency)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:25
msgid "With this extension, you can retrieve the managed instance of Vert.x using either field or constructor injection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:32
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBean {\n"
"// Field injection\n"
"@Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:37
#, no-wrap
msgid ""
"// Constructor injection\n"
"MyBean(Vertx vertx) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:39
#: upstream/_versions/main/guides/vertx-reference.adoc:213
#: upstream/_versions/main/guides/vertx-reference.adoc:840
#: upstream/_versions/main/guides/vertx-reference.adoc:905
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:42
msgid "You can inject either the:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:44
msgid "`io.vertx.core.Vertx` instance exposing the _bare_ Vert.x API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:45
msgid "`io.vertx.mutiny.core.Vertx` instance exposing the _Mutiny_ API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:47
msgid "We recommend using the Mutiny variant as it integrates with the other reactive APIs provided by Quarkus."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:49
#: upstream/_versions/main/guides/vertx-reference.adoc:563
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:52
msgid "If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:55
msgid "Documentation about the Vert.x Mutiny variant is available on https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:57
#, no-wrap
msgid "Configure the Vert.x instance"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:61
msgid "You can configure the Vert.x instance from the `application.properties` file.  The following table lists the supported properties:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:65
msgid "See xref:customizing-the-vert-x-configuration[Customize the Vert.x configuration] to configure the Vert.x instance using a programmatic approach."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:67
#, no-wrap
msgid "Use Vert.x clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:71
msgid "In addition to Vert.x core, you can use most Vert.x ecosystem libraries.  Some Quarkus extension already wraps Vert.x libraries."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:72
#, no-wrap
msgid "Available APIs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:77
msgid "The following table lists the **most** used libraries from the Vert.x ecosystem.  To access these APIs, add the indicated extension or dependency to your project.  Check the associated documentation to learn how to use them."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:81
#, no-wrap
msgid "API"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:82
#, no-wrap
msgid "Extension or Dependency"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:84
#, no-wrap
msgid "Documentation"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:85
#, no-wrap
msgid "AMQP Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:86
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:88
#, no-wrap
msgid "xref:amqp.adoc"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:89
#, no-wrap
msgid "Circuit Breaker"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:90
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:92
#, no-wrap
msgid "https://vertx.io/docs/vertx-circuit-breaker/java/"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:93
#, no-wrap
msgid "Consul Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:94
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:96
#, no-wrap
msgid "https://vertx.io/docs/vertx-consul-client/java/"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:97
#, no-wrap
msgid "DB2 Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:98
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-db2-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:100
#: upstream/_versions/main/guides/vertx-reference.adoc:116
#: upstream/_versions/main/guides/vertx-reference.adoc:120
#: upstream/_versions/main/guides/vertx-reference.adoc:124
#: upstream/_versions/main/guides/vertx-reference.adoc:128
#, no-wrap
msgid "xref:reactive-sql-clients.adoc"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:101
#, no-wrap
msgid "Kafka Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:102
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:104
#, no-wrap
msgid "xref:kafka.adoc"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:105
#, no-wrap
msgid "Mail Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:106
#, no-wrap
msgid "`io.quarkus:quarkus-mailer` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:108
#, no-wrap
msgid "xref:mailer.adoc"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:109
#, no-wrap
msgid "MQTT Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:110
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:112
#, no-wrap
msgid "No guide yet"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:113
#, no-wrap
msgid "MS SQL Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:114
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-mssql-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:117
#, no-wrap
msgid "MySQL Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:118
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-mysql-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:121
#, no-wrap
msgid "Oracle Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:122
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-oracle-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:125
#, no-wrap
msgid "PostgreSQL Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:126
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-pg-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:129
#, no-wrap
msgid "RabbitMQ Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:130
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:132
#, no-wrap
msgid "https://vertx.io/docs/vertx-rabbitmq-client/java"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:133
#, no-wrap
msgid "Redis Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:134
#, no-wrap
msgid "`io.quarkus:quarkus-redis-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:136
#, no-wrap
msgid "xref:redis.adoc"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:137
#, no-wrap
msgid "Web Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:138
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:140
#, no-wrap
msgid "https://vertx.io/docs/vertx-web-client/java/"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:143
msgid "To learn more about the usage of the Vert.x Mutiny API, refer to https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:144
#, no-wrap
msgid "Use the Vert.x Web Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:148
msgid "This section gives an example using the Vert.x `WebClient` in the context of a RESTEasy Reactive application.  As indicated in the table above, add the following dependency to your project:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:150
#: upstream/_versions/main/guides/vertx-reference.adoc:958
#: upstream/_versions/main/guides/vertx-reference.adoc:1140
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:156
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.reactive</groupId>\n"
"    <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:159
#: upstream/_versions/main/guides/vertx-reference.adoc:974
#: upstream/_versions/main/guides/vertx-reference.adoc:1155
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:162
#, no-wrap
msgid "implementation(\"io.smallrye.reactive:smallrye-mutiny-vertx-web-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:165
msgid "Now, in your code, you can create an instance of `WebClient`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:169
#: upstream/_versions/main/guides/vertx-reference.adoc:263
#: upstream/_versions/main/guides/vertx-reference.adoc:489
#: upstream/_versions/main/guides/vertx-reference.adoc:543
#: upstream/_versions/main/guides/vertx-reference.adoc:668
#: upstream/_versions/main/guides/vertx-reference.adoc:787
#: upstream/_versions/main/guides/vertx-reference.adoc:826
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:177
#, no-wrap
msgid ""
"import jakarta.annotation.PostConstruct;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:179
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:184
#, no-wrap
msgid ""
"import io.vertx.mutiny.core.Vertx;\n"
"import io.vertx.mutiny.ext.web.client.WebClient;\n"
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.ext.web.client.WebClientOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:187
#, no-wrap
msgid ""
"@Path(\"/fruit-data\")\n"
"public class ResourceUsingWebClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:189
#, no-wrap
msgid "    private final WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:194
#, no-wrap
msgid ""
"    @Inject\n"
"    VertxResource(Vertx vertx) {\n"
"        this.client = WebClient.create(vertx);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:211
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Path(\"/{name}\")\n"
"    public Uni<JsonObject> getFruitData(String name) {\n"
"        return client.getAbs(\"https://.../api/fruit/\" + name)\n"
"                .send()\n"
"                .onItem().transform(resp -> {\n"
"                    if (resp.statusCode() == 200) {\n"
"                        return resp.bodyAsJsonObject();\n"
"                    } else {\n"
"                        return new JsonObject()\n"
"                                .put(\"code\", resp.statusCode())\n"
"                                .put(\"message\", resp.bodyAsString());\n"
"                    }\n"
"                });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:219
msgid "This resource creates a `WebClient` and, upon request, uses this client to invoke a remote HTTP API.  Depending on the result, the response is forwarded as received, or it creates a JSON object wrapping the error.  The `WebClient` is asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:223
msgid "The application can also run as a native executable.  But, first, we need to instruct Quarkus to enable _ssl_ (if the remote API uses HTTPS).  Open the `src/main/resources/application.properties` and add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:227
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:230
msgid "Then, create the native executable with:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:234
#, no-wrap
msgid "Use Vert.x JSON"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:238
msgid "Vert.x APIs often rely on JSON.  Vert.x provides two convenient classes to manipulate JSON document: `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:240
msgid "`JsonObject` can be used to map an object into its JSON representation and build an object from a JSON document:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:246
#, no-wrap
msgid ""
"// Map an object into JSON\n"
"Person person = ...;\n"
"JsonObject json = JsonObject.mapFrom(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:250
#, no-wrap
msgid ""
"// Build an object from JSON\n"
"json = new JsonObject();\n"
"person = json.mapTo(Person.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:254
msgid "Note that these features use the mapper managed by the `quarkus-jackson` extension.  Refer to xref:rest-json.adoc#json[Jackson configuration] to customize the mapping."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:258
msgid "JSON Object and JSON Array are both supported as Quarkus HTTP endpoint requests and response bodies (using classic RESTEasy and RESTEasy Reactive).  Consider these endpoints:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:266
#, no-wrap
msgid ""
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.core.json.JsonArray;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:271
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:275
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class VertxJsonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:281
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/object\")\n"
"    public JsonObject jsonObject(String name) {\n"
"        return new JsonObject().put(\"Hello\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:288
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/array\")\n"
"    public JsonArray jsonArray(String name) {\n"
"        return new JsonArray().add(\"Hello\").add(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:291
msgid "http://localhost:8080/hello/Quarkus/object returns:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:295
#, no-wrap
msgid "{\"Hello\":\"Quarkus\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:298
msgid "http://localhost:8080/hello/Quarkus/array returns:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:302
#, no-wrap
msgid "[\"Hello\",\"Quarkus\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:305
msgid "This works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:306
#, no-wrap
msgid "Use Verticles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:311
msgid "link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.  This model does not claim to be a strict actor-model implementation, but it shares similarities, especially concerning concurrency, scaling, and deployment.  To use this model, you write and _deploy_ verticles, communicating by sending messages on the event bus."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:314
msgid "You can deploy _verticles_ in Quarkus.  It supports:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:316
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:317
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:318
#, no-wrap
msgid "Deploy Verticles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:321
msgid "To deploy verticles, use the `deployVerticle` method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:325
#, no-wrap
msgid "@Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:329
#, no-wrap
msgid ""
"// ...\n"
"vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n"
"vertx.deployVerticle(new MyVerticle(), ar -> { });\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:332
msgid "If you use the Mutiny-variant of Vert.x, be aware that the `deployVerticle` method returns a `Uni`, and you would need to trigger a subscription to make the actual deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:334
msgid "An example explaining how to deploy verticles during the initialization of the application will follow."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:335
#, no-wrap
msgid "Use @ApplicationScoped beans as Verticle"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:341
msgid "In general, Vert.x verticles are not CDI beans.  And so cannot use injection.  However, in Quarkus, you can deploy verticles as beans.  Note that in this case, CDI (Arc in Quarkus) is responsible for creating the instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:343
msgid "The following snippet provides an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:347
#: upstream/_versions/main/guides/vertx-reference.adoc:375
#, no-wrap
msgid "package io.quarkus.vertx.verticles;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:351
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:353
#: upstream/_versions/main/guides/vertx-reference.adoc:493
#: upstream/_versions/main/guides/vertx-reference.adoc:830
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:356
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBeanVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:358
#, no-wrap
msgid "    @ConfigProperty(name = \"address\") String address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:366
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(address)\n"
"                .handler(m -> m.replyAndForget(\"hello\"))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:369
msgid "You don't have to inject the `vertx` instance; instead, leverage the protected field from `AbstractVerticle`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:371
msgid "Then, deploy the verticle instances with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:378
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:381
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:384
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class VerticleDeployer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:389
#, no-wrap
msgid ""
"    public void init(@Observes StartupEvent e, Vertx vertx, MyBeanVerticle verticle) {\n"
"         vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:392
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:400
#, no-wrap
msgid ""
"public void init(@Observes StartupEvent e, Vertx vertx, Instance<AbstractVerticle> verticles) {\n"
"    for (AbstractVerticle verticle : verticles) {\n"
"        vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:402
#, no-wrap
msgid "Create multiple verticles instances"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:407
msgid "When using `@ApplicationScoped`, you will get a single instance for your verticle.  Having multiple instances of verticles can be helpful to share the load among them.  Each of them will be associated with a different I/O thread (Vert.x event loop)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:409
msgid "To deploy multiple instances of your verticle, use the `@Dependent` scope instead of `@ApplicationScoped`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:413
#: upstream/_versions/main/guides/vertx-reference.adoc:437
#, no-wrap
msgid "package org.acme.verticle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:416
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:419
#, no-wrap
msgid ""
"import jakarta.enterprise.context.Dependent;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:422
#, no-wrap
msgid ""
"@Dependent\n"
"public class MyVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:430
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(\"address\")\n"
"                .handler(m -> m.reply(\"Hello from \" + this))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:433
msgid "Then, deploy your verticle as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:441
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.core.DeploymentOptions;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:446
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
"import jakarta.enterprise.inject.Instance;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:449
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyApp {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:456
#, no-wrap
msgid ""
"    void init(@Observes StartupEvent ev, Vertx vertx, Instance<MyVerticle> verticles) {\n"
"        vertx\n"
"                .deployVerticle(verticles::get, new DeploymentOptions().setInstances(2))\n"
"                .await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:465
msgid "The `init` method receives an `Instance<MyVerticle>`.  Then, you pass a supplier to the `deployVerticle` method.  The supplier is just calling the `get()` method.  Thanks to the `@Dependent` scope, it returns a new instance on every call.  Finally, you pass the desired number of instances to the `DeploymentOptions`, such as two in the previous example.  It will call the supplier twice, which will create two instances of your verticle."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:467
#, no-wrap
msgid "Use the Event Bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:471
msgid "Vert.x comes with a built-in https://vertx.io/docs/vertx-core/java/#event_bus[event bus] that you can use from your Quarkus application.  So, your application components (CDI beans, resources...) can interact using asynchronous events, thus promoting loose-coupling."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:474
msgid "With the event bus, you send _messages_ to _virtual addresses_.  The event bus offers three types of delivery mechanisms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:476
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:477
msgid "publish/subscribe - publish a message; all the consumers listening to the address are receiving the message;"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:478
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous fashion."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:480
msgid "All these delivery mechanisms are non-blocking and are providing one of the fundamental bricks to build reactive applications."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:481
#, no-wrap
msgid "Consume events"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:485
msgid "While you can use the Vert.x API to register consumers, Quarkus comes with declarative support.  To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:491
#: upstream/_versions/main/guides/vertx-reference.adoc:545
#: upstream/_versions/main/guides/vertx-reference.adoc:828
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:496
#: upstream/_versions/main/guides/vertx-reference.adoc:553
#: upstream/_versions/main/guides/vertx-reference.adoc:833
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:502
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:504
msgid "If not set, the address is the fully qualified name of the bean; for instance, in this snippet, it's `org.acme.vertx.GreetingService`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:505
msgid "The method parameter is the message body. If the method returns _something_, it's the message response."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:506
#, no-wrap
msgid "Configure the address"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:509
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:516
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:518
msgid "Receive the messages sent to the `greeting` address"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:522
msgid "The address value can be a property expression.  In this case, the configured value is used instead: `@ConsumeEvent(\"${my.consumer.address}\")`.  Additionally, the property expression can specify a default value: `@ConsumeEvent(\"${my.consumer.address:defaultAddress}\")`."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:523
#, no-wrap
msgid "Config Property Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:530
#, no-wrap
msgid ""
"@ConsumeEvent(\"${my.consumer.address}\")   // <1>\n"
"public String consume(String name) {\n"
"    return name.toLowerCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:532
msgid "Receive the messages sent to the address configured with the `my.consumer.address` key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:534
msgid "If no config property with the specified key exists and no default value is set then the application startup fails."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:535
#, no-wrap
msgid "Process events asynchronously"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:539
msgid "The previous examples use synchronous processing.  Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:550
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:560
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:567
msgid "The previous example uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:569
#, no-wrap
msgid "Blocking processing of events"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:573
msgid "By default, the code consuming the event must be _non-blocking_, as it's called on an I/O thread.  If your processing is blocking, use the `@io.smallrye.common.annotation.Blocking` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:581
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\")\n"
"@Blocking\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:584
msgid "Alternatively, you can use the `blocking` attribute from the `@ConsumeEvent` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:591
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:594
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:595
#, no-wrap
msgid "Reply to events"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:599
msgid "The _return_ value of a method annotated with `@ConsumeEvent` is used to respond to the incoming message.  For instance, in the following snippet, the returned `String` is the response."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:606
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:609
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:616
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:621
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:624
#, no-wrap
msgid "@Inject Executor executor;\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:627
#, no-wrap
msgid "Implement fire-and-forget interactions"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:632
msgid "You don't have to reply to received messages.  Typically, for a _fire and forget_ interaction, the messages are consumed, and the sender does not need to know about it.  To implement this pattern, your consumer method returns `void`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:639
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:641
#, no-wrap
msgid "Consume messages (instead of events)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:644
msgid "Unlike the previous example using the _payloads_ directly, you can also use `Message` directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:652
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:654
#, no-wrap
msgid "Handle failures"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:657
msgid "If a method annotated with `@ConsumeEvent` throws an exception, then:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:659
msgid "if a reply handler is set, then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:660
msgid "if no reply handler is set, then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, _i.e._ `io.vertx.core.Vertx#exceptionHandler()`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:661
#, no-wrap
msgid "Send messages"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:664
msgid "Sending and publishing messages use the Vert.x event bus:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:672
#: upstream/_versions/main/guides/vertx-reference.adoc:791
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:678
#: upstream/_versions/main/guides/vertx-reference.adoc:797
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:681
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:684
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                            // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:693
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().transform(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:695
msgid "Inject the Event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:696
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:698
msgid "The `EventBus` object provides methods to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:700
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:701
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:702
msgid "`request` a message and expect a reply"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:712
#, no-wrap
msgid ""
"// Case 1\n"
"bus.sendAndForget(\"greeting\", name)\n"
"// Case 2\n"
"bus.publish(\"greeting\", name)\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are you?\")\n"
"        .onItem().transform(Message::body);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:714
#, no-wrap
msgid "Process events on virtual threads"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:719
msgid "Methods annotated with `@ConsumeEvent` can also be annotated with `@RunOnVirtualThread`.  In this case, the method is invoked on a virtual thread.  Each event is invoked on a different virtual thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:721
msgid "To use this feature, make sure:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:723
msgid "Your Java runtime supports virtual threads."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:724
msgid "Your method uses a blocking signature."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:727
msgid "The second point means only methods returning an object or `void` can use `@RunOnVirtualThread`.  Methods returning a `Uni` or a `CompletionStage` **cannot** run on virtual threads."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:729
msgid "Read xref:./virtual-threads.adoc[the virtual thread guide] for more details."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:730
#, no-wrap
msgid "Use codecs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:735
msgid "The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses https://vertx.io/docs/vertx-core/java/#_message_codecs[codecs] to _serialize_ and _deserialize_ message objects.  Quarkus provides a default codec for local delivery.  This codec is automatically used for return types and message body parameters of local consumers, i.e. methods annotated with `@ConsumeEvent` whete `ConsumeEvent#local() == true` (which is the default)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:737
msgid "So that you can exchange the message objects as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:747
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", new MyName(name))\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:752
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\")\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \" + name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:755
msgid "If you want to use a specific codec, you need to set it on both ends explicitly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:766
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", name,\n"
"        new DeliveryOptions().setCodecName(MyNameCodec.class.getName())) // <1>\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:771
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\", codec = MyNameCodec.class)            // <2>\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \"+name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:773
msgid "Set the name of the codec to use to send the message"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:774
msgid "Set the codec to use to receive the message"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:775
#, no-wrap
msgid "Combine HTTP and the Event Bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:781
msgid "Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.  It uses the request/reply dispatching mechanism.  Instead of implementing the business logic inside the Jakarta REST endpoint, we are sending a message.  Another bean consumes this message, and the response is sent using the _reply_ mechanism."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:783
msgid "In your HTTP endpoint class, inject the event bus and uses the `request` method to send a message to the event bus and expect a response:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:800
#, no-wrap
msgid ""
"@Path(\"/bus\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:803
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:812
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().transform(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:814
msgid "send the `name` to the `greeting` address and request a response"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:815
msgid "when we get the response, extract the body and send it to the user"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:819
msgid "the HTTP method returns a `Uni`.  If you are using RESTEasy Reactive, `Uni` support is built-in.  If you are using _classic_ RESTEasy, you need to add the `quarkus resteasy-mutiny` extension to your project."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:822
msgid "We need a consumer listening on the `greeting` address.  This consumer can be in the same class or another bean such as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:838
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:843
msgid "This bean receives the name and returns the greeting message."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:845
msgid "With this in place, every HTTP request on `/bus/quarkus` sends a message to the event bus, waits for a reply, and when this one arrives, writes the HTTP response:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:849
#, no-wrap
msgid "Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:852
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:854
msgid "The request is received by the `greeting` method"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:855
msgid "a message containing the _name_ is sent to the event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:856
msgid "Another bean receives this message and computes the response"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:857
msgid "This response is sent back using the reply mechanism"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:858
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:860
#, no-wrap
msgid "Bidirectional communication with browsers by using SockJS"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:866
msgid "The SockJS bridge provided by Vert.x allows browser applications and Quarkus applications to communicate using the event bus.  It connects both sides.  So, both sides can send messages received on the other side.  It supports the three delivery mechanisms."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:869
msgid "SockJS negotiates the communication channel between the Quarkus application and the browser.  If WebSockets are supported, it uses them; otherwise, it degrades to SSE, long polling, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:871
msgid "So use SockJS, you need to configure the bridge, especially the addresses that will be used to communicate:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:875
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:881
#, no-wrap
msgid ""
"import io.vertx.core.Vertx;\n"
"import io.vertx.ext.bridge.PermittedOptions;\n"
"import io.vertx.ext.web.Router;\n"
"import io.vertx.ext.web.handler.sockjs.SockJSBridgeOptions;\n"
"import io.vertx.ext.web.handler.sockjs.SockJSHandler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:886
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
"import jakarta.inject.Inject;\n"
"import java.util.concurrent.atomic.AtomicInteger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:889
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SockJsExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:892
#, no-wrap
msgid ""
"    @Inject\n"
"    Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:898
#, no-wrap
msgid ""
"    public void init(@Observes Router router) {\n"
"        SockJSHandler sockJSHandler = SockJSHandler.create(vertx);\n"
"        Router bridge = sockJSHandler.bridge(new SockJSBridgeOptions()\n"
"                .addOutboundPermitted(new PermittedOptions().setAddress(\"ticks\")));\n"
"        router.route(\"/eventbus/*\").subRouter(bridge);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:903
#, no-wrap
msgid ""
"        AtomicInteger counter = new AtomicInteger();\n"
"        vertx.setPeriodic(1000,\n"
"                ignored -> vertx.eventBus().publish(\"ticks\", counter.getAndIncrement()));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:909
msgid "This code configures the SockJS bridge to send all the messages targeting the `ticks` address to the connected browsers.  More detailed explanations about the configuration can be found on https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[the Vert.x SockJS Bridge documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:911
msgid "The browser must use the `vertx-eventbus` JavaScript library to consume the message:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:925
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>SockJS example - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\"></script>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/vertx3-eventbus-client@3.8.5/vertx-eventbus.min.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:927
#, no-wrap
msgid "<h1>SockJS Examples</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:929
#, no-wrap
msgid "<p><strong>Last Tick:</strong> <span id=\"tick\"></span></p>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:933
#, no-wrap
msgid ""
"</body>\n"
"<script>\n"
"    var eb = new EventBus('/eventbus');\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:935
#, no-wrap
msgid "    eb.onopen = function () {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:940
#, no-wrap
msgid ""
"        eb.registerHandler('ticks', function (error, message) {\n"
"            $(\"#tick\").html(message.body);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:943
#, no-wrap
msgid ""
"</script>\n"
"</html>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:946
#, no-wrap
msgid "Use native transports"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:949
msgid "Native transports are not supported in native executables."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:951
msgid "To use `io_uring`, refer to the xref:use-io_uring[Use io_uring] section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:956
msgid "Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports], which offers performance improvements on specific platforms.  To enable them, you must include the appropriate dependency for your platform.  It's usually a good idea to have both to keep your application platform-agnostic.  Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:965
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-epoll</artifactId>\n"
"  <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:971
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-kqueue</artifactId>\n"
"  <classifier>osx-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:977
#, no-wrap
msgid "implementation(\"io.netty:netty-transport-native-epoll::linux-x86_64\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:979
#, no-wrap
msgid "implementation(\"io.netty:netty-transport-native-kqueue::osx-x86_64\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:983
msgid "You will also have to explicitly configure Vert.x to use the native transport.  In `application.properties` add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:987
#: upstream/_versions/main/guides/vertx-reference.adoc:1096
#: upstream/_versions/main/guides/vertx-reference.adoc:1167
#, no-wrap
msgid "quarkus.vertx.prefer-native-transport=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:990
msgid "Or in `application.yml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:996
#, no-wrap
msgid ""
"quarkus:\n"
"  vertx:\n"
"    prefer-native-transport: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:999
msgid "If all is well quarkus will log:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1002
#, no-wrap
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:1004
#, no-wrap
msgid "Native Linux transport"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1007
msgid "On Linux you can enable the following socket options:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1009
#: upstream/_versions/main/guides/vertx-reference.adoc:1030
msgid "SO_REUSEPORT"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1011
#: upstream/_versions/main/guides/vertx-reference.adoc:1032
#, no-wrap
msgid "quarkus.http.so-reuse-port=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1013
msgid "TCP_QUICKACK"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1015
#, no-wrap
msgid "quarkus.http.tcp-quick-ack=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1017
msgid "TCP_CORK"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1019
#, no-wrap
msgid "quarkus.http.tcp-cork=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1021
msgid "TCP_FASTOPEN"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1023
#, no-wrap
msgid "quarkus.http.tcp-fast-open=true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:1025
#, no-wrap
msgid "Native macOS transport"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1028
msgid "On macOS Sierra and above you can enable the following socket options:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1034
#, no-wrap
msgid "Use a Vert.x context-aware scheduler"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1038
msgid "Some Mutiny operators need to schedule work on an executor thread pool.  A good example is `.onItem().delayIt().by(Duration.ofMillis(10)` as it needs such an executor to delay emissions."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1040
msgid "The default executor is returned by `io.smallrye.mutiny.infrastructure.Infrastructure` and it is already configured and managed by Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1042
msgid "That being said, there are cases where you need to make sure that an operation is run on a Vert.x (duplicated) context and not just on any random thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1045
msgid "The `io.smallrye.mutiny.vertx.core.ContextAwareScheduler` interface offers an API to obtain context-aware schedulers.  Such a scheduler is configured with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1047
msgid "a delegate `ScheduledExecutorService` of your choice (hint: you can reuse `Infrastructure.getDefaultWorkerPool()`), and"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1048
msgid "a context fetching strategy among:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1049
msgid "an explicit `Context`, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1050
msgid "calling `Vertx::getOrCreateContext()` either on the current thread or later when the scheduling request happens, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1051
msgid "calling `Vertx::currentContext()`, which fails if the current thread is not a Vert.x thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1053
msgid "Here is a sample where `ContextAwareScheduler` is used:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1057
#, no-wrap
msgid "class MyVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1061
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        vertx.getOrCreateContext().put(\"foo\", \"bar\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1065
#, no-wrap
msgid ""
"        var delegate = Infrastructure.getDefaultWorkerPool();\n"
"        var scheduler = ContextAwareScheduler.delegatingTo(delegate)\n"
"            .withCurrentContext();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1075
#, no-wrap
msgid ""
"        return Uni.createFrom().voidItem()\n"
"                .onItem().delayIt().onExecutor(scheduler).by(Duration.ofMillis(10))\n"
"                .onItem().invoke(() -> {\n"
"                    // Prints \"bar\"\n"
"                    var ctx = vertx.getOrCreateContext();\n"
"                    System.out.println(ctx.get(\"foo\"));\n"
"                });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1079
msgid "In this example a scheduler is created by capturing the context of the Vert.x event-loop that calls `asyncStart()`.  The `delayIt` operator uses that scheduler, and we can check that the context that we get in `invoke` is a Vert.x duplicated context where the data for key `\"foo\"` has been propagated."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1080
#, no-wrap
msgid "Use a Unix domain socket"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1086
msgid "Listening on a Unix domain socket allows us to dispense with the overhead of TCP if the connection to the quarkus service is established from the same host.  This can happen if access to the service goes through a proxy which is often the case if you're setting up a service mesh with a proxy like Envoy."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1088
msgid "This will only work on platforms that support xref:native-transport[Use native transports]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1090
msgid "Enable the appropriate xref:native-transport[Use native transports] and set the following environment property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1094
#, no-wrap
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1100
msgid "By itself this will not disable the tcp socket which by default will open on `0.0.0.0:8080`. It can be explicitly disabled:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1103
#, no-wrap
msgid "quarkus.http.host-enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1107
msgid "These properties can be set through Java's `-D` command line parameter or on `application.properties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1110
msgid "Do not forget to add the native transport dependency.  See xref:native-transport[Use native transports] for details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1112
msgid "Make sure your application has the right permissions to write to the socket."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1114
#, no-wrap
msgid "Use io_uring"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1117
msgid "`io_uring` is not supported in native executables."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1119
msgid "`io_uring` support is experimental"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1124
msgid "`io_uring` is a Linux kernel interface that allows you to send and receive data asynchronously.  It provides unified semantics for both file and network I/O.  It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets.  It has the potential to provide modest performance benefits to network I/O on its own and greater benefits for mixed file and network I/O application workloads."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1126
msgid "To learn more about `io_uring`, we recommend the following links:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1130
msgid "https://developers.redhat.com/articles/2023/04/12/why-you-should-use-iouring-network-io[Why you should use io_uring for network I/O]: The main benefit of io_uring for network I/O is a modern asynchronous API that is straightforward to use and provides unified semantics for file and network I/O.  A potential performance benefit of io_uring for network I/O is reducing the number of syscalls.  This could provide the biggest benefit for high volumes of small operations where the overhead of system calls can be significant."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1132
msgid "https://dzone.com/articles/the-backend-revolution-or-why-io-uring-is-so-impor[The Backend Revolution and Why io_uring Is So Important]: The io_uring API uses two ring buffers for communication between application and kernel (hence the API name) and designed in a way that enables natural batching of requests and responses.  Besides, it provides a way to submit multiple requests in one system call, which can reduce overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1134
msgid "https://stackoverflow.com/questions/61767702/what-exactly-is-io-uring[What exactly is io_uring?]: io_uring is a Linux kernel interface to efficiently allow you to send and receive data asynchronously.  It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1138
msgid "To use `io_uring`, you need to add two dependencies to your project and enable native transport.  First add the following dependencies to your project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1152
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.netty.incubator</groupId>\n"
"    <artifactId>netty-incubator-transport-native-io_uring</artifactId>\n"
"    <version>0.0.21.Final</version> <!-- Update this version (https://github.com/netty/netty-incubator-transport-io_uring/tags) -->\n"
"    <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
"<dependency>\n"
"      <groupId>io.vertx</groupId>\n"
"      <artifactId>vertx-io_uring-incubator</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1160
#, no-wrap
msgid ""
"// Update the io_uring version by picking the latest from https://github.com/netty/netty-incubator-transport-io_uring/tags\n"
"implementation(\"io.netty.incubator:netty-incubator-transport-native-io_uring:0.0.21.Final\")\n"
"implementation(\"io.vertx:vertx-io_uring-incubator\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1163
msgid "Then, in the `application.properties`, add:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:1170
#, no-wrap
msgid "Can I use io_uring on my Linux machine?"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:1173
msgid "To check if you can use `io_uring` on your Linux machine, execute the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1190
#, no-wrap
msgid ""
"> grep io_uring_setup /proc/kallsyms\n"
"0000000000000000 t __pfx_io_uring_setup\n"
"0000000000000000 t io_uring_setup\n"
"0000000000000000 T __pfx___x64_sys_io_uring_setup\n"
"0000000000000000 T __x64_sys_io_uring_setup\n"
"0000000000000000 T __pfx___ia32_sys_io_uring_setup\n"
"0000000000000000 T __ia32_sys_io_uring_setup\n"
"0000000000000000 d event_exit__io_uring_setup\n"
"0000000000000000 d event_enter__io_uring_setup\n"
"0000000000000000 d __syscall_meta__io_uring_setup\n"
"0000000000000000 d args__io_uring_setup\n"
"0000000000000000 d types__io_uring_setup\n"
"0000000000000000 d __event_exit__io_uring_setup\n"
"0000000000000000 d __event_enter__io_uring_setup\n"
"0000000000000000 d __p_syscall_meta__io_uring_setup\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1192
msgid "If it prints something like above, you can use `io_uring`."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:1195
#, no-wrap
msgid "Troubleshooting"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1200
msgid "`io_uring` support is still experimental.  Check the https://github.com/netty/netty-incubator-transport-io_uring#faq[Netty io_uring FAQ] if you see some odd behavior.  Also, the https://github.com/netty/netty-incubator-transport-io_uring/issues/152[netty io_uring was slower than epoll] issue describes a few configuration mistakes."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:1203
msgid "Domain sockets are not yet supported with io_uring."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:1205
msgid "The Vert.x asynchronous file system API does not use io_uring yet."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1207
#, no-wrap
msgid "Deploy on read-only environments"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:1210
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1214
#, no-wrap
msgid "java.lang.IllegalStateException: Failed to create cache dir\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1217
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1219
#, no-wrap
msgid "Customize the Vert.x configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1224
msgid "The configuration of the managed Vert.x instance can be provided using the `application.properties` file, but also using _special beans_.  CDI beans exposing the `io.quarkus.vertx.VertxOptionsCustomizer` interface can be used to customize the Vert.x configuration.  For example, the following customizer change the `tmp` base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1229
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyCustomizer implements VertxOptionsCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1235
#, no-wrap
msgid ""
"    @Override\n"
"    public void accept(VertxOptions options) {\n"
"        options.setFileSystemOptions(new FileSystemOptions().setFileCacheDir(\"target\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1238
msgid "The _customizer_ beans received the `VertxOptions` (coming from the application configuration), and can modify them."
msgstr ""
