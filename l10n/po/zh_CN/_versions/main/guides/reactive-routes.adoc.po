# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-08 03:43+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/reactive-routes.adoc:6
#, no-wrap
msgid "Using Reactive Routes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:14
msgid "Reactive routes propose an alternative approach to implement HTTP endpoints where you declare and chain _routes_.  This approach became very popular in the JavaScript world, with frameworks like Express.Js or Hapi.  Quarkus also offers the possibility to use reactive routes.  You can implement REST API with routes only or combine them with JAX-RS resources and servlets."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:16
msgid "The code presented in this guide is available in this {quickstarts-base-url}[GitHub repository] under the {quickstarts-tree-url}/reactive-routes-quickstart[`reactive-routes-quickstart` directory]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:20
msgid "Reactive Routes were initially introduced to provide a reactive execution model for HTTP APIs on top of the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture].  With the introduction of xref:resteasy-reactive.adoc[RESTEasy Reactive], you can now implement reactive HTTP APIs and still use JAX-RS annotations.  Reactive Routes are still supported, especially if you want a more _route-based_ approach, and something closer to the underlying reactive engine."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:21
#, no-wrap
msgid "Quarkus HTTP"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:28
msgid "Before going further, let's have a look at the HTTP layer of Quarkus.  Quarkus HTTP support is based on a non-blocking and reactive engine (Eclipse Vert.x and Netty).  All the HTTP requests your application receive are handled by _event loops_ (I/O Thread) and then are routed towards the code that manages the request.  Depending on the destination, it can invoke the code managing the request on a worker thread (Servlet, Jax-RS) or use the IO Thread (reactive route).  Note that because of this, a reactive route must be non-blocking or explicitly declare its blocking nature (which would result by being called on a worker thread)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:30
msgid "image:http-architecture.png[alt=Quarkus HTTP Architecture]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:32
msgid "See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:34
#, no-wrap
msgid "Declaring reactive routes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:38
msgid "The first way to use reactive routes is to use the `@Route` annotation.  To have access to this annotation, you need to add the `quarkus-reactive-routes` extension by running this command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:43
#: upstream/_versions/main/guides/reactive-routes.adoc:725
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:45
#: upstream/_versions/main/guides/reactive-routes.adoc:727
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:51
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-routes</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:54
#: upstream/_versions/main/guides/reactive-routes.adoc:736
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:57
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-reactive-routes\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:60
msgid "Then in a _bean_, you can use the `@Route` annotation as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:64
#: upstream/_versions/main/guides/reactive-routes.adoc:679
#, no-wrap
msgid "package org.acme.reactive.routes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:69
#, no-wrap
msgid ""
"import io.quarkus.vertx.web.Route;\n"
"import io.quarkus.vertx.web.Route.HttpMethod;\n"
"import io.quarkus.vertx.web.RoutingExchange;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:71
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:74
#, no-wrap
msgid ""
"@ApplicationScoped // <1>\n"
"public class MyDeclarativeRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:80
#, no-wrap
msgid ""
"    // neither path nor regex is set - match a path derived from the method name\n"
"    @Route(methods = Route.HttpMethod.GET) // <2>\n"
"    void hello(RoutingContext rc) { // <3>\n"
"        rc.response().end(\"hello\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:85
#, no-wrap
msgid ""
"    @Route(path = \"/world\") \n"
"    String helloWorld() { // <4>\n"
"        return \"Hello world!\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:90
#, no-wrap
msgid ""
"    @Route(path = \"/greetings\", methods = Route.HttpMethod.GET)\n"
"    void greetingsQueryParam(RoutingExchange ex) { // <5>\n"
"        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\")); // <6>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:96
#, no-wrap
msgid ""
"    @Route(path = \"/greetings/:name\", methods = Route.HttpMethod.GET) // <7>\n"
"    void greetingsPathParam(@Param String name, RoutingExchange ex) {\n"
"        ex.ok(\"hello \" + name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:98
msgid "If there is a reactive route found on a class with no scope annotation then `@javax.inject.Singleton` is added automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:99
msgid "The `@Route` annotation indicates that the method is a reactive route. Again, by default, the code contained in the method must not block."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:100
msgid "The method gets a https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] as a parameter. From the `RoutingContext` you can retrieve the HTTP request (using `request()`) and write the response using `response().end(...)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:101
msgid "If the annotated method does not return `void` the arguments are optional."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:102
msgid "`RoutingExchange` is a convenient wrapper of `RoutingContext` which provides some useful methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:103
msgid "The `RoutingExchange` is used to retrieve the request query parameter `name`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:104
msgid "The path defines a parameter `name` which can be injected inside the method parameters using the annotation `@Param`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:106
msgid "More details about using the `RoutingContext` is available in the https://vertx.io/docs/vertx-web/java/[Vert.x Web documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:108
msgid "The `@Route` annotation allows you to configure:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:110
msgid "The `path` - for routing by path, using the https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web format]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:111
msgid "The `regex` - for routing with regular expressions, see https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[for more details]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:112
msgid "The `methods` - the HTTP verbs triggering the route such as `GET`, `POST`..."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:113
msgid "The `type` - it can be _normal_ (non-blocking), _blocking_ (method dispatched on a worker thread), or _failure_ to indicate that this route is called on failures"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:115
msgid "The `order` - the order of the route when several routes are involved in handling the incoming request.  Must be positive for regular user routes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:116
msgid "The produced and consumed mime types using `produces`, and `consumes`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:118
msgid "For instance, you can declare a blocking route as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:125
#, no-wrap
msgid ""
"@Route(methods = HttpMethod.POST, path = \"/post\", type = Route.HandlerType.BLOCKING)\n"
"public void blocking(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:130
msgid "Alternatively, you can use `@io.smallrye.common.annotation.Blocking` and omit the `type = Route.HandlerType.BLOCKING`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:137
#, no-wrap
msgid ""
"@Route(methods = HttpMethod.POST, path = \"/post\")\n"
"@Blocking\n"
"public void blocking(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:139
msgid "When `@Blocking` is used, it ignores the `type` attribute of `@Route`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:142
msgid "The `@Route` annotation is repeatable and so you can declare several routes for a single method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:150
#, no-wrap
msgid ""
"@Route(path = \"/first\") <1>\n"
"@Route(path = \"/second\")\n"
"public void route(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:152
msgid "Each route can use different paths, methods..."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:154
msgid "If no content-type header is set, then we will try to use the most acceptable content type by matching the accept header with the value of the `Route` produces attribute as defined by `io.vertx.ext.web.RoutingContext.getAcceptableContentType()`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:161
#, no-wrap
msgid ""
"@Route(path = \"/person\", produces = \"text/html\") <1>\n"
"String person() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:163
msgid "If the `accept` header matches `text/html`, we set the content type automatically to `text/html`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:164
#, no-wrap
msgid "Handling conflicting routes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:168
msgid "You may end up with multiple routes matching a given path.  In the following example, both route matches `/accounts/me`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:175
#, no-wrap
msgid ""
"@Route(path = \"/accounts/:id\", methods = HttpMethod.GET)\n"
"void getAccount(RoutingContext rc) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:180
#, no-wrap
msgid ""
"@Route(path = \"/accounts/me\", methods = HttpMethod.GET)\n"
"void getCurrentUserAccount(RoutingContext rc) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:184
msgid "As a consequence, the result is not the expected one as the first route is called with the path parameter `id` set to `me`.  To avoid the conflict, use the `order` attribute:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:191
#, no-wrap
msgid ""
"@Route(path = \"/accounts/:id\", methods = HttpMethod.GET, order = 2)\n"
"void getAccount(RoutingContext rc) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:196
#, no-wrap
msgid ""
"@Route(path = \"/accounts/me\", methods = HttpMethod.GET, order = 1)\n"
"void getCurrentUserAccount(RoutingContext rc) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:200
msgid "By giving a lower order to the second route, it gets evaluated first.  If the request path matches, it is invoked, otherwise the other routes are evaluated."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:201
#, no-wrap
msgid "`@RouteBase`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:204
msgid "This annotation can be used to configure some defaults for reactive routes declared on a class."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:209
#, no-wrap
msgid ""
"@RouteBase(path = \"simple\", produces = \"text/plain\") <1> <2>\n"
"public class SimpleRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:215
#, no-wrap
msgid ""
"    @Route(path = \"ping\") // the final path is /simple/ping\n"
"    void ping(RoutingContext rc) {\n"
"        rc.response().end(\"pong\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:217
msgid "The `path` value is used as a prefix for any route method declared on the class where `Route#path()` is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:218
msgid "The value of `produces()` is used for content-based routing for all routes where `Route#produces()` is empty."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:220
#, no-wrap
msgid "Reactive Route Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:225
msgid "A route method must be a non-private non-static method of a CDI bean.  If the annotated method returns `void` then it has to accept at least one argument - see the supported types below.  If the annotated method does not return `void` then the arguments are optional."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:228
msgid "Methods that return `void` must __end__ the response or the HTTP request to this route will never end.  Some methods of `RoutingExchange` do it for you, others not and you must call the `end()` method of the response by yourself, please refer to its JavaDoc for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:230
msgid "A route method can accept arguments of the following types:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:232
msgid "`io.vertx.ext.web.RoutingContext`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:233
msgid "`io.quarkus.vertx.web.RoutingExchange`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:234
msgid "`io.vertx.core.http.HttpServerRequest`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:235
msgid "`io.vertx.core.http.HttpServerResponse`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:236
msgid "`io.vertx.mutiny.core.http.HttpServerRequest`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:237
msgid "`io.vertx.mutiny.core.http.HttpServerResponse`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:239
msgid "Furthermore, it is possible to inject the `HttpServerRequest` parameters into method parameters annotated with `@io.quarkus.vertx.web.Param` using the following types:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:242
#: upstream/_versions/main/guides/reactive-routes.adoc:262
#: upstream/_versions/main/guides/reactive-routes.adoc:282
#, no-wrap
msgid "Parameter Type"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:244
#: upstream/_versions/main/guides/reactive-routes.adoc:264
#: upstream/_versions/main/guides/reactive-routes.adoc:284
#, no-wrap
msgid ""
"Obtained via  \n"
"//-------------"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:244
#: upstream/_versions/main/guides/reactive-routes.adoc:264
#: upstream/_versions/main/guides/reactive-routes.adoc:284
#, no-wrap
msgid "`java.lang.String`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:245
#: upstream/_versions/main/guides/reactive-routes.adoc:246
#, no-wrap
msgid "`routingContext.request().getParam()`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:245
#: upstream/_versions/main/guides/reactive-routes.adoc:265
#, no-wrap
msgid "`java.util.Optional<String>`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:246
#: upstream/_versions/main/guides/reactive-routes.adoc:266
#, no-wrap
msgid "`java.util.List<String>`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:247
#, no-wrap
msgid "`routingContext.request().params().getAll()`"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:249
#, no-wrap
msgid "Request Parameter Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:256
#, no-wrap
msgid ""
"@Route\n"
"String hello(@Param Optional<String> name) {\n"
"   return \"Hello \" + name.orElse(\"world\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:259
msgid "The `HttpServerRequest` headers can be injected into method parameters annotated with `@io.quarkus.vertx.web.Header` using the following types:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:265
#: upstream/_versions/main/guides/reactive-routes.adoc:266
#, no-wrap
msgid "`routingContext.request().getHeader()`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:267
#, no-wrap
msgid "`routingContext.request().headers().getAll()`"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:269
#, no-wrap
msgid "Request Header Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:276
#, no-wrap
msgid ""
"@Route\n"
"String helloFromHeader(@Header(\"My-Header\") String header) {\n"
"   return header;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:279
msgid "The request body can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Body` using the following types:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:285
#, no-wrap
msgid "`routingContext.getBodyAsString()`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:285
#, no-wrap
msgid "`io.vertx.core.buffer.Buffer`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:286
#, no-wrap
msgid "`routingContext.getBody()`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:286
#, no-wrap
msgid "`io.vertx.core.json.JsonObject`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:287
#, no-wrap
msgid "`routingContext.getBodyAsJson()`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:287
#, no-wrap
msgid "`io.vertx.core.json.JsonArray`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:288
#, no-wrap
msgid "`routingContext.getBodyAsJsonArray()`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:288
#, no-wrap
msgid "any other type"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:289
#, no-wrap
msgid "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:291
#, no-wrap
msgid "Request Body Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:299
#, no-wrap
msgid ""
"@Route(produces = \"application/json\")\n"
"Person createPerson(@Body Person person, @Param(\"id\") Optional<String> primaryKey) {\n"
"  person.setId(primaryKey.map(Integer::valueOf).orElse(42));\n"
"  return person;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:303
msgid "A failure handler can declare a single method parameter whose type extends `Throwable`.  The type of the parameter is used to match the result of `RoutingContext#failure()`."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:304
#, no-wrap
msgid "Failure Handler Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:311
#, no-wrap
msgid ""
"@Route(type = HandlerType.FAILURE)\n"
"void unsupported(UnsupportedOperationException e, HttpServerResponse response) {\n"
"  response.setStatusCode(501).end(e.getMessage());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:313
#, no-wrap
msgid "Returning Unis"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:316
msgid "In a reactive route, you can return a `Uni` directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:323
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"Uni<String> hello() {\n"
"    return Uni.createFrom().item(\"Hello world!\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:328
#, no-wrap
msgid ""
"@Route(path = \"/person\")\n"
"Uni<Person> getPerson() {\n"
"    return Uni.createFrom().item(() -> new Person(\"neo\", 12345));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:331
msgid "Returning `Unis` is convenient when using a reactive client:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:338
#, no-wrap
msgid ""
"@Route(path = \"/mail\")\n"
"Uni<Void> sendEmail() {\n"
"    return mailer.send(...);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:341
msgid "The item produced by the returned `Uni` can be:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:343
#: upstream/_versions/main/guides/reactive-routes.adoc:369
msgid "A string - written into the HTTP response directly."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:344
#: upstream/_versions/main/guides/reactive-routes.adoc:370
msgid "A `io.vertx.core.buffer.Buffer` - written into the HTTP response directly."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:346
#: upstream/_versions/main/guides/reactive-routes.adoc:372
msgid "An object - written into the HTTP response after having been encoded into JSON.  The `content-type` header is set to `application/json` if not already set."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:348
msgid "If the returned `Uni` produces a failure (or is `null`), an HTTP 500 response is written."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:350
msgid "Returning a `Uni<Void>` produces a 204 response (no content)."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:351
#, no-wrap
msgid "Returning results"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:354
msgid "You can also return a result directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:361
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"String helloSync() {\n"
"    return \"Hello world\";\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:365
msgid "Be aware, the processing must be **non-blocking** as reactive routes are invoked on the IO Thread.  Otherwise, set the `type` attribute of the `@Route` annotation to `Route.HandlerType.BLOCKING`, or use the `@io.smallrye.common.annotation.Blocking` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:367
#: upstream/_versions/main/guides/reactive-routes.adoc:389
msgid "The method can return:"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:373
#, no-wrap
msgid "Returning Multis"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:378
msgid "A reactive route can return a `Multi`.  The items are written one by one, in the response.  The response `Transfer-Encoding` header is set to `chunked`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:385
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"Multi<String> hellos() {\n"
"    return Multi.createFrom().items(\"hello\", \"world\", \"!\");  // <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:387
msgid "Produces `helloworld!`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:391
msgid "A `Multi<String>` - the items are written one by one (one per _chunk_) in the response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:392
msgid "A `Multi<Buffer>` - the buffers are written one by one (one per _chunk_) without any processing."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:393
msgid "A `Multi<Object>` - the items are encoded to JSON written one by one in the response."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:404
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people() {\n"
"    return Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:407
#: upstream/_versions/main/guides/reactive-routes.adoc:433
msgid "The previous snippet produces:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:413
#, no-wrap
msgid ""
"{\"name\":\"superman\", \"id\": 1} // chunk 1\n"
"{\"name\":\"batman\", \"id\": 2} // chunk 2\n"
"{\"name\":\"spiderman\", \"id\": 3} // chunk 3\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:415
#, no-wrap
msgid "Streaming JSON Array items"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:420
msgid "You can return a `Multi` to produce a JSON Array, where every item is an item from this array.  The response is written item by item to the client.  To do that set the `produces` attribute to `\"application/json\"` (or `ReactiveRoutes.APPLICATION_JSON`)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:430
#, no-wrap
msgid ""
"@Route(path = \"/people\", produces = ReactiveRoutes.APPLICATION_JSON)\n"
"Multi<Person> people() {\n"
"    return Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:441
#, no-wrap
msgid ""
"[\n"
"  {\"name\":\"superman\", \"id\": 1} // chunk 1\n"
"  ,{\"name\":\"batman\", \"id\": 2} // chunk 2\n"
"  ,{\"name\":\"spiderman\", \"id\": 3} // chunk 3\n"
"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:446
msgid "The `produces` attribute is an array.  When you pass a single value you can omit the \"{\" and \"}\".  Note that `\"application/json\"` must be the first value in the array."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:451
msgid "Only `Multi<String>`, `Multi<Object>` and `Multi<Void>` can be written into the JSON Array.  Using a `Multi<Void>` produces an empty array.  You cannot use `Multi<Buffer>`.  If you need to use `Buffer`, transform the content into a JSON or String representation first."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:453
#, no-wrap
msgid "Deprecation of `asJsonArray`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:456
msgid "The `ReactiveRoutes.asJsonArray` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:458
#, no-wrap
msgid "Event Stream and Server-Sent Event support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:462
msgid "You can return a `Multi` to produce an event source (stream of server sent events).  To enable this feature, set the `produces` attribute to `\"text/event-stream\"` (or `ReactiveRoutes.EVENT_STREAM`), such as in:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:472
#, no-wrap
msgid ""
"@Route(path = \"/people\", produces = ReactiveRoutes.EVENT_STREAM)\n"
"Multi<Person> people() {\n"
"    return Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:475
#: upstream/_versions/main/guides/reactive-routes.adoc:565
msgid "This method would produce:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:480
#, no-wrap
msgid ""
"data: {\"name\":\"superman\", \"id\": 1}\n"
"id: 0\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:483
#, no-wrap
msgid ""
"data: {\"name\":\"batman\", \"id\": 2}\n"
"id: 1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:486
#, no-wrap
msgid ""
"data: {\"name\":\"spiderman\", \"id\": 3}\n"
"id: 2\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:492
msgid "The `produces` attribute is an array.  When you pass a single value you can omit the \"{\" and \"}\".  Note that `\"text/event-stream\"` must be the first value in the array."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:494
msgid "You can also implement the `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` interface to customize the `event` and `id` section of the server sent event:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:500
#, no-wrap
msgid ""
"class PersonEvent implements ReactiveRoutes.ServerSentEvent<Person> {\n"
"    public String name;\n"
"    public int id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:505
#, no-wrap
msgid ""
"    public PersonEvent(String name, int id) {\n"
"        this.name = name;\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:510
#, no-wrap
msgid ""
"    @Override\n"
"    public Person data() {\n"
"        return new Person(name, id); // Will be JSON encoded\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:515
#, no-wrap
msgid ""
"    @Override\n"
"    public long id() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:521
#, no-wrap
msgid ""
"    @Override\n"
"    public String event() {\n"
"        return \"person\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:524
msgid "Using a `Multi<PersonEvent>` would produce:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:530
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"superman\", \"id\": 1}\n"
"id: 1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:534
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"batman\", \"id\": 2}\n"
"id: 2\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:538
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"spiderman\", \"id\": 3}\n"
"id: 3\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:542
#, no-wrap
msgid "Deprecation of `asEventStream`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:545
msgid "The `ReactiveRoutes.asEventStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:547
#, no-wrap
msgid "Json Stream in NDJSON format"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:551
msgid "You can return a `Multi` to produce a newline delimited stream of JSON values.  To enable this feature, set the `produces` attribute of the `@Route` annotation to `\"application/x-ndjson\"` (or `ReactiveRoutes.ND_JSON`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:562
#, no-wrap
msgid ""
"@Route(path = \"/people\", produces = ReactiveRoutes.ND_JSON)\n"
"Multi<Person> people() {\n"
"    return ReactiveRoutes.asJsonStream(Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3)\n"
"            ));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:571
#, no-wrap
msgid ""
"{\"name\":\"superman\", \"id\": 1}\n"
"{\"name\":\"batman\", \"id\": 2}\n"
"{\"name\":\"spiderman\", \"id\": 3}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:576
msgid "The `produces` attribute is an array. When you pass a single value you can omit the \"{\" and \"}\".  Note that `\"application/x-ndjson\"` must be the first value in the array."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:578
msgid "You can also provide strings instead of objects, in that case the strings will be wrapped in quotes to become valid JSON values:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:589
#, no-wrap
msgid ""
"@Route(path = \"/people\", produces = ReactiveRoutes.ND_JSON)\n"
"Multi<Person> people() {\n"
"    return ReactiveRoutes.asJsonStream(Multi.createFrom().items(\n"
"            \"superman\",\n"
"            \"batman\",\n"
"            \"spiderman\"\n"
"            ));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:596
#, no-wrap
msgid ""
"\"superman\"\n"
"\"batman\"\n"
"\"spiderman\"\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:600
#, no-wrap
msgid "Deprecation of `asJsonStream`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:603
msgid "The `ReactiveRoutes.asJsonStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:605
#, no-wrap
msgid "Using Bean Validation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:610
msgid "You can combine reactive routes and Bean Validation.  First, don't forget to add the `quarkus-hibernate-validator` extension to your project.  Then, you can add constraints to your route parameter (annotated with `@Param` or `@Body`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:617
#, no-wrap
msgid ""
"@Route(produces = \"application/json\")\n"
"Person createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:621
msgid "If the parameters do not pass the tests, it returns an HTTP 400 response.  If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:623
msgid "When returning an object or a `Uni`, you can also use the `@Valid` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:630
#, no-wrap
msgid ""
"@Route(...)\n"
"@Valid Uni<Person> createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:634
msgid "If the item produced by the route does not pass the validation, it returns an HTTP 500 response.  If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:638
msgid "Note that only `@Valid` is supported on the return type.  The returned class can use any constraint.  In the case of `Uni`, it checks the item produced asynchronously."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:639
#, no-wrap
msgid "Using the Vert.x Web Router"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:643
msgid "You can also register your route directly on the _HTTP routing layer_ by registering routes directly on the `Router` object.  To retrieve the `Router` instance at startup:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:649
#, no-wrap
msgid ""
"public void init(@Observes Router router) {\n"
"    router.get(\"/my-route\").handler(rc -> rc.response().end(\"Hello from my route\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:652
msgid "Check the https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web documentation] to know more about the route registration, options, and available handlers."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:658
msgid "`Router` access is provided by the `quarkus-vertx-http` extension.  If you use `quarkus-resteasy-reactive` or `quarkus-reactive-routes`, the extension will be added automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:661
msgid "You can also receive the Mutiny variant of the Router (`io.vertx.mutiny.ext.web.Router`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:667
#, no-wrap
msgid ""
"public void init(@Observes io.vertx.mutiny.ext.web.Router router) {\n"
"    router.get(\"/my-route\").handler(rc -> rc.response().endAndForget(\"Hello from my route\"));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:669
#, no-wrap
msgid "Intercepting HTTP requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:673
msgid "You can also register filters that would intercept incoming HTTP requests.  Note that these filters are also applied for servlets, JAX-RS resources, and reactive routes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:675
msgid "For example, the following code snippet registers a filter adding an HTTP header:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:681
#, no-wrap
msgid "import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:683
#, no-wrap
msgid "public class MyFilters {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:690
#, no-wrap
msgid ""
"    @RouteFilter(100) <1>\n"
"    void myFilter(RoutingContext rc) {\n"
"       rc.response().putHeader(\"X-Header\", \"intercepting the request\");\n"
"       rc.next(); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:693
msgid "The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:694
msgid "The filter is likely required to call the `next()` method to continue the chain."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:695
#, no-wrap
msgid "HTTP Compression"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:699
msgid "The body of an HTTP response is not compressed by default.  You can enable the HTTP compression support by means of `quarkus.http.enable-compression=true`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:701
msgid "If compression support is enabled then the response body is compressed if:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:703
msgid "the route method is annotated with `@io.quarkus.vertx.http.Compressed`, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:704
msgid "the `Content-Type` header is set and the value is a compressed media type as configured via `quarkus.http.compress-media-types`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:706
msgid "The response body is never compressed if:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:708
msgid "the route method is annotated with `@io.quarkus.vertx.http.Uncompressed`, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:709
msgid "the `Content-Type` header is not set."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:711
msgid "By default, the following list of media types is compressed: `text/html`, `text/plain`, `text/xml`, `text/css`, `text/javascript` and `application/javascript`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:713
msgid "If the client does not support HTTP compression then the response body is not compressed."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:715
#, no-wrap
msgid "Adding OpenAPI and Swagger UI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:718
msgid "You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger UI] by using the `quarkus-smallrye-openapi` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:720
msgid "Add the extension by running this command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:733
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-openapi</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:739
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-openapi\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:742
msgid "This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:746
#, no-wrap
msgid "curl http://localhost:8080/q/openapi\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:749
msgid "You will see the generated OpenAPI schema document:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:752
#: upstream/_versions/main/guides/reactive-routes.adoc:833
#, no-wrap
msgid "---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:777
#, no-wrap
msgid ""
"openapi: 3.0.3\n"
"info:\n"
"  title: Generated API\n"
"  version: \"1.0\"\n"
"paths:\n"
"  /greetings:\n"
"    get:\n"
"      responses:\n"
"        \"204\":\n"
"          description: No Content\n"
"  /hello:\n"
"    get:\n"
"      responses:\n"
"        \"204\":\n"
"          description: No Content\n"
"  /world:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                type: string\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:780
msgid "Also see xref:openapi-swaggerui.adoc[the OpenAPI Guide]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:781
#, no-wrap
msgid "Adding MicroProfile OpenAPI Annotations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:785
msgid "You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema, for instance, adding header info, or specifying the return type on `void` methods might be useful:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:802
#, no-wrap
msgid ""
"@OpenAPIDefinition( // <1>\n"
"    info = @Info(\n"
"        title=\"Greeting API\",\n"
"        version = \"1.0.1\",\n"
"        contact = @Contact(\n"
"            name = \"Greeting API Support\",\n"
"            url = \"http://exampleurl.com/contact\",\n"
"            email = \"techsupport@example.com\"),\n"
"        license = @License(\n"
"            name = \"Apache 2.0\",\n"
"            url = \"https://www.apache.org/licenses/LICENSE-2.0.html\"))\n"
")\n"
"@ApplicationScoped\n"
"public class MyDeclarativeRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:811
#, no-wrap
msgid ""
"    // neither path nor regex is set - match a path derived from the method name\n"
"    @Route(methods = Route.HttpMethod.GET)\n"
"    @APIResponse(responseCode=\"200\", \n"
"            description=\"Say hello\", \n"
"            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING))) // <2>\n"
"    void hello(RoutingContext rc) {\n"
"        rc.response().end(\"hello\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:816
#, no-wrap
msgid ""
"    @Route(path = \"/world\") \n"
"    String helloWorld() {\n"
"        return \"Hello world!\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:825
#, no-wrap
msgid ""
"    @Route(path = \"/greetings\", methods = HttpMethod.GET)\n"
"    @APIResponse(responseCode=\"200\", \n"
"            description=\"Greeting\", \n"
"            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))\n"
"    void greetings(RoutingExchange ex) {\n"
"        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:827
msgid "Header information about your API."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:828
msgid "Defining the response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:830
msgid "This will generate this OpenAPI schema:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-routes.adoc:873
#, no-wrap
msgid ""
"openapi: 3.0.3\n"
"info:\n"
"  title: Greeting API\n"
"  contact:\n"
"    name: Greeting API Support\n"
"    url: http://exampleurl.com/contact\n"
"    email: techsupport@example.com\n"
"  license:\n"
"    name: Apache 2.0\n"
"    url: https://www.apache.org/licenses/LICENSE-2.0.html\n"
"  version: 1.0.1\n"
"paths:\n"
"  /greetings:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: Greeting\n"
"          content:\n"
"            application/json:\n"
"              schema:\n"
"                type: string\n"
"  /hello:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: Say hello\n"
"          content:\n"
"            application/json:\n"
"              schema:\n"
"                type: string\n"
"  /world:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                type: string\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:875
#, no-wrap
msgid "Using Swagger UI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:879
msgid "Swagger UI is included by default when running in `dev` or `test` mode, and can optionally be added to `prod` mode.  See <<openapi-swaggerui.adoc#dev-mode,the Swagger UI>> Guide for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:881
msgid "Navigate to link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] and you will see the Swagger UI screen:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:883
msgid "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:884
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:887
msgid "This guide has introduced how you can use reactive routes to define an HTTP endpoint.  It also describes the structure of the Quarkus HTTP layer and how to write filters."
msgstr ""
