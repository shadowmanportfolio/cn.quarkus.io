# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-12 02:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/cache.adoc:6
#, no-wrap
msgid "Application Data Caching"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:15
msgid "In this guide, you will learn how to enable application data caching in any CDI managed bean of your Quarkus application."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:22
#, no-wrap
msgid "Scenario"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:27
msgid "Let's imagine you want to expose in your Quarkus application a REST API that allows users to retrieve the weather forecast for the next three days.  The problem is that you have to rely on an external meteorological service which only accepts requests for one day at a time and takes forever to answer.  Since the weather forecast is updated once every twelve hours, caching the service responses would definitely improve your API performances."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:29
msgid "We'll do that using a single Quarkus annotation."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:35
msgid "In this guide, we use the default Quarkus Cache backend (Caffeine).  You can use Redis instead.  Refer to the xref:cache-redis-reference.adoc[Redis cache backend reference] to configure the Redis backend."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:37
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:41
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:43
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:45
msgid "The solution is located in the `cache-quickstart` link:{quickstarts-tree-url}/cache-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:46
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:49
msgid "First, we need to create a new Quarkus project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:55
msgid "This command generates the project and imports the `cache` and `resteasy-reactive-jackson` extensions."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:58
msgid "If you already have your Quarkus project configured, you can add the `cache` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:63
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/cache.adoc:65
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:71
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-cache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/cache.adoc:74
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:77
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-cache\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:79
#, no-wrap
msgid "Creating the REST API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:83
msgid "Let's start by creating a service that will simulate an extremely slow call to the external meteorological service.  Create `src/main/java/org/acme/cache/WeatherForecastService.java` with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:87
#: upstream/_versions/main/guides/cache.adoc:128
#: upstream/_versions/main/guides/cache.adoc:158
#: upstream/_versions/main/guides/cache.adoc:220
#: upstream/_versions/main/guides/cache.adoc:355
#: upstream/_versions/main/guides/cache.adoc:405
#: upstream/_versions/main/guides/cache.adoc:435
#: upstream/_versions/main/guides/cache.adoc:458
#: upstream/_versions/main/guides/cache.adoc:507
#: upstream/_versions/main/guides/cache.adoc:550
#: upstream/_versions/main/guides/cache.adoc:592
#: upstream/_versions/main/guides/cache.adoc:621
#: upstream/_versions/main/guides/cache.adoc:653
#: upstream/_versions/main/guides/cache.adoc:682
#: upstream/_versions/main/guides/cache.adoc:821
#: upstream/_versions/main/guides/cache.adoc:852
#: upstream/_versions/main/guides/cache.adoc:884
#: upstream/_versions/main/guides/cache.adoc:915
#: upstream/_versions/main/guides/cache.adoc:945
#, no-wrap
msgid "package org.acme.cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:89
#: upstream/_versions/main/guides/cache.adoc:222
#, no-wrap
msgid "import java.time.LocalDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:91
#: upstream/_versions/main/guides/cache.adoc:224
#: upstream/_versions/main/guides/cache.adoc:357
#: upstream/_versions/main/guides/cache.adoc:460
#: upstream/_versions/main/guides/cache.adoc:594
#: upstream/_versions/main/guides/cache.adoc:623
#: upstream/_versions/main/guides/cache.adoc:655
#: upstream/_versions/main/guides/cache.adoc:823
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:94
#: upstream/_versions/main/guides/cache.adoc:229
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class WeatherForecastService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:103
#, no-wrap
msgid ""
"    public String getDailyForecast(LocalDate date, String city) {\n"
"        try {\n"
"            Thread.sleep(2000L); <1>\n"
"        } catch (InterruptedException e) {\n"
"            Thread.currentThread().interrupt();\n"
"        }\n"
"        return date.getDayOfWeek() + \" will be \" + getDailyResult(date.getDayOfMonth() % 4) + \" in \" + city;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:119
#: upstream/_versions/main/guides/cache.adoc:255
#, no-wrap
msgid ""
"    private String getDailyResult(int dayOfMonthModuloFour) {\n"
"        switch (dayOfMonthModuloFour) {\n"
"            case 0:\n"
"                return \"sunny\";\n"
"            case 1:\n"
"                return \"cloudy\";\n"
"            case 2:\n"
"                return \"chilly\";\n"
"            case 3:\n"
"                return \"rainy\";\n"
"            default:\n"
"                throw new IllegalArgumentException();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:121
msgid "This is where the slowness comes from."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:124
msgid "We also need a class that will contain the response sent to the users when they ask for the next three days weather forecast.  Create `src/main/java/org/acme/cache/WeatherForecast.java` this way:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:130
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:132
#, no-wrap
msgid "public class WeatherForecast {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:134
#, no-wrap
msgid "    private List<String> dailyForecasts;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:136
#, no-wrap
msgid "    private long executionTimeInMs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:141
#, no-wrap
msgid ""
"    public WeatherForecast(List<String> dailyForecasts, long executionTimeInMs) {\n"
"        this.dailyForecasts = dailyForecasts;\n"
"        this.executionTimeInMs = executionTimeInMs;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:145
#, no-wrap
msgid ""
"    public List<String> getDailyForecasts() {\n"
"        return dailyForecasts;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:150
#, no-wrap
msgid ""
"    public long getExecutionTimeInMs() {\n"
"        return executionTimeInMs;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:154
msgid "Now, we just need to create the REST resource.  Create the `src/main/java/org/acme/cache/WeatherForecastResource.java` file with this content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:162
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.util.Arrays;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:167
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:169
#, no-wrap
msgid "import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:172
#, no-wrap
msgid ""
"@Path(\"/weather\")\n"
"public class WeatherForecastResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:175
#, no-wrap
msgid ""
"    @Inject\n"
"    WeatherForecastService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:187
#, no-wrap
msgid ""
"    @GET\n"
"    public WeatherForecast getForecast(@RestQuery String city, @RestQuery long daysInFuture) { <1>\n"
"        long executionStart = System.currentTimeMillis();\n"
"        List<String> dailyForecasts = Arrays.asList(\n"
"                service.getDailyForecast(LocalDate.now().plusDays(daysInFuture), city),\n"
"                service.getDailyForecast(LocalDate.now().plusDays(daysInFuture + 1L), city),\n"
"                service.getDailyForecast(LocalDate.now().plusDays(daysInFuture + 2L), city));\n"
"        long executionEnd = System.currentTimeMillis();\n"
"        return new WeatherForecast(dailyForecasts, executionEnd - executionStart);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:190
msgid "If the `daysInFuture` query parameter is omitted, the three days weather forecast will start from the current day.  Otherwise, it will start from the current day plus the `daysInFuture` value."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:192
msgid "We're all done! Let's check if everything's working."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:194
msgid "First, run the application using dev mode from the project directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:199
msgid "Then, call `http://localhost:8080/weather?city=Raleigh` from a browser.  After six long seconds, the application will answer something like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:203
#, no-wrap
msgid "{\"dailyForecasts\":[\"MONDAY will be cloudy in Raleigh\",\"TUESDAY will be chilly in Raleigh\",\"WEDNESDAY will be rainy in Raleigh\"],\"executionTimeInMs\":6001}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:208
msgid "The response content may vary depending on the day you run the code."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:211
msgid "You can try calling the same URL again and again, it will always take six seconds to answer."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:212
#, no-wrap
msgid "Enabling the cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:216
msgid "Now that your Quarkus application is up and running, let's tremendously improve its response time by caching the external meteorological service responses.  Update the `WeatherForecastService` class like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:226
#, no-wrap
msgid "import io.quarkus.cache.CacheResult;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:239
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"weather-cache\") <1>\n"
"    public String getDailyForecast(LocalDate date, String city) {\n"
"        try {\n"
"            Thread.sleep(2000L);\n"
"        } catch (InterruptedException e) {\n"
"            Thread.currentThread().interrupt();\n"
"        }\n"
"        return date.getDayOfWeek() + \" will be \" + getDailyResult(date.getDayOfMonth() % 4) + \" in \" + city;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:257
msgid "We only added this annotation (and the associated import of course)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:261
msgid "Let's try to call `http://localhost:8080/weather?city=Raleigh` again.  You're still waiting a long time before receiving an answer.  This is normal since the server just restarted and the cache was empty."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:264
msgid "Wait a second! The server restarted by itself after the `WeatherForecastService` update? Yes, this is one of Quarkus amazing features for developers called `live coding`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:267
msgid "Now that the cache was loaded during the previous call, try calling the same URL.  This time, you should get a super fast answer with an `executionTimeInMs` value close to 0."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:270
msgid "Let's see what happens if we start from one day in the future using the `http://localhost:8080/weather?city=Raleigh&daysInFuture=1` URL.  You should get an answer two seconds later since two of the requested days were already loaded in the cache."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:273
msgid "You can also try calling the same URL with a different city and see the cache in action again.  The first call will take six seconds and the following ones will be answered immediately."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:275
msgid "Congratulations! You just added application data caching to your Quarkus application with a single line of code!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:278
msgid "Do you want to learn more about the Quarkus application data caching abilities? The following sections will show you everything there is to know about it."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:280
#, no-wrap
msgid "Caching using annotations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:283
msgid "Quarkus offers a set of annotations that can be used in a CDI managed bean to enable caching abilities."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:288
msgid "Caching annotations are not allowed on private methods.  They will work fine with any other access modifier including package-private (no explicit modifier)."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:290
#, no-wrap
msgid "@CacheResult"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:293
msgid "Loads a method result from the cache without executing the method body whenever possible."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:298
msgid "When a method annotated with `@CacheResult` is invoked, Quarkus will compute a cache key and use it to check in the cache whether the method has been already invoked.  See the xref:cache-keys-building-logic[Cache keys building logic] section of this guide to learn how the cache key is computed.  If a value is found in the cache, it is returned and the annotated method is never actually executed.  If no value is found, the annotated method is invoked and the returned value is stored in the cache using the computed key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:305
msgid "A method annotated with `CacheResult` is protected by a lock on cache miss mechanism.  If several concurrent invocations try to retrieve a cache value from the same missing key, the method will only be invoked once.  The first concurrent invocation will trigger the method invocation while the subsequent concurrent invocations will wait for the end of the method invocation to get the cached result.  The `lockTimeout` parameter can be used to interrupt the lock after a given delay.  The lock timeout is disabled by default, meaning the lock is never interrupted.  See the parameter Javadoc for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:307
msgid "This annotation cannot be used on a method returning `void`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:312
msgid "Quarkus is able to also cache `null` values unlike the underlying Caffeine provider.  See xref:negative-cache[more on this topic below]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:314
#, no-wrap
msgid "@CacheInvalidate"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:317
msgid "Removes an entry from the cache."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:321
msgid "When a method annotated with `@CacheInvalidate` is invoked, Quarkus will compute a cache key and use it to try to remove an existing entry from the cache.  See the xref:cache-keys-building-logic[Cache keys building logic] section of this guide to learn how the cache key is computed.  If the key does not identify any cache entry, nothing will happen."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:322
#, no-wrap
msgid "@CacheInvalidateAll"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:325
msgid "When a method annotated with `@CacheInvalidateAll` is invoked, Quarkus will remove all entries from the cache."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:326
#, no-wrap
msgid "@CacheKey"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:330
msgid "When a method argument is annotated with `@CacheKey`, it is identified as a part of the cache key during an invocation of a method annotated with `@CacheResult` or `@CacheInvalidate`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:332
msgid "This annotation is optional and should only be used when some method arguments are NOT part of the cache key."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:334
#, no-wrap
msgid "Cache keys building logic"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:337
msgid "Cache keys are built by the annotations API using the following logic:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:339
msgid "If an `io.quarkus.cache.CacheKeyGenerator` is declared in a `@CacheResult` or a `@CacheInvalidate` annotation, then it is used to generate the cache key. The `@CacheKey` annotations that might be present on some method arguments are ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:340
msgid "Otherwise, if the method has no arguments, then the cache key is an instance of `io.quarkus.cache.DefaultCacheKey` built from the cache name."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:341
msgid "Otherwise, if the method has exactly one argument, then that argument is the cache key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:342
msgid "Otherwise, if the method has multiple arguments but only one annotated with `@CacheKey`, then that annotated argument is the cache key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:343
msgid "Otherwise, if the method has multiple arguments annotated with `@CacheKey`, then the cache key is an instance of `io.quarkus.cache.CompositeCacheKey` built from these annotated arguments."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:344
msgid "Otherwise, if the method has multiple arguments and none of them are annotated with `@CacheKey`, the cache key is an instance of `io.quarkus.cache.CompositeCacheKey` built from all the method arguments."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:348
msgid "Each non-primitive method argument that is part of the key must implement `equals()` and `hashCode()` correctly for the cache to work as expected."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:351
msgid "When a cache key is built from several method arguments, whether they are explicitly identified with `@CacheKey` or not, the building logic depends on the order of these arguments in the method signature. On the other hand, the arguments names are not used at all and do not have any effect on the cache key."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:360
#, no-wrap
msgid ""
"import io.quarkus.cache.CacheInvalidate;\n"
"import io.quarkus.cache.CacheResult;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:363
#: upstream/_versions/main/guides/cache.adoc:470
#: upstream/_versions/main/guides/cache.adoc:830
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CachedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:368
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\")\n"
"    public Object load(String keyElement1, Integer keyElement2) {\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:372
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate1(String keyElement2, Integer keyElement1) { <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:376
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate2(Integer keyElement2, String keyElement1) { <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:380
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate3(Object notPartOfTheKey, @CacheKey String keyElement1, @CacheKey Integer keyElement2) { <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:385
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate4(Object notPartOfTheKey, @CacheKey Integer keyElement2, @CacheKey String keyElement1) { <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:387
msgid "Calling this method WILL invalidate values cached by the `load` method even if the key elements names have been swapped."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:388
#: upstream/_versions/main/guides/cache.adoc:390
msgid "Calling this method WILL NOT invalidate values cached by the `load` method because the key elements order is different."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:389
msgid "Calling this method WILL invalidate values cached by the `load` method because the key elements order is the same."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:391
#, no-wrap
msgid "Generating a cache key with `CacheKeyGenerator`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:395
msgid "You may want to include more than the arguments of a method into a cache key.  This can be done by implementing the `io.quarkus.cache.CacheKeyGenerator` interface and declaring that implementation in the `keyGenerator` field of a `@CacheResult` or `@CacheInvalidate` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:399
msgid "If a CDI scope is declared on a key generator class and if that class has a default qualifier (no qualifier annotation or `@jakarta.enterprise.inject.Default`), then the key generator will be injected as a CDI bean during the cache key computation.  Otherwise, the key generator will be instantiated using its default constructor.  All CDI scopes supported by Quarkus can be used on a key generator."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:401
msgid "The following key generator will be injected as a CDI bean:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:409
#, no-wrap
msgid ""
"import java.lang.reflect.Method;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:412
#: upstream/_versions/main/guides/cache.adoc:440
#, no-wrap
msgid ""
"import io.quarkus.cache.CacheKeyGenerator;\n"
"import io.quarkus.cache.CompositeCacheKey;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:415
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ApplicationScopedKeyGen implements CacheKeyGenerator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:418
#, no-wrap
msgid ""
"    @Inject\n"
"    AnythingYouNeedHere anythingYouNeedHere; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:424
#, no-wrap
msgid ""
"    @Override\n"
"    public Object generate(Method method, Object... methodParams) { <2>\n"
"        return new CompositeCacheKey(anythingYouNeedHere.getData(), methodParams[1]); <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:426
msgid "External data can be included into the cache key by injecting a CDI bean in the key generator."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:427
msgid "Be careful while using `Method`, some of its methods can be expensive."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:429
msgid "Make sure the method has enough arguments before accessing them from their index.  Otherwise, an `IndexOutOfBoundsException` may be thrown during the cache key computation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:431
msgid "The following key generator will be instantiated using its default constructor:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:437
#, no-wrap
msgid "import java.lang.reflect.Method;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:442
#, no-wrap
msgid "public class NotABeanKeyGen implements CacheKeyGenerator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:444
#, no-wrap
msgid "    // CDI injections won't work here because it's not a CDI bean.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:450
#, no-wrap
msgid ""
"    @Override\n"
"    public Object generate(Method method, Object... methodParams) {\n"
"        return new CompositeCacheKey(method.getName(), methodParams[0]); <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:452
msgid "Including the method name into the cache key is not expensive, unlike other methods from `Method`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:454
msgid "Both kinds of key generators can be used in a similar way:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:463
#, no-wrap
msgid ""
"import org.acme.cache.ApplicationScopedKeyGen;\n"
"import org.acme.cache.NotABeanKeyGen;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:467
#, no-wrap
msgid ""
"import io.quarkus.cache.CacheKey;\n"
"import io.quarkus.cache.CacheInvalidate;\n"
"import io.quarkus.cache.CacheResult;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:475
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\", keyGenerator = ApplicationScopedKeyGen.class) <1>\n"
"    public Object load(@CacheKey Object notUsedInKey, String keyElement) { <2>\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:479
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\", keyGenerator = NotABeanKeyGen.class) <3>\n"
"    public void invalidate(Object keyElement) {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:485
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\", keyGenerator = NotABeanKeyGen.class)\n"
"    @CacheInvalidate(cacheName = \"bar\")\n"
"    public void invalidate(Integer param0, @CacheKey BigDecimal param1) { <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:487
msgid "This key generator is a CDI bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:488
msgid "The `@CacheKey` annotation will be ignored because a key generator is declared in the `@CacheResult` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:489
msgid "This key generator is not a CDI bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:490
msgid "The `@CacheKey` annotation will be ignored when the `foo` cache data is invalidated, but `param1` will be the cache key when the `bar` cache data is invalidated."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:492
#, no-wrap
msgid "Caching using the programmatic API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:496
msgid "Quarkus also offers a programmatic API which can be used to store, retrieve or delete values from any cache declared using the annotations API.  All operations from the programmatic API are non-blocking and rely on https://smallrye.io/smallrye-mutiny/[Mutiny] under the hood."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:499
msgid "Before accessing programmatically the cached data, you need to retrieve an `io.quarkus.cache.Cache` instance.  The following sections will show you how to do that."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:500
#, no-wrap
msgid "Injecting a `Cache` with the `@CacheName` annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:503
msgid "`io.quarkus.cache.CacheName` can be used on a field, a constructor parameter or a method parameter to inject a `Cache`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:510
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:514
#, no-wrap
msgid ""
"import io.quarkus.cache.Cache;\n"
"import io.quarkus.cache.CacheName;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:517
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CachedExpensiveService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:521
#, no-wrap
msgid ""
"    @Inject //<1>\n"
"    @CacheName(\"my-cache\")\n"
"    Cache cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:530
#, no-wrap
msgid ""
"    public Uni<String> getNonBlockingExpensiveValue(Object key) { //<2>\n"
"        return cache.get(key, k -> { //<3>\n"
"            /*\n"
"             * Put an expensive call here.\n"
"             * It will be executed only if the key is not already associated with a value in the cache.\n"
"             */\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:537
#, no-wrap
msgid ""
"    public String getBlockingExpensiveValue(Object key) {\n"
"        return cache.get(key, k -> {\n"
"            // Put an expensive call here.\n"
"        }).await().indefinitely(); //<4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:539
msgid "This is optional."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:540
msgid "This method returns the `Uni<String>` type which is non-blocking."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:541
msgid "The `k` argument contains the cache key value."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:542
msgid "If you don't need the call to be non-blocking, this is how you can retrieve the cache value in a blocking way."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:543
#, no-wrap
msgid "Retrieving a `Cache` from the `CacheManager`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:546
msgid "Another way to retrieve a `Cache` instance consists in injecting the `io.quarkus.cache.CacheManager` first and then retrieving the desired `Cache` from its name:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:553
#: upstream/_versions/main/guides/cache.adoc:685
#: upstream/_versions/main/guides/cache.adoc:948
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:556
#, no-wrap
msgid ""
"import io.quarkus.cache.Cache;\n"
"import io.quarkus.cache.CacheManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:558
#, no-wrap
msgid "import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:561
#: upstream/_versions/main/guides/cache.adoc:953
#, no-wrap
msgid ""
"@Singleton\n"
"public class CacheClearer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:563
#: upstream/_versions/main/guides/cache.adoc:697
#: upstream/_versions/main/guides/cache.adoc:955
#, no-wrap
msgid "    private final CacheManager cacheManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:567
#: upstream/_versions/main/guides/cache.adoc:959
#, no-wrap
msgid ""
"    public CacheClearer(CacheManager cacheManager) {\n"
"        this.cacheManager = cacheManager;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:575
#, no-wrap
msgid ""
"    public void clearCache(String cacheName) {\n"
"        Optional<Cache> cache = cacheManager.getCache(cacheName);\n"
"        if (cache.isPresent()) {\n"
"            cache.get().invalidateAll().await().indefinitely();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:577
#, no-wrap
msgid "Building a programmatic cache key"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:581
msgid "Before building a programmatic cache key, you need to know how cache keys are built by the annotations API when an annotated method is invoked.  This is explained in the xref:cache-keys-building-logic[Cache keys building logic] section of this guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:583
msgid "Now, if you want to retrieve or delete, using the programmatic API, a cache value that was stored using the annotations API, you just need to make sure the same key is used with both APIs."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:584
#, no-wrap
msgid "Retrieving all keys from a `CaffeineCache`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:588
msgid "The cache keys from a specific `CaffeineCache` can be retrieved as an unmodifiable `Set` as shown below.  If the cache entries are modified while an iteration over the set is in progress, the set will remain unchanged."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:598
#: upstream/_versions/main/guides/cache.adoc:627
#: upstream/_versions/main/guides/cache.adoc:659
#, no-wrap
msgid ""
"import io.quarkus.cache.Cache;\n"
"import io.quarkus.cache.CacheName;\n"
"import io.quarkus.cache.CaffeineCache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:600
#, no-wrap
msgid "import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:603
#: upstream/_versions/main/guides/cache.adoc:664
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CacheKeysService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:606
#: upstream/_versions/main/guides/cache.adoc:635
#: upstream/_versions/main/guides/cache.adoc:667
#, no-wrap
msgid ""
"    @CacheName(\"my-cache\")\n"
"    Cache cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:611
#, no-wrap
msgid ""
"    public Set<Object> getAllCacheKeys() {\n"
"        return cache.as(CaffeineCache.class).keySet();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:613
#, no-wrap
msgid "Populating a `CaffeineCache`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:617
msgid "You can populate a `CaffeineCache` using the `CaffeineCache#put(Object, CompletableFuture)` method.  This method associates the `CompletableFuture` with the given key in the cache. If the cache previously contained a value associated with the key, the old value is replaced by this `CompletableFuture`. If the asynchronous computation fails, the entry will be automatically removed."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:629
#: upstream/_versions/main/guides/cache.adoc:661
#, no-wrap
msgid "import java.util.concurrent.CompletableFuture;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:632
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CacheService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:641
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public void initialize() {\n"
"        cache.as(CaffeineCache.class).put(\"foo\", CompletableFuture.completedFuture(\"bar\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:643
#, no-wrap
msgid "Retrieving a value if a key is present from a `CaffeineCache`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:649
msgid "The cache value from a specific `CaffeineCache` can be retrieved if present as shown below.  If the given key is contained in the cache, the method will return the `CompletableFuture` the specified key is mapped to.  That `CompletableFuture` may be computing or may already be completed.  Otherwise, the method will return `null`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:672
#, no-wrap
msgid ""
"    public CompletableFuture<Object> getIfPresent(Object key) {\n"
"        return cache.as(CaffeineCache.class).getIfPresent(key);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:674
#, no-wrap
msgid "Changing the expiration policy or the maximum size of a `CaffeineCache` in real time"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:678
msgid "The expiration policy of a `CaffeineCache` can be changed while a Quarkus app is running if that policy was initially specified in the Quarkus configuration.  Similarly, the maximum size of a `CaffeineCache` can be changed in real time if the cache was built with an initial maximum size defined in the configuration."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:689
#, no-wrap
msgid ""
"import io.quarkus.cache.Cache;\n"
"import io.quarkus.cache.CacheManager;\n"
"import io.quarkus.cache.CaffeineCache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:692
#, no-wrap
msgid ""
"import java.time.Duration;\n"
"import java.util.Optional;import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:695
#, no-wrap
msgid ""
"@Singleton\n"
"public class CacheConfigManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:701
#, no-wrap
msgid ""
"    public CacheConfigManager(CacheManager cacheManager) {\n"
"        this.cacheManager = cacheManager;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:708
#, no-wrap
msgid ""
"    public void setExpireAfterAccess(String cacheName, Duration duration) {\n"
"        Optional<Cache> cache = cacheManager.getCache(cacheName);\n"
"        if (cache.isPresent()) {\n"
"            cache.get().as(CaffeineCache.class).setExpireAfterAccess(duration); <1>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:715
#, no-wrap
msgid ""
"    public void setExpireAfterWrite(String cacheName, Duration duration) {\n"
"        Optional<Cache> cache = cacheManager.getCache(cacheName);\n"
"        if (cache.isPresent()) {\n"
"            cache.get().as(CaffeineCache.class).setExpireAfterWrite(duration); <2>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:723
#, no-wrap
msgid ""
"    public void setMaximumSize(String cacheName, long maximumSize) {\n"
"        Optional<Cache> cache = cacheManager.getCache(cacheName);\n"
"        if (cache.isPresent()) {\n"
"            cache.get().as(CaffeineCache.class).setMaximumSize(maximumSize); <3>\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:725
msgid "This line will only work if the cache was constructed with an `expire-after-access` configuration value. Otherwise, an `IllegalStateException` will be thrown."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:726
msgid "This line will only work if the cache was constructed with an `expire-after-write` configuration value. Otherwise, an `IllegalStateException` will be thrown."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:727
msgid "This line will only work if the cache was constructed with a `maximum-size` configuration value. Otherwise, an `IllegalStateException` will be thrown."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:731
msgid "The `setExpireAfterAccess`, `setExpireAfterWrite` and `setMaximumSize` methods from `CaffeineCache` must never be invoked from within an atomic scope of a cache operation."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:733
#, no-wrap
msgid "Configuring the underlying caching provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:737
msgid "This extension uses https://github.com/ben-manes/caffeine[Caffeine] as its underlying caching provider.  Caffeine is a high performance, near optimal caching library."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:738
#, no-wrap
msgid "Caffeine configuration properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:742
msgid "Each of the Caffeine caches backing up the Quarkus application data caching extension can be configured using the following properties in the `application.properties` file. By default, caches do not perform any type of eviction if not configured."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:746
msgid "You need to replace `cache-name` in all the following properties with the real name of the cache you want to configure."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:751
msgid "Here's what your cache configuration could look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:758
#, no-wrap
msgid ""
"quarkus.cache.caffeine.\"foo\".initial-capacity=10 <1>\n"
"quarkus.cache.caffeine.\"foo\".maximum-size=20\n"
"quarkus.cache.caffeine.\"foo\".expire-after-write=60S\n"
"quarkus.cache.caffeine.\"bar\".maximum-size=1000 <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:760
msgid "The `foo` cache is being configured."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:761
msgid "The `bar` cache is being configured."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:762
#, no-wrap
msgid "Enabling Micrometer metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:765
msgid "Each cache declared using the xref:annotations-api[annotations caching API] can be monitored using Micrometer metrics."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:770
msgid "The cache metrics collection will only work if your application depends on a `quarkus-micrometer-registry-*` extension.  See the xref:telemetry-micrometer.adoc[Micrometer metrics guide] to learn how to use Micrometer in Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:774
msgid "The cache metrics collection is disabled by default.  It can be enabled from the `application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:778
#, no-wrap
msgid "quarkus.cache.caffeine.\"foo\".metrics-enabled=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/cache.adoc:783
msgid "Like all instrumentation methods, collecting metrics comes with a small overhead that can impact the application performances."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:786
msgid "The collected metrics contain cache statistics such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:788
msgid "the approximate current number of entries in the cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:789
msgid "the number of entries that were added to the cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:790
msgid "the number of times a cache lookup has been performed, including information about hits and misses"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:791
msgid "the number of evictions and the weight of the evicted entries"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:793
msgid "Here is an example of cache metrics available for an application that depends on the `quarkus-micrometer-registry-prometheus` extension:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:812
#, no-wrap
msgid ""
"# HELP cache_size The number of entries in this cache. This may be an approximation, depending on the type of cache.\n"
"# TYPE cache_size gauge\n"
"cache_size{cache=\"foo\",} 8.0\n"
"# HELP cache_puts_total The number of entries added to the cache\n"
"# TYPE cache_puts_total counter\n"
"cache_puts_total{cache=\"foo\",} 12.0\n"
"# HELP cache_gets_total The number of times cache lookup methods have returned a cached value.\n"
"# TYPE cache_gets_total counter\n"
"cache_gets_total{cache=\"foo\",result=\"hit\",} 53.0\n"
"cache_gets_total{cache=\"foo\",result=\"miss\",} 12.0\n"
"# HELP cache_evictions_total cache evictions\n"
"# TYPE cache_evictions_total counter\n"
"cache_evictions_total{cache=\"foo\",} 4.0\n"
"# HELP cache_eviction_weight_total The sum of weights of evicted entries. This total does not include manual invalidations.\n"
"# TYPE cache_eviction_weight_total counter\n"
"cache_eviction_weight_total{cache=\"foo\",} 540.0\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:814
#, no-wrap
msgid "Annotated beans examples"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:816
#, no-wrap
msgid "Implicit simple cache key"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:827
#: upstream/_versions/main/guides/cache.adoc:890
#: upstream/_versions/main/guides/cache.adoc:921
#, no-wrap
msgid ""
"import io.quarkus.cache.CacheInvalidate;\n"
"import io.quarkus.cache.CacheInvalidateAll;\n"
"import io.quarkus.cache.CacheResult;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:835
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\")\n"
"    public Object load(Object key) { <1>\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:839
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate(Object key) { <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:844
#: upstream/_versions/main/guides/cache.adoc:876
#: upstream/_versions/main/guides/cache.adoc:907
#, no-wrap
msgid ""
"    @CacheInvalidateAll(cacheName = \"foo\")\n"
"    public void invalidateAll() {\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:846
msgid "The cache key is implicit since there's no `@CacheKey` annotation."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:847
#, no-wrap
msgid "Explicit composite cache key"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:854
#: upstream/_versions/main/guides/cache.adoc:886
#, no-wrap
msgid "import jakarta.enterprise.context.Dependent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:859
#, no-wrap
msgid ""
"import io.quarkus.cache.CacheInvalidate;\n"
"import io.quarkus.cache.CacheInvalidateAll;\n"
"import io.quarkus.cache.CacheKey;\n"
"import io.quarkus.cache.CacheResult;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:862
#: upstream/_versions/main/guides/cache.adoc:893
#, no-wrap
msgid ""
"@Dependent\n"
"public class CachedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:867
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\")\n"
"    public String load(@CacheKey Object keyElement1, @CacheKey Object keyElement2, Object notPartOfTheKey) { <1>\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:871
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate(@CacheKey Object keyElement1, @CacheKey Object keyElement2, Object notPartOfTheKey) { <1>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:878
msgid "The cache key is explicitly composed of two elements. The method signature also contains a third argument which is not part of the key."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:879
#, no-wrap
msgid "Default cache key"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:898
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\")\n"
"    public String load() { <1>\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:902
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    public void invalidate() { <1>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:909
msgid "A unique default cache key derived from the cache name is used because the method has no arguments."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:910
#, no-wrap
msgid "Multiple annotations on a single method"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:917
#, no-wrap
msgid "import jakarta.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:924
#, no-wrap
msgid ""
"@Singleton\n"
"public class CachedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:930
#, no-wrap
msgid ""
"    @CacheInvalidate(cacheName = \"foo\")\n"
"    @CacheResult(cacheName = \"foo\")\n"
"    public String forceCacheEntryRefresh(Object key) { <1>\n"
"        // Call expensive service here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:936
#, no-wrap
msgid ""
"    @CacheInvalidateAll(cacheName = \"foo\")\n"
"    @CacheInvalidateAll(cacheName = \"bar\")\n"
"    public void multipleInvalidateAll(Object key) { <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:938
msgid "This method can be used to force a refresh of the cache entry corresponding to the given key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:939
msgid "This method will invalidate all entries from the `foo` and `bar` caches with a single call."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:940
#, no-wrap
msgid "Clear all application caches"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:950
#, no-wrap
msgid "import io.quarkus.cache.CacheManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:966
#, no-wrap
msgid ""
"    public void clearAllCaches() {\n"
"        for (String cacheName : cacheManager.getCacheNames()) {\n"
"            cacheManager.getCache(cacheName).get().invalidateAll().await().indefinitely();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:969
#, no-wrap
msgid "Negative caching and nulls"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:974
msgid "Sometimes one wants to cache the result of an (expensive) remote call.  If the remote call fails, one may not want to cache the result or exception, but rather re-try the remote call on the next invocation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:977
msgid "A simple approach could be to catch the exception and return `null`, so that the caller can act accordingly:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/cache.adoc:978
#, no-wrap
msgid "Sample code"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:982
#, no-wrap
msgid "    public void caller(int val) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:990
#, no-wrap
msgid ""
"        Integer result = callRemote(val); //<1>\n"
"        if (result != null) {\n"
"            System.out.println(\"Result is \" + result);\n"
"        else {\n"
"            System.out.println(\"Got an exception\");\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:993
#, no-wrap
msgid ""
"    @CacheResult(cacheName = \"foo\")\n"
"    public Integer callRemote(int val)  {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:1001
#, no-wrap
msgid ""
"        try {\n"
"            Integer val = remoteWebServer.getResult(val); //<2>\n"
"            return val;\n"
"        } catch (Exception e) {\n"
"            return null; // <3>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1003
#: upstream/_versions/main/guides/cache.adoc:1036
msgid "Call the method to call the remote"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1004
msgid "Do the remote call and return its result"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1005
msgid "Return in case of exception"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1010
msgid "This approach has an unfortunate side effect: as we said before, Quarkus can also cache `null` values. Which means that the next call to `callRemote()` with the same parameter value will be answered out of the cache, returning `null` and no remote call will be done.  This may be desired in some scenarios, but usually one wants to retry the remote call until it returns a result."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/cache.adoc:1011
#, no-wrap
msgid "Let exceptions bubble up"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1015
msgid "To prevent the cache from caching (marker) results from a remote call, we need to let the exception bubble out of the called method and catch it at the caller side:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/cache.adoc:1016
#, no-wrap
msgid "With Exception bubbling up"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:1026
#, no-wrap
msgid ""
"   public void caller(int val) {\n"
"       try {\n"
"           Integer result = callRemote(val);  //<1>\n"
"           System.out.println(\"Result is \" + result);\n"
"       } catch (Exception e) {\n"
"           System.out.println(\"Got an exception\");\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:1029
#, no-wrap
msgid ""
"   @CacheResult(cacheName = \"foo\")\n"
"   public Integer callRemote(int val) throws Exception { // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:1032
#, no-wrap
msgid ""
"      Integer val = remoteWebServer.getResult(val);  //<3>\n"
"      return val;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:1034
#, no-wrap
msgid "   }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1037
msgid "Exceptions may bubble up"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1038
msgid "This can throw all kinds of remote exceptions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1043
msgid "When the call to the remote throws an exception, the cache does not store the result, so that a subsequent call to `callRemote()` with the same parameter value will not be answered out of the cache.  It will instead result in another attempt to call the remote."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/cache.adoc:1044
#, no-wrap
msgid "Going native"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1047
msgid "The Cache extension supports building native executables."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1051
msgid "However, to optimize runtime memory, Caffeine embarks many cache implementation classes that are selected depending on the cache configuration.  We are not registering all of them for reflection (and the ones not registered are not included into the native executables) as registering all of them would be very costly."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1053
msgid "We are registering the most common implementations but, depending on your cache configuration, you might encounter errors like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:1064
#, no-wrap
msgid ""
"2021-12-08 02:32:02,108 ERROR [io.qua.run.Application] (main) Failed to start application (with profile prod): java.lang.ClassNotFoundException: com.github.benmanes.caffeine.cache.PSAMS <1>\n"
"        at java.lang.Class.forName(DynamicHub.java:1433)\n"
"        at java.lang.Class.forName(DynamicHub.java:1408)\n"
"        at com.github.benmanes.caffeine.cache.NodeFactory.newFactory(NodeFactory.java:111)\n"
"        at com.github.benmanes.caffeine.cache.BoundedLocalCache.<init>(BoundedLocalCache.java:240)\n"
"        at com.github.benmanes.caffeine.cache.SS.<init>(SS.java:31)\n"
"        at com.github.benmanes.caffeine.cache.SSMS.<init>(SSMS.java:64)\n"
"        at com.github.benmanes.caffeine.cache.SSMSA.<init>(SSMSA.java:43)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1066
msgid "`PSAMS` is one of the many cache implementation classes of Caffeine so this part may vary."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1069
msgid "When you encounter this error, you can easily fix it by adding the following annotation to any of your application classes (or you can create a new class such as `Reflections` just to host this annotation if you prefer):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/cache.adoc:1073
#, no-wrap
msgid "@RegisterForReflection(classNames = { \"com.github.benmanes.caffeine.cache.PSAMS\" }) <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1075
msgid "It is an array, so you can register several cache implementations in one go if your configuration requires several of them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/cache.adoc:1076
msgid "This annotation will register the cache implementation classes for reflection and this will include the classes into the native executable."
msgstr ""
