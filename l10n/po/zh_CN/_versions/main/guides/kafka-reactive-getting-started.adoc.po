# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-12 02:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:6
#, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with Apache Kafka"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:14
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with Apache Kafka."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:15
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:20
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:25
msgid "In this guide, we are going to develop two applications communicating with Kafka.  The first application sends a _quote request_ to Kafka and consumes Kafka messages from the _quote_ topic.  The second application receives the _quote request_ and sends a _quote_ back."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:26
#, no-wrap
msgid "Architecture,"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:26
#, no-wrap
msgid "kafka-qs-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:31
msgid "The first application, the _producer_, will let the user request some quotes over an HTTP endpoint.  For each quote request a random identifier is generated and returned to the user, to mark the quote request as _pending_.  At the same time, the generated request id is sent over a Kafka topic `quote-requests`."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:32
#, no-wrap
msgid "Producer"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:32
#, no-wrap
msgid "kafka-qs-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:35
msgid "The second application, the _processor_, will read from the `quote-requests` topic, put a random price to the quote, and send it to a Kafka topic named `quotes`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:38
msgid "Lastly, the _producer_ will read the quotes and send them to the browser using server-sent events.  The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:39
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:43
msgid "We recommend that you follow the instructions in the next sections and create applications step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:45
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:47
msgid "The solution is located in the `kafka-quickstart` link:{quickstarts-tree-url}/kafka-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:48
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:51
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:53
msgid "To create the _producer_ project, in a terminal run:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:60
msgid "This command creates the project structure and selects two Quarkus extensions we will be using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:62
msgid "RESTEasy Reactive and its Jackson support (to handle JSON) to serve the HTTP endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:63
msgid "The Kafka connector for Reactive Messaging"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:65
msgid "To create the _processor_ project, from the same directory, run:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:72
msgid "At that point, you should have the following structure:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:98
#, no-wrap
msgid ""
".\n"
"├── kafka-quickstart-processor\n"
"│  ├── README.md\n"
"│  ├── mvnw\n"
"│  ├── mvnw.cmd\n"
"│  ├── pom.xml\n"
"│  └── src\n"
"│     └── main\n"
"│        ├── docker\n"
"│        ├── java\n"
"│        └── resources\n"
"│           └── application.properties\n"
"└── kafka-quickstart-producer\n"
"   ├── README.md\n"
"   ├── mvnw\n"
"   ├── mvnw.cmd\n"
"   ├── pom.xml\n"
"   └── src\n"
"      └── main\n"
"         ├── docker\n"
"         ├── java\n"
"         └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:101
msgid "Open the two projects in your favorite IDE."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:103
#, no-wrap
msgid "Dev Services"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:108
msgid "No need to start a Kafka broker when using the dev mode or for tests.  Quarkus starts a broker for you automatically.  See xref:kafka-dev-services.adoc[Dev Services for Kafka] for details."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:110
#, no-wrap
msgid "The Quote object"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:115
msgid "The `Quote` class will be used in both _producer_ and _processor_ projects.  For the sake of simplicity, we will duplicate the class.  In both projects, create the `src/main/java/org/acme/kafka/model/Quote.java` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:119
#, no-wrap
msgid "package org.acme.kafka.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:121
#, no-wrap
msgid "public class Quote {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:124
#, no-wrap
msgid ""
"    public String id;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:129
#, no-wrap
msgid ""
"    /**\n"
"    * Default constructor required for Jackson serializer\n"
"    */\n"
"    public Quote() { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:134
#, no-wrap
msgid ""
"    public Quote(String id, int price) {\n"
"        this.id = id;\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:143
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return \"Quote{\" +\n"
"                \"id='\" + id + '\\'' +\n"
"                \", price=\" + price +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:147
msgid "JSON representation of `Quote` objects will be used in messages sent to the Kafka topic and also in the server-sent events sent to web browsers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:150
msgid "Quarkus has built-in capabilities to deal with JSON Kafka messages.  In a following section, we will create serializer/deserializer classes for Jackson."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:151
#, no-wrap
msgid "Sending quote request"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:154
msgid "Inside the _producer_ project, create the `src/main/java/org/acme/kafka/producer/QuotesResource.java` file and add the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:158
#, no-wrap
msgid "package org.acme.kafka.producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:160
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:166
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:170
#, no-wrap
msgid ""
"import org.acme.kafka.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:173
#, no-wrap
msgid ""
"@Path(\"/quotes\")\n"
"public class QuotesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:176
#, no-wrap
msgid ""
"    @Channel(\"quote-requests\")\n"
"    Emitter<String> quoteRequestEmitter; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:189
#, no-wrap
msgid ""
"    /**\n"
"     * Endpoint to generate a new quote request id and send it to \"quote-requests\" Kafka topic using the emitter.\n"
"     */\n"
"    @POST\n"
"    @Path(\"/request\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String createRequest() {\n"
"        UUID uuid = UUID.randomUUID();\n"
"        quoteRequestEmitter.send(uuid.toString()); // <2>\n"
"        return uuid.toString(); // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:191
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:192
msgid "On a post request, generate a random UUID and send it to the Kafka topic using the emitter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:193
msgid "Return the same UUID to the client."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:199
msgid "The `quote-requests` channel is going to be managed as a Kafka topic, as that's the only connector on the classpath.  If not indicated otherwise, like in this example, Quarkus uses the channel name as topic name.  So, in this example, the application writes into the `quote-requests` topic.  Quarkus also configures the serializer automatically, because it finds that the `Emitter` produces `String` values."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:201
msgid "When you have multiple connectors, you would need to indicate which connector you want to use in the application configuration."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:202
#, no-wrap
msgid "Processing quote requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:206
msgid "Now let's consume the quote request and give out a price.  Inside the _processor_ project, create the `src/main/java/org/acme/kafka/processor/QuotesProcessor.java` file and add the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:210
#, no-wrap
msgid "package org.acme.kafka.processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:212
#, no-wrap
msgid "import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:214
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:218
#, no-wrap
msgid ""
"import org.acme.kafka.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:220
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:227
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"quote-requests\" Kafka topic (mapped to \"requests\" channel) and giving out a random quote.\n"
" * The result is pushed to the \"quotes\" Kafka topic.\n"
" */\n"
"@ApplicationScoped\n"
"public class QuotesProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:229
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:239
#, no-wrap
msgid ""
"    @Incoming(\"requests\") // <1>\n"
"    @Outgoing(\"quotes\")   // <2>\n"
"    @Blocking             // <3>\n"
"    public Quote process(String quoteRequest) throws InterruptedException {\n"
"        // simulate some hard working task\n"
"        Thread.sleep(200);\n"
"        return new Quote(quoteRequest, random.nextInt(100));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:242
msgid "Indicates that the method consumes the items from the `requests` channel."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:243
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:244
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:247
msgid "For every Kafka _record_ from the `quote-requests` topic, Reactive Messaging calls the `process` method, and sends the returned `Quote` object to the `quotes` channel.  In this case, we need to configure the channel in the `application.properties` file, to configures the `requests` and `quotes` channels:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:251
#, no-wrap
msgid "%dev.quarkus.http.port=8081\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:255
#, no-wrap
msgid ""
"# Configure the incoming `quote-requests` Kafka topic\n"
"mp.messaging.incoming.requests.topic=quote-requests\n"
"mp.messaging.incoming.requests.auto.offset.reset=earliest\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:259
msgid "Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.  The configuration keys are structured as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:261
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:263
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:265
msgid "`quote-requests` -> Kafka topic from which we read the quote requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:266
msgid "`quotes` -> Kafka topic in which we write the quotes"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:271
msgid "More details about this configuration is available on the https://kafka.apache.org/documentation/#producerconfigs[Producer configuration] and https://kafka.apache.org/documentation/#consumerconfigs[Consumer configuration] section from the Kafka documentation. These properties are configured with the prefix `kafka`.  An exhaustive list of configuration properties is available in xref:kafka.adoc#kafka-configuration[Kafka Reference Guide - Configuration]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:275
msgid "`mp.messaging.incoming.requests.auto.offset.reset=earliest` instructs the application to start reading the topics from the first offset, when there is no committed offset for the consumer group.  In other words, it will also process messages sent before we start the processor application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:278
msgid "There is no need to set serializers or deserializers.  Quarkus detects them, and if none are found, generates them using JSON serialization."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:279
#, no-wrap
msgid "Receiving quotes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:283
msgid "Back to our _producer_ project.  Let's modify the `QuotesResource` to consume quotes from Kafka and send them back to the client via Server-Sent Events:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:287
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:289
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:292
#, no-wrap
msgid ""
"@Channel(\"quotes\")\n"
"Multi<Quote> quotes; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:301
#, no-wrap
msgid ""
"/**\n"
" * Endpoint retrieving the \"quotes\" Kafka topic and sending the items to a server sent event.\n"
" */\n"
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"public Multi<Quote> stream() {\n"
"    return quotes; // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:303
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:304
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:305
msgid "Returns the stream (_Reactive Stream_)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:308
msgid "No need to configure anything, as Quarkus will automatically associate the `quotes` channel to the `quotes` Kafka topic.  It will also generate a deserializer for the `Quote` class."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:311
#, no-wrap
msgid "Message serialization in Kafka"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:314
msgid "In this example we used Jackson to serialize/deserialize Kafka messages.  For more options on message serialization, see xref:kafka.adoc#kafka-serialization[Kafka Reference Guide - Serialization]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:318
msgid "We strongly suggest adopting a contract-first approach using a schema registry.  To learn more about how to use Apache Kafka with the schema registry and Avro, follow the xref:kafka-schema-registry-avro.adoc[Using Apache Kafka with Schema Registry and Avro] guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:320
#, no-wrap
msgid "The HTML page"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:323
msgid "Final touch, the HTML page requesting quotes and displaying the prices obtained over SSE."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:325
msgid "Inside the _producer_ project, create the `src/main/resources/META-INF/resources/quotes.html` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:333
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <title>Prices</title>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:360
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
"    <div class=\"card\">\n"
"        <div class=\"card-body\">\n"
"            <h2 class=\"card-title\">Quotes</h2>\n"
"            <button class=\"btn btn-info\" id=\"request-quote\">Request Quote</button>\n"
"            <div class=\"quotes\"></div>\n"
"        </div>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n"
"<script>\n"
"    $(\"#request-quote\").click((event) => {\n"
"        fetch(\"/quotes/request\", {method: \"POST\"})\n"
"        .then(res => res.text())\n"
"        .then(qid => {\n"
"            var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);\n"
"            $(\".quotes\").prepend(row);\n"
"        });\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:370
#, no-wrap
msgid ""
"    var source = new EventSource(\"/quotes\");\n"
"    source.onmessage = (event) => {\n"
"      var json = JSON.parse(event.data);\n"
"      $(`#${json.id}`).html((index, html) => {\n"
"        return html.replace(\"Pending\", `\\$\\xA0${json.price}`);\n"
"      });\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:375
msgid "Nothing spectacular here.  When the user clicks the button, HTTP request is made to request a quote, and a pending quote is added to the list.  On each quote received over SSE, the corresponding item in the list is updated."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:376
#, no-wrap
msgid "Get it running"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:380
msgid "You just need to run both applications.  In one terminal, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:384
#, no-wrap
msgid "mvn -f producer quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:387
msgid "In another terminal, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:391
#, no-wrap
msgid "mvn -f processor quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:395
msgid "Quarkus starts a Kafka broker automatically, configures the application and shares the Kafka broker instance between different applications.  See xref:kafka-dev-services.adoc[Dev Services for Kafka] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:397
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:398
#, no-wrap
msgid "Running in JVM or Native mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:402
msgid "When not running in dev or test mode, you will need to start your Kafka broker.  You can follow the instructions from the https://kafka.apache.org/quickstart[Apache Kafka website] or create a `docker-compose.yaml` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:406
#, no-wrap
msgid "version: '3.5'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:408
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:421
#, no-wrap
msgid ""
"  zookeeper:\n"
"    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:439
#, no-wrap
msgid ""
"  kafka:\n"
"    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:453
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/kafka-quickstart-producer:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n"
"    ports:\n"
"      - \"8080:8080\"\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:465
#, no-wrap
msgid ""
"  processor:\n"
"    image: quarkus-quickstarts/kafka-quickstart-processor:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: processor\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:469
#, no-wrap
msgid ""
"networks:\n"
"  kafka-quickstart-network:\n"
"    name: kafkaquickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:472
msgid "Make sure you first build both applications in JVM mode with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:477
#, no-wrap
msgid ""
"mvn -f producer package\n"
"mvn -f processor package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:480
msgid "Once packaged, run `docker-compose up`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:482
msgid "This is a development cluster, do not use in production."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:485
msgid "You can also build and run our applications as native executables.  First, compile both applications as native:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:490
#, no-wrap
msgid ""
"mvn -f producer package -Dnative -Dquarkus.native.container-build=true\n"
"mvn -f processor package -Dnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:493
msgid "Run the system with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:498
#, no-wrap
msgid ""
"export QUARKUS_MODE=native\n"
"docker-compose up --build\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:500
#, no-wrap
msgid "Going further"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:504
msgid "This guide has shown how you can interact with Kafka using Quarkus.  It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:506
msgid "For the exhaustive list of features and configuration options, check the xref:kafka.adoc[Reference guide for Apache Kafka Extension]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-reactive-getting-started.adoc:512
msgid "In this guide we explore Smallrye Reactive Messaging framework to interact with Apache Kafka.  Quarkus extension for Kafka also allows xref:kafka.adoc#kafka-bare-clients[using Kafka clients directly]."
msgstr ""
