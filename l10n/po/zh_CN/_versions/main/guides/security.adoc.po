# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-09 03:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security.adoc:6
#, no-wrap
msgid "Security Architecture and Guides"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:11
msgid "Quarkus Security provides the architecture, multiple authentication and authorization mechanisms, and other tools for the developers to build a production-quality security for their Quarkus applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:13
msgid "This document provides a brief overview of Quarkus Security and links to the individual guides."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:14
#, no-wrap
msgid "Getting Started"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:17
msgid "Please see the xref:security-getting-started.adoc[Getting Started With Security] guide for a quick walkthrough through Quarkus Security where you can learn how to use xref:security-basic-auth-concept.adoc[Basic HTTP Authentication] mechanism and `JPA Identity Provider` to create `SecurityIdentity` and authorize a secure access to the endpoint with `Role Based Access Control`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:18
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:21
msgid "`HttpAuthenticationMechanism` is the main entry into Quarkus HTTP Security."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:24
msgid "Quarkus Security Manager uses `HttpAuthenticationMechanism` to extract the authentication credentials from the HTTP request and delegates to `IdentityProvider` to complete the conversion of these credentials to `SecurityIdentity`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:26
msgid "For example, the credentials may be coming with the HTTP `Authorization` header, client HTTPS certificates or cookies."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:28
msgid "`IdentityProvider` verifies the authentication credentials and maps them to `SecurityIdentity` which contains the username, roles, the original authentication credentials, and other attributes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:30
msgid "For every authenticated resource, you can inject a `SecurityIdentity` instance to get the authenticated identity information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:33
msgid "In some other contexts you may have other parallel representations of the same information (or parts of it) such as `SecurityContext` for JAX-RS or `JsonWebToken` for JWT."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:34
#, no-wrap
msgid "Authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:37
msgid "Quarkus supports several sources to load authentication information from."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security.adoc:38
#, no-wrap
msgid "Basic and Form Authentication Mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:42
msgid "Basic and Form HTTP-based authentication mechanisms are the core authentication mechanisms supported in Quarkus.  Please see xref:security-basic-auth-concept.adoc[Basic HTTP Authentication] and xref:security-built-in-authentication.adoc#form-auth[Form HTTP Authentication] for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security.adoc:43
#, no-wrap
msgid "WebAuthn Authentication Mechanism"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:47
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism designed to replace passwords. In short, every time you write a service for registering new users, or logging them in, instead of asking for a password, you use WebAuthn, which will replace the password."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:49
msgid "Please see xref:security-webauthn.adoc[our dedicated WebAuthn documentation] for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security.adoc:50
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:53
msgid "Quarkus provides Mutual TLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:55
msgid "Please see xref:security-built-in-authentication.adoc#mutual-tls[Mutual TLS Authentication] for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security.adoc:56
#, no-wrap
msgid "OpenID Connect"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:59
msgid "OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol. OIDC enables client applications to verify the identity of a user based on authentication that is performed by the OIDC provider and retrieves basic information about that user."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:61
msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer Token and Authorization Code Flow authentication mechanisms."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:64
msgid "The Bearer Token mechanism extracts the token from the HTTP Authorization header.  The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the identity of this user and, after the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code grant for ID, access, and refresh tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:66
msgid "You can verify ID and access JSON Web Token (JWT) tokens by using the refreshable JSON Web Key (JWK) set. However, both JWT and opaque (binary) tokens can be introspected remotely."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security.adoc:70
msgid "Using the Quarkus OIDC extension, both Bearer Token and Authorization Code Flow mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:73
msgid "For information about the Bearer Token authentication mechanism, see xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:75
msgid "For information about the Authorization Code Flow authentication mechanism, see xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Application]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:77
msgid "For information about multiple tenants that can support Bearer Token or Authorization Code Flow mechanisms, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:79
msgid "For information about using Keycloak to Centralize Authorization, see the xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:81
msgid "For information about configuring Keycloak programmatically, see the xref:security-keycloak-admin-client.adoc[Keycloak Admin Client] guide."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security.adoc:86
msgid "If you need to enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time then re-enable it at runtime by using a system property.  For more information about managing the individual tenant configurations in multitenant OIDC deployments, see xref:security-openid-connect-multitenancy.adoc#disable-tenant[Disabling Tenant Configurations]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security.adoc:88
#, no-wrap
msgid "OpenID Connect Client and Filters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:91
msgid "`quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers which support `client-credentials`, `password` and `refresh_token` token grants."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:93
msgid "`quarkus-oidc-client-filter` extension depends on the `quarkus-oidc-client` extension and provides JAX-RS `OidcClientRequestFilter` which sets the access token acquired by `OidcClient` as an HTTP `Authorization` header's `Bearer` scheme value. This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint. For example, it can be a public endpoint, or it can be protected with MTLS - the important point is that this Quarkus endpoint does not have to be protected itself with the Quarkus OpenID Connect adapter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:95
msgid "`quarkus-oidc-token-propagation` extension depends on the `quarkus-oidc` extension and provides JAX-RS `TokenCredentialRequestFilter` which sets the OpenID Connect Bearer or Authorization Code Flow access token as an HTTP `Authorization` header's `Bearer` scheme value. This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint and the Quarkus endpoint must be protected itself with the Quarkus OpenID Connect adapter. This filter can be used to propagate the access token to the downstream services."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:97
msgid "See the xref:security-openid-connect-client.adoc[OpenID Connect and Token Propagation Quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client Reference] guides for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security.adoc:99
#, no-wrap
msgid "SmallRye JWT"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:102
msgid "`quarkus-smallrye-jwt` provides Microprofile JWT 1.1.1 implementation and many more options to verify signed and encrypted `JWT` tokens and represent them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:104
msgid "It provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It can currently verify only `JWT` tokens using the PEM keys or refreshable `JWK` key set."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:106
msgid "Additionally, it provides `JWT Generation API` for creating `signed`, `inner-signed` and/or `encrypted` `JWT` tokens with ease."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:108
msgid "See the xref:security-jwt.adoc[Using SmallRye JWT] guide for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security.adoc:109
#, no-wrap
msgid "OAuth2"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:112
msgid "`quarkus-elytron-security-oauth2` provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It is based on `Elytron` and is primarily meant for introspecting the opaque tokens remotely."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:114
msgid "See the xref:security-oauth2.adoc[Using OAuth2] guide for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security.adoc:116
#, no-wrap
msgid "Choosing between OpenID Connect, SmallRye JWT and OAuth2 extensions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:119
msgid "`quarkus-oidc` extension requires an OpenID Connect provider such as Keycloak which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow. In both cases `quarkus-oidc` requires a connection to this OpenID Connect provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:121
msgid "`quarkus-oidc` is the only option when the user authentication by using Authorization Code flow or supporting multiple tenants is required. It can also request a UserInfo using both Authorization Code Flow and Bearer access tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:123
msgid "When the Bearer tokens have to be verified then `quarkus-oidc`, `quarkus-smallrye-jwt` and `quarkus-elytron-security-oauth2` can be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:125
msgid "If you have Bearer tokens in a JWT format then all these 3 extensions can be used. Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenID Connect provider rotates the keys, therefore `quarkus-oidc` or `quarkus-smallrye-jwt` should be used for verifying JWT tokens if the remote token introspection has to be avoided or not supported by the providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:127
msgid "`quarkus-smallrye-jwt` does not support the remote introspection of the opaque tokens or even JWT tokens - it always relies on the locally available keys - possibly fetched from the OpenID Connect provider. So if you need to introspect the JWT tokens remotely then both `quarkus-oidc` and `quarkus-elytron-security-oauth2` will work. Both extensions also support the verification of the opaque/binary tokens by using the remote introspection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:129
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` can have both JWT and opaque tokens injected into the endpoint code - the injected JWT tokens may offer a richer information about the user. All extensions can have the tokens injected as `Principal`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:131
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. The latter will only use the JWK-formatted keys which are part of a JWK set. The former - can also work with PEM keys."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:133
msgid "`quarkus-smallrye-jwt` can handle locally not only signed but also inner-signed-and-encrypted or only encrypted tokens. In fact `quarkus-oidc` and `quarkus-elytron-security-oauth2` can verify such tokens too but only by treating them as opaque tokens and verifying them through the remote introspection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:135
msgid "`quarkus-elytron-security-oauth2` is the best choice if you need a lightweight library for the remote introspection of either opaque or JWT tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:137
msgid "Note that a choice of using the opaque versus JWT token format is often driven by the architectural considerations. Opaque tokens are usually much shorter than JWT tokens, but they require maintaining most of the token associated state in the provider database - the opaque tokens are effectively the database pointers. JWT tokens are significantly longer than the opaque tokens - but the providers are effectively delegating storing most of the token associated state to the client by storing it as the token claims and either signing and/or encrypting them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:139
msgid "Below is a summary of the options."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:141
#, no-wrap
msgid "quarkus-oidc"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:141
#, no-wrap
msgid "quarkus-smallrye-jwt"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:143
#, no-wrap
msgid "quarkus-elytron-security-oauth2"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:144
#, no-wrap
msgid "Bearer JWT verification is required"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:145
#, no-wrap
msgid "Local Verification or Introspection"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:146
#: upstream/_versions/main/guides/security.adoc:186
#, no-wrap
msgid "Local Verification"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:147
#: upstream/_versions/main/guides/security.adoc:149
#: upstream/_versions/main/guides/security.adoc:151
#: upstream/_versions/main/guides/security.adoc:185
#: upstream/_versions/main/guides/security.adoc:187
#, no-wrap
msgid "Introspection"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:148
#, no-wrap
msgid "Bearer Opaque Token verification is required"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:150
#: upstream/_versions/main/guides/security.adoc:155
#: upstream/_versions/main/guides/security.adoc:163
#: upstream/_versions/main/guides/security.adoc:166
#: upstream/_versions/main/guides/security.adoc:167
#: upstream/_versions/main/guides/security.adoc:170
#: upstream/_versions/main/guides/security.adoc:171
#: upstream/_versions/main/guides/security.adoc:174
#: upstream/_versions/main/guides/security.adoc:175
#: upstream/_versions/main/guides/security.adoc:177
#: upstream/_versions/main/guides/security.adoc:179
#: upstream/_versions/main/guides/security.adoc:181
#: upstream/_versions/main/guides/security.adoc:183
#: upstream/_versions/main/guides/security.adoc:189
#: upstream/_versions/main/guides/security.adoc:191
#: upstream/_versions/main/guides/security.adoc:193
#: upstream/_versions/main/guides/security.adoc:195
#, no-wrap
msgid "No"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:152
#, no-wrap
msgid "Refreshing JsonWebKey set for verifying JWT tokens"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:153
#: upstream/_versions/main/guides/security.adoc:154
#: upstream/_versions/main/guides/security.adoc:157
#: upstream/_versions/main/guides/security.adoc:158
#: upstream/_versions/main/guides/security.adoc:159
#: upstream/_versions/main/guides/security.adoc:161
#: upstream/_versions/main/guides/security.adoc:162
#: upstream/_versions/main/guides/security.adoc:165
#: upstream/_versions/main/guides/security.adoc:169
#: upstream/_versions/main/guides/security.adoc:173
#: upstream/_versions/main/guides/security.adoc:178
#: upstream/_versions/main/guides/security.adoc:194
#, no-wrap
msgid "Yes"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:156
#, no-wrap
msgid "Represent token as Principal"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:160
#, no-wrap
msgid "Inject JWT as MP JWT JsonWebToken"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:164
#, no-wrap
msgid "Authorization Code Flow"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:168
#, no-wrap
msgid "Multi-tenancy"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:172
#, no-wrap
msgid "UserInfo support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:176
#, no-wrap
msgid "Pem Key format support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:180
#, no-wrap
msgid "SecretKey support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:182
#, no-wrap
msgid "In JsonWebKey format"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:184
#, no-wrap
msgid "InnerSigned/Encrypted or Encrypted tokens"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:188
#, no-wrap
msgid "Custom Token Verification"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:190
#, no-wrap
msgid "With Injected JWTParser"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security.adoc:192
#, no-wrap
msgid "Accept JWT as cookie"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:198
#, no-wrap
msgid "Identity Providers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:201
msgid "`IdentityProvider` converts the authentication credentials provided by `HttpAuthenticationMechanism` to `SecurityIdentity`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:204
msgid "Some extensions such as `OIDC`, `OAuth2`, `SmallRye JWT` have the inlined `IdentityProvider` implementations which are specific to the supported authentication flow.  For example, `quarkus-oidc` uses its own `IdentityProvider` to convert a token to `SecurityIdentity`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:206
msgid "If you use `Basic` or `Form` HTTP-based authentication then you have to add an `IdentityProvider` which can convert a username and password to `SecurityIdentity`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:208
msgid "For more information about `Basic` or `Form` HTTP-based authentication, see:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:209
msgid "xref:security-getting-started.adoc[JPA IdentityProvider]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:210
msgid "xref:security-jdbc.adoc[JDBC IdentityProvider]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:211
msgid "xref:security-ldap.adoc[LDAP IdentityProvider]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:213
msgid "For a a Basic Authentication configuration walk-through using JPA, see:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:214
msgid "xref:security-getting-started.adoc[Getting Started With Security] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:216
msgid "For testing, use the xref:security-testing.adoc#configuring-user-information[User Properties IdentityProvider] section with the `IdentityProvider` with already set usernames, passwords, and roles in `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:217
#, no-wrap
msgid "Combining Authentication Mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:221
msgid "One can combine multiple authentication mechanisms if they get the authentication credentials from the different sources.  For example, combining built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms is allowed, but combining `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms is not allowed because both will attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security.adoc:222
#, no-wrap
msgid "Path Specific Authentication Mechanism"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:225
msgid "You can enforce that only a single authentication mechanism is selected for a given request path, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security.adoc:229
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security.adoc:233
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security.adoc:237
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:240
msgid "The value of the `auth-mechanism` property must match the authentication scheme supported by HttpAuthenticationMechanism such as `basic` or `bearer` or `form`, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:241
#, no-wrap
msgid "Proactive Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:245
msgid "By default, Quarkus does what we call proactive authentication. This means that if an incoming request has a credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:247
msgid "See xref:security-built-in-authentication.adoc#proactive-authentication[Proactive Authentication] for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:248
#, no-wrap
msgid "Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:251
msgid "See xref:security-authorization.adoc[Security Authorization] for more information about Role Based Access Control and other authorization options."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:252
#, no-wrap
msgid "Customization and other useful tips"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:255
msgid "Quarkus Security is highly customizable. One can register custom ``HttpAuthenticationMechanism``s, ``IdentityProvider``s and ``SecurityidentityAugmentor``s."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:257
msgid "See xref:security-customization.adoc[Security Customization] for more information about customizing Quarkus Security and other useful tips about the reactive security, registering the security providers, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:258
#, no-wrap
msgid "Secure connections with SSL"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:261
msgid "See the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] guide for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:262
#, no-wrap
msgid "Cross-Origin Resource Sharing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:265
msgid "If you plan to make your Quarkus application accessible to another application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:266
#, no-wrap
msgid "Cross-Site Request Forgery Prevention"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:269
msgid "Quarkus Security provides a RESTEasy Reactive filter which can help protect against a https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery] attack. Please read the xref:csrf-prevention.adoc[Cross-Site Request Forgery Prevention] guide for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:270
#, no-wrap
msgid "SameSite cookies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:273
msgid "Please see xref:http-reference.adoc#same-site-cookie[SameSite cookies] for information about adding a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:274
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:277
msgid "See xref:security-testing.adoc[Security Testing] for more information about testing Quarkus Security."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:278
#, no-wrap
msgid "Secret Engines"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security.adoc:280
#, no-wrap
msgid "Vault"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:282
msgid "Quarkus provides a very comprehensive HashiCorp Vault support, please see the link:{vault-guide}[Quarkus and HashiCorp Vault] documentation for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:283
#, no-wrap
msgid "Secure serialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:286
msgid "When using Security along with RESTEasy Reactive and Jackson, Quarkus can limit the fields that are included in JSON serialization based on the configured security. See the xref:resteasy-reactive.adoc#secure-serialization[RESTEasy Reactive documentation] for details."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security.adoc:287
#, no-wrap
msgid "National Vulnerability Database"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:292
msgid "Most of Quarkus tags have been registered in link:https://nvd.nist.gov[National Vulnerability Database] (NVD) using a Common Platform Enumeration (CPE) name format.  All registered Quarkus CPE names can be found using link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[this search query].  If a Quarkus tag represented by the given CPE name entry is affected by some CVE then you'll be able to follow a provided link to that CVE."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:295
msgid "We will be asking the NVD CPE team to update the list as well as link Quarkus CPE name entries with the related CVEs on a regular basis.  If you work with the link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] which is using NVD feeds to detect the vulnerabilities at the application build time and see a false positive reported then please re-open link:https://github.com/quarkusio/quarkus/issues/2611[this issue] and provide the details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:297
msgid "You can add `OWASP Dependency Check Plugin` to your project's `pom.xml` like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security.adoc:305
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.owasp</groupId>\n"
"    <artifactId>dependency-check-maven</artifactId>\n"
"    <version>${owasp-dependency-check-plugin.version}</version>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:308
msgid "where `owasp-dependency-check-plugin.version` should be set to `7.1.1` or later."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:310
msgid "You can configure the plugin like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security.adoc:326
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.owasp</groupId>\n"
"    <artifactId>dependency-check-maven</artifactId>\n"
"    <version>${owasp-dependency-check-plugin.version}</version>\n"
"    <configuration>\n"
"        <!-- Fail only when detecting High Vulnerability issues -->\n"
"        <failBuildOnCVSS>7</failBuildOnCVSS>\n"
"        <suppressionFiles>\n"
"            <suppressionFile>${project.basedir}/dependency-cpe-suppression.xml</suppressionFile>\n"
"        </suppressionFiles>\n"
"    </configuration>\n"
"</plugin>\n"
"---- \n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security.adoc:328
#, no-wrap
msgid "You can change `failBuildOnCVSS` value to detect less severe issues as well.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security.adoc:331
#, no-wrap
msgid ""
"A suppression list may vary depending on whether you'd like to keep checking the false positives to avoid missing something or not.\n"
"For example, it can look like this:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security.adoc:333
#, no-wrap
msgid "[source,xml]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security.adoc:396
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.2.xsd\">\n"
"    <!--\n"
"        This is a CPE suppression file for the maven dependency check plugin.\n"
"        Each CPE that is found by error (false positive) needs to be suppressed for a specific jar using it's GAV.\n"
"        See https://jeremylong.github.io/DependencyCheck/general/suppression.html\n"
"     -->\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for netty-tcnative-classes to netty\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.netty:netty-tcnative-classes.*:.*$</gav>\n"
"        <cpe>cpe:/a:netty:netty</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Quarkus Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.quarkus:quarkus-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:smallrye-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:vertx-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for graal-sdk to GraalVM (the JVM distribution)\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^org\\.graalvm\\.sdk:graal-sdk:.*$</gav>\n"
"        <cpe>cpe:/a:oracle:graalvm</cpe>\n"
"    </suppress>\n"
"</suppressions>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security.adoc:399
#, no-wrap
msgid "Such a suppression list has to be carefully prepared and revisited from time to time. You should consider making individual suppressions time limited by adding an `until` attribute, for example: `<suppress until=\"2022-01-01Z\">...</suppress>`. It will let you doublecheck that only the same known false positives are reported when the suppression period expires, and after reviewing the report you can set a new expiry date.\n"
msgstr ""
