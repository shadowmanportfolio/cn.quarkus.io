# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-12 02:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/validation.adoc:6
#, no-wrap
msgid "Validation with Hibernate Validator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:14
msgid "This guide covers how to use Hibernate Validator/Bean Validation for:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:16
msgid "validating the input/output of your REST services;"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:17
msgid "validating the parameters and return values of the methods of your business services."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:22
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:27
msgid "The application built in this guide is quite simple. The user fills a form on a web page.  The web page sends the form content to the `BookResource` as JSON (using Ajax). The `BookResource` validates the user input and returns the _result_ as JSON."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:29
msgid "image:validation-guide-architecture.png[alt=Architecture]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:30
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:34
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:36
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:38
msgid "The solution is located in the `validation-quickstart` link:{quickstarts-tree-url}/validation-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:39
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:42
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:48
msgid "This command generates a Maven structure importing the RESTEasy Reactive/Jakarta REST, Jackson and Hibernate Validator/Bean Validation extensions."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:51
msgid "If you already have your Quarkus project configured, you can add the `hibernate-validator` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:56
msgid "The result of this command is dependent on your build tool:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/validation.adoc:58
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:64
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-validator</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/validation.adoc:67
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:70
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-hibernate-validator\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:72
#, no-wrap
msgid "Constraints"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:76
msgid "In this application, we are going to test an elementary object, but we support complicated constraints and can validate graphs of objects.  Create the `org.acme.validation.Book` class with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:80
#: upstream/_versions/main/guides/validation.adoc:107
#: upstream/_versions/main/guides/validation.adoc:211
#, no-wrap
msgid "package org.acme.validation;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:83
#, no-wrap
msgid ""
"import jakarta.validation.constraints.NotBlank;\n"
"import jakarta.validation.constraints.Min;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:85
#: upstream/_versions/main/guides/validation.adoc:443
#, no-wrap
msgid "public class Book {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:88
#, no-wrap
msgid ""
"    @NotBlank(message=\"Title may not be blank\")\n"
"    public String title;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:91
#, no-wrap
msgid ""
"    @NotBlank(message=\"Author may not be blank\")\n"
"    public String author;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:95
#, no-wrap
msgid ""
"    @Min(message=\"Author has been very lazy\", value=1)\n"
"    public double pages;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:99
msgid "Constraints are added on fields, and when an object is validated, the values are checked.  The getter and setter methods are also used for JSON mapping."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:100
#, no-wrap
msgid "JSON mapping and validation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:103
msgid "Create the following REST resource as `org.acme.validation.BookResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:112
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:115
#, no-wrap
msgid ""
"@Path(\"/books\")\n"
"public class BookResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:118
#, no-wrap
msgid ""
"    @Inject\n"
"    Validator validator; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:130
#, no-wrap
msgid ""
"    @Path(\"/manual-validation\")\n"
"    @POST\n"
"    public Result tryMeManualValidation(Book book) {\n"
"        Set<ConstraintViolation<Book>> violations = validator.validate(book);\n"
"        if (violations.isEmpty()) {\n"
"            return new Result(\"Book is valid! It was validated by manual validation.\");\n"
"        } else {\n"
"            return new Result(violations);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:132
msgid "The `Validator` instance is injected via CDI."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:134
msgid "Yes it does not compile, `Result` is missing, but we will add it very soon."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:136
msgid "The method parameter (`book`) is created from the JSON payload automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:141
msgid "The method uses the `Validator` instance to check the payload.  It returns a set of violations.  If this set is empty, it means the object is valid.  In case of failures, the messages are concatenated and sent back to the browser."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:143
msgid "Let's now create the `Result` class as an inner class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:147
#, no-wrap
msgid "public static class Result {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:152
#, no-wrap
msgid ""
"    Result(String message) {\n"
"        this.success = true;\n"
"        this.message = message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:159
#, no-wrap
msgid ""
"    Result(Set<? extends ConstraintViolation<?>> violations) {\n"
"        this.success = false;\n"
"        this.message = violations.stream()\n"
"             .map(cv -> cv.getMessage())\n"
"             .collect(Collectors.joining(\", \"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:162
#, no-wrap
msgid ""
"    private String message;\n"
"    private boolean success;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:166
#, no-wrap
msgid ""
"    public String getMessage() {\n"
"        return message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:170
#, no-wrap
msgid ""
"    public boolean isSuccess() {\n"
"        return success;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:172
#: upstream/_versions/main/guides/validation.adoc:452
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:176
msgid "The class is very simple and only contains 2 fields and the associated getters and setters.  Because we indicate that we produce JSON, the mapping to JSON is made automatically."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:177
#, no-wrap
msgid "REST end point validation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:183
msgid "While using the `Validator` manually might be useful for some advanced usage, if you simply want to validate the parameters or the return value or your REST end point, you can annotate it directly, either with constraints (`@NotNull`, `@Digits`...)  or with `@Valid` (which will cascade the validation to the bean)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:185
msgid "Let's create an end point validating the `Book` provided in the request:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:195
#, no-wrap
msgid ""
"@Path(\"/end-point-method-validation\")\n"
"@POST\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public Result tryMeEndPointMethodValidation(@Valid Book book) {\n"
"    return new Result(\"Book is valid! It was validated by end point method validation.\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:198
msgid "As you can see, we don't have to manually validate the provided `Book` anymore as it is automatically validated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:201
msgid "If a validation error is triggered, a violation report is generated and serialized as JSON as our end point produces a JSON output.  It can be extracted and manipulated to display a proper error message."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:202
#, no-wrap
msgid "Service method validation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:205
msgid "It might not always be handy to have the validation rules declared at the end point level as it could duplicate some business validation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:207
msgid "The best option is then to annotate a method of your business service with your constraints (or in our particular case with `@Valid`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:214
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.validation.Valid;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:217
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class BookService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:222
#, no-wrap
msgid ""
"    public void validateBook(@Valid Book book) {\n"
"        // your business logic here\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:225
msgid "Calling the service in your rest end point triggers the `Book` validation automatically:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:229
#, no-wrap
msgid "@Inject BookService bookService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:240
#, no-wrap
msgid ""
"@Path(\"/service-method-validation\")\n"
"@POST\n"
"public Result tryMeServiceMethodValidation(Book book) {\n"
"    try {\n"
"        bookService.validateBook(book);\n"
"        return new Result(\"Book is valid! It was validated by service method validation.\");\n"
"    } catch (ConstraintViolationException e) {\n"
"        return new Result(e.getConstraintViolations());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:244
msgid "Note that, if you want to push the validation errors to the frontend, you have to catch the exception and push the information yourselves as they will not be automatically pushed to the JSON output."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:246
msgid "Keep in mind that you usually don't want to expose to the public the internals of your services"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:247
msgid "and especially not the validated value contained in the violation object."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:248
#, no-wrap
msgid "A frontend"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:253
msgid "Now let's add the simple web page to interact with our `BookResource`.  Quarkus automatically serves static resources contained in the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, replace the `index.html` file with the content from this link:{quickstarts-blob-url}/validation-quickstart/src/main/resources/META-INF/resources/index.html[index.html] file in it."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:254
#, no-wrap
msgid "Run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:257
msgid "Now, let's see our application in action. Run it with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:261
msgid "Then, open your browser to http://localhost:8080/:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:263
msgid "Enter the book details (valid or invalid)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:264
msgid "Click on the _Try me..._ buttons to check if your data is valid using one of the methods we presented above."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:266
msgid "image:validation-guide-screenshot.png[alt=Application]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:268
msgid "The application can be packaged using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:272
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:274
msgid "You can also build the native executable using:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:277
#, no-wrap
msgid "Going further"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/validation.adoc:279
#, no-wrap
msgid "Hibernate Validator extension and CDI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:282
msgid "The Hibernate Validator extension is tightly integrated with CDI."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/validation.adoc:283
#, no-wrap
msgid "Configuring the ValidatorFactory"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:286
msgid "Sometimes, you might need to configure the behavior of the `ValidatorFactory`, for instance to use a specific `ParameterNameProvider`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:289
msgid "While the `ValidatorFactory` is instantiated by Quarkus itself, you can very easily tweak it by declaring replacement beans that will be injected in the configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:291
msgid "If you create a bean of the following types in your application, it will automatically be injected into the `ValidatorFactory` configuration:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:293
msgid "`jakarta.validation.ClockProvider`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:294
msgid "`jakarta.validation.ConstraintValidator`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:295
msgid "`jakarta.validation.ConstraintValidatorFactory`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:296
msgid "`jakarta.validation.MessageInterpolator`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:297
msgid "`jakarta.validation.ParameterNameProvider`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:298
msgid "`jakarta.validation.TraversableResolver`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:299
msgid "`org.hibernate.validator.spi.properties.GetterPropertySelectionStrategy`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:300
msgid "`org.hibernate.validator.spi.nodenameprovider.PropertyNodeNameProvider`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:301
msgid "`org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:303
msgid "You don't have to wire anything."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/validation.adoc:307
msgid "Obviously, for each listed type, you can declare only one bean."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/validation.adoc:309
msgid "Most of the time, these beans should be declared as `@ApplicationScoped`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/validation.adoc:313
msgid "However, in the case of ``ConstraintValidator``s that are dependent of attributes of the constraint annotation (typically when implementing the `initialize(A constraintAnnotation)` method), use the `@Dependent` scope to make sure each annotation context has a separate instance of the `ConstraintValidator` bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:317
msgid "If customizing the `ValidatorFactory` through the available configuration properties and the CDI beans above doesn't cover your requirements, you can customize it further by registering `ValidatorFactoryCustomizer` beans."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:319
msgid "For instance, you could override the built-in validator enforcing the `@Email` constraint and use `MyEmailValidator` instead with the following class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:324
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyEmailValidatorFactoryCustomizer implements ValidatorFactoryCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:328
#, no-wrap
msgid ""
"    @Override\n"
"    public void customize(BaseHibernateValidatorConfiguration<?> configuration) {\n"
"        ConstraintMapping constraintMapping = configuration.createConstraintMapping();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:333
#, no-wrap
msgid ""
"        constraintMapping\n"
"                .constraintDefinition(Email.class)\n"
"                .includeExistingValidators(false)\n"
"                .validatedBy(MyEmailValidator.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:337
#, no-wrap
msgid ""
"        configuration.addMapping(constraintMapping);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:341
msgid "All beans implementing `ValidatorFactoryCustomizer` are applied, meaning you can have several of them.  If you need to enforce some ordering, you can use the usual `@jakarta.annotation.Priority` annotation - beans with higher priority are applied first."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/validation.adoc:342
#, no-wrap
msgid "Constraint validators as beans"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:345
msgid "You can declare your constraint validators as CDI beans:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:350
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyConstraintValidator implements ConstraintValidator<MyConstraint, String> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:353
#, no-wrap
msgid ""
"    @Inject\n"
"    MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:359
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isValid(String value, ConstraintValidatorContext context) {\n"
"        if (value == null) {\n"
"            return true;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:363
#, no-wrap
msgid ""
"        return service.validate(value);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:367
msgid "When initializing a constraint validator of a given type, Quarkus will check if a bean of this type is available and, if so, it will use it instead of instantiating a `ConstraintValidator`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:369
msgid "Thus, as demonstrated in our example, you can fully use injection in your constraint validator beans."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/validation.adoc:373
msgid "The scope you choose for your `ConstraintValidator` bean is important:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/validation.adoc:375
msgid "If the same instance of the `ConstraintValidator` bean can be used across the whole application, use the `@ApplicationScoped` scope."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/validation.adoc:376
msgid "If the `ConstraintValidator` bean implements the `initialize(A constraintAnnotation)` method and depends on the state of the constraint annotation, use the `@Dependent` scope to make sure each annotation context has a separate and properly configured instance of the `ConstraintValidator` bean."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/validation.adoc:378
#, no-wrap
msgid "Validation and localization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:381
msgid "By default, constraint violation messages will be returned in the build system locale."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:383
msgid "You can configure this behavior by adding the following configuration in your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:388
#, no-wrap
msgid ""
"# The default locale to use\n"
"quarkus.default-locale=fr-FR\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:393
msgid "If you are using RESTEasy Reactive or RESTEasy Classic, in the context of a Jakarta REST endpoint, Hibernate Validator will automatically resolve the optimal locale to use from the `Accept-Language` HTTP header, provided the supported locales have been properly specified in the `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:398
#, no-wrap
msgid ""
"# The list of all the supported locales\n"
"quarkus.locales=en-US,es-ES,fr-FR\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:401
msgid "A similar mechanism exists for GraphQL services based on the `quarkus-smallrye-graphql` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:403
msgid "If this default mechanism is not sufficient and you need a custom locale resolution, you can add additional ``org.hibernate.validator.spi.messageinterpolation.LocaleResolver``s:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:405
msgid "Any CDI bean implementing `org.hibernate.validator.spi.messageinterpolation.LocaleResolver` will be taken into account."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:406
msgid "The ``LocaleResolver``s are consulted in the order of `@Priority` (higher priority goes first)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:407
msgid "A `LocaleResolver` may return null if it cannot resolve the locale, it will then be ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:408
msgid "The first non-null locale returned by a `LocaleResolver` is the one resolved."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/validation.adoc:409
#, no-wrap
msgid "Validation groups for REST endpoint or service method validation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:413
msgid "It is sometimes necessary to enable different validation constraints for the same class when it's passed to a different method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:418
msgid "For example, a `Book` may need to have a `null` identifier when passed to the `post` method (because the identifier will be generated), but a non-`null` identifier when passed to the `put` method (because the method needs the identifier to know what to update)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:421
msgid "To address this, you can take advantage of validation groups.  Validation groups are markers that you put on your constraints in order to enable or disable them at will."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:423
msgid "First, define the `Post` and `Put` groups, which are just Java interfaces."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:432
#, no-wrap
msgid ""
"public interface ValidationGroups {\n"
"    interface Post extends Default { // <1>\n"
"    }\n"
"    interface Put extends Default { // <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:437
msgid "Make the custom groups extend the `Default` group.  This means that whenever these groups are enabled, the `Default` group is also enabled.  This is useful if you have constraints that you want validated in both the `Post` and `Put` method: you can simply use the default group on those constraints, like on the `title` property below."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:439
msgid "Then add the relevant constraints to `Book`, assigning the right group to each constraint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:447
#, no-wrap
msgid ""
"    @Null(groups = ValidationGroups.Post.class)\n"
"    @NotNull(groups = ValidationGroups.Put.class)\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:450
#, no-wrap
msgid ""
"    @NotBlank\n"
"    public String title;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:455
msgid "Finally, add a `@ConvertGroup` annotation next to your `@Valid` annotation in your validated method."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:464
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@POST\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public void post(@Valid @ConvertGroup(to = ValidationGroups.Post.class) Book book) { // <1>\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/validation.adoc:471
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@PUT\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public void put(@Valid @ConvertGroup(to = ValidationGroups.Put.class) Book book) { // <2>\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:475
msgid "Enable the `Post` group, meaning only constraints assigned to the `Post` (and `Default`) groups will be validated for the `book` parameter of the `post` method.  In this case, it means `Book.id` must be `null` and `Book.title` must not be blank."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:478
msgid "Enable the `Put` group, meaning only constraints assigned to the `Put` (and `Default`) groups will be validated for the `book` parameter of the `put` method.  In this case, it means `Book.id` must not be `null` and `Book.title` must not be blank."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:479
#, no-wrap
msgid "Limitations"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/validation.adoc:481
#, no-wrap
msgid "META-INF/validation.xml"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:484
msgid "Configuring the `ValidatorFactory` using a `META-INF/validation.xml` file is *NOT* supported in Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:487
msgid "At the moment, Hibernate Validator does not expose an API to extract the information from this file so that we could register the appropriate classes for reflection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:489
msgid "To configure the `ValidatorFactory`, use the exposed configuration properties and the CDI integration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:491
msgid "Consequently, the only way to define constraints in Quarkus is by annotating your classes."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/validation.adoc:492
#, no-wrap
msgid "ValidatorFactory and native executables"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:497
msgid "Quarkus provides a default `ValidatorFactory` that you can customize using configuration properties.  This `ValidatorFactory` is carefully initialized to support native executables using a bootstrap that is Quarkus-specific."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:503
msgid "Creating a `ValidatorFactory` by yourself it not supported in native executables and if you try to do so, you will get an error similar to `jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.` when running your native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:506
msgid "Thus why you should always use the Quarkus-managed `ValidatorFactory` by injecting an instance of `ValidatorFactory` or directly an instance of `Validator` using CDI injection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/validation.adoc:510
msgid "To support some external libraries that are creating a `ValidatorFactory` using the default bootstrap, Quarkus returns the `ValidatorFactory` managed by Quarkus when `Validation.buildDefaultValidatorFactory()` is called."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/validation.adoc:512
#, no-wrap
msgid "Hibernate Validator Configuration Reference"
msgstr ""
