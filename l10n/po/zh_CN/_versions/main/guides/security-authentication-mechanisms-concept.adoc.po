# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-25 02:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:2
#, no-wrap
msgid "Authentication mechanisms in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:9
msgid "The Quarkus Security framework supports multiple authentication mechanisms, which you can use to secure your applications.  Some of the supported authentication mechanisms are built into Quarkus and some require you to add an extension.  You can also combine authentication mechanisms."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:11
msgid "Before you choose an authentication mechanism for securing your Quarkus applications, review the information provided."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:12
#, no-wrap
msgid "Built-in authentication support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:15
msgid "Quarkus Security provides the following built-in authentication mechanisms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:17
msgid "xref:security-basic-authentication-concept.adoc[Basic authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:18
msgid "<<Form-based authentication>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:19
msgid "<<mutual TLS authentication>>"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:20
#, no-wrap
msgid "Basic authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:23
msgid "You can secure your Quarkus application endpoints with the built-in HTTP Basic authentication mechanism. For more information, see xref:security-basic-authentication-concept.adoc[Basic authentication]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:25
#, no-wrap
msgid "Form-based authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:30
msgid "Quarkus provides form-based authentication that works in a similar manner to traditional Servlet form-based auth.  Unlike traditional form authentication, the authenticated user is not stored in an HTTP session, as Quarkus does not provide clustered HTTP session support.  Instead, the authentication information is stored in an encrypted cookie, which can be read by all members of the cluster (provided they all share the same encryption key)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:35
msgid "To apply encryption, add the `quarkus.http.auth.session.encryption-key` property, and ensure that the value you set is at least 16 characters long.  This key is hashed using SHA-256.  The resulting digest is used as a key for AES-256 encryption of the cookie value.  The cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their clocks synchronized. At one-minute intervals, a new cookie gets generated with an updated expiry time if the session is in use."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:37
msgid "Single Page Application (SPA) typically wants to avoid redirects, which can be done by removing default page paths, as outlined in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:42
#, no-wrap
msgid ""
"# do not redirect, respond with HTTP 200 OK\n"
"quarkus.http.auth.form.landing-page=\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:46
#, no-wrap
msgid ""
"# do not redirect, respond with HTTP 401 Unauthorized\n"
"quarkus.http.auth.form.login-page=\n"
"quarkus.http.auth.form.error-page=\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:49
msgid "The following properties can be used to configure form-based authentication:"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:53
#, no-wrap
msgid "Mutual TLS authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:56
msgid "Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:58
msgid "To use this authentication method, you should first enable SSL for your application. For more details, check the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:62
msgid "Once your application is accepting secure connections, the next step is to configure a `quarkus.http.ssl.certificate.trust-store-file` holding all the certificates that your application should trust as well as how your application should ask for certificates when a client (e.g.: browser or another service) tries to access one of its protected resources."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:70
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks            <1>\n"
"quarkus.http.ssl.certificate.key-store-password=the_key_store_secret\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks        <2>\n"
"quarkus.http.ssl.certificate.trust-store-password=the_trust_store_secret\n"
"quarkus.http.ssl.client-auth=required                                      <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:73
#, no-wrap
msgid ""
"quarkus.http.auth.permission.default.paths=/*                              <4>\n"
"quarkus.http.auth.permission.default.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:75
msgid "Configures a key store where the server's private key is located."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:76
msgid "Configures a trust store from where the trusted certificates are going to be loaded from."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:79
msgid "Defines that the server should *always* ask certificates from clients. You can relax this behavior by using `REQUEST` so that the server should still accept requests without a certificate. Useful when you are also supporting authentication methods other than mTLS."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:80
msgid "Defines a policy where only authenticated users should have access to resources from your application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:83
msgid "Once the incoming request matches a valid certificate in the truststore, your application should be able to obtain the subject by just injecting a `SecurityIdentity` as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:85
#, no-wrap
msgid "Obtaining the subject"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:90
#, no-wrap
msgid ""
"@Inject\n"
"SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:96
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello() {\n"
"    return String.format(\"Hello, %s\", identity.getPrincipal().getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:99
msgid "You should also be able to get the certificate as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:101
#, no-wrap
msgid "Obtaining the certificate"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:106
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:109
#, no-wrap
msgid ""
"CertificateCredential credential = identity.getCredential(CertificateCredential.class);\n"
"X509Certificate certificate = credential.getCertificate();\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:111
#, no-wrap
msgid "Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:115
msgid "The information from the client certificate can be used to enhance Quarkus `SecurityIdentity`. For example, you can add new roles after checking a client certificate subject name, and so on.  For more information about customizing Quarkus `SecurityIdentity`, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization] in the \"Security customization\" topic."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:116
#, no-wrap
msgid "Other supported authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:119
msgid "Quarkus Security also supports the following authentication mechanisms through extensions:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:121
msgid "<<WebAuthn authentication>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:122
msgid "<<OpenID Connect authentication>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:123
msgid "<<SmallRye JWT authentication>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:124
msgid "<<OAuth2 authentication>>"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:125
#, no-wrap
msgid "WebAuthn authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:130
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism that replaces passwords.  When you write a service for registering new users, or logging them in, instead of asking for a password, you can use WebAuthn, which replaces the password.  For more information, see xref:security-webauthn.adoc[Secure a Quarkus application by using the WebAuthn authentication mechanism]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:132
#, no-wrap
msgid "OpenID Connect authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:135
msgid "OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol. OIDC enables client applications to verify the identity of a user based on the authentication performed by the OIDC provider and to retrieve basic information about that user."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:140
msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer Token and Authorization Code Flow authentication mechanisms.  The Bearer Token mechanism extracts the token from the HTTP Authorization header.  The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the identity of the user.  After the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code that was granted for the ID, access, and refresh tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:143
msgid "You can verify ID and access JWT tokens by using the refreshable JSON Web Key (JWK) set or you can introspect them remotely.  However, opaque (binary) tokens can only be introspected remotely."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:147
msgid "Using the Quarkus OIDC extension, both Bearer Token and Authorization Code Flow mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:149
#, no-wrap
msgid "Additional Quarkus resources for OIDC authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:152
msgid "For more information about OIDC authentication and authorization methods you can use to secure your Quarkus applications, see the following detailed resources:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:155
#, no-wrap
msgid "OIDC topic"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:156
#, no-wrap
msgid "Quarkus information resource"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:156
#, no-wrap
msgid "Bearer Token authentication mechanis"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:157
#, no-wrap
msgid "xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:157
#, no-wrap
msgid "Authorization Code Flow authentication mechanis"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:158
#, no-wrap
msgid "xref:security-openid-connect-web-authentication.adoc[OpenID Connect (OIDC) authorization code flow mechanism]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:158
#, no-wrap
msgid "Multiple tenants that can support Bearer Token or Authorization Code Flow mechanism"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:159
#, no-wrap
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect (OIDC) multi-tenancy]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:159
#, no-wrap
msgid "Using Keycloak to centralize authorization"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:160
#, no-wrap
msgid "xref:security-keycloak-authorization.adoc[Using OpenID Connect (OIDC) and Keycloak to centralize authorization]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:160
#, no-wrap
msgid "Configuring Keycloak programmatically"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:161
#, no-wrap
msgid "xref:security-keycloak-admin-client.adoc[Using the Keycloak admin client]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:167
msgid "If you need to enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time and then re-enable it at runtime by using a system property.  For more information about managing the individual tenant configurations in multitenant OIDC deployments, see the _Disabling tenant configurations_ section in the xref:security-openid-connect-multitenancy.adoc#disable-tenant[Using OpenID Connect (OIDC) multi-tenancy] guide."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:169
#, no-wrap
msgid "OpenID Connect client and filters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:172
msgid "The `quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers that support the following token grants:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:173
msgid "`client-credentials`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:174
msgid "`password`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:175
msgid "`refresh_token`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:179
msgid "The `quarkus-oidc-client-filter` extension requires the `quarkus-oidc-client` extension and provides JAX-RS `OidcClientRequestFilter`, which sets the access token acquired by `OidcClient` as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint.  For example, it can be a public endpoint, or it can be protected with mTLS."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:183
msgid "In this scenario, you do not need to protect your Quarkus endpoint by using the Quarkus OpenID Connect adapter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:188
msgid "The `quarkus-oidc-token-propagation` extension requires the `quarkus-oidc` extension and provides JAX-RS `TokenCredentialRequestFilter`, which sets the OpenID Connect Bearer or Authorization Code Flow access token as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, which in turn must be protected by using the Quarkus OpenID Connect adapter.  This filter can be used to propagate the access token to the downstream services."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:190
msgid "For more information, see the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference] guides."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:192
#, no-wrap
msgid "SmallRye JWT authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:195
msgid "The `quarkus-smallrye-jwt` extension provides a MicroProfile JSON Web Token (JWT) 1.2.1 implementation and multiple options to verify signed and encrypted `JWT` tokens and represents them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:198
msgid "`quarkus-smallrye-jwt` is an alternative to the `quarkus-oidc` Bearer Token authentication mechanism, and verifies only `JWT` tokens by using either PEM keys or the refreshable `JWK` key set.  `quarkus-smallrye-jwt` also provides the JWT generation API, which you can use to easily create `signed`, `inner-signed`, and `encrypted` `JWT` tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:200
msgid "For more information, see xref:security-jwt.adoc[Using SmallRye JWT role-based access control]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:201
#, no-wrap
msgid "OAuth2 authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:205
msgid "`quarkus-elytron-security-oauth2` provides an alternative to the `quarkus-oidc` Bearer Token authentication mechanism. `quarkus-elytron-security-oauth2` is based on `Elytron` and is primarily intended for introspecting opaque tokens remotely.  For more information, see xref:security-oauth2.adoc[Using OAuth2]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:208
#, no-wrap
msgid "Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:211
msgid "Use the following information to help you to decide which authentication mechanism to use to secure your Quarkus applications:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:214
msgid "`quarkus-oidc` requires an OpenID Connect provider such as Keycloak, which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow.  In both cases, `quarkus-oidc` requires a connection to the specified OpenID Connect provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:217
msgid "If the user authentication requires Authorization Code flow or you need to support multiple tenants, use `quarkus-oidc`.  `quarkus-oidc` can also request user information by using both Authorization Code Flow and Bearer access tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:219
msgid "If your Bearer tokens must be verified, use `quarkus-oidc`, `quarkus-smallrye-jwt`, or `quarkus-elytron-security-oauth2`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:222
msgid "If your Bearer tokens are in a JWT format, you can use either of the three extensions. Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenID Connect provider rotates the keys.  Therefore, if remote token introspection must be avoided or is unsupported by the providers, use `quarkus-oidc` or `quarkus-smallrye-jwt` for verifying JWT tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:225
msgid "If you need to introspect the JWT tokens remotely, you can use either `quarkus-oidc` or `quarkus-elytron-security-oauth2` because they support the verification of the opaque or binary tokens by using remote introspection.  `quarkus-smallrye-jwt` does not support the remote introspection of both opaque or JWT tokens but instead relies on the locally available keys that are usually retrieved from the OpenID Connect provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:228
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` support the injecting of JWT and opaque tokens into the endpoint code.  Injected JWT tokens provide more information about the user. All extensions can have the tokens injected as `Principal`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:230
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. `quarkus-oidc` uses only the JWK-formatted keys that are part of a JWK set, whereas `quarkus-smallrye-jwt` supports PEM keys."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:233
msgid "`quarkus-smallrye-jwt` handles locally signed, inner-signed-and-encrypted, and encrypted tokens.  While `quarkus-oidc` and `quarkus-elytron-security-oauth2` can also verify such tokens but treats them as opaque tokens and verifies them through remote introspection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:235
msgid "If you need a lightweight library for the remote introspection of opaque or JWT tokens, use `quarkus-elytron-security-oauth2`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:242
msgid "Your decision to choose whether to use opaque or JWT token format will be driven by architectural considerations.  Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.  Opaque tokens are effectively database pointers.  JWT tokens are significantly longer than the opaque tokens but the providers are effectively delegating storing most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:245
msgid "The following table provides a summary of the options for each authentication mechanism:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:247
#, no-wrap
msgid "quarkus-oidc"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:247
#, no-wrap
msgid "quarkus-smallrye-jwt"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:249
#, no-wrap
msgid "quarkus-elytron-security-oauth2"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:250
#, no-wrap
msgid "Requires Bearer JWT verification"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:251
#, no-wrap
msgid "Local verification or introspection"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:252
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:292
#, no-wrap
msgid "Local verification"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:253
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:255
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:257
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:291
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:293
#, no-wrap
msgid "Introspection"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:254
#, no-wrap
msgid "Requires Bearer opaque token verification"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:256
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:261
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:269
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:272
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:273
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:276
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:277
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:280
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:281
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:283
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:285
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:287
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:289
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:295
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:297
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:299
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:301
#, no-wrap
msgid "No"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:258
#, no-wrap
msgid "Refreshing `JsonWebKey` set for verifying JWT tokens"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:259
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:260
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:263
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:264
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:265
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:267
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:268
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:271
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:275
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:279
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:284
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:300
#, no-wrap
msgid "Yes"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:262
#, no-wrap
msgid "Represent token as `Principal`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:266
#, no-wrap
msgid "Inject JWT as MP JSON Web Token (JWT)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:270
#, no-wrap
msgid "Authorization Code Flow"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:274
#, no-wrap
msgid "Multi-tenancy"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:278
#, no-wrap
msgid "User info support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:282
#, no-wrap
msgid "PEM key format support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:286
#, no-wrap
msgid "SecretKey support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:288
#, no-wrap
msgid "In JSON Web Key (JWK) format"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:290
#, no-wrap
msgid "Inner-signed and encrypted or encrypted tokens"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:294
#, no-wrap
msgid "Custom token verification"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:296
#, no-wrap
msgid "With injected JWT parser"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:298
#, no-wrap
msgid "Accept JWT as a cookie"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:303
#, no-wrap
msgid "Combining authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:307
msgid "If the user credentials are provided by different sources, you can combine authentication mechanisms.  For example, you can combine built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:311
msgid "You cannot combine the `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms because both mechanisms attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:313
#, no-wrap
msgid "Path-specific authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:316
msgid "The following configuration example demonstrates how you can enforce a single selectable authentication mechanism for a given request path:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:321
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:325
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:329
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:332
msgid "Ensure that the value of the `auth-mechanism` property matches the authentication scheme supported by `HttpAuthenticationMechanism`, for example, `basic`, `bearer`, or `form`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:333
#, no-wrap
msgid "Proactive authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:336
msgid "Proactive authentication is enabled in Quarkus by default. This means that if an incoming request has a credential then that request will always be authenticated, even if the target page does not require authentication.  For more information, see xref:security-proactive-authentication-concept.adoc[Proactive authentication]."
msgstr ""
