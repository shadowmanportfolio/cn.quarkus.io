# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-05 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:7
#, no-wrap
msgid "Authentication mechanisms in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:15
msgid "The Quarkus Security framework supports multiple authentication mechanisms, which you can use to secure your applications.  You can also combine authentication mechanisms."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:19
msgid "Before you choose an authentication mechanism for securing your Quarkus applications, review the information provided."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:21
#, no-wrap
msgid "Overview of supported authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:25
msgid "Some supported authentication mechanisms are built into Quarkus, while others require you to add an extension.  All of these mechanisms are detailed in the following sections:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:27
msgid "xref:built-in-authentication-mechanisms[Built-in authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:28
msgid "xref:other-supported-authentication-mechanisms[Other supported authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:30
msgid "The following table maps specific authentication requirements to a supported mechanism that you can use in Quarkus:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:31
#, no-wrap
msgid "Authentication requirements and mechanisms"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:34
#, no-wrap
msgid "Authentication requirement"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:36
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:391
#, no-wrap
msgid "Authentication mechanism"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:36
#, no-wrap
msgid "Username and password"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:38
#, no-wrap
msgid "xref:security-basic-authentication.adoc[Basic], xref:form-auth[Form-based authentication]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:38
#, no-wrap
msgid "Bearer access token"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:40
#, no-wrap
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication], xref:security-jwt.adoc[JWT], xref:security-oauth2.adoc[OAuth2]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:40
#, no-wrap
msgid "Single sign-on (SSO)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:42
#, no-wrap
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC Code Flow], xref:form-auth[Form-based authentication]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:42
#, no-wrap
msgid "Client certificate"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:44
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:59
#, no-wrap
msgid "xref:mutual-tls[Mutual TLS authentication]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:44
#, no-wrap
msgid "WebAuthn"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:46
#, no-wrap
msgid "xref:security-webauthn.adoc[WebAuthn]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:46
#, no-wrap
msgid "Kerberos ticket"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:47
#, no-wrap
msgid "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-kerberos/dev/index.html[Kerberos]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:50
msgid "For more information, see the following xref:table[Token authentication mechanism comparison] table."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:52
#, no-wrap
msgid "Built-in authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:55
msgid "Quarkus Security provides the following built-in authentication support:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:57
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:66
msgid "xref:security-basic-authentication.adoc[Basic authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:58
msgid "xref:form-auth[Form-based authentication]"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:60
#, no-wrap
msgid "Basic authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:64
msgid "You can secure your Quarkus application endpoints with the built-in HTTP Basic authentication mechanism.  For more information, see the following documentation:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:67
msgid "xref:security-basic-authentication-howto.adoc[Enable Basic authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:68
msgid "xref:security-jpa.adoc[Quarkus Security with Jakarta Persistence]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:69
msgid "xref:security-getting-started-tutorial.adoc[Getting Started with Security using Basic authentication and Jakarta Persistence]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:70
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:453
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:72
#, no-wrap
msgid "Form-based authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:77
msgid "Quarkus provides form-based authentication that works similarly to traditional Servlet form-based authentication.  Unlike traditional form authentication, the authenticated user is not stored in an HTTP session because Quarkus does not support clustered HTTP sessions.  Instead, the authentication information is stored in an encrypted cookie, which can be read by all cluster members who share the same encryption key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:83
msgid "To apply encryption, add the `quarkus.http.auth.session.encryption-key` property, and ensure the value you set is at least 16 characters long.  The encryption key is hashed by using SHA-256.  The resulting digest is used as a key for AES-256 encryption of the cookie value.  The cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their clocks synchronized.  At one-minute intervals, a new cookie gets generated with an updated expiry time if the session is in use."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:85
msgid "With single-page applications (SPA), you typically want to avoid redirects by removing default page paths, as shown in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:90
#, no-wrap
msgid ""
"# do not redirect, respond with HTTP 200 OK\n"
"quarkus.http.auth.form.landing-page=\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:94
#, no-wrap
msgid ""
"# do not redirect, respond with HTTP 401 Unauthorized\n"
"quarkus.http.auth.form.login-page=\n"
"quarkus.http.auth.form.error-page=\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:97
#, no-wrap
msgid ""
"# HttpOnly must be false if you want to log out on the client; it can be true if logging out from the server\n"
"quarkus.http.auth.form.http-only-cookie=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:101
msgid "Now that you have disabled redirects for the SPA, you must log in and log out programmatically from your client.  Below are examples of JavaScript methods for logging into the `j_security_check` endpoint and logging out of the application by destroying the cookie."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:109
#, no-wrap
msgid ""
"const login = () => {\n"
"    // Create an object to represent the form data\n"
"    const formData = new URLSearchParams();\n"
"    formData.append(\"j_username\", username);\n"
"    formData.append(\"j_password\", password);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:131
#, no-wrap
msgid ""
"    // Make an HTTP POST request using fetch against j_security_check endpoint\n"
"    fetch(\"j_security_check\", {\n"
"        method: \"POST\",\n"
"        body: formData,\n"
"        headers: {\n"
"            \"Content-Type\": \"application/x-www-form-urlencoded\",\n"
"        },\n"
"    })\n"
"    .then((response) => {\n"
"        if (response.status === 200) {\n"
"            // Authentication was successful\n"
"            console.log(\"Authentication successful\");\n"
"        } else {\n"
"            // Authentication failed\n"
"            console.error(\"Invalid credentials\");\n"
"        }\n"
"    })\n"
"    .catch((error) => {\n"
"        console.error(error);\n"
"    });\n"
"};\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:135
msgid "To log out of the SPA from the client, the cookie must be set to `quarkus.http.auth.form.http-only-cookie=false` so you can destroy the cookie and possibly redirect back to your main page."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:142
#, no-wrap
msgid ""
"const logout= () => {\n"
"    // delete the credential cookie, essentially killing the session\n"
"    const removeCookie = `quarkus-credential=; Max-Age=0;path=/`;\n"
"    document.cookie = removeCookie;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:145
#, no-wrap
msgid ""
"    // perform post-logout actions here, such as redirecting back to your login page\n"
"};\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:149
msgid "To log out of the SPA from the server, the cookie can be set to `quarkus.http.auth.form.http-only-cookie=true` and use this example code to destroy the cookie."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:154
#, no-wrap
msgid ""
"@ConfigProperty(name = \"quarkus.http.auth.form.cookie-name\")\n"
"String cookieName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:157
#, no-wrap
msgid ""
"@Inject\n"
"CurrentIdentityAssociation identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:170
#, no-wrap
msgid ""
"@POST\n"
"public Response logout() {\n"
"    if (identity.getIdentity().isAnonymous()) {\n"
"        throw new UnauthorizedException(\"Not authenticated\");\n"
"    }\n"
"    final NewCookie removeCookie = new NewCookie.Builder(cookieName)\n"
"            .maxAge(0)\n"
"            .expiry(Date.from(Instant.EPOCH))\n"
"            .path(\"/\")\n"
"            .build();\n"
"    return Response.noContent().cookie(removeCookie).build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:174
msgid "The following properties can be used to configure form-based authentication:"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:179
#, no-wrap
msgid "Mutual TLS authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:182
msgid "Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:185
msgid "To use this authentication method, you must first enable SSL/TLS for your application.  For more information, see the xref:http-reference.adoc#ssl[Supporting secure connections with SSL/TLS] section of the Quarkus \"HTTP reference\" guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:187
msgid "After your application accepts secure connections, the next step is to configure the `quarkus.http.ssl.certificate.trust-store-file` property with the name of that file that holds all the certificates your application trusts. The specified file also includes information about how your application asks for certificates when a client, such as a browser or other service, tries to access one of its protected resources."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:197
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks            <1>\n"
"quarkus.http.ssl.certificate.key-store-password=the_key_store_secret\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks        <2>\n"
"quarkus.http.ssl.certificate.trust-store-password=the_trust_store_secret\n"
"quarkus.http.ssl.client-auth=required                                      <3>\n"
"quarkus.http.auth.permission.default.paths=/*                              <4>\n"
"quarkus.http.auth.permission.default.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:199
msgid "The keystore where the server's private key is located."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:200
msgid "The truststore from which the trusted certificates are loaded."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:203
msgid "With this value set to `required`, the server requires certificates from clients.  To relax this requirement so that the server accepts requests without a certificate, set the value to `REQUEST`.  This option is useful when you are also supporting authentication methods other than mTLS."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:204
msgid "Defines a policy where only authenticated users should have access to resources from your application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:206
msgid "When the incoming request matches a valid certificate in the truststore, your application can obtain the subject by injecting a `SecurityIdentity` as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:208
#, no-wrap
msgid "Obtaining the subject"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:213
#, no-wrap
msgid ""
"@Inject\n"
"SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:219
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello() {\n"
"    return String.format(\"Hello, %s\", identity.getPrincipal().getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:222
msgid "You can also get the certificate by using the code outlined in the following example:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:223
#, no-wrap
msgid "Obtaining the certificate"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:228
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:231
#, no-wrap
msgid ""
"CertificateCredential credential = identity.getCredential(CertificateCredential.class);\n"
"X509Certificate certificate = credential.getCertificate();\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:233
#, no-wrap
msgid "Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:238
msgid "The information from the client certificate can be used to enhance Quarkus `SecurityIdentity`.  For example, you can add new roles after checking a client certificate subject name, and so on.  For more information about customizing `SecurityIdentity`, see the xref:security-customization.adoc#security-identity-customization[Security identity customization] section in the Quarkus \"Security tips and tricks\" guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:240
#, no-wrap
msgid "Other supported authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:243
msgid "Quarkus Security also supports the following authentication mechanisms through extensions:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:245
msgid "xref:webauthn-authentication[WebAuthn authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:246
msgid "xref:openid-connect-authentication[OpenID Connect authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:247
msgid "xref:smallrye-jwt-authentication[SmallRye JWT authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:248
msgid "xref:oauth2-authentication[OAuth2 authentication]"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:250
#, no-wrap
msgid "WebAuthn authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:255
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism that replaces passwords.  When you write a service for registering new users, or logging them in, instead of asking for a password, you can use WebAuthn, which replaces the password.  For more information, see the xref:security-webauthn.adoc[Secure a Quarkus application by using the WebAuthn authentication mechanism] guide."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:257
#, no-wrap
msgid "OpenID Connect authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:261
msgid "OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol.  OIDC enables client applications to verify the identity of a user based on the authentication performed by the OIDC provider and retrieve basic information about that user."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:266
msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer token and Authorization Code Flow authentication mechanisms.  The Bearer token authentication mechanism extracts the token from the HTTP Authorization header.  The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the user's identity.  After the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code that was granted for the ID, access, and refresh tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:269
msgid "You can verify ID and access JSON Web Token (JWT) tokens by using the refreshable JSON Web Key (JWK) set or introspect them remotely.  However, opaque, also known as binary tokens, can only be introspected remotely."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:273
msgid "Using the Quarkus OIDC extension, both the Bearer token and Authorization Code Flow authentication mechanisms use xref:smallrye-jwt-authentication[SmallRye JWT authentication] to represent JWT tokens as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:275
#, no-wrap
msgid "Additional Quarkus resources for OIDC authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:278
msgid "For more information about OIDC authentication and authorization methods that you can use to secure your Quarkus applications, see the following resources:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:281
#, no-wrap
msgid "OIDC topic"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:282
#, no-wrap
msgid "Quarkus information resource"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:282
#, no-wrap
msgid "Bearer token authentication mechanis"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:283
#, no-wrap
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:283
#, no-wrap
msgid "Authorization Code Flow authentication mechanis"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:284
#, no-wrap
msgid "xref:security-oidc-code-flow-authentication.adoc[OpenID Connect (OIDC) Authorization Code Flow mechanism]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:284
#, no-wrap
msgid "OIDC and SAML Identity broker"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:285
#, no-wrap
msgid "xref:security-oidc-code-flow-authentication.adoc#oidc-saml-broker[OpenID Connect (OIDC) Authorization Code Flow and SAML Identity broker]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:285
#, no-wrap
msgid "Multiple tenants that can support the Bearer token authentication or Authorization Code Flow mechanism"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:286
#, no-wrap
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect (OIDC) multi-tenancy]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:286
#, no-wrap
msgid "Securing Quarkus with commonly-used OpenID Connect provider"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:287
#, no-wrap
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:287
#, no-wrap
msgid "Using Keycloak to centralize authorization"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:288
#, no-wrap
msgid "xref:security-keycloak-authorization.adoc[Using OpenID Connect (OIDC) and Keycloak to centralize authorization]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:288
#, no-wrap
msgid "Configuring Keycloak programmatically"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:289
#, no-wrap
msgid "xref:security-keycloak-admin-client.adoc[Using the Keycloak admin client]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:295
msgid "To enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time.  Then, re-enable it at runtime by using a system property."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:297
msgid "For more information about managing the individual tenant configurations in multitenant OIDC deployments, see the xref:security-openid-connect-multitenancy.adoc#disable-tenant[Disabling tenant configurations] section in the \"Using OpenID Connect (OIDC) multi-tenancy\" guide."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:299
#, no-wrap
msgid "OpenID Connect client and filters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:302
msgid "The `quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers that support the following token grants:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:304
msgid "`client-credentials`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:305
msgid "`password`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:306
msgid "`refresh_token`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:311
msgid "The `quarkus-oidc-client-filter` extension requires the `quarkus-oidc-client` extension.  It provides JAX-RS RESTful Web Services `OidcClientRequestFilter`, which sets the access token acquired by `OidcClient` as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MicroProfile REST client implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint.  For example, it can be a public endpoint or be protected with mTLS."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:315
msgid "In this scenario, you do not need to protect your Quarkus endpoint by using the Quarkus OpenID Connect adapter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:321
msgid "The `quarkus-oidc-token-propagation` extension requires the `quarkus-oidc` extension.  It provides Jakarta REST `TokenCredentialRequestFilter`, which sets the OpenID Connect Bearer token or Authorization Code Flow access token as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MicroProfile REST client implementations injected into the current Quarkus endpoint, which must be protected by using the Quarkus OIDC adapter.  This filter can propagate the access token to the downstream services."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:323
msgid "For more information, see the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference] guides."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:325
#, no-wrap
msgid "SmallRye JWT authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:329
msgid "The `quarkus-smallrye-jwt` extension provides a MicroProfile JSON Web Token (JWT) 2.1 implementation and multiple options to verify signed and encrypted `JWT` tokens.  It represents them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:332
msgid "`quarkus-smallrye-jwt` is an alternative to the `quarkus-oidc` Bearer token authentication mechanism and verifies only `JWT` tokens by using either Privacy Enhanced Mail (PEM) keys or the refreshable `JWK` key set.  `quarkus-smallrye-jwt` also provides the JWT generation API, which you can use to easily create `signed`, `inner-signed`, and `encrypted` `JWT` tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:334
msgid "For more information, see the xref:security-jwt.adoc[Using JWT RBAC] guide."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:336
#, no-wrap
msgid "OAuth2 authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:341
msgid "`quarkus-elytron-security-oauth2` provides an alternative to the Quarkus `quarkus-oidc` Bearer token authentication mechanism extension.  `quarkus-elytron-security-oauth2` is based on `Elytron` and is primarily intended for introspecting opaque tokens remotely.  For more information, see the Quarkus xref:security-oauth2.adoc[Using OAuth2] guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:343
#, no-wrap
msgid "Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:346
msgid "Use the following information to select the appropriate token authentication mechanism to secure your Quarkus applications."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:347
#, no-wrap
msgid "List of authentication mechanism use cases"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:351
msgid "`quarkus-oidc` requires an OpenID Connect provider such as Keycloak, which can verify the bearer tokens or authenticate the end users with the Authorization Code flow.  In both cases, `quarkus-oidc` requires a connection to the specified OpenID Connect provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:354
msgid "If the user authentication requires Authorization Code flow, or you need to support multiple tenants, use `quarkus-oidc`.  `quarkus-oidc` can also request user information by using both Authorization Code Flow and Bearer access tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:356
msgid "If your bearer tokens must be verified, use `quarkus-oidc`, `quarkus-smallrye-jwt`, or `quarkus-elytron-security-oauth2`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:360
msgid "If your bearer tokens are in a JSON web token (JWT) format, you can use any extensions in the preceding list.  Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the `JsonWebKey` (JWK) set when the OpenID Connect provider rotates the keys.  Therefore, if remote token introspection must be avoided or is unsupported by the providers, use `quarkus-oidc` or `quarkus-smallrye-jwt` to verify JWT tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:363
msgid "To introspect the JWT tokens remotely, you can use either `quarkus-oidc` or `quarkus-elytron-security-oauth2` because they support verifying the opaque or binary tokens by using remote introspection.  `quarkus-smallrye-jwt` does not support the remote introspection of both opaque or JWT tokens but instead relies on the locally available keys that are usually retrieved from the OpenID Connect provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:367
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` support the JWT and opaque token injection into the endpoint code.  Injected JWT tokens provide more information about the user.  All extensions can have the tokens injected as `Principal`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:370
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`.  `quarkus-oidc` uses only the JWK-formatted keys that are part of a JWK set, whereas `quarkus-smallrye-jwt` supports PEM keys."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:373
msgid "`quarkus-smallrye-jwt` handles locally signed, inner-signed-and-encrypted, and encrypted tokens.  In contrast, although `quarkus-oidc` and `quarkus-elytron-security-oauth2` can also verify such tokens, they treat them as opaque tokens and verify them through remote introspection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:375
msgid "If you need a lightweight library for the remote introspection of opaque or JWT tokens, use `quarkus-elytron-security-oauth2`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:381
msgid "Architectural considerations drive your decision to use opaque or JSON web token (JWT) token format.  Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.  Opaque tokens are effectively database pointers."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:384
msgid "JWT tokens are significantly longer than opaque tokens.  Nonetheless, the providers effectively delegate most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:387
#, no-wrap
msgid "Token authentication mechanism comparison"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:389
#, no-wrap
msgid "Feature required"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:391
#, no-wrap
msgid "`quarkus-oidc`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:391
#, no-wrap
msgid "`quarkus-smallrye-jwt`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:393
#, no-wrap
msgid "`quarkus-elytron-security-oauth2`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:393
#, no-wrap
msgid "Bearer JWT verification"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:393
#, no-wrap
msgid "Local verification or introspection"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:393
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:406
#, no-wrap
msgid "Local verification"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:395
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:396
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:406
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:407
#, no-wrap
msgid "Introspection"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:395
#, no-wrap
msgid "Bearer opaque token verification"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:395
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:397
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:400
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:401
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:402
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:403
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:405
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:406
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:407
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:408
#, no-wrap
msgid "No"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:396
#, no-wrap
msgid "Refreshing `JsonWebKey` set to verify JWT tokens"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:396
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:397
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:398
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:400
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:401
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:402
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:403
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:408
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:409
#, no-wrap
msgid "Yes"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:397
#, no-wrap
msgid "Represent token as `Principal`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:398
#, no-wrap
msgid "Inject JWT as MP JWT"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:400
#, no-wrap
msgid "Authorization code flow"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:401
#, no-wrap
msgid "Multi-tenancy"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:402
#, no-wrap
msgid "User information support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:403
#, no-wrap
msgid "PEM key format support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:405
#, no-wrap
msgid "SecretKey support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:405
#, no-wrap
msgid "In JSON Web Key (JWK) format"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:406
#, no-wrap
msgid "Inner-signed and encrypted or encrypted tokens"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:407
#, no-wrap
msgid "Custom token verification"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:407
#, no-wrap
msgid "With injected JWT parser"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:408
#, no-wrap
msgid "JWT as a cookie support"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:412
#, no-wrap
msgid "Combining authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:416
msgid "If different sources provide the user credentials, you can combine authentication mechanisms.  For example, you can combine the built-in Basic and the Quarkus `quarkus-oidc` Bearer token authentication mechanisms."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:420
msgid "You cannot combine the Quarkus `quarkus-oidc` Bearer token and `smallrye-jwt` authentication mechanisms because both mechanisms attempt to verify the token extracted from the HTTP Bearer token authentication scheme."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:422
#, no-wrap
msgid "Path-specific authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:425
msgid "The following configuration example demonstrates how you can enforce a single selectable authentication mechanism for a given request path:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:430
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:434
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:438
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:441
msgid "Ensure that the value of the `auth-mechanism` property matches the authentication scheme supported by `HttpAuthenticationMechanism`, for example, `basic`, `bearer`, or `form`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:442
#, no-wrap
msgid "Proactive authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:447
msgid "Proactive authentication is enabled in Quarkus by default.  This means that if an incoming request has a credential, the request will always be authenticated, even if the target page does not require authentication.  For more information, see the Quarkus xref:security-proactive-authentication.adoc[Proactive authentication] guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:448
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:451
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:452
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms.adoc:453
msgid "xref:security-authorize-web-endpoints-reference.adoc[Authorization of web endpoints]"
msgstr ""
