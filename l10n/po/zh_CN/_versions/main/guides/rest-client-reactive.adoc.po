# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-24 02:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/rest-client-reactive.adoc:6
#, no-wrap
msgid "Using the REST Client Reactive"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:13
msgid "This guide explains how to use the REST Client Reactive in order to interact with REST APIs.  REST Client Reactive is the REST Client implementation compatible with RESTEasy Reactive."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:16
msgid "If your application uses a client and exposes REST endpoints, please use xref:resteasy-reactive.adoc[RESTEasy Reactive] for the server part."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:21
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:25
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:27
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:29
msgid "The solution is located in the `rest-client-reactive-quickstart` {quickstarts-tree-url}/rest-client-reactive-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:30
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:33
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:39
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:41
msgid "the `resteasy-reactive-jackson` extension for the REST server support. Use `resteasy-reactive` instead if you do not wish to use Jackson;"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:42
msgid "the `rest-client-reactive-jackson` extension for the REST client support. Use `rest-client-reactive` instead if you do not wish to use Jackson"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:45
msgid "If you already have your Quarkus project configured, you can add the `rest-client-reactive-jackson` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:50
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/rest-client-reactive.adoc:52
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1078
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:58
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/rest-client-reactive.adoc:61
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1088
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:64
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-rest-client-reactive-jackson\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:66
#, no-wrap
msgid "Setting up the model"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:70
msgid "In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.  Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:72
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:76
#: upstream/_versions/main/guides/rest-client-reactive.adoc:98
#: upstream/_versions/main/guides/rest-client-reactive.adoc:147
#: upstream/_versions/main/guides/rest-client-reactive.adoc:232
#: upstream/_versions/main/guides/rest-client-reactive.adoc:294
#: upstream/_versions/main/guides/rest-client-reactive.adoc:331
#: upstream/_versions/main/guides/rest-client-reactive.adoc:349
#: upstream/_versions/main/guides/rest-client-reactive.adoc:392
#: upstream/_versions/main/guides/rest-client-reactive.adoc:418
#: upstream/_versions/main/guides/rest-client-reactive.adoc:465
#: upstream/_versions/main/guides/rest-client-reactive.adoc:506
#: upstream/_versions/main/guides/rest-client-reactive.adoc:532
#: upstream/_versions/main/guides/rest-client-reactive.adoc:588
#: upstream/_versions/main/guides/rest-client-reactive.adoc:613
#: upstream/_versions/main/guides/rest-client-reactive.adoc:676
#: upstream/_versions/main/guides/rest-client-reactive.adoc:717
#: upstream/_versions/main/guides/rest-client-reactive.adoc:752
#, no-wrap
msgid "package org.acme.rest.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:78
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:80
#, no-wrap
msgid "public class Extension {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:85
#, no-wrap
msgid ""
"    public String id;\n"
"    public String name;\n"
"    public String shortName;\n"
"    public List<String> keywords;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:87
#: upstream/_versions/main/guides/rest-client-reactive.adoc:175
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:90
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:91
#, no-wrap
msgid "Create the interface"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:94
msgid "Using the REST Client Reactive is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:100
#: upstream/_versions/main/guides/rest-client-reactive.adoc:234
#: upstream/_versions/main/guides/rest-client-reactive.adoc:508
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1061
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:105
#: upstream/_versions/main/guides/rest-client-reactive.adoc:336
#: upstream/_versions/main/guides/rest-client-reactive.adoc:596
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:109
#: upstream/_versions/main/guides/rest-client-reactive.adoc:244
#: upstream/_versions/main/guides/rest-client-reactive.adoc:843
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:113
#: upstream/_versions/main/guides/rest-client-reactive.adoc:343
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:116
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:118
msgid "The purpose of the annotations in the code above is the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:121
msgid "`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:122
msgid "`@Path`, `@GET` and `@QueryParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client-reactive.adoc:127
msgid "When the `quarkus-rest-client-reactive-jackson` extension is installed, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client-reactive.adoc:130
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client-reactive.adoc:136
msgid "The `getById` method above is a blocking call. It should not be invoked on the event loop.  The <<async-support>> section describes how to make non-blocking calls."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:138
#, no-wrap
msgid "Query Parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:143
msgid "The easiest way to specify a query parameter is to annotate a client method parameter with the `@QueryParam` or the `@RestQuery`.  The `@RestQuery` is equivalent of the `@QueryParam`, but with optional name. Additionally, it can be also used to pass query parameters as a `Map`, which is convenient if parameters are not known in advance."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:150
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:157
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import java.util.Map;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:161
#: upstream/_versions/main/guides/rest-client-reactive.adoc:518
#: upstream/_versions/main/guides/rest-client-reactive.adoc:600
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient(configKey = \"extensions-api\")\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:164
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam(\"id\") Integer id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:167
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getByName(@RestQuery String name); <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:170
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getByFilter(@RestQuery Map<String, String> filter); <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:173
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getByFilters(@RestQuery MultivaluedMap<String, String> filters); <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:177
msgid "Request query will include parameter with key `name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:178
msgid "Each `Map` entry represents exactly one query parameter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:179
msgid "`MultivaluedMap` allows you to send array values"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/rest-client-reactive.adoc:180
#, no-wrap
msgid "Using @ClientQueryParam"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:184
msgid "Another way to add query parameters to a request is to use `@io.quarkus.rest.client.reactive.ClientQueryParam` on either the REST client interface or a specific method of the interface.  The annotation can specify the query parameter name while the value can either be a constant, a configuration property or it can be determined by invoking a method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:186
msgid "The following example shows the various possible usages:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:193
#, no-wrap
msgid ""
"@ClientQueryParam(name = \"my-param\", value = \"${my.property-value}\") // <1>\n"
"public interface Client {\n"
"    @GET\n"
"    String getWithParam();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:197
#, no-wrap
msgid ""
"    @GET\n"
"    @ClientQueryParam(name = \"some-other-param\", value = \"other\") // <2>\n"
"    String getWithOtherParam();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:201
#, no-wrap
msgid ""
"    @GET\n"
"    @ClientQueryParam(name = \"param-from-method\", value = \"{with-param}\") // <3>\n"
"    String getFromMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:209
#, no-wrap
msgid ""
"    default String withParam(String name) {\n"
"        if (\"param-from-method\".equals(name)) {\n"
"            return \"test\";\n"
"        }\n"
"        throw new IllegalArgumentException();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:213
msgid "By placing `@ClientQueryParam` on the interface, we ensure that `my-param` will be added to all requests of the client.  Because we used the `${...}` syntax, the actual value of the parameter will be obtained using the `my.property-value` configuration property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:214
msgid "When `getWithOtherParam` is called, in addition to the `my-param` query parameter, `some-other-param` with the value of `other` will also be added."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:215
msgid "when `getFromMethod` is called, in addition to the `my-param` query parameter, `param-from-method` with the value of `test` (because that's what the `withParam` method returns when invoked with `param-from-method`) will also be added."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client-reactive.adoc:220
msgid "Note that if an interface method contains an argument annotated with `@QueryParam``</code>``, that argument will take priority over anything specified in any `@ClientQueryParam` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:223
msgid "More information about this annotation can be found on the javadoc of"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:224
#, no-wrap
msgid "Path Parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:228
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:240
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:249
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream/{stream}\")\n"
"    Set<Extension> getByStream(@PathParam(\"stream\") String stream, @QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:252
#, no-wrap
msgid "Create the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:256
msgid "In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.  The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:261
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".url=https://stage.code.quarkus.io/api # // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:265
msgid "Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.  Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client-reactive` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:267
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:269
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:277
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"extensions-api\")\n"
"public interface ExtensionsService {\n"
"    [...]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:284
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.extensions-api.url=https://stage.code.quarkus.io/api\n"
"quarkus.rest-client.extensions-api.scope=javax.inject.Singleton\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:286
#, no-wrap
msgid "Create the JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:289
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:296
#: upstream/_versions/main/guides/rest-client-reactive.adoc:534
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:300
#: upstream/_versions/main/guides/rest-client-reactive.adoc:620
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:303
#: upstream/_versions/main/guides/rest-client-reactive.adoc:359
#: upstream/_versions/main/guides/rest-client-reactive.adoc:430
#: upstream/_versions/main/guides/rest-client-reactive.adoc:542
#: upstream/_versions/main/guides/rest-client-reactive.adoc:623
#, no-wrap
msgid ""
"@Path(\"/extension\")\n"
"public class ExtensionsResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:306
#, no-wrap
msgid ""
"    @RestClient // <1>\n"
"    ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:314
#: upstream/_versions/main/guides/rest-client-reactive.adoc:374
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:317
msgid "There are two interesting parts in this listing:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:319
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:320
#, no-wrap
msgid "Programmatic client creation with RestClientBuilder"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:325
msgid "Instead of annotating the client with `@RegisterRestClient`, and injecting a client with `@RestClient`, you can also create REST Client programmatically.  You do that with `RestClientBuilder`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:327
msgid "With this approach the client interface could look as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:339
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:346
msgid "And the service as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:351
#: upstream/_versions/main/guides/rest-client-reactive.adoc:420
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.RestClientBuilder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:356
#: upstream/_versions/main/guides/rest-client-reactive.adoc:425
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.net.URI;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:361
#: upstream/_versions/main/guides/rest-client-reactive.adoc:432
#, no-wrap
msgid "    private final ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:367
#, no-wrap
msgid ""
"    public ExtensionsResource() {\n"
"        extensionsService = RestClientBuilder.newBuilder()\n"
"            .baseUri(URI.create(\"https://stage.code.quarkus.io/api\"))\n"
"            .build(ExtensionsService.class);\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:376
#, no-wrap
msgid "Use Custom HTTP Options"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:379
msgid "The REST Client Reactive internally uses https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[the Vert.x HTTP Client] to make the network connections. The REST Client Reactive extensions allows configuring some settings via properties, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:381
msgid "`quarkus.rest-client.client-prefix.connect-timeout` to configure the connect timeout in milliseconds."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:382
msgid "`quarkus.rest-client.client-prefix.max-redirects` to limit the number of redirects."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:384
msgid "However, there are many more options within the Vert.x HTTP Client to configure the connections. See all the options in the Vert.x HTTP Client Options API in https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[this link]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:386
msgid "To fully customize the Vert.x HTTP Client instance that the REST Client Reactive is internally using, you can provide your custom HTTP Client Options instance via CDI or when programmatically creating your client."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:388
msgid "Let's see an example about how to provide the HTTP Client Options via CDI:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:395
#, no-wrap
msgid ""
"import javax.enterprise.inject.Produces;\n"
"import javax.ws.rs.ext.ContextResolver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:398
#, no-wrap
msgid ""
"import io.vertx.core.http.HttpClientOptions;\n"
"import io.quarkus.arc.Unremovable;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:401
#, no-wrap
msgid ""
"@Provider\n"
"public class CustomHttpClientOptions implements ContextResolver<HttpClientOptions> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:409
#: upstream/_versions/main/guides/rest-client-reactive.adoc:452
#, no-wrap
msgid ""
"    @Override\n"
"    public HttpClientOptions getContext(Class<?> aClass) {\n"
"        HttpClientOptions options = new HttpClientOptions();\n"
"        // ...\n"
"        return options;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:412
msgid "Now, all the REST Clients will be using your custom HTTP Client Options."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:414
msgid "Another approach is to provide the custom HTTP Client options when creating the client programmatically:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:427
#, no-wrap
msgid "import io.vertx.core.http.HttpClientOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:439
#, no-wrap
msgid ""
"    public ExtensionsResource() {\n"
"        extensionsService = RestClientBuilder.newBuilder()\n"
"            .baseUri(URI.create(\"https://stage.code.quarkus.io/api\"))\n"
"            .register(CustomHttpClientOptions.class) <1>\n"
"            .build(ExtensionsService.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:442
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:444
#, no-wrap
msgid "public class CustomHttpClientOptions implements ContextResolver<HttpClientOptions> {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:455
msgid "the client will use the registered HTTP Client options over the HTTP Client options provided via CDI if any."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:456
#, no-wrap
msgid "Update the test"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:460
msgid "Next, we need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:467
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:469
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:474
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.hasItem;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.Matchers.greaterThan;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:477
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class ExtensionsResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:491
#, no-wrap
msgid ""
"    @Test\n"
"    public void testExtensionsIdEndpoint() {\n"
"        given()\n"
"            .when().get(\"/extension/id/io.quarkus:quarkus-rest-client-reactive\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            .body(\"$.size()\", is(1),\n"
"                \"[0].id\", is(\"io.quarkus:quarkus-rest-client-reactive\"),\n"
"                \"[0].name\", is(\"REST Client Reactive\"),\n"
"                \"[0].keywords.size()\", greaterThan(1),\n"
"                \"[0].keywords\", hasItem(\"rest-client\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:494
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:497
#, no-wrap
msgid "Async Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:502
msgid "To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client Reactive extension, which comes with support for `CompletionStage` and `Uni`.  Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:514
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:521
#: upstream/_versions/main/guides/rest-client-reactive.adoc:795
#: upstream/_versions/main/guides/rest-client-reactive.adoc:846
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:525
#: upstream/_versions/main/guides/rest-client-reactive.adoc:799
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:528
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:539
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:545
#: upstream/_versions/main/guides/rest-client-reactive.adoc:626
#, no-wrap
msgid ""
"    @RestClient\n"
"    ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:552
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:559
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-async/{id}\")\n"
"    public CompletionStage<Set<Extension>> idAsync(String id) {\n"
"        return extensionsService.getByIdAsync(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:564
msgid "Please note that since the invocation is now non-blocking, the `idAsync` method will be invoked on the event loop, i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization.  See xref:resteasy-reactive.adoc#execution-model[Resteasy reactive execution model] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:567
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:581
#, no-wrap
msgid ""
"@Test\n"
"public void testExtensionIdAsyncEndpoint() {\n"
"    given()\n"
"        .when().get(\"/extension/id-async/io.quarkus:quarkus-rest-client-reactive\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"            \"[0].id\", is(\"io.quarkus:quarkus-rest-client-reactive\"),\n"
"            \"[0].name\", is(\"REST Client Reactive\"),\n"
"            \"[0].keywords.size()\", greaterThan(1),\n"
"            \"[0].keywords\", hasItem(\"rest-client\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:584
msgid "The `Uni` version is very similar:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:591
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:602
#: upstream/_versions/main/guides/rest-client-reactive.adoc:629
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:606
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<Set<Extension>> getByIdAsUni(@QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:609
msgid "The `ExtensionsResource` becomes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:616
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:636
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-uni/{id}\")\n"
"    public Uni<Set<Extension>> idUni(String id) {\n"
"        return extensionsService.getByIdAsUni(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/rest-client-reactive.adoc:639
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client-reactive.adoc:643
msgid "The previous snippet uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:647
msgid "When returning a `Uni`, every _subscription_ invokes the remote service.  It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:652
#, no-wrap
msgid "@RestClient ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:654
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:657
#, no-wrap
msgid ""
"extensionsService.getByIdAsUni(id)\n"
"    .onFailure().retry().atMost(10);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:662
msgid "If you use a `CompletionStage`, you would need to call the service's method to retry.  This difference comes from the laziness aspect of Mutiny and its subscription protocol.  More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:663
#, no-wrap
msgid "Custom headers support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:666
msgid "There are a few ways in which you can specify custom headers for your REST calls:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:668
msgid "by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:669
msgid "by specifying the value of the header with `@ClientHeaderParam`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:670
msgid "by specifying the value of the header by `@HeaderParam`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:672
msgid "The code below demonstrates how to use each of these techniques:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:680
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.ClientHeaderParam;\n"
"import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:686
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.HeaderParam;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:693
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class) // <1>\n"
"@ClientHeaderParam(name = \"my-header\", value = \"constant-header-value\") // <2>\n"
"@ClientHeaderParam(name = \"computed-header\", value = \"{org.acme.rest.client.Util.computeHeader}\") // <3>\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:698
#, no-wrap
msgid ""
"    @GET\n"
"    @ClientHeaderParam(name = \"header-from-properties\", value = \"${header.value}\") // <4>\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id, @HeaderParam(\"jaxrs-style-header\") String headerValue); // <5>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:701
msgid "There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:702
msgid "`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value..."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:703
msgid "... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:704
msgid "... as well as a value from your application's configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:705
msgid "... or as a normal JAX-RS `@HeaderParam` annotated argument"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client-reactive.adoc:710
msgid "When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.  See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:713
msgid "A `ClientHeadersFactory` can look as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:719
#: upstream/_versions/main/guides/rest-client-reactive.adoc:756
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:724
#: upstream/_versions/main/guides/rest-client-reactive.adoc:761
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.core.MultivaluedHashMap;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:727
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:735
#, no-wrap
msgid ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:739
msgid "As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:741
msgid "To specify a value for `${header.value}`, simply put the following in your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:745
#, no-wrap
msgid "header.value=value of the header\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:748
msgid "Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:754
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:764
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GetTokenReactiveClientHeadersFactory extends ReactiveClientHeadersFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:767
#, no-wrap
msgid ""
"    @Inject\n"
"    Service service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:780
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<MultivaluedMap<String, String>> getHeaders(\n"
"            MultivaluedMap<String, String> incomingHeaders,\n"
"            MultivaluedMap<String, String> clientOutgoingHeaders);\n"
"        return Uni.createFrom().item(() -> {\n"
"            MultivaluedHashMap<String, String> newHeaders = new MultivaluedHashMap<>();\n"
"            // perform blocking call\n"
"            newHeaders.add(HEADER_NAME, service.getToken());\n"
"            return newHeaders;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:782
#, no-wrap
msgid "Default header factory"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:786
msgid "The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.  If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:792
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:804
#, no-wrap
msgid "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:806
#, no-wrap
msgid "Exception handling"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:809
msgid "The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:811
msgid "A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:815
#, no-wrap
msgid "public class MyResponseExceptionMapper implements ResponseExceptionMapper<RuntimeException> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:824
#, no-wrap
msgid ""
"    @Override\n"
"    public RuntimeException toThrowable(Response response) {\n"
"        if (response.getStatus() == 500) {\n"
"            throw new RuntimeException(\"The remote service responded with HTTP 500\");\n"
"        }\n"
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:828
msgid "`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).  If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:831
msgid "The class as written above, would not be automatically be used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client-reactive.provider-autodiscovery` is not set to `false`).  Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:832
#, no-wrap
msgid "Using @ClientExceptionMapper"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:835
msgid "A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:837
msgid "For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:849
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam(\"id\") String id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:858
#, no-wrap
msgid ""
"    @ClientExceptionMapper\n"
"    static RuntimeException toException(Response response) {\n"
"        if (response.getStatus() == 500) {\n"
"            return new RuntimeException(\"The remote service responded with HTTP 500\");\n"
"        }\n"
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:861
msgid "Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:863
#, no-wrap
msgid "Multipart Form support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:866
msgid "REST Client Reactive support multipart messages."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:867
#, no-wrap
msgid "Sending Multipart messages"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:871
msgid "REST Client Reactive allows sending data as multipart forms. This way you can for example send files efficiently."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:873
msgid "To send data as a multipart form, you can just use the regular `@RestForm` (or `@FormParam`) annotations:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:879
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/binary\")\n"
"    String sendMultipart(@RestForm File file, @RestForm String otherField);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:884
msgid "Parameters specified as `File`, `Path`, `byte[]` or `Buffer` are sent as files and default to the `application/octet-stream` MIME type. Other `@RestForm` parameter types default to the `text/plain` MIME type. You can override these defaults with the `@PartType` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:886
msgid "Naturally, you can also group these parameters into a containing class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:892
#, no-wrap
msgid ""
"    public static class Parameters {\n"
"        @RestForm\n"
"        File file;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:896
#, no-wrap
msgid ""
"        @RestForm\n"
"        String otherField;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:900
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/binary\")\n"
"    String sendMultipart(Parameters parameters);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:905
msgid "Any `@RestForm` parameter of the type `File`, `Path`, `byte[]` or `Buffer`, as well as any annotated with `@PartType` automatically imply a `@Consumes(MediaType.MULTIPART_FORM_DATA)` on the method if there is no `@Consumes` present."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:908
msgid "If there are `@RestForm` parameters that are not multipart-implying, then `@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` is implied."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:918
msgid "There are a few modes in which the form data can be encoded. By default, Rest Client Reactive uses RFC1738.  You can override it by specifying the mode either on the client level, by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property to the selected value of `HttpPostRequestEncoder.EncoderMode` or by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your `application.properties`. Please note that the latter works only for clients created with the `@RegisterRestClient` annotation.  All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:920
msgid "You can also send JSON multiparts by specifying the `@PartType` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:927
#, no-wrap
msgid ""
"    public static class Person {\n"
"        public String firstName;\n"
"        public String lastName;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:931
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/json\")\n"
"    String sendMultipart(@RestForm @PartType(MediaType.APPLICATION_JSON) Person person);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:933
#, no-wrap
msgid "Receiving Multipart Messages"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:936
msgid "REST Client Reactive also supports receiving multipart messages.  As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:943
#, no-wrap
msgid ""
"public class FormDto {\n"
"    @RestForm // <1>\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public File file;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:948
#, no-wrap
msgid ""
"    @FormParam(\"otherField\") // <2>\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String textProperty;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:950
msgid "uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:951
msgid "the standard `@FormParam` can also be used. It allows to override the name of the multipart part."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:953
msgid "Then, create an interface method that corresponds to the call and make it return the `FormDto`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:959
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.MULTIPART_FORM_DATA)\n"
"    @Path(\"/get-file\")\n"
"    FormDto data receiveMultipart();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:962
msgid "At the moment, multipart response support is subject to the following limitations:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:964
msgid "files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:965
msgid "each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:967
msgid "REST Client Reactive needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:969
msgid "The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:970
#, no-wrap
msgid "Proxy support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:973
msgid "REST Client Reactive supports sending requests through a proxy.  It honors the JVM settings for it but also allows to specify both:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:975
msgid "global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:977
msgid "per-client proxy settings, with `quarkus.rest-client.<my-client>.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:979
msgid "If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:982
msgid "If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.  Otherwise, the client uses the JVM settings."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:985
msgid "An example configuration for setting proxy:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:993
#, no-wrap
msgid ""
"# global proxy configuration is used for all clients\n"
"quarkus.rest-client.proxy-address=localhost:8182\n"
"quarkus.rest-client.proxy-user=<proxy user name>\n"
"quarkus.rest-client.proxy-password=<proxy password>\n"
"quarkus.rest-client.non-proxy-hosts=example.com\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:999
#, no-wrap
msgid ""
"# per-client configuration overrides the global settings for a specific client\n"
"quarkus.rest-client.my-client.proxy-address=localhost:8183\n"
"quarkus.rest-client.my-client.proxy-user=<proxy user name>\n"
"quarkus.rest-client.my-client.proxy-password=<proxy password>\n"
"quarkus.rest-client.my-client.url=...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1002
msgid "MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1003
#, no-wrap
msgid "Package and run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1006
msgid "Run the application with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1010
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1012
msgid "You should see a JSON object containing some basic information about this extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1014
msgid "As usual, the application can be packaged using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1018
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1020
msgid "You can also generate the native executable with:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1023
#, no-wrap
msgid "Logging traffic"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1026
msgid "REST Client Reactive can log the requests it sends and the responses it receives.  To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1028
msgid "`request-response` to log the request and response contents, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1029
msgid "`all` to also enable low level logging of the underlying libraries."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1031
msgid "As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1033
msgid "REST Client Reactive is logging the traffic with level DEBUG and does not alter logger properties. You may need to adjust your logger configuration to use this feature."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1035
msgid "An example logging configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1040
#, no-wrap
msgid ""
"quarkus.rest-client.logging.scope=request-response\n"
"quarkus.rest-client.logging.body-limit=50\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1042
#, no-wrap
msgid "quarkus.log.category.\"org.jboss.resteasy.reactive.client.logging\".level=DEBUG\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1044
#, no-wrap
msgid "Mocking the client for tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1047
msgid "If you use a client injected with the `@RestClient` annotation, you can easily mock it for tests.  You can do it with Mockito's `@InjectMock` or with `QuarkusMock`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1049
msgid "This section shows how to replace your client with a mock. If you would like to get a more in-depth understanding of how mocking works in Quarkus, see the blog post on https://quarkus.io/blog/mocking/[Mocking CDI beans]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1051
msgid "Mocking does not work when using `@NativeImageTest` or `@QuarkusIntegrationTest`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1053
msgid "Let's assume you have the following client:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1056
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1098
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1133
#, no-wrap
msgid "package io.quarkus.it.rest.client.main;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1059
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1069
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@RegisterRestClient\n"
"public interface Client {\n"
"    @GET\n"
"    String get();\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1072
#, no-wrap
msgid "Mocking with InjectMock"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1074
msgid "The simplest approach to mock a client for tests is to use Mockito and `@InjectMock`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1076
msgid "First, add the following dependency to your application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1085
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1091
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1094
msgid "Then, in your test you can simply use `@InjectMock` to create and inject a mock:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1100
#, no-wrap
msgid "import static org.mockito.Mockito.when;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1104
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1137
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.junit.jupiter.api.BeforeEach;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1107
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1110
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class InjectMockTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1114
#, no-wrap
msgid ""
"    @InjectMock\n"
"    @RestClient\n"
"    Client mock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1119
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setUp() {\n"
"        when(mock.get()).thenReturn(\"MockAnswer\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1125
#, no-wrap
msgid ""
"    @Test\n"
"    void doTest() {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1127
#, no-wrap
msgid "Mocking with QuarkusMock"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1129
msgid "If Mockito doesn't meet your needs, you can create a mock programmatically using `QuarkusMock`, e.g.:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1140
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusMock;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1143
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class QuarkusMockTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1159
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setUp() {\n"
"        Client customMock = new Client() { //<1>\n"
"            @Override\n"
"            public String get() {\n"
"                return \"MockAnswer\";\n"
"            }\n"
"        };\n"
"        QuarkusMock.installMockForType(customMock, Client.class, RestClient.LITERAL); // <2>\n"
"    }\n"
"    @Test\n"
"    void doTest() {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1162
msgid "here we use a manually created implementation of the client interface to replace the actual Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1163
msgid "note that `RestClient.LITERAL` has to be passed as the last argument of the `installMockForType` method"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1165
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1168
msgid "In some cases you may want to mock the remote endpoint - the HTTP server - instead of mocking the client itself.  This may be especially useful for native tests, or for programmatically created clients."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1172
msgid "You can easily mock an HTTP Server with Wiremock.  The xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client] describes how to set it up in detail."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1173
#, no-wrap
msgid "Known limitations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1176
msgid "While the REST Client Reactive extension aims to be a drop-in replacement for the REST Client extension, there are some differences and limitations:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1179
msgid "the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-rest-client` defaults to `@Dependent` To change this behavior, set the `quarkus.rest-client-reactive.scope` property to the fully qualified scope name."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1180
msgid "it is not possible to set `HostnameVerifier` or `SSLContext`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1181
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1184
#, no-wrap
msgid "Further reading"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1186
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr ""
