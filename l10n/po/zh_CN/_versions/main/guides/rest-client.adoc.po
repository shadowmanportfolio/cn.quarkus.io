# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-12 02:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/rest-client.adoc:6
#, no-wrap
msgid "Using the legacy REST Client"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:16
msgid "This guide is about the REST Client compatible with https://resteasy.dev[RESTEasy Classic] which used to be the default Jakarta REST (formerly known as JAX-RS) implementation until Quarkus 2.8."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:20
msgid "It is now recommended to use RESTEasy Reactive, which supports equally well traditional blocking workloads and reactive workloads.  For more information about RESTEasy Reactive, please see the xref:rest-client-reactive.adoc[REST Client Reactive guide] and, for the server side, the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:resteasy-reactive.adoc[RESTEasy Reactive guide]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:24
msgid "This guide explains how to use the RESTEasy REST Client in order to interact with REST APIs with very little effort."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:26
msgid "there is another guide if you need to write server xref:rest-json.adoc[JSON REST APIs]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:27
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:31
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:35
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:37
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:39
msgid "The solution is located in the `rest-client-quickstart` link:{quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:40
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:43
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:49
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:51
msgid "the `resteasy` and `resteasy-jackson` extensions for the REST server support;"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:52
msgid "the `rest-client` and `rest-client-jackson` extensions for the REST client support."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:55
msgid "If you already have your Quarkus project configured, you can add the `rest-client` and the `rest-client-jackson` extensions to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:60
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/rest-client.adoc:62
#: upstream/_versions/main/guides/rest-client.adoc:671
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:72
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/rest-client.adoc:75
#: upstream/_versions/main/guides/rest-client.adoc:683
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:79
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-rest-client\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-jackson\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:81
#, no-wrap
msgid "Setting up the model"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:85
msgid "In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.  Our first order of business is to set up the model we will be using, in the form of an `Extension` POJO."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:87
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:91
#: upstream/_versions/main/guides/rest-client.adoc:113
#: upstream/_versions/main/guides/rest-client.adoc:160
#: upstream/_versions/main/guides/rest-client.adoc:276
#: upstream/_versions/main/guides/rest-client.adoc:311
#: upstream/_versions/main/guides/rest-client.adoc:367
#: upstream/_versions/main/guides/rest-client.adoc:395
#: upstream/_versions/main/guides/rest-client.adoc:450
#: upstream/_versions/main/guides/rest-client.adoc:478
#: upstream/_versions/main/guides/rest-client.adoc:543
#: upstream/_versions/main/guides/rest-client.adoc:577
#: upstream/_versions/main/guides/rest-client.adoc:703
#, no-wrap
msgid "package org.acme.rest.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:93
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:95
#, no-wrap
msgid "public class Extension {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:100
#, no-wrap
msgid ""
"    public String id;\n"
"    public String name;\n"
"    public String shortName;\n"
"    public List<String> keywords;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:102
#: upstream/_versions/main/guides/rest-client.adoc:388
#: upstream/_versions/main/guides/rest-client.adoc:426
#: upstream/_versions/main/guides/rest-client.adoc:763
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:105
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:106
#, no-wrap
msgid "Create the interface"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:109
msgid "Using the RESTEasy REST Client is as simple as creating an interface using the proper Jakarta REST and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:116
#: upstream/_versions/main/guides/rest-client.adoc:376
#: upstream/_versions/main/guides/rest-client.adoc:459
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:121
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:125
#: upstream/_versions/main/guides/rest-client.adoc:172
#: upstream/_versions/main/guides/rest-client.adoc:380
#: upstream/_versions/main/guides/rest-client.adoc:465
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:129
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:132
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:134
msgid "The purpose of the annotations in the code above is the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:137
msgid "`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:138
msgid "`@Path`, `@GET` and `@QueryParam` are the standard Jakarta REST annotations used to define how to access the service"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:145
msgid "When a JSON extension is installed such as `quarkus-rest-client-jackson` or `quarkus-rest-client-jsonb`, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream` respectively)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:148
msgid "If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:151
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of Jakarta REST providers (which can be seen as converters) included in the native executable."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client.adoc:153
#, no-wrap
msgid "Path Parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:156
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in a mock example below."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:164
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:168
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:177
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream/{stream}\")\n"
"    Set<Extension> getByStream(@PathParam String stream, @QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:180
#, no-wrap
msgid "Create the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:184
msgid "In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.  The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:190
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".url=https://stage.code.quarkus.io/api # // <1>\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".scope=jakarta.inject.Singleton # // <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:194
msgid "Having this configuration means that all requests performed using `ExtensionsService` will use `https://stage.code.quarkus.io` as the base URL.  Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:196
msgid "Having this configuration means that the default scope of `ExtensionsService` will be `@Singleton`. Supported scope values are `@Singleton`, `@Dependent`, `@ApplicationScoped` and `@RequestScoped`. The default scope is `@Dependent`.  The default scope can also be defined on the interface."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:198
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:202
msgid "The standard MicroProfile Rest Client properties notation can also be used to configure the client:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:207
#, no-wrap
msgid ""
"org.acme.rest.client.ExtensionsService/mp-rest/url=https://stage.code.quarkus.io/api\n"
"org.acme.rest.client.ExtensionsService/mp-rest/scope=jakarta.inject.Singleton\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:210
msgid "If a property is specified via both the Quarkus notation and the MicroProfile notation, the Quarkus notation takes a precedence."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:214
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use another configuration root than the fully qualified name of your interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:222
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"extensions-api\")\n"
"public interface ExtensionsService {\n"
"    [...]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:229
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.extensions-api.url=https://stage.code.quarkus.io/api\n"
"quarkus.rest-client.extensions-api.scope=jakarta.inject.Singleton\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client.adoc:231
#, no-wrap
msgid "Disabling Hostname Verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:234
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:238
#, no-wrap
msgid "quarkus.rest-client.extensions-api.verify-host=false\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:242
msgid "This setting should not be used in production as it will disable the SSL hostname verification."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:245
msgid "Moreover, you can configure a REST client to use your custom hostname verify strategy. All you need to do is to provide a class that implements the interface `javax.net.ssl.HostnameVerifier` and add the following property to your configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:249
#, no-wrap
msgid "quarkus.rest-client.extensions-api.hostname-verifier=<full qualified custom hostname verifier class name>\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:254
msgid "Quarkus REST client provides an embedded hostname verifier strategy to disable the hostname verification called `io.quarkus.restclient.NoopHostnameVerifier`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client.adoc:256
#, no-wrap
msgid "Disabling SSL verifications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:259
msgid "To disable all SSL verifications, add the following property to your configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:263
#, no-wrap
msgid "quarkus.tls.trust-all=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:267
msgid "This setting should not be used in production as it will disable any kind of SSL verification."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:269
#, no-wrap
msgid "Create the Jakarta REST resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:272
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:279
#: upstream/_versions/main/guides/rest-client.adoc:405
#: upstream/_versions/main/guides/rest-client.adoc:488
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:284
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:287
#: upstream/_versions/main/guides/rest-client.adoc:408
#: upstream/_versions/main/guides/rest-client.adoc:493
#, no-wrap
msgid ""
"@Path(\"/extension\")\n"
"public class ExtensionsResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:291
#: upstream/_versions/main/guides/rest-client.adoc:412
#: upstream/_versions/main/guides/rest-client.adoc:497
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:298
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:301
msgid "Note that in addition to the standard CDI `@Inject` annotation, we also need to use the MicroProfile `@RestClient` annotation to inject `ExtensionsService`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:302
#, no-wrap
msgid "Update the test"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:306
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the `testExtensionIdEndpoint` method to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:316
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.hasItem;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.Matchers.greaterThan;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:319
#, no-wrap
msgid ""
"import org.acme.rest.client.resources.WireMockExtensionsResource;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:322
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:326
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensionsResource.class)\n"
"public class ExtensionsResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:340
#, no-wrap
msgid ""
"    @Test\n"
"    public void testExtensionsIdEndpoint() {\n"
"        given()\n"
"            .when().get(\"/extension/id/io.quarkus:quarkus-rest-client\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            .body(\"$.size()\", is(1),\n"
"                \"[0].id\", is(\"io.quarkus:quarkus-rest-client\"),\n"
"                \"[0].name\", is(\"REST Client Classic\"),\n"
"                \"[0].keywords.size()\", greaterThan(1),\n"
"                \"[0].keywords\", hasItem(\"rest-client\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:343
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:345
#, no-wrap
msgid "Redirection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:348
msgid "A HTTP server can redirect a response to another location by sending a response with a status code that starts with \"3\" and a HTTP header \"Location\" holding the URL to be redirected to. When the REST Client receives a redirection response from a HTTP server, it won't automatically perform another request to the new location. However, you can enable the automatic redirection by enabling the \"follow-redirects\" property:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:350
msgid "`quarkus.rest-client.follow-redirects` to enable redirection for all REST clients."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:351
msgid "`quarkus.rest-client.<client-prefix>.follow-redirects` to enable redirection for a specific REST client."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:353
msgid "If this property is true, then REST Client will perform a new request that it receives a redirection response from the HTTP server."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:355
msgid "Additionally, we can limit the number of redirections using the property \"max-redirects\"."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:357
msgid "One important note is that according to the https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] specs, by default the redirection will only happen for GET or HEAD methods."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:358
#, no-wrap
msgid "Async Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:363
msgid "The rest client supports asynchronous rest calls.  Async support comes in 2 flavors: you can return a `CompletionStage` or a `Uni` (requires the `quarkus-rest-client-mutiny` extension).  Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:370
#: upstream/_versions/main/guides/rest-client.adoc:398
#: upstream/_versions/main/guides/rest-client.adoc:453
#: upstream/_versions/main/guides/rest-client.adoc:481
#: upstream/_versions/main/guides/rest-client.adoc:546
#, no-wrap
msgid ""
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:373
#: upstream/_versions/main/guides/rest-client.adoc:456
#: upstream/_versions/main/guides/rest-client.adoc:549
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:383
#: upstream/_versions/main/guides/rest-client.adoc:563
#: upstream/_versions/main/guides/rest-client.adoc:613
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:386
#: upstream/_versions/main/guides/rest-client.adoc:566
#: upstream/_versions/main/guides/rest-client.adoc:616
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam String id);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:391
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:402
#: upstream/_versions/main/guides/rest-client.adoc:485
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:418
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:424
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-async/{id}\")\n"
"    public CompletionStage<Set<Extension>> idAsync(@PathParam String id) {\n"
"        return extensionsService.getByIdAsync(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:429
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:443
#, no-wrap
msgid ""
"@Test\n"
"public void testExtensionIdAsyncEndpoint() {\n"
"    given()\n"
"        .when().get(\"/extension/id-async/io.quarkus:quarkus-rest-client\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"            \"[0].id\", is(\"io.quarkus:quarkus-rest-client\"),\n"
"            \"[0].name\", is(\"REST Client Classic\"),\n"
"            \"[0].keywords.size()\", greaterThan(1),\n"
"            \"[0].keywords\", hasItem(\"rest-client\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:446
msgid "The `Uni` version is very similar:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:461
#: upstream/_versions/main/guides/rest-client.adoc:490
#: upstream/_versions/main/guides/rest-client.adoc:555
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:467
#: upstream/_versions/main/guides/rest-client.adoc:500
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:471
#: upstream/_versions/main/guides/rest-client.adoc:570
#: upstream/_versions/main/guides/rest-client.adoc:620
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<Set<Extension>> getByIdAsUni(@QueryParam String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:474
msgid "The `ExtensionsResource` becomes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:507
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-uni/{id}\")\n"
"    public Uni<Set<Extension>> idMutiny(@PathParam String id) {\n"
"        return extensionsService.getByIdAsUni(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/rest-client.adoc:510
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:514
msgid "The previous snippet uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:518
msgid "When returning a `Uni`, every _subscription_ invokes the remote service.  It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:523
#, no-wrap
msgid "@Inject @RestClient ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:525
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:528
#, no-wrap
msgid ""
"extensionsService.getByIdAsUni(id)\n"
"    .onFailure().retry().atMost(10);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:533
msgid "If you use a `CompletionStage`, you would need to call the service's method to retry.  This difference comes from the laziness aspect of Mutiny and its subscription protocol.  More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:534
#, no-wrap
msgid "Custom headers support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:537
msgid "The MicroProfile REST client allows amending request headers by registering a `ClientHeadersFactory` with the `@RegisterClientHeaders` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:539
msgid "Let's see it in action by adding a `@RegisterClientHeaders` annotation pointing to a `RequestUUIDHeaderFactory` class in our `ExtensionsService` REST interface:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:553
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:560
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class)\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:573
msgid "And the `RequestUUIDHeaderFactory` would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:579
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:584
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.ws.rs.core.MultivaluedHashMap;\n"
"import jakarta.ws.rs.core.MultivaluedMap;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:587
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:595
#, no-wrap
msgid ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:599
msgid "As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client.adoc:601
#, no-wrap
msgid "Default header factory"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:604
msgid "You can also use `@RegisterClientHeaders` annotation without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used and all headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property will be amended. Individual header names are comma-separated."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:610
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:626
#, no-wrap
msgid "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:628
#, no-wrap
msgid "Package and run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:631
msgid "Run the application with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:635
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:637
msgid "You should see a JSON object containing some basic information about the REST Client extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:639
msgid "As usual, the application can be packaged using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:643
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:645
msgid "You can also generate the native executable with:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:648
#, no-wrap
msgid "REST Client and RESTEasy interactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:652
msgid "In Quarkus, the REST Client extension and xref:rest-json.adoc[the RESTEasy extension] share the same infrastructure.  One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:655
msgid "For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls, which might not be the desired behavior."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:657
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:659
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider;"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:660
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:662
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:667
msgid "Setting up a mock HTTP server, against which tests are run, is a common testing pattern.  Examples of such servers are link:https://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].  In this section we'll demonstrate how Wiremock can be leveraged for testing the `ExtensionsService` which was developed above."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:669
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:679
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.wiremock</groupId>\n"
"    <artifactId>wiremock</artifactId>\n"
"    <scope>test</scope>\n"
"    <version>${wiremock.version}</version> <1>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:681
#: upstream/_versions/main/guides/rest-client.adoc:688
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/org.wiremock/wiremock[here]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:686
#, no-wrap
msgid "testImplementation(\"org.wiremock:wiremock:$wiremockVersion\") <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:692
msgid "In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource` annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration values that Quarkus will use."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:696
msgid "For more details about `@QuarkusTestResource` refer to xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:699
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockExtensions` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:705
#, no-wrap
msgid "import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:708
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:710
#, no-wrap
msgid "import static com.github.tomakehurst.wiremock.client.WireMock.*; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:712
#, no-wrap
msgid "public class WireMockExtensions implements QuarkusTestResourceLifecycleManager {  // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:714
#, no-wrap
msgid "    private WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:719
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        wireMockServer = new WireMockServer();\n"
"        wireMockServer.start(); // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:729
#, no-wrap
msgid ""
"        wireMockServer.stubFor(get(urlEqualTo(\"/extensions?id=io.quarkus:quarkus-rest-client\"))   // <4>\n"
"                .willReturn(aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                            \"[{\" +\n"
"                            \"\\\"id\\\": \\\"io.quarkus:quarkus-rest-client\\\",\" +\n"
"                            \"\\\"name\\\": \\\"REST Client Classic\\\"\" +\n"
"                            \"}]\"\n"
"                        )));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:731
#, no-wrap
msgid "        wireMockServer.stubFor(get(urlMatching(\".*\")).atPriority(10).willReturn(aResponse().proxiedFrom(\"https://stage.code.quarkus.io/api\")));   // <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:734
#, no-wrap
msgid ""
"        return Map.of(\"quarkus.rest-client.\\\"org.acme.rest.client.ExtensionsService\\\".url\", wireMockServer.baseUrl()); // <6>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:742
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        if (null != wireMockServer) {\n"
"            wireMockServer.stop();  // <7>\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:745
msgid "Statically importing the methods in the Wiremock package makes it easier to read the test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:746
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:747
msgid "Launch Wiremock."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:748
msgid "Configure Wiremock to stub the calls to `/extensions?id=io.quarkus:quarkus-rest-client` by returning a specific canned response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:749
msgid "All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:751
msgid "As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation of `ExtensionsService` to the base URL where Wiremock is listening for incoming requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:752
msgid "When all tests have finished, shutdown Wiremock."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:755
msgid "The `ExtensionsResourceTest` test class needs to be annotated like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:761
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensions.class)\n"
"public class ExtensionsResourceTest {\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:768
msgid "`@QuarkusTestResource` applies to all tests, not just `ExtensionsResourceTest`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:770
#, no-wrap
msgid "Further reading"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:772
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr ""
