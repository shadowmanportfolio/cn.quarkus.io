# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-07-05 14:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_guides/security-jpa.adoc:2
#, no-wrap
msgid "Quarkus Security with Jakarta Persistence"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:7
msgid "Quarkus provides a Jakarta Persistence (formerly known as JPA) identity provider, similar to the xref:security-jdbc.adoc[JDBC identity provider], suitable for use with the xref:security-basic-authentication.adoc[Basic] and xref:security-authentication-mechanisms.adoc#form-auth[Form-based] Quarkus Security mechanisms, which require a combination of username and password credentials."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:9
msgid "The Jakarta Persistence `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:11
msgid "For an example of practical use of Basic authentication and Jakarta Persistence, see the xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence] tutorial."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jpa.adoc:13
#, no-wrap
msgid "Jakarta Persistence entity specification"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:16
msgid "Quarkus security offers a Jakarta Persistence integration to collect usernames, passwords, and roles, and store them into Jakarta Persistence database entities."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:18
msgid "The following Jakarta Persistence entity specification demonstrates how users' information needs to be stored in a Jakarta Persistence entity and properly mapped so that Quarkus can retrieve this information from a database."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:21
msgid "The `@UserDefinition` annotation must be present on a Jakarta Persistence entity, regardless of whether link:https://quarkus.io/guides/hibernate-orm-panache[simplified Hibernate ORM with Panache] is used or not."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:23
#, fuzzy
msgid "The `@Username` and `@Password` field types are always `String`."
msgstr " `@Username` 和 `@Password` 字段类型必须是 `String` 类型。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:25
#, fuzzy
msgid "The `@Roles` field must either be `String`, `Collection<String>`, or a `Collection<X>`, where `X` is an entity class with a single `String` field annotated as `@RolesValue`."
msgstr " `@Roles` 字段必须是 `String` 或 `Collection<String>` 类型，或者是一个 `Collection<X>` ，其中 `X` 是一个实体类，有一个 `String` 字段被注解为 `@RolesValue` 。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:27
#, fuzzy
msgid "Each `String` role element type is parsed as a comma-separated list of roles."
msgstr "每个 `String` 角色元素类型将被解析为一个以逗号分隔的角色列表。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:29
#, fuzzy
msgid "The following example demonstrates storing security information by adding annotations to the `user` entity:"
msgstr "我们现在可以通过给我们的 `User` 实体添加一些注释来描述我们的安全信息是如何存储在我们的模型中的。"

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:33
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:36
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:43
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:54
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:69
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user to the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:73
#, fuzzy
msgid "The `security-jpa` extension initializes only if a single entity is annotated with `@UserDefinition`."
msgstr "只有当有一个实体被注解为 `@UserDefinition` ， `security-jpa` 扩展才会被初始化。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:75
#, fuzzy
msgid "The `@UserDefinition` annotation must be present on a single entity, either a regular Hibernate ORM entity or a Hibernate ORM with a Panache entity."
msgstr "这个注解必须出现在一个实体上。它可以是一个普通的Hibernate ORM实体，也可以是本例中带有Panache的Hibernate ORM实体。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:76
#, fuzzy
msgid "Indicates the field used for the username."
msgstr "这表示用于用户名的字段。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:78
#, fuzzy
msgid "Indicates the field used for the password.  By default, `security-jpa` uses bcrypt-hashed passwords, or you can configure plain text or custom passwords instead."
msgstr "这表示用于密码的字段。这默认为使用bcrypt散列密码，但你也可以将其配置为明文密码或自定义密码。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:79
#, fuzzy
msgid "This indicates the comma-separated list of roles added to the target principal representation attributes."
msgstr "这表示以逗号分隔的添加到目标Principal representation属性中的角色列表。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:80
#, fuzzy
msgid "This method allows you to add users while hashing passwords with the proper `bcrypt` hash."
msgstr "这种方法允许我们在添加用户的同时，用适当的bcrypt哈希值对密码进行加密。"

#. type: Title ==
#: upstream/_guides/security-jpa.adoc:82
#, no-wrap
msgid "Jakarta Persistence entity as storage of roles"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:85
msgid "Use the following example to store roles inside another Jakarta Persistence entity:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:94
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:97
#, no-wrap
msgid ""
"    @Password\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:102
#, no-wrap
msgid ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:105
#, no-wrap
msgid ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:108
#, no-wrap
msgid ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:112
#, no-wrap
msgid ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jpa.adoc:114
#, fuzzy, no-wrap
msgid "Password storage and hashing"
msgstr "密码存储和散列"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:117
msgid "When developing applications with Quarkus, you can decide how to manage password storage and hashing. You can choose to keep the default password and hashing settings of Quarkus, or you can hash passwords manually."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:122
#, fuzzy
msgid "With the default option, passwords are stored and hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF).  While using MCF, the hashing algorithm, iteration count, and salt are stored as a part of the hashed value.  As such, we do not need dedicated columns to keep them."
msgstr "默认情况下，我们认为密码是用 link:https://en.wikipedia.org/wiki/Crypt_©[模块化加密格式] （MCF）下的 link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt] 进行散列存储。"

#. type: delimited block =
#: upstream/_guides/security-jpa.adoc:126
msgid "In cryptography, a salt is a name for random data used as an additional input to a one-way function that hashes data, a password, or a passphrase."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:129
msgid "For manual password hashing, create a class that implements the `CustomPasswordProvider`as shown in the example below."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:131
msgid "The following snippet shows how to set a custom password provider that uses the SHA256 hashing algorithm."
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:141
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class CustomPasswordUserEntity {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:145
#, no-wrap
msgid ""
"    @Column(name = \"username\")\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:149
#, no-wrap
msgid ""
"    @Column(name = \"password\")\n"
"    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:153
#, no-wrap
msgid ""
"    @Roles\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:161
#, no-wrap
msgid ""
"public class CustomPasswordProvider implements PasswordProvider {\n"
"    @Override\n"
"    public Password getPassword(String pass) {\n"
"        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
"        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-jpa.adoc:167
#, fuzzy
msgid "For quick creation of a hashed password, use `String BcryptUtil.bcryptHash(String password)`, which defaults to creating a random salt and hashing in ten iterations.  This method also allows specifying the desired amount of iterations and the salt used."
msgstr "当你需要创建这样一个散列的密码时，我们提供了方便的 `String BcryptUtil.bcryptHash(String password)` ，该函数默认为创建一个随机的盐和10次迭代的散列（尽管你也可以指定迭代和盐）。"

#. type: delimited block =
#: upstream/_guides/security-jpa.adoc:172
msgid "For applications running in a production environment, do not store passwords as plain text."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-jpa.adoc:174
#, fuzzy
msgid "However, it is possible to store passwords as plain text with the `@Password(PasswordType.CLEAR)` annotation when operating in a test environment."
msgstr "警告：你也可以用 `@Password(PasswordType.CLEAR)` ，以明文存储密码，但我们强烈建议在生产中不要这样做。"

#. type: Title ==
#: upstream/_guides/security-jpa.adoc:176
#, fuzzy, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:179
msgid "xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:180
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:180
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#, fuzzy
#~ msgid "Using Security with JPA"
#~ msgstr "使用JPA的安全性"

#, fuzzy
#~ msgid "This guide demonstrates how your Quarkus application can use a database to store your user identities with xref:hibernate-orm.adoc[Hibernate ORM] or xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache]."
#~ msgstr "本指南展示了你的Quarkus应用程序如何使用 link:hibernate-orm.html[Hibernate ORM] 或 link:hibernate-orm-panache.html[Hibernate ORM with Panache使用] 数据库来存储你的用户身份。"

#, fuzzy
#~ msgid "Prerequisites"
#~ msgstr "先决条件"

#, fuzzy
#~ msgid "Architecture"
#~ msgstr "建筑学"

#, fuzzy
#~ msgid "In this example, we build a very simple microservice which offers three endpoints:"
#~ msgstr "在这个例子中，我们建立了一个非常简单的微服务，提供三个端点。"

#, fuzzy
#~ msgid "`/api/public`"
#~ msgstr " `/api/public` "

#, fuzzy
#~ msgid "`/api/users/me`"
#~ msgstr " `/api/users/me` "

#, fuzzy
#~ msgid "`/api/admin`"
#~ msgstr " `/api/admin` "

#, fuzzy
#~ msgid "The `/api/public` endpoint can be accessed anonymously.  The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.  The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
#~ msgstr " `/api/public` 端点可以被匿名访问。 `/api/admin` 端点受到RBAC（基于角色的访问控制）的保护，只有被授予 `admin` 角色的用户才能访问。在这个端点，我们使用 `@RolesAllowed` 注释来声明性地执行访问限制。 `/api/users/me` 端点也受到RBAC（基于角色的访问控制）的保护，只有被授予 `user` 角色的用户可以访问。作为响应，它返回一个包含用户详细信息的JSON文档。"

#, fuzzy
#~ msgid "Solution"
#~ msgstr "解决方案"

#, fuzzy
#~ msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
#~ msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#, fuzzy
#~ msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
#~ msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#, fuzzy
#~ msgid "The solution is located in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory]."
#~ msgstr "该解决方案位于 `security-jpa-quickstart` {quickstarts-treeurl}/security-jpa-quickstart[目录]中。"

#, fuzzy
#~ msgid "Creating the Maven Project"
#~ msgstr "创建Maven项目"

#, fuzzy
#~ msgid "First, we need a new project. Create a new project with the following command:"
#~ msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#, fuzzy
#~ msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
#~ msgstr "不要忘记添加选择的数据库连接器库。这里我们使用PostgreSQL作为身份存储。"

#, fuzzy
#~ msgid "This command generates a Maven project, importing the `security-jpa` extension which allows you to map your security source to JPA entities."
#~ msgstr "该命令生成了一个Maven项目，导入了 `security-jpa` 扩展，可以将安全源映射到JPA实体。"

#, fuzzy
#~ msgid "If you already have your Quarkus project configured, you can add the `security-jpa` extension to your project by running the following command in your project base directory:"
#~ msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `security-jpa` 扩展到你的项目。"

#, fuzzy
#~ msgid "This will add the following to your build file:"
#~ msgstr "这将在你的构建文件中添加以下内容。"

#, fuzzy
#~ msgid "pom.xml"
#~ msgstr "pom.xml"

#, fuzzy
#~ msgid "build.gradle"
#~ msgstr "build.gradle"

#, fuzzy
#~ msgid "Writing the application"
#~ msgstr "编写应用程序"

#, fuzzy
#~ msgid "Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:"
#~ msgstr "让我们从实现 `/api/public` 端点开始。正如你从下面的源代码中看到的，它只是一个普通的JAX-RS资源。"

#, fuzzy
#~ msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
#~ msgstr " `/api/admin` 端点的源代码也非常简单。这里的主要区别是，我们使用 `@RolesAllowed` 注释来确保只有被授予 `admin` 角色的用户才能访问该端点。"

#, fuzzy
#~ msgid "Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `user` role.  We are using `SecurityContext` to get access to the current authenticated Principal, and we return the user's name. This information is loaded from the database."
#~ msgstr "最后，让我们考虑一下 `/api/users/me` 这个端点。正如你在下面的源代码中看到的，我们只信任具有 `user` 角色的用户。我们使用 `SecurityContext` ，以获得对当前认证的Principal的访问，我们返回用户的名字。这些信息是从数据库中加载的。"

#, fuzzy
#~ msgid "Defining our user entity"
#~ msgstr "定义我们的用户实体"

#, fuzzy
#~ msgid "Configuring the Application"
#~ msgstr "配置应用程序"

#, fuzzy
#~ msgid "The `security-jpa` extension requires at least one datasource to access to your database."
#~ msgstr " `security-jpa` 扩展需要至少一个数据源来访问你的数据库。"

#, fuzzy
#~ msgid "In our context, we are using PostgreSQL as identity store. The database schema is created by Hibernate ORM automatically on startup (change this in production), and we initialize the database with users and roles in the `Startup` class:"
#~ msgstr "在我们的环境中，我们使用PostgreSQL作为身份存储。数据库模式由Hibernate ORM在启动时自动创建（在生产中改变这一点），我们在 `Startup` 类中用用户和角色初始化数据库。"

#, fuzzy
#~ msgid "It is probably useless, but we kindly remind you that you must not store clear-text passwords in production environments ;-).  As a result, the `security-jpa` defaults to using bcrypt-hashed passwords."
#~ msgstr "这可能是无用的，但我们善意地提醒你，你不能在生产环境中存储明文密码；-）。因此， `security-jpa` 默认为使用bcrypt-hashed密码。"

#, fuzzy
#~ msgid "Testing the Application"
#~ msgstr "测试应用程序"

#, fuzzy
#~ msgid "You can start the application in dev mode as follows:"
#~ msgstr "你可以在开发模式下启动应用程序，方法如下。"

#, fuzzy
#~ msgid "In the following tests we use the basic authentication mechanism, you can enable it by setting `quarkus.http.auth.basic=true` in the `application.properties` file."
#~ msgstr "在下面的测试中，我们使用基本认证机制，你可以通过在 `application.properties` 文件中设置 `quarkus.http.auth.basic=true` 来启用它。"

#, fuzzy
#~ msgid "The application is now protected and the identities are provided by our database.  The very first thing to check is to ensure the anonymous access works."
#~ msgstr "现在应用程序受到保护，身份是由我们的数据库提供的。首先要检查的是确保匿名访问的工作。"

#, fuzzy
#~ msgid "Now, let's try to hit a protected resource anonymously."
#~ msgstr "现在，让我们尝试一下，以匿名方式打击受保护的资源。"

#, fuzzy
#~ msgid "So far so good, now let's try with an allowed user."
#~ msgstr "到目前为止还不错，现在让我们用一个允许的用户试试。"

#, fuzzy
#~ msgid "By providing the `admin:admin` credentials, the extension authenticated the user and loaded their roles.  The `admin` user is authorized to access to the protected resources."
#~ msgstr "通过提供 `admin:admin` 凭证，扩展程序验证了用户并加载了他们的角色。 `admin` 的用户被授权访问受保护的资源。"

#, fuzzy
#~ msgid "The user `admin` should be forbidden to access a resource protected with `@RolesAllowed(\"user\")` because it doesn't have this role."
#~ msgstr "用户 `admin` 应该被禁止访问一个用 `@RolesAllowed(\"user\")` 保护的资源，因为它没有这个角色。"

#, fuzzy
#~ msgid "Finally, using the user `user` works and the security context contains the principal details (username for instance)."
#~ msgstr "最后，使用用户 `user` ，安全上下文包含了本金的细节（比如说用户名）。"

#, fuzzy
#~ msgid "Supported model types"
#~ msgstr "支持的模型类型"

#, fuzzy
#~ msgid "The `@UserDefinition` class must be a JPA entity (with Panache or not)."
#~ msgstr " `@UserDefinition` 类必须是一个JPA实体（有无Panache）。"

#, fuzzy
#~ msgid "Storing roles in another entity"
#~ msgstr "在另一个实体中存储角色"

#, fuzzy
#~ msgid "You can also store roles in another entity:"
#~ msgstr "你也可以在另一个实体中存储角色。"

#, fuzzy
#~ msgid "with MCF you don't need dedicated columns to store the hashing algorithm, the iterations count or the salt because they're all stored in the hashed value."
#~ msgstr "使用MCF，你不需要专门的列来存储散列算法、迭代次数或盐，因为它们都被存储在散列值中。"

#, fuzzy
#~ msgid "You also have the possibility to store password using different hashing algorithm `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)`:"
#~ msgstr "你也有可能使用不同的散列算法存储密码 `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)` 。"
