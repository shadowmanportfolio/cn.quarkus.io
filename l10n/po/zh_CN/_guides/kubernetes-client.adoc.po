# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-26 15:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/kubernetes-client.adoc:6
#, fuzzy, no-wrap
msgid "Kubernetes Client"
msgstr "Kubernetes客户端"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:14
#, fuzzy
msgid "Quarkus includes the `kubernetes-client` extension which enables the use of the https://github.com/fabric8io/kubernetes-client[Fabric8 Kubernetes Client] in native mode while also making it easier to work with."
msgstr "Quarkus包括 `kubernetes-client` 扩展，使 link:https://github.com/fabric8io/kubernetes-client[Fabric8 Kubernetes客户端] 在本地模式下使用，同时也使其更容易操作。"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:19
#, fuzzy
msgid "Having a Kubernetes Client extension in Quarkus is very useful in order to unlock the power of Kubernetes Operators.  Kubernetes Operators are quickly emerging as a new class of Cloud Native applications.  These applications essentially watch the Kubernetes API and react to changes on various resources and can be used to manage the lifecycle of all kinds of complex systems like databases, messaging systems and much more.  Being able to write such operators in Java with the very low footprint that native images provide is a great match."
msgstr "在Quarkus中拥有一个Kubernetes客户端扩展，对于释放Kubernetes操作者的力量非常有用。Kubernetes Operators作为一类新的云原生应用正在迅速崛起。这些应用本质上是观察Kubernetes API，并对各种资源的变化做出反应，可用于管理各种复杂系统的生命周期，如数据库、消息传递系统等等。能够用Java编写这样的操作程序，而原生图像提供的占用空间非常小，这是一个很好的匹配。"

#. type: Title ==
#: upstream/_guides/kubernetes-client.adoc:20
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "配置"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:24
#, fuzzy
msgid "Once you have your Quarkus project configured you can add the `kubernetes-client` extension to your project by running the following command in your project base directory."
msgstr "一旦你配置好你的Quarkus项目，你就可以通过在你的项目基础目录下运行以下命令，将 `kubernetes-client` 扩展到你的项目中。"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:29
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/kubernetes-client.adoc:31
#: upstream/_guides/kubernetes-client.adoc:146
#: upstream/_guides/kubernetes-client.adoc:332
#: upstream/_guides/kubernetes-client.adoc:461
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:37
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/kubernetes-client.adoc:40
#: upstream/_guides/kubernetes-client.adoc:156
#: upstream/_guides/kubernetes-client.adoc:341
#: upstream/_guides/kubernetes-client.adoc:471
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:43
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-kubernetes-client\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kubernetes-client.adoc:45
#, fuzzy, no-wrap
msgid "Usage"
msgstr "使用方法"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:49
#, fuzzy
msgid "Quarkus configures a Bean of type `KubernetesClient` which can be injected into application code using the well known CDI methods.  This client can be configured using various properties as can be seen in the following example:"
msgstr "Quarkus配置了一个类型为 `KubernetesClient` 的Bean，可以使用众所周知的CDI方法注入到应用程序代码中。这个客户端可以使用各种属性进行配置，在下面的例子中可以看到。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:54
#, no-wrap
msgid ""
"quarkus.kubernetes-client.trust-certs=false\n"
"quarkus.kubernetes-client.namespace=default\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:57
#, fuzzy
msgid "Note that the full list of properties is available in the link:#quarkus-kubernetes-client_quarkus.kubernetes-client.devservices-dev-services[Dev Services section of the configuration reference]."
msgstr "请注意，完整的属性列表可在 link:#quarkus-kubernetes-client_quarkus.kubernetes-client.devservices-dev-services[配置参考中的开发服务部分] 找到。"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:59
#, fuzzy
msgid "In dev mode and when running tests, xref:kubernetes-dev-services.adoc[Dev Services for Kubernetes] automatically starts a Kubernetes API server."
msgstr "在开发模式和运行测试时， link:kubernetes-dev-services.html[Kubernetes的开发服务] 会自动启动Kubernetes API服务器。"

#. type: Title ===
#: upstream/_guides/kubernetes-client.adoc:60
#, no-wrap
msgid "Customizing and overriding"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:63
msgid "Quarkus provides multiple integration points for influencing the Kubernetes Client provided as a CDI bean."
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:66
msgid "The first integration point is the use of the `io.quarkus.kubernetes.client.KubernetesConfigCustomizer` interface. When such a bean exists, it allows for arbitrary customizations of the `io.fabric8.kubernetes.client.Config` created by Quarkus (which takes into account the `quarkus.kubernetes-client.*` properties)."
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:69
#, fuzzy
msgid "Alternatively, application code can override the `io.fabric8.kubernetes.client.Config` or even the `io.fabric8.kubernetes.client.KubernetesClient` bean (which are normally provided by the extension) by simply declaring custom versions of those beans."
msgstr "该扩展还允许应用程序代码覆盖通常由扩展提供的 `io.fabric8.kubernetes.client.Config` 或 `io.fabric8.kubernetes.client.KubernetesClient` ，只需声明这些Bean的自定义版本即可。"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:71
#, fuzzy
msgid "An example of this can be seen in the following snippet:"
msgstr "这方面的一个例子可以在下面的片段中看到。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:76
#, no-wrap
msgid ""
"@Singleton\n"
"public class KubernetesClientProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:83
#, no-wrap
msgid ""
"    @Produces\n"
"    public KubernetesClient kubernetesClient() {\n"
"        // here you would create a custom client\n"
"        return new DefaultKubernetesClient();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kubernetes-client.adoc:85
#, fuzzy, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:90
#, fuzzy
msgid "To make testing against a mock Kubernetes API extremely simple, Quarkus provides the `WithKubernetesTestServer` annotation which automatically launches a mock of the Kubernetes API server and sets the proper environment variables needed so that the Kubernetes Client configures itself to use said mock.  Tests can inject the mock server and set it up in any way necessary for the particular testing using the `@KubernetesTestServer` annotation."
msgstr "为了使针对模拟Kubernetes API的测试变得非常简单，Quarkus提供了 `WithKubernetesTestServer` 注释，它可以自动启动Kubernetes API服务器的模拟，并设置适当的环境变量，以便Kubernetes客户端配置自己来使用上述模拟。测试可以注入模拟服务器，并使用 `@KubernetesTestServer` 注释以任何必要的方式对其进行设置。"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:92
#, fuzzy
msgid "Let's assume we have a REST endpoint defined like so:"
msgstr "让我们假设我们有一个REST端点，像这样定义。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:97
#, no-wrap
msgid ""
"@Path(\"/pod\")\n"
"public class Pods {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:99
#, no-wrap
msgid "    private final KubernetesClient kubernetesClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:103
#, no-wrap
msgid ""
"    public Pods(KubernetesClient kubernetesClient) {\n"
"        this.kubernetesClient = kubernetesClient;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:110
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{namespace}\")\n"
"    public List<Pod> pods(String namespace) {\n"
"        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:113
#, fuzzy
msgid "We could write a test for this endpoint very easily like so:"
msgstr "我们可以非常容易地为这个端点写一个测试，就像这样。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:120
#, no-wrap
msgid ""
"// you can even configure aspects like crud, https and port on this annotation\n"
"@WithKubernetesTestServer\n"
"@QuarkusTest\n"
"public class KubernetesClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:123
#: upstream/_guides/kubernetes-client.adoc:173
#, no-wrap
msgid ""
"    @KubernetesTestServer\n"
"    KubernetesServer mockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:128
#: upstream/_guides/kubernetes-client.adoc:178
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void before() {\n"
"        final Pod pod1 = new PodBuilder().withNewMetadata().withName(\"pod1\").withNamespace(\"test\").and().build();\n"
"        final Pod pod2 = new PodBuilder().withNewMetadata().withName(\"pod2\").withNamespace(\"test\").and().build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:133
#, no-wrap
msgid ""
"        // Set up Kubernetes so that our \"pretend\" pods are created\n"
"        mockServer.getClient().pods().create(pod1);\n"
"        mockServer.getClient().pods().create(pod2);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:139
#: upstream/_guides/kubernetes-client.adoc:192
#, no-wrap
msgid ""
"    @Test\n"
"    public void testInteractionWithAPIServer() {\n"
"        RestAssured.when().get(\"/pod/test\").then()\n"
"                .body(\"size()\", is(2));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:141
#: upstream/_guides/kubernetes-client.adoc:194
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:144
#, fuzzy
msgid "Note that to take advantage of these features, the `quarkus-test-kubernetes-client` dependency needs to be added, for example like so:"
msgstr "请注意，为了利用这些功能，需要添加 `quarkus-test-kubernetes-client` 依赖关系，例如像这样。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:153
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-kubernetes-client</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:159
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-kubernetes-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:163
#, fuzzy
msgid "By default, the mock server will be in CRUD mode, so you have to use the client to build your state before your application can retrieve it, but you can also set it up in non-CRUD mode and mock all HTTP requests made to Kubernetes:"
msgstr "默认情况下，模拟服务器将处于CRUD模式，所以你必须使用客户端来构建你的状态，然后你的应用程序才能检索它，但你也可以将其设置为非CRUD模式，模拟所有向Kubernetes发出的HTTP请求。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:170
#, no-wrap
msgid ""
"// you can even configure aspects like crud, https and port on this annotation\n"
"@WithKubernetesTestServer(crud = false)\n"
"@QuarkusTest\n"
"public class KubernetesClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:186
#, no-wrap
msgid ""
"        // Mock any HTTP request to Kubernetes pods so that our pods are returned\n"
"        mockServer.expect().get().withPath(\"/api/v1/namespaces/test/pods\")\n"
"                .andReturn(200,\n"
"                        new PodListBuilder().withNewMetadata().withResourceVersion(\"1\").endMetadata().withItems(pod1, pod2)\n"
"                                .build())\n"
"                .always();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:197
#, fuzzy
msgid "You can also use the `setup` attribute on the `@WithKubernetesTestServer` annotation to provide a class that will configure the `KubernetesServer` instance:"
msgstr "你也可以使用 `@WithKubernetesTestServer` 注解上的 `setup` 属性来提供一个将配置 `KubernetesServer` 实例的类。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:203
#, no-wrap
msgid ""
"@WithKubernetesTestServer(setup = MyTest.Setup.class)\n"
"@QuarkusTest\n"
"public class MyTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:205
#, no-wrap
msgid "    public static class Setup implements Consumer<KubernetesServer> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:212
#, no-wrap
msgid ""
"        @Override\n"
"        public void accept(KubernetesServer server) {\n"
"          server.expect().get().withPath(\"/api/v1/namespaces/test/pods\")\n"
"            .andReturn(200, new PodList()).always();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:215
#, no-wrap
msgid ""
"    // tests\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:218
#, fuzzy
msgid "Alternately, you can create an extension of the `KubernetesServerTestResource` class to ensure all your `@QuarkusTest` enabled test classes share the same mock server setup via the `QuarkusTestResource` annotation:"
msgstr "另外，你可以创建一个 `KubernetesServerTestResource` 类的扩展，以确保你所有启用 `@QuarkusTest` 的测试类通过 `QuarkusTestResource` 注解共享相同的模拟服务器设置。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:222
#, no-wrap
msgid "public class CustomKubernetesMockServerTestResource extends KubernetesServerTestResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:230
#, no-wrap
msgid ""
"    @Override\n"
"    protected void configureServer() {\n"
"        super.configureServer();\n"
"        server.expect().get().withPath(\"/api/v1/namespaces/test/pods\")\n"
"          .andReturn(200, new PodList()).always();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:233
#, fuzzy
msgid "and use this in your other test classes as follows:"
msgstr "并在你的其他测试类中使用这个，如下所示。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:238
#, no-wrap
msgid ""
"@QuarkusTestResource(CustomKubernetesMockServerTestResource.class)\n"
"@QuarkusTest\n"
"public class KubernetesClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:241
#, no-wrap
msgid ""
"    //tests will now use the configured server...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kubernetes-client.adoc:244
#, fuzzy, no-wrap
msgid "Note on implementing or extending generic types"
msgstr "关于实现或扩展通用类型的说明"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:250
#, fuzzy
msgid "Due to the restrictions imposed by GraalVM, extra care needs to be taken when implementing or extending generic types provided by the client if the application is intended to work in native mode.  Essentially every implementation or extension of generic classes such as `Watcher`, `ResourceHandler` or `CustomResource` needs to specify their associated Kubernetes model class (or, in the case of `CustomResource`, regular Java types) at class definition time.  To better understand this, suppose we want to watch for changes to Kubernetes `Pod` resources.  There are a couple ways to write such a `Watcher` that are guaranteed to work in native:"
msgstr "由于GraalVM的限制，如果应用程序打算在本地模式下工作，在实现或扩展客户端提供的通用类型时，需要特别小心。基本上，每一个通用类的实现或扩展，如 `Watcher` 、 `ResourceHandler` 或 `CustomResource` ，都需要在类定义时指定其相关的Kubernetes模型类（或者，在 `CustomResource` 的情况下，指定常规的Java类型）。为了更好地理解这一点，假设我们想观察Kubernetes `Pod` 资源的变化。有几种方法可以编写这样的 `Watcher` ，保证在本地工作。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:258
#, no-wrap
msgid ""
"client.pods().watch(new Watcher<Pod>() {\n"
"    @Override\n"
"    public void eventReceived(Action action, Pod pod) {\n"
"        // do something\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:264
#, no-wrap
msgid ""
"    @Override\n"
"    public void onClose(KubernetesClientException e) {\n"
"        // do something\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:267
#, fuzzy
msgid "or"
msgstr "或"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:275
#, no-wrap
msgid ""
"public class PodResourceWatcher implements Watcher<Pod> {\n"
"    @Override\n"
"    public void eventReceived(Action action, Pod pod) {\n"
"        // do something\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:281
#: upstream/_guides/kubernetes-client.adoc:322
#, no-wrap
msgid ""
"    @Override\n"
"    public void onClose(KubernetesClientException e) {\n"
"        // do something\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:283
#: upstream/_guides/kubernetes-client.adoc:296
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:286
#, no-wrap
msgid "client.pods().watch(new PodResourceWatcher());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:289
#, fuzzy
msgid "Note that defining the generic type via a class hierarchy similar to the following example will also work correctly:"
msgstr "请注意，通过类似于下面这个例子的类的层次结构来定义泛型，也能正常工作。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:294
#, no-wrap
msgid ""
"public abstract class MyWatcher<S> implements Watcher<S> {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:304
#, no-wrap
msgid ""
"client.pods().watch(new MyWatcher<Pod>() {\n"
"    @Override\n"
"    public void eventReceived(Action action, Pod pod) {\n"
"        // do something\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:308
#, fuzzy
msgid "The following example will **not** work in native mode because the generic type of watcher cannot be determined by looking at the class and method definitions thus making Quarkus unable to properly determine the Kubernetes model class for which reflection registration is needed:"
msgstr "下面的例子在本地模式下 *无法* 工作，因为观察者的通用类型不能通过查看类和方法定义来确定，从而使Quarkus无法正确确定需要反射注册的Kubernetes模型类。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:316
#, no-wrap
msgid ""
"public class ResourceWatcher<T extends HasMetadata> implements Watcher<T> {\n"
"    @Override\n"
"    public void eventReceived(Action action, T resource) {\n"
"        // do something\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:324
#, no-wrap
msgid "client.pods().watch(new ResourceWatcher<Pod>());\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kubernetes-client.adoc:327
#, fuzzy, no-wrap
msgid "Note on using Elliptic Curve keys"
msgstr "关于使用椭圆曲线钥匙的说明"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:330
#, fuzzy
msgid "Please note that if you would like to use Elliptic Curve keys with Kubernetes Client then adding a BouncyCastle PKIX dependency is required:"
msgstr "请注意，如果你想在Kubernetes客户端使用椭圆曲线密钥，则需要添加BouncyCastle PKIX的依赖关系。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:338
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bcpkix-jdk18on</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:344
#, no-wrap
msgid "implementation(\"org.bouncycastle:bcpkix-jdk18on\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:347
#, fuzzy
msgid "Note that internally an `org.bouncycastle.jce.provider.BouncyCastleProvider` provider will be registered if it has not already been registered."
msgstr "请注意，在内部，如果一个 `org.bouncycastle.jce.provider.BouncyCastleProvider` 提供者还没有被注册，它将被注册。"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:349
#, fuzzy
msgid "You can have this provider registered as described in the xref:security-customization.adoc#bouncy-castle[BouncyCastle] or xref:security-customization.adoc#bouncy-castle-fips[BouncyCastle FIPS] sections."
msgstr "您可以按照 link:security-customization.html#bouncy-castle[BouncyCastle] 或 link:security-customization.html#bouncy-castle-fips[BouncyCastle FIPS] 部分所述，让该提供商注册。"

#. type: Title ==
#: upstream/_guides/kubernetes-client.adoc:350
#, fuzzy, no-wrap
msgid "Access to the Kubernetes API"
msgstr "访问Kubernetes API"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:354
#, fuzzy
msgid "In many cases in order to access the Kubernetes API server a `ServiceAccount`, `Role` and `RoleBinding` will be necessary.  An example that allows listing all pods could look something like this:"
msgstr "在许多情况下，为了访问Kubernetes API服务器，必须使用 `ServiceAccount` , `Role` 和 `RoleBinding` 。一个允许列出所有pod的例子可以是这样的。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:357
#, no-wrap
msgid "---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:363
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ServiceAccount\n"
"metadata:\n"
"  name: <applicationName>\n"
"  namespace: <namespace>\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:373
#, no-wrap
msgid ""
"apiVersion: rbac.authorization.k8s.io/v1\n"
"kind: Role\n"
"metadata:\n"
"  name: <applicationName>\n"
"  namespace: <namespace>\n"
"rules:\n"
"  - apiGroups: [\"\"]\n"
"    resources: [\"pods\"]\n"
"    verbs: [\"list\"]\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:387
#, no-wrap
msgid ""
"apiVersion: rbac.authorization.k8s.io/v1\n"
"kind: RoleBinding\n"
"metadata:\n"
"  name: <applicationName>\n"
"  namespace: <namespace>\n"
"roleRef:\n"
"  kind: Role\n"
"  name: <applicationName>\n"
"  apiGroup: rbac.authorization.k8s.io\n"
"subjects:\n"
"  - kind: ServiceAccount\n"
"    name: <applicationName>\n"
"    namespace: <namespace>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:391
#, fuzzy
msgid "Replace `<applicationName>` and `<namespace>` with your values.  Have a look at https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/[Configure Service Accounts for Pods] to get further information."
msgstr "用你的值替换 `<applicationName>` 和 `<namespace>` 。请看 link:https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/[为Pod配置服务账户] 以获得更多信息。"

#. type: Title ==
#: upstream/_guides/kubernetes-client.adoc:392
#, fuzzy, no-wrap
msgid "OpenShift Client"
msgstr "OpenShift客户端"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:397
#, fuzzy
msgid "If the targeted Kubernetes cluster is an OpenShift cluster, it is possible to access it through the `openshift-client` extension, in a similar way. This leverages the dedicated fabric8 openshift client, and provides access to `OpenShift` proprietary objects (e.g. `Route`, `ProjectRequest`, `BuildConfig` ...)"
msgstr "如果目标Kubernetes集群是一个OpenShift集群，可以通过 `openshift-client` 扩展，以类似的方式访问它。这利用了专用的fabric8 openshift客户端，并提供了对 `OpenShift` 专有对象的访问（例如： `Route` , `ProjectRequest` , `BuildConfig` ...)"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:400
#, fuzzy
msgid "Note that the configuration properties are shared with the `kubernetes-client` extension. In particular, they have the same `quarkus.kubernetes-client` prefix."
msgstr "请注意，配置属性是与 `kubernetes-client` 扩展共享的。特别是，它们有相同的 `quarkus.kubernetes-client` 前缀。"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:402
#, fuzzy
msgid "Add the extension with:"
msgstr "用以下方式添加扩展。"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:407
#, fuzzy
msgid "Note that `openshift-client` extension has a dependency on the `kubernetes-client` extension."
msgstr "请注意， `openshift-client` 扩展对 `kubernetes-client` 扩展有依赖性。"

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:409
#, fuzzy
msgid "To use the client, inject an `OpenShiftClient` instead of the `KubernetesClient`:"
msgstr "要使用客户端，请注入一个 `OpenShiftClient` ，而不是 `KubernetesClient` 。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:414
#, no-wrap
msgid ""
"@Inject\n"
"private OpenShiftClient openshiftClient;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:417
#, fuzzy
msgid "If you need to override the default `OpenShiftClient`, provide a producer such as:"
msgstr "如果你需要覆盖默认的 `OpenShiftClient` ，提供一个生产者，如。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:422
#, no-wrap
msgid ""
"@Singleton\n"
"public class OpenShiftClientProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:429
#, no-wrap
msgid ""
"    @Produces\n"
"    public OpenShiftClient openshiftClient() {\n"
"        // here you would create a custom client\n"
"        return new DefaultOpenShiftClient();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:432
#, fuzzy
msgid "Mock support is also provided in a similar fashion:"
msgstr "模拟支持也以类似方式提供。"

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:438
#, no-wrap
msgid ""
"@QuarkusTestResource(OpenShiftMockServerTestResource.class)\n"
"@QuarkusTest\n"
"public class OpenShiftClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:442
#, no-wrap
msgid ""
"    @MockServer\n"
"    private OpenShiftMockServer mockServer;\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:446
msgid "Or by using the `@WithOpenShiftTestServer` similar to the `@WithKubernetesTestServer` explained in the previous section:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:452
#, no-wrap
msgid ""
"@WithOpenShiftTestServer\n"
"@QuarkusTest\n"
"public class OpenShiftClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:456
#, no-wrap
msgid ""
"    @OpenShiftTestServer\n"
"    private OpenShiftServer mockOpenShiftServer;\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kubernetes-client.adoc:459
msgid "To use this feature, you have to add a dependency on `quarkus-test-openshift-client`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:468
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-openshift-client</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kubernetes-client.adoc:474
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-openshift-client\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kubernetes-client.adoc:476
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#, fuzzy
#~ msgid "Overriding"
#~ msgstr "覆盖"

#, fuzzy
#~ msgid "Note that the full list of properties is available in the https://github.com/quarkusio/quarkus/blob/main/extensions/kubernetes-client/runtime-internal/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesClientBuildConfig.java[KubernetesClientBuildConfig] class."
#~ msgstr "注意，完整的属性列表可在 link:https://github.com/quarkusio/quarkus/blob/main/extensions/kubernetes-client/runtime-internal/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesClientBuildConfig.java[KubernetesClientBuildConfig] 类中找到。"
