# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-02-10 15:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/picocli.adoc:6
#, fuzzy, no-wrap
msgid "Command Mode with Picocli"
msgstr "使用Picocli的命令模式"

#. type: Plain text
#: upstream/_guides/picocli.adoc:12
#, fuzzy
msgid "https://picocli.info/[Picocli] is an open source tool for creating rich command line applications."
msgstr "link:https://picocli.info/[Picocli] 是一个开源的工具，用于创建丰富的命令行应用程序。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:14
#, fuzzy
msgid "Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage."
msgstr "Quarkus提供对使用Picocli的支持。本指南包含 `picocli` 扩展使用的例子。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:16
#, fuzzy
msgid "If you are not familiar with the Quarkus Command Mode, consider reading the xref:command-mode-reference.adoc[Command Mode reference guide] first."
msgstr "如果你不熟悉Quarkus命令模式，可以考虑先阅读 link:command-mode-reference.html[命令模式参考指南] 。"

#. type: Title ==
#: upstream/_guides/picocli.adoc:17
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "配置"

#. type: Plain text
#: upstream/_guides/picocli.adoc:21
#, fuzzy
msgid "Once you have your Quarkus project configured you can add the `picocli` extension to your project by running the following command in your project base directory."
msgstr "一旦你配置好你的Quarkus项目，你就可以通过在你的项目基础目录下运行以下命令，将 `picocli` 扩展到你的项目中。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:26 upstream/_guides/picocli.adoc:301
#, fuzzy
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:33
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-picocli</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/picocli.adoc:35
#, fuzzy, no-wrap
msgid "Simple command line application"
msgstr "简单的命令行应用"

#. type: Plain text
#: upstream/_guides/picocli.adoc:38
#, fuzzy
msgid "Simple PicocliApplication with only one `Command` can be created as follows:"
msgstr "简单的PicocliApplication只有一个 `Command` ，可以按如下方式创建。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:42 upstream/_guides/picocli.adoc:102
#: upstream/_guides/picocli.adoc:137 upstream/_guides/picocli.adoc:243
#, no-wrap
msgid "package com.acme.picocli;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:44
#, no-wrap
msgid "import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:47
#, no-wrap
msgid ""
"import javax.enterprise.context.Dependent;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:50
#, no-wrap
msgid ""
"@CommandLine.Command // <1>\n"
"public class HelloCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:53
#, no-wrap
msgid ""
"    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n"
"    String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:55
#, no-wrap
msgid "    private final GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:59
#, no-wrap
msgid ""
"    public HelloCommand(GreetingService greetingService) { // <2>\n"
"        this.greetingService = greetingService;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:65
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        greetingService.sayHello(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:72
#, no-wrap
msgid ""
"@Dependent\n"
"class GreetingService {\n"
"    void sayHello(String name) {\n"
"        System.out.println(\"Hello \" + name + \"!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:74
#, fuzzy
msgid "If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine."
msgstr "如果只有一个用 `picocli.CommandLine.Command` 注释的类，它将被用作Picocli CommandLine的入口点。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:75
#, fuzzy
msgid "All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans."
msgstr "所有用 `picocli.CommandLine.Command` 注释的类都被注册为CDI Bean。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:79
#, fuzzy
msgid "Beans with `@CommandLine.Command` should not use proxied scopes (e.g. do not use `@ApplicationScope`)  because Picocli will not be able to set field values in such beans. This extension will register classes with `@CommandLine.Command` annotation using `@Depended` scope. If you need to use proxied scope, then annotate setter and not field, for example:"
msgstr "带有 `@CommandLine.Command` 的Bean不应该使用代理作用域（例如不要使用 `@ApplicationScope` ），因为Picocli将无法在这样的Bean中设置字段值。这个扩展将使用 `@Depended` 作用域注册带有 `@CommandLine.Command` 注释的类。如果你需要使用代理作用域，那么请注解setter而不是field，例如。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:85
#, no-wrap
msgid ""
"@CommandLine.Command\n"
"@ApplicationScoped\n"
"public class EntryCommand {\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:90
#, no-wrap
msgid ""
"    @CommandLine.Option(names = \"-n\")\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:92 upstream/_guides/picocli.adoc:192
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/picocli.adoc:94
#, fuzzy, no-wrap
msgid "Command line application with multiple Commands"
msgstr "具有多条命令的命令行应用程序"

#. type: Plain text
#: upstream/_guides/picocli.adoc:98
#, fuzzy
msgid "When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.  This can be overwritten with the `quarkus.picocli.top-command` property."
msgstr "当多个类都有 `picocli.CommandLine.Command` 注解时，那么其中一个类也需要有 `io.quarkus.picocli.runtime.annotations.TopCommand` 注解。这可以用 `quarkus.picocli.top-command` 属性来覆盖。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:105
#, no-wrap
msgid ""
"import io.quarkus.picocli.runtime.annotations.TopCommand;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:110
#, no-wrap
msgid ""
"@TopCommand\n"
"@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n"
"public class EntryCommand {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:113
#, no-wrap
msgid ""
"@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n"
"class HelloCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:119
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"Hello World!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:122
#, no-wrap
msgid ""
"@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n"
"class GoodByeCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:128
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"Goodbye World!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/picocli.adoc:130
#, fuzzy, no-wrap
msgid "Customizing Picocli CommandLine instance"
msgstr "定制Picocli命令行实例"

#. type: Plain text
#: upstream/_guides/picocli.adoc:133
#, fuzzy
msgid "You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:"
msgstr "你可以通过产生你自己的bean实例来定制由 `picocli` 扩展使用的CommandLine类。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:141
#, no-wrap
msgid ""
"import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n"
"import io.quarkus.picocli.runtime.annotations.TopCommand;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:144
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:150
#, no-wrap
msgid ""
"@TopCommand\n"
"@CommandLine.Command\n"
"public class EntryCommand implements Runnable {\n"
"    @CommandLine.Spec\n"
"    CommandLine.Model.CommandSpec spec;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:156
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"My name is: \" + spec.name());\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:159
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:165
#, no-wrap
msgid ""
"    @Produces\n"
"    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n"
"        return factory.create().setCommandName(\"CustomizedName\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:167
#, fuzzy
msgid "`PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected."
msgstr " `PicocliCommandLineFactory` 将创建一个注入了 和 的 CommandLine 实例。 `TopCommand` `CommandLine.IFactory` "

#. type: Title ==
#: upstream/_guides/picocli.adoc:168
#, fuzzy, no-wrap
msgid "Different entry command for each profile"
msgstr "每个配置文件都有不同的输入命令"

#. type: Plain text
#: upstream/_guides/picocli.adoc:171
#, fuzzy
msgid "It is possible to create different entry command for each profile, using `@IfBuildProfile`:"
msgstr "可以为每个配置文件创建不同的条目命令，使用 `@IfBuildProfile` 。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:176
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Config {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:183
#, no-wrap
msgid ""
"    @Produces\n"
"    @TopCommand\n"
"    @IfBuildProfile(\"dev\")\n"
"    public Object devCommand() {\n"
"        return DevCommand.class; // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:190
#, no-wrap
msgid ""
"    @Produces\n"
"    @TopCommand\n"
"    @IfBuildProfile(\"prod\")\n"
"    public Object prodCommand() {\n"
"        return new ProdCommand(\"Configured by me!\");\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:194
#, fuzzy
msgid "You can return instance of `java.lang.Class` here. In such case `CommandLine` will try to instantiate this class using `CommandLine.IFactory`."
msgstr "你可以在这里返回 `java.lang.Class` 的实例。在这种情况下， `CommandLine` 将尝试使用 `CommandLine.IFactory` 来实例化这个类。"

#. type: Title ==
#: upstream/_guides/picocli.adoc:195
#, fuzzy, no-wrap
msgid "Configure CDI Beans with parsed arguments"
msgstr "用解析的参数配置CDI Bean"

#. type: Plain text
#: upstream/_guides/picocli.adoc:200
#, fuzzy
msgid "You can use `Event<CommandLine.ParseResult>` or just `CommandLine.ParseResult` to configure CDI beans based on arguments parsed by Picocli.  This event will be generated in `QuarkusApplication` class created by this extension. If you are providing your own `@QuarkusMain` this event will not be raised.  `CommandLine.ParseResult` is created from default `CommandLine` bean."
msgstr "你可以使用 `Event<CommandLine.ParseResult>` ，或者只使用 `CommandLine.ParseResult` ，根据Picocli解析的参数配置CDI Bean。这个事件将在这个扩展创建的 `QuarkusApplication` 类中产生。如果你提供你自己的 `@QuarkusMain` ，这个事件将不会被引发。 `CommandLine.ParseResult` 是由默认的 `CommandLine` Bean创建的。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:205
#, no-wrap
msgid ""
"@CommandLine.Command\n"
"public class EntryCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:208
#, no-wrap
msgid ""
"    @CommandLine.Option(names = \"-c\", description = \"JDBC connection string\")\n"
"    String connectionString;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:211
#, no-wrap
msgid ""
"    @Inject\n"
"    DataSource dataSource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:221
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        try (Connection c = dataSource.getConnection()) {\n"
"            // Do something\n"
"        } catch (SQLException throwables) {\n"
"            // Handle error\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:224
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class DatasourceConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:233
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped // <1>\n"
"    DataSource dataSource(CommandLine.ParseResult parseResult) {\n"
"        PGSimpleDataSource ds = new PGSimpleDataSource();\n"
"        ds.setURL(parseResult.matchedOption(\"c\").getValue().toString());\n"
"        return ds;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:235
#, fuzzy
msgid "`@ApplicationScoped` used for lazy initialization"
msgstr " `@ApplicationScoped` 用于懒惰的初始化"

#. type: Title ==
#: upstream/_guides/picocli.adoc:236
#, fuzzy, no-wrap
msgid "Providing own QuarkusMain"
msgstr "提供自己的QuarkusMain"

#. type: Plain text
#: upstream/_guides/picocli.adoc:239
#, fuzzy
msgid "You can also provide your own application entry point annotated with `QuarkusMain` (as described in xref:command-mode-reference.adoc[Command Mode reference guide])."
msgstr "你也可以提供你自己的应用程序入口点，用 `QuarkusMain` （如 link:command-mode-reference.html[命令模式参考指南] 所述）来注释。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:247
#, no-wrap
msgid ""
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:249
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:255
#, no-wrap
msgid ""
"@QuarkusMain\n"
"@CommandLine.Command(name = \"demo\", mixinStandardHelpOptions = true)\n"
"public class ExampleApp implements Runnable, QuarkusApplication {\n"
"    @Inject\n"
"    CommandLine.IFactory factory; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:260
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        // business logic\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:266
#, no-wrap
msgid ""
"    @Override\n"
"    public int run(String... args) throws Exception {\n"
"        return new CommandLine(this, factory).execute(args);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:268
#, fuzzy
msgid "Quarkus-compatible `CommandLine.IFactory` bean created by `picocli` extension."
msgstr "Quarkus兼容的 `CommandLine.IFactory` bean，由 `picocli` extension创建。"

#. type: Title ==
#: upstream/_guides/picocli.adoc:269
#, fuzzy, no-wrap
msgid "Native mode support"
msgstr "支持本地模式"

#. type: Plain text
#: upstream/_guides/picocli.adoc:272
#, fuzzy
msgid "This extension uses the Quarkus standard build steps mechanism to support GraalVM Native images. In the exceptional case that incompatible changes in a future picocli release cause any issue, the following configuration can be used to fall back to the annotation processor from the picocli project as a temporary workaround:"
msgstr "这个扩展使用Quarkus标准构建步骤机制来支持GraalVM Native图像。在特殊情况下，如果未来的picocli版本中不兼容的变化导致任何问题，以下配置可以用来回退到picocli项目中的注释处理器，作为一个临时的变通。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:279
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>info.picocli</groupId>\n"
"  <artifactId>picocli-codegen</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:282
#, fuzzy
msgid "For Gradle, you need to add the following in `dependencies` section of the `build.gradle` file:"
msgstr "对于Gradle，你需要在 `build.gradle` 文件的 `dependencies` 部分添加以下内容。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:287
#, no-wrap
msgid ""
"annotationProcessor enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
"annotationProcessor 'info.picocli:picocli-codegen'\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/picocli.adoc:289
#, fuzzy, no-wrap
msgid "Development Mode"
msgstr "发展模式"

#. type: Plain text
#: upstream/_guides/picocli.adoc:292
#, fuzzy
msgid "In the development mode, i.e. when running `mvn quarkus:dev`, the application is executed and restarted every time the `Space bar` key is pressed. You can also pass arguments to your command line app via the `quarkus.args` system property, e.g. `mvn quarkus:dev -Dquarkus.args='--help'` and `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'`."
msgstr "在开发模式下，即运行 `mvn quarkus:dev` ，每次按下 `Space bar` 键时，应用程序就会被执行并重新启动。你也可以通过 `quarkus.args` 系统属性向你的命令行应用程序传递参数，例如： `mvn quarkus:dev -Dquarkus.args='--help'` 和 `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'` 。"

#. type: Title ==
#: upstream/_guides/picocli.adoc:293
#, fuzzy, no-wrap
msgid "Kubernetes support"
msgstr "支持Kubernetes"

#. type: Plain text
#: upstream/_guides/picocli.adoc:296
#, fuzzy
msgid "Once you have your command line application, you can also generate the resources necessary to install and use this application in Kubernetes by adding the `kubernetes` extension. To install the `kubernetes` extension, run the following command in your project base directory."
msgstr "一旦你有了你的命令行应用程序，你也可以通过添加 `kubernetes` 扩展来生成必要的资源，以便在Kubernetes中安装和使用这个应用程序。要安装 `kubernetes` 扩展，在你的项目基础目录下运行以下命令。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:308
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:311
#, fuzzy
msgid "And, next, build the application with:"
msgstr "而且，接下来，用以下方式构建应用程序。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:315
#, fuzzy
msgid "The Kubernetes extension will detect the presence of the Picocli extension and hence generate a https://kubernetes.io/docs/concepts/workloads/controllers/job/[Job] resource instead of a https://kubernetes.io/docs/concepts/workloads/controllers/deployment/[Deployment] resource in the `target/kubernetes/` directory."
msgstr "Kubernetes扩展将检测到Picocli扩展的存在，因此在 `target/kubernetes/` 目录中生成一个 link:https://kubernetes.io/docs/concepts/workloads/controllers/job/[作业] 资源而不是 link:https://kubernetes.io/docs/concepts/workloads/controllers/deployment/[部署] 资源。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:317
#, fuzzy
msgid "If you don't want to generate a Job resource, you can specify the resource you want to generate using the property `quarkus.kubernetes.deployment-kind`. For example, if you want to generate a Deployment resource, use `quarkus.kubernetes.deployment-kind=Deployment`."
msgstr "如果你不想生成Job资源，你可以使用属性 `quarkus.kubernetes.deployment-kind` ，指定你要生成的资源。例如，如果你想生成一个部署资源，使用 `quarkus.kubernetes.deployment-kind=Deployment` 。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:319
#, fuzzy
msgid "Moreover, you can provide the arguments that will be used by the Kubernetes job via the property `quarkus.kubernetes.arguments`. For example, after adding the property `quarkus.kubernetes.arguments=A,B` and building your project, the following Job resource will be generated:"
msgstr "此外，你可以通过属性 `quarkus.kubernetes.arguments` ，提供将被Kubernetes作业使用的参数。例如，在添加属性 `quarkus.kubernetes.arguments=A,B` ，并构建你的项目后，将生成以下作业资源。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:360
#, no-wrap
msgid ""
"apiVersion: batch/v1\n"
"kind: Job\n"
"metadata:\n"
"  labels:\n"
"    app.kubernetes.io/name: app\n"
"    app.kubernetes.io/version: 0.1-SNAPSHOT\n"
"  name: app\n"
"spec:\n"
"  completionMode: NonIndexed\n"
"  selector:\n"
"    matchLabels:\n"
"      app.kubernetes.io/name: app\n"
"      app.kubernetes.io/version: 0.1-SNAPSHOT\n"
"  suspend: false\n"
"  template:\n"
"    metadata:\n"
"      labels:\n"
"        app.kubernetes.io/name: app\n"
"        app.kubernetes.io/version: 0.1-SNAPSHOT\n"
"    spec:\n"
"      containers:\n"
"        - args:\n"
"            - A\n"
"            - B\n"
"          env:\n"
"            - name: KUBERNETES_NAMESPACE\n"
"              valueFrom:\n"
"                fieldRef:\n"
"                  fieldPath: metadata.namespace\n"
"          image: docker.io/user/app:0.1-SNAPSHOT\n"
"          imagePullPolicy: Always\n"
"          name: app\n"
"          ports:\n"
"            - containerPort: 8080\n"
"              name: http\n"
"              protocol: TCP\n"
"      restartPolicy: OnFailure\n"
"      terminationGracePeriodSeconds: 10\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:364
msgid "Finally, the Kubernetes job will be launched every time it is installed in Kubernetes. You can know more about how to run Kubernetes jobs in this https://kubernetes.io/docs/concepts/workloads/controllers/job/#running-an-example-job[document]."
msgstr ""

#. type: Title ==
#: upstream/_guides/picocli.adoc:366
#, no-wrap
msgid "Configuration Reference"
msgstr ""
