# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "使用OpenID连接（OIDC）多租户"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:15
#, fuzzy
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr "本指南展示了您的OpenID Connect（OIDC）应用程序如何支持多租户，以便您可以从单个应用程序中为多个租户提供服务。租户可以是同一OpenID提供商中的不同领域或安全域，甚至是不同的OpenID提供商。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:17
#, fuzzy
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr "当从同一个应用程序为多个客户提供服务时（例如：SaaS），每个客户是一个租户。通过对你的应用程序启用多租户支持，你也可以为每个租户支持不同的认证策略，即使这意味着对不同的OpenID提供商进行认证，如Keycloak和Google。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:19
#, fuzzy
msgid "Please read the xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr "如果你需要使用承载令牌授权租户，请阅读《 link:security-openid-connect.html[使用OpenID Connect保护服务应用] 》指南。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:21
msgid "If you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow, read the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:23
msgid "Also see the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:25
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:30
#, fuzzy
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "link:https://stedolan.github.io/jq/[jq工具]"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:31
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:34
#, fuzzy
msgid "In this example, we build a very simple application which supports two resource methods:"
msgstr "在这个例子中，我们建立了一个非常简单的应用程序，提供了一个单一的土地页面。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:36
#, fuzzy
msgid "`/{tenant}`"
msgstr " `/{tenant}` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:38
#, fuzzy
msgid "This resource returns information obtained from the ID token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "土地页面由JAX-RS资源提供，并显示从OpenID提供者那里获得的关于认证用户和当前租户的信息。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:40
#, fuzzy
msgid "`/{tenant}`/bearer"
msgstr " `/{tenant}` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:42
#, fuzzy
msgid "This resource returns information obtained from the Access token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "土地页面由JAX-RS资源提供，并显示从OpenID提供者那里获得的关于认证用户和当前租户的信息。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:43
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:47
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:49
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:51
#, fuzzy
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "该解决方案位于 `security-openid-connect-multi-tenancy-quickstart` {quickstarts-treeurl}/security-openid-connect-multi-tenancy-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:52
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:55
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:62
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `oidc` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:67
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/security-openid-connect-multitenancy.adoc:69
#: upstream/_guides/security-openid-connect-multitenancy.adoc:413
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:75
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-openid-connect-multitenancy.adoc:78
#: upstream/_guides/security-openid-connect-multitenancy.adoc:433
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:81
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:83
#, fuzzy, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:86
#, fuzzy
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr "让我们从实现 `/{tenant}` 端点开始。从下面的源代码可以看出，它只是一个普通的JAX-RS资源。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:90
#: upstream/_guides/security-openid-connect-multitenancy.adoc:160
#: upstream/_guides/security-openid-connect-multitenancy.adoc:247
#: upstream/_guides/security-openid-connect-multitenancy.adoc:283
#: upstream/_guides/security-openid-connect-multitenancy.adoc:466
#: upstream/_guides/security-openid-connect-multitenancy.adoc:548
#: upstream/_guides/security-openid-connect-multitenancy.adoc:803
#, no-wrap
msgid "package org.acme.quickstart.oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:95
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:97
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:99
#, no-wrap
msgid "import io.quarkus.oidc.IdToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:108
#, no-wrap
msgid ""
"@Path(\"/{tenant}\")\n"
"public class HomeResource {\n"
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:114
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:126
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the ID Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return ID Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    public String getIdTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:129
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:132
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:145
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the Access Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return Access Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    @Path(\"bearer\")\n"
"    public String getAccessTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:148
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.accessToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(accessToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:152
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:156
#, fuzzy
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface which can be used to resolve the tenant configurations dynamically:"
msgstr "为了从传入的请求中解析租户并将其映射到application.properties中的特定 `quarkus-oidc` 租户配置，你需要为 `io.quarkus.oidc.TenantResolver` 接口创建一个实现。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:162
#: upstream/_guides/security-openid-connect-multitenancy.adoc:249
#: upstream/_guides/security-openid-connect-multitenancy.adoc:285
#: upstream/_guides/security-openid-connect-multitenancy.adoc:807
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:164
#, no-wrap
msgid "import org.eclipse.microprofile.config.ConfigProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:171
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcRequestContext;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.OidcTenantConfig.ApplicationType;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:174
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:178
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n"
"        String path = context.request().path();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:181
#, no-wrap
msgid ""
"        if (path.startsWith(\"/tenant-a\")) {\n"
"           String keycloakUrl = ConfigProvider.getConfig().getValue(\"keycloak.url\", String.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:195
#, no-wrap
msgid ""
"            OidcTenantConfig config = new OidcTenantConfig();\n"
"            config.setTenantId(\"tenant-a\");\n"
"            config.setAuthServerUrl(keycloakUrl + \"/realms/tenant-a\");\n"
"            config.setClientId(\"multi-tenant-client\");\n"
"            config.getCredentials().setSecret(\"secret\");\n"
"            config.setApplicationType(ApplicationType.HYBRID);\n"
"            return Uni.createFrom().item(config);\n"
"        } else {\n"
"            // resolve to default tenant config\n"
"            return Uni.createFrom().nullItem();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:198
#, fuzzy
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr "从上面的实现来看，租户是从请求路径中解析出来的，因此在无法推断出租户的情况下， `null` ，表示应该使用默认租户配置。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:200
#, fuzzy
msgid "Note the `tenant-a` application type is `hybrid` - it can accept HTTP bearer tokens if provided, otherwise it will initiate an authorization code flow when the authentication is required."
msgstr "注意 `tenant-a` 应用程序类型是 `hybrid` - 如果提供了HTTP承载令牌，它可以接受HTTP承载令牌，否则当需要认证时，它将启动一个授权代码流。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:201
#, fuzzy, no-wrap
msgid "Configuring the application"
msgstr "配置应用程序"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:209
#: upstream/_guides/security-openid-connect-multitenancy.adoc:231
#: upstream/_guides/security-openid-connect-multitenancy.adoc:451
#, no-wrap
msgid ""
"# Default Tenant Configuration\n"
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=multi-tenant-client\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:211
#: upstream/_guides/security-openid-connect-multitenancy.adoc:453
#, no-wrap
msgid "# Tenant A Configuration is created dynamically in CustomTenantConfigResolver\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:215
#: upstream/_guides/security-openid-connect-multitenancy.adoc:240
#: upstream/_guides/security-openid-connect-multitenancy.adoc:457
#, no-wrap
msgid ""
"# HTTP Security Configuration\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:218
#, fuzzy
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. Note that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` - it is done to support testing a multi-tenant application with `Dev Services For Keycloak`. This configuration is using a Keycloak instance to authenticate users."
msgstr "第一个配置是默认的租户配置，当不能从请求中推断出租户时，就应该使用这个配置。这个配置是使用一个Keycloak实例来验证用户。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:220
#, fuzzy
msgid "The second configuration is provided by `TenantConfigResolver`, it is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr "第二个配置是当传入的请求被映射到租户 `tenant-a` ，将使用的配置。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:222
#, fuzzy
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "注意，这两种配置都映射到同一个Keycloak服务器实例，同时使用不同的 `realms` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:224
#, fuzzy
msgid "Alternatively you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr "另外，你可以直接在 `application.properties` ，配置租户 `tenant-a` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:236
#, no-wrap
msgid ""
"# Tenant A Configuration\n"
"quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/realms/tenant-a\n"
"quarkus.oidc.tenant-a.client-id=multi-tenant-client\n"
"quarkus.oidc.tenant-a.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:243
#, fuzzy
msgid "and use a custom `TenantConfigResolver` to resolve it:"
msgstr "并使用一个自定义的 `TenantConfigResolver` 来解决。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:252
#: upstream/_guides/security-openid-connect-multitenancy.adoc:288
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:255
#: upstream/_guides/security-openid-connect-multitenancy.adoc:291
#: upstream/_guides/security-openid-connect-multitenancy.adoc:814
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:260
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:265
#: upstream/_guides/security-openid-connect-multitenancy.adoc:746
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant configuration\n"
"            return null;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:269
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:272
#, fuzzy
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr "你可以在你的配置文件中定义多个租户，只是要确保它们有一个独特的别名，以便你在从你的 `TenantResolver` 实现中解析一个租户时可以正确地映射它们。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:274
#, fuzzy
msgid "However, using a static tenant resolution (configuring tenants in `application.properties` and resolving them with `TenantResolver`) prevents testing the endpoint with `Dev Services for Keycloak` since `Dev Services for Keycloak` has no knowledge of how the requests will be mapped to individual tenants and can not dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values and therefore using `%prod` prefixes with the tenant-specific URLs in `application.properties` will not work in tests or devmode."
msgstr "然而，使用静态租户解析（在 `application.properties` 中配置租户，然后用 `TenantResolver` 来解析）会阻止用 `Dev Services for Keycloak` 来测试端点，因为 `Dev Services for Keycloak` 不知道请求将如何被映射到各个租户，并且不能动态地提供租户特定的 `quarkus.oidc.<tenant-id>.auth-server-url` 值，因此在 `application.properties` 中使用 `%prod` 前缀和租户特定的URL 将在测试或devmode 中无法工作。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:279
#, fuzzy
msgid "When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.  Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr "当当前租户代表一个OIDC `web-app` 应用程序时，当自定义租户解析器为所有完成代码认证流程的请求和已经认证的请求调用时，当前 `io.vertx.ext.web.RoutingContext` 将包含一个 `tenant-id` 属性，此时租户特定状态或会话cookie已经存在。因此，当使用多个OpenID连接提供商时，如果 `RoutingContext` 没有设置 `tenant-id` 属性，你只需要一个特定路径检查来解析租户ID，例如。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:301
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = context.get(\"tenant-id\");\n"
"        if (tenantId != null) {\n"
"            return tenantId;\n"
"        } else {\n"
"            // Initial login request\n"
"            String path = context.request().path();\n"
"            String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:310
#, no-wrap
msgid ""
"            if (parts.length == 0) {\n"
"                // resolve to default tenant configuration\n"
"                return null;\n"
"            }\n"
"            return parts[1];\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:313
msgid "In fact, this is how Quarkus OIDC resolves static custom tenants itself if no custom `TenantResolver` is registered."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:315
#, fuzzy
msgid "A similar technique can be used with `TenantConfigResolver` where a `tenant-id` provided in the context can be used to return `OidcTenantConfig` already prepared with the previous request."
msgstr "类似的技术也可以用于 `TenantConfigResolver` ，在上下文中提供的 `tenant-id` ，可以用来返回已经准备好的前一个请求的 `OidcTenantConfig` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:322
#, fuzzy
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] or xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy] and both tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver or MongoDB with Panache Mongo Database Resolver as a `RoutingContext` attribute, for example:"
msgstr "如果你也使用 link:hibernate-orm.html#multitenancy[Hibernate ORM多租户] ，并且OIDC和Hibernate ORM租户ID都是一样的，必须从Vert.x `RoutingContext` ，那么你可以把租户ID从OIDC租户解析器传递到Hibernate ORM租户解析器，作为一个 `RoutingContext` 属性，例如。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:326
#: upstream/_guides/security-openid-connect-multitenancy.adoc:657
#, no-wrap
msgid "public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:334
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = extractTenantId(context);\n"
"        context.put(\"tenantId\", tenantId);\n"
"        return tenantId;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:337
#, fuzzy, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "启动和配置Keycloak服务器"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:340
#, fuzzy
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "要启动Keycloak服务器，你可以使用Docker，只需运行以下命令。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:344
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:347
#, fuzzy
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "其中 `keycloak.version` 应该设置为 `17.0.0` 或更高。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:349
#, fuzzy
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "你应该能够在 link:http://localhost:8180[localhost:8180] 访问你的Keycloak服务器。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:351
#, fuzzy
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "以 `admin` 用户身份登录，访问Keycloak管理控制台。用户名应该是 `admin` ，密码是 `admin` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:353
#, fuzzy
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr "现在，按照下面的步骤，为两个租户导入境界。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:355
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr "导入{quickstarts-treeurl}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json]来创建默认境界。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:356
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "导入{quickstarts-treeurl}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json]，为租户创建境界 `tenant-a` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:358
#, fuzzy
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "更多细节，请参阅Keycloak关于如何 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[创建一个新领域] 的文档。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:359
#, fuzzy, no-wrap
msgid "Running and Using the Application"
msgstr "运行和使用应用程序"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:361
#, fuzzy, no-wrap
msgid "Running in Developer Mode"
msgstr "在开发模式下运行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:364
#, fuzzy
msgid "To run the microservice in dev mode, use:"
msgstr "要在开发模式下运行微服务，请使用。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:367
#, fuzzy, no-wrap
msgid "Running in JVM Mode"
msgstr "在JVM模式下运行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:370
#, fuzzy
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr "当你玩完开发模式后，你可以把它作为一个标准的Java应用程序运行。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:372
#, fuzzy
msgid "First compile it:"
msgstr "首先编译它。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:376
#, fuzzy
msgid "Then run it:"
msgstr "然后运行它。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:380
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:382
#, fuzzy, no-wrap
msgid "Running in Native Mode"
msgstr "在本地模式下运行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:385
#, fuzzy
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "这个同样的演示可以被编译成本地代码：不需要修改。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:389
#, fuzzy
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "这意味着你不再需要在你的生产环境中安装JVM，因为运行时技术包含在生产的二进制文件中，并以最小的资源开销优化运行。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:392
#, fuzzy
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the native build:"
msgstr "编译会花一点时间，所以这一步默认是禁用的；让我们通过启用本地构建来再次构建。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:396
#, fuzzy
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "喝完一杯咖啡后，你就可以直接运行这个二进制文件。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:400
#, no-wrap
msgid "./target/security-openid-connect-multi-tenancy-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:402
#, fuzzy, no-wrap
msgid "Test the Application"
msgstr "测试应用程序"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:404
#, fuzzy, no-wrap
msgid "Use Dev Services for Keycloak"
msgstr "为Keycloak使用开发服务"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:408
#, fuzzy
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will import configured realms and set a base Keycloak URL for `CustomTenantResolver` used in this quickstart to calculate a realm specific URL."
msgstr "建议使用 link:security-openid-connect-dev-services.html[Keycloak的Dev Services] 进行针对Keycloak的集成测试。 `Dev Services for Keycloak` ，将启动和初始化一个测试容器：它将导入配置的境界，并为本快速入门中使用的 `CustomTenantResolver` ，设置一个基本的Keycloak URL，以计算一个境界的具体URL。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:411
#, fuzzy
msgid "First you need to add the following dependencies:"
msgstr "首先，你需要添加以下依赖项。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:430
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:438
#, no-wrap
msgid ""
"testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:442
#, fuzzy
msgid "`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.  `HtmlUnit` is used for testing the `/{tenant}` endpoint and the authorization code flow."
msgstr " `quarkus-test-keycloak-server` 提供了一个实用类 ，用于获取特定领域的访问令牌，你可以与 一起使用，以测试 端点，期待承载访问令牌。 ，用于测试 端点和授权代码流。 `io.quarkus.test.keycloak.client.KeycloakTestClient` `RestAssured` `/{tenant}/bearer` `HtmlUnit` `/{tenant}` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:444
#, fuzzy
msgid "Next, configure the required realms:"
msgstr "接下来，配置所需的境界。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:459
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=default-tenant-realm.json,tenant-a-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:462
#, fuzzy
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr "最后，编写你的测试，它将在JVM模式下执行。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:470
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.containsString;\n"
"import static org.junit.jupiter.api.Assertions.assertEquals;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:472
#, no-wrap
msgid "import java.io.IOException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:474
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:479
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:483
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:486
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:488
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:493
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInDefaultTenant() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/default\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:495
#, no-wrap
msgid "            assertEquals(\"Sign in to quarkus\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:497
#: upstream/_guides/security-openid-connect-multitenancy.adoc:515
#, no-wrap
msgid "            HtmlForm loginForm = page.getForms().get(0);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:500
#: upstream/_guides/security-openid-connect-multitenancy.adoc:518
#, no-wrap
msgid ""
"            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n"
"            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:502
#: upstream/_guides/security-openid-connect-multitenancy.adoc:520
#, no-wrap
msgid "            page = loginForm.getInputByName(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:506
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"tenant\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:511
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantAWebApp() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/tenant-a\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:513
#, no-wrap
msgid "            assertEquals(\"Sign in to tenant-a\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:524
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"alice@tenant-a.org\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:530
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantABearerToken() throws IOException {\n"
"        RestAssured.given().auth().oauth2(getAccessToken()).when()\n"
"            .get(\"/tenant-a/bearer\").then().body(containsString(\"alice@tenant-a.org\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:534
#, no-wrap
msgid ""
"    private String getAccessToken() {\n"
"        return keycloakClient.getRealmAccessToken(\"tenant-a\", \"alice\", \"alice\", \"multi-tenant-client\", \"secret\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:541
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:544
#, fuzzy
msgid "and in native mode:"
msgstr "在本地模式下运行"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:550
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:554
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class CodeFlowIT extends CodeFlowTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:557
#, fuzzy
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "请参阅 link:security-openid-connect-dev-services.html[Keycloak的开发服务] ，了解更多关于它的初始化和配置方式的信息。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:558
#, fuzzy, no-wrap
msgid "Use Browser"
msgstr "使用浏览器"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:561
#, fuzzy
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "为了测试应用程序，你应该打开你的浏览器并访问以下网址。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:563
#, fuzzy
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "link:http://localhost:8080/default[http://localhost:8080/default]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:566
#, fuzzy
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr "如果一切按预期进行，你应该被重定向到Keycloak服务器进行认证。注意，请求的路径定义了一个 `default` 租户，而我们在配置文件中没有映射。在这种情况下，将使用默认配置。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:568
#, fuzzy
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "为了验证应用程序，你应该在Keycloak的登录页面上输入以下证书。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:570
#, fuzzy
msgid "Username: *alice*"
msgstr "用户名: *alice* "

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:571
#, fuzzy
msgid "Password: *alice*"
msgstr "密码： *alice* "

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:573
#, fuzzy
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "点击 `Login` 按钮后，你应该被重新引导到应用程序。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:575
#, fuzzy
msgid "If you try now to access the application at the following URL:"
msgstr "如果你现在尝试在以下网址访问该应用程序。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:577
#, fuzzy
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "link:http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:579
#, fuzzy
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr "你应该再次被重定向到Keycloak的登录页面。然而，现在你要使用一个不同的 `realm` 来验证。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:582
#, fuzzy
msgid "In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr "在这两种情况下，如果用户被成功认证，登陆页面将显示用户的姓名和电子邮件。即使用户 `alice` ，对应用程序来说，他们是属于不同领域/租户的不同用户。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:584
#, fuzzy, no-wrap
msgid "Static tenant configuration resolution"
msgstr "禁用租户配置"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:588
msgid "When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.  To configure the resolution of the tenant identifier, use one of the following options:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:590
msgid "xref:default-tenant-resolver[Default resolution]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:591
msgid "xref:tenant-resolver[Resolve with `TenantResolver`]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:592
msgid "xref:annotations-tenant-resolver[Resolve with annotations]"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:594
#, no-wrap
msgid "Default resolution"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:597
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in the last segment of the request path."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:599
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:607
#, no-wrap
msgid ""
"# Tenant 'google' configuration\n"
"quarkus.oidc.google.provider=google\n"
"quarkus.oidc.google.client-id=${google-client-id}\n"
"quarkus.oidc.google.credentials.secret=${google-client-secret}\n"
"quarkus.oidc.google.authentication.redirect-path=/signed-in\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:613
#, no-wrap
msgid ""
"# Tenant 'github' configuration\n"
"quarkus.oidc.github.provider=google\n"
"quarkus.oidc.github.client-id=${github-client-id}\n"
"quarkus.oidc.github.credentials.secret=${github-client-secret}\n"
"quarkus.oidc.github.authentication.redirect-path=/signed-in\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:617
msgid "In this example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and also require session cookies to get generated after the authentication has taken place.  After either Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, for example, a secured resource path on the JAX-RS endpoint."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:619
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:624
#, no-wrap
msgid ""
"quarkus.http.auth.permission.login.paths=/google,/github\n"
"quarkus.http.auth.permission.login.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:629
msgid "If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific`/google` or `/github` JAX-RS resource paths.  Tenant identifiers are also recorded in the session cookie names after the authentication is completed.  Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:631
msgid "Default resolution can also work for Bearer token authentication but it might be less practical in this case because a tenant identifier will always need to be set as the last path segment value."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:633
#, no-wrap
msgid "Resolve with `TenantResolver`"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:636
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:643
#, no-wrap
msgid ""
"# Tenant 'a' configuration\n"
"quarkus.oidc.a.auth-server-url=http://localhost:8180/realms/quarkus-a\n"
"quarkus.oidc.a.client-id=client-a\n"
"quarkus.oidc.a.credentials.secret=client-a-secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:648
#, no-wrap
msgid ""
"# Tenant 'b' configuration\n"
"quarkus.oidc.b.auth-server-url=http://localhost:8180/realms/quarkus-b\n"
"quarkus.oidc.b.client-id=client-b\n"
"quarkus.oidc.b.credentials.secret=client-b-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:651
msgid "You can return the tenant ID of either `a` or `b` from `quarkus.oidc.TenantResolver`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:655
#, no-wrap
msgid "import quarkus.oidc.TenantResolver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:671
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        if (path.endsWith(\"a\")) {\n"
"            return \"a\";\n"
"        } else if (path.endsWith(\"b\")) {\n"
"            return \"b\";\n"
"        } else {\n"
"            // default tenant\n"
"            return null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:674
msgid "In this example, the value of the last request path segment is a tenant ID, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:676
#, fuzzy, no-wrap
msgid "Resolve with annotations"
msgstr "用注释解决租户标识符的问题"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:679
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:683
#, fuzzy
msgid "Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work. For more information, see xref:security-proactive-authentication.adoc[Proactive authentication]."
msgstr "主动的HTTP认证需要被禁用( `quarkus.http.auth.proactive=false` )，这样才能发挥作用。更多详情请见 link:security-built-in-authentication.html#proactive-authentication[主动认证] 部分。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:688
#, fuzzy
msgid "Assuming your application supports two OIDC tenants (`hr`, and default), all resource methods and classes carrying `@Tenant(\"hr\")` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default OIDC provider."
msgstr "现在，所有携带 `@HrTenant` 的方法和类将使用由 `quarkus.oidc.hr.auth-server-url` 配置的OIDC提供者进行认证，而所有其他的类和方法仍将使用默认的OIDC提供者进行认证。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:695
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:698
#, no-wrap
msgid ""
"import io.quarkus.oidc.Tenant;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:702
#, no-wrap
msgid ""
"@Authenticated\n"
"@Path(\"/api/hello\")\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:710
#, no-wrap
msgid ""
"    @Tenant(\"hr\") <1>\n"
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String sayHello() {\n"
"        return \"Hello!\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:712
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed either on resource class or resource method."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:714
#, fuzzy, no-wrap
msgid "Dynamic tenant configuration resolution"
msgstr "禁用租户配置"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:718
#, fuzzy
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "如果你需要为你想支持的不同租户提供一个更动态的配置，并且不想最终在配置文件中出现多个条目，你可以使用 `io.quarkus.oidc.TenantConfigResolver` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:720
#, fuzzy
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "这个接口允许你在运行时动态地创建租户配置。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:724
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:727
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:733
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.quarkus.oidc.OidcRequestContext;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:736
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantConfigResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:741
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:752
#, no-wrap
msgid ""
"        if (\"tenant-c\".equals(parts[1])) {\n"
"            // Do 'return requestContext.runBlocking(createTenantConfig());'\n"
"            // if a blocking call is required to create a tenant config\n"
"            return Uni.createFromItem(createTenantConfig());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:756
#, no-wrap
msgid ""
"        // resolve to default tenant configuration\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:759
#, no-wrap
msgid ""
"    private Supplier<OidcTenantConfig> createTenantConfig() {\n"
"        final OidcTenantConfig config = new OidcTenantConfig();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:764
#, no-wrap
msgid ""
"        config.setTenantId(\"tenant-c\");\n"
"        config.setAuthServerUrl(\"http://localhost:8180/realms/tenant-c\");\n"
"        config.setClientId(\"multi-tenant-client\");\n"
"        OidcTenantConfig.Credentials credentials = new OidcTenantConfig.Credentials();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:766
#, no-wrap
msgid "        credentials.setSecret(\"my-secret\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:768
#, no-wrap
msgid "        config.setCredentials(credentials);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:770
#, no-wrap
msgid "        // any other setting support by the quarkus-oidc extension\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:774
#, no-wrap
msgid ""
"        return () -> config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:777
#, fuzzy
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr "从这个方法返回的 `OidcTenantConfig` ，与用来解析 `oidc` 命名空间配置的 `application.properties` 。你可以使用 `quarkus-oidc` 扩展支持的任何设置来填充它。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:778
#, fuzzy, no-wrap
msgid "Tenant resolution for OIDC `web-app` applications"
msgstr "OIDC'web-app'应用的租户解决方案"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:781
msgid "The simplest option for resolving OIDC `web-app` application configuration is to follow the steps described in the xref:default-tenant-resolver[Default resolution] section."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:783
msgid "Try one of the options suggested below if the default resolution strategy does not work for your application setup."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:785
#, fuzzy
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr "有几个选项可用于选择租户配置，该配置应被用于保护 `service` 和 `web-app` OIDC应用程序的当前HTTP请求，例如："

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:787
#, fuzzy
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr "检查URL路径，例如， `tenant-service` 配置必须用于\"/service \"路径，而 `tenant-manage` 配置 - 用于\"/management \"路径。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:788
#, fuzzy
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr "检查HTTP头，例如，在URL路径总是'/service'的情况下，\"Realm: service \"或 \"Realm: management \"这样的头可以帮助在 `tenant-service` 和 `tenant-manage` 配置之间进行选择。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:789
#, fuzzy
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr "检查URL查询参数--它的工作方式类似于标题用于选择租户配置的方式。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:791
#, fuzzy
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr "所有这些选项都可以通过OIDC `TenantResolver` 和 `TenantConfigResolver` 的定制实现轻松实现， `service` 应用。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:793
#, fuzzy
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr "然而，由于需要一个HTTP重定向来完成OIDC `web-app` 应用程序的代码认证流程，可能需要一个自定义的HTTP cookie来选择这个重定向请求前后的相同租户配置，因为。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:795
#, fuzzy
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr "如果在OIDC提供商中注册了一个单一的重定向URL，则重定向请求后的URL路径可能不一样--原来的请求路径可以恢复，但要在租户配置解决后才能恢复。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:796
#, fuzzy
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr "原始请求中使用的HTTP头在重定向后不可用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:797
#, fuzzy
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr "自定义URL查询参数在重定向后被恢复，但在租户配置被解决后被恢复"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:799
#, fuzzy
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr "为确保解决 `web-app` 应用程序的租户配置的信息在重定向之前和之后都是可用的，一个选择是使用一个cookie，例如。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:805
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:811
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.core.http.Cookie;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:825
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        List<String> tenantIdQuery = context.queryParam(\"tenantId\");\n"
"        if (!tenantIdQuery.isEmpty()) {\n"
"            String tenantId = tenantIdQuery.get(0);\n"
"            context.addCookie(Cookie.cookie(\"tenant\", tenantId));\n"
"            return tenantId;\n"
"        } else if (context.cookieMap().containsKey(\"tenant\")) {\n"
"            return context.getCookie(\"tenant\").getValue();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:829
#, no-wrap
msgid ""
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:832
#, fuzzy, no-wrap
msgid "Disabling Tenant Configurations"
msgstr "禁用租户配置"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:835
#, fuzzy
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "如果不能从当前的请求中推断出租户，并且需要回退到默认的租户配置，那么自定义的 `TenantResolver` 和 `TenantConfigResolver` 实现可以返回 `null` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:837
#, fuzzy
msgid "If you expect that the custom resolvers will always infer a tenant then you do not need to configure the default tenant resolution."
msgstr "如果预期自定义解析器将总是推断出一个租户，那么就不需要默认的租户配置。人们可以通过 `quarkus.oidc.tenant-enabled=false` 设置禁用它。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:839
#, fuzzy
msgid "To disable the default tenant configuration, set `quarkus.oidc.tenant-enabled=false`."
msgstr "请注意，租户的具体配置也可以被禁用，例如： `quarkus.oidc.tenant-a.tenant-enabled=false` 。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:843
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:846
#, fuzzy
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "请注意，租户的具体配置也可以被禁用，例如： `quarkus.oidc.tenant-a.tenant-enabled=false` 。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:847
#, fuzzy, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:850
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:851
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak文档]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:852
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID连接]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:853
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON网络令牌]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:854
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:854
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#, fuzzy
#~ msgid "You can use the annotations and CDI interceptors for resolving the tenant identifiers as an alternative to using `quarkus.oidc.TenantResolver`. This can be done by setting the value for the key `OidcUtils.TENANT_ID_ATTRIBUTE` on the current `RoutingContext`."
#~ msgstr "你可以使用注释和CDI拦截器来解决租户标识符，作为使用 `quarkus.oidc.TenantResolver` 的替代。这可以通过设置当前 `RoutingContext` 上的键值 `OidcUtils.TENANT_ID_ATTRIBUTE` 来实现。"

#, fuzzy
#~ msgid "Assuming your application supports two OIDC tenants (`hr`, and default) first you need to define one annotation per tenant ID other than default:"
#~ msgstr "假设你的应用程序支持两个OIDC租户（ `hr` ，和默认），首先你需要为默认以外的每个租户ID定义一个注释。"

#, fuzzy
#~ msgid "Next, you'll need one interceptor for each of those annotations:"
#~ msgstr "接下来，你需要为这些注释中的每一个提供一个拦截器。"

#, fuzzy
#~ msgid "Programmatically Resolving Tenants Configuration"
#~ msgstr "程序化地解决租户配置问题"

#, fuzzy
#~ msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to authorize a tenant using Bearer Token Authorization."
#~ msgstr "如果你需要使用OpenID Connect授权代码流对租户进行认证和授权，请阅读《 link:security-openid-connect-web-authentication.html[使用OpenID Connect保护Web应用] 》指南。"

#, fuzzy
#~ msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow."
#~ msgstr "如果你需要使用OpenID Connect授权代码流对租户进行认证和授权，请阅读《 link:security-openid-connect-web-authentication.html[使用OpenID Connect保护Web应用] 》指南。"

#, fuzzy
#~ msgid "Configuration Reference"
#~ msgstr "配置参考"

#, fuzzy
#~ msgid "Google OpenID Provider Configuration"
#~ msgstr "谷歌OpenID供应商配置"

#, fuzzy
#~ msgid "In order to set up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here]."
#~ msgstr "为了设置 `tenant-a` 配置以使用谷歌OpenID提供商，你需要创建一个项目，如 link:https://developers.google.com/identity/protocols/OpenIDConnect[这里] 所述。"

#, fuzzy
#~ msgid "Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:"
#~ msgstr "一旦你创建了项目并有了你的项目的 `client_id` 和 `client_secret` ，你就可以尝试配置租户了，方法如下。"

#, fuzzy
#~ msgid "===\n"
#~ msgstr "==="
