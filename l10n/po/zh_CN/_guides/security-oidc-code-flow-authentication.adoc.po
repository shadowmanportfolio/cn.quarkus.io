# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-29 15:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:7
#, fuzzy, no-wrap
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr "用于保护网络应用的OpenID Connect授权代码流机制"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:14
#, fuzzy
msgid "To protect your web applications, you can use the industry-standard OpenID Connect (OIDC) Authorization Code Flow mechanism provided by the Quarkus OIDC extension."
msgstr "为了保护你的网络应用，你可以使用Quarkus OIDC扩展提供的行业标准OpenID Connect（OIDC）授权代码流机制。"

#. type: Title ==
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:15
#, fuzzy, no-wrap
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr "OIDC授权代码流机制概述"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:18
#, fuzzy
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "Quarkus OpenID Connect（OIDC）扩展可以通过使用符合OIDC的授权服务器（如 link:https://www.keycloak.org[Keycloak）] 支持的OIDC授权代码流机制来保护应用程序的HTTP端点。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:22
#, fuzzy
msgid "The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.  After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.  Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr "授权码流机制通过将用户重定向到一个OIDC提供者，如Keycloak，来验证你的Web应用程序的用户，以登录。在认证之后，OIDC提供者将用户重定向到应用程序，并提供一个授权代码，确认认证成功。然后，应用程序与OIDC提供者交换这个代码，以获得一个ID令牌（代表认证的用户）、一个访问令牌和一个刷新令牌，以授权用户访问应用程序。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:24
#, fuzzy
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr "下图概述了Quarkus中的授权代码流机制。"

#. type: Block title
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:25
#, fuzzy, no-wrap
msgid "Authorization code flow mechanism in Quarkus"
msgstr "Quarkus中的授权代码流机制"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:26
#, fuzzy, no-wrap
msgid "Authorization"
msgstr "授权书"

#. type: Target for macro image
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:26
#, no-wrap
msgid "authorization_code_flow.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:28
#, fuzzy
msgid "The Quarkus user requests access to a Quarkus web-app application."
msgstr "Quarkus用户要求访问一个Quarkus网络应用程序。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:29
#, fuzzy
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr "Quarkus网络应用程序将用户重定向到授权端点，也就是OIDC提供商进行认证。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:30
#, fuzzy
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr "OIDC供应商将用户重定向到一个登录和认证提示。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:31
#, fuzzy
msgid "At the prompt, the user enters their user credentials."
msgstr "在提示下，用户输入他们的用户凭证。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:32
#, fuzzy
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code then redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr "OIDC提供者对输入的用户凭证进行认证，如果成功的话，就会发出一个授权代码，然后将用户重定向到Quarkus网络应用程序，并将该代码作为一个查询参数。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:33
#, fuzzy
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr "Quarkus网络应用程序与OIDC提供者交换这个授权代码，以获得ID、访问和刷新令牌。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:36
#, fuzzy
msgid "The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.  The following tokens are issued:"
msgstr "授权代码流程完成后，Quarkus网络应用程序使用发出的令牌来访问用户的信息，并向该用户授予相关的基于角色的授权。以下是发出的令牌："

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:38
#, fuzzy
msgid "ID token: The Quarkus `web-app` application uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web application."
msgstr "ID令牌：Quarkus `web-app` 应用程序使用ID令牌中的用户信息，使认证的用户能够安全地登录，并提供基于角色的网络应用程序访问。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:39
#, fuzzy
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or to propagate it to another endpoint."
msgstr "访问令牌：Quarkus网络应用程序可能会使用访问令牌来访问UserInfo API，以获得关于认证用户的额外信息或将其传播到另一个端点。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:40
#, fuzzy
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr "刷新令牌：（可选）如果ID和访问令牌过期，Quarkus网络应用程序可以使用刷新令牌来获得新的ID和访问令牌。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:42
#, fuzzy
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr "另请参见 link:security-oidc-configuration-properties-reference.html[OIDC配置属性] 参考指南。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:44
#, fuzzy
msgid "To learn about how you can protect web applications by using the OIDC authorization code flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]"
msgstr "要了解如何通过使用OIDC授权代码流机制来保护网络应用，请参见 link:security-oidc-code-flow-authentication-tutorial.html[通过使用OIDC授权代码流保护网络应用] 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:46
#, fuzzy
msgid "If you want to protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]."
msgstr "如果你想通过使用OIDC承载器令牌认证来保护服务应用程序，请参阅 link:security-oidc-bearer-token-authentication.html[OIDC承载器令牌认证] 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:48
#, fuzzy
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr "关于如何支持多个租户的信息，请参见 link:security-openid-connect-multitenancy.html[使用OpenID Connect多租户] 。"

#. type: Title ==
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:49
#, fuzzy, no-wrap
msgid "Using the authorization code flow mechanism"
msgstr "使用授权代码流机制"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:51
#, fuzzy, no-wrap
msgid "Configuring access to the OIDC provider endpoint"
msgstr "配置对OIDC提供者端点的访问"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:54
#, fuzzy
msgid "The OIDC `web-app` application requires URLs of the OIDC provider's authorization, token, `JsonWebKey` (JWK) set, and possibly the `UserInfo`, introspection, and end session (RP-initiated logout) endpoints."
msgstr "OIDC `web-app` 应用程序需要OIDC提供者的授权、令牌、 `JsonWebKey` （JWK）集的URL，可能还有 `UserInfo` 、自省和结束会话（RP发起的注销）端点。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:56
#, fuzzy
msgid "By convention, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "按照惯例，它们是通过在配置的 `quarkus.oidc.auth-server-url` ，增加一个 `/.well-known/openid-configuration` 路径来发现的。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:58
#, fuzzy
msgid "Alternatively, if the discovery endpoint is not available, or you prefer to reduce the discovery endpoint round-trip, you can disable endpoint discovery and configure relative path values, for example:"
msgstr "另外，如果发现端点不可用，或者你希望减少发现端点的往返次数，你可以禁用端点发现并配置相对路径值，例如："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:75
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Authorization endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/auth\n"
"quarkus.oidc.authorization-path=/protocol/openid-connect/auth\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/token/introspect\n"
"# End session endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/logout\n"
"quarkus.oidc.end-session-path=/protocol/openid-connect/logout\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:79
#, fuzzy
msgid "Some OIDC providers support metadata discovery but do not return all the endpoint URL values required for the authorization code flow to complete or to support application functions, for example, user logout.  To work around this limitation, you can configure the missing endpoint URL values locally, as outlined in the following example:"
msgstr "一些OIDC提供商支持元数据发现，但并不返回授权代码流完成或支持应用功能（例如，用户注销）所需的所有端点URL值。为了解决这个限制，你可以在本地配置缺失的端点URL值，如下面的例子中所述："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:83
#, no-wrap
msgid "# Metadata is auto-discovered but it does not return an end-session endpoint URL\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:85
#, no-wrap
msgid "quarkus.oidc.auth-server-url=http://localhost:8180/oidcprovider/account\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:88
#, no-wrap
msgid ""
"# Configure the end-session URL locally, it can be an absolute or relative (to 'quarkus.oidc.auth-server-url') address\n"
"quarkus.oidc.end-session-path=logout\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:94
#, fuzzy
msgid "You can use this same configuration to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required.  For example, a provider that supports both global and application-specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout`.  This URL will log the user out of all of the applications that the user is currently logged into.  However, if the requirement is for the current application to log the user out of only the specific application, you can override the global end-session URL, by setting the `quarkus.oidc.end-session-path=logout` parameter."
msgstr "如果发现的端点URL对本地Quarkus端点不起作用，并且需要一个更具体的值，你可以使用这个相同的配置来覆盖该端点的URL。例如，一个同时支持全局和特定应用程序端点的提供者会返回一个全局端点URL，如 `<a href=\"http://localhost:8180/oidcprovider/account/global-logout\" class=\"bare\">http://localhost:8180/oidcprovider/account/global-logout</a>` .这个URL会将用户从当前登录的所有应用程序中注销。然而，如果要求当前的应用程序只注销用户的特定应用程序，你可以通过设置 `quarkus.oidc.end-session-path=logout` 参数来覆盖全局结束会话的URL。"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:96
#, fuzzy, no-wrap
msgid "OIDC provider client authentication"
msgstr "OIDC供应商客户认证"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:100
#, fuzzy
msgid "OIDC providers typically require applications to be identified and authenticated when they interact with the OIDC endpoints.  Quarkus OIDC, specifically the `quarkus.oidc.runtime.OidcProviderClient` class, authenticates to the OIDC provider when the authorization code must be exchanged for the ID, access, and refresh tokens, or when the ID and access tokens need to be refreshed or introspected."
msgstr "OIDC提供者通常要求应用程序在与OIDC端点交互时进行识别和验证。Quarkus OIDC，特别是 `quarkus.oidc.runtime.OidcProviderClient` 类，在必须为ID、访问和刷新令牌交换授权码时，或在ID和访问令牌需要被刷新或反省时，对OIDC提供者进行认证。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:103
#, fuzzy
msgid "Typically, client id and client secrets are defined for a given application when it enlists to the OIDC provider.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "通常情况下，客户ID和客户秘密是在一个特定的应用程序加入OIDC提供者时为其定义的。所有的 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC客户认证] 选项都被支持，例如："

#. type: Block title
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:104
#, fuzzy, no-wrap
msgid "Example of  `client_secret_basic`:"
msgstr " `client_secret_basic` 的例子："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:111
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:114
#, fuzzy
msgid "Or:"
msgstr "或者："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:120
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:123
#, fuzzy
msgid "The following example shows the secret retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr "下面的例子显示了从 link:credentials-provider.html[凭证提供者] 那里检索的秘密："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:128
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:160
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:133
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:135
#, fuzzy, no-wrap
msgid "Example of `client_secret_post`"
msgstr "例子 `client_secret_post` "

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:143
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
"quarkus.oidc.credentials.client-secret.method=post\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:145
#, fuzzy, no-wrap
msgid "Example of `client_secret_jwt`, where the signature algorithm is HS256:"
msgstr " `client_secret_jwt` 的例子，其中签名算法是HS256："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:152
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:154
#, fuzzy, no-wrap
msgid "Example of `client_secret_jwt`, where the secret is retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr " `client_secret_jwt` 的例子，其中秘密是从 link:credentials-provider.html[证书提供者] 那里获取的："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:165
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:168
#, fuzzy
msgid "Example of `private_key_jwt` with the PEM key file, and where the signature algorithm is RS256:"
msgstr " `private_key_jwt` ，使用PEM密钥文件，且签名算法为RS256的例子："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:174
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:203
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:176
#, fuzzy, no-wrap
msgid "Example of `private_key_jwt` with the keystore file, where the signature algorithm is RS256:"
msgstr " `private_key_jwt` ，其中签名算法是RS256，用keystore文件的例子："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:185
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:188
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:191
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that a client secret does not get sent to the OIDC provider, therefore avoiding the risk of a secret being intercepted by a 'man-in-the-middle' attack."
msgstr "使用 `client_secret_jwt` 或 `private_key_jwt` 认证方法，可以确保客户的秘密不会被发送到OIDC提供商那里，因此避免了秘密被 \"中间人 \"攻击截获的风险。"

#. type: Title =====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:192
#, fuzzy, no-wrap
msgid "Additional JWT authentication options"
msgstr "额外的JWT认证选项"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:195
#, fuzzy
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an Apple `post_jwt` method is used, then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "如果使用 `client_secret_jwt` 、 `private_key_jwt` 认证方法或使用苹果公司的 `post_jwt` 方法，那么可以定制JWT签名算法、密钥标识符、受众、主体和发行者等："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:199
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:208
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:211
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:214
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:217
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:220
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title =====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:222
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "苹果POST JWT"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:225
#, fuzzy
msgid "The Apple OIDC provider uses a `client_secret_post` method whereby a secret is a JWT produced with a `private_key_jwt` authentication method but with the Apple account-specific issuer and subject claims."
msgstr "苹果公司的OIDC提供商使用一种 `client_secret_post` 方法，据此，秘密是用 `private_key_jwt` 认证方法产生的JWT，但有苹果账户特定的发行者和主体要求。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:227
#, fuzzy
msgid "In Quarkus Security, `quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method, which you can configure as follows:"
msgstr "在Quarkus Security中， `quarkus-oidc` 支持一种非标准的 `client_secret_post_jwt` 认证方法，你可以按以下方式配置："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:232
#, no-wrap
msgid ""
"# Apple provider configuration sets a 'client_secret_post_jwt' authentication method\n"
"quarkus.oidc.provider=apple\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:237
#, no-wrap
msgid ""
"quarkus.oidc.client-id=${apple.client-id}\n"
"quarkus.oidc.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc.credentials.jwt.token-key-id=${apple.key-id}\n"
"# Apple provider configuration sets ES256 signature algorithm\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:240
#, no-wrap
msgid ""
"quarkus.oidc.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""

#. type: Title =====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:242
#, fuzzy, no-wrap
msgid "mutual TLS (mTLS)"
msgstr "相互TLS (mTLS)"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:245
#, fuzzy
msgid "Some OpenID Connect providers might require that a client is authenticated as part of the mutual TLS authentication process."
msgstr "一些OpenID Connect提供商可能要求客户在相互TLS认证过程中进行认证。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:247
#, fuzzy
msgid "The following example shows how you can configure `quarkus-oidc` to support `mTLS`:"
msgstr "下面的例子显示了如何配置 `quarkus-oidc` ，以支持 `mTLS` ："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:251
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:255
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:259
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:265
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:267
#, fuzzy, no-wrap
msgid "Introspection endpoint authentication"
msgstr "自省端点认证"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:271
#, fuzzy
msgid "Some OIDC providers require authenticating to its introspection endpoint by using Basic authentication and with credentials that are different to the `client_id` and `client_secret`.  If you have previously configured security authentication to support either the`client_secret_basic` or `client_secret_post` client authentication methods as described in the xref:oidc-provider-client-authentication[OIDC provider client authentication] section, you might need to apply the additional configuration, as follows."
msgstr "一些OIDC提供者要求通过使用Basic认证和与 `client_id` 和 `client_secret` 不同的凭证来认证其自省端点。如果你之前已经配置了安全认证，以支持 link:#oidc-provider-client-authentication[OIDC提供者客户端] 认证部分所述的`client_secret_basic`或 `client_secret_post` 客户端认证方法，你可能需要应用附加配置，如下所示。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:273
#, fuzzy
msgid "If the tokens have to be introspected and the introspection endpoint-specific authentication mechanism is required, then you can configure `quarkus-oidc`, as follows:"
msgstr "如果必须对令牌进行反省，并且需要反省端点特定的认证机制，那么你可以配置 `quarkus-oidc` ，如下所示："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:278
#, no-wrap
msgid ""
"quarkus.oidc.introspection-credentials.name=introspection-user-name\n"
"quarkus.oidc.introspection-credentials.secret=introspection-user-secret\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:280
#, fuzzy, no-wrap
msgid "Redirecting to and from the OIDC provider"
msgstr "重定向进出OIDC供应商"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:284
#, fuzzy
msgid "When a user is redirected to the OpenID Connect provider to authenticate, the redirect URL includes a `redirect_uri` query parameter, which indicates to the provider where the user has to be redirected to when the authentication is complete.  In our case, this is the Quarkus application."
msgstr "当用户被重定向到OpenID Connect提供商进行认证时，重定向的URL包括一个 `redirect_uri` 查询参数，该参数向提供商指出当认证完成后，用户必须被重定向到哪里。在我们的案例中，这就是Quarkus应用程序。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:288
#, fuzzy
msgid "Quarkus sets this parameter to the current application request URL by default.  For example, if a user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter is set to `http://localhost:8080/service/1`.  Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter is set to `http://localhost:8080/service/2`."
msgstr "Quarkus默认将此参数设置为当前应用程序的请求URL。例如，如果一个用户试图访问Quarkus的服务端点在 `<a href=\"http://localhost:8080/service/1\" class=\"bare\">http://localhost:8080/service/1</a>` 那么 `redirect_uri` 参数被设置为 `<a href=\"http://localhost:8080/service/1\" class=\"bare\">http://localhost:8080/service/1</a>` .同样的，如果请求的URL是 `<a href=\"http://localhost:8080/service/2\" class=\"bare\">http://localhost:8080/service/2</a>` 那么 `redirect_uri` 参数被设置为 `<a href=\"http://localhost:8080/service/2\" class=\"bare\">http://localhost:8080/service/2</a>` ."

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:291
#, fuzzy
msgid "Some OIDC providers require the `redirect_uri` to have the same value for a given application, for example, `http://localhost:8080/service/callback`, for all the redirect URLs.  In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback`, which will be the same regardless of the current request URL."
msgstr "一些OIDC供应商要求 `redirect_uri` ，对于一个特定的应用，要有相同的值，例如、 `<a href=\"http://localhost:8080/service/callback\" class=\"bare\">http://localhost:8080/service/callback</a>` ，所有的重定向URL。在这种情况下，必须设置一个 `quarkus.oidc.authentication.redirect-path` 属性，例如， `quarkus.oidc.authentication.redirect-path=/service/callback` ，Quarkus将把 `redirect_uri` 参数设置为一个绝对的URL，如 `<a href=\"http://localhost:8080/service/callback\" class=\"bare\">http://localhost:8080/service/callback</a>` ，无论当前请求的URL是什么，它都将是相同的。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:294
#, fuzzy
msgid "If `quarkus.oidc.authentication.redirect-path` is set but you need the original request URL to be restored after the user has been redirected back to a unique callback URL, for example, `http://localhost:8080/service/callback`, set `quarkus.oidc.authentication.restore-path-after-redirect` property to `true`.  This will restore the request URL such as `http://localhost:8080/service/1`."
msgstr "如果 `quarkus.oidc.authentication.redirect-path` ，但你需要在用户被重定向到一个独特的回调URL后恢复原来的请求URL，例如、 `<a href=\"http://localhost:8080/service/callback\" class=\"bare\">http://localhost:8080/service/callback</a>` ，将 `quarkus.oidc.authentication.restore-path-after-redirect` 属性设置为 `true` 。这将恢复请求的URL，如 `<a href=\"http://localhost:8080/service/1\" class=\"bare\">http://localhost:8080/service/1</a>` ."

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:295
#, fuzzy, no-wrap
msgid "Customizing authentication requests"
msgstr "定制认证请求"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:298
#, fuzzy
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "默认情况下，只有 `response_type` （设置为 `code` ）、 `scope` （设置为'openid'）、 `client_id` 、 `redirect_uri` 和 `state` 属性在用户被重定向到OpenID Connect提供商的授权端点进行认证时，作为HTTP查询参数传递给它。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:302
#, fuzzy
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`.  For example, some OIDC providers might choose to return the authorization code as part of the redirect URI's fragment, which would break the authentication process.  The following example shows how you can work around this issue:"
msgstr "你可以用 `quarkus.oidc.authentication.extra-params` ，给它添加更多的属性。例如，一些OIDC提供者可能会选择将授权码作为重定向URI片段的一部分返回，这将破坏认证过程。下面的例子显示了你如何解决这个问题："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:306
#, no-wrap
msgid "quarkus.oidc.authentication.extra-params.response_mode=query\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:308
#, fuzzy, no-wrap
msgid "Customizing the authentication error response"
msgstr "定制认证错误响应"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:312
#, fuzzy
msgid "If the user authentication fails at the OIDC authorization endpoint, then the provider will redirect the user back to Quarkus with `error` and `error_description` parameters instead of `code`.  For example, this can happen when an invalid scope or other invalid parameters are included in the redirect to the provider."
msgstr "如果用户在OIDC授权端点认证失败，那么提供者将用 `error` 和 `error_description` 参数而不是 `code` ，将用户重定向回Quarkus。例如，当无效的范围或其他无效的参数包含在重定向到提供者中时，就会发生这种情况。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:316
#, fuzzy
msgid "In such cases, an HTTP `401`error will be returned by default.  However, you can instead request that a custom public error endpoint is called to return a more user-friendly HTML error page.  To do this, set the `quarkus.oidc.authentication.error-path` property, as shown in the following example:"
msgstr "在这种情况下，一个HTTP `401`error will be returned by default. However, you can instead request that a custom public error endpoint is called to return a more user-friendly HTML error page. To do this, set the `quarkus.oidc.authentication.error-path` 属性，如以下例子所示："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:320
#, no-wrap
msgid "quarkus.oidc.authentication.error-path=/error\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:324
#, fuzzy
msgid "Ensure that the property starts with a forward slash (/) character and the path is relative to the base URI of the current endpoint.  For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
msgstr "确保该属性以正斜杠(/)字符开头，并且路径是相对于当前端点的基本URI而言的。例如，如果它被设置为\"/error\"，而当前的请求URI是 `<a href=\"https://localhost:8080/callback?error=invalid_scope\" class=\"bare\">https://localhost:8080/callback?error=invalid_scope</a>` 那么最终的重定向将被发送到 `<a href=\"https://localhost:8080/error?error=invalid_scope\" class=\"bare\">https://localhost:8080/error?error=invalid_scope</a>` ."

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:326
#, fuzzy
msgid "It is important to ensure that this error endpoint is a public resource to prevent the user from being redirected to this page to be authenticated again."
msgstr "重要的是要确保这个错误端点是一个公共资源，以防止用户被重定向到这个页面，再次进行身份验证。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:327
#, fuzzy, no-wrap
msgid "Accessing authorization data"
msgstr "访问授权数据"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:330
#, fuzzy
msgid "Let's first discuss how to access information around authorization."
msgstr "我们首先讨论一下如何围绕授权获取信息。"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:332
#, fuzzy, no-wrap
msgid "Accessing ID and access tokens"
msgstr "访问ID和访问令牌"

#. SJ: new concept topic to describe the different token types and usage proposed in next iteration
#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:335
#, fuzzy
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token, and Refresh Token."
msgstr "OIDC代码认证机制在授权代码流程中获得了三个令牌： link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken] , Access Token, 和 Refresh Token。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:339
#, fuzzy
msgid "ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.  You can use this to get the issuing OIDC endpoint, the username, and other information called _claims_.  One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr "ID令牌总是一个JWT令牌，用来表示用户的认证与JWT声称。你可以用它来获得发行的OIDC端点、用户名和其他称为 _claim_ 的信息。人们可以通过注入带有 `IdToken` 修饰语的 `JsonWebToken` 来访问ID Token claims："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:346
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:350
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:374
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:354
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:360
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:363
#, fuzzy
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged-in user. The raw access token can be accessed as follows:"
msgstr "访问令牌通常由OIDC `web-app` 应用程序使用，以代表当前登录的用户访问其他端点。原始访问令牌可以按以下方式访问："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:370
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:377
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:381
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:387
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:392
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:395
#, fuzzy
msgid "Note that `AccessTokenCredential` is used if the access token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to a `JsonWebToken` or if the inner content is necessary for the application."
msgstr "请注意，如果发给Quarkus `web-app` 应用程序的访问令牌是不透明的（二进制），不能被解析为 `JsonWebToken` ，或者内部内容对应用程序是必要的，则使用 `AccessTokenCredential` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:397
#, fuzzy
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "在 `@RequestScoped` 和 `@ApplicationScoped` 上下文中都支持注入 `JsonWebToken` 和 `AccessTokenCredential` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:399
#, fuzzy
msgid "RefreshToken is used by Quarkusn OIDC to refresh the current ID and access tokens as part of its xref:session-management[session management] process."
msgstr "RefreshToken被Quarkusn OIDC用来刷新当前ID和访问令牌，作为 link:#session-management[其会话管理] 过程的一部分。"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:401
#, fuzzy, no-wrap
msgid "User info"
msgstr "用户信息"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:405
#, fuzzy
msgid "If the ID token does not provide enough information about the currently-authenticated user, you can get more information from the `UserInfo` endpoint.  Set the `quarkus.oidc.authentication.user-info-required=true` property for a link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC `UserInfo` endpoint to be requested."
msgstr "如果ID令牌不能提供关于当前认证用户的足够信息，你可以从 `UserInfo` 端点获得更多信息。为要请求的OIDC `UserInfo` 端点的 link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON对象设置 `quarkus.oidc.authentication.user-info-required=true` 属性。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:407
#, fuzzy
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "将使用授权码授予响应返回的访问令牌向OpenID提供者UserInfo端点发送请求，并创建一个 `io.quarkus.oidc.UserInfo` （一个简单的 `jakarta.json.JsonObject` 包装器）对象。 `io.quarkus.oidc.UserInfo` ，可以注入或作为SecurityIdentity `userinfo` 属性访问。"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:409
#, fuzzy, no-wrap
msgid "Accessing the OIDC configuration information"
msgstr "访问OIDC配置信息"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:412
#, fuzzy
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "当前租户发现的 link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect配置元数据] 由 `io.quarkus.oidc.OidcConfigurationMetadata` 表示，可以作为 `SecurityIdentity` `configuration-metadata` 属性注入或访问。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:414
#, fuzzy
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "如果端点是公开的，则注入默认租户的 `OidcConfigurationMetadata` 。"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:416
#, fuzzy, no-wrap
msgid "Mapping token claims and `SecurityIdentity` roles"
msgstr "映射令牌要求和 `SecurityIdentity` 角色"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:419
#, fuzzy
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication.adoc[Bearer tokens] with the only difference being that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr "角色从经过验证的令牌映射到SecurityIdentity角色的方式与 link:security-oidc-bearer-token-authentication.html[承载令牌] 的方式相同，唯一的区别是 link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID令牌] 被默认作为角色的来源。"

#. type: delimited block =
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:424
#, fuzzy
msgid "If you use Keycloak, set a `microprofile_jwt` client scope for ID token to contain a `groups` claim.  For more information, see the link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide]."
msgstr "如果你使用Keycloak，为ID token设置一个 `microprofile_jwt` 客户端范围，包含一个 `groups` 。欲了解更多信息，请参阅 link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak服务器管理指南] 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:427
#, fuzzy
msgid "But depending on your OIDC provider, roles might be stored in the access token or the user info."
msgstr "但是，根据你的OIDC提供商，角色可能被存储在访问令牌或用户信息中。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:429
#, fuzzy
msgid "If the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr "如果访问令牌包含角色，并且该访问令牌不打算传播到下游端点，那么设置 `quarkus.oidc.roles.source=accesstoken` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:431
#, fuzzy
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "如果UserInfo是角色的来源，那么设置 `quarkus.oidc.roles.source=userinfo` ，如果需要，设置 `quarkus.oidc.roles.role-claim-path` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:433
#, fuzzy
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles. For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization]."
msgstr "此外，也可以使用自定义的 `SecurityIdentityAugmentor` 来添加角色。更多信息，见 link:security-customization.html#security-identity-customization[SecurityIdentity定制] 。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:434
#, fuzzy, no-wrap
msgid "Ensuring validity of tokens and authentication data"
msgstr "确保令牌和认证数据的有效性"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:438
#, fuzzy
msgid "A core part of the authentication process is ensuring the chain of trust and validity of the information.  This is done by ensuring tokens are trustable."
msgstr "认证过程的一个核心部分是确保信息的信任链和有效性。这是通过确保令牌的可信任来实现的。"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:440
#, fuzzy, no-wrap
msgid "Token verification and introspection"
msgstr "代币验证和反省"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:443
#, fuzzy
msgid "The verification process of OIDC authorization code flow tokens follows the Bearer token authentication token verification and introspection logic. For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-verification-introspection[Token Verification And Introspection] section of the \"Quarkus OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr "OIDC授权代码流令牌的验证过程遵循承载令牌认证令牌验证和反省逻辑。更多信息，请参阅 \"Quarkus OpenID Connect (OIDC) Bearer token authentication \"指南中的 link:security-oidc-bearer-token-authentication.html#token-verification-introspection[Token Verification And Introspection] 部分。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:448
#, fuzzy
msgid "With Quarkus `web-app` applications, only the `IdToken` is verified by default because the access token is not used to access the current Quarkus `web-app` endpoint and is intended to be propagated to the services expecting this access token.  If you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr "对于Quarkus `web-app` 应用程序，默认情况下只有 `IdToken` 被验证，因为访问令牌不用于访问当前的Quarkus `web-app` 端点，并且打算传播给期望该访问令牌的服务。如果你期望访问令牌包含访问当前Quarkus端点所需的角色( `quarkus.oidc.roles.source=accesstoken` )，那么它也将被验证。"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:451
#, fuzzy, no-wrap
msgid "Token introspection and UserInfo cache"
msgstr "令牌自省和UserInfo缓存"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:456
#, fuzzy
msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles.  They will however be used to get `UserInfo`.  There will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr "代码流访问令牌不会被反省，除非它们被期望成为角色的来源。然而，它们将被用来获取 `UserInfo` 。如果需要对代码流访问令牌进行反省和/或 `UserInfo` ，将会有一到两个远程调用。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:458
#, fuzzy
msgid "Please see xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr "请参阅 link:security-oidc-bearer-token-authentication.html#token-introspection-userinfo-cache[令牌自省和UserInfo缓存] ，以了解更多关于使用默认令牌缓存或注册自定义缓存实现的信息。"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:460
#, fuzzy, no-wrap
msgid "JSON web token claim verification"
msgstr "JSON网络令牌索赔验证"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:464
#, fuzzy
msgid "Please see xref:security-oidc-bearer-token-authentication.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.  It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr "请参阅 link:security-oidc-bearer-token-authentication.html#jwt-claim-verification[JSON网络令牌声称验证] 部分，关于声称验证，包括 `iss` （发行者）声称。它适用于ID令牌，但也适用于JWT格式的访问令牌，如果 `web-app` 应用程序要求进行访问令牌验证。"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:465
#, fuzzy, no-wrap
msgid "Further security with Proof Key for Code Exchange (PKCE)"
msgstr "利用代码交换的证明密钥（PKCE）进一步提高安全性"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:468
#, fuzzy
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of authorization code interception."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7636[代码交换的证明密钥] （PKCE）将授权代码截获的风险降至最低。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:471
#, fuzzy
msgid "While PKCE is of primary importance to public OpenID Connect clients, such as SPA scripts running in a browser, it can also provide an extra level of protection to Quarkus OIDC `web-app` applications.  With PKCE, Quarkus OIDC `web-app` applications are confidential OpenID Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
msgstr "虽然PKCE对公共OpenID Connect客户端（如在浏览器中运行的SPA脚本）具有首要意义，但它也可以为Quarkus OIDC `web-app` 应用程序提供额外的保护。通过PKCE，Quarkus OIDC `web-app` 应用程序是保密的OpenID Connect客户端，能够安全地存储客户端的秘密，并使用它来交换令牌的代码。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:473
#, fuzzy
msgid "You can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32-character secret which is required to encrypt the PKCE code verifier in the state cookie, as shown in the following example:"
msgstr " `PKCE` 你可以为你的OIDC `web-app` 端点启用 `quarkus.oidc.authentication.pkce-required` 属性和32个字符的秘密，如下面的例子中所示："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:478
#, no-wrap
msgid ""
"quarkus.oidc.authentication.pkce-required=true\n"
"quarkus.oidc.authentication.state-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:481
#, fuzzy
msgid "If you already have a 32-characters client secret then you do not need to set the `quarkus.oidc.authentication.pkce-secret` property unless you prefer to use a different secret key. This secret will be auto-generated if it is not configured and if the fallback to the client secret is not possible in case of the client secret being less than 16 characters long."
msgstr "如果你已经有一个32个字符的客户秘密，那么你就不需要设置 `quarkus.oidc.authentication.pkce-secret` 属性，除非你喜欢使用不同的秘密密钥。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:485
#, fuzzy
msgid "The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to an OIDC provider to authenticate.  The `code_verifier` is decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret, and other parameters to complete the code exchange.  The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` that was provided during the authentication request."
msgstr "当用户被重定向到OIDC提供商进行认证时，需要用秘钥来加密随机生成的 `PKCE` `code_verifier` ，同时用 `code_challenge` 查询参数进行认证。当用户被重定向回Quarkus时， `code_verifier` 被解密，并与 `code` 、客户秘密和其他参数一起被发送到令牌端点，以完成代码交换。 `code_verifier` 如果 `SHA256` 的摘要与认证请求中提供的 `code_challenge` 不匹配，提供者将无法进行代码交换。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:487
#, fuzzy, no-wrap
msgid "Handling and controlling the lifetime of authentication"
msgstr "处理和控制认证的寿命"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:492
#, fuzzy
msgid "Another important requirement for authentication is to ensure that the data the session is based on is up-to-date without requiring the user to authenticate for every single request.  There are also situations where a logout event is explicitly requested.  Use the following key points to find the right balance for securing your Quarkus applications:"
msgstr "认证的另一个重要要求是确保会话所基于的数据是最新的，而不要求用户为每一个请求进行认证。还有一些情况是明确要求注销事件的。使用以下关键点，为保障你的Quarkus应用程序找到正确的平衡："

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:494
#, fuzzy, no-wrap
msgid "Cookies"
msgstr "饼干"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:498
#, fuzzy
msgid "The OIDC adapter uses cookies to keep the session, code flow, and post-logout state.  This state is a key element controlling the lifetime of authentication data."
msgstr "OIDC适配器使用cookies来保持会话、代码流和注销后的状态。这种状态是控制认证数据寿命的一个关键因素。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:500
#, fuzzy
msgid "Use the `quarkus.oidc.authentication.cookie-path` property to ensure that the same cookie is visible when you access protected resources with overlapping or different roots, for example:"
msgstr "使用 `quarkus.oidc.authentication.cookie-path` 属性，以确保当你访问具有重叠或不同根基的受保护资源时，同一cookie是可见的，例如："

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:502
#, fuzzy
msgid "`/index.html` and `/web-app/service`"
msgstr " `/index.html` 和 `/web-app/service` "

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:503
#, fuzzy
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr " `/web-app/service1` 和 `/web-app/service2` "

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:504
#, fuzzy
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr " `/web-app1/service` 和 `/web-app2/service` "

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:506
#, fuzzy
msgid "By default, `quarkus.oidc.authentication.cookie-path` is set to `/` but you can change this to a more specific path if required, for example, `/web-app`."
msgstr "默认情况下， `quarkus.oidc.authentication.cookie-path` 被设置为 `/` ，但如果需要，你可以将其改为更具体的路径，例如， `/web-app` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:510
#, fuzzy
msgid "To set the cookie path dynamically, configure the `quarkus.oidc.authentication.cookie-path-header` property.  Set the `quarkus.oidc.authentication.cookie-path-header` property.  For example, to set the cookie path dynamically by using the value of the`X-Forwarded-Prefix` HTTP header, configure the property to `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix`."
msgstr "要动态地设置cookie路径，请配置 `quarkus.oidc.authentication.cookie-path-header` 属性。设置 `quarkus.oidc.authentication.cookie-path-header` 属性。例如，要通过使用`X-Forwarded-Prefix`HTTP头的值来动态地设置cookie路径，将该属性配置为 `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:512
#, fuzzy
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "如果 `quarkus.oidc.authentication.cookie-path-header` ，但当前请求中没有配置的HTTP头，那么 `quarkus.oidc.authentication.cookie-path` ，将被检查。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:515
#, fuzzy
msgid "If your application is deployed across multiple domains, set the `quarkus.oidc.authentication.cookie-domain` property so that the session cookie is visible to all protected Quarkus services.  For example, if you have Quarkus services deployed on the following two domains, then you must set the `quarkus.oidc.authentication.cookie-domain` property to `company.net`."
msgstr "如果你的应用程序是跨域部署的，请设置 `quarkus.oidc.authentication.cookie-domain` 属性，以便会话cookie对所有受保护的Quarkus服务可见。例如，如果你有Quarkus服务部署在以下两个域，那么你必须将 `quarkus.oidc.authentication.cookie-domain` 属性设置为 `company.net` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:517
#, fuzzy
msgid "\\https://whatever.wherever.company.net/"
msgstr "https://whatever.wherever.company.net/"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:518
#, fuzzy
msgid "\\https://another.address.company.net/"
msgstr "https://another.address.company.net/"

#. type: Title =====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:521
#, fuzzy, no-wrap
msgid "Customizing the cookie with TokenStateManager"
msgstr "用TokenStateManager定制cookie"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:525
#, fuzzy
msgid "OIDC `CodeAuthenticationMechanism` uses the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access, and refresh tokens returned in the authorization code or to refresh grant responses in a session cookie.  This makes Quarkus OIDC endpoints completely stateless."
msgstr "OIDC `CodeAuthenticationMechanism` 使用默认的 `io.quarkus.oidc.TokenStateManager` 接口实现，以保持授权代码中返回的ID、访问和刷新令牌，或在会话cookie中刷新授予响应。这使得Quarkus OIDC端点完全无状态。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:527
#, fuzzy
msgid "An access token is only required if the endpoint needs to:"
msgstr "只有在端点需要时才需要访问令牌："

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:529
#, fuzzy
msgid "Retrieve `UserInfo`"
msgstr "检索 `UserInfo` "

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:530
#, fuzzy
msgid "Access the downstream service with this access token"
msgstr "用这个访问令牌访问下游服务"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:531
#, fuzzy
msgid "Use the roles associated with the access token, which are checked by default"
msgstr "使用与访问令牌相关的角色，这些角色在默认情况下是被选中的"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:533
#, fuzzy
msgid "In such cases, use the `quarkus.oidc.token-state-manager.strategy` property to configure the token state strategy as follows:"
msgstr "在这种情况下，使用 `quarkus.oidc.token-state-manager.strategy` 属性来配置令牌状态策略，如下所示："

#. type: Table
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:535
#, fuzzy, no-wrap
msgid "To..."
msgstr "为了..."

#. type: Table
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:537
#, fuzzy, no-wrap
msgid "Set the property to ..."
msgstr "将属性设置为..."

#. type: Table
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:538
#, fuzzy, no-wrap
msgid "Keep the ID and refresh tokens only"
msgstr "只保留ID和刷新令牌"

#. type: Table
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:540
#, fuzzy, no-wrap
msgid "`quarkus.oidc.token-state-manager.strategy=id-refresh-token`"
msgstr " `quarkus.oidc.token-state-manager.strategy=id-refresh-token` "

#. type: Table
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:541
#, fuzzy, no-wrap
msgid "Keep the ID token only"
msgstr "只保留ID令牌"

#. type: Table
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:543
#, fuzzy, no-wrap
msgid "`quarkus.oidc.token-state-manager.strategy=id-token`"
msgstr " `quarkus.oidc.token-state-manager.strategy=id-token` "

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:549
#, fuzzy
msgid "If your chosen cookie strategy combines tokens and generates a large session cookie value that is greater than 4KB, some browsers might not be able to handle such cookie sizes.  This can occur when the ID, access, and refresh tokens are JWT tokens and the selected strategy is `keep-all-tokens` or with ID and refresh tokens when the strategy is `id-refresh-token`.  To workaround this issue, you can set `quarkus.oidc.token-state-manager.split-tokens=true` to create a unique session token for each token."
msgstr "如果你选择的cookie策略结合了令牌并产生了一个大于4KB的大的会话cookie值，一些浏览器可能无法处理这种cookie大小。当ID、访问和刷新令牌是JWT令牌且所选策略是 `keep-all-tokens` ，或者当策略是 `id-refresh-token` ，有ID和刷新令牌时，就会发生这种情况。为了解决这个问题，你可以设置 `quarkus.oidc.token-state-manager.split-tokens=true` ，为每个令牌创建一个唯一的会话令牌。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:552
#, fuzzy
msgid "`TokenStateManager` encrypts the tokens before storing them in the session cookie.  The following example shows how you configure `TokenStateManager` to split the tokens and encrypt them:"
msgstr " `TokenStateManager` 在将令牌存储在会话cookie中之前对其进行加密。下面的例子显示了你如何配置 ，以分割令牌并对其进行加密： `TokenStateManager` "

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:561
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.token-state-manager.split-tokens=true\n"
"quarkus.oidc.token-state-manager.encryption-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:565
#, fuzzy
msgid "The token encryption secret must be at least 32 characters long.  If this key is not configured then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr "令牌加密秘密必须至少有32个字符长。如果没有配置这个密钥，那么 `quarkus.oidc.credentials.secret` 或 `quarkus.oidc.credentials.jwt.secret` 将被散列以创建一个加密密钥。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:568
#, fuzzy
msgid "Configure the `quarkus.oidc.token-state-manager.encryption-secret` property if Quarkus authenticates to the OpenId Connect Provider by using one of the following authentication methods:"
msgstr "如果Quarkus通过使用以下认证方法之一对OpenId Connect Provider进行认证，请配置 `quarkus.oidc.token-state-manager.encryption-secret` 属性："

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:570
#, fuzzy
msgid "mTLS"
msgstr "ǞǞǞ"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:571
#, fuzzy
msgid "`private_key_jwt`, where a private RSA or EC key is used to sign a JWT token"
msgstr " `private_key_jwt` ，其中一个私人RSA或EC密钥被用来签署JWT令牌"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:573
#, fuzzy
msgid "Otherwise, a random key is generated, which can be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr "否则，就会产生一个随机的密钥，如果Quarkus应用程序在云中运行，有多个pod管理请求，这可能会有问题。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:575
#, fuzzy
msgid "You can disable token encryption in the session cookie by setting `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr "你可以通过设置 `quarkus.oidc.token-state-manager.encryption-required=false` ，禁用会话cookie中的令牌加密功能。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:579
#, fuzzy
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie.  For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie.  Note that this approach might introduce some challenges if you need to make the tokens available across multiple microservices nodes."
msgstr "如果你需要定制令牌与会话cookie的关联方式，请注册你自己的 `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean。例如，你可能想把令牌保存在数据库中，并在会话cookie中只存储一个数据库指针。请注意，如果你需要使令牌在多个微服务节点上可用，这种方法可能会带来一些挑战。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:581
#, fuzzy
msgid "Here is a simple example:"
msgstr "下面是一个简单的例子："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:585
#, no-wrap
msgid "package io.quarkus.oidc.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:590
#, no-wrap
msgid ""
"import jakarta.annotation.Priority;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.inject.Alternative;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:597
#, no-wrap
msgid ""
"import io.quarkus.oidc.AuthorizationCodeTokens;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TokenStateManager;\n"
"import io.quarkus.oidc.runtime.DefaultTokenStateManager;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:602
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Alternative\n"
"@Priority(1)\n"
"public class CustomTokenStateManager implements TokenStateManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:605
#, no-wrap
msgid ""
"    @Inject\n"
"    DefaultTokenStateManager tokenStateManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:612
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            AuthorizationCodeTokens sessionContent, TokenStateManager.CreateTokenStateRequestContext requestContext) {\n"
"        return tokenStateManager.createTokenState(routingContext, oidcConfig, sessionContent, requestContext)\n"
"                .map(t -> (t + \"|custom\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:622
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            String tokenState, TokenStateManager.GetTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.getTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:633
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> deleteTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig, String tokenState,\n"
"            TokenStateManager.DeleteTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.deleteTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
"}\n"
msgstr ""

#. SJ: In next iteration, propose to recompose Logout information into a new concept topic
#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:636
#, fuzzy, no-wrap
msgid "Logout and expiration"
msgstr "注销和过期"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:639
#, fuzzy
msgid "There are two main ways for the authentication information to expire: the tokens expired and were not renewed or an explicit logout operation was triggered."
msgstr "认证信息过期主要有两种情况：令牌过期没有更新或触发了显式注销操作。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:641
#, fuzzy
msgid "Let's start with explicit logout operations."
msgstr "让我们从明确的注销操作开始。"

#. type: Title =====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:644
#, fuzzy, no-wrap
msgid "User-initiated logout"
msgstr "用户发起的注销"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:648
#, fuzzy
msgid "Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.  For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr "用户可以通过发送请求到Quarkus端点注销路径设置的 `quarkus.oidc.logout.path` 属性来请求注销。例如，如果端点地址是 `<a href=\"https://application.com/webapp\" class=\"bare\">https://application.com/webapp</a>` 并且 `quarkus.oidc.logout.path` 被设置为\"/logout\"，那么注销请求就必须被发送至 `<a href=\"https://application.com/webapp/logout\" class=\"bare\">https://application.com/webapp/logout</a>` ."

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:650
#, fuzzy
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr "这个注销请求将启动一个 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP发起的注销] ，用户将被重定向到OpenID连接提供商进行注销，在那里可能会要求用户确认注销确实是为了。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:652
#, fuzzy
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr "如果设置了 `quarkus.oidc.logout.post-logout-path` 属性，一旦注销完成，用户将返回到端点后注销页面。例如，如果端点地址是 `<a href=\"https://application.com/webapp\" class=\"bare\">https://application.com/webapp</a>` 并且 `quarkus.oidc.logout.post-logout-path` 被设置为\"/signin\"，那么用户将被返回到 `<a href=\"https://application.com/webapp/signin\" class=\"bare\">https://application.com/webapp/signin</a>` (注意这个URI必须在OpenID Connect Provider中注册为有效的 `post_logout_redirect_uri` ）。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:654
#, fuzzy
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a Jakarta REST filter."
msgstr "如果设置了 `quarkus.oidc.logout.post-logout-path` ，那么将创建一个 `q_post_logout` cookie，并将匹配的 `state` 查询参数添加到注销重定向URI中，一旦注销完成，OpenID Connect Provider将返回这个 `state` 。建议Quarkus `web-app` 应用程序检查 `state` 查询参数是否与 `q_post_logout` cookie的值相匹配，例如可以在Jakarta REST过滤器中进行。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:656
#, fuzzy
msgid "Note that a cookie name varies when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr "请注意，在使用 link:security-openid-connect-multitenancy.html[OpenID Connect多租户] 时，cookie的名称会有所不同。例如，对于具有 `tenant_1` ID的租户，它将被命名为 `q_post_logout_tenant_1` ，以此类推。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:658
#, fuzzy
msgid "Here is an example of how to configure a Quarkus app initiated logout flow:"
msgstr "下面是一个如何配置Quarkus应用程序启动注销流程的例子："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:665
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:728
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:753
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:669
#, no-wrap
msgid ""
"quarkus.oidc.logout.path=/logout\n"
"# Logged-out users should be returned to the /welcome.html site which will offer an option to re-login:\n"
"quarkus.oidc.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:673
#, no-wrap
msgid ""
"# Only the authenticated users can initiate a logout:\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:677
#, no-wrap
msgid ""
"# All users can see the welcome page:\n"
"quarkus.http.auth.permission.public.paths=/welcome.html\n"
"quarkus.http.auth.permission.public.policy=permit\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:681
#, fuzzy
msgid "You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources which is `/` in this example.  For more information, see the xref:oidc-cookies[Cookies] section."
msgstr "你可能还需要将 `quarkus.oidc.authentication.cookie-path` 设置为所有应用程序资源共同的路径值，在这个例子中是 `/` 。欲了解更多信息，请参见 link:#oidc-cookies[Cookies] 部分。"

#. type: delimited block =
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:686
#, fuzzy
msgid "Some OIDC providers do not support link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification and do not return an OpenID Connect well-known `end_session_endpoint` metadata property.  However, this is not a problem for Quarkus because the specific logout mechanisms of such OIDC providers only differ in how the logout URL query parameters are named."
msgstr "一些OIDC提供商不支持 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP发起的注销] 规范，并且不返回OpenID Connect知名的 `end_session_endpoint` 元数据属性。然而，这对Quarkus来说不是一个问题，因为这些OIDC提供商的具体注销机制只在注销URL查询参数的命名方式上有所不同。"

#. type: delimited block =
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:688
#, fuzzy
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter, which is not recognized by the providers that do not support this specification."
msgstr "根据 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP发起的注销] 规范， `quarkus.oidc.logout.post-logout-path` 属性被表示为 `post_logout_redirect_uri` 查询参数，不支持该规范的提供者无法识别。"

#. type: delimited block =
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:690
#, fuzzy
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr "你可以使用 `quarkus.oidc.logout.post-logout-url-param` 来解决这个问题。你还可以要求用 `quarkus.oidc.logout.extra-params` 添加更多的注销查询参数。例如，以下是你如何用 `Auth0` 支持注销："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:697
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-xxx.us.auth0.com\n"
"quarkus.oidc.client-id=redacted\n"
"quarkus.oidc.credentials.secret=redacted\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:700
#, no-wrap
msgid ""
"quarkus.oidc.tenant-logout.logout.path=/logout\n"
"quarkus.oidc.tenant-logout.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:705
#, no-wrap
msgid ""
"# Auth0 does not return the `end_session_endpoint` metadata property, configure it instead\n"
"quarkus.oidc.end-session-path=v2/logout\n"
"# Auth0 will not recognize the 'post_logout_redirect_uri' query parameter so make sure it is named as 'returnTo'\n"
"quarkus.oidc.logout.post-logout-uri-param=returnTo\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:709
#, no-wrap
msgid ""
"# Set more properties if needed.\n"
"# For example, if 'client_id' is provided then a valid logout URI should be set as Auth0 Application property, without it - as Auth0 Tenant property.\n"
"quarkus.oidc.logout.extra-params.client_id=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Title =====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:713
#, fuzzy, no-wrap
msgid "Back-channel logout"
msgstr "后面的通道注销"

#. type: delimited block =
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:717
#, fuzzy
msgid "The OIDC provider can force the logout of all applications using the authentification data: this is called back-channel logout.  In this case the OIDC will call a specific URL from each application to trigger that logout."
msgstr "OIDC提供者可以使用认证数据强制注销所有的应用程序：这被称为后向通道注销。在这种情况下，OIDC将从每个应用程序调用一个特定的URL来触发该注销。"

#. type: delimited block =
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:719
#, fuzzy
msgid "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] is used by OpenID Connect providers to log out the current user from all the applications this user is currently logged in, bypassing the user agent."
msgstr "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] 被OpenID Connect提供商用来从该用户当前登录的所有应用中注销当前用户，绕过了用户代理。"

#. type: delimited block =
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:721
#, fuzzy
msgid "You can configure Quarkus to support `Back-Channel Logout` as follows:"
msgstr "你可以按以下方式配置Quarkus以支持 `Back-Channel Logout` ："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:730
#, no-wrap
msgid "quarkus.oidc.logout.backchannel.path=/back-channel-logout\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:734
#, fuzzy
msgid "The absolute `back-channel logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`.  You will need to configure this URL in the admin console of your OIDC provider."
msgstr "绝对的 `back-channel logout` URL的计算方法是在当前的端点URL上加上 `quarkus.oidc.back-channel-logout.path` ，例如、 `<a href=\"http://localhost:8080/back-channel-logout\" class=\"bare\">http://localhost:8080/back-channel-logout</a>` .你将需要在你的OIDC供应商的管理控制台中配置这个URL。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:737
#, fuzzy
msgid "You will also need to configure a token age property for the logout token verification to succeed if your OpenID Connect Provider does not set an expiry claim in the current logout token.  For example, set `quarkus.oidc.token.age=10S` to ensure that no more than 10 seconds elapse since the logout token's `iat` (issued at) time."
msgstr "如果您的OpenID连接提供商没有在当前注销令牌中设置过期要求，您还需要配置一个令牌年龄属性，以便注销令牌验证成功。例如，设置 `quarkus.oidc.token.age=10S` ，以确保从注销令牌的 `iat` （签发时间）起不超过10秒。"

#. type: Title =====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:739
#, fuzzy, no-wrap
msgid "Front-channel logout"
msgstr "前面的通道注销"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:744
#, fuzzy
msgid "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-Channel Logout] can be used to logout the current user directly from the user agent (e.g. its browser).  It is like xref:back-channel-logout[Back-channel logout] but the logout steps are executed by the user agent like the browser and not in the background by the OIDP provider.  This option is rarely used."
msgstr "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[前台注销] 可用于直接从用户代理（例如其浏览器）注销当前用户。它就像 link:#back-channel-logout[Back-channel logout] ，但注销步骤是由用户代理（如浏览器）执行的，而不是由OIDP提供者在后台执行。这个选项很少使用。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:746
#, fuzzy
msgid "You can configure Quarkus to support `Front-Channel Logout` as follows:"
msgstr "你可以按以下方式配置Quarkus以支持 `Front-Channel Logout` ："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:755
#, no-wrap
msgid "quarkus.oidc.logout.frontchannel.path=/front-channel-logout\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:758
#, fuzzy
msgid "This path will be compared against the current request's path and the user will be logged out if these paths match."
msgstr "这个路径将与当前请求的路径进行比较，如果这些路径匹配，用户将被注销。"

#. type: Title =====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:760
#, fuzzy, no-wrap
msgid "Local logout"
msgstr "本地注销"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:766
#, fuzzy
msgid "xref:user-initiated-logout[User-initiated logout] will log the user out of the OIDC provider, if it is used as single sign-on, it might not be what you require.  If, for example, your OIDC provider is Google, you will be logged out from Google and its services.  Instead the user might just want to log out of that specific application.  Another use case might be when the OIDC provider does not have a logout endpoint."
msgstr "link:#user-initiated-logout[用户发起的注销] 将把用户从OIDC提供商那里注销，如果它被用作单点登录，可能不是你所需要的。例如，如果你的OIDC提供者是谷歌，你将从谷歌和它的服务中注销。相反，用户可能只想注销那个特定的应用程序。另一个用例可能是当OIDC提供者没有一个注销端点。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:768
#, fuzzy
msgid "By using xref:oidc-session[OidcSession], you can support a local logout, which means that only the local session cookie is cleared, as shown in the following example:"
msgstr "通过使用 link:#oidc-session[OidcSession] ，你可以支持本地注销，这意味着只有本地会话cookie被清除，如下例所示："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:774
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:776
#, no-wrap
msgid "import io.quarkus.oidc.OidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:779
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class ServiceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:782
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcSession oidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:789
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"logout\")\n"
"    public String logout() {\n"
"        oidcSession.logout().await().indefinitely();\n"
"        return \"You are logged out\".\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:793
#, fuzzy
msgid "====== Using `OidcSession` for local logout"
msgstr "使用 `OidcSession` 进行本地注销"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:796
#, fuzzy
msgid "`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`, which can help to perform a xref:local-logout[Local logout], retrieve the current session's tenant identifier, and check when the session will expire.  More useful methods will be added to it over time."
msgstr " `io.quarkus.oidc.OidcSession` 是一个围绕当前 ，可以帮助执行 `IdToken` link:#local-logout[本地注销] ，检索当前会话的租户标识符，并检查会话何时过期。随着时间的推移，更多有用的方法将被添加到它上面。"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:798
#, fuzzy, no-wrap
msgid "Session management"
msgstr "会议管理"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:802
#, fuzzy
msgid "By default, logout is based on the expiration time of the ID token issued by the OIDC provider. When the ID token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OIDC provider again to authenticate.  If the session at the OIDC provider is still active, users are automatically re-authenticated without needing to provide their credentials again."
msgstr "默认情况下，注销是基于OIDC提供商发出的ID令牌的过期时间。当ID令牌过期时，当前用户在Quarkus端点的会话无效，用户会被重定向到OIDC提供商处再次进行认证。如果在OIDC供应商处的会话仍然有效，用户会自动重新认证，而不需要再次提供他们的凭证。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:805
#, fuzzy
msgid "The current user session can be automatically extended by enabling the `quarkus.oidc.token.refresh-expired` property.  If set to `true`, when the current ID token expires, a refresh token grant will be used to refresh the ID token as well as access and refresh tokens."
msgstr "当前的用户会话可以通过启用 `quarkus.oidc.token.refresh-expired` 属性自动延长。如果设置为 `true` ，当当前ID令牌过期时，将使用刷新令牌授予来刷新ID令牌以及访问和刷新令牌。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:809
#, fuzzy
msgid "If you have a xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[single page application for service applications] where your OIDC provider script such as `keycloak.js` is managing an authorization code flow then that script will also control the SPA authentication session lifespan."
msgstr "如果你有一个 link:security-oidc-bearer-token-authentication.html#single-page-applications[服务应用的单页应用程序] ，你的OIDC提供者脚本（如 `keycloak.js` ）正在管理一个授权代码流，那么该脚本也将控制SPA认证会话的寿命。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:812
#, fuzzy
msgid "If you work with a Quarkus OIDC `web-app` application, then it is the Quarkus OIDC code authentication mechanism that is managing the user session lifespan."
msgstr "如果你使用Quarkus OIDC `web-app` 应用程序，那么是Quarkus OIDC代码认证机制在管理用户会话寿命。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:815
#, fuzzy
msgid "To use the refresh token, you should carefully configure the session cookie age.  The session age should be longer than the ID token lifespan and close to or equal to the refresh token lifespan."
msgstr "为了使用刷新令牌，你应该仔细配置会话cookie的年龄。会话年龄应长于ID令牌的寿命，并接近或等于刷新令牌的寿命。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:817
#, fuzzy
msgid "You calculate the session age by adding the lifespan value of the current ID token and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties."
msgstr "你通过添加当前ID令牌的寿命值和 `quarkus.oidc.authentication.session-age-extension` 和 `quarkus.oidc.token.lifespan-grace` 属性的值来计算会话年龄。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:821
#, fuzzy
msgid "You use only the `quarkus.oidc.authentication.session-age-extension` property to significantly extend the session lifespan, if required.  You use the `quarkus.oidc.token.lifespan-grace` property only for taking some small clock skews into consideration."
msgstr "如果需要的话，你只需使用 `quarkus.oidc.authentication.session-age-extension` 属性来大大延长会话的寿命。你只用 `quarkus.oidc.token.lifespan-grace` 属性来考虑一些小的时钟偏移。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:825
#, fuzzy
msgid "When the current authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired, then, by default, the user is automatically redirected to the OIDC Authorization endpoint to re-authenticate.  The OIDC provider might challenge the user again if the session between the user and this OIDC provider is still active, which might happen if the session is configured to last longer than the ID token."
msgstr "当当前经过认证的用户返回到受保护的Quarkus端点，并且与会话cookie相关的ID令牌已经过期，那么默认情况下，用户会被自动重定向到OIDC授权端点重新认证。如果用户和这个OIDC提供商之间的会话仍然有效，OIDC提供商可能会再次挑战用户，如果会话被配置为比ID令牌的时间更长，这可能会发生。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:829
#, fuzzy
msgid "If the `quarkus.oidc.token.refresh-expired` is set to `true`, then the expired ID token (as well as the access token) is refreshed by using the refresh token returned with the initial authorization code grant response.  This refresh token might also be recycled (refreshed) itself as part of this process.  As a result, the new session cookie is created and the session is extended."
msgstr "如果 `quarkus.oidc.token.refresh-expired` 被设置为 `true` ，那么过期的ID令牌（以及访问令牌）将通过使用与初始授权码授予响应一起返回的刷新令牌进行刷新。作为这个过程的一部分，这个刷新令牌本身也可能被回收（刷新）。因此，新的会话cookie被创建，会话被延长。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:836
#, fuzzy
msgid "In instances where the user is not very active, you can use the `quarkus.oidc.authentication.session-age-extension` property to help handle expired ID tokens.  If the ID token expires, the session cookie might not be returned to the Quarkus endpoint during the next user request as the cookie lifespan would have elapsed.  Quarkus assumes that this request is the first authentication request.  Set `quarkus.oidc.authentication.session-age-extension` to be _reasonably_ long for your barely-active users and in accordance with your security policies."
msgstr "在用户不是很活跃的情况下，你可以使用 `quarkus.oidc.authentication.session-age-extension` 属性来帮助处理过期的ID令牌。如果ID令牌过期，在下一次用户请求时，会话cookie可能不会被返回到Quarkus端点，因为cookie的寿命已经过期。Quarkus假定这个请求是第一个认证请求。对于你的几乎不活跃的用户，并根据你的安全策略，将 `quarkus.oidc.authentication.session-age-extension` ，设置为 _合理的_ 长度。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:840
#, fuzzy
msgid "You can go one step further and proactively refresh ID tokens or access tokens that are about to expire.  Set `quarkus.oidc.token.refresh-token-time-skew` to the value you want to anticipate the refresh. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr "你可以更进一步，主动地刷新即将过期的ID令牌或访问令牌。设置 `quarkus.oidc.token.refresh-token-time-skew` 到你想要预期刷新的值。如果在当前用户请求期间，计算出当前的ID令牌将在这个 `quarkus.oidc.token.refresh-token-time-skew` ，那么它将被刷新，新的会话cookie将被创建。这个属性应该被设置为一个小于ID令牌寿命的值；它越接近这个寿命值，ID令牌就会被刷新得越频繁。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:842
#, fuzzy
msgid "You can further optimize this process by having a simple JavaScript function ping your Quarkus endpoint to periodically emulate the user activity, which minimizes the time frame during which the user might have to be re-authenticated."
msgstr "你可以通过让一个简单的JavaScript函数ping你的Quarkus端点来定期模拟用户的活动来进一步优化这个过程，这样可以将用户可能需要重新认证的时间范围降到最低。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:847
#, fuzzy
msgid "You cannot extend the user session indefinitely.  The returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr "你不能无限期地延长用户会话。一旦刷新令牌过期，持有过期ID令牌的返回用户将不得不在OIDC提供者端点重新进行认证。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:850
#, fuzzy, no-wrap
msgid "Integration with GitHub and non-OIDC OAuth2 providers"
msgstr "与GitHub和非OIDC的OAuth2提供商集成"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:854
#, fuzzy
msgid "Some well known providers such as GitHub or LinkedIn are not OpenID Connect but OAuth2 providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2].  Remember, OIDC is built on top of OAuth2."
msgstr "一些知名的供应商，如GitHub或LinkedIn，不是OpenID Connect，而是OAuth2供应商，支持 `authorization code flow` ，例如 link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] 和 link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2] 。记住，OIDC是建立在OAuth2之上的。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:856
#, fuzzy
msgid "The main difference between OpenID Connect and OAuth2 providers is that OpenID Connect providers return an `ID Token` that represents a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr "OpenID Connect和OAuth2提供商之间的主要区别是，除了 `OAuth2` 提供商返回的标准授权代码流 `access` 和 `refresh` 令牌之外，OpenID Connect提供商还返回一个代表用户认证的 `ID Token` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:858
#, fuzzy
msgid "OAuth2 providers such as GitHub do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr "OAuth2供应商如GitHub不返回 `IdToken` ，用户认证的事实是隐含的，并由 `access` 令牌间接表示，代表认证用户授权当前Quarkus `web-app` 应用程序代表认证用户访问一些数据。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:862
#, fuzzy
msgid "For OIDC, you validate the ID token as proof of authentication validity whereas in the case of OAuth2, you validate the access token.  This is done by subsequently calling an endpoint that requires the access token and that typically returns user information.  This approach is similar to the OIDC xref:user-info[UserInfo] approach, with `UserInfo` fetched by Quarkus OIDC on your behalf."
msgstr "对于OIDC，你验证ID令牌作为认证有效性的证明，而在OAuth2的情况下，你验证访问令牌的有效性。这是通过随后调用一个需要访问令牌的终端来完成的，该终端通常会返回用户信息。这种方法类似于OIDC的 link:#user-info[UserInfo] 方法，由Quarkus OIDC代表你取回 `UserInfo` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:864
#, fuzzy
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token which allows the Quarkus endpoint to request a GitHub profile for the current user."
msgstr "例如，当与GitHub合作时，Quarkus端点可以获得一个 `access` token，它允许Quarkus端点请求当前用户的GitHub配置文件。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:866
#, fuzzy
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured a bit differently to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr "为了支持与此类OAuth2服务器的整合， `quarkus-oidc` ，需要进行一些不同的配置，以允许授权代码流响应，而不需要 `IdToken` ： `quarkus.oidc.authentication.id-token-required=false` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:872
#, fuzzy
msgid "Even though you configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` is generated to standardize the way `quarkus-oidc` operates.  You use an `IdToken` to support the authentication session and to avoid redirecting the user to the provider, such as GitHub, on every request.  In this case, the session lifespan is set to 5 minutes, which you can can extend further as described in the xref:session-management[session management] section."
msgstr "即使你配置的扩展支持授权代码流，没有 `IdToken` ，也会生成一个内部 `IdToken` ，以规范 `quarkus-oidc` 的操作方式。你使用 `IdToken` 来支持认证会话，并避免在每次请求时将用户重定向到提供商，如GitHub。在这种情况下，会话的寿命被设置为5分钟，你可以按照 link:#session-management[会话管理] 部分的描述进一步延长。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:874
#, fuzzy
msgid "This simplifies how you handle an application that supports multiple OIDC providers."
msgstr "这简化了你如何处理支持多个OIDC提供者的应用程序。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:883
#, fuzzy
msgid "The next step is to ensure that the returned access token can be useful and is valid to the current Quarkus endpoint.  The first way is to call the OAuth2 provider introspection endpoint by configuring `quarkus.oidc.introspection-path`, if the provider offers such an endpoint.  In this case you can use the access token as a source of roles using `quarkus.oidc.roles.source=accesstoken`.  If no introspection endpoint is present, you can attempt instead to request xref:user-info[UserInfo] from the provider as it will at least validate the access token.  To do so, specify `quarkus.oidc.token.verify-access-token-with-user-info=true`.  You also need to set the `quarkus.oidc.user-info-path` property to a URL endpoint that fetches the user info (or to an endpoint protected by the access token).  For GitHub, since it does not have an introspection endpoint, requesting the UserInfo is required."
msgstr "下一步是确保返回的访问令牌能够发挥作用，对当前的Quarkus端点有效。第一种方法是通过配置 `quarkus.oidc.introspection-path` ，调用OAuth2提供者的自省端点，如果提供者提供这样的端点。在这种情况下，你可以使用访问令牌作为角色的来源，使用 `quarkus.oidc.roles.source=accesstoken` 。如果没有自省端点，你可以尝试从提供者那里请求 link:#user-info[UserInfo] ，因为它至少会验证访问令牌。要做到这一点，请指定 `quarkus.oidc.token.verify-access-token-with-user-info=true` 。你还需要将 `quarkus.oidc.user-info-path` 属性设置为获取用户信息的URL端点（或者设置为受访问令牌保护的端点）。对于GitHub来说，由于它没有一个自省端点，请求UserInfo是必须的。"

#. type: delimited block =
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:889
#, fuzzy
msgid "Requiring xref:user-info[UserInfo] involves making a remote call on every request.  Therefore, you might want to consider caching `UserInfo` data.  For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr "要求 link:#user-info[UserInfo] 涉及到在每个请求中进行远程调用。因此，你可能想考虑缓存 `UserInfo` 数据。更多信息，请参阅 \"OpenID Connect (OIDC) Bearer token authentication \"指南中的 link:security-oidc-bearer-token-authentication.html#token-introspection-userinfo-cache[Token Introspection和UserInfo cache] 部分。"

#. type: delimited block =
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:891
#, fuzzy
msgid "Alternatively, you may want to request that `UserInfo` is embedded into the internal generated `IdToken` with the `quarkus.oidc.cache-user-info-in-idtoken=true` property - the advantage of this approach is that by default no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie. You may also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data. For more information, see xref:token-state-manager[Encrypt tokens with TokenStateManager]."
msgstr " `IdToken` 另外，你可能想要求将 `UserInfo` 嵌入到内部生成的 `quarkus.oidc.cache-user-info-in-idtoken=true` 属性中--这种方法的好处是，默认情况下，没有缓存的 `UserInfo` 状态将被保留在端点中--相反，它将被保存在一个会话cookie中。如果 `UserInfo` 包含敏感数据，你可能还想考虑在这种情况下加密 `IdToken` 。更多信息，请参见 link:#token-state-manager[用TokenStateManager加密令牌] 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:895
#, fuzzy
msgid "OAuth2 servers might not support a well-known configuration endpoint.  In this case, you must disable the discovery and configure the authorization, token, and introspection and the userinfo endpoint paths manually."
msgstr "OAuth2服务器可能不支持知名的配置端点。在这种情况下，你必须禁用发现功能，并手动配置授权、令牌和自省以及用户信息的端点路径。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:898
#, fuzzy
msgid "For well-known OIDC or OAuth2 providers, like Apple, Facebook, GitHub, Google, Microsoft, Spotify, and Twitter, Quarkus can help significantly simplify your application's configuration with the `quarkus.oidc.provider` property.  Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr "对于知名的OIDC或OAuth2提供商，如苹果、Facebook、GitHub、谷歌、微软、Spotify和Twitter，Quarkus可以通过 `quarkus.oidc.provider` 属性帮助大大简化你的应用程序的配置。下面是在你 link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[创建了GitHub OAuth应用] 后，如何将 `quarkus-oidc` 与GitHub集成。像这样配置你的Quarkus端点："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:904
#, no-wrap
msgid ""
"quarkus.oidc.provider=github\n"
"quarkus.oidc.client-id=github_app_clientid\n"
"quarkus.oidc.credentials.secret=github_app_clientsecret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:907
#, no-wrap
msgid ""
"# user:email scope is requested by default, use 'quarkus.oidc.authentication.scopes' to request different scopes such as `read:user`.\n"
"# See https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps for more information.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:914
#, no-wrap
msgid ""
"# Consider enabling UserInfo Cache\n"
"# quarkus.oidc.token-cache.max-size=1000\n"
"# quarkus.oidc.token-cache.time-to-live=5M\n"
"#\n"
"# Or having UserInfo cached inside IdToken itself\n"
"# quarkus.oidc.cache-user-info-in-idtoken=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:917
#, fuzzy
msgid "See xref:security-openid-connect-providers.adoc[OpenID Connect providers] for more details about configuring other well-known providers."
msgstr "关于配置其他知名供应商的更多细节，请参阅 link:security-openid-connect-providers.html[OpenID Connect供应商] 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:919
#, fuzzy
msgid "This is all what is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr "这就是像这样的一个端点所需要的全部内容，它可以返回当前认证用户的配置文件，并以 `GET <a href=\"http://localhost:8080/github/userinfo\" class=\"bare\">http://localhost:8080/github/userinfo</a>` 并将其作为个人 `UserInfo` 的属性进行访问："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:926
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:997
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:929
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:933
#, no-wrap
msgid ""
"@Path(\"/github\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:936
#, no-wrap
msgid ""
"    @Inject\n"
"    UserInfo userInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:944
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/userinfo\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserInfo() {\n"
"        return userInfo.getUserInfoString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:947
#, fuzzy
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google which is an OpenID Connect Provider returning `IdToken` and GitHub which is an OAuth2 provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr "如果你在 link:security-openid-connect-multitenancy.html[OpenID Connect多租户] 的帮助下支持一个以上的社交提供商，例如，谷歌是一个OpenID Connect提供商，返回 `IdToken` ，而GitHub是一个OAuth2提供商，不返回 `IdToken` ，只允许访问 `UserInfo` ，那么你可以让你的端点在谷歌和GitHub流程中只使用注入的 `SecurityIdentity` 。需要对 `SecurityIdentity` 进行简单的增强，当GiHub流量激活时，用内部生成的 `IdToken` 创建的本金将被替换为基于 `UserInfo` 的本金："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:951
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:953
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:955
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1084
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:963
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:966
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityIdentityAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:974
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        RoutingContext routingContext = identity.getAttribute(RoutingContext.class.getName());\n"
"        if (routingContext != null && routingContext.normalizedPath().endsWith(\"/github\")) {\n"
"\t        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
"\t        UserInfo userInfo = identity.getAttribute(\"userinfo\");\n"
"\t        builder.setPrincipal(new Principal() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:979
#, no-wrap
msgid ""
"\t            @Override\n"
"\t            public String getName() {\n"
"\t                return userInfo.getString(\"preferred_username\");\n"
"\t            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:985
#, no-wrap
msgid ""
"\t        });\n"
"\t        identity = builder.build();\n"
"        }\n"
"        return Uni.createFrom().item(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:987
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:990
#, fuzzy
msgid "Now, the following code will work when the user signs into your application by using Google or GitHub:"
msgstr "现在，当用户通过使用谷歌或GitHub登录你的应用程序时，下面的代码将发挥作用："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1000
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1004
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1007
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1014
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/google\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1022
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/github\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getUserName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1025
#, fuzzy
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` with the providers which do not return `IdToken`."
msgstr "更简单的方法是同时注入 `@IdToken JsonWebToken` 和 `UserInfo` ，在处理返回 `IdToken` 的提供者时使用 `JsonWebToken` ，在处理不返回 `IdToken` 的提供者时使用 `UserInfo` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1027
#, fuzzy
msgid "You must ensure that the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr "你必须确保在GitHub OAuth应用配置中输入的回调路径与你希望在GitHub认证和应用授权成功后用户被重定向到的端点路径相匹配，在这种情况下，它必须被设置为 `http:localhost:8080/github/userinfo` 。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1029
#, fuzzy, no-wrap
msgid "Listening to important authentication events"
msgstr "听取重要的认证事件"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1035
#, fuzzy
msgid "You can register the `@ApplicationScoped` bean which will observe important OIDC authentication events.  When a user logs in for the first time, reauthenticates, or refreshes the session, the listener is updated.  In the future, more events might be reported.  For example:"
msgstr "你可以注册 `@ApplicationScoped` bean，它将观察重要的OIDC认证事件。当用户首次登录、重新认证或刷新会话时，监听器会被更新。在未来，可能会有更多的事件被报告。比如说："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1040
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1045
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdTokenCredential;\n"
"import io.quarkus.oidc.SecurityEvent;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1048
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SecurityEventListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1055
#, no-wrap
msgid ""
"    public void event(@Observes SecurityEvent event) {\n"
"        String tenantId = event.getSecurityIdentity().getAttribute(\"tenant-id\");\n"
"        RoutingContext vertxContext = event.getSecurityIdentity().getAttribute(RoutingContext.class.getName());\n"
"        vertxContext.put(\"listener-message\", String.format(\"event:%s,tenantId:%s\", event.getEventType().name(), tenantId));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1057
#, fuzzy, no-wrap
msgid "Propagating tokens to downstream services"
msgstr "将代币传播给下游服务"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1060
#, fuzzy
msgid "For information about Authorization Code Flow access token propagation to downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section."
msgstr "关于授权代码流访问令牌传播到下游服务的信息，请参见 link:security-openid-connect-client-reference.html#token-propagation[令牌传播] 部分。"

#. type: Title ==
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1062
#, fuzzy, no-wrap
msgid "Integration considerations"
msgstr "整合考虑"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1065
#, fuzzy
msgid "Your application secured by OIDC integrates in an environment where it can be called from single-page applications, needs to work with well-known OIDC providers, run behind HTTP Reverse Proxy, require external and internal access, etc."
msgstr "你的由OIDC保障的应用程序集成在一个环境中，它可以从单页应用程序中调用，需要与知名的OIDC供应商合作，在HTTP反向代理后面运行，需要外部和内部访问，等等。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1067
#, fuzzy
msgid "This section discusses these considerations."
msgstr "本节讨论了这些考虑。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1068
#, fuzzy, no-wrap
msgid "Single-page applications"
msgstr "单页应用程序"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1071
#, fuzzy
msgid "You can check if implementing single-page applications (SPAs) the way it is suggested in the xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[Single-page applications] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide meets your requirements."
msgstr "你可以检查按照 \"OpenID Connect (OIDC)承载令牌认证 \"指南中的 link:security-oidc-bearer-token-authentication.html#single-page-applications[单页应用] 部分建议的方式实现单页应用（SPA）是否符合你的要求。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1074
#, fuzzy
msgid "If you prefer to use SPAs and JavaScript APIs such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OpenID Connect providers might not support cross-origin resource sharing (CORS) for authorization endpoints where the users are authenticated after a redirect from Quarkus.  This will lead to authentication failures if the Quarkus application and the OpenID Connect provider are hosted on different HTTP domains, ports, or both."
msgstr "如果你喜欢使用SPA和JavaScript API，如 `Fetch` 或 `XMLHttpRequest` (XHR)与Quarkus网络应用程序，请注意OpenID Connect提供商可能不支持授权端点的跨源资源共享（CORS），因为用户在从Quarkus重定向后会得到认证。如果Quarkus应用程序和OpenID Connect提供商被托管在不同的HTTP域、端口或两者上，这将导致认证失败。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1076
#, fuzzy
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false`, which will instruct Quarkus to return a `499` status code and a `WWW-Authenticate` header with the `OIDC` value."
msgstr "在这种情况下，将 `quarkus.oidc.authentication.java-script-auto-redirect` 属性设置为 `false` ，这将指示 Quarkus 返回一个 `499` 状态代码和一个带有 `OIDC` 值的 `WWW-Authenticate` 头。你还必须更新浏览器脚本，将 `X-Requested-With` 头部设置为 `JavaScript` 值，并在出现 `499` 状态代码的情况下重新加载最后请求的页面。比如说："

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1078
msgid "The browser script must set a header to identify the current request as a JavaScript request for `499` status code to be returned when `quarkus.oidc.authentication.java-script-auto-redirect` property is set to `false`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1080
msgid "If the script engine sets an engine-specific request header itself, then you can register a custom `quarkus.oidc.JavaScriptRequestChecker` bean, which will inform Quarkus if the current request is a JavaScript request. For example, if the JavaScript engine sets a header such as `HX-Request: true` then you can have it checked like this:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1087
#, no-wrap
msgid ""
"import io.quarkus.oidc.JavaScriptRequestChecker;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1090
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomJavaScriptRequestChecker implements JavaScriptRequestChecker {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1096
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isJavaScriptRequest(RoutingContext context) {\n"
"        return \"true\".equals(context.request().getHeader(\"HX-Request\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1099
msgid "and reload the last requested page in case of a `499` status code."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1101
#, fuzzy
msgid "Otherwise you must also update the browser script to set the `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of a `499` status code."
msgstr "在这种情况下，将 `quarkus.oidc.authentication.java-script-auto-redirect` 属性设置为 `false` ，这将指示 Quarkus 返回一个 `499` 状态代码和一个带有 `OIDC` 值的 `WWW-Authenticate` 头。你还必须更新浏览器脚本，将 `X-Requested-With` 头部设置为 `JavaScript` 值，并在出现 `499` 状态代码的情况下重新加载最后请求的页面。比如说："

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1103
msgid "For example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1108
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-With\", \"JavaScript\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1117
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1119
#, fuzzy, no-wrap
msgid "Cross-origin resource sharing"
msgstr "跨原产地资源共享"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1123
#, fuzzy
msgid "If you plan to consume this application from a single-page application running on a different domain, you need to configure cross-origin resource sharing (CORS).  For more information, see the xref:http-reference.adoc#cors-filter[CORS filter] section of the \"HTTP reference\" guide."
msgstr "如果你计划从运行在不同域的单页应用程序中消费这个应用程序，你需要配置跨源资源共享（CORS）。欲了解更多信息，请参阅 \"HTTP参考 \"指南中的 link:http-reference.html#cors-filter[CORS过滤器] 部分。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1124
#, fuzzy, no-wrap
msgid "Calling Cloud provider services"
msgstr "呼叫云供应商服务"

#. type: Title ====
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1126
#, fuzzy, no-wrap
msgid "Google Cloud"
msgstr "谷歌云"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1129
#, fuzzy
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently-authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google developer consoles."
msgstr "您可以让Quarkus OIDC `web-app` 应用程序代表当前认证的用户访问 *谷歌云服务* ，如 *BigQuery* ，这些用户在他们的谷歌开发者控制台中启用了OpenID Connect（授权代码流）权限来访问这些服务。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1132
#, fuzzy
msgid "It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr "使用 link:https://github.com/quarkiverse[Quarkiverse] link:https://github.com/quarkiverse/quarkiverse-google-cloud-services[谷歌云服务] 超级容易，只需添加 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新的标签] 服务依赖，例如："

#. type: Block title
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1134
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1239
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1272
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1392
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1141
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.googlecloudservices</groupId>\n"
"    <artifactId>quarkus-google-cloud-bigquery</artifactId>\n"
"    <version>${quarkiverse.googlecloudservices.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1144
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1260
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1282
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1402
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1147
#, no-wrap
msgid "implementation(\"io.quarkiverse.googlecloudservices:quarkus-google-cloud-bigquery:${quarkiverse.googlecloudservices.version}\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1150
#, fuzzy
msgid "and configure Google OIDC properties:"
msgstr "并配置谷歌OIDC属性："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1157
#, no-wrap
msgid ""
"quarkus.oidc.provider=google\n"
"quarkus.oidc.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.token.issuer=https://accounts.google.com\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1159
#, fuzzy, no-wrap
msgid "Running Quarkus application behind a reverse proxy"
msgstr "在反向代理后面运行Quarkus应用程序"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1162
#, fuzzy
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr "如果你的Quarkus应用程序在反向代理/网关/防火墙后面运行，OIDC认证机制可能会受到影响，此时HTTP `Host` 头可能被重置为内部IP地址，HTTPS连接可能被终止，等等。例如，授权码流 `redirect_uri` 参数可能被设置为内部主机而不是预期的外部主机。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1164
#, fuzzy
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, for more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr "在这种情况下，需要配置Quarkus来识别由代理转发的原始头信息，更多信息请参见 link:http-reference.html#reverse-proxy[运行在反向代理] Vert.x文档部分。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1166
#, fuzzy
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr "例如，如果你的Quarkus端点在Kubernetes Ingress后面的集群中运行，那么从OpenID Connect Provider重定向回这个端点可能会不工作，因为计算出来的 `redirect_uri` 参数可能指向内部端点地址。这个问题可以通过以下配置来解决："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1173
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.allow-forwarded=false\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.forwarded-host-header=X-ORIGINAL-HOST\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1176
#, fuzzy
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr "其中 `X-ORIGINAL-HOST` ，由Kubernetes Ingress设置，代表外部端点地址。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1178
#, fuzzy
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr " `quarkus.oidc.authentication.force-redirect-https-scheme` 属性也可以在Quarkus应用程序在SSL终端反向代理后面运行时使用。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1179
#, fuzzy, no-wrap
msgid "External and internal access to the OIDC provider"
msgstr "外部和内部访问OIDC提供者"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1183
#, fuzzy
msgid "Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.  In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr "请注意，OpenID Connect Provider外部可访问的授权、注销和其他端点的HTTP(S)URL可能与自动发现的或相对于 `quarkus.oidc.auth-server-url` 内部URL配置的URL不同。在这种情况下，端点可能会报告发行人验证失败，重定向到外部可访问的连接提供者端点可能会失败。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1186
#, fuzzy
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "在这种情况下，如果你使用Keycloak，那么请用 `KEYCLOAK_FRONTEND_URL` 系统属性设置为外部可访问的基本URL来启动它。如果你使用其他Openid Connect提供商，那么请查看你的提供商的文档。"

#. type: Title ==
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1188
#, no-wrap
msgid "OIDC SAML Identity broker"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1191
msgid "If your identity provider does not implement OpenId Connect but only the legacy XML-based SAML2.0 SSO protocol, then Quarkus can not be used as a SAML 2.0 adapter, similarly to how `quarkus-oidc` is used as an OIDC adapter."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1193
msgid "However, many OIDC providers such as Keycloak, Okta, Auth0, Microsoft ADFS can offer OIDC to SAML 2.0 bridges. You can create an identity broker connection to SAML 2.0 provider in your OIDC provider and use `quarkus-oidc` to authenticate your users to this SAML 2.0 provider with the OIDC provider coordinating OIDC and SAML 2.0 communications. As far as Quarkus endpoints are concerned, they can continue using the same Quarkus Security and OIDC API and annotations such as `@Authenticated`, `SecurityIdentity`, etc."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1195
msgid "For example, lets assume `Okta` is your SAML 2.0 provider and `Keycloak` is your OIDC provider. Here is a typical sequence explaining how to configure `Keycloak` to broker with the `Okta` SAML 2.0 provider."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1197
msgid "First, create a new `SAML2` integration in your `Okta` `Dashboard/Applications`:"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1198
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1202
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1206
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1210
#, no-wrap
msgid "Okta"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1198
#, no-wrap
msgid "okta-create-saml-integration.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1201
msgid "For example, name it as `OktaSaml`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1202
#, no-wrap
msgid "okta-saml-general-settings.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1205
msgid "Next, configure it to point to a Keycloak SAML broker endpoint. At this point you need to know the name of the Keycloak realm, for example, `quarkus`, and, assuming that the Keycloak SAML broker alias is `saml`, enter the endpoint address as `http:localhost:8081/realms/quarkus/broker/saml/endpoint` and Service provider (SP) entity id as `http:localhost:8081/realms/quarkus`, where `http://localhost:8081` is a Keycloak base address and `saml` is a broker alias:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1206
#, no-wrap
msgid "okta-saml-configuration.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1209
msgid "Next, save this SAML integration and note its Metadata URL:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1210
#, no-wrap
msgid "okta-saml-metadata.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1213
msgid "Next, add SAML Provider to Keycloak:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1215
msgid "First, as usual, create a new realm or import the existing realm to `Keycloak`, in this case, the realm name has to be `quarkus`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1217
msgid "Now, in the `quarkus` Realm properties, navigate to `Identity Providers` and add a new SAML provider:"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1218
#, no-wrap
msgid "Keycloak"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1218
#, no-wrap
msgid "keycloak-add-saml-provider.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1221
msgid "Note the alias is set to `saml`, `Redirect URI` is `http:localhost:8081/realms/quarkus/broker/saml/endpoint` and `Service provider entity id` is `http:localhost:8081/realms/quarkus` - these are the same values you have entered when creating the Okta SAML integration in the previous step."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1223
msgid "Finally, set `Service entity descriptor` to point to the Okta SAML Intregration Metadata URL you noted at the end of the previous step."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1225
msgid "Next, if you would like, you can register this Keycloak SAML Provider as a Default Provider by navigating to `Authentication/browser/Identity Provider Redirector config` and setting both `Alias` and `Default Identity Provider` properties to `saml`. If you do not configure it as a Default Provider then, at the authentication time, Keycloak will offer 2 options - authenticate with the SAML provider, and authenticate directly to Keycloak with the name and password."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1227
msgid "Now configure the Quarkus OIDC `web-app` application to point to the Keycloak `quarkus` realm, `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus` and you are ready to start authenticating your Quarkus users to the Okta SAML 2.0 provider using an OIDC to SAML bridge provided by Keycloak OIDC and Okta SAML 2.0 providers."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1229
msgid "You can configure other OIDC providers to provide a SAML bridge similarly to how it can be done for Keycloak."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1231
#, fuzzy, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1235
#, fuzzy
msgid "Testing is often tricky when it comes to authentification to a separate OIDC like server.  Quarkus offers several options from mocking to a local run of an OIDC provider."
msgstr "当涉及到对一个单独的OIDC如服务器的认证时，测试往往是很棘手的。Quarkus提供了几种选择，从模拟到OIDC提供者的本地运行。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1237
#, fuzzy
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1257
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>org.eclipse.jetty</groupId>\n"
"            <artifactId>*</artifactId>\n"
"       </exclusion>\n"
"    </exclusions>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1264
#, no-wrap
msgid ""
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1267
#, fuzzy, no-wrap
msgid "Wiremock"
msgstr "缆车"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1270
#, fuzzy
msgid "Add the following dependency:"
msgstr "添加以下依赖关系："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1279
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1285
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1288
#, fuzzy
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr "准备好REST测试端点，设置 `application.properties` ，例如："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1296
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-web-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1299
#, fuzzy
msgid "and finally write the test code, for example:"
msgstr "并最终写出测试代码，例如：："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1303
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1305
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1310
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1314
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1318
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class CodeFlowAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1324
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCodeFlow() throws Exception {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            // the test REST endpoint listens on '/code-flow'\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/code-flow\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1329
#, no-wrap
msgid ""
"            HtmlForm form = page.getFormByName(\"form\");\n"
"            // user 'alice' has the 'user' role\n"
"            form.getInputByName(\"username\").type(\"alice\");\n"
"            form.getInputByName(\"password\").type(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1331
#, no-wrap
msgid "            page = form.getInputByValue(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1335
#, no-wrap
msgid ""
"            assertEquals(\"alice\", page.getBody().asText());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1342
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1345
#, fuzzy
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr " `OidcWiremockTestResource` 识别 和 用户。用户 ，默认情况下只有 角色--可以通过 系统属性来定制。用户 默认拥有 和 角色 - 它可以通过 系统属性进行定制。 `alice` `admin` `alice` `user` `quarkus.test.oidc.token.user-roles` `admin` `user` `admin` `quarkus.test.oidc.token.admin-roles` "

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1347
#, fuzzy
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "此外， `OidcWiremockTestResource` ，将代币发行者和受众设置为 `<a href=\"https://service.example.com\" class=\"bare\">https://service.example.com</a>` 这可以通过 `quarkus.test.oidc.token.issuer` 和 `quarkus.test.oidc.token.audience` 系统属性来定制。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1349
#, fuzzy
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr " `OidcWiremockTestResource` 可以用来模拟所有的OpenID Connect提供商。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1351
#, fuzzy, no-wrap
msgid "Dev services for Keycloak"
msgstr "为Keycloak提供的开发服务"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1355
#, fuzzy
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "建议使用 link:security-openid-connect-dev-services.html[Dev Services for Keycloak] 进行针对Keycloak的集成测试。 `Dev Services for Keycloak` 将启动和初始化一个测试容器：它将创建一个 `quarkus` 领域，一个 `quarkus-app` 客户端（ `secret` 秘密）并添加 `alice` （ `admin` 和 `user` 角色）和 `bob` （ `user` 角色）用户，其中所有这些属性都可以自定义。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1357
#, fuzzy
msgid "First, prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "首先，准备 `application.properties` 。你可以从一个完全空的 `application.properties` 开始，因为 `Dev Services for Keycloak` 将注册指向运行中的测试容器的 `quarkus.oidc.auth-server-url` ，以及 `quarkus.oidc.client-id=quarkus-app` 和 `quarkus.oidc.credentials.secret=secret` 。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1359
#, fuzzy
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "但是如果你已经配置了所有需要的 `quarkus-oidc` 属性，那么你只需要将 `quarkus.oidc.auth-server-url` 与 \"Keycloak的开发服务 \"的 `prod` 配置文件联系起来，以启动一个容器，例如："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1363
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1366
#, fuzzy
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "如果在运行测试之前必须将自定义境界文件导入Keycloak，那么你可以按以下方式配置 `Dev Services for Keycloak` ："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1371
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1375
#, fuzzy
msgid "Finally, write a test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.  The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr "最后，按照 link:#integration-testing-wiremock[Wiremock] 部分描述的相同方式编写测试代码。唯一的区别是，不再需要 `@QuarkusTestResource` ："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1381
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1384
#, fuzzy, no-wrap
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr "使用KeycloakTestResourceLifecycleManager"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1388
#, fuzzy
msgid "Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.  If you need to do the integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev services For Keycloak]."
msgstr "只有在有很好的理由不使用 `Dev Services for Keycloak` ，才可以使用 `KeycloakTestResourceLifecycleManager` 进行测试。如果你需要对Keycloak进行集成测试，那么我们鼓励你用 link:#integration-testing-keycloak-devservices[Dev services For Keycloak] 来做。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1390
#, fuzzy
msgid "Start with adding the following dependency:"
msgstr "首先要添加以下依赖关系："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1399
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1405
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1408
#, fuzzy
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "它提供了 `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - 一个实现 `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` ，启动一个Keycloak容器。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1410
#, fuzzy
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "并按如下方式配置Maven Surefire插件："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1426
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1429
#, fuzzy
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr "(和类似的Maven Failsafe插件，在本地图像中测试时）。"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1432
#, fuzzy
msgid "And now set the configuration and write the test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.  The only difference is the name of `QuarkusTestResource`:"
msgstr "现在设置配置和编写测试代码的方式与 link:#integration-testing-wiremock[Wiremock] 部分描述的一样。唯一不同的是 `QuarkusTestResource` 的名称："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1436
#, no-wrap
msgid "import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1441
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1444
#, fuzzy
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr " `KeycloakTestResourceLifecycleManager` 注册了 和 用户。用户 ，默认情况下只有 角色 - 它可以通过 系统属性进行定制。用户 默认拥有 和 角色 - 它可以通过 系统属性进行定制。 `alice` `admin` `alice` `user` `keycloak.token.user-roles` `admin` `user` `admin` `keycloak.token.admin-roles` "

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1447
#, fuzzy
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "默认情况下， `KeycloakTestResourceLifecycleManager` 使用HTTPS来初始化Keycloak实例，可以用 `keycloak.use.https=false` 来禁用。默认的境界名称是 `quarkus` ，客户端ID - `quarkus-web-app` - 如果需要，可以设置 `keycloak.realm` 和 `keycloak.web-app.client` 系统属性来定制数值。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1449
#, fuzzy, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity注解"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1452
#, fuzzy
msgid "See xref:security-oidc-bearer-token-authentication.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "参见使用 link:security-oidc-bearer-token-authentication.html#integration-testing-security-annotation[TestingSecurity与注入的JsonWebToken] 部分，了解更多关于使用 `@TestSecurity` 和 `@OidcSecurity` 注释来测试 `web-app` 应用程序端点代码的信息，该代码依赖于注入的ID和访问 `JsonWebToken` 以及 `UserInfo` 和 `OidcConfigurationMetadata` 。"

#. type: Title ===
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1453
#, fuzzy, no-wrap
msgid "Checking errors in the logs"
msgstr "检查日志中的错误"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1456
#, fuzzy
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr "要看到关于令牌验证错误的细节，你必须启用 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` 级日志："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1461
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1464
#, fuzzy
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr "要看到关于OidcProvider客户端初始化错误的细节，请启用 `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` 级日志："

#. type: delimited block -
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1469
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1472
#, fuzzy
msgid "You can also from `quarkus dev` console hit `j` to change the application global log level."
msgstr "你也可以从 `quarkus dev` 控制台点击 `j` 来改变应用程序的全局日志级别。"

#. type: Title ==
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1473
#, fuzzy, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1476
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1477
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect Providers]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1478
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1479
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1480
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1481
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1482
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1483
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1484
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-code-flow-authentication.adoc:1485
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""
