# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-09 13:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/smallrye-graphql.adoc:6
#, fuzzy, no-wrap
msgid "SmallRye GraphQL"
msgstr "小黑麦GraphQL"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:13
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL], an implementation of the https://github.com/eclipse/microprofile-graphql/[MicroProfile GraphQL] specification."
msgstr "本指南展示了你的Quarkus应用程序如何使用 link:https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] ，这是 link:https://github.com/eclipse/microprofile-graphql/[MicroProfile GraphQL] 规范的一个实现。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:15
#, fuzzy
msgid "As the https://www.graphql.org/[GraphQL] specification website states:"
msgstr "正如 link:https://www.graphql.org/[GraphQL] 规范网站所述。"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:21
#, fuzzy
msgid "GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.  GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools."
msgstr "GraphQL是一种用于API的查询语言，也是用你的现有数据完成这些查询的运行时间。GraphQL为你的API中的数据提供了完整的、可理解的描述，使客户有能力准确地要求他们所需要的东西，而不是更多，使API随着时间的推移更容易发展，并使强大的开发者工具成为可能。"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:24
#, fuzzy, no-wrap
msgid ""
"**GraphQL** was originally developed by **Facebook** in 2012 and has been\n"
"an open standard since 2015.\n"
msgstr " *GraphQL* 最初由 *Facebook* 在2012年开发，并从2015年起成为一个开放标准。"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:27
#, fuzzy
msgid "GraphQL is not a replacement for REST API specification but merely an alternative. Unlike REST, GraphQL API's have the ability to benefit the client by:"
msgstr "GraphQL不是REST API规范的替代品，而只是一种替代。与REST不同，GraphQL API有能力通过以下方式使客户受益。"

#. type: Labeled list
#: upstream/_guides/smallrye-graphql.adoc:28
#, fuzzy, no-wrap
msgid "Preventing Over-fetching and Under-fetching"
msgstr "防止过度获取和获取不足"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:34
#, fuzzy
msgid "REST APIs are server-driven fixed data responses that cannot be determined by the client. Although the client does not require all the fields the client must retrieve all the data hence `Over-fetching`. A client may also require multiple REST API calls according to the first call (HATEOAS) to retrieve all the data that is required thereby `Under-fetching`."
msgstr "REST API是服务器驱动的固定数据响应，不能由客户端决定。尽管客户端不需要所有的字段，但客户端必须检索所有的数据，因此 `Over-fetching` 。客户端也可能需要多次REST API调用，根据第一次调用（HATEOAS）来检索所有需要的数据，因此 `Under-fetching` 。"

#. type: Labeled list
#: upstream/_guides/smallrye-graphql.adoc:35
#, fuzzy, no-wrap
msgid "API Evolution"
msgstr "API的演变"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:39
#, fuzzy
msgid "Since GraphQL API's returns data that are requested by the client adding additional fields and capabilities to existing API will not create breaking changes to existing clients."
msgstr "由于GraphQL API的返回数据是由客户要求的，在现有的API中增加额外的字段和功能，不会对现有的客户造成破坏性的改变。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:40
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:44
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:48
#, fuzzy
msgid "In this guide, we build a simple GraphQL application that exposes a GraphQL API at `/graphql`."
msgstr "在本指南中，我们建立了一个简单的GraphQL应用程序，在 `/graphql` ，暴露了GraphQL API。"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:50
#, fuzzy
msgid "This example was inspired by a popular GraphQL API."
msgstr "这个例子是受一个流行的GraphQL API的启发。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:51
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:55
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:57
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:59
#, fuzzy
msgid "The solution is located in the `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[directory]."
msgstr "该解决方案位于 `microprofile-graphql-quickstart` {quickstarts-treeurl}/microprofile-graphql-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:60
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:63
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:69
#, fuzzy
msgid "This command generates a project, importing the `smallrye-graphql` extension."
msgstr "该命令生成一个项目，导入 `smallrye-graphql` 扩展。"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:72
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `smallrye-graphql` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `smallrye-graphql` 扩展到你的项目。"

#. type: quote
#: upstream/_guides/smallrye-graphql.adoc:77
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/smallrye-graphql.adoc:79
#: upstream/_guides/smallrye-graphql.adoc:1291
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:85
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-graphql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/smallrye-graphql.adoc:88
#: upstream/_guides/smallrye-graphql.adoc:1300
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:91
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-graphql\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:93
#, fuzzy, no-wrap
msgid "Preparing an Application: GraphQL API"
msgstr "准备一个应用程序。GraphQL API"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:96
#, fuzzy
msgid "In this section we will start creating the GraphQL API."
msgstr "在本节中，我们将开始创建GraphQL API。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:98
#, fuzzy
msgid "First, create the following entities representing a film from a galaxy far, far away:"
msgstr "首先，创建以下实体，代表一部来自遥远的银河系的电影。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:102
#: upstream/_guides/smallrye-graphql.adoc:700
#, no-wrap
msgid "package org.acme.microprofile.graphql;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:104
#, no-wrap
msgid "public class Film {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:109
#, no-wrap
msgid ""
"    public String title;\n"
"    public Integer episodeID;\n"
"    public String director;\n"
"    public LocalDate releaseDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:111
#: upstream/_guides/smallrye-graphql.adoc:123
#: upstream/_guides/smallrye-graphql.adoc:707
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:113
#, no-wrap
msgid "public class Hero {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:121
#, no-wrap
msgid ""
"    public String name;\n"
"    public String surname;\n"
"    public Double height;\n"
"    public Integer mass;\n"
"    public Boolean darkSide;\n"
"    public LightSaber lightSaber;\n"
"    public List<Integer> episodeIds = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:127
#, no-wrap
msgid ""
"enum LightSaber {\n"
"    RED, BLUE, GREEN\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:130
#, fuzzy
msgid "For readability we use classes with public fields, but classes with private fields with public getters and setters will also work."
msgstr "为了便于阅读，我们使用带有公共字段的类，但带有公共getters和setters的私有字段的类也可以使用。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:133
#, fuzzy
msgid "The classes we have just created describe the GraphQL schema which is a set of possible data (objects, fields, relationships) that a client can access."
msgstr "我们刚刚创建的类描述了GraphQL模式，这是一组可能的数据（对象、字段、关系），客户端可以访问。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:135
#, fuzzy
msgid "Let's continue with an example CDI bean, that would work as a repository:"
msgstr "让我们继续看一个CDI bean的例子，它可以作为一个资源库来使用。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:140
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GalaxyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:142
#, no-wrap
msgid "    private List<Hero> heroes = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:144
#, no-wrap
msgid "    private List<Film> films = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:146
#, no-wrap
msgid "    public GalaxyService() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:152
#, no-wrap
msgid ""
"        Film aNewHope = new Film();\n"
"        aNewHope.title = \"A New Hope\";\n"
"        aNewHope.releaseDate = LocalDate.of(1977, Month.MAY, 25);\n"
"        aNewHope.episodeID = 4;\n"
"        aNewHope.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:158
#, no-wrap
msgid ""
"        Film theEmpireStrikesBack = new Film();\n"
"        theEmpireStrikesBack.title = \"The Empire Strikes Back\";\n"
"        theEmpireStrikesBack.releaseDate = LocalDate.of(1980, Month.MAY, 21);\n"
"        theEmpireStrikesBack.episodeID = 5;\n"
"        theEmpireStrikesBack.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:164
#, no-wrap
msgid ""
"        Film returnOfTheJedi = new Film();\n"
"        returnOfTheJedi.title = \"Return Of The Jedi\";\n"
"        returnOfTheJedi.releaseDate = LocalDate.of(1983, Month.MAY, 25);\n"
"        returnOfTheJedi.episodeID = 6;\n"
"        returnOfTheJedi.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:168
#, no-wrap
msgid ""
"        films.add(aNewHope);\n"
"        films.add(theEmpireStrikesBack);\n"
"        films.add(returnOfTheJedi);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:177
#, no-wrap
msgid ""
"        Hero luke = new Hero();\n"
"        luke.name = \"Luke\";\n"
"        luke.surname = \"Skywalker\";\n"
"        luke.height = 1.7;\n"
"        luke.mass = 73;\n"
"        luke.lightSaber = LightSaber.GREEN;\n"
"        luke.darkSide = false;\n"
"        luke.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:185
#, no-wrap
msgid ""
"        Hero leia = new Hero();\n"
"        leia.name = \"Leia\";\n"
"        leia.surname = \"Organa\";\n"
"        leia.height = 1.5;\n"
"        leia.mass = 51;\n"
"        leia.darkSide = false;\n"
"        leia.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:195
#, no-wrap
msgid ""
"        Hero vader = new Hero();\n"
"        vader.name = \"Darth\";\n"
"        vader.surname = \"Vader\";\n"
"        vader.height = 1.9;\n"
"        vader.mass = 89;\n"
"        vader.darkSide = true;\n"
"        vader.lightSaber = LightSaber.RED;\n"
"        vader.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:199
#, no-wrap
msgid ""
"        heroes.add(luke);\n"
"        heroes.add(leia);\n"
"        heroes.add(vader);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:201
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:205
#, no-wrap
msgid ""
"    public List<Film> getAllFilms() {\n"
"        return films;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:209
#, no-wrap
msgid ""
"    public Film getFilm(int id) {\n"
"        return films.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:215
#, no-wrap
msgid ""
"    public List<Hero> getHeroesByFilm(Film film) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.episodeIds.contains(film.episodeID))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:219
#, no-wrap
msgid ""
"    public void addHero(Hero hero) {\n"
"        heroes.add(hero);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:223
#, no-wrap
msgid ""
"    public Hero deleteHero(int id) {\n"
"        return heroes.remove(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:230
#, no-wrap
msgid ""
"    public List<Hero> getHeroesBySurname(String surname) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.surname.equals(surname))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:233
#, fuzzy
msgid "Now, let's create our first GraphQL API."
msgstr "现在，让我们来创建我们的第一个GraphQL API。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:235
#, fuzzy
msgid "Edit the `org.acme.microprofile.graphql.FilmResource` class as following:"
msgstr "编辑 `org.acme.microprofile.graphql.FilmResource` 类，如下所示。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:240
#, no-wrap
msgid ""
"@GraphQLApi // <1>\n"
"public class FilmResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:243
#, no-wrap
msgid ""
"    @Inject\n"
"    GalaxyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:250
#, no-wrap
msgid ""
"    @Query(\"allFilms\") // <2>\n"
"    @Description(\"Get all Films from a galaxy far far away\") // <3>\n"
"    public List<Film> getAllFilms() {\n"
"        return service.getAllFilms();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:253
#, fuzzy
msgid "`@GraphQLApi` annotation indicates that the CDI bean will be a GraphQL endpoint"
msgstr " `@GraphQLApi` 注解表明，CDI Bean将是一个GraphQL端点。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:254
#, fuzzy
msgid "`@Query` annotation defines that this method will be queryable with the name `allFilms`"
msgstr " `@Query` 注解定义了这个方法可以用以下名称进行查询 `allFilms` "

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:255
#, fuzzy
msgid "Documentation of the queryable method"
msgstr "可查询方法的文件"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:258
#, fuzzy
msgid "The value of the `@Query` annotation is optional and would implicitly be defaulted to the method name if absent."
msgstr " `@Query` 注解的值是可选的，如果没有，将隐含地默认为方法名。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:260
#, fuzzy
msgid "This way we have created our first queryable API which we will later expand."
msgstr "这样，我们就创建了第一个可查询的API，以后我们将对其进行扩展。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:261
#, fuzzy, no-wrap
msgid "Launch"
msgstr "启动"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:264
#, fuzzy
msgid "Launch the quarkus application in dev mode:"
msgstr "在开发模式下启动quarkus应用程序。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:267
#, fuzzy, no-wrap
msgid "Introspect"
msgstr "自省"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:270
#, fuzzy
msgid "The full schema of the GraphQL API can be retrieved by calling the following:"
msgstr "GraphQL API的完整模式可以通过调用以下内容进行检索。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:274
#, no-wrap
msgid "curl http://localhost:8080/graphql/schema.graphql\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:277
#, fuzzy
msgid "The server will return the complete schema of the GraphQL API."
msgstr "服务器将返回GraphQL API的完整模式。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:279
#, fuzzy, no-wrap
msgid "GraphQL UI"
msgstr "GraphiQL用户界面"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:282
#: upstream/_guides/smallrye-graphql.adoc:690
#, fuzzy
msgid "Experimental - not included in the MicroProfile specification"
msgstr "实验性的--不包括在MicroProfile规范中"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:284
#, fuzzy
msgid "GraphQL UI is a great tool permitting easy interaction with your GraphQL APIs."
msgstr "GraphiQL UI是一个伟大的工具，允许与你的GraphQL APIs轻松互动。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:287
#, fuzzy
msgid "The Quarkus `smallrye-graphql` extension ships with https://github.com/graphql/graphiql/blob/main/packages/graphiql/README.md[GraphiQL] and enables it by default in `dev` and `test` modes, but it can also be explicitly configured for `production` mode as well, by setting the `quarkus.smallrye-graphql.ui.always-include` configuration property to `true`."
msgstr "Quarkus `smallrye-graphql` 扩展与 `GraphiQL` 一起提供，并在 `dev` 和 `test` 模式下默认启用，但也可以明确配置为 `production` 模式。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:289
#, fuzzy
msgid "The GraphQL UI can be accessed from http://localhost:8080/q/graphql-ui/ ."
msgstr "GraphiQL可以从 http://localhost:8080/q/graphql-ui/ 。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:291
#, fuzzy
msgid "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"
msgstr "image:graphql-ui-screenshot01.png[alt=\"GraphQL UI\"]"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:293
#, fuzzy
msgid "Have a look at the link:security-authorization[Authorization of Web Endpoints] Guide on how to add/remove security for the GraphQL UI."
msgstr "请看看《 link:security-authorization[网络端点授权] 指南》，了解如何为GraphQL用户界面添加/删除安全性。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:294
#, fuzzy, no-wrap
msgid "Query the GraphQL API"
msgstr "查询GraphQL API"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:297
#, fuzzy
msgid "Now visit the GraphQL UI page that has been deployed in `dev` mode."
msgstr "现在访问已经部署在 `dev` 模式中的GraphiQL页面。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:299
#, fuzzy
msgid "Enter the following query to the GraphQL UI and press the `play` button:"
msgstr "在GraphiQL中输入以下查询，然后按 `play` 按钮。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:310
#, no-wrap
msgid ""
"query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:316
#, fuzzy
msgid "Since our query contains all the fields in the `Film` class we will retrieve all the fields in our response. Since GraphQL API responses are client determined, the client can choose which fields it will require."
msgstr "由于我们的查询包含 `Film` 类中的所有字段，我们将在我们的响应中检索所有字段。由于GraphQL API响应是由客户决定的，客户可以选择它需要的字段。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:320
#, fuzzy
msgid "Let's assume that our client only requires `title` and `releaseDate` making the previous call to the API `Over-fetching` of unnecessary data."
msgstr "让我们假设我们的客户只需要 `title` 和 `releaseDate` ，使得之前对API的调用 `Over-fetching` 了不必要的数据。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:322
#, fuzzy
msgid "Enter the following query into the GraphQL UI and hit the `play` button:"
msgstr "在GraphiQL中输入以下查询，并点击 `play` 按钮。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:331
#, no-wrap
msgid ""
"query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    releaseDate\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:335
#, fuzzy
msgid "Notice in the response we have only retrieved the required fields.  Therefore, we have prevented `Over-fetching`."
msgstr "请注意，在响应中我们只检索了所需的字段。因此，我们已经阻止了 `Over-fetching` 。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:338
#, fuzzy
msgid "Let's continue to expand our GraphQL API by adding the following to the `FilmResource` class."
msgstr "让我们继续扩展我们的GraphQL API，在 `FilmResource` 类中添加以下内容。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:346
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Film getFilm(@Name(\"filmId\") int id) {\n"
"        return service.getFilm(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:351
#, fuzzy
msgid "Notice how we have excluded the value in the `@Query` annotation.  Therefore, the name of the query is implicitly set as the method name excluding the `get`."
msgstr "注意我们是如何排除了 `@Query` 注释中的值的。因此，查询的名称被隐含地设置为排除 `get` 的方法名称。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:354
#, fuzzy
msgid "This query will allow the client to retrieve the film by id, and the `@Name` annotation on the parameter changes the parameter name to `filmId` rather than the default `id` that it would be if you omit the `@Name` annotation."
msgstr "这个查询将允许客户端按id检索影片，参数上的 `@Name` 注释将参数名称改为 `filmId` ，而不是省略 `@Name` 注释后的默认 `id` 。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:356
#: upstream/_guides/smallrye-graphql.adoc:557
#: upstream/_guides/smallrye-graphql.adoc:676
#: upstream/_guides/smallrye-graphql.adoc:766
#, fuzzy
msgid "Enter the following into the `GraphQL UI` and make a request."
msgstr "在 `GraphiQL` 中输入以下内容，并提出请求。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:367
#, no-wrap
msgid ""
"query getFilm {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:372
#, fuzzy
msgid "The `film` query method requested fields can be determined as such in our previous example. This way we can retrieve individual film information."
msgstr " `film` 查询方法所要求的字段可以按照我们前面的例子来确定。这样我们就可以检索到个别电影信息。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:376
#, fuzzy
msgid "However, say our client requires both films with filmId `0` and `1`.  In a REST API the client would have to make two calls to the API.  Therefore, the client would be `Under-fetching`."
msgstr "然而，假设我们的客户需要两部电影的filmId `0` 和 `1` 。在REST API中，客户将不得不对API进行两次调用。因此，客户端将是 `Under-fetching` 。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:378
#, fuzzy
msgid "In GraphQL, it is possible to make multiple queries at once."
msgstr "在GraphQL中，有可能一次进行多个查询。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:380
#, fuzzy
msgid "Enter the following into the `GraphQL UI` to retrieve two films:"
msgstr "在GraphiQL中输入以下内容，以检索两部影片。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:397
#, no-wrap
msgid ""
"query getFilms {\n"
"  film0: film(filmId: 0) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"  film1: film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:400
#, fuzzy
msgid "This enabled the client to fetch the required data in a single request."
msgstr "这使客户端能够在一次请求中获取所需的数据。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:401
#, fuzzy, no-wrap
msgid "Expanding the API"
msgstr "扩大API的范围"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:405
#, fuzzy
msgid "Until now, we have created a GraphQL API to retrieve film data.  We now want to enable the clients to retrieve the `Hero` data of the `Film`."
msgstr "到目前为止，我们已经创建了一个GraphQL API来检索电影数据。我们现在想让客户能够检索 `Film` 的 `Hero` 数据。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:407
#: upstream/_guides/smallrye-graphql.adoc:665
#: upstream/_guides/smallrye-graphql.adoc:755
#: upstream/_guides/smallrye-graphql.adoc:792
#: upstream/_guides/smallrye-graphql.adoc:901
#, fuzzy
msgid "Add the following to our `FilmResource` class:"
msgstr "在我们的 `FilmResource` 类中添加以下内容。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:413
#, no-wrap
msgid ""
"    public List<Hero> heroes(@Source Film film) { // <1>\n"
"        return service.getHeroesByFilm(film);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:416
#, fuzzy
msgid "Enable `List<Hero>` data to be added to queries that respond with `Film`"
msgstr "启用 `List<Hero>` ，以便将数据添加到以下列方式回应的查询中： `Film` "

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:420
#, fuzzy
msgid "By adding this method we have effectively changed the schema of the GraphQL API.  Although the schema has changed the previous queries will still work.  Since we only expanded the API to be able to retrieve the `Hero` data of the `Film`."
msgstr "通过添加这个方法，我们有效地改变了GraphQL API的模式。虽然模式发生了变化，但以前的查询仍然有效。 `Hero` 因为我们只是扩展了API，使其能够检索 `Film` 的数据。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:422
#, fuzzy
msgid "Enter the following into the `GraphQL UI` to retrieve the film and hero data."
msgstr "在GraphiQL中输入以下内容，以检索电影和英雄的数据。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:440
#, no-wrap
msgid ""
"query getFilmHeroes {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"    heroes {\n"
"      name\n"
"      height\n"
"      mass\n"
"      darkSide\n"
"      lightSaber\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:443
#, fuzzy
msgid "The response now includes the heroes of the film."
msgstr "现在的反应包括影片中的英雄们。"

#. type: Title ===
#: upstream/_guides/smallrye-graphql.adoc:444
#, fuzzy, no-wrap
msgid "Batching"
msgstr "分流"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:448
#, fuzzy
msgid "When you are exposing a `Collection` return like our `getAllFilms`, you might want to use the batch form of the above, to more efficiently fetch the heroes:"
msgstr " `Collection` 当你像我们的 `getAllFilms` ，你可能想使用上述的批处理形式，以更有效地获取英雄。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:454
#, no-wrap
msgid ""
"    public List<List<Hero>> heroes(@Source List<Film> films) { // <1>\n"
"        // Here fetch all hero lists\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:457
#, fuzzy
msgid "Here receive the films as a batch, allowing you to fetch the corresponding heroes."
msgstr "这里以批处理的方式接收电影，让你取到相应的英雄。"

#. type: Title ===
#: upstream/_guides/smallrye-graphql.adoc:458
#, fuzzy, no-wrap
msgid "Non blocking"
msgstr "非阻塞性"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:461
#, fuzzy
msgid "Queries can be made reactive by using `Uni` as a return type, or adding `@NonBlocking` to the method:"
msgstr "例如，通过使用 `Uni` ，或 `CompletionStage` 作为返回类型，可以使查询具有反应性。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:469
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Uni<Film> getFilm(int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:473
#, fuzzy
msgid "Or you can use `@NonBlocking`:"
msgstr "或者你可以使用 `CompletionStage` 。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:482
#: upstream/_guides/smallrye-graphql.adoc:496
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    @NonBlocking\n"
"    public Film getFilm(int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:485
#, fuzzy
msgid "Using `Uni` or `@NonBlocking` means that the request will be executed on Event-loop threads rather than Worker threads."
msgstr "使用 `Uni` 或 `@NonBlocking` 意味着请求将在Event-loop线程而不是Worker线程上执行。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:487
#, fuzzy
msgid "You can mix Blocking and Non-blocking in one request,"
msgstr "你可以在一个请求中混合使用阻断和非阻断。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:500
#, no-wrap
msgid ""
"    public List<Hero> heroes(@Source Film film) {\n"
"        return service.getHeroesByFilm(film);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:503
#, fuzzy
msgid "Above will fetch the film on the event-loop threads, but switch to the worker thread to fetch the heroes."
msgstr "以上将在事件循环线程上获取影片，但切换到工作线程来获取英雄。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:504
#, fuzzy, no-wrap
msgid "Abstract Types"
msgstr "抽象类型"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:509
#, fuzzy
msgid "The current schema is simple with only two concrete types, `Hero` and `Film`.  Now we want to expand our API with additional types and add some abstractions that make interacting with them easy for clients."
msgstr "目前的模式很简单，只有两个具体的类型， `Hero` 和 `Film` 。现在我们想用更多的类型来扩展我们的API，并添加一些抽象，使客户与它们的交互变得更容易。"

#. type: Title ===
#: upstream/_guides/smallrye-graphql.adoc:510
#, fuzzy, no-wrap
msgid "Interfaces"
msgstr "接口"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:513
#, fuzzy
msgid "Let's give our heroes some allies."
msgstr "让我们给我们的英雄们一些盟友。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:515
#, fuzzy
msgid "First, create a new entity to represent our `Ally`."
msgstr "首先，创建一个新的实体来代表我们的 `Ally` 。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:519
#, no-wrap
msgid "public class Ally {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:524
#, no-wrap
msgid ""
"    public String name;\n"
"    public String surname;\n"
"    public Hero partner;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:527
#, fuzzy
msgid "Update the `GalaxyService` to have some allies."
msgstr "更新 `GalaxyService` ，拥有一些盟友。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:531
#, no-wrap
msgid "    private List<Ally> allies = new ArrayList();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:534
#, no-wrap
msgid ""
"    public GalaxyService() {\n"
"        // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:540
#, no-wrap
msgid ""
"        Ally jarjar = new Ally();\n"
"        jarjar.name = \"Jar Jar\";\n"
"        jarjar.surname = \"Binks\";\n"
"        allies.add(jarjar);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:544
#, no-wrap
msgid ""
"    public List<Ally> getAllAllies() {\n"
"        return allies;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:547
#, fuzzy
msgid "Let's also update `FilmResource` to allow clients to query for all allies:"
msgstr "让我们也更新一下 `FilmResource` ，允许客户查询所有的盟友。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:554
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Ally> allies() {\n"
"        return service.getAllAllies();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:566
#, no-wrap
msgid ""
"query getAllies {\n"
"    allies {\n"
"        name\n"
"        surname\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:570
#, fuzzy
msgid "Notice that `Ally` has a some of the same fields as a `Hero`.  To better make queries easier for clients, let's create an abstraction for any character."
msgstr "请注意， `Ally` 有一些与 `Hero` 相同的字段。为了更好地使客户的查询更容易，让我们为任何字符创建一个抽象。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:572
#, fuzzy
msgid "Create a new Java interface that defines our common character traits."
msgstr "创建一个新的Java接口，定义我们共同的性格特征。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:576
#, no-wrap
msgid "public interface Character {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:581
#, no-wrap
msgid ""
"    // <1>\n"
"    String getName();\n"
"    String getSurname();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:584
#, fuzzy
msgid "Getters defined in an interface will define the GraphQL fields that it contains"
msgstr "在一个接口中定义的获取器将定义它所包含的GraphQL字段。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:586
#, fuzzy
msgid "Now, update our `Hero` and `Ally` entities to implement this interface."
msgstr "现在，更新我们的 `Hero` 和 `Ally` 实体以实现这个接口。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:591
#, no-wrap
msgid ""
"public class Hero implements Character {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:596
#: upstream/_guides/smallrye-graphql.adoc:610
#, no-wrap
msgid ""
"    // <1>\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:602
#: upstream/_guides/smallrye-graphql.adoc:616
#, no-wrap
msgid ""
"    // <1>\n"
"    public String getSurname() {\n"
"        return surname;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:605
#, no-wrap
msgid ""
"public class Ally implements Character {\n"
"    // ...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:619
#, fuzzy
msgid "Because interfaces can't define fields, we have to implement the getters"
msgstr "因为接口不能定义字段，我们必须实现获取器"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:622
#, fuzzy
msgid "By adding an interface and updating existing entities to implement it, we have effectively changed the schema.  The updated schema will now include the new `Ally` type and `Character` interface."
msgstr "通过增加一个接口并更新现有实体以实现它，我们有效地改变了模式。更新后的模式现在将包括新的 `Ally` 类型和 `Character` 接口。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:630
#, no-wrap
msgid ""
"# <1>\n"
"interface Character {\n"
"    name: String\n"
"    surname: String\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:637
#, no-wrap
msgid ""
"# <2>\n"
"type Ally implements Character {\n"
"    name: String\n"
"    surname: String\n"
"    partner: Hero\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:644
#, no-wrap
msgid ""
"# <3>\n"
"type Hero implements Character {\n"
"    name: String\n"
"    surname: String\n"
"    # ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:647
#, fuzzy
msgid "The `Character` interface was defined with the getters as fields"
msgstr " `Character` 接口被定义，其获取器为字段"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:648
#, fuzzy
msgid "The `Ally` type was added and it implements `Character`"
msgstr "增加了 `Ally` 类型，它实现了 `Character` "

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:649
#, fuzzy
msgid "The `Hero` type was updated to implement `Character`"
msgstr " `Hero` 类型进行了更新，以实现 `Character` "

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:651
#, fuzzy
msgid "Update our `GalaxyService` to provide all characters."
msgstr "更新我们的 `GalaxyService` ，提供所有字符。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:660
#, no-wrap
msgid ""
"    public List<Character> getAllCharacters() {\n"
"        List<Character> characters = new ArrayList<>();\n"
"        characters.addAll(heroes);\n"
"        characters.addAll(allies);\n"
"        return characters;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:663
#, fuzzy
msgid "Now we can allow clients to query for all characters, not just heroes."
msgstr "现在我们可以允许客户查询所有的人物，而不仅仅是英雄。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:673
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get all characters from a galaxy far far away\")\n"
"    public List<Characters> characters() {\n"
"        return service.getAllCharacters();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:685
#, no-wrap
msgid ""
"query getCharacters {\n"
"    characters {\n"
"        name\n"
"        surname\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/smallrye-graphql.adoc:687
#, fuzzy, no-wrap
msgid "Unions"
msgstr "工会"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:694
#, fuzzy
msgid "So far, our API has only allowed us to query directly for an entity or list of entities.  Now we want to allow clients to search all of our entities.  While `Hero` and `Ally` have a shared abstract type of `Character`, there is no abstraction that also includes `Film`."
msgstr "到目前为止，我们的API只允许我们直接查询一个实体或实体列表。现在，我们希望允许客户搜索我们所有的实体。虽然 `Hero` 和 `Ally` 有一个共享的抽象类型 `Character` ，但没有一个抽象也包括 `Film` 。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:696
#, fuzzy
msgid "First, create this new abstract type representing the possible return types for a search result."
msgstr "首先，创建这个新的抽象类型，代表一个搜索结果的可能返回类型。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:702
#, no-wrap
msgid "import io.smallrye.graphql.api.Union;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:705
#, no-wrap
msgid ""
"@Union // <1>\n"
"public interface SearchResult {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:710
#, fuzzy
msgid "`@Union` is required to indicate this Java interface represents a GraphQL union, not a GraphQL interface"
msgstr " `@Union` 是必须的，以表明这个Java接口代表一个GraphQL联盟，而不是一个GraphQL接口。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:713
#, fuzzy
msgid "The Java interface representing the GraphQL union does not have to be empty, but any getters defined will not explicitly change the GraphQL schema."
msgstr "代表GraphQL联盟的Java接口不一定是空的，但任何定义的getters都不会明确改变GraphQL模式。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:715
#, fuzzy
msgid "Update our entities to implement `SearchResult`:"
msgstr "更新我们的实体，实现 `SearchResult` 。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:721
#, no-wrap
msgid ""
"public class Film implements SearchResult {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:725
#, no-wrap
msgid ""
"public class Hero implements Character, SearchResult {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:729
#, no-wrap
msgid ""
"public class Ally implements Character, SearchResult {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:733
#, fuzzy
msgid "We can also leverage inheritance and have `interface Character extends SearchResult`.  This will result in all implementations of `Character` being added as members of the `SearchResult` union in the schema."
msgstr "我们还可以利用继承的方式，将 `interface Character extends SearchResult` 。这将导致 `Character` 的所有实现被添加为模式中 `SearchResult` 联盟的成员。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:735
#, fuzzy
msgid "Update `GalaxyService` to provide search:"
msgstr "更新 `GalaxyService` ，提供搜索。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:752
#, no-wrap
msgid ""
"    public List<SearchResult> search(String query) {\n"
"        List<SearchResult> results = new ArrayList<>();\n"
"        List<Film> matchingFilms = films.stream()\n"
"            .filter(film -> film.title.contains(query)\n"
"                || film.director.contains(query))\n"
"            .collect(Collectors.toList());\n"
"        results.addAll(matchingFilms);\n"
"        List<Character> matchingCharacters = getAllCharacters().stream()\n"
"            .filter(character -> character.getName().contains(query)\n"
"                || character.getSurname().contains(query))\n"
"            .collect(Collectors.toList());\n"
"        results.addAll(matchingCharacters);\n"
"        return results;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:763
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Search for heroes or films\")\n"
"    public List<SearchResult> search(String query) {\n"
"        return service.search(query);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:781
#, no-wrap
msgid ""
"query searchTheGalaxy {\n"
"    search(query: \"a\") {\n"
"        ... on Film {\n"
"            title\n"
"            director\n"
"        }\n"
"        ... on Character {\n"
"            name\n"
"            surname\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:784
#, fuzzy
msgid "We are able to use the `Character` interface because the `SearchResult` union contains members that implement it."
msgstr "我们能够使用 `Character` 接口，因为 `SearchResult` 联盟包含实现该接口的成员。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:785
#, fuzzy, no-wrap
msgid "Mutations"
msgstr "突变"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:788
#, fuzzy
msgid "Mutations are used when data is created, updated or deleted."
msgstr "当数据被创建、更新或删除时，会用到突变。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:790
#, fuzzy
msgid "Let's now add the ability to add and delete heroes to our GraphQL API."
msgstr "现在让我们把添加和删除英雄的能力添加到我们的GraphQL API。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:800
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero createHero(Hero hero) {\n"
"        service.addHero(hero);\n"
"        return hero;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:805
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero deleteHero(int id) {\n"
"        return service.deleteHero(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:808
#, fuzzy
msgid "Enter the following into the `GraphQL UI` to insert a `Hero`:"
msgstr "在 `GraphiQL` 中输入以下内容，以插入一个 `Hero` 。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:826
#, no-wrap
msgid ""
"mutation addHero {\n"
"  createHero(hero: {\n"
"      name: \"Han\",\n"
"      surname: \"Solo\"\n"
"      height: 1.85\n"
"      mass: 80\n"
"      darkSide: false\n"
"      episodeIds: [4, 5, 6]\n"
"  \t}\n"
"  )\n"
"  {\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:829
#, fuzzy
msgid "By using this mutation we have created a `Hero` entity in our service."
msgstr "通过使用这种突变，我们在我们的服务中创建了一个 `Hero` 的实体。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:834
#, fuzzy
msgid "Notice how in the response we have retrieved the `name` and `surname` of the created Hero. This is because we selected to retrieve these fields in the response within the `{ }` in the mutation query.  This can easily be a server side generated field that the client may require."
msgstr "请注意在响应中我们是如何检索到创建的Hero的 `name` 和 `surname` 。这是因为我们选择了在突变查询中的 `{ }` 响应中检索这些字段。这很容易成为客户端可能需要的一个服务器端生成的字段。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:836
#, fuzzy
msgid "Let's now try deleting an entry:"
msgstr "现在让我们试着删除一个条目。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:845
#, no-wrap
msgid ""
"mutation DeleteHero {\n"
"  deleteHero(id :3){\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:849
#, fuzzy
msgid "Similar to the `createHero` mutation method we also retrieve the `name` and `surname` of the hero we have deleted which is defined in `{ }`."
msgstr "与 `createHero` 突变方法类似，我们还检索了我们所删除的英雄的 `name` 和 `surname` ，该英雄定义在 `{ }` 。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:850
#, fuzzy, no-wrap
msgid "Subscriptions"
msgstr "订阅"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:854
#, fuzzy
msgid "Subscriptions allow you to subscribe to a query. It allows you to receive events and is using web sockets.  See the https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md[GraphQL over WebSocket Protocol] spec for more details."
msgstr "订阅允许你订阅一个查询。它允许你接收事件，并且是使用网络套接字。更多细节请参见 link:https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md[GraphQL over WebSocket协议] 规范。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:856
#, fuzzy
msgid "Example: We want to know when new Heroes are being created:"
msgstr "例子。我们想知道什么时候有新的英雄被创建。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:861
#, no-wrap
msgid "    BroadcastProcessor<Hero> processor = BroadcastProcessor.create(); // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:868
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero createHero(Hero hero) {\n"
"        service.addHero(hero);\n"
"        processor.onNext(hero); // <2>\n"
"        return hero;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:873
#, no-wrap
msgid ""
"    @Subscription\n"
"    public Multi<Hero> heroCreated(){\n"
"        return processor; // <3>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:877
#, fuzzy
msgid "The `Multi` processor that will broadcast any new ``Hero``es"
msgstr " `Multi` 处理器，将广播任何新的Heros"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:878
#, fuzzy
msgid "When adding a new `Hero`, also broadcast it"
msgstr "当添加一个新的英雄时，也要广播它"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:879
#, fuzzy
msgid "Make the stream available in the schema and as a WebSocket during runtime"
msgstr "使流在模式中可用，并在运行时作为WebSocket使用"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:882
#, fuzzy
msgid "Any client that now connect to the `/graphql` WebSocket connection will receive events on new Heroes being created:"
msgstr "现在连接到 `/graphql` WebSocket连接的任何客户端都将收到新英雄被创建的事件。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:892
#, no-wrap
msgid ""
"subscription ListenForNewHeroes {\n"
"  heroCreated {\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:895
#, fuzzy, no-wrap
msgid "Creating Queries by fields"
msgstr "按字段创建查询"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:899
#, fuzzy
msgid "Queries can also be done on individual fields. For example, let's create a method to query heroes by their last name."
msgstr "查询也可以在单个字段上进行。例如，让我们创建一个方法，按英雄的姓氏查询他们。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:908
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Hero> getHeroesWithSurname(@DefaultValue(\"Skywalker\") String surname) {\n"
"        return service.getHeroesBySurname(surname);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:912
#, fuzzy
msgid "By using the `@DefaultValue` annotation we have determined that the surname value will be `Skywalker` when the parameter is not provided."
msgstr "通过使用 `@DefaultValue` 注释，我们已经确定，当没有提供参数时，姓的值将是 `Skywalker` 。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:914
#, fuzzy
msgid "Test the following queries with the `GraphQL UI`:"
msgstr "用GraphiQL测试以下查询。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:931
#, no-wrap
msgid ""
"query heroWithDefaultSurname {\n"
"  heroesWithSurname{\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
"query heroWithSurnames {\n"
"  heroesWithSurname(surname: \"Vader\") {\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:933
#, fuzzy, no-wrap
msgid "Context"
msgstr "背景介绍"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:936
#, fuzzy
msgid "You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:"
msgstr "你可以在你的代码中的任何地方获得关于GraphQL请求的信息，使用这个实验性的、SmallRye特有的功能。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:941
#, no-wrap
msgid ""
"@Inject\n"
"Context context;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:944
#, fuzzy
msgid "or as a parameter in your method if you are in the `GraphQLApi` class, for instance:"
msgstr "或在你的方法中作为一个参数，如果你在 `GraphQLApi` ，例如。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:952
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Film getFilm(Context context, int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:955
#, fuzzy
msgid "The context object allows you to get:"
msgstr "上下文对象允许你获得。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:957
#, fuzzy
msgid "the original request (Query/Mutation)"
msgstr "原始请求（查询/变异）。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:958
#, fuzzy
msgid "the arguments"
msgstr "论点"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:959
#, fuzzy
msgid "the path"
msgstr "道路"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:960
#, fuzzy
msgid "the selected fields"
msgstr "选定的字段"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:961
#, fuzzy
msgid "any variables"
msgstr "任何变量"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:963
#, fuzzy
msgid "This allows you to optimize the downstream queries to the datastore."
msgstr "这允许你优化对数据存储的下游查询。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:965
#, fuzzy
msgid "See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details."
msgstr "更多细节请参见 link:https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] 。"

#. type: Title ===
#: upstream/_guides/smallrye-graphql.adoc:966
#, fuzzy, no-wrap
msgid "GraphQL-Java"
msgstr "图形QL-Java"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:969
#, fuzzy
msgid "This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:"
msgstr "这个上下文对象也允许你通过使用泄漏的抽象来下降到底层的 link:https://www.graphql-java.com/[graphql-java] 特性。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:973
#, no-wrap
msgid "DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:976
#, fuzzy
msgid "You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:"
msgstr "在模式生成过程中，你也可以获得对底层 `graphql-java` ，以直接添加你自己的功能。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:980
#, no-wrap
msgid "public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder builder) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:987
#, no-wrap
msgid ""
"    // Here add your own features directly, example adding an Enum\n"
"    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n"
"            .name(\"SomeEnum\")\n"
"            .description(\"Adding some enum type\")\n"
"            .value(\"value1\")\n"
"            .value(\"value2\").build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:990
#, no-wrap
msgid ""
"    return builder.additionalType(myOwnEnum);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:993
#, fuzzy
msgid "By using the `@Observer` you can add anything to the Schema builder."
msgstr "通过使用 `@Observer` ，你可以向模式构建器添加任何东西。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:995
#, fuzzy
msgid "For the Observer to work, you need to enable events. In `application.properties`, add the following: `quarkus.smallrye-graphql.events.enabled=true`."
msgstr "为了使观察者发挥作用，你需要启用事件。在 `application.properties` ，添加以下内容。 `quarkus.smallrye-graphql.events.enabled=true` ."

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:996
#, fuzzy, no-wrap
msgid "Adapting"
msgstr "适应性"

#. type: Title ===
#: upstream/_guides/smallrye-graphql.adoc:998
#, fuzzy, no-wrap
msgid "Adapt to Scalar"
msgstr "地图上的Scalar"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1002
#, fuzzy
msgid "Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type, or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to an existing scalar."
msgstr "另一个SmallRye特定的实验性功能，允许你将现有的标量（被实现映射到某种Java类型）映射到另一种类型，或者将复杂的对象（通常会在GraphQL中创建一个 `Type` 或 `Input` ）映射到现有的标量。"

#. type: Title ====
#: upstream/_guides/smallrye-graphql.adoc:1003
#, fuzzy, no-wrap
msgid "Adapting an existing Scalar to another type:"
msgstr "将一个现有的Scalar映射到另一个类型。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1008
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1011
#, no-wrap
msgid ""
"    @AdaptToScalar(Scalar.Int.class)\n"
"    Long idLongThatShouldChangeToInt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1014
#: upstream/_guides/smallrye-graphql.adoc:1029
#, no-wrap
msgid ""
"    // ....\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1017
#, fuzzy
msgid "Above will adapt the `Long` java type to an `Int` Scalar type, rather than the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`."
msgstr "以上将把 `Long` java类型映射为 `Int` Scalar类型，而不是 link:https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[默认的] `BigInteger` 。"

#. type: Title ====
#: upstream/_guides/smallrye-graphql.adoc:1018
#, fuzzy, no-wrap
msgid "Adapting a complex object to a Scalar type:"
msgstr "将一个复杂的对象映射到一个Scalar类型。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1023
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1026
#, no-wrap
msgid ""
"    @AdaptToScalar(Scalar.String.class)\n"
"    Phone phone;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1032
#, fuzzy
msgid "This will, rather than creating a `Type` or `Input` in GraphQL, map to a String scalar."
msgstr "这将，而不是在GraphQL中创建一个 `Type` 或 `Input` ，映射到一个String标量。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1036
#, fuzzy
msgid "To be able to do the above, the `Phone` object needs to have a constructor that takes a String (or `Int` / `Date` / etc.), or have a setter method for the String (or `Int` / `Date` / etc.), or have a `fromString` (or `fromInt` / `fromDate` - depending on the Scalar type) static method."
msgstr "为了能够完成上述工作， `Phone` 对象需要有一个接受字符串（或 `Int` / `Date` / 等）的构造函数，或有一个字符串（或 `Int` / `Date` / 等）的设置方法，或有一个 `fromString` （或 `fromInt` / `fromDate` - 取决于 Scalar 类型）静态方法。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1038
#: upstream/_guides/smallrye-graphql.adoc:1064
#, fuzzy
msgid "For example:"
msgstr "比如说。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1042
#, no-wrap
msgid "public class Phone {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1044
#, no-wrap
msgid "    private String number;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1046
#, no-wrap
msgid "    // Getters and setters....\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1053
#, no-wrap
msgid ""
"    public static Phone fromString(String number) {\n"
"        Phone phone = new Phone();\n"
"        phone.setNumber(number);\n"
"        return phone;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1056
#, fuzzy
msgid "See more about the `@AdaptToScalar` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptToScalar.html[JavaDoc]."
msgstr "请参阅 link:https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.0.6/index.html?io/smallrye/graphql/api/ToScalar.html[JavaDoc] 中关于 `@ToScalar` 功能的更多信息。"

#. type: Title ===
#: upstream/_guides/smallrye-graphql.adoc:1057
#, fuzzy, no-wrap
msgid "Adapt with"
msgstr "适应与"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1060
#, fuzzy
msgid "Another option for more complex cases is to provide an Adapter. You can then do the mapping yourself in the adapter."
msgstr "对于更复杂的情况，另一个选择是提供一个适配器。然后你可以在适配器中自己做映射。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1062
#, fuzzy
msgid "See more about the `AdaptWith` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptWith.html[JavaDoc]."
msgstr "请参阅 link:https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.0.6/index.html?io/smallrye/graphql/api/ToScalar.html[JavaDoc] 中关于 `@ToScalar` 功能的更多信息。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1071
#, no-wrap
msgid ""
"    public class Profile {\n"
"        // Map this to an email address\n"
"        @AdaptWith(AddressAdapter.class)\n"
"        public Address address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1074
#, no-wrap
msgid ""
"        // other getters/setters...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1076
#, no-wrap
msgid "    public class AddressAdapter implements Adapter<EmailAddress, Address> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1084
#, no-wrap
msgid ""
"        @Override\n"
"        public Address from(EmailAddress email) {\n"
"            Address a = new Address();\n"
"            a.addressType = AddressType.email;\n"
"            a.addLine(email.getValue());\n"
"            return a;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1093
#, no-wrap
msgid ""
"        @Override\n"
"        public EmailAddress to(Address address) {\n"
"            if (address != null && address.addressType != null && address.addressType.equals(AddressType.email)) {\n"
"                return new EmailAddress(address.lines.get(0));\n"
"            }\n"
"            return null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1097
#, fuzzy
msgid "`@JsonbTypeAdapter` is also supported."
msgstr " `@JsonbTypeAdapter` 也被支持。"

#. type: Title ===
#: upstream/_guides/smallrye-graphql.adoc:1098
#, fuzzy, no-wrap
msgid "Built-in support for Maps"
msgstr "内置对地图的支持"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1103
#, fuzzy
msgid "By default, due to the fact that maps are hard to model in a schema (as the keys and values can be dynamic at runtime) GraphQL does not support maps by default.  Using the above adaption, `Map` support is added for Quarkus and are mapped to an `Entry<Key,Value>` with an optional key parameter.  This allows you to return a map, and optionally query it by key."
msgstr "默认情况下，由于地图很难在模式中建模（因为键和值在运行时可能是动态的），GraphQL默认不支持地图。使用上述的适应性， `Map` ，为Quarkus添加了支持，并且被映射到一个 `Entry<Key,Value>` ，有一个可选的键参数。这允许你返回一个地图，并且可以选择通过键来查询它。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1105
#, fuzzy
msgid "Example:"
msgstr "比如说。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1113
#, no-wrap
msgid ""
"    @Query\n"
"    public Map<ISO6391, Language> language() {\n"
"        return languageService.getLanguages();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1120
#, no-wrap
msgid ""
"    public enum ISO6391 {\n"
"        af,\n"
"        en,\n"
"        de,\n"
"        fr\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1127
#, no-wrap
msgid ""
"    public class Language {\n"
"        private ISO6391 iso6391;\n"
"        private String nativeName;\n"
"        private String enName;\n"
"        private String please;\n"
"        private String thankyou;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1130
#, no-wrap
msgid ""
"        // Getters & Setters\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1134
#, fuzzy
msgid "The key and value object can be any of Enum, Scalar or Complex object"
msgstr "键和值对象可以是Enum、Scalar或Complex对象中的任何一个。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1136
#, fuzzy
msgid "You can now query the whole map with all the fields:"
msgstr "现在你可以用所有的字段来查询整个地图。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1151
#, no-wrap
msgid ""
"{\n"
"  language{\n"
"    key\n"
"    value {\n"
"      enName\n"
"      iso6391\n"
"      nativeName\n"
"      please\n"
"      thankyou\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1154
#, fuzzy
msgid "This will return a result like this for example:"
msgstr "例如，这将返回一个类似这样的结果。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1203
#, no-wrap
msgid ""
"{\n"
"  \"data\": {\n"
"    \"language\": [\n"
"      {\n"
"        \"key\": \"fr\",\n"
"        \"value\": {\n"
"          \"enName\": \"french\",\n"
"          \"iso6391\": \"fr\",\n"
"          \"nativeName\": \"français\",\n"
"          \"please\": \"s'il te plaît\",\n"
"          \"thankyou\": \"merci\"\n"
"        }\n"
"      },\n"
"      {\n"
"        \"key\": \"af\",\n"
"        \"value\": {\n"
"          \"enName\": \"afrikaans\",\n"
"          \"iso6391\": \"af\",\n"
"          \"nativeName\": \"afrikaans\",\n"
"          \"please\": \"asseblief\",\n"
"          \"thankyou\": \"dankie\"\n"
"        }\n"
"      },\n"
"      {\n"
"        \"key\": \"de\",\n"
"        \"value\": {\n"
"          \"enName\": \"german\",\n"
"          \"iso6391\": \"de\",\n"
"          \"nativeName\": \"deutsch\",\n"
"          \"please\": \"bitte\",\n"
"          \"thankyou\": \"danke dir\"\n"
"        }\n"
"      },\n"
"      {\n"
"        \"key\": \"en\",\n"
"        \"value\": {\n"
"          \"enName\": \"english\",\n"
"          \"iso6391\": \"en\",\n"
"          \"nativeName\": \"english\",\n"
"          \"please\": \"please\",\n"
"          \"thankyou\": \"thank you\"\n"
"        }\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1206
#, fuzzy
msgid "You can also query by key"
msgstr "你也可以按键查询"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1217
#, no-wrap
msgid ""
"{\n"
"  language (key:af){\n"
"    value {\n"
"      please\n"
"      thankyou\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1220
#, fuzzy
msgid "That will return only that value in the map:"
msgstr "这将只返回地图中的那个值。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1235
#, no-wrap
msgid ""
"{\n"
"  \"data\": {\n"
"    \"language\": [\n"
"      {\n"
"        \"value\": {\n"
"          \"please\": \"asseblief\",\n"
"          \"thankyou\": \"dankie\"\n"
"        }\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1238
#, fuzzy
msgid "The default map adapter can to overridden with our own implementation."
msgstr "默认的地图适配器可以用我们自己的实现来重写。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:1239
#, fuzzy, no-wrap
msgid "Error code"
msgstr "错误代码"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1242
#, fuzzy
msgid "You can add an error code on the error output in the GraphQL response by using the (SmallRye specific) `@ErrorCode`:"
msgstr "你可以通过使用（SmallRye专用） `@ErrorCode` ，在GraphQL响应中的错误输出上添加一个错误代码。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1249
#, no-wrap
msgid ""
"@ErrorCode(\"some-business-error-code\")\n"
"public class SomeBusinessException extends RuntimeException {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1252
#, fuzzy
msgid "When `SomeBusinessException` occurs, the error output will contain the Error code:"
msgstr "当 `SomeBusinessException` ，错误输出将包含错误代码。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1279
#, no-wrap
msgid ""
"{\n"
"    \"errors\": [\n"
"        {\n"
"            \"message\": \"Unexpected failure in the system. Jarvis is working to fix it.\",\n"
"            \"locations\": [\n"
"                {\n"
"                    \"line\": 2,\n"
"                    \"column\": 3\n"
"                }\n"
"            ],\n"
"            \"path\": [\n"
"                \"annotatedCustomBusinessException\"\n"
"            ],\n"
"            \"extensions\": {\n"
"                \"exception\": \"io.smallrye.graphql.test.apps.error.api.ErrorApi$AnnotatedCustomBusinessException\",\n"
"                \"classification\": \"DataFetchingException\",\n"
"                \"code\": \"some-business-error-code\" <1>\n"
"            }\n"
"        }\n"
"    ],\n"
"    \"data\": {\n"
"        ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1282
#, fuzzy
msgid "The error code"
msgstr "错误代码"

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:1283
#, fuzzy, no-wrap
msgid "Additional Notes"
msgstr "补充说明"

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1289
msgid "If you are using the `smallrye-graphql` extension and the `micrometer` metrics extension is present and metrics are enabled, you may encounter a `java.lang.NoClassDefFoundError` as some versions of the `smallrye-graphql` extension have runtime requirements on the Microprofile Metrics API.  Add the following MicroProfile Metrics API dependency to resolve the issue:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1297
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.eclipse.microprofile.metrics</groupId>\n"
"    <artifactId>microprofile-metrics-api</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql.adoc:1303
#, no-wrap
msgid "implementation(\"org.eclipse.microprofile.metrics:microprofile-metrics-api\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:1305
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1309
msgid "SmallRye GraphQL enables clients to retrieve the exact data that is required preventing `Over-fetching` and `Under-fetching`."
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql.adoc:1312
msgid "The GraphQL API can be expanded without breaking previous queries enabling easy API `evolution`."
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql.adoc:1314
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#, fuzzy
#~ msgid "Reactive"
#~ msgstr "反应性的"

#, fuzzy
#~ msgid "Due to the underlying library, graphql-java, `Uni` is creating a `CompletionStage` under the hood."
#~ msgstr "由于底层库graphql-java的存在， `Uni` 在引擎盖下创建了一个 `CompletionStage` 。"

#, fuzzy
#~ msgid "Using `Uni` or `CompletionStage` means that when a request contains more than one query, they will be executed concurrently."
#~ msgstr "使用 `Uni` 或 `CompletionStage` ，意味着当一个请求包含一个以上的查询时，它们将被同时执行。"

#, fuzzy
#~ msgid "For instance, the query below will fetch `film0` and `film1` concurrently:"
#~ msgstr "例如，下面的查询将同时获取 `film0` 和 `film1` 。"

#, fuzzy
#~ msgid "Subscriptions allows you to subscribe to a query. It allows you to receive events."
#~ msgstr "订阅允许你订阅一个查询。它允许你接收事件。"

#, fuzzy
#~ msgid "Subscription is currently still considered experimental."
#~ msgstr "订阅目前仍被认为是实验性的。"
