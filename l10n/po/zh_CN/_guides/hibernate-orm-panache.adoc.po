# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/hibernate-orm-panache.adoc:6
#, fuzzy, no-wrap
msgid "Simplified Hibernate ORM with Panache"
msgstr "简化的Hibernate ORM与Panache"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:17
#, fuzzy
msgid "Hibernate ORM is the de facto Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "Hibernate ORM是事实上的JPA实现，为你提供了对象关系映射器的全部范围。它使复杂的映射成为可能，但它并没有使简单和普通的映射变得微不足道。Hibernate ORM with Panache专注于使你的实体在Quarkus中写得简单而有趣。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:18
#, fuzzy, no-wrap
msgid "First: an example"
msgstr "第一：一个例子"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:21
#, fuzzy
msgid "What we're doing in Panache is to allow you to write your Hibernate ORM entities like this:"
msgstr "我们在Panache中所做的是允许你像这样写你的Hibernate ORM实体。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:25
#: upstream/_guides/hibernate-orm-panache.adoc:35
#: upstream/_guides/hibernate-orm-panache.adoc:174
#: upstream/_guides/hibernate-orm-panache.adoc:194
#: upstream/_guides/hibernate-orm-panache.adoc:313
#: upstream/_guides/hibernate-orm-panache.adoc:349
#: upstream/_guides/hibernate-orm-panache.adoc:399
#: upstream/_guides/hibernate-orm-panache.adoc:532
#: upstream/_guides/hibernate-orm-panache.adoc:783
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:30
#, no-wrap
msgid ""
"public enum Status {\n"
"    Alive,\n"
"    Deceased\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:40
#: upstream/_guides/hibernate-orm-panache.adoc:179
#: upstream/_guides/hibernate-orm-panache.adoc:199
#: upstream/_guides/hibernate-orm-panache.adoc:318
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.util.List;\n"
"import jakarta.persistence.Entity;\n"
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:46
#: upstream/_guides/hibernate-orm-panache.adoc:205
#: upstream/_guides/hibernate-orm-panache.adoc:324
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:50
#: upstream/_guides/hibernate-orm-panache.adoc:328
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:54
#: upstream/_guides/hibernate-orm-panache.adoc:332
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:59
#: upstream/_guides/hibernate-orm-panache.adoc:337
#, no-wrap
msgid ""
"    public static void deleteStefs(){\n"
"        delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:63
#, fuzzy
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr "你已经注意到了代码的紧凑性和可读性大大提高了吗？这看起来很有趣吗？请继续阅读!"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:65
#, fuzzy
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr " `list()` 方法一开始可能会让人吃惊。它采用了HQL（JP-QL）查询的片段，并对其余部分进行上下文处理。这使得代码非常简明，但又可读。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:68
#, fuzzy
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上面所描述的本质上是 link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[活动记录模式] ，有时也称为实体模式。Hibernate与Panache也允许通过 `PanacheRepository` ，使用更经典的 link:https://martinfowler.com/eaaCatalog/repository.html[资源库模式] 。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:69
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:73
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:75
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:77
#, fuzzy
msgid "The solution is located in the `hibernate-orm-panache-quickstart` link:{quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr "该解决方案位于 `hibernate-orm-panache-quickstart` {quickstarts-treeurl}/hibernate-orm-panache-quickstart[目录]中。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:81
#, fuzzy
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr "如果你的项目已经被配置为使用其他注释处理器，你将需要额外添加Panache注释处理器。"

#. type: Block title
#: upstream/_guides/hibernate-orm-panache.adoc:83
#: upstream/_guides/hibernate-orm-panache.adoc:125
#: upstream/_guides/hibernate-orm-panache.adoc:639
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:100
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"        <parameters>${maven.compiler.parameters}</parameters>\n"
"        <annotationProcessorPaths>\n"
"            <!-- Your existing annotation processor(s)... -->\n"
"            <path>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-panache-common</artifactId>\n"
"                <version>${quarkus.platform.version}</version>\n"
"            </path>\n"
"        </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/hibernate-orm-panache.adoc:103
#: upstream/_guides/hibernate-orm-panache.adoc:141
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:106
#, no-wrap
msgid "annotationProcessor(\"io.quarkus:quarkus-panache-common\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:109
#, fuzzy, no-wrap
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr "用Panache设置和配置Hibernate ORM"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:112
#, fuzzy
msgid "To get started:"
msgstr "要开始了。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:114
#, fuzzy
msgid "add your settings in `{config-file}`"
msgstr "中添加你的设置。 `{config-file}` "

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:115
#, fuzzy
msgid "annotate your entities with `@Entity`"
msgstr "对你的实体进行注解，用 `@Entity` "

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:116
#, fuzzy
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "使你的实体扩展到 `PanacheEntity` （如果你使用资源库模式，则是可选的）。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:118
#, fuzzy
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "按照 link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[休眠设置指南进行所有配置] 。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:120
#, fuzzy
msgid "In your build file, add the following dependencies:"
msgstr "在你的构建文件中，添加以下依赖项。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:122
#, fuzzy
msgid "the Hibernate ORM with Panache extension"
msgstr "带有Panache扩展的Hibernate ORM"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:123
#, fuzzy
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr "你的JDBC驱动扩展 ( `quarkus-jdbc-postgresql` , `quarkus-jdbc-h2` , `quarkus-jdbc-mariadb` , ...)"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:132
#, no-wrap
msgid ""
"<!-- Hibernate ORM specific dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-orm-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:138
#, no-wrap
msgid ""
"<!-- JDBC driver dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:145
#, no-wrap
msgid ""
"// Hibernate ORM specific dependencies\n"
"implementation(\"io.quarkus:quarkus-hibernate-orm-panache\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:148
#, no-wrap
msgid ""
"// JDBC driver dependencies\n"
"implementation(\"io.quarkus:quarkus-jdbc-postgresql\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:151
#, fuzzy
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "然后在 `{config-file}` ，添加相关的配置属性。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:159
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:162
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:164
#, fuzzy, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解决方案1：使用活动记录模式"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:166
#: upstream/_guides/hibernate-orm-panache.adoc:342
#, fuzzy, no-wrap
msgid "Defining your entity"
msgstr "界定你的实体"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:170
#, fuzzy
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr "要定义一个Panache实体，只需扩展 `PanacheEntity` ，用 `@Entity` 注释它，并将你的列作为公共字段添加。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:186
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:190
#, fuzzy
msgid "You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "你可以把你所有的JPA列注解放在公共字段上。如果你需要一个字段不被持久化，在它上面使用 `@Transient` 注释。如果你需要写访问器，你可以。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:210
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:216
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:221
#, fuzzy
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "而且由于我们的字段访问重写，当你的用户读取 `person.name` ，他们实际上会调用你的 `getName()` 访问器，类似的还有字段写入和设置器。这允许在运行时进行适当的封装，因为所有字段的调用都将被相应的getter/setter调用所取代。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:222
#: upstream/_guides/hibernate-orm-panache.adoc:440
#, fuzzy, no-wrap
msgid "Most useful operations"
msgstr "最有用的操作"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:225
#, fuzzy
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "一旦你写好了你的实体，以下是你将能够执行的最常见的操作。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:232
#: upstream/_guides/hibernate-orm-panache.adoc:450
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.time.Month;\n"
"import java.util.List;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:238
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:241
#, no-wrap
msgid ""
"// persist it\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:244
#: upstream/_guides/hibernate-orm-panache.adoc:462
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:250
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:253
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:256
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:260
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:263
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:266
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:269
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:272
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:275
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:278
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:281
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:285
#: upstream/_guides/hibernate-orm-panache.adoc:503
#, fuzzy
msgid "All `list` methods have equivalent `stream` versions."
msgstr "所有 `list` 方法都有相等的 `stream` 版本。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:291
#: upstream/_guides/hibernate-orm-panache.adoc:509
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
"import java.util.stream.Stream;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:298
#, no-wrap
msgid ""
"try (Stream<Person> persons = Person.streamAll()) {\n"
"    List<String> namesButEmmanuels = persons\n"
"        .map(p -> p.name.toLowerCase() )\n"
"        .filter( n -> ! \"emmanuel\".equals(n) )\n"
"        .collect(Collectors.toList());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:303
#, fuzzy
msgid "The `stream` methods require a transaction to work. + As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.  If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr " `stream` 方法需要一个事务来工作。+ 由于它们执行I/O操作，它们应该通过 `close()` 方法或通过try-with-resource来关闭底层的 `ResultSet` 。如果不这样做，你会看到来自Agroal的警告，它将为你关闭底层 `ResultSet` 。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:304
#, fuzzy, no-wrap
msgid "Adding entity methods"
msgstr "添加实体方法"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:309
#, fuzzy
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "在你的实体上添加自定义查询，在实体本身里面。这样，你和你的同事可以很容易地找到它们，而且查询与它们所操作的对象同在一处。将它们作为静态方法添加到你的实体类中是Panache Active Record的方式。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:339
#, fuzzy, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解决方案2：使用资源库模式"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:345
#, fuzzy
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr "当使用存储库模式时，你可以将你的实体定义为普通的JPA实体。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:353
#, no-wrap
msgid ""
"import jakarta.persistence.GeneratedValue;\n"
"import jakarta.persistence.Id;\n"
"import java.time.LocalDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:360
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:386
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:390
#, fuzzy
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "如果你不想麻烦地为你的实体定义getters/setters，你可以让它们扩展 `PanacheEntityBase` ，Quarkus将为你生成它们。你甚至可以扩展 `PanacheEntity` ，并利用它提供的默认ID的优势。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:391
#, fuzzy, no-wrap
msgid "Defining your repository"
msgstr "定义你的存储库"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:395
#, fuzzy
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr "当使用 Repositories 时，你可以得到与活动记录模式完全相同的方便方法，通过使它们实现 `PanacheRepository` ，注入到你的 Repository 中。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:401
#, no-wrap
msgid "import io.quarkus.hibernate.orm.panache.PanacheRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:404
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:407
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:409
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:413
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:417
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:422
#, no-wrap
msgid ""
"   public void deleteStefs(){\n"
"       delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:426
#, fuzzy
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "所有在 `PanacheEntityBase` 上定义的操作都可以在你的版本库上使用，所以使用它与使用活动记录模式完全一样，只是你需要注入它。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:430
#, no-wrap
msgid "import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:433
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:438
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:443
#, fuzzy
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "一旦你写好了你的版本库，以下是你能够执行的最常见的操作。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:456
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:459
#, no-wrap
msgid ""
"// persist it\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:468
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:471
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:474
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:478
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:481
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:484
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:487
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:490
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:493
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:496
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:499
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:515
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:518
#, fuzzy
msgid "The `stream` methods require a transaction to work."
msgstr " `stream` 方法需要一个交易才能发挥作用。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:522
#, fuzzy
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "其余的文档只展示了基于活动记录模式的用法，但请记住，这些用法也可以用资源库模式来执行。为了简洁起见，版本库模式的例子被省略了。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:523
#, fuzzy, no-wrap
msgid "Writing a Jakarta REST resource"
msgstr "编写一个JAX-RS资源"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:526
#, fuzzy
msgid "First, include one of the RESTEasy Reactive extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for Jakarta REST and JSON support."
msgstr "首先，包含RESTEasy Reactive扩展之一，以启用JAX-RS端点，例如，添加JAX-RS和JSON支持的 `io.quarkus:quarkus-resteasy-reactive-jackson` 依赖。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:528
#, fuzzy
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "然后，你可以创建以下资源来创建/阅读/更新/删除你的Person实体。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:546
#, no-wrap
msgid ""
"import java.net.URI;\n"
"import java.util.List;\n"
"import jakarta.transaction.Transactional;\n"
"import jakarta.ws.rs.Consumes;\n"
"import jakarta.ws.rs.DELETE;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.NotFoundException;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.PUT;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import jakarta.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:551
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:556
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Person> list() {\n"
"        return Person.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:562
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person get(Long id) {\n"
"        return Person.findById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:569
#, no-wrap
msgid ""
"    @POST\n"
"    @Transactional\n"
"    public Response create(Person person) {\n"
"        person.persist();\n"
"        return Response.created(URI.create(\"/persons/\" + person.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:578
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public Person update(Long id, Person person) {\n"
"        Person entity = Person.findById(id);\n"
"        if(entity == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:581
#, no-wrap
msgid ""
"        // map all fields from the person parameter to the existing entity\n"
"        entity.name = person.name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:584
#, no-wrap
msgid ""
"        return entity;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:595
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public void delete(Long id) {\n"
"        Person entity = Person.findById(id);\n"
"        if(entity == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
"        entity.delete();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:601
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search/{name}\")\n"
"    public Person search(String name) {\n"
"        return Person.findByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:608
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/count\")\n"
"    public Long count() {\n"
"        return Person.count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:612
#, fuzzy
msgid "Be careful to use the `@Transactional` annotation on the operations that modify the database, you can add the annotation at the class level for simplicity purpose."
msgstr "请注意在修改数据库的操作上使用 `@Transactional` 注释，为了简单起见，你可以在类的层次上添加注释。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:614
#, fuzzy
msgid "To make it easier to showcase some capabilities of Hibernate ORM with Panache on Quarkus with Dev mode, some test data should be inserted into the database by adding the following content to a new file named src/main/resources/import.sql:"
msgstr "为了更方便地在Quarkus上展示Hibernate ORM与Panache的一些功能，应该在一个名为src/main/resources/import.sql的新文件中加入以下内容，将一些测试数据插入数据库："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:619
#, no-wrap
msgid ""
"INSERT INTO person (id, birth, name, status) VALUES (1, '1995-09-12', 'Emily Brown', 0);\n"
"ALTER SEQUENCE person_seq RESTART WITH 2;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:622
#, fuzzy
msgid "If you would like to initialize the DB when you start the Quarkus app in your production environment, add `quarkus.hibernate-orm.database.generation=drop-and-create` to the Quarkus startup options in addition to `import.sql`."
msgstr "如果你想在生产环境中启动Quarkus应用程序时初始化数据库，除了 `import.sql` ，还可以在Quarkus启动选项中添加 `quarkus.hibernate-orm.database.generation=drop-and-create` 。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:624
#, fuzzy
msgid "After that, you can see the people list and add new person as followings:"
msgstr "之后，你可以看到人们的名单，并添加新的人作为追随者："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:629
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/persons\n"
"[{\"id\":1,\"name\":\"Emily Brown\",\"birth\":\"1995-09-12\",\"status\":\"Alive\"}]\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:631
#, no-wrap
msgid "$ curl -X POST -H \"Content-Type: application/json\" -d '{\"name\" : \"William Davis\" , \"birth\" : \"1988-07-04\", \"status\" : \"Alive\"}' http://localhost:8080/persons\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:634
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/persons\n"
"[{\"id\":1,\"name\":\"Emily Brown\",\"birth\":\"1995-09-12\",\"status\":\"Alive\"}, {\"id\":2,\"name\":\"William Davis\",\"birth\":\"1988-07-04\",\"status\":\"Alive\"}]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:637
#, fuzzy
msgid "If you see the Person object as Person<1>, then the object has not been converted. In this case, add the dependency `quarkus-resteasy-reactive-jackson` in `pom.xml`."
msgstr "如果你看到Person对象是Person<1>，那么这个对象还没有被转换。在这种情况下，在 `pom.xml` ，添加依赖性 `quarkus-resteasy-reactive-jackson` 。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:645
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:647
#, fuzzy, no-wrap
msgid "Advanced Query"
msgstr "高级查询"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:649
#, fuzzy, no-wrap
msgid "Paging"
msgstr "寻呼"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:653
#, fuzzy
msgid "You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "如果你的表包含足够小的数据集，你应该只使用 `list` 和 `stream` 方法。对于较大的数据集，你可以使用 `find` 方法的等价物，它返回一个 `PanacheQuery` ，你可以对其进行分页。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:659
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
"import io.quarkus.panache.common.Page;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:662
#: upstream/_guides/hibernate-orm-panache.adoc:701
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:665
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:668
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:671
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:674
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:677
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:680
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"long count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:686
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:689
#, fuzzy
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr " `PanacheQuery` 类型有许多其他方法来处理分页和返回流。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:690
#, fuzzy, no-wrap
msgid "Using a range instead of pages"
msgstr "使用一个范围而不是页面"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:693
#, fuzzy
msgid "`PanacheQuery` also allows range-based queries."
msgstr " `PanacheQuery` 也允许基于范围的查询。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:698
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:704
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:707
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:710
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:716
#, fuzzy
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "你不能混合使用范围和页面：如果你使用范围，所有依赖于拥有当前页面的方法将抛出一个 `UnsupportedOperationException` ；你可以使用 `page(Page)` 或 `page(int, int)` 切换回分页。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:718
#, fuzzy, no-wrap
msgid "Sorting"
msgstr "分拣"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:721
#, fuzzy
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "所有接受查询字符串的方法也接受以下简化查询形式。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:725
#, no-wrap
msgid "List<Person> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:728
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "但这些方法也接受一个可选的 `Sort` 参数，这使你可以抽象出你的排序。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:732
#, no-wrap
msgid "import io.quarkus.panache.common.Sort;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:734
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:737
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:740
#, no-wrap
msgid ""
"// and list first the entries with null values in the field \"birth\"\n"
"List<Person> persons = Person.list(Sort.by(\"birth\", Sort.NullPrecedence.NULLS_FIRST));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:743
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr " `Sort` 类有很多方法用于添加列和指定排序方向。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:744
#, fuzzy, no-wrap
msgid "Simplified queries"
msgstr "简化查询"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:748
#, fuzzy
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr "通常情况下，HQL查询是这种形式。 `from EntityName [where …​] [order by …​]` ，结尾处有可选元素。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:750
#, fuzzy
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "如果你的选择查询不是以 `from` 开始，我们支持以下额外的形式。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:752
#, fuzzy
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr " `order by …​` 这将扩大到 `from EntityName order by …​` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:753
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr " `<singleColumnName>` (和单一参数），这将扩展为 `from EntityName where <singleColumnName> = ?` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:754
#, fuzzy
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr " `<query>` 将扩大到 `from EntityName where <query>` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:756
#, fuzzy
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "如果您的更新查询不是以 `update` 开始，我们支持以下额外的形式。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:758
#, fuzzy
msgid "`from EntityName ...` which will expand to `update EntityName ...`"
msgstr " `from EntityName …​` 这将扩大到 `update from EntityName …​` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:759
#, fuzzy
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update EntityName set <singleColumnName> = ?`"
msgstr " `set? <singleColumnName>` (和单一参数），这将扩展为 `update from EntityName set <singleColumnName> = ?` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:760
#, fuzzy
msgid "`set? <update-query>` will expand to `update EntityName set <update-query>`"
msgstr " `set? <update-query>` 将扩大到 `update from EntityName set <update-query>` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:762
#, fuzzy
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "如果您的删除查询不是以 `delete` 开始，我们支持以下附加形式。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:764
#, fuzzy
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr " `from EntityName …​` 这将扩大到 `delete from EntityName …​` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:765
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr " `<singleColumnName>` (和单一参数），这将扩展为 `delete from EntityName where <singleColumnName> = ?` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:766
#, fuzzy
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr " `<query>` 将扩大到 `delete from EntityName where <query>` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:769
#, fuzzy
msgid "You can also write your queries in plain link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr "你也可以用普通的 link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL] 编写你的查询。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:774
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:776
#, fuzzy, no-wrap
msgid "Named queries"
msgstr "命名查询"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:779
#, fuzzy
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "你可以通过在其名称前加上'#'字符来引用一个命名的查询，而不是一个（简化的）HQL查询。你也可以在计数、更新和删除查询中使用命名查询。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:788
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.NamedQueries;\n"
"import jakarta.persistence.NamedQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:791
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.panache.common.Parameters;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:799
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQueries({\n"
"    @NamedQuery(name = \"Person.getByName\", query = \"from Person where name = ?1\"),\n"
"    @NamedQuery(name = \"Person.countByStatus\", query = \"select count(*) from Person p where p.status = :status\"),\n"
"    @NamedQuery(name = \"Person.updateStatusById\", query = \"update Person p set p.status = :status where p.id = :id\"),\n"
"    @NamedQuery(name = \"Person.deleteById\", query = \"delete from Person p where p.id = ?1\")\n"
"})\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:804
#, no-wrap
msgid ""
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:808
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:812
#, no-wrap
msgid ""
"    public static long countByStatus(Status status) {\n"
"        return count(\"#Person.countByStatus\", Parameters.with(\"status\", status).map());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:816
#, no-wrap
msgid ""
"    public static long updateStatusById(Status status, long id) {\n"
"        return update(\"#Person.updateStatusById\", Parameters.with(\"status\", status).and(\"id\", id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:821
#, no-wrap
msgid ""
"    public static long deleteById(long id) {\n"
"        return delete(\"#Person.deleteById\", id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:827
#, fuzzy
msgid "Named queries can only be defined inside your Jakarta Persistence entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr "命名查询只能在你的JPA实体类（是Panache实体类，或存储库的参数化类型）内定义，或在它的一个超类中定义。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:829
#, fuzzy, no-wrap
msgid "Query parameters"
msgstr "查询参数"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:832
#, fuzzy
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "你可以通过索引（基于1）传递查询参数，如下所示。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:836
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:839
#, fuzzy
msgid "Or by name using a `Map`:"
msgstr "或者使用 `Map` ，按名字来命名。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:844
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:849
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:852
#, fuzzy
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "或者使用便利类 `Parameters` ，既可以是原样，也可以是建立一个 `Map` 。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:858
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:862
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:865
#, fuzzy
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "每个查询操作都接受按索引（ `Object…​` ）或按名称（ `Map<String,Object>` 或 `Parameters` ）传递参数。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:866
#, fuzzy, no-wrap
msgid "Query projection"
msgstr "查询投影"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:869
#, fuzzy
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "可以用 `project(Class)` 方法对 `find()` 方法返回的 `PanacheQuery` 对象进行查询推算。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:871
#, fuzzy
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "你可以用它来限制哪些字段将被数据库返回。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:875
#, fuzzy
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr "Hibernate将使用 *DTO投影* 并生成一个带有投影类属性的SELECT子句。这也被称为 *动态实例化* 或 *构造器表达* ，更多信息可以在Hibernate指南中找到： link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[HQL选择子句]"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:878
#, fuzzy
msgid "The projection class needs to have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This class must have a matching constructor with all the class attributes as parameters."
msgstr "投影类需要是一个有效的Java Bean，并且有一个包含其所有属性的构造函数，这个构造函数将被用来实例化投影DTO，而不是使用实体类。这个类必须有一个匹配的构造函数，包含所有的类属性作为参数。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:884
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.RegisterForReflection;\n"
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:888
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:893
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:896
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:898
#, fuzzy
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr " `@RegisterForReflection` 注解指示Quarkus在本地编译过程中保留该类和其成员。关于 `@RegisterForReflection` 注解的更多细节可以在 link:writing-native-applications-tips.html#registerForReflection[本地应用程序提示] 页面找到。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:899
#, fuzzy
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "我们在这里使用公共字段，但如果你愿意，也可以使用私人字段和获取器/设置器。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:900
#, fuzzy
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr "这个构造函数将被Hibernate使用，它必须是你的类中唯一的构造函数，并且有所有的类属性作为参数。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:907
#, fuzzy
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your `pom.xml`."
msgstr " `project(Class)` 方法的实现使用构造函数的参数名来构建查询的选择子句，所以编译器必须配置为在编译后的类中存储参数名。如果您使用Quarkus Maven原型，该功能默认是启用的。如果您没有使用，请在您的 `pom.xml` 中添加该属性 `<maven.compiler.parameters>true</maven.compiler.parameters>` 。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:910
#, fuzzy
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr "如果你运行的是Java 17+，记录是很适合投影类的。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:912
#, fuzzy
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "如果在DTO投影对象中，你有一个来自被引用实体的字段，你可以使用 `@ProjectedFieldName` 注释来为SELECT语句提供路径。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:917
#, no-wrap
msgid ""
"import jakarta.persistence.ManyToOne;\n"
"import io.quarkus.hibernate.orm.panache.common.ProjectedFieldName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:926
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    public Double weight;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:931
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:937
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:939
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:941
#, fuzzy
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr " `ownerName` DTO构造器的参数将从 `owner.name` HQL属性加载。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:944
#, fuzzy
msgid "It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor matching the values returned by the select clause:"
msgstr "也可以用一个选择子句来指定一个HQL查询。在这种情况下，投影类必须有一个与选择子句返回的值相匹配的构造函数。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:948
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:953
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class RaceWeight {\n"
"    public final String race;\n"
"    public final Double weight;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:957
#, no-wrap
msgid ""
"    public RaceWeight(String race) {\n"
"        this(race, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:963
#, no-wrap
msgid ""
"    public RaceWeight(String race, Double weight) { // <1>\n"
"        this.race = race;\n"
"        this.weight = weight;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:966
#, no-wrap
msgid ""
"// Only the race and the average weight will be loaded\n"
"PanacheQuery<RaceWeight> query = Person.find(\"select d.race, AVG(d.weight) from Dog d group by d.race\").project(RaceWeight.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:968
#, fuzzy
msgid "Hibernate ORM will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr "Hibernate ORM将使用这个构造函数。当查询有一个选择子句时，有可能会有多个构造函数。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:972
#, fuzzy
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr "不可能同时拥有HQL `select new` 查询和 `.project(Class)` - 你需要选择一种方法。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:974
#, fuzzy
msgid "For example, this will fail:"
msgstr "例如，这将失败。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:978
#, no-wrap
msgid "PanacheQuery<RaceWeight> query = Person.find(\"select new MyView(d.race, AVG(d.weight)) from Dog d group by d.race\").project(AnotherView.class);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:981
#, fuzzy, no-wrap
msgid "Multiple Persistence Units"
msgstr "多重持久性单元"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:984
#, fuzzy
msgid "The support for multiple persistence units is described in detail in xref:hibernate-orm.adoc#multiple-persistence-units[the Hibernate ORM guide]."
msgstr "对多个持久化单元的支持在 link:hibernate-orm.html#multiple-persistence-units[Hibernate ORM指南] 中有详细描述。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:986
#, fuzzy
msgid "When using Panache, things are simple:"
msgstr "使用Panache时，事情很简单。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:988
#, fuzzy
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr "一个给定的Panache实体只能附加到一个持久化单元。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:989
#, fuzzy
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr "鉴于此，Panache已经提供了必要的管道来透明地找到与Panache实体相关的适当的 `EntityManager` 。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:990
#, fuzzy, no-wrap
msgid "Transactions"
msgstr "交易"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:995
#, fuzzy
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "请确保将修改数据库的方法（例如： `entity.persist()` ）包裹在一个事务中。将CDI bean方法标记为 `@Transactional` ，将为你做到这一点，并使该方法成为一个事务边界。我们建议在你的应用入口点边界这样做，比如你的REST端点控制器。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:1001
#, fuzzy
msgid "Hibernate ORM batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.  This is usually a good thing as it is more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate ORM sends those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr "JPA将你对实体所做的改变进行分批处理，并在事务结束时或查询前发送改变（这被称为冲刷）。这通常是一件好事，因为它更有效率。但是，如果你想检查乐观的锁定失败，立即进行对象验证，或者一般想得到即时的反馈，你可以通过调用 `entity.flush()` ，甚至使用 `entity.persistAndFlush()` ，使其成为一个单一的方法调用，来强制进行冲刷操作。这将允许你在JPA向数据库发送这些变化时捕捉任何可能发生的 `PersistenceException` 。记住，这样做的效率较低，所以不要滥用它。而且你的事务仍然需要提交。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:1003
#, fuzzy
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "下面是一个使用同花顺方法的例子，允许在 `PersistenceException` 的情况下进行具体操作。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1006
#, no-wrap
msgid "import jakarta.persistence.PersistenceException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1019
#, no-wrap
msgid ""
"@Transactional\n"
"public void create(Parameter parameter){\n"
"    try {\n"
"        //Here I use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"        return parameterRepository.persistAndFlush(parameter);\n"
"    }\n"
"    catch(PersistenceException pe){\n"
"        LOG.error(\"Unable to create the parameter\", pe);\n"
"        //in case of error, I save it to disk\n"
"        diskPersister.save(parameter);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1021
#, fuzzy, no-wrap
msgid "Lock management"
msgstr "锁定管理"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1024
#, fuzzy
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panache为你的实体/资源库提供直接的数据库锁支持，使用 `findById(Object, LockModeType)` 或 `find().withLock(LockModeType)` 。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1026
#, fuzzy
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "下面的例子是针对活动记录模式的，但同样可以用于存储库。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1027
#, fuzzy, no-wrap
msgid "First: Locking using findById()."
msgstr "首先。使用findById()进行锁定。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1034
#: upstream/_guides/hibernate-orm-panache.adoc:1055
#, no-wrap
msgid ""
"import jakarta.persistence.LockModeType;\n"
"import jakarta.transaction.Transactional;\n"
"import jakarta.ws.rs.GET;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1036
#: upstream/_guides/hibernate-orm-panache.adoc:1057
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1044
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByIdForUpdate(Long id){\n"
"        Person p = Person.findById(id, LockModeType.PESSIMISTIC_WRITE);\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1046
#: upstream/_guides/hibernate-orm-panache.adoc:1067
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1048
#, fuzzy, no-wrap
msgid "Second: Locking in a find()."
msgstr "第二：锁定一个find()。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1065
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByNameForUpdate(String name){\n"
"        Person p = Person.find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).findOne();\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1070
#, fuzzy
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr "请注意，当事务结束时，锁会被释放，所以调用锁查询的方法必须用 `@Transactional` 注释。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1071
#, fuzzy, no-wrap
msgid "Custom IDs"
msgstr "自定义ID"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1075
#, fuzzy
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr "身份证往往是一个敏感的话题，并不是每个人都愿意让它们由框架来处理，我们再一次为你提供保障。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1078
#, fuzzy
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr "你可以通过扩展 `PanacheEntityBase` ，而不是 `PanacheEntity` ，来指定你自己的ID策略。然后你只要把你想要的任何ID声明为一个公共字段。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1087
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.GeneratedValue;\n"
"import jakarta.persistence.GenerationType;\n"
"import jakarta.persistence.Id;\n"
"import jakarta.persistence.SequenceGenerator;\n"
"import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1090
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1099
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1102
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1106
#, fuzzy
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr "如果你使用存储库，那么你要扩展 `PanacheRepositoryBase` ，而不是 `PanacheRepository` ，并指定你的ID类型作为一个额外的类型参数。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1111
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1116
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1118
#, fuzzy, no-wrap
msgid "Mocking"
msgstr "嘲讽"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1120
#, fuzzy, no-wrap
msgid "Using the active record pattern"
msgstr "使用主动记录模式"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1125
#, fuzzy
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "如果你使用主动记录模式，你不能直接使用Mockito，因为它不支持模拟静态方法，但你可以使用 `quarkus-panache-mock` 模块，它允许你使用Mockito来模拟所有提供的静态方法，包括你自己的。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1127
#, fuzzy
msgid "Add this dependency to your `pom.xml`:"
msgstr "将此依赖性添加到你的 `pom.xml` 。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1135
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1139
#: upstream/_guides/hibernate-orm-panache.adoc:1295
#, fuzzy
msgid "Given this simple entity:"
msgstr "鉴于这个简单的实体。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1144
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1146
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1151
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1154
#: upstream/_guides/hibernate-orm-panache.adoc:1322
#, fuzzy
msgid "You can write your mocking test like this:"
msgstr "你可以像这样写你的模拟测试。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1164
#, no-wrap
msgid ""
"import io.quarkus.panache.mock.PanacheMock;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
"import jakarta.ws.rs.WebApplicationException;\n"
"import java.util.Collections;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1167
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1171
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1174
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1178
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1182
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1186
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1189
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1195
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1199
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1203
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1206
#, no-wrap
msgid ""
"        // Mocking a void method\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1215
#, no-wrap
msgid ""
"        // Make it throw\n"
"        PanacheMock.doThrow(new RuntimeException(\"Stef2\")).when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"Stef2\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1219
#, no-wrap
msgid ""
"        // Back to doNothing\n"
"        PanacheMock.doNothing().when(Person.class).voidMethod();\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1228
#, no-wrap
msgid ""
"        // Make it call the real method\n"
"        PanacheMock.doCallRealMethod().when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"void\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1235
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeast(4)).voidMethod();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1238
#, fuzzy
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "请确保在 `PanacheMock` 而不是 `Mockito` 上调用你的 `verify` 和 `do*` 方法，否则你将不知道要传递什么模拟对象。"

#. type: Title ====
#: upstream/_guides/hibernate-orm-panache.adoc:1239
#, fuzzy, no-wrap
msgid "Mocking `EntityManager`, `Session` and entity instance methods"
msgstr "Mocking `EntityManager` , `Session` 和实体实例方法"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1242
#, fuzzy
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate ORM `Session` object:"
msgstr "如果你需要模拟实体实例方法，比如 `persist()` ，你可以通过模拟Hibernate ORM `Session` 对象来实现。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1253
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"
"import org.hibernate.Session;\n"
"import org.hibernate.query.Query;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.BeforeEach;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1256
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMockingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1259
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Session session;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1267
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Query mockQuery = Mockito.mock(Query.class);\n"
"        Mockito.doNothing().when(session).persist(Mockito.any());\n"
"        Mockito.when(session.createQuery(Mockito.anyString())).thenReturn(mockQuery);\n"
"        Mockito.when(mockQuery.getSingleResult()).thenReturn(0l);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1274
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        Person p = new Person();\n"
"        // mocked via EntityManager mocking\n"
"        p.persist();\n"
"        Assertions.assertNull(p.id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1278
#, no-wrap
msgid ""
"        Mockito.verify(session, Mockito.times(1)).persist(Mockito.any());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1280
#, fuzzy, no-wrap
msgid "Using the repository pattern"
msgstr "使用资源库模式"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1284
#, fuzzy
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "如果你使用存储库模式，你可以直接使用Mockito，使用 `quarkus-junit5-mockito` 模块，这使得嘲弄Bean变得更加容易。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1292
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1300
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1304
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1307
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1310
#, fuzzy
msgid "And this repository:"
msgstr "还有这个储存库。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1319
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1332
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
"import jakarta.ws.rs.WebApplicationException;\n"
"import java.util.Collections;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1337
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1342
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1346
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1350
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1354
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1357
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1363
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1367
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1370
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1377
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1379
#, fuzzy, no-wrap
msgid "How and why we simplify Hibernate ORM mappings"
msgstr "我们如何以及为什么要简化Hibernate ORM映射？"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1383
#, fuzzy
msgid "When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "在编写Hibernate ORM实体时，有许多恼人的事情，用户已经习惯于不情愿地处理，例如：。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1386
#, fuzzy
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really relevant to your model."
msgstr "重复ID逻辑：大多数实体需要一个ID，大多数人并不关心它是如何设置的，因为它与你的模型并不真正相关。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1392
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires a split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "传统的EE模式建议将实体定义（模型）与你可以对其进行的操作（DAO、Repositories）分开，但实际上这需要将状态和其操作分开，尽管我们永远不会对面向对象架构中的普通对象做这样的事情，因为状态和方法是在同一个类中。此外，这需要每个实体有两个类，并且需要在你需要进行实体操作的地方注入DAO或Repository，这就破坏了你的编辑流程，需要你从正在编写的代码中跳出来，建立一个注入点，然后再回来使用它。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1394
#, fuzzy
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "Hibernate查询功能超级强大，但对于普通操作来说过于冗长，即使不需要所有的部分，也需要你写查询。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1396
#, fuzzy
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr "Hibernate是非常通用的，但并没有让我们的模型使用量占90%的琐碎操作变得简单。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1398
#, fuzzy
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "通过Panache，我们采取了一种有主见的方法来解决所有这些问题。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1401
#, fuzzy
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "让你的实体扩展 `PanacheEntity` ：它有一个自动生成的ID字段。如果你需要一个自定义的ID策略，你可以扩展 `PanacheEntityBase` ，而不是自己处理ID。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1404
#, fuzzy
msgid "Use public fields. Get rid of dumb getter and setters. Hibernate ORM w/o Panache also doesn't require you to use getters and setters, but Panache will additionally generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses. This implies that from the Hibernate perspective you're using accessors via getters and setters even while it looks like field accessors."
msgstr "使用公共字段。摆脱愚蠢的getter和setters。Hibernate ORM w/o Panache也不要求你使用getter和setter，但Panache会额外生成所有缺失的getter和setter，并重写对这些字段的每一个访问，以使用访问器方法。这样，当你需要的时候，你仍然可以编写 _有用的_ 访问器，即使你的实体用户仍然使用字段访问，这些访问器也会被使用。这意味着从Hibernate的角度来看，你正在通过getters和setters使用访问器，即使它看起来像字段访问器。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1407
#, fuzzy
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "使用活动记录模式：把你所有的实体逻辑放在实体类的静态方法中，不要创建DAO。你的实体超类带有很多超级有用的静态方法，你也可以在你的实体类中添加你自己的静态方法。用户可以通过输入 `Person.` ，开始使用你的实体 `Person` ，并在一个地方获得所有操作的完成。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1410
#, fuzzy
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr "不要写你不需要的查询部分：写 `Person.find(\"order by name\")` 或 `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` ，甚至更好的 `Person.find(\"name\", \"stef\")` 。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1412
#, fuzzy
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr "这就是它的全部内容：有了Panache，Hibernate ORM看起来从未如此修长和整洁。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1413
#, fuzzy, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "在外部项目或罐子中定义实体"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1416
#, fuzzy
msgid "Hibernate ORM with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "带有Panache的Hibernate ORM依赖于编译时对实体的字节码增强。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1422
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1426
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1447
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
