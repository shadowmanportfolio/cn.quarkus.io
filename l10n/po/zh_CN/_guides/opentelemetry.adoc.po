# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-29 11:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/opentelemetry.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenTelemetry"
msgstr "使用OpenTelemetry"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:15
#, fuzzy
msgid "This guide explains how your Quarkus application can utilize https://opentelemetry.io/[OpenTelemetry] (OTel) to provide distributed tracing for interactive web applications."
msgstr "本指南解释了你的Quarkus应用程序如何利用 link:https://opentelemetry.io/[OpenTelemetry] 来为交互式Web应用程序提供分布式跟踪。"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:19
#, fuzzy
msgid "OpenTelemetry Metrics and Logging are not yet supported."
msgstr "目前还不支持OpenTelemetry指标和日志。"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:22
#, fuzzy
msgid "Quarkus now supports the OpenTelemetry Autoconfiguration for Traces. The configurations match what you can see at https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] with the `quarkus.*` prefix."
msgstr "Quarkus现在支持OpenTelemetry Autoconfiguration for Traces。这些配置与你在 link:https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] 中看到的配置一致，前缀为 `quarkus.*` 。"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:23
#, fuzzy
msgid "Extensions and the libraries they provide, are directly instrumented in Quarkus. The *use of the https://opentelemetry.io/docs/instrumentation/java/automatic/[OpenTelemetry Agent] is not needed nor recommended* due to context propagation issues between imperative and reactive libraries."
msgstr "扩展和它们所提供的库，在Quarkus中直接使用工具。由于命令式和反应式库之间的上下文传播问题， *不需要也不推荐* 使用 *<a href=\"https://opentelemetry.io/docs/instrumentation/java/automatic/\">OpenTelemetry Agent</a>* 。"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:24
msgid "If you come from the legacy OpenTracing extension, there is a xref:telemetry-opentracing-to-otel-tutorial.adoc[guide to help with the migration]."
msgstr ""

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:26
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:31
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:34
#, fuzzy
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr "在本指南中，我们创建了一个简单的REST应用程序来演示分布式跟踪。"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:35
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:39
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。不过，你可以直接跳到完成的例子。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:41
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:43
#, fuzzy
msgid "The solution is located in the `opentelemetry-quickstart` link:{quickstarts-tree-url}/opentelemetry-quickstart[directory]."
msgstr "该解决方案位于 `opentelemetry-quickstart` {quickstarts-treeurl}/opentelemetry-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:44
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:47
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:55
#, fuzzy
msgid "This command generates the Maven project and imports the `quarkus-opentelemetry` extension, which includes the default OpenTelemetry support, and a gRPC span exporter for https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP]."
msgstr "该命令生成Maven项目并导入 `quarkus-opentelemetry-exporter-otlp` 扩展，其中包括OpenTelemetry支持，以及 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP] 的gRPC跨度输出器。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:58
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `quarkus-opentelemetry` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `quarkus-opentelemetry-exporter-otlp` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:63
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/opentelemetry.adoc:65
#: upstream/_guides/opentelemetry.adoc:236
#: upstream/_guides/opentelemetry.adoc:300
#: upstream/_guides/opentelemetry.adoc:318
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:71
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-opentelemetry</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/opentelemetry.adoc:74
#: upstream/_guides/opentelemetry.adoc:245
#: upstream/_guides/opentelemetry.adoc:309
#: upstream/_guides/opentelemetry.adoc:327
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:77
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-opentelemetry\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:79
#, fuzzy, no-wrap
msgid "Examine the Jakarta REST resource"
msgstr "检查JAX-RS资源"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:82
#, fuzzy
msgid "Create a `src/main/java/org/acme/opentelemetry/TracedResource.java` file with the following content:"
msgstr "创建一个 `src/main/java/org/acme/opentelemetry/TracedResource.java` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:86
#, no-wrap
msgid "package org.acme.opentelemetry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:92
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:95
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:97
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:105
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\");\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:109
#, fuzzy
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any required code changes."
msgstr "请注意，应用程序中没有包含任何追踪的具体代码。默认情况下，发送到这个端点的请求将被追踪，不需要修改任何必要的代码。"

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:110
#, fuzzy, no-wrap
msgid "Create the configuration"
msgstr "创建配置"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:113
#, fuzzy
msgid "There are no mandatory configurations for the extension to work."
msgstr "该扩展的工作没有强制性配置。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:115
#, fuzzy
msgid "If you need to change any of the default property values, here is an example on how to configure the default OTLP gRPC Exporter within the application, using the `src/main/resources/application.properties` file:"
msgstr "如果你需要改变任何默认的属性值，这里有一个例子，说明如何在应用程序内配置默认的OTLP gRPC导出器，使用 `src/main/resources/application.properties` 文件："

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:122
#, no-wrap
msgid ""
"quarkus.application.name=myservice // <1>\n"
"quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317 // <2>\n"
"quarkus.otel.exporter.otlp.traces.headers=authorization=Bearer my_secret // <3>\n"
"quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n  // <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:125
#, no-wrap
msgid ""
"# Alternative to the console log\n"
"quarkus.http.access-log.pattern=\"...traceId=%{X,traceId} spanId=%{X,spanId}\" // <5>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:128
#, fuzzy
msgid "All spans created from the application will include an OpenTelemetry `Resource` indicating the span was created by the `myservice` application. If not set, it will default to the artifact id."
msgstr "所有从应用程序创建的跨度将包括一个OpenTelemetry `Resource` ，表明该跨度是由 `myservice` 应用程序创建。如果没有设置，它将默认为工件的ID。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:129
#, fuzzy
msgid "gRPC endpoint to send spans. If not set, it will default to `http://localhost:4317`."
msgstr "用于发送跨度的gRPC端点。如果没有设置，它将默认为 `<a href=\"http://localhost:4317\" class=\"bare\">http://localhost:4317</a>` ."

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:130
#, fuzzy
msgid "Optional gRPC headers commonly used for authentication"
msgstr "可选的gRPC头文件，通常用于认证"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:131
#, fuzzy
msgid "Add tracing information into log messages."
msgstr "在日志信息中添加追踪信息。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:132
#, fuzzy
msgid "You can also only put the trace info into the access log. In this case you must omit the info in the console log format."
msgstr "你也可以只把跟踪信息放到访问日志中。在这种情况下，你必须省略控制台日志格式中的信息。"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:136
#, fuzzy
msgid "All configurations have been updated from `quarkus.opentelemetry.\\*` -> `quarkus.otel.*`"
msgstr "所有的配置都从 `quarkus.opentelemetry.*` →更新。 `quarkus.otel.*` "

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:138
#, fuzzy
msgid "The legacy configurations are now deprecated but will still work during a transition period."
msgstr "遗留的配置现在已被废弃，但在过渡期内仍可使用。"

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:140
#, no-wrap
msgid "Disable all or parts of the OpenTelemetry extension"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:143
msgid "Once you add the dependency, the extension will be enabled by default but there are a few ways to disable the OpenTelemetry extension globally or partially."
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:145
#, no-wrap
msgid "Property name"
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:145
#, no-wrap
msgid "Default value"
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:147
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:148
#, no-wrap
msgid "`quarkus.otel.enabled`"
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:149
#: upstream/_guides/opentelemetry.adoc:157
#: upstream/_guides/opentelemetry.adoc:161
#, no-wrap
msgid "true"
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:151
#, no-wrap
msgid "If false, disable the OpenTelemetry usage at *build* time."
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:152
#, no-wrap
msgid "`quarkus.otel.sdk.disabled`"
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:153
#, no-wrap
msgid "false"
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:155
#, no-wrap
msgid "Comes from the OpenTelemetry autoconfiguration. If true, will disable the OpenTelemetry SDK usage at *runtime*."
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:156
#, no-wrap
msgid "`quarkus.otel.traces.enabled`"
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:159
#, no-wrap
msgid "If false, disable the OpenTelemetry tracing usage at *build* time."
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:160
#, no-wrap
msgid "`quarkus.otel.exporter.otlp.enabled`"
msgstr ""

#. type: Table
#: upstream/_guides/opentelemetry.adoc:162
#, no-wrap
msgid "If false will disable the default OTLP exporter at *build* time."
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:165
msgid "If you need to enable or disable the exporter at runtime, you can use the xref:sampler[Sampler] because it has the ability to filter out all the spans if needed."
msgstr ""

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:167
#, fuzzy, no-wrap
msgid "Run the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:170
#, fuzzy
msgid "The first step is to configure and start the https://opentelemetry.io/docs/collector/[OpenTelemetry Collector] to receive, process and export telemetry data to https://www.jaegertracing.io/[Jaeger] that will display the captured traces."
msgstr "第一步是配置和启动 link:https://opentelemetry.io/docs/collector/[OpenTelemetry采集器] ，以接收、处理和输出遥测数据到 link:https://www.jaegertracing.io/[Jaeger] ，显示捕获的轨迹。"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:176
#, fuzzy
msgid "Jaeger-all-in-one includes the Jaeger agent, an OTel collector, and the query service/UI.  You do not need to install a separated collector. You can directly send the trace data to Jaeger (after enabling OTLP receivers there, see e.g. this https://medium.com/jaegertracing/introducing-native-support-for-opentelemetry-in-jaeger-eb661be8183c[blog entry] for details)."
msgstr "Jaeger从1.35版本开始就支持OTel协议。在这种情况下，你不需要安装收集器，而是可以直接将跟踪数据发送到Jaeger（在那里启用OTLP接收器之后，例如，见这篇 link:https://medium.com/jaegertracing/introducing-native-support-for-opentelemetry-in-jaeger-eb661be8183c[博客文章] ）。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:179
#, fuzzy
msgid "Start the OpenTelemetry Collector and Jaeger system via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr "通过以下 `docker-compose.yml` 文件启动OpenTelemetry采集器和Jaeger系统，你可以通过 `docker-compose up -d` 。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:184
#, no-wrap
msgid ""
"version: \"2\"\n"
"services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:196
#, no-wrap
msgid ""
"  # Jaeger\n"
"  jaeger-all-in-one:\n"
"    image: jaegertracing/all-in-one:latest\n"
"    ports:\n"
"      - \"16686:16686\" # Jaeger UI\n"
"      - \"14268:14268\" # Receive legacy OpenTracing traces, optional\n"
"      - \"4317:4317\"   # OTLP gRPC receiver\n"
"      - \"4318:4318\"   # OTLP HTTP receiver, not yet used by Quarkus, optional\n"
"      - \"14250:14250\" # Receive from external otel-collector, optional\n"
"    environment:\n"
"      - COLLECTOR_OTLP_ENABLED=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:198
#, fuzzy
msgid "You should remove the optional ports you don't need them."
msgstr "你应该删除你不需要的可选端口。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:200
#, fuzzy
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr "现在我们准备运行我们的应用程序。如果使用 `application.properties` 来配置追踪器。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:204
#, fuzzy
msgid "or if configuring the OTLP gRPC endpoint via JVM arguments:"
msgstr "或者如果通过JVM参数配置OTLP gRPC端点。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:210
#, fuzzy
msgid "With the OpenTelemetry Collector, the Jaeger system and the application running, you can make a request to the provided endpoint:"
msgstr "在OpenTelemetry收集器、Jaeger系统和应用程序运行的情况下，你可以向提供的端点发出请求。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:215
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:218
#, fuzzy
msgid "When the first request has been submitted, you will be able to see the tracing information in the logs:"
msgstr "当第一个请求被提交后，你将能在日志中看到追踪信息。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:224
#, no-wrap
msgid ""
"10:49:02 INFO  traceId=, parentId=, spanId=, sampled= [io.quarkus] (main) Installed features: [cdi, opentelemetry, rest-client, resteasy, smallrye-context-propagation, vertx]\n"
"10:49:03 INFO  traceId=17ceb8429b9f25b0b879fa1503259456, parentId=3125c8bee75b7ad6, spanId=58ce77c86dd23457, sampled=true [or.ac.op.TracedResource] (executor-thread-1) hello\n"
"10:49:03 INFO  traceId=ad23acd6d9a4ed3d1de07866a52fa2df, parentId=, spanId=df13f5b45cf4d1e2, sampled=true [or.ac.op.TracedResource] (executor-thread-0) hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:228
#, fuzzy
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr "然后访问 link:http://localhost:16686[Jaeger用户界面] ，查看追踪信息。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:230
#, fuzzy
msgid "Hit `CTRL+C` or type `q` to stop the application."
msgstr "点击 `CTRL+C` ，停止应用程序。"

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:231
#, fuzzy, no-wrap
msgid "JDBC"
msgstr "JDBC"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:234
#, fuzzy
msgid "The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr "link:https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC工具] 将为你的应用程序进行的每个JDBC查询添加一个跨度，要启用它，请在你的构建文件中添加以下依赖。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:242
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.instrumentation</groupId>\n"
"    <artifactId>opentelemetry-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:248
#, no-wrap
msgid "implementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:251
#, fuzzy
msgid "As it uses a dedicated JDBC datasource wrapper, you must enable telemetry for your datasource:"
msgstr "由于它使用专用的JDBC驱动，你必须配置你的数据源和Hibernate ORM来使用它。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:256
#, no-wrap
msgid ""
"# enable tracing\n"
"quarkus.datasource.jdbc.telemetry=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:260
#, no-wrap
msgid ""
"# configure datasource\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:262
#, fuzzy, no-wrap
msgid "Additional configuration"
msgstr "额外配置"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:265
#, fuzzy
msgid "Some use cases will require custom configuration of OpenTelemetry.  These sections will outline what is necessary to properly configure it."
msgstr "一些用例将需要对OpenTelemetry进行自定义配置。这些部分将概述正确配置它所需要的东西。"

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:266
#, fuzzy, no-wrap
msgid "ID Generator"
msgstr "身份证生成器"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:269
#, fuzzy
msgid "The OpenTelemetry extension will use by default a random https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID Generator] when creating the trace and span identifier."
msgstr "在创建跟踪和跨度标识符时，OpenTelemetry扩展将默认使用一个随机的 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID发生器] 。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:272
#, fuzzy
msgid "Some vendor-specific protocols need a custom ID Generator, you can override the default one by creating a producer.  The OpenTelemetry extension will detect the `IdGenerator` CDI bean and will use it when configuring the tracer producer."
msgstr "一些供应商的特定协议需要一个自定义的ID生成器，你可以通过创建一个生产者来覆盖默认的ID。OpenTelemetry扩展将检测 `IdGenerator` CDI Bean，并在配置追踪器生产者时使用它。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:277
#: upstream/_guides/opentelemetry.adoc:454
#, no-wrap
msgid ""
"@Singleton\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:285
#, no-wrap
msgid ""
"    /** Creates a custom IdGenerator for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public IdGenerator idGenerator() {\n"
"        return AwsXrayIdGenerator.getInstance();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:287
#, fuzzy, no-wrap
msgid "Propagators"
msgstr "传播者"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:290
#, fuzzy
msgid "OpenTelemetry propagates cross-cutting concerns through https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] that will share an underlying `Context` for storing state and accessing data across the lifespan of a distributed transaction."
msgstr "OpenTelemetry通过 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[传播者] 来传播跨领域的关注，这些 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[传播者] 将共享一个底层 `Context` ，用于在分布式事务的生命周期内存储状态和访问数据。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:293
#, fuzzy
msgid "By default, the OpenTelemetry extension enables the https://www.w3.org/TR/trace-context/[W3C Trace Context] and the https://www.w3.org/TR/baggage/[W3C Baggage] propagators, you can however choose any of the supported OpenTelemetry propagators by setting the `propagators` config that is described in the xref:configuration-reference[OpenTelemetry Configuration Reference]."
msgstr "默认情况下，OpenTelemetry扩展启用了 link:https://www.w3.org/TR/trace-context/[W3C Trace Context] 和 link:https://www.w3.org/TR/baggage/[W3C Baggage] 传播器，但是你可以通过设置 link:#configuration-reference[[configuration-reference]] 中描述的 `propagators` 配置来选择任何支持的OpenTelemetry传播器。"

#. type: Title ====
#: upstream/_guides/opentelemetry.adoc:294
#, fuzzy, no-wrap
msgid "Additional Propagators"
msgstr "额外配置"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:298
#, fuzzy
msgid "The `b3`, `b3multi`, `jaeger` and `ottrace` propagators will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] extension to be added as a dependency to your project."
msgstr " `b3` , `b3multi` , `jaeger` 和 `ottrace` 传播者将需要把 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] 扩展作为一个依赖项添加到你的项目中。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:306
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:312
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:316
#, fuzzy
msgid "The `xray` propagator will need the https://github.com/open-telemetry/opentelemetry-java-contrib/tree/main/aws-xray-propagator[aws] extension to be added as a dependency to your project."
msgstr " `xray` 传播者将需要将 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/aws[aws] 扩展作为依赖项添加到你的项目中。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:324
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.contrib</groupId>\n"
"    <artifactId>opentelemetry-aws-xray-propagator</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:330
#, no-wrap
msgid "implementation(\"io.opentelemetry.contrib:opentelemetry-aws-xray-propagator\")\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/opentelemetry.adoc:332
#, fuzzy, no-wrap
msgid "Customise Propagator"
msgstr "传播者"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:335
msgid "To customise the propagation header you can implement the `TextMapPropagatorCustomizer` interface. This can be used, as an example, to restrict propagation of OpenTelemetry trace headers and prevent potentially sensitive data to be sent to third party systems."
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:338
msgid "```java /**"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:339
msgid "/**"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:340
msgid "Meant to be implemented by a CDI bean that provides arbitrary customization for the TextMapPropagator"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:341
msgid "that are to be registered with OpenTelemetry"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:343
#, no-wrap
msgid ""
"*/\n"
"public interface TextMapPropagatorCustomizer {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:345
#, no-wrap
msgid "    TextMapPropagator customize(Context context);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:348
#, no-wrap
msgid ""
"    interface Context {\n"
"        TextMapPropagator propagator();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:353
#, no-wrap
msgid ""
"        ConfigProperties otelConfigProperties();\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:354
#, fuzzy, no-wrap
msgid "Resource"
msgstr "资源"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:357
#, fuzzy
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[resource] is a representation of the entity that is producing telemetry, it adds attributes to the exported trace to characterize who is producing the trace."
msgstr "link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[资源] 是产生遥测的实体的代表，它向输出的跟踪添加属性，以描述谁在产生跟踪。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:361
#, fuzzy
msgid "You can add attributes by setting the `resource-attributes` tracer config that is described in the xref:configuration-reference[OpenTelemetry Configuration Reference].  Since this property can be overridden at runtime, the OpenTelemetry extension will pick up its value following the order of precedence that is described in the xref:config-reference.adoc#configuration-sources[Quarkus Configuration Reference]."
msgstr "你可以通过设置 link:#configuration-reference[[configuration-reference]] 中描述的 `resource-attributes` tracer config来添加属性。由于这个属性可以在运行时被覆盖，OpenTelemetry扩展将按照 link:config-reference.html#configuration_sources[Quarkus配置参考] 中描述的优先顺序来获取其值。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:364
#, fuzzy
msgid "If by any means you need to use a custom resource or one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create multiple resource producers. The OpenTelemetry extension will detect the `Resource` CDI beans and will merge them when configuring the tracer producer."
msgstr "如果通过任何方式你需要使用自定义的资源或由 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK扩展] 之一提供的资源，你可以创建多个资源生产者。OpenTelemetry扩展将检测 `Resource` CDI beans，并在配置追踪器生产者时将其合并。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:369
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:375
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource osResource() {\n"
"        return OsResource.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:382
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource ecsResource() {\n"
"        return EcsResource.get();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/opentelemetry.adoc:384
#, no-wrap
msgid "User data"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:387
msgid "By setting `quarkus.otel.traces.eusp.enabled=true` you can add information about the user related to each span. The user's ID and roles will be added to the span attributes, if available."
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:389
#, fuzzy, no-wrap
msgid "Sampler"
msgstr "采样器"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:391
#, fuzzy
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[sampler] decides whether a trace should be discarded or forwarded, effectively managing noise and reducing overhead by limiting the number of collected traces sent to the collector."
msgstr "link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[采样器] 决定是否应该对一个轨迹进行采样和输出，通过减少收集和发送至采集器的轨迹样本数量来控制噪音和开销。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:393
#, fuzzy
msgid "Quarkus comes equipped with a https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[built-in sampler], and you also have the option to create your custom sampler."
msgstr "你可以通过设置 link:#configuration-reference[[配置-参考]] 中描述的所需采样器配置来简单地设置一个 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[内置的] 采样器。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:395
msgid "To use the built-in sampler, you can configure it by setting the desired sampler parameters as detailed in the xref:configuration-reference[OpenTelemetry Configuration Reference]. As an example, you can configure the sampler to retain 50% of the traces:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:401
#, no-wrap
msgid ""
"# build time property only:\n"
"quarkus.otel.traces.sampler=traceidratio\n"
"# Runtime property:\n"
"quarkus.otel.traces.sampler.arg=0.5\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:406
msgid "An interesting use case for the sampler is to activate and deactivate tracing export at runtime, acording to this example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:414
#, no-wrap
msgid ""
"# build time property only:\n"
"quarkus.otel.traces.sampler=traceidratio\n"
"# On (default). All traces are exported:\n"
"quarkus.otel.traces.sampler.arg=1.0\n"
"# Off. No traces are exported:\n"
"quarkus.otel.traces.sampler.arg=0.0\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:420
#, fuzzy
msgid "Quarkus 3.0 introduced breaking changes on the configuration."
msgstr "Quarkus 3.0在配置上引入了突破性的变化。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:422
#, fuzzy
msgid "Sampler related property names and values change to comply with the latest Java OpenTelemetry SDK. During a transition period it will be possible to set the new configuration values in the old property because we are mapping `quarkus.opentelemetry.tracer.sampler` -> `quarkus.otel.traces.sampler`."
msgstr "采样器相关的属性名称和值会发生变化，以符合最新的Java OpenTelemetry SDK。在过渡时期，将有可能在旧的属性中设置新的配置值，因为我们正在映射 `quarkus.opentelemetry.tracer.sampler` → `quarkus.otel.traces.sampler` 。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:424
#, fuzzy
msgid "If the sampler is parent based, there is no need to set, the now dropped property, `quarkus.opentelemetry.tracer.sampler.parent-based`."
msgstr "如果采样器是基于父级的，就不需要设置现在被放弃的属性， `quarkus.opentelemetry.tracer.sampler.parent-based` 。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:426
#, fuzzy
msgid "The values you need to set on `quarkus.opentelemetry.tracer.sampler` are now:"
msgstr "你需要在 `quarkus.opentelemetry.tracer.sampler` ，现在需要设置的值是："

#. type: Table
#: upstream/_guides/opentelemetry.adoc:428
#, fuzzy, no-wrap
msgid "Old Sampler config value"
msgstr "旧的采样器配置值"

#. type: Table
#: upstream/_guides/opentelemetry.adoc:428
#, fuzzy, no-wrap
msgid "New Sampler config valu"
msgstr "新的采样器配置值"

#. type: Table
#: upstream/_guides/opentelemetry.adoc:430
#, fuzzy, no-wrap
msgid "New Sampler config value (Parent based)"
msgstr "新的采样器配置值（基于父代）。"

#. type: Table
#: upstream/_guides/opentelemetry.adoc:431
#, fuzzy, no-wrap
msgid "`on`"
msgstr " `on` "

#. type: Table
#: upstream/_guides/opentelemetry.adoc:432
#, fuzzy, no-wrap
msgid "`always_on`"
msgstr " `always_on` "

#. type: Table
#: upstream/_guides/opentelemetry.adoc:434
#, fuzzy, no-wrap
msgid "`parentbased_always_on`"
msgstr " `parentbased_always_on` "

#. type: Table
#: upstream/_guides/opentelemetry.adoc:435
#, fuzzy, no-wrap
msgid "`off`"
msgstr " `off` "

#. type: Table
#: upstream/_guides/opentelemetry.adoc:436
#, fuzzy, no-wrap
msgid "`always_off`"
msgstr " `always_off` "

#. type: Table
#: upstream/_guides/opentelemetry.adoc:438
#, fuzzy, no-wrap
msgid "`parentbased_always_off`"
msgstr " `parentbased_always_off` "

#. type: Table
#: upstream/_guides/opentelemetry.adoc:439
#, fuzzy, no-wrap
msgid "`ratio`"
msgstr " `ratio` "

#. type: Table
#: upstream/_guides/opentelemetry.adoc:440
#, fuzzy, no-wrap
msgid "`traceidratio`"
msgstr " `traceidratio` "

#. type: Table
#: upstream/_guides/opentelemetry.adoc:441
#, fuzzy, no-wrap
msgid "`parentbased_traceidratio`"
msgstr " `parentbased_traceidratio` "

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:445
#, fuzzy
msgid "If you need to use a custom sampler there are now 2 different ways:"
msgstr "如果你需要使用自定义采样器，现在有两种不同的方法："

#. type: Title ====
#: upstream/_guides/opentelemetry.adoc:446
#, fuzzy, no-wrap
msgid "Sampler CDI Producer"
msgstr "采样器CDI生产者"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:449
#, fuzzy
msgid "You can create a sampler CDI producer. The Quarkus OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the Tracer."
msgstr "一些供应商的特定协议需要一个自定义的ID生成器，你可以通过创建一个生产者来覆盖默认的ID。OpenTelemetry扩展将检测 `IdGenerator` CDI Bean，并在配置追踪器生产者时使用它。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:464
#, no-wrap
msgid ""
"    /** Creates a custom sampler for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public Sampler sampler() {\n"
"        return JaegerRemoteSampler.builder()\n"
"        .setServiceName(\"my-service\")\n"
"        .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/opentelemetry.adoc:466
#, fuzzy, no-wrap
msgid "OTel Sampler SPI"
msgstr "采样器"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:470
#, fuzzy
msgid "This will use the SPI hooks available with the OTel Autoconfiguration.  You can create a simple Sampler class:"
msgstr "这将使用OTel Autoconfiguration的SPI钩子。你可以创建一个简单的采样器类："

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:483
#, no-wrap
msgid ""
"public class CustomSPISampler implements Sampler {\n"
"    @Override\n"
"    public SamplingResult shouldSample(Context context,\n"
"            String s,\n"
"            String s1,\n"
"            SpanKind spanKind,\n"
"            Attributes attributes,\n"
"            List<LinkData> list) {\n"
"        // Do some sampling here\n"
"        return Sampler.alwaysOn().shouldSample(context, s, s1, spanKind, attributes, list);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:489
#, no-wrap
msgid ""
"    @Override\n"
"    public String getDescription() {\n"
"        return \"custom-spi-sampler-description\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:492
#, fuzzy
msgid "Then a Sampler Provider:"
msgstr "然后是一个采样器供应商："

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:499
#, no-wrap
msgid ""
"public class CustomSPISamplerProvider implements ConfigurableSamplerProvider {\n"
"    @Override\n"
"    public Sampler createSampler(ConfigProperties configProperties) {\n"
"        return new CustomSPISampler();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:505
#, no-wrap
msgid ""
"    @Override\n"
"    public String getName() {\n"
"        return \"custom-spi-sampler\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:507
#, fuzzy
msgid "Write the SPI loader text file at `resources/META-INF/services` with name `io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSamplerProvider` containing the full qualified name of the `CustomSPISamplerProvider` class."
msgstr "在 `resources/META-INF/services` ，写入SPI加载器文本文件，文件名为 `io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSamplerProvider` ，包含 `CustomSPISamplerProvider` 类的全称。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:509
#, fuzzy
msgid "Then activate on the configuration:"
msgstr "创建配置"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:512
#, no-wrap
msgid "quarkus.otel.traces.sampler=custom-spi-sampler\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:515
#, fuzzy
msgid "As you can see, CDI is much simpler to work with."
msgstr "正如你所看到的，CDI在工作上要简单得多。"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:516
#, fuzzy, no-wrap
msgid "Additional instrumentation"
msgstr "额外的仪器设备"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:520
#, fuzzy
msgid "Some Quarkus extensions will require additional code to ensure traces are propagated to subsequent execution.  These sections will outline what is necessary to propagate traces across process boundaries."
msgstr "一些Quarkus扩展将需要额外的代码来确保追踪被传播到后续执行中。这些部分将概述跨越进程边界传播跟踪的必要条件。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:522
#, fuzzy
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr "本节中记录的仪器已经用Quarkus测试过，在标准和本地模式下都能工作。"

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:523
#, fuzzy, no-wrap
msgid "CDI"
msgstr "CDI"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:527
#, fuzzy
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.instrumentation.annotations.WithSpan` annotation will create a new Span and establish any required relationships with the current Trace context."
msgstr "在任何CDI感知的Bean中用 `io.opentelemetry.extension.annotations.WithSpan` 注解来注解一个方法将创建一个新的Span，并与当前Trace上下文建立任何必要的关系。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:529
#, fuzzy
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.instrumentation.annotations.AddingSpanAttributes` will not create a new span but will add annotated method parameters to attributes in the current span."
msgstr "在任何CDI感知的Bean中用 `io.opentelemetry.extension.annotations.WithSpan` 注解来注解一个方法将创建一个新的Span，并与当前Trace上下文建立任何必要的关系。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:531
msgid "If a method is annotated by mistake with `@AddingSpanAttributes` and `@WithSpan` annotations, the `@WithSpan` annotation will take precedence."
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:534
#, fuzzy
msgid "Method parameters can be annotated with the `io.opentelemetry.instrumentation.annotations.SpanAttribute` annotation to indicate which method parameters should be part of the span. The parameter name can be customized as well."
msgstr "方法参数可以用 `io.opentelemetry.extension.annotations.SpanAttribute` 注释来表明哪些方法参数应该是跟踪的一部分。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:536
#, fuzzy
msgid "Example:"
msgstr "例子。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:542
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class SpanBean {\n"
"    @WithSpan\n"
"    void span() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:544
#: upstream/_guides/opentelemetry.adoc:549
#: upstream/_guides/opentelemetry.adoc:554
#: upstream/_guides/opentelemetry.adoc:559
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:547
#, no-wrap
msgid ""
"    @WithSpan(\"name\")\n"
"    void spanName() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:552
#, no-wrap
msgid ""
"    @WithSpan(kind = SERVER)\n"
"    void spanKind() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:557
#, no-wrap
msgid ""
"    @WithSpan\n"
"    void spanArgs(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:562
#, no-wrap
msgid ""
"    @AddingSpanAttributes\n"
"    void addArgumentToExistingSpan(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:565
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:567
#, fuzzy, no-wrap
msgid "Available OpenTelemetry CDI injections"
msgstr "可用的OpenTelemetry CDI注射剂"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:571
#, fuzzy
msgid "As per MicroProfile Telemetry Tracing specification, Quarkus supports the CDI injections of the following classes:"
msgstr "根据MicroProfile遥测跟踪规范，Quarkus支持以下类别的CDI注入。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:573
#, fuzzy
msgid "`io.opentelemetry.api.OpenTelemetry`"
msgstr " `io.opentelemetry.api.OpenTelemetry` "

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:574
#, fuzzy
msgid "`io.opentelemetry.api.trace.Tracer`"
msgstr " `io.opentelemetry.api.trace.Tracer` "

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:575
#, fuzzy
msgid "`io.opentelemetry.api.trace.Span`"
msgstr " `io.opentelemetry.api.trace.Span` "

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:576
#, fuzzy
msgid "`io.opentelemetry.api.baggage.Baggage`"
msgstr " `io.opentelemetry.api.baggage.Baggage` "

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:578
#, fuzzy
msgid "You can inject these classes in any CDI enabled bean. For instance, the `Tracer` is particularly useful to start custom spans:"
msgstr "你可以在任何支持CDI的bean中注入这些类。例如， `Tracer` ，对于启动自定义跨度特别有用。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:583
#, no-wrap
msgid ""
"@Inject\n"
"Tracer tracer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:585
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:592
#, no-wrap
msgid ""
"public void tracedWork() {\n"
"    Span span = tracer.spanBuilder(\"My custom span\")\n"
"        .setAttribute(\"attr\", \"attr.value\")\n"
"        .setParent(Context.current().with(Span.current()))\n"
"        .setSpanKind(SpanKind.INTERNAL)\n"
"        .startSpan();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:594
#, no-wrap
msgid "    // traced work\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:597
#, no-wrap
msgid ""
"    span.end();\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:599
#, fuzzy, no-wrap
msgid "SmallRye Reactive Messaging - Kafka"
msgstr "SmallRye反应式消息传递 - Kafka"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:603
#, fuzzy
msgid "When using the SmallRye Reactive Messaging extension for Kafka, we are able to propagate the span into the Kafka Record with:"
msgstr "当使用SmallRye Reactive Messaging Extension for Kafka时，我们能够将跨度传播到Kafka Record中，并使用。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:608
#, no-wrap
msgid ""
"TracingMetadata tm = TracingMetadata.withPrevious(Context.current());\n"
"Message out = Message.of(...).withMetadata(tm);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:612
#, fuzzy
msgid "The above creates a `TracingMetadata` object we can add to the `Message` being produced, which retrieves the OpenTelemetry `Context` to extract the current span for propagation."
msgstr "以上创建了一个 `TracingMetadata` 对象，我们可以将其添加到正在产生的 `Message` ，该对象检索OpenTelemetry `Context` ，提取当前跨度进行传播。"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:613
#, fuzzy, no-wrap
msgid "Exporters"
msgstr "出口商"

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:615
#, no-wrap
msgid "Default"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:618
msgid "The Quarkus OpenTelemetry extension uses its own exporter built on top of Vert.x for optimal performance and maintainability."
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:620
msgid "The exporter is automatically wired with CDI, that's why the `quarkus.otel.traces.exporter` property defaults to `cdi`."
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:622
msgid "The `quarkus.otel.exporter.otlp.traces.protocol` default to `grpc` and `http/protobuf` can also be used."
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:623
#, no-wrap
msgid "On Quarkiverse"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:625
#, fuzzy
msgid "Additional exporters will be available in the Quarkiverse https://github.com/quarkiverse/quarkus-opentelemetry-exporter/blob/main/README.md[quarkus-opentelemetry-exporter] project."
msgstr "额外的出口商将在Quarkiverse link:https://github.com/quarkiverse/quarkus-opentelemetry-exporter/blob/main/README.md[quarkus-opentelemetry-exporter] 项目中提供。"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:627
#, no-wrap
msgid "Quarkus core extensions instrumented with OpenTelemetry tracing"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:630
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-agroal[`quarkus-agroal`]"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:631
msgid "https://quarkus.io/guides/grpc-getting-started[`quarkus-grpc`]"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:632
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-jaxrs-client-reactive[`quarkus-jaxrs-client-reactive`]"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:633
msgid "https://quarkus.io/guides/resteasy[`quarkus-resteasy-jackson`]"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:634
msgid "https://quarkus.io/guides/resteasy-reactive[`quarkus-resteasy-reactive`]"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:635
msgid "https://quarkus.io/guides/rest-client[`quarkus-rest-client`]"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:636
msgid "https://quarkus.io/guides/scheduler[`quarkus-scheduler`]"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:637
msgid "https://quarkus.io/guides/smallrye-graphql[`quarkus-smallrye-graphql`]"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:638
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-smallrye-reactive-messaging[`quarkus-smallrye-reactive-messaging`]"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:639
msgid "AMQP 1.0"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:640
msgid "RabbitMQ"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:641
msgid "Kafka"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:642
msgid "Pulsar"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:643
msgid "https://quarkus.io/guides/vertx[`quarkus-vertx`] (http requests)"
msgstr ""

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:645
#, fuzzy, no-wrap
msgid "OpenTelemetry Configuration Reference"
msgstr "OpenTelemetry配置参考"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:651
msgid "Quarkus supports the OpenTelemetry Autoconfiguration for Traces.  The configurations match what you can see at https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] adding the usual `quarkus.*` prefix."
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:653
msgid "Quarkus OpenTelemetry configuration properties now have the `quarkus.otel.*` prefix."
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:655
#, no-wrap
msgid "*The legacy properties* with prefix `quarkus.opentelemetry.*` are currently being mapped to the new ones as a default, during a transition period. See Default column in the details below.\n"
msgstr ""

#, fuzzy
#~ msgid "OpenTelemetry exporter"
#~ msgstr "OpenTelemetry配置参考"

#, fuzzy
#~ msgid "Quarkus OpenTelemetry defaults to the standard OTLP exporter defined in OpenTelemetry."
#~ msgstr "Quarkus OpenTelemetry默认为OpenTelemetry中定义的标准OTLP导出器。"

#, fuzzy
#~ msgid "There are two ways to configure the default OTLP gRPC Exporter within the application."
#~ msgstr "有两种方法可以在应用程序中配置OTLP gRPC导出器。"

#, fuzzy
#~ msgid "The first approach is by providing the properties within the `src/main/resources/application.properties` file:"
#~ msgstr "第一种方法是通过在 `src/main/resources/application.properties` 文件内提供属性。"

#, fuzzy
#~ msgid "Whether OpenTelemetry is enabled or not. The default is `true`, but shown here to indicate how it can be disabled"
#~ msgstr "是否启用了OpenTelemetry。默认是 `true` ，但在此显示的是如何禁用它。"

#, fuzzy
#~ msgid "gRPC endpoint for sending spans"
#~ msgstr "用于发送跨度的gRPC端点"

#, fuzzy
#~ msgid "Configure the OpenTelemetry Collector by creating an `otel-collector-config.yaml` file:"
#~ msgstr "通过创建一个 `otel-collector-config.yaml` 文件来配置OpenTelemetry Collector。"

#, fuzzy
#~ msgid "If you need to use a custom sampler or to use one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create a sampler producer. The OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the tracer producer."
#~ msgstr "如果你需要使用一个自定义的采样器或使用一个由 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK扩展] 提供的采样器，你可以创建一个采样器生产商。OpenTelemetry扩展将检测到 `Sampler` CDI bean，并在配置追踪器生产者时使用它。"
