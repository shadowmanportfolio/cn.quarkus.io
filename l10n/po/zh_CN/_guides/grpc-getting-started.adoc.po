# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-26 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/grpc-getting-started.adoc:6
#, fuzzy, no-wrap
msgid "Getting Started with gRPC"
msgstr "开始使用gRPC"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:13
#, fuzzy
msgid "This page explains how to start using gRPC in your Quarkus application.  While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr "本页介绍了如何在你的Quarkus应用程序中开始使用gRPC。本页介绍了如何用Maven进行配置，但也可以使用Gradle。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:16
#, fuzzy
msgid "Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].  The default configuration is enough, but you can also select some extensions if you want."
msgstr "让我们想象一下，你有一个普通的Quarkus项目，由 link:https://code.quarkus.io[Quarkus项目生成器] 生成。默认的配置已经足够了，但如果你愿意，你也可以选择一些扩展。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:17
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:21
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:23
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:25
#, fuzzy
msgid "The solution is located in the `grpc-plain-text-quickstart` {quickstarts-tree-url}/grpc-plain-text-quickstart[directory]."
msgstr "该解决方案位于 `grpc-plain-text-quickstart` {quickstarts-treeurl}/grpc-plain-text-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:26
#, fuzzy, no-wrap
msgid "Configuring your project"
msgstr "配置你的项目"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:29
#, fuzzy
msgid "Edit the `pom.xml` file to add the Quarkus gRPC extension dependency (just under `<dependencies>`):"
msgstr "编辑 `pom.xml` 文件，添加Quarkus gRPC扩展的依赖关系（就在 `<dependencies>` 下）。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:36
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-grpc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:41
#, fuzzy
msgid "By default, the `quarkus-grpc` extension relies on the reactive programming model.  In this guide we will follow a reactive approach.  Under the `dependencies` section of your `pom.xml` file, make sure you have the RESTEasy Reactive dependency:"
msgstr "默认情况下， `quarkus-grpc` 扩展依赖于反应式编程模型。在本指南中，我们将遵循一个反应式方法。在你的 `pom.xml` 文件的依赖关系部分，确保你有RESTEasy Reactive的依赖关系。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:48
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:53
#, fuzzy
msgid "Make sure you have `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.  If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal.  Please note that no additional task/goal is required for the Gradle plugin."
msgstr "请确保你在你的 `pom.xml` 中启用了 `generate-code` 的目标 `quarkus-maven-plugin` 。如果你希望从不同的 `proto` 文件中生成代码用于测试，也要添加 `generate-code-tests` 目标。请注意，Gradle插件不需要额外的任务/目标。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:75
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus-plugin.version}</version>\n"
"            <extensions>true</extensions>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:79
#, fuzzy
msgid "With this configuration, you can put your service and message definitions in the `src/main/proto` directory.  `quarkus-maven-plugin` will generate Java files from your `proto` files."
msgstr "通过这种配置，你可以把你的服务和消息定义放在 `src/main/proto` 目录中。 `quarkus-maven-plugin` 将从你的 `proto` 文件中生成Java文件。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:85
#, fuzzy
msgid "`quarkus-maven-plugin` retrieves a version of `protoc` (the protobuf compiler) from Maven repositories. The retrieved version matches your operating system and CPU architecture.  If this retrieved version does not work in your context, you can either force to use a different OS classifier with `-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` (e.g. `osx-x86_64`).  You can also download the suitable binary and specify the location via `-Dquarkus.grpc.protoc-path=/path/to/protoc`."
msgstr " `quarkus-maven-plugin` 从Maven资源库中检索 （protobuf编译器）的版本。检索到的版本符合你的操作系统和CPU架构。如果检索到的版本在你的环境中不适用，你可以通过 （比如 ）强制使用不同的操作系统分类器。你也可以下载合适的二进制文件，并通过 指定位置。 `protoc` `-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` `osx-x86_64` `-Dquarkus.grpc.protoc-path=/path/to/protoc` "

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:89
#, fuzzy
msgid "Alternatively to using the `generate-code` goal of the `quarkus-maven-plugin`, you can use `protobuf-maven-plugin` to generate these files.  See the xref:protobuf-maven-plugin[Generating Java files from proto with protobuf-maven-plugin] section for more information."
msgstr "除了使用 `generate-code` 目标的 `quarkus-maven-plugin` ，你还可以使用 `protobuf-maven-plugin` 来生成这些文件，更多内容见 link:#Generating Java files from proto with protobuf-maven-plugin[[用protobuf-maven-plugin从proto生成Java文件]]"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:92
#, fuzzy
msgid "Let's start with a simple _Hello_ service.  Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr "让我们从一个简单的 _Hello_ 服务开始。创建具有以下内容的 `src/main/proto/helloworld.proto` 文件。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:96
#, no-wrap
msgid "syntax = \"proto3\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:100
#, no-wrap
msgid ""
"option java_multiple_files = true;\n"
"option java_package = \"io.quarkus.example\";\n"
"option java_outer_classname = \"HelloWorldProto\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:102
#, no-wrap
msgid "package helloworld;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:108
#, no-wrap
msgid ""
"// The greeting service definition.\n"
"service Greeter {\n"
"    // Sends a greeting\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:113
#, no-wrap
msgid ""
"// The request message containing the user's name.\n"
"message HelloRequest {\n"
"    string name = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:118
#, no-wrap
msgid ""
"// The response message containing the greetings\n"
"message HelloReply {\n"
"    string message = 1;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:121
#, fuzzy
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr "这个 `proto` 文件定义了一个简单的服务接口，其中有一个方法( `SayHello` )，以及交换的信息( `HelloRequest` ，包含名字， `HelloReply` ，包含问候信息)。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:123
msgid "Your `proto` file must not contain `option java_generic_services = true;`. https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=en#service[Generic services are deprecated] and are not compatible with Quarkus code generation plugins."
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:126
#, fuzzy
msgid "Before coding, we need to generate the classes used to implement and consume gRPC services.  In a terminal, run:"
msgstr "在编码之前，我们需要生成用于实现和消费gRPC服务的类。在一个终端中，运行。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:130
#, no-wrap
msgid "$ mvn compile\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:133
#, fuzzy
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr "一旦生成，你可以查看 `target/generated-sources/grpc` 目录。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:150
#, no-wrap
msgid ""
"target/generated-sources/grpc\n"
"└── io\n"
"    └── quarkus\n"
"        └── example\n"
"            ├── Greeter.java\n"
"            ├── GreeterBean.java\n"
"            ├── GreeterClient.java\n"
"            ├── GreeterGrpc.java\n"
"            ├── HelloReply.java\n"
"            ├── HelloReplyOrBuilder.java\n"
"            ├── HelloRequest.java\n"
"            ├── HelloRequestOrBuilder.java\n"
"            ├── HelloWorldProto.java\n"
"            └── MutinyGreeterGrpc.java\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:153
#, fuzzy
msgid "These are the classes we are going to use."
msgstr "这些是我们要使用的类。"

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:155
#, fuzzy, no-wrap
msgid "`proto` files with imports"
msgstr " `proto` 有进口的文件"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:159
#, fuzzy
msgid "Protocol Buffers specification provides a way to import `proto` files.  The Quarkus code generation mechanism lets you control the scope of dependencies to scan for possible imports by setting the `quarkus.generate-code.grpc.scan-for-imports` property to one of the following:"
msgstr "协议缓冲区规范提供了一种导入 `proto` 文件的方法。Quarkus代码生成机制让你控制依赖关系的范围，通过设置 `quarkus.generate-code.grpc.scan-for-imports` 属性为以下之一来扫描可能的导入。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:161
#, fuzzy
msgid "`all` - scan all the dependencies"
msgstr " `all` - 扫描所有的依赖性"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:162
#, fuzzy
msgid "`none` - don't scan the dependencies, use only what is defined in the `src/main/proto` or `src/test/proto`"
msgstr " `none` - 不要扫描依赖性，只使用在 或 `src/main/proto` `src/test/proto` "

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:163
#, fuzzy
msgid "`groupId1:artifactId1,groupId2:artifactId2` - scan only the dependencies with group id and artifact id in the list."
msgstr " `groupId1:artifactId1,groupId2:artifactId2` - 只扫描列表中具有组ID和工件ID的依赖关系。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:166
#, fuzzy
msgid "If not specified, the property is set to `com.google.protobuf:protobuf-java`.  To override it, set the `quarkus.generate-code.grpc.scan-for-imports` property in your application.properties to the desired value, e.g."
msgstr "如果没有指定，该属性将被设置为 `com.google.protobuf:protobuf-java` 。要覆盖它，在你的application.properties中把 `quarkus.generate-code.grpc.scan-for-imports` 属性设置为所需的值，例如："

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:170
#, no-wrap
msgid "quarkus.generate-code.grpc.scan-for-imports=all\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:172
#, fuzzy, no-wrap
msgid "`proto` files from dependencies"
msgstr " `proto` 依赖关系中的文件"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:174
#, fuzzy
msgid "In some cases, you may want to use `proto` files from a different project to generate the gRPC stubs. In this case:"
msgstr "在某些情况下，你可能想使用来自不同项目的 `proto` 文件来生成gRPC存根。在这种情况下。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:176
#, fuzzy
msgid "Add a dependency on the artifact that contains the proto file to your project"
msgstr "在你的项目中添加对包含proto文件的工件的依赖性"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:177
#, fuzzy
msgid "In `application.properties`, specify the dependencies you want to scan for proto files."
msgstr "在 `application.properties` 中，指定你要扫描的proto文件的依赖性。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:181
#, no-wrap
msgid "quarkus.generate-code.grpc.scan-for-proto=<groupId>:<artifactId>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:183
#, fuzzy
msgid "The value of the property may be `none`, which is the default value, or a comma separated list of `groupId:artifactId` coordinates."
msgstr "该属性的值可以是 `none` ，这是默认值，或者是一个逗号分隔的 `groupId:artifactId` 坐标列表。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:185
msgid "`option java_generic_services = true;` will automatically be removed from proto file containing it."
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:187
msgid "If the dependency contains a lot of proto files and you want to generate classes for only a subset of them, you can specify glob patterns per dependency. The path to match are relative to the path `src/main/resources` in the dependency."
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:189
#, fuzzy
msgid "For instance, having the following properties in your `application.properties`:"
msgstr "要做到这一点，首先在 `<properties>` 部分定义以下两个属性。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:194
#, no-wrap
msgid ""
"quarkus.generate-code.grpc.scan-for-proto-includes.\"<groupId>\\:<artifactId>\"=foo/**,bar/**,banana/a-proto.proto\n"
"quarkus.generate-code.grpc.scan-for-proto-excludes.\"<groupId>\\:<artifactId>\"=foo/private/**,bar/another-proto.proto\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:197
msgid "will include:"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:199
msgid "all files in the `foo/` directory and its subdirectories except for files in `foo/private/` and its subdirectories,"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:200
msgid "all files in the `bar/` directory and its subdirectories except for `another-proto.proto`."
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:201
msgid "`banana/a-proto.proto` file."
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:203
msgid "`:` character in the property keys must be escaped."
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:204
#, fuzzy, no-wrap
msgid "Different gRPC implementations / types"
msgstr "不同的gRPC实现/类型"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:207
#, fuzzy
msgid "Another thing to take note as well is that Quarkus' gRPC support currently includes 3 different types of gRPC usage:"
msgstr "另外需要注意的是，Quarkus的gRPC支持目前包括3种不同类型的gRPC用法。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:209
#, fuzzy
msgid "old Vert.x gRPC implementation with a separate gRPC server (default)"
msgstr "旧的Vert.x gRPC实现，有一个单独的gRPC服务器（默认）。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:210
#, fuzzy
msgid "new Vert.x gRPC implementation on top of the existing HTTP server"
msgstr "在现有的HTTP服务器上实现新的Vert.x gRPC"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:211
#, fuzzy
msgid "https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC] wrapper over https://github.com/grpc/grpc-java[grpc-java] with a separate Netty based gRPC server"
msgstr "link:https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS] 在 link:https://github.com/grpc/grpc-java[grpc-java] 上的 link:https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[gRPC] 包装器，有一个单独的基于Netty的gRPC服务器"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:213
#, fuzzy
msgid "Further docs explain how to enable and use each of them."
msgstr "进一步的文档解释了如何启用和使用它们中的每一个。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:214
#, fuzzy, no-wrap
msgid "Implementing a gRPC service"
msgstr "实现一个gRPC服务"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:217
#, fuzzy
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr "现在我们有了生成的类，让我们来实现我们的 _Hello_ 服务。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:221
#, fuzzy
msgid "With Quarkus, implementing a service requires to implement the generated service interface based on Mutiny, a Reactive Programming API integrated in Quarkus, and expose it as a CDI bean.  Learn more about Mutiny on the xref:mutiny-primer.adoc[Mutiny guide].  The service class must be annotated with the `@io.quarkus.grpc.GrpcService` annotation."
msgstr "在Quarkus中，实现一个服务需要实现基于Mutiny生成的服务接口，这是一个集成在Quarkus中的反应式编程API，并将其作为CDI bean公开。在 link:mutiny-primer.html[Mutiny指南] 中了解更多关于Mutiny的信息。服务类必须使用 `@io.quarkus.grpc.GrpcService` 注释。"

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:222
#, fuzzy, no-wrap
msgid "Implementing a service"
msgstr "实施一项服务"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:225
#, fuzzy
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr "创建具有以下内容的 `src/main/java/org/acme/HelloService.java` 文件。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:229
#: upstream/_guides/grpc-getting-started.adoc:256
#: upstream/_guides/grpc-getting-started.adoc:306
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:235
#, no-wrap
msgid ""
"import io.quarkus.example.Greeter;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcService;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:238
#, no-wrap
msgid ""
"@GrpcService <1>\n"
"public class HelloService implements Greeter {  <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:246
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HelloReply> sayHello(HelloRequest request) { <3>\n"
"        return Uni.createFrom().item(() ->\n"
"                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:248
#: upstream/_guides/grpc-getting-started.adoc:276
#, fuzzy
msgid "Expose your implementation as a bean."
msgstr "将你的实现作为一个bean公开。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:249
#, fuzzy
msgid "Implement the generated service interface."
msgstr "实现生成的服务接口。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:250
#: upstream/_guides/grpc-getting-started.adoc:278
#, fuzzy
msgid "Implement the methods defined in the service definition (here we have a single method)."
msgstr "实现服务定义中定义的方法（这里我们有一个单一的方法）。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:252
#, fuzzy
msgid "You can also use the default gRPC API instead of Mutiny:"
msgstr "你也可以使用默认的gRPC API而不是Mutiny。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:262
#, no-wrap
msgid ""
"import io.grpc.stub.StreamObserver;\n"
"import io.quarkus.example.GreeterGrpc;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:265
#, no-wrap
msgid ""
"@GrpcService <1>\n"
"public class HelloService extends GreeterGrpc.GreeterImplBase { <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:274
#, no-wrap
msgid ""
"    @Override\n"
"    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) { <3>\n"
"        String name = request.getName();\n"
"        String message = \"Hello \" + name;\n"
"        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build()); <4>\n"
"        responseObserver.onCompleted(); <5>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:277
#, fuzzy
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr "扩展了 `ImplBase` 类。这是一个生成的类。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:279
#, fuzzy
msgid "Build and send the response."
msgstr "建立并发送响应。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:280
#, fuzzy
msgid "Close the response."
msgstr "关闭响应。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:285
#, fuzzy
msgid "If your service implementation logic is blocking (use blocking I/O for example), annotate your method with `@Blocking`.  The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr "如果你的服务实现逻辑是阻塞的（例如使用阻塞的I/O），请用 `@Blocking` 来注释你的方法。 `io.smallrye.common.annotation.Blocking` 注解指示框架在一个工作线程而不是I/O线程（事件循环）上调用被注释的方法。"

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:286
#, fuzzy, no-wrap
msgid "The gRPC server"
msgstr "gRPC服务器"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:290
#, fuzzy
msgid "The services are _served_ by a _server_.  Available services (_CDI beans_) are automatically registered and exposed."
msgstr "服务由一个 _服务器_ _提供_ 。可用的服务 _（CDI豆_ ）被自动注册和公开。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:293
#, fuzzy
msgid "By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS) when running normally, and `localhost:9001` for tests."
msgstr "默认情况下，服务器被暴露在 `localhost:9000` ，正常运行时使用 _纯文本_ （所以没有TLS），测试时使用 `localhost:9001` 。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:295
#, fuzzy
msgid "Run the application using: `mvn quarkus:dev`."
msgstr "运行应用程序，使用： `mvn quarkus:dev` 。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:296
#, fuzzy, no-wrap
msgid "Consuming a gRPC service"
msgstr "消耗一个gRPC服务"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:300
#, fuzzy
msgid "In this section, we are going to consume the service we expose.  To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr "在本节中，我们将消费我们所暴露的服务。为了简化，我们将从同一个应用程序中消费服务，这在现实世界中是没有意义的。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:302
#, fuzzy
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr "打开现有的 `org.acme.ExampleResource` 类，并编辑内容，成为。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:311
#, no-wrap
msgid ""
"import io.quarkus.example.Greeter;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcClient;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:316
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:319
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:322
#, no-wrap
msgid ""
"    @GrpcClient                               // <1>\n"
"    Greeter hello;                            // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:328
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:336
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{name}\")\n"
"    public Uni<String> hello(String name) {\n"
"        return hello.sayHello(HelloRequest.newBuilder().setName(name).build())\n"
"                .onItem().transform(helloReply -> helloReply.getMessage());  // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:338
#, fuzzy
msgid "Inject the service and configure its name. The name is used in the application configuration. If not specified then the field name is used instead: `hello` in this particular case."
msgstr "注入服务并配置其名称。该名称在应用程序配置中使用。如果没有指定，则使用字段名代替： `hello` 在这个特定的情况下。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:339
#, fuzzy
msgid "Use the generated service interface based on Mutiny API."
msgstr "使用基于Mutiny API生成的服务接口。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:340
#, fuzzy
msgid "Invoke the service."
msgstr "调用该服务。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:343
#, fuzzy
msgid "We need to configure the application to indicate where the `hello` service is found.  In the `src/main/resources/application.properties` file, add the following property:"
msgstr "我们需要配置应用程序，以表明在哪里可以找到 `hello` 服务。在 `src/main/resources/application.properties` 文件中，添加以下属性。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:347
#, no-wrap
msgid "quarkus.grpc.clients.hello.host=localhost\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:350
#, fuzzy
msgid "`hello` is the name used in the `@GrpcClient` annotation."
msgstr " `hello` 是 注释中使用的名称。 `@GrpcClient` "

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:351
#, fuzzy
msgid "`host` configures the service host (here it's localhost)."
msgstr " `host` 配置服务主机（这里是localhost）。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:353
#, fuzzy
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr "然后，在浏览器中打开 http://localhost:8080/hello/quarkus ，你应该得到 `Hello quarkus` !"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:354
#, fuzzy, no-wrap
msgid "Packaging the application"
msgstr "包装应用程序"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:358
#, fuzzy
msgid "Like any other Quarkus applications, you can package it with: `mvn package`.  You can also package the application into a native executable with: `mvn package -Pnative`."
msgstr "像其他Quarkus应用程序一样，你可以将其打包。 `mvn package` .你也可以用以下方式将该应用程序打包成一个本地可执行文件。 `mvn package -Pnative` ."

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:360
#, fuzzy, no-wrap
msgid "Generating Java files from proto with protobuf-maven-plugin"
msgstr "用protobuf-maven-plugin从proto生成Java文件"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:364
#, fuzzy
msgid "Alternatively to using Quarkus code generation to generate stubs for `proto` files, you can also use `protobuf-maven-plugin`."
msgstr "除了使用Quarkus代码生成来生成 `proto` 文件的存根外，你还可以使用 `protobuf-maven-plugin` 。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:366
#, fuzzy
msgid "To do it, first define the 2 following properties in the `<properties>` section:"
msgstr "要做到这一点，首先在 `<properties>` 部分定义以下两个属性。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:371
#, no-wrap
msgid ""
"<grpc.version>{grpc-version}</grpc.version>\n"
"<protoc.version>{protoc-version}</protoc.version>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:374
#, fuzzy
msgid "They configure the gRPC version and the `protoc` version."
msgstr "他们配置了gRPC版本和 `protoc` 版本。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:376
#, fuzzy
msgid "Then, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration."
msgstr "然后，在 `build` 部分添加 `os-maven-plugin` 扩展和 `protobuf-maven-plugin` 配置。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:387
#, no-wrap
msgid ""
"<build>\n"
"    <extensions>\n"
"        <extension>\n"
"            <groupId>kr.motd.maven</groupId>\n"
"            <artifactId>os-maven-plugin</artifactId>\n"
"            <version>${os-maven-plugin-version}</version>\n"
"        </extension>\n"
"    </extensions>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:424
#, no-wrap
msgid ""
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>org.xolstice.maven.plugins</groupId>\n"
"            <artifactId>protobuf-maven-plugin</artifactId>      // <1>\n"
"            <version>${protobuf-maven-plugin-version}</version>\n"
"            <configuration>\n"
"                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}</protocArtifact> // <2>\n"
"                <pluginId>grpc-java</pluginId>\n"
"                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n"
"                <protocPlugins>\n"
"                    <protocPlugin>\n"
"                        <id>quarkus-grpc-protoc-plugin</id>\n"
"                        <groupId>io.quarkus</groupId>\n"
"                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n"
"                        <version>{quarkus-version}</version>\n"
"                        <mainClass>io.quarkus.grpc.protoc.plugin.MutinyGrpcGenerator</mainClass>\n"
"                    </protocPlugin>\n"
"                </protocPlugins>\n"
"            </configuration>\n"
"            <executions>\n"
"                <execution>\n"
"                    <id>compile</id>\n"
"                    <goals>\n"
"                        <goal>compile</goal>\n"
"                        <goal>compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"                <execution>\n"
"                    <id>test-compile</id>\n"
"                    <goals>\n"
"                        <goal>test-compile</goal>\n"
"                        <goal>test-compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:428
#, no-wrap
msgid ""
"        <!-- ... -->\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:430
#, fuzzy
msgid "The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files)."
msgstr " `protobuf-maven-plugin` ，从你的gRPC服务定义中生成存根类（ `proto` 文件）。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:432
#, fuzzy
msgid "The class generation uses a tool named `protoc`, which is OS-specific.  That's why we use the `os-maven-plugin` to target the executable compatible with the operating system."
msgstr "类的生成使用一个名为 `protoc` 的工具，它是针对操作系统的。这就是为什么我们使用 `os-maven-plugin` ，以与操作系统兼容的可执行文件为目标。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:434
#, fuzzy
msgid "This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience."
msgstr "这个配置指示 `protobuf-maven-plugin` ，使用Mutiny生成默认的gRPC类和类，以适应Quarkus开发经验。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:436
#, fuzzy
msgid "When using `protobuf-maven-plugin`, instead of the `quarkus-maven-plugin`, every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`)."
msgstr "当使用 `protobuf-maven-plugin` ，而不是 `quarkus-maven-plugin` ，每次更新 `proto` 文件时，你需要重新生成类（使用 `mvn compile` ）。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:438
#, fuzzy, no-wrap
msgid "gRPC classes from dependencies"
msgstr "来自依赖关系的gRPC类"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:442
msgid "When gRPC classes - the classes generated from `proto` files - are in a dependency of the application, then the dependency needs a Jandex index.  The `jandex-maven-plugin` can be used to create a Jandex index. More information on this topic can be found in the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:462
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>io.smallrye</groupId>\n"
"            <artifactId>jandex-maven-plugin</artifactId>\n"
"            <version>{jandex-version}</version>\n"
"            <executions>\n"
"                <execution>\n"
"                <id>make-index</id>\n"
"                <goals>\n"
"                    <goal>jandex</goal>\n"
"                </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""
