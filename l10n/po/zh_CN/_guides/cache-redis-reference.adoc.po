# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-23 11:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/cache-redis-reference.adoc:6
#, fuzzy, no-wrap
msgid "Redis Cache"
msgstr "Redis缓存"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:14
#, fuzzy
msgid "By default, Quarkus Cache uses Caffeine as backend.  It's possible to use Redis instead."
msgstr "默认情况下，Quarkus Cache使用Caffeine作为后端。也可以用Redis代替。"

#. type: Title ==
#: upstream/_guides/cache-redis-reference.adoc:17
#, fuzzy, no-wrap
msgid "Redis as cache backend"
msgstr "Redis作为缓存后端"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:20
#, fuzzy
msgid "When using Redis as the backend for Quarkus cache, each cached item will be stored in Redis:"
msgstr "当使用Redis作为Quarkus缓存的后端时，每个缓存的项目都将存储在Redis中："

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:22
#, fuzzy
msgid "The backend uses the _<default>_ Redis client (if not configured otherwise), so make sure it's configured (or use the xref:redis-dev-services.adoc[redis dev service])"
msgstr "后台使用 _<默认>_ Redis客户端（如果没有另行配置），所以要确保它已被配置（或使用 link:redis-dev-services.html[Redis开发服务] ）。"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:23
#, fuzzy
msgid "the Redis key is built as follows: `cache:$cache-name:$cache-key`, where `cache-key` is the key the application uses."
msgstr "Redis密钥的构建方法如下： `cache:$cache-name:$cache-key` ，其中 `cache-key` 是应用程序使用的密钥。"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:24
#, fuzzy
msgid "the value is encoded to JSON if needed"
msgstr "如果需要，该值将被编码为JSON。"

#. type: Title ==
#: upstream/_guides/cache-redis-reference.adoc:26
#, fuzzy, no-wrap
msgid "Use the Redis backend"
msgstr "使用Redis后端"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:29
#, fuzzy
msgid "First, you need to add the `quarkus-redis-cache` extension to your project:"
msgstr "首先，你需要在你的项目中添加 `quarkus-redis-cache` 扩展："

#. type: Block title
#: upstream/_guides/cache-redis-reference.adoc:31
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:37
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-redis-cache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/cache-redis-reference.adoc:40
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:43
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-redis-cache\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:46
#, fuzzy
msgid "Then, use the `@CacheResult` and others cache annotations as explained in the xref:cache.adoc[Quarkus Cache guide]:"
msgstr "然后，按照 link:cache.html[Quarkus Cache指南] 中的解释，使用 `@CacheResult` 和其他缓存注释："

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:60
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{keyElement1}/{keyElement2}/{keyElement3}\")\n"
"@CacheResult(cacheName = \"expensiveResourceCache\")\n"
"public ExpensiveResponse getExpensiveResponse(@PathParam(\"keyElement1\") @CacheKey String keyElement1,\n"
"        @PathParam(\"keyElement2\") @CacheKey String keyElement2, @PathParam(\"keyElement3\") @CacheKey String keyElement3,\n"
"        @QueryParam(\"foo\") String foo) {\n"
"    invocations.incrementAndGet();\n"
"    ExpensiveResponse response = new ExpensiveResponse();\n"
"    response.setResult(keyElement1 + \" \" + keyElement2 + \" \" + keyElement3 + \" too!\");\n"
"    return response;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:64
#, no-wrap
msgid ""
"@POST\n"
"@CacheInvalidateAll(cacheName = \"expensiveResourceCache\")\n"
"public void invalidateAll() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:66
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cache-redis-reference.adoc:69
#, fuzzy, no-wrap
msgid "Configure the Redis backend"
msgstr "配置Redis后端"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:73
#, fuzzy
msgid "The Redis backend uses the `<default>` Redis client.  See the xref:redis-reference.adoc[Redis reference] to configure the access to Redis."
msgstr "Redis后端使用 `<default>` Redis客户端。请参阅 link:redis-reference.html[Redis参考] ，以配置对Redis的访问。"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:75
#, fuzzy
msgid "In dev mode, you can use the xref:redis-dev-services.adoc[Redis Dev Service]."
msgstr "在开发模式下，你可以使用 link:redis-dev-services.html[Redis开发服务] 。"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:77
#, fuzzy
msgid "If you want to use another Redis for your cache, configure the `client-name` as follows:"
msgstr "如果你想使用另一个Redis作为你的缓存，请按以下方式配置 `client-name` ："

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:81
#, no-wrap
msgid "quarkus.cache.redis.client-name=my-redis-for-cache\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:87
#, fuzzy
msgid "When writing to Redis or reading from Redis, Quarkus needs to know the type.  Indeed, the objects need to be serialized and deserialized.  For that purpose, you may need to configure type (class names) of the key and value you want to cache.  At build time, Quarkus tries to deduce the types from the application code, but that decision can be overridden using:"
msgstr "当写入Redis或从Redis读取时，Quarkus需要知道其类型。事实上，这些对象需要被序列化和反序列化。为此，你可能需要配置你想要缓存的键和值的类型（类名）。在构建时，Quarkus试图从应用程序代码中推断出类型，但这一决定可以通过以下方式来覆盖："

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:93
#, no-wrap
msgid ""
"# Default configuration\n"
"quarkus.cache.redis.key-type=java.lang.String\n"
"quarkus.cache.redis.value-type=org.acme.Person\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:97
#, no-wrap
msgid ""
"# Configuration for `expensiveResourceCache`\n"
"quarkus.cache.redis.expensiveResourceCache.key-type=java.lang.String\n"
"quarkus.cache.redis.expensiveResourceCache.value-type=org.acme.Supes\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:100
#, fuzzy
msgid "You can also configure the time to live of the cached entries:"
msgstr "你还可以配置缓存条目的生存时间："

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:105
#, no-wrap
msgid ""
"# Default configuration\n"
"quarkus.cache.redis.expire-after-write=10s\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:108
#, no-wrap
msgid ""
"# Configuration for `expensiveResourceCache`\n"
"quarkus.cache.redis.expensiveResourceCache.expire-after-write=1h\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:112
#, fuzzy
msgid "If the `expire-after-write` is not configured, the entry won't be evicted.  You would need to invalidate the values using the `@CacheInvalidateAll` or `@CacheInvalidate` annotations."
msgstr "如果没有配置 `ttl` ，该条目就不会被驱逐。你将需要使用 `@CacheInvalidateAll` 或 `@CacheInvalidate` 注释来使这些值无效。"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:114
#, fuzzy
msgid "The following table lists the supported properties:"
msgstr "下表列出了支持的属性："

#. type: Title ==
#: upstream/_guides/cache-redis-reference.adoc:117
#, fuzzy, no-wrap
msgid "Configure the Redis key"
msgstr "配置Redis密钥"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:121
#, fuzzy
msgid "By default, the Redis backend stores the entry using the following keys: `cache:$cache-name:$cache-key`, where `cache-key` is the key the application uses.  So, you can find all the entries for a single cache using the Redis `KEYS` command: `KEYS cache:$cache-name:*`"
msgstr "默认情况下，Redis后端使用以下键来存储条目： `cache:$cache-name:$cache-key` ，其中 `cache-key` 是应用程序使用的键。因此，你可以使用Redis `KEYS` 命令找到单个缓存的所有条目： `KEYS cache:$cache-name:*` "

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:123
#, fuzzy
msgid "The `cache:$cache-name:` segment can be configured using the `prefix` property:"
msgstr " `cache:$cache-name:` 段可以使用 `prefix` 属性进行配置："

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:129
#, no-wrap
msgid ""
"# Default configuration\n"
"quarkus.cache.redis.prefix=my-cache\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:132
#, no-wrap
msgid ""
"# Configuration for `expensiveResourceCache`\n"
"quarkus.cache.redis.expensiveResourceCache.prefix=my-expensive-cache\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:135
#, fuzzy
msgid "In these cases, you can find all the keys managed by the default cache using `KEYS my-cache:*`, and all the keys managed by the `expensiveResourceCache` cache using: `KEYS my-expensive-cache:*`."
msgstr "在这些情况下，你可以用 `KEYS my-cache:*` 找到默认缓存管理的所有密钥，用 `expensiveResourceCache` 缓存管理的所有密钥： `KEYS my-expensive-cache:*` 。"

#. type: Title ==
#: upstream/_guides/cache-redis-reference.adoc:136
#, fuzzy, no-wrap
msgid "Enable optimistic locking"
msgstr "启用乐观的锁定"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:140
#, fuzzy
msgid "The access to the cache can be _direct_ or use https://redis.io/docs/manual/transactions/#optimistic-locking-using-check-and-set[optimistic locking].  By default, optimistic locking is disabled."
msgstr "对缓存的访问可以是 _直接的_ ，也可以使用 link:https://redis.io/docs/manual/transactions/#optimistic-locking-using-check-and-set[乐观的锁定] 。默认情况下，乐观锁被禁用。"

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:142
#, fuzzy
msgid "You can enable optimistic locking using:"
msgstr "你可以通过以下方式启用乐观锁："

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:146
#, no-wrap
msgid ""
"# Default configuration\n"
"quarkus.cache.redis.use-optimistic-locking=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cache-redis-reference.adoc:149
#, no-wrap
msgid ""
"# Configuration for `expensiveResourceCache`\n"
"quarkus.cache.redis.expensiveResourceCache.use-optimistic-locking=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cache-redis-reference.adoc:151
msgid "When used, the key is _watched_ and the _SET_ command is executed in a transaction (`MULTI/EXEC`)."
msgstr ""
