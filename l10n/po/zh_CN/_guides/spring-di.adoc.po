# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-26 15:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/spring-di.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus Extension for Spring DI API"
msgstr "Quarkus对Spring DI API的扩展"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:12
#, fuzzy
msgid "While users are encouraged to use CDI annotations for injection, Quarkus provides a compatibility layer for Spring dependency injection in the form of the `spring-di` extension."
msgstr "虽然我们鼓励用户使用CDI注解进行注入，但Quarkus以 `spring-di` 扩展的形式为Spring依赖注入提供了一个兼容层。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:14
#, fuzzy
msgid "This guide explains how a Quarkus application can leverage the well known Dependency Injection annotations included in the Spring Framework."
msgstr "本指南解释了Quarkus应用程序如何利用众所周知的Spring框架中的依赖注入注解。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:15
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:19
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:23
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:25
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:27
#, fuzzy
msgid "The solution is located in the `spring-di-quickstart` {quickstarts-tree-url}/spring-di-quickstart[directory]."
msgstr "该解决方案位于 `spring-di-quickstart` {quickstarts-treeurl}/spring-di-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:28
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:31
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:37
#, fuzzy
msgid "This command generates a project which imports the `spring-di` extension."
msgstr "该命令生成了一个导入 `spring-di` 扩展的项目。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:40
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `spring-di` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `spring-di` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:45
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/spring-di.adoc:47
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:53
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-spring-di</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/spring-di.adoc:56
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:59
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-spring-di\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-di.adoc:61
#, fuzzy, no-wrap
msgid "Add beans using Spring annotations"
msgstr "使用Spring注解添加Bean"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:64
#, fuzzy
msgid "Let's proceed to create some beans using various Spring annotations."
msgstr "让我们继续使用各种Spring注释来创建一些Bean。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:67
#, fuzzy
msgid "First we will create a `StringFunction` interface that some of our beans will implement and which will be injected into another bean later on.  Create a `src/main/java/org/acme/spring/di/StringFunction.java` file and set the following content:"
msgstr "首先，我们将创建一个 `StringFunction` 接口，我们的一些Bean将实现这个接口，并在以后被注入另一个Bean中。创建一个 `src/main/java/org/acme/spring/di/StringFunction.java` 文件并设置以下内容。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:71 upstream/_guides/spring-di.adoc:86
#: upstream/_guides/spring-di.adoc:109 upstream/_guides/spring-di.adoc:137
#: upstream/_guides/spring-di.adoc:159 upstream/_guides/spring-di.adoc:203
#, no-wrap
msgid "package org.acme.spring.di;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:73
#, no-wrap
msgid "import java.util.function.Function;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:75
#, no-wrap
msgid "public interface StringFunction extends Function<String, String> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:77 upstream/_guides/spring-di.adoc:252
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:82
#, fuzzy
msgid "With the interface in place, we will add an `AppConfiguration` class which will use the Spring's Java Config style for defining a bean.  It will be used to create a `StringFunction` bean that will capitalize the text passed as parameter.  Create a `src/main/java/org/acme/spring/di/AppConfiguration.java` file with the following content:"
msgstr "有了这个接口，我们将添加一个 `AppConfiguration` ，这个类将使用Spring的Java配置风格来定义一个bean。它将被用来创建一个 `StringFunction` Bean，它将把作为参数传递的文本大写。创建一个 `src/main/java/org/acme/spring/di/AppConfiguration.java` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:89
#, no-wrap
msgid ""
"import org.springframework.context.annotation.Bean;\n"
"import org.springframework.context.annotation.Configuration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:92
#, no-wrap
msgid ""
"@Configuration\n"
"public class AppConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:98
#, no-wrap
msgid ""
"    @Bean(name = \"capitalizeFunction\")\n"
"    public StringFunction capitalizer() {\n"
"        return String::toUpperCase;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:101
#, fuzzy
msgid "As a Spring developer, you might be tempted to add the `@ComponentScan` annotation in order to define specific packages to scan for additional beans. Do note that `@ComponentScan` is entirely unnecessary since Quarkus performs xref:cdi-reference.adoc#bean_discovery[bean discovery] only in `annotated` mode with no visibility boundaries. Moreover, note that the bean discovery in Quarkus happens at build time.  In the same vein, Quarkus does not support the Spring `@Import` annotation."
msgstr "作为一个Spring开发者，你可能会想添加 `@ComponentScan` 注释，以便定义特定的包来扫描额外的Bean。请注意， `@ComponentScan` 是完全不必要的，因为Quarkus只在 `annotated` 模式下执行 link:cdi-reference.html#bean_discovery[Bean发现] ，没有可见性边界。此外，请注意Quarkus的Bean发现是在构建时进行的。同样地，Quarkus不支持Spring `@Import` 注释。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:105
#, fuzzy
msgid "Now we define another bean that will implement `StringFunction` using Spring's stereotype annotation style.  This bean will effectively be a no-op bean that simply returns the input as is.  Create a `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` file and set the following content:"
msgstr "现在我们定义另一个Bean，它将使用Spring的定型注解风格实现 `StringFunction` 。这个Bean将有效地成为一个无操作的Bean，它只是按原样返回输入。创建一个 `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` 文件并设置以下内容。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:111
#, no-wrap
msgid "import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:114
#, no-wrap
msgid ""
"@Component(\"noopFunction\")\n"
"public class NoOpSingleStringFunction implements StringFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:120
#, no-wrap
msgid ""
"    @Override\n"
"    public String apply(String s) {\n"
"        return s;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:124
#, fuzzy
msgid "Quarkus also provides support for injecting configuration values using Spring's `@Value` annotation.  To see that in action, first edit the `src/main/resources/application.properties` with the following content:"
msgstr "Quarkus还提供了对使用Spring的 `@Value` 注释注入配置值的支持。要看到它的作用，首先编辑带有以下内容的 `src/main/resources/application.properties` 。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:129
#, no-wrap
msgid ""
"# Your configuration properties\n"
"greeting.message = hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:132
#, fuzzy
msgid "Next create a new Spring bean in `src/main/java/org/acme/spring/di/MessageProducer.java` with the following content:"
msgstr "接下来在 `src/main/java/org/acme/spring/di/MessageProducer.java` ，创建一个新的Spring Bean，内容如下。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:140
#, no-wrap
msgid ""
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:143
#, no-wrap
msgid ""
"@Service\n"
"public class MessageProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:146
#, no-wrap
msgid ""
"    @Value(\"${greeting.message}\")\n"
"    String message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:151
#, no-wrap
msgid ""
"    public String getPrefix() {\n"
"        return message;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:155
#, fuzzy
msgid "The final bean we will create ties together all the previous beans.  Create a `src/main/java/org/acme/spring/di/GreeterBean.java` file and copy the following content:"
msgstr "我们将创建的最后一个Bean将之前所有的Bean联系在一起。创建一个 `src/main/java/org/acme/spring/di/GreeterBean.java` 文件并复制以下内容。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:164
#, no-wrap
msgid ""
"import org.springframework.beans.factory.annotation.Autowired;\n"
"import org.springframework.beans.factory.annotation.Qualifier;\n"
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:167
#, no-wrap
msgid ""
"@Component\n"
"public class GreeterBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:169
#, no-wrap
msgid "    private final MessageProducer messageProducer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:173
#, no-wrap
msgid ""
"    @Autowired\n"
"    @Qualifier(\"noopFunction\")\n"
"    StringFunction noopStringFunction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:177
#, no-wrap
msgid ""
"    @Autowired\n"
"    @Qualifier(\"capitalizeFunction\")\n"
"    StringFunction capitalizerStringFunction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:180
#, no-wrap
msgid ""
"    @Value(\"${greeting.suffix:!}\")\n"
"    String suffix;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:184
#, no-wrap
msgid ""
"    public GreeterBean(MessageProducer messageProducer) {\n"
"        this.messageProducer = messageProducer;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:190
#, no-wrap
msgid ""
"    public String greet(String name) {\n"
"        final String initialValue = messageProducer.getPrefix() + \" \" + name + suffix;\n"
"        return noopStringFunction.andThen(capitalizerStringFunction).apply(initialValue);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:194
#, fuzzy
msgid "In the code above, we see that both field injection and constructor injection are being used (note that constructor injection does not need the `@Autowired` annotation since there is a single constructor).  Furthermore, the `@Value` annotation on `suffix` has also a default value defined, which in this case will be used since we have not defined `greeting.suffix` in `application.properties`."
msgstr "在上面的代码中，我们看到字段注入和构造函数注入都被使用了（注意，构造函数注入不需要 `@Autowired` 注释，因为只有一个构造函数）。此外， `@Value` 注解中的 `suffix` 也定义了一个默认值，在这种情况下，它将被使用，因为我们没有在 `application.properties` 中定义 `greeting.suffix` 。"

#. type: Title ===
#: upstream/_guides/spring-di.adoc:196
#, fuzzy, no-wrap
msgid "Create the Jakarta REST resource"
msgstr "创建JAX-RS资源"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:199
#, fuzzy
msgid "Create the `src/main/java/org/acme/spring/di/GreeterResource.java` file with the following content:"
msgstr "创建具有以下内容的 `src/main/java/org/acme/spring/di/GreeterResource.java` 文件。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:205
#, no-wrap
msgid "import org.springframework.beans.factory.annotation.Autowired;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:210
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:213
#, no-wrap
msgid ""
"@Path(\"/greeting\")\n"
"public class GreeterResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:216
#, no-wrap
msgid ""
"    @Autowired\n"
"    GreeterBean greeterBean;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:223
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return greeterBean.greet(\"world\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-di.adoc:225
#, fuzzy, no-wrap
msgid "Update the test"
msgstr "更新测试"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:229
#, fuzzy
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/spring/di/GreetingResourceTest.java` file and change the content of the `testHelloEndpoint` method to:"
msgstr "我们还需要更新功能测试，以反映对端点所作的改变。编辑 `src/test/java/org/acme/spring/di/GreetingResourceTest.java` 文件，将 `testHelloEndpoint` 方法的内容改为："

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:235
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:238
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:241
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:250
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"            .when().get(\"/greeting\")\n"
"            .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"HELLO WORLD!\"));\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-di.adoc:254
#, fuzzy, no-wrap
msgid "Package and run the application"
msgstr "包装和运行应用程序"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:257
#, fuzzy
msgid "Run the application with:"
msgstr "用以下方式运行应用程序。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:261
#, fuzzy
msgid "Open your browser to http://localhost:8080/greeting."
msgstr "打开你的浏览器， http://localhost:8080/greeting "

#. type: Plain text
#: upstream/_guides/spring-di.adoc:263
#, fuzzy
msgid "The result should be: `HELLO WORLD!`."
msgstr "结果应该是： `HELLO WORLD!` 。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:264
#, fuzzy, no-wrap
msgid "Run the application as a native"
msgstr "作为一个本地的应用程序运行"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:267
#, fuzzy
msgid "You can of course create a native image using instructions similar to xref:building-native-image.adoc[this] guide."
msgstr "当然，你可以使用与 link:building-native-image.html[本] 指南类似的说明创建一个本地图像。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:268
#, fuzzy, no-wrap
msgid "Important Technical Note"
msgstr "重要技术说明"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:276
#, fuzzy
msgid "Please note that the Spring support in Quarkus does not start a Spring Application Context nor are any Spring infrastructure classes run.  Spring classes and annotations are only used for reading metadata and / or are used as user code method return types or parameter types.  What that means for end users, is that adding arbitrary Spring libraries will not have any effect. Moreover, Spring infrastructure classes (like `org.springframework.beans.factory.config.BeanPostProcessor` , `org.springframework.context.ApplicationContext` for example) will not be executed.  Regarding the dependency injection in particular, Quarkus uses a Dependency Injection mechanism (called ArC) based on the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0] specification. If you want to learn more about it, we recommend you to read the xref:cdi.adoc[Quarkus introduction to CDI] and the xref:cdi-reference.adoc#arc-configuration-reference[CDI reference guide] The various Spring Boot test features are not supported by Quarkus. For testing purposes, please, check the xref:getting-started-testing.adoc[Quarkus testing guide]."
msgstr "请注意，Quarkus中的Spring支持并没有启动Spring应用上下文，也没有运行任何Spring基础类。Spring类和注解只用于读取元数据和/或作为用户代码的方法返回类型或参数类型。对于最终用户来说，这意味着添加任意的Spring库都不会有任何影响。此外，Spring基础架构类（例如 `org.springframework.beans.factory.config.BeanPostProcessor` , `org.springframework.context.ApplicationContext` ）将不会被执行。特别是关于依赖注入，Quarkus使用了基于 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Java 2.0] 规范 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[的上下文和依赖注入] 机制（称为ArC）。如果你想了解更多，我们建议你阅读 link:cdi.html[Quarkus的CDI介绍] 和 link:cdi-reference.html#arc-configuration-reference[CDI参考指南] 。 Quarkus不支持Spring Boot的各种测试功能。出于测试目的，请查看 link:getting-started-testing.html[Quarkus的测试指南] 。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:278
#, fuzzy
msgid "Some known limitations:"
msgstr "一些已知的限制："

#. type: Plain text
#: upstream/_guides/spring-di.adoc:280
#, fuzzy
msgid "In case of ambiguity, Spring uses a fallback match of the bean name against the injection point field name or parameter name."
msgstr "在不明确的情况下，Spring使用Bean名称与注入点字段名称或参数名称的后备匹配。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:281
#, fuzzy
msgid "This is not supported, thus `@Named` annotation needs to be used to explicitly solve any ambiguity."
msgstr "这不被支持，因此需要使用 `@Named` 注释来明确解决任何歧义。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:282
#, fuzzy
msgid "Injecting all beans of a particular type is limited to `List<Bean>`. Injecting `Set<Bean>` or `Map<String, Bean>` is not supported."
msgstr "注入某一特定类型的所有豆子仅限于 `List<Bean>` 。不支持注入 `Set<Bean>` 或 `Map<String, Bean>` 。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:283
#, fuzzy
msgid "Optional injection using `@Autowired(required=false)` is not supported. Use `javax.enterprise.inject.Instance` and then test `Instance.isResolvable()`."
msgstr "不支持使用 `@Autowired(required=false)` 的可选注入。使用 `javax.enterprise.inject.Instance` ，然后测试 `Instance.isResolvable()` 。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:284
#, fuzzy
msgid "`@Conditional` is ignored, since dependency injection gets resolved at build time. An alternative is to use xref:cdi-reference.adoc#enable_build_profile[conditional build profiles]."
msgstr " `@Conditional` 会被忽略，因为依赖注入会在构建时被解决。另一种方法是使用 link:cdi-reference.html#enable_build_profile[有条件的构建配置文件] 。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:285
#, fuzzy, no-wrap
msgid "Conversion Table"
msgstr "转换表"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:288
#, fuzzy
msgid "The following table shows how Spring DI annotations can be converted to CDI and / or MicroProfile annotations."
msgstr "下表显示了Spring DI注解如何被转换为CDI和/或MicroProfile注解。"

#. type: Table
#: upstream/_guides/spring-di.adoc:290
#, fuzzy, no-wrap
msgid "Spring"
msgstr "春天"

#. type: Table
#: upstream/_guides/spring-di.adoc:290
#, fuzzy, no-wrap
msgid "CDI / MicroProfile"
msgstr "CDI / MicroProfile"

#. type: Table
#: upstream/_guides/spring-di.adoc:292
#, fuzzy, no-wrap
msgid "Comments"
msgstr "评论"

#. type: Table
#: upstream/_guides/spring-di.adoc:293
#, fuzzy, no-wrap
msgid "@Autowired"
msgstr "@自动连线"

#. type: Table
#: upstream/_guides/spring-di.adoc:294
#, fuzzy, no-wrap
msgid "@Inject"
msgstr "@Inject"

#. type: Table
#: upstream/_guides/spring-di.adoc:296
#, fuzzy, no-wrap
msgid "If the type is `java.util.List`, the `io.quarkus.arc.All` qualifier is added."
msgstr "如果类型是 `java.util.List` ，则会添加 `io.quarkus.arc.All` 修饰语。"

#. type: Table
#: upstream/_guides/spring-di.adoc:297
#, fuzzy, no-wrap
msgid "@Qualifier"
msgstr "@Qualifier"

#. type: Table
#: upstream/_guides/spring-di.adoc:298
#, fuzzy, no-wrap
msgid "@Named"
msgstr "@Named"

#. type: Table
#: upstream/_guides/spring-di.adoc:301
#, fuzzy, no-wrap
msgid "@Value"
msgstr "@价值"

#. type: Table
#: upstream/_guides/spring-di.adoc:302
#, fuzzy, no-wrap
msgid "@ConfigProperty"
msgstr "@ConfigProperty"

#. type: Table
#: upstream/_guides/spring-di.adoc:304
#, fuzzy, no-wrap
msgid "@ConfigProperty doesn't support an expression language the way @Value does, but makes the typical use cases much easier to handle"
msgstr "@ConfigProperty并不像@Value那样支持表达式语言，但它使典型的使用情况更容易处理。"

#. type: Table
#: upstream/_guides/spring-di.adoc:305
#, fuzzy, no-wrap
msgid "@Component"
msgstr "@组件"

#. type: Table
#: upstream/_guides/spring-di.adoc:306 upstream/_guides/spring-di.adoc:310
#: upstream/_guides/spring-di.adoc:314
#, fuzzy, no-wrap
msgid "@Singleton"
msgstr "@Singleton"

#. type: Table
#: upstream/_guides/spring-di.adoc:308 upstream/_guides/spring-di.adoc:312
#: upstream/_guides/spring-di.adoc:316
#, fuzzy, no-wrap
msgid "By default Spring stereotype annotations are singleton beans"
msgstr "默认情况下，Spring定型注释是单子豆"

#. type: Table
#: upstream/_guides/spring-di.adoc:309
#, fuzzy, no-wrap
msgid "@Service"
msgstr "@服务"

#. type: Table
#: upstream/_guides/spring-di.adoc:313
#, fuzzy, no-wrap
msgid "@Repository"
msgstr "@存储库"

#. type: Table
#: upstream/_guides/spring-di.adoc:317
#, fuzzy, no-wrap
msgid "@Configuration"
msgstr "@配置"

#. type: Table
#: upstream/_guides/spring-di.adoc:318
#, fuzzy, no-wrap
msgid "@ApplicationScoped"
msgstr "@ApplicationScoped"

#. type: Table
#: upstream/_guides/spring-di.adoc:320
#, fuzzy, no-wrap
msgid "In CDI a producer bean isn't limited to the application scope, it could just as well be @Singleton or @Dependent"
msgstr "在CDI中，生产者Bean并不局限于应用范围，它也可以是@Singleton或@Dependent。"

#. type: Table
#: upstream/_guides/spring-di.adoc:321
#, fuzzy, no-wrap
msgid "@Bean"
msgstr "@豆豆"

#. type: Table
#: upstream/_guides/spring-di.adoc:322
#, fuzzy, no-wrap
msgid "@Produces"
msgstr "@制片人"

#. type: Table
#: upstream/_guides/spring-di.adoc:325
#, fuzzy, no-wrap
msgid "@Scope"
msgstr "@Scope"

#. type: Table
#: upstream/_guides/spring-di.adoc:328
#, fuzzy, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. Depending on the value of @Scope, one of the @Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent could be used"
msgstr "没有与CDI注解的一对一映射。根据@Scope的值，可以使用@Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent中的一个。"

#. type: Table
#: upstream/_guides/spring-di.adoc:329
#, fuzzy, no-wrap
msgid "@ComponentScan"
msgstr "@ComponentScan"

#. type: Table
#: upstream/_guides/spring-di.adoc:332
#, fuzzy, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. It is not used in Quarkus because Quarkus does all classpath scanning at build time."
msgstr "没有与CDI注释的一对一映射。在Quarkus中不使用它，因为Quarkus在构建时进行所有的classpath扫描。"

#. type: Table
#: upstream/_guides/spring-di.adoc:333
#, fuzzy, no-wrap
msgid "@Import"
msgstr "@进口"

#. type: Table
#: upstream/_guides/spring-di.adoc:335
#, fuzzy, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation."
msgstr "与CDI注解没有一对一的映射。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:337
#, fuzzy, no-wrap
msgid "More Spring guides"
msgstr "更多春季指南"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:340
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:342
msgid "xref:spring-web.adoc[Quarkus - Extension for Spring Web]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:343
msgid "xref:spring-data-jpa.adoc[Quarkus - Extension for Spring Data JPA]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:344
msgid "xref:spring-data-rest.adoc[Quarkus - Extension for Spring Data REST]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:345
msgid "xref:spring-security.adoc[Quarkus - Extension for Spring Security]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:346
msgid "xref:spring-cloud-config-client.adoc[Quarkus - Reading properties from Spring Cloud Config Server]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:347
msgid "xref:spring-boot-properties.adoc[Quarkus - Extension for Spring Boot properties]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:348
msgid "xref:spring-cache.adoc[Quarkus - Extension for Spring Cache]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:348
msgid "xref:spring-scheduled.adoc[Quarkus - Extension for Spring Scheduled]"
msgstr ""
