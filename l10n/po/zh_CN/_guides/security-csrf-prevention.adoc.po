# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-02-10 15:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-csrf-prevention.adoc:6
#, fuzzy, no-wrap
msgid "Cross-Site Request Forgery Prevention"
msgstr "防止跨站请求伪造"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:11
#, fuzzy
msgid "https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery (CSRF)] is an attack that forces an end user to execute unwanted actions on a web application in which they are currently authenticated."
msgstr "link:https://owasp.org/www-community/attacks/csrf[跨站请求伪造（CSRF] ）是一种攻击，它迫使终端用户在他们目前已认证的网络应用程序上执行不需要的操作。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:13
#, fuzzy
msgid "Quarkus Security provides a CSRF prevention feature which consists of a xref:resteasy-reactive.adoc[RESTEasy Reactive] server filter which creates and verifies CSRF tokens in `application/x-www-form-urlencoded` and `multipart/form-data` forms and a Qute HTML form parameter provider which supports the xref:qute-reference.adoc#injecting-beans-directly-in-templates[injection of CSRF tokens in Qute templates]."
msgstr "Quarkus Security提供了一个CSRF预防功能，它由一个 link:resteasy-reactive.html[Resteasy Reactive] 服务器过滤器和一个HTML表单参数提供者组成，前者创建并验证CSRF令牌，后者支持 link:qute-reference.html#injecting-beans-directly-in-templates[在Qute模板中注入CSRF令牌] 。"

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:14
#, fuzzy, no-wrap
msgid "Creating the Project"
msgstr "创建项目"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:18
#, fuzzy
msgid "First, we need a new project.  Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:24
#, fuzzy
msgid "This command generates a project which imports the `csrf-reactive` extension."
msgstr "该命令生成了一个导入 `csrf-reactive` 扩展的项目。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:27
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `csrf-reactive` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `csrf-reactive` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:32
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/security-csrf-prevention.adoc:34
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:40
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-csrf-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-csrf-prevention.adoc:43
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:46
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-csrf-reactive\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:49
#, fuzzy
msgid "Next, let's add a `csrfToken.html` Qute template producing an HTML form in the `src/main/resources/templates` folder:"
msgstr "你可以把包含这个模板的文件命名为 `csrfToken.html` ，并把它放在一个 `src/main/resources/templates` 。"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:60
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>User Name Input</title> \n"
"</head>\n"
"<body>\n"
"    <h1>User Name Input</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:63
#, no-wrap
msgid ""
"    <form action=\"/service/csrfTokenForm\" method=\"post\">\n"
"    \t<input type=\"hidden\" name=\"{inject:csrf.parameterName}\" value=\"{inject:csrf.token}\" />  <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:69
#, no-wrap
msgid ""
"    \t<p>Your Name: <input type=\"text\" name=\"name\" /></p>\n"
"    \t<p><input type=\"submit\" name=\"submit\"/></p>\n"
"    </form>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:71
#, fuzzy
msgid "This expression is used to inject a CSRF token into a hidden form field. This token will be verified by the CSRF filter against a CSRF cookie."
msgstr "这个表达式用于向隐藏的表单字段注入一个CSRF令牌。这个令牌将由CSRF过滤器根据CSRF cookie进行验证。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:73
#, fuzzy
msgid "Now let's create a resource class which returns an HTML form and handles form POST requests:"
msgstr "现在让我们创建一个资源类，它返回一个HTML表单并处理表单POST请求。"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:77
#: upstream/_guides/security-csrf-prevention.adoc:142
#: upstream/_guides/security-csrf-prevention.adoc:229
#, no-wrap
msgid "package io.quarkus.it.csrf;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:86
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:89
#: upstream/_guides/security-csrf-prevention.adoc:155
#: upstream/_guides/security-csrf-prevention.adoc:243
#, no-wrap
msgid ""
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.TemplateInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:92
#: upstream/_guides/security-csrf-prevention.adoc:158
#: upstream/_guides/security-csrf-prevention.adoc:246
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class UserNameResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:95
#, no-wrap
msgid ""
"    @Inject\n"
"    Template csrfToken; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:102
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance(); <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:111
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@FormParam(\"name\") String userName) {\n"
"        return userName; <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:113
#, fuzzy
msgid "Inject the `csrfToken.html` as a `Template`."
msgstr "注入 `csrfToken.html` ，作为一个 `Template` 。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:114
#, fuzzy
msgid "Return the HTML form with a hidden form field containing a CSRF token created by the CSRF filter."
msgstr "返回含有CSRF过滤器创建的CSRF令牌的隐藏表单字段的HTML表单。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:115
#, fuzzy
msgid "Handle the POST form request, this method can only be invoked if the CSRF filter has successfully verified the token."
msgstr "处理表单POST请求，这个方法只有在CSRF过滤器成功验证了令牌的情况下才能被调用。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:117
#, fuzzy
msgid "The form POST request will fail with HTTP status `400` if the filter finds the hidden CSRF form field is missing, the CSRF cookie is missing, or if the CSRF form field and CSRF cookie values do not match."
msgstr "如果过滤器发现隐藏的CSRF表单字段丢失，CSRF cookie丢失，或者CSRF表单字段和CSRF cookie值不匹配，那么表单POST请求将以HTTP状态 `400` 。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:119
#, fuzzy
msgid "At this stage no additional configuration is needed - by default the CSRF form field and cookie name will be set to `csrf_token`, and the filter will verify the token. But you can change these names if you would like:"
msgstr "在这个阶段，不需要额外的配置--默认情况下，CSRF表单字段和cookie名称将被设置为 `csrf_token` ，过滤器将验证令牌。但让我们改变这些名称。"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:124
#, no-wrap
msgid ""
"quarkus.csrf-reactive.form-field-name=csrftoken\n"
"quarkus.csrf-reactive.cookie-name=csrftoken\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:126
#, fuzzy, no-wrap
msgid "Sign CSRF token"
msgstr "签署CSRF令牌"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:129
#, fuzzy
msgid "You can get `HMAC` signatures created for the generated CSRF tokens and have these `HMAC` values stored as CSRF token cookies if you would like to avoid the risk of the attackers recreating the CSRF cookie token. All you need to do is to configure a token signature secret which must be at least 32 characters long:"
msgstr "如果你想避免攻击者重新创建CSRF cookie令牌的风险，你可以为生成的CSRF令牌创建 `HMAC` 签名，并让这些 `HMAC` 值存储为CSRF令牌cookies。你需要做的是配置一个令牌签名秘密，它必须至少有32个字符。"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:133
#, no-wrap
msgid "quarkus.csrf-reactive.token-signature-key=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:135
#, fuzzy, no-wrap
msgid "Restrict CSRF token verification"
msgstr "限制CSRF令牌验证"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:138
#, fuzzy
msgid "Your JAX-RS endpoint may accept not only HTTP POST requests with `application/x-www-form-urlencoded` or `multipart/form-data` payloads but also payloads with other media types, either on the same or different URL paths, and therefore you would like to avoid verifying the CSRF token in such cases, for example:"
msgstr "您的 JAX-RS 端点不仅可能接受带有 `application/x-www-form-urlencoded` 或 `multipart/form-data` 有效载荷的 HTTP POST 请求，还可能接受带有其他媒体类型的有效载荷，无论是在相同还是不同的 URL 路径上，因此您希望在这种情况下避免验证 CSRF 令牌，比如说。"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:152
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:161
#: upstream/_guides/security-csrf-prevention.adoc:249
#, no-wrap
msgid ""
"    @Inject\n"
"    Template csrfToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:168
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/user\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:177
#, no-wrap
msgid ""
"    <1>\n"
"    @POST\n"
"    @Path(\"/user\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@FormParam(\"name\") String userName) {\n"
"        return userName;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:186
#, no-wrap
msgid ""
"    <2>\n"
"    @POST\n"
"    @Path(\"/user\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postJson(User user) {\n"
"        return user.name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:195
#, no-wrap
msgid ""
"    <3>\n"
"    @POST\n"
"    @Path(\"/users\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postJson(User user) {\n"
"        return user.name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:206
#, no-wrap
msgid ""
"    public static class User {\n"
"        private String name;\n"
"        public String getName() {\n"
"            return this.name;\n"
"        }\n"
"        public void setName(String name) {\n"
"            this.name = name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:208
#, fuzzy
msgid "POST form request to `/user`, CSRF token verification is enforced by the CSRF filter"
msgstr "POST表单请求到 `/user` ，CSRF令牌验证由CSRF过滤器强制执行。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:209
#, fuzzy
msgid "POST json request to `/user`, CSRF token verification is not needed"
msgstr "POST json请求到 `/user` ，不需要CSRF令牌验证。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:210
#, fuzzy
msgid "POST json request to `/users`, CSRF token verification is not needed"
msgstr "POST json请求到 `/users` ，不需要CSRF令牌验证。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:212
msgid "As you can see a CSRF token verification will be required at the `/service/user` path accepting the `application/x-www-form-urlencoded` payload, but `User` JSON representation posted to both `/service/user` and `/service/users` method will have no CSRF token and therefore the token verification has to be skipped in these cases by restricting it to the specific `/service/user` request path but also allowing not only `application/x-www-form-urlencoded` on this path:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:217
#, no-wrap
msgid ""
"# Verify CSRF token only for the `/service/user` path, ignore other paths such as `/service/users`\n"
"quarkus.csrf-reactive.create-token-path=/service/user\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:220
#, no-wrap
msgid ""
"# If `/service/user` path accepts not only `application/x-www-form-urlencoded` payloads but also other ones such as JSON then allow them\n"
"quarkus.csrf-reactive.require-form-url-encoded=false\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:222
#, no-wrap
msgid "Verify CSRF token in the application code"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:225
msgid "If you prefer to compare the CSRF form field and cookie values in the application code then you can do it as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:240
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.CookieParam;\n"
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:256
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:268
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@CookieParam(\"csrf-token\") csrfCookie, @FormParam(\"csrf-token\") String formCsrfToken, @FormParam(\"name\") String userName) {\n"
"        if (!csrfCookie.getValue().equals(formCsrfToken)) { <1>\n"
"            throw new BadRequestException();\n"
"        }\n"
"        return userName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:270
#, fuzzy
msgid "Compare the CSRF form field and cookie values and fail with HTTP status `400` if they don't match."
msgstr "比较CSRF表单字段和cookie值，如果不匹配，则以HTTP状态 `400` ，失败。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:272
#, fuzzy
msgid "Also disable the token verification in the filter:"
msgstr "同时禁用过滤器中的令牌验证。"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:276
#, no-wrap
msgid "quarkus.csrf-reactive.verify-token=false\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:279
#, fuzzy, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:283
#, fuzzy, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:286
#, fuzzy
msgid "https://owasp.org/www-community/attacks/csrf[OWASP Cross-Site Request Forgery]"
msgstr "link:https://owasp.org/www-community/attacks/csrf[OWASP跨站请求伪造术]"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:287
msgid "xref:resteasy-reactive.adoc[RESTEasy Reactive]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:288
msgid "xref:qute-reference.adoc[Qute Reference]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:288
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr ""

#, fuzzy
#~ msgid "Note that the CSRF filter has to read the input stream in order to verify the token and then re-create the stream for the application code to read it as well. The filter performs this work on an event loop thread so for small form payloads, such as the one shown in the example above, it will have negligible performance side-effects. However if you deal with large form payloads then it is recommended to compare the CSRF form field and cookie values in the application code:"
#~ msgstr "请注意，CSRF过滤器必须读取输入流，以验证令牌，然后重新创建流，以便应用程序代码也能读取它。过滤器在一个事件循环线程上执行这项工作，所以对于小的表单有效载荷，如上面例子中所示，它的性能副作用可以忽略不计。然而，如果你处理大的表单有效载荷，那么建议你在应用程序代码中比较CSRF表单字段和cookie值。"

#, fuzzy
#~ msgid "Next lets add a Qute template producing an HTML form:"
#~ msgstr "接下来让我们添加一个Qute模板，产生一个HTML表单。"
