# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-25 16:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/redis-reference.adoc:6
#, fuzzy, no-wrap
msgid "Redis Extension Reference Guide"
msgstr "Redis参考指南"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:15
#, fuzzy
msgid "Redis is an in-memory data store used as a database, cache, streaming engine, and message broker.  The Quarkus Redis extension allows integrating Quarkus applications with Redis."
msgstr "Redis是一个内存数据存储，被用作数据库、缓存、流媒体引擎和消息代理。Quarkus Redis扩展允许将Quarkus应用程序与Redis集成。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:18
#, fuzzy
msgid "To use this extension, the user must be familiar with Redis, especially understanding the mechanism of commands and how they are organized.  Typically, we recommend:"
msgstr "要使用这个扩展，用户必须熟悉Redis，特别是了解命令的机制和它们的组织方式。通常情况下，我们建议。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:20
#, fuzzy
msgid "The https://try.redis.io/[interactive tutorial] introducing Redis."
msgstr "介绍Redis的 link:https://try.redis.io/[互动教程] 。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:21
#, fuzzy
msgid "The https://redis.io/commands/[command references] explains Redis commands and contains links to reference documentation."
msgstr "link:https://redis.io/commands/[命令参考] 解释了Redis命令，并包含参考文档的链接。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:23
#, fuzzy
msgid "This extension provides imperative and reactive APIs and low-level and high-level (type-safe) clients."
msgstr "这个扩展提供了命令式和反应式API以及低级和高级（类型安全）客户端。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:25
#, fuzzy, no-wrap
msgid "Installation"
msgstr "安装"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:29
#, fuzzy
msgid "If you want to use this extension, you need to add the `io.quarkus:quarkus-redis` extension first.  In your `pom.xml` file, add:"
msgstr "如果你想使用这个扩展，你需要先添加 `io.quarkus:quarkus-redis` 扩展。在你的 `pom.xml` 文件中，添加。"

#. type: Block title
#: upstream/_guides/redis-reference.adoc:31
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:37
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-redis-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/redis-reference.adoc:40
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:43
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-redis\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:46
#, fuzzy
msgid "With this dependency, you can then inject Redis clients or _datasource_ (high-level, type-safe API), such as:"
msgstr "有了这个依赖关系，你就可以注入Redis客户端或 _数据源_ （高级别的、类型安全的API），例如。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:50
#, no-wrap
msgid "import io.quarkus.redis.datasource.RedisDataSource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:54
#, no-wrap
msgid ""
"// ...\n"
"@Inject RedisAPI lowLevelClient;\n"
"@Inject RedisDataSource highLevelApi;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:57
#, fuzzy
msgid "More details about the various APIs offered by the quarkus-redis extension are available in the <<apis>> section."
msgstr "关于quarkus-redis扩展提供的各种API的更多细节可在 link:#apis[[apis]] 部分找到。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:59
#, fuzzy, no-wrap
msgid "One extension, multiple APIs"
msgstr "一个扩展，多个API"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:62
#, fuzzy
msgid "This extension provides multiple ways to interact with Redis:"
msgstr "这个扩展提供了与Redis互动的多种方式。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:67
#, fuzzy
msgid "the _low-level_ Vert.x client: it's a fully reactive, non-blocking, and asynchronous client.  More details on https://vertx.io/docs/vertx-redis-client/java/[the Vert.x Redis Client documentation].  Two APIs are exposed: `io.vertx.redis.client.Redis`, and `io.vertx.redis.client.RedisAPI`.  You will generally use the latter, except if you need to manage connections yourself."
msgstr " _低级别的_ Vert.x客户端：它是一个完全反应式的、非阻塞的、异步的客户端。更多细节请看 link:https://vertx.io/docs/vertx-redis-client/java/[Vert.x Redis客户端文档] 。有两个API是公开的。 `io.vertx.redis.client.Redis` `io.vertx.redis.client.RedisAPI` 你一般会使用后者，除非你需要自己管理连接。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:70
#, fuzzy
msgid "the _low-level_ Mutiny variant of the Vert.x API: Unlike the previous one, it exposes a Mutiny API and provides both reactive and imperative methods (suffixed with `andAwait()`).  Two APIs are exposed: `io.vertx.mutiny.redis.client.Redis` and `io.vertx.mutiny.redis.client.RedisAPI`.  You will generally use the latter, except if you need to manage connections yourself."
msgstr "是Vert.x API的 _低级_ Mutiny变体。与之前的不同，它暴露了一个Mutiny API，并提供了反应式和命令式方法（后缀为 `andAwait()` ）。暴露了两个API： `io.vertx.mutiny.redis.client.Redis` 和 `io.vertx.mutiny.redis.client.RedisAPI` 。你一般会使用后者，除非你需要自己管理连接。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:74
#, fuzzy
msgid "a _high-level_ reactive data source: A type-safe, high-level API to interact with Redis.  This API is fully reactive and asynchronous.  It exposes a Mutiny API.  It exposes the `io.quarkus.redis.datasource.ReactiveRedisDataSource` interface."
msgstr "一个 _高水平的_ 反应式数据源。一个类型安全的高级别API，用于与Redis交互。这个API是完全反应式和异步的。它暴露了一个Mutiny API。它暴露了 `io.quarkus.redis.datasource.ReactiveRedisDataSource` 接口。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:77
#, fuzzy
msgid "a _high-level_ imperative data source: A type-safe, high-level API to interact with Redis.  It is the imperative variant of the reactive data source.  It exposes the `io.quarkus.redis.datasource.RedisDataSource` interface."
msgstr "一个 _高层次_ 的指令性数据源。一个类型安全的高层次API来与Redis交互。它是反应式数据源的必要变体。它暴露了 `io.quarkus.redis.datasource.RedisDataSource` 接口。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:79
#, fuzzy
msgid "To help you select the suitable API for you, here are some recommendations:"
msgstr "为了帮助你选择适合你的API，这里有一些建议。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:81
#, fuzzy
msgid "If you are building an imperative (_classic_) Quarkus application integrating with Redis: use `io.quarkus.redis.datasource.RedisDataSource`."
msgstr "如果你正在构建一个与Redis集成的命令式 _（经典_ ）Quarkus应用程序：使用 `io.quarkus.redis.datasource.RedisDataSource` 。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:82
#, fuzzy
msgid "If you are building a reactive Quarkus application integrating with Redis: use `io.quarkus.redis.datasource.ReactiveRedisDataSource`."
msgstr "如果你正在建立一个与Redis集成的反应式Quarkus应用程序：使用 `io.quarkus.redis.datasource.RedisReactiveDataSource` 。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:83
#, fuzzy
msgid "If you need fine-grain control, or execute commands in a generic way: use `io.vertx.mutiny.redis.client.RedisAPI`"
msgstr "如果你需要细粒度的控制，或以通用方式执行命令：使用 `io.vertx.mutiny.redis.client.RedisAPI` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:84
#, fuzzy
msgid "If you have existing Vert.x code, use `io.vertx.redis.client.RedisAPI`"
msgstr "如果你有现有的Vert.x代码，使用 `io.vertx.redis.client.RedisAPI` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:85
#, fuzzy
msgid "If you need to emit custom commands, you can either use the data sources (reactive or imperative) or the `io.vertx.mutiny.redis.client.Redis`."
msgstr "如果你需要发射自定义命令，你可以使用数据源（反应式或命令式）或 `io.vertx.mutiny.redis.client.Redis` 。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:87
#, fuzzy, no-wrap
msgid "Default and named clients"
msgstr "默认和命名的客户"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:91
#, fuzzy
msgid "This extension lets you configure a _default_ Redis client/data sources or _named_ ones.  The latter is essential when you need to connect to multiple Redis instances."
msgstr "这个扩展允许你配置一个 _默认的_ Redis客户端/数据源或 _命名的_ 客户端/数据源。当你需要连接到多个Redis实例时，后者是必不可少的。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:94
#, fuzzy
msgid "The default connection is configured using the `quarkus.redis.*` properties.  For example, to configure the default Redis client, use:"
msgstr "默认连接是使用 `quarkus.redis.*` 属性配置的。例如，要配置默认的Redis客户端，使用。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:99
#, no-wrap
msgid "quarkus.redis.hosts=redis://localhost/\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:102
#, fuzzy
msgid "When using the default connection, you can inject the various APIS using a _plain_ `@Inject`:"
msgstr "当使用默认连接时，你可以使用一个 _普通的_ `@Inject` ，注入各种APIS。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:112
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject RedisDataSource redisDataSource;\n"
"    @Inject RedisAPI redisAPI;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:115
#, fuzzy
msgid "In general, you inject a single one; the previous snippet is just an example."
msgstr "一般来说，你注入一个；前面的片段只是一个例子。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:118
#, fuzzy
msgid "_Named_ clients are configured using the `quarkus.redis.<name>.*` properties:"
msgstr " _命名的_ 客户端是使用 `quarkus.redis.<name>.*` 属性配置的。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:123
#, no-wrap
msgid ""
"quarkus.redis.my-redis-1.hosts=redis://localhost/\n"
"quarkus.redis.my-redis-2.hosts=redis://my-other-redis:6379\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:126
#, fuzzy
msgid "To access the APIs, you need to use the `@RedisClientName` qualifier:"
msgstr "要访问API，你需要使用 `@RedisClientName` 修饰语。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:135
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject @RedisClientName(\"my-redis-1\") ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject @RedisClientName(\"my-redis-2\") RedisDataSource redisDataSource;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:138
#, fuzzy
msgid "You can omit the `@Inject` annotation when using `@RedisClientName`."
msgstr "当使用 `@RedisClientName` ，你可以省略 `@Inject` 注释。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:139
#, fuzzy, no-wrap
msgid "Connection to Redis"
msgstr "连接到Redis"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:142
#, fuzzy
msgid "The Redis extension can operate in 4 distinct modes:"
msgstr "Redis扩展可以在4种不同的模式下运行。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:144
#, fuzzy
msgid "Simple client (probably what most users need)."
msgstr "简单的客户端（可能是大多数用户需要的）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:145
#, fuzzy
msgid "Sentinel (when working with Redis in High Availability mode)."
msgstr "Sentinel（当在高可用性模式下与Redis一起工作时）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:146
#, fuzzy
msgid "Cluster (when working with Redis in Clustered mode)."
msgstr "群集（当在群集模式下与Redis一起工作时）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:147
#, fuzzy
msgid "Replication (single shard, one node write, multiple read)."
msgstr "复制（单分片，一个节点写，多个读）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:149
#, fuzzy
msgid "The connection url is configured with the `quarkus.redis.hosts` (or `quarkus.redis.<name>.hosts`) as follows:"
msgstr "连接网址是用 `quarkus.redis.hosts` （或 `quarkus.redis.<name>.hosts` ）配置的，如下所示。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:153
#, no-wrap
msgid "quarkus.redis.hosts=redis://[:password@]host[:port][/db-number]\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:155
#, fuzzy, no-wrap
msgid "Unix Socket"
msgstr "使用Unix插座"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:158
#, fuzzy
msgid "When using unix-socket, you need:"
msgstr "当使用unix-socket时，你需要。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:162
#, no-wrap
msgid "quarkus.redis.hosts=unix://[:password@]/domain/docker.sock[?select=db-number]\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:164
#, fuzzy, no-wrap
msgid "Sentinel Mode"
msgstr "哨兵模式"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:167
#, fuzzy
msgid "When using Sentinel, you need to pass multiple _host urls_ and configure the client type to `sentinel`:"
msgstr "当使用Sentinel时，你需要传递多个 _主机urls_ 并将客户端类型配置为 `sentinel` 。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:172
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:5000,redis://localhost:5001,redis://localhost:5002\n"
"quarkus.redis.client-type=sentinel\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:176
#, no-wrap
msgid ""
"# Optional\n"
"quarkus.redis.master-name=my-sentinel # Default is my-master\n"
"quarkus.redis.role=master # master is the default\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:178
#, fuzzy, no-wrap
msgid "Cluster Mode"
msgstr "集群模式"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:181
#, fuzzy
msgid "When using Redis in cluster mode, you need to pass multiple _host urls_, configure the client type to `cluster` and configure the `replicas` mode:"
msgstr "当在集群模式下使用Redis时，你需要传递多个 _主机Url_ ，将客户端类型配置为 `cluster` ，并配置 `replicas` 模式。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:187
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:7000,redis://localhost:7001,redis://localhost:7002\n"
"quarkus.redis.client-type=cluster\n"
"quarkus.redis.replicas=share\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:189
#, fuzzy, no-wrap
msgid "Replication Mode"
msgstr "复制模式"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:192
#, fuzzy
msgid "When using the replication mode, you need to pass a single host url and configure the type to be `replication`:"
msgstr "当使用复制模式时，你需要传递一个单一的主机网址，并将类型配置为 `replication` 。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:197
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:7000\n"
"quarkus.redis.client-type=replication\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:199
#, fuzzy, no-wrap
msgid "Redis Cloud"
msgstr "连接到Redis云"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:202
#, fuzzy
msgid "To connect to redis cloud, you need the following properties:"
msgstr "要连接到redis云，你需要以下属性。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:207
#, no-wrap
msgid ""
"quarkus.redis.hosts=<the redis cloud url such as redis://redis-12436.c14.us-east-1-3.ec2.cloud.redislabs.com:12436>\n"
"quarkus.redis.password=<the password>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:209
#, fuzzy, no-wrap
msgid "Authentication"
msgstr "认证"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:213
#, fuzzy
msgid "The Redis password can be set in the `redis://` URL or with the `quarkus.redis.password` property.  We recommend the latter, and if possible, using secrets or an environment variable to configure the password."
msgstr "Redis密码可以在 `redis://` URL中设置，也可以用 `quarkus.redis.password` 属性设置。我们推荐后者，如果可能的话，使用secrets或环境变量来配置密码。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:215
#, fuzzy
msgid "The associated environment variable is `QUARKUS_REDIS_PASSWORD`, or `QUARKUS_REDIS_<NAME>_PASSWORD` for named clients."
msgstr "相关的环境变量是 `QUARKUS_REDIS_PASSWORD` ，或者 `QUARKUS_REDIS_<NAME>_PASSWORD` ，用于命名的客户端。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:216
#, fuzzy, no-wrap
msgid "Quarkus client API for data sources"
msgstr "数据源的Quarkus客户端API"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:221
#, fuzzy
msgid "Quarkus exposes a high-level API on top of Redis.  This API is type-safe and structured around the notion of _group_, inherited from the https://redis.io/commands/command-docs/[Redis command organization].  This API lets you execute Redis commands more conveniently and safely."
msgstr "Quarkus在Redis之上暴露了一个高级API。这个API是类型安全的，围绕着从 link:https://redis.io/commands/command-docs/[Redis命令组织] 中继承下来的 _组_ 的概念进行结构化。这个API让你更方便、更安全地执行Redis命令。"

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:222
#, fuzzy, no-wrap
msgid "Inject data sources"
msgstr "注入数据源"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:225
#, fuzzy
msgid "For each configured Redis client, two Redis data sources are exposed:"
msgstr "对于每个配置的Redis客户端，有两个Redis数据源被暴露。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:228
#, fuzzy
msgid "`io.quarkus.redis.datasource.RedisDataSource` - an imperative (blocking) Redis data source.  Each operation blocks until a response is received or a timeout is reached"
msgstr " `io.quarkus.redis.datasource.RedisDataSource` - 一个强制性的（阻塞的）Redis数据源。每个操作都会阻塞，直到收到响应或达到超时。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:229
#, fuzzy
msgid "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - a reactive Redis data source returning `Uni<X>` or `Multi<X>`."
msgstr " `io.quarkus.redis.datasource.ReactiveRedisDataSource` - 一个反应式Redis数据源返回 或 。 `Uni<X>` `Multi<X>` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:231
#, fuzzy
msgid "If you configured the _default_ Redis client, you could inject the data sources using:"
msgstr "如果你配置了 _默认的_ Redis客户端，你可以使用注入数据源。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:236
#, no-wrap
msgid ""
"@Inject RedisDataSource defaultRedisDataSource;\n"
"@Inject ReactiveRedisDataSource defaultReactiveRedisDataSource;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:239
#, fuzzy
msgid "If you configured a _named_ Redis client, you need to use the `io.quarkus.redis.RedisClientName` qualifier to select the right client:"
msgstr "如果你配置了一个 _命名的_ Redis客户端，你需要使用 `io.quarkus.redis.RedisClientName` 修饰语来选择正确的客户端。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:244
#, no-wrap
msgid ""
"@RedisClientName(\"my-redis\") RedisDataSource myRedisDataSource;\n"
"@RedisClientName(\"my-redis\") ReactiveRedisDataSource myReactiveRedisDataSource;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:247
#, fuzzy
msgid "When using the _blocking_ variant, you can configure the default timeout with:"
msgstr "当使用 _阻断_ 变体时，你可以用以下方法配置默认超时。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:252
#, no-wrap
msgid ""
"quarkus.redis.timeout=5s\n"
"quarkus.redis.my-redis.timeout=5s\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:255
#, fuzzy
msgid "The default timeout is configured to 10s."
msgstr "默认超时被配置为10秒。"

#. type: Block title
#: upstream/_guides/redis-reference.adoc:257
#, fuzzy, no-wrap
msgid "All about delegation"
msgstr "关于代表团的一切"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:261
#, fuzzy
msgid "The blocking data source (`io.quarkus.redis.datasource.RedisDataSource`) is implemented on top of the reactive one (`io.quarkus.redis.datasource.ReactiveRedisDataSource`).  The `ReactiveRedisDataSource` is implemented on top of the `io.vertx.mutiny.redis.Redis` API."
msgstr "阻断数据源( `io.quarkus.redis.datasource.RedisDataSource` )是在反应式数据源( `io.quarkus.redis.datasource.ReactiveRedisDataSource` )之上实现的。 `ReactiveRedisDataSource` 是在 `io.vertx.mutiny.redis.Redis` API 的基础上实现的。"

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:263
#, fuzzy, no-wrap
msgid "Data Source groups"
msgstr "数据源组"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:266
#, fuzzy
msgid "As mentioned above, the API is divided into groups:"
msgstr "如上所述，API被分为几组。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:268
#: upstream/_guides/redis-reference.adoc:269
#, fuzzy
msgid "bitmap - `.bitmap()`"
msgstr "位图- `.bitmap()` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:270
#, fuzzy
msgid "key (generic) - `.key()`"
msgstr "键（通用）- `.key()` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:271
#, fuzzy
msgid "geo - `.geo(memberType)`"
msgstr "地缘 - `.geo(memberType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:272
#, fuzzy
msgid "hash - `.hash(`valueType)`"
msgstr "哈希 - `.hash(`valueType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:273
#, fuzzy
msgid "hyperloglog - `.hyperloglog(memberType)`"
msgstr "超级日志 - `.hyperloglog(memberType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:274
#, fuzzy
msgid "list - `.list(memberType)`"
msgstr "列表 - `.list(memberType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:275
#, fuzzy
msgid "pubsub - `pubsub()`"
msgstr "pubsub - `pubsub()` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:276
#, fuzzy
msgid "set - `.set(memberType)`"
msgstr "设置- `.set(memberType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:277
#, fuzzy
msgid "sorted-set - `.sortedSet(memberType)`"
msgstr "排序集- `.sortedSet(memberType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:278
#, fuzzy
msgid "stream (not available yet)"
msgstr "流动(暂不提供)"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:279
#, fuzzy
msgid "string - `.value(valueType)`"
msgstr "字符串 - `.string(valueType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:280
#, fuzzy
msgid "transactions - `withTransaction`"
msgstr "交易 - `withTransaction` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:281
#, fuzzy
msgid "json - `.json()` (requires the https://redis.com/modules/redis-json/[RedisJSON] module on the server side)"
msgstr "json - `.json()` （需要服务器端的 link:https://redis.com/modules/redis-json/[redis-json] 模块）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:282
#, fuzzy
msgid "bloom - `.bloom()` (requires the https://redis.com/modules/redis-bloom/[RedisBloom] module on the server side)"
msgstr "bloom - `.bloom()` （需要服务器端的 link:https://redis.com/modules/redis-bloom/[redis-bloom] 模块）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:283
#, fuzzy
msgid "cuckoo - `.cuckoo()` (requires the https://redis.com/modules/redis-bloom/[rRedisBloom] module on the server side, which also provides the cuckoo filter commands)"
msgstr "cuckoo - `.cuckoo()` (需要服务器端的 link:https://redis.com/modules/redis-bloom/[redis-bloom] 模块，它也提供了cuckoo过滤命令)"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:284
#, fuzzy
msgid "count-min - `.countmin()` (requires the https://redis.com/modules/redis-bloom/[RedisBloom] module on the server side, which also provides the count-min filter commands)"
msgstr "count-min - `.countmin()` （需要服务器端的 link:https://redis.com/modules/redis-bloom/[redis-bloom] 模块，该模块也提供count-min过滤命令）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:285
#, fuzzy
msgid "top-k - `.topk()` (requires the https://redis.com/modules/redis-bloom/[RedisBloom] module on the server side, which also provides the top-k filter commands)"
msgstr "top-k - `.topk()` （需要服务器端的 link:https://redis.com/modules/redis-bloom/[redis-bloom] 模块，它也提供top-k过滤命令）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:287
#, fuzzy
msgid "graph - `.graph()` (requires the https://redis.com/modules/redis-graph/[RedisGraph] module on the server side).  These commands are marked as experimental, as we would need feedback before making them stable."
msgstr "graph - `.graph()` （需要服务器端的 link:https://redis.com/modules/redis-graph/[redis-graph] 模块，该模块也提供graph命令）这些命令被标记为实验性的，因为我们在使其稳定之前需要反馈。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:288
#, fuzzy
msgid "search - `.search()` (requires the https://redis.com/modules/redis-search/[RedisSearch] module on the server side)."
msgstr "json - `.json()` （需要服务器端的 link:https://redis.com/modules/redis-json/[redis-json] 模块）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:289
#, fuzzy
msgid "auto-suggest - `.autosuggest()` (requires the https://redis.com/modules/redis-search/[RedisSearch] module on the server side)."
msgstr "json - `.json()` （需要服务器端的 link:https://redis.com/modules/redis-json/[redis-json] 模块）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:290
#, fuzzy
msgid "time-series - `.timeseries()` (requires the https://redis.com/modules/redis-timeseries/[Redis Time Series] module on the server side)."
msgstr "json - `.json()` （需要服务器端的 link:https://redis.com/modules/redis-json/[redis-json] 模块）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:292
#, fuzzy
msgid "These commands are marked as experimental, as we would need feedback before making them stable."
msgstr "graph - `.graph()` （需要服务器端的 link:https://redis.com/modules/redis-graph/[redis-graph] 模块，该模块也提供graph命令）这些命令被标记为实验性的，因为我们在使其稳定之前需要反馈。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:295
#, fuzzy
msgid "Each of these methods returns an object that lets you execute the commands related to the group.  The following snippet demonstrates how to use the _hash_ group:"
msgstr "这些方法中的每一个都返回一个对象，让你执行与该组有关的命令。下面的片段演示了如何使用 _哈希_ 组。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:300
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyRedisService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:302
#, no-wrap
msgid "    private static final String MY_KEY = \"my-key\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:304
#, no-wrap
msgid "    private final HashCommands<String, String, Person> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:308
#, no-wrap
msgid ""
"    public MyRedisService(RedisDataSource ds) { // <1>\n"
"        commands = ds.hash(Person.class); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:312
#, no-wrap
msgid ""
"    public void set(String field, Person value) {\n"
"        commands.hset(MY_KEY, field, value);  // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:317
#, no-wrap
msgid ""
"    public Person get(String field) {\n"
"        return commands.hget(MY_KEY, field);  // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:319
#, fuzzy
msgid "Inject the `RedisDataSource` in the constructor"
msgstr "在构造函数中注入 `RedisDataSource` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:321
#, fuzzy
msgid "Creates the `HashCommands` object.  This object has three type parameters: the type of the key, the type of the field, and the type of the member"
msgstr "创建 `HashCommands` 对象。这个对象有三个类型参数：键的类型，字段的类型，以及成员的类型。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:322
#, fuzzy
msgid "Use the created `commands` to associate the field `field` with the value `value`"
msgstr "使用创建的 `commands` ，将字段 `field` 与值联系起来。 `value` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:323
#, fuzzy
msgid "Use the created `commands` to retrieve the field `field` value."
msgstr "使用创建的 `commands` ，检索字段 `field` 值。"

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:324
#, fuzzy, no-wrap
msgid "Serialization and Deserialization"
msgstr "序列化和反序列化"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:329
#, fuzzy
msgid "The data source APIs handle the serialization and deserialization automatically.  When a non-standard type is used, the object is serialized into JSON and deserialized from JSON.  In this case, `quarkus-jackson` is used."
msgstr "数据源API会自动处理序列化和反序列化。当使用非标准类型时，该对象被序列化为JSON，并从JSON中反序列化。在这种情况下，使用 `quarkus-jackson` 。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:331
#, fuzzy
msgid "To store binary data, use `byte[]`."
msgstr "要存储二进制数据，使用 `byte[]` 。"

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:332
#, fuzzy, no-wrap
msgid "The `value` group"
msgstr " `string` 组"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:336
#, fuzzy
msgid "The `value` group is used to manipulate https://redis.io/docs/manual/data-types/#strings[Redis Strings].  Thus, this group is not limited to Java Strings but can be used for integers (like a counter) or binary content (like images)."
msgstr " `string` 组是用来操作 link:https://redis.io/docs/manual/data-types/#strings[Redis 字符串的] 。因此，该组不限于Java字符串，也可用于整数（如计数器）或二进制内容（如图像）。"

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:337
#, fuzzy, no-wrap
msgid "Work with cached values"
msgstr "使用缓存值的工作"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:341
#, fuzzy
msgid "You can use Redis as a cache using the `setex` command, which stores a given value to a given key for a given duration.  The following snippet shows how such a command can be used to store `BusinessObject` for 1 second."
msgstr "你可以使用Redis作为一个缓存，使用 `setex` 命令，该命令将一个给定的值存储到一个给定的键上，并持续一定的时间。下面的片段显示了如何使用这样的命令来存储 `BusinessObject` ，持续1秒。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:346
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyRedisCache {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:348
#, no-wrap
msgid "    private final ValueCommands<String, BusinessObject> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:352
#, no-wrap
msgid ""
"    public MyRedisCache(RedisDataSource ds) {\n"
"        commands = ds.value(BusinessObject.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:356
#: upstream/_guides/redis-reference.adoc:516
#, no-wrap
msgid ""
"    public BusinessObject get(String key) {\n"
"        return commands.get(key);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:361
#, no-wrap
msgid ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.setex(key, 1, bo); // Expires after 1 second\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:364
#, fuzzy
msgid "You can use the `setnx` method only to set the value if no value has been stored for the given key."
msgstr "如果没有为给定的键存储值，你只能使用 `setnx` 方法来设置值。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:366
#, fuzzy
msgid "The `key` group provides more fine-grain control on expiration and ttl of each key."
msgstr " `key` 组对每个密钥的过期和tl提供了更细粒度的控制。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:370
#, fuzzy
msgid "The `set` method can also receive a `SetArgs` argument that modify the behavior:"
msgstr " `set` 方法也可以接收一个 `SetArgs` 参数，修改行为。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:372
#, fuzzy
msgid "`ex(seconds)` - Set the specified expire time, in seconds."
msgstr " `ex(seconds)` - 设置指定的过期时间，单位为秒。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:373
#, fuzzy
msgid "`px(milliseconds)` - Set the specified expire time, in milliseconds."
msgstr " `px(milliseconds)` - 设置指定的过期时间，以毫秒为单位。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:374
#, fuzzy
msgid "`exat(timestamp-seconds)` - Set the specified Unix time at which the key will expire, in seconds."
msgstr " `exat(timestamp-seconds)` - 设置指定的Unix时间，在该时间内密钥将过期，单位为秒。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:375
#, fuzzy
msgid "`pxat(timestamp-milliseconds)` - Set the specified Unix time at which the key will expire, in milliseconds."
msgstr " `pxat(timestamp-milliseconds)` - 设置指定的Unix时间，在该时间段内密钥将过期，单位为毫秒。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:376
#, fuzzy
msgid "`nx()` - Only set the key if it does not already exist."
msgstr " `nx()` - 只有在钥匙不存在的情况下，才会设置它。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:377
#, fuzzy
msgid "`xx()` - Only set the key if it already exists."
msgstr " `xx()` - 只有在钥匙已经存在的情况下才设置。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:378
#, fuzzy
msgid "`keepttl()` - Retain the time to live associated with the key."
msgstr " `keepttl()` - 保留与钥匙相关的生存时间。"

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:380
#, fuzzy, no-wrap
msgid "Store binary data"
msgstr "存储二进制数据"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:384
#, fuzzy
msgid "Redis _strings_ can be used to store binary data, such as images.  In this case, we will use `byte[]` as value type:"
msgstr "Redis _字符串_ 可用于存储二进制数据，如图像。在这种情况下，我们将使用 `byte[]` 作为值类型。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:389
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyBinaryRepository {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:391
#, no-wrap
msgid "    private final ValueCommands<String, byte[]> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:395
#, no-wrap
msgid ""
"    public MyBinaryRepository(RedisDataSource ds) {\n"
"        commands = ds.value(byte[].class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:403
#, no-wrap
msgid ""
"    public byte[] get(String key) {\n"
"        byte[] bytes = commands.get(key);\n"
"        if (bytes == null) {\n"
"            throw new NoSuchElementException(\"`\" + key + \"` not found\");\n"
"        }\n"
"        return bytes;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:407
#, no-wrap
msgid ""
"    public void add(String key, byte[] bytes) {\n"
"        commands.set(key, bytes);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:412
#, no-wrap
msgid ""
"    public void addIfAbsent(String key, byte[] bytes) {\n"
"        commands.setnx(key, bytes);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:414
#, fuzzy, no-wrap
msgid "Store a counter"
msgstr "储存一个计数器"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:417
#, fuzzy
msgid "You can store counters in Redis as demonstrated below:"
msgstr "你可以在Redis中存储计数器，如下图所示。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:422
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyRedisCounter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:424
#, no-wrap
msgid "    private final ValueCommands<String, Long> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:428
#, no-wrap
msgid ""
"    public MyRedisCounter(RedisDataSource ds) {\n"
"        commands = ds.value(Long.class); // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:436
#, no-wrap
msgid ""
"    public long get(String key) {\n"
"        Long l = commands.get(key);  // <2>\n"
"        if (l == null) {\n"
"            return 0L;\n"
"        }\n"
"        return l;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:440
#, no-wrap
msgid ""
"    public void incr(String key) {\n"
"        commands.incr(key);  // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:442
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:445
#, fuzzy
msgid "Retrieve the commands.  This time we will manipulate `Long` values"
msgstr "检索命令。这一次我们将操作 `Long` 值"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:447
#, fuzzy
msgid "Retrieve the counter associated with the given `key`.  Return `0L` when no counter is stored."
msgstr "检索与给定 `key` 相关的计数器。当没有存储计数器时，返回 `0L` 。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:449
#, fuzzy
msgid "Increment the value.  If there are no counter stored for the key, the `incr` command considers 0 as value (so `incr` sets the value to 1)."
msgstr "递增该值。如果没有为该键存储计数器， `incr` 命令将0视为值（因此 `incr` 将值设为1）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:451
#, fuzzy
msgid "There are other methods that can be useful to manipulate counters, such as:"
msgstr "还有其他一些方法可以用来操作计数器，例如。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:453
#, fuzzy
msgid "`incrby` - allows setting the increment value (positive or negative)"
msgstr " `incrby` - 允许设置增量值（正或负）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:454
#, fuzzy
msgid "`incrbyfloat` - allows setting the increment value as a float/ double (the stored value will be a double)"
msgstr " `incrbyfloat` - 允许将增量值设置为浮点数/双数（存储的值将是双数）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:455
#, fuzzy
msgid "`set` - to set an initial value if needed"
msgstr " `set` - 来设置一个初始值，如果需要的话"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:456
#, fuzzy
msgid "`decr` and `decrby` - allows decrementing the stored value"
msgstr " `decr` 和 - 允许递减存储的值 `decrby` "

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:457
#, fuzzy, no-wrap
msgid "Communicate with pub/sub"
msgstr "与酒吧/分局沟通"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:461
#, fuzzy
msgid "Redis allows sending _messages_ to channels and listening for these messages.  These features are available from the `pubsub` group."
msgstr "Redis允许向通道发送 _消息_ 并监听这些消息。这些功能可以从 `pubsub` 组中获得。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:463
#, fuzzy
msgid "The following snippets shows how a _cache_ can emit a `Notification` after every `set`, and how a subscriber can receive the notification."
msgstr " `Notification` 下面的片段显示了一个 _缓存_ 如何在每次 `set` ，以及订阅者如何接收通知。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:469
#, no-wrap
msgid ""
"public static final class Notification {\n"
"    public String key;\n"
"    public BusinessObject bo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:471
#, no-wrap
msgid "    public Notification() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:473
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:479
#, no-wrap
msgid ""
"    public Notification(String key, BusinessObject bo) {\n"
"        this.key = key;\n"
"        this.bo = bo;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:485
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Startup // We want to create the bean instance on startup to subscribe to the channel.\n"
"public static class MySubscriber implements Consumer<Notification> {\n"
"    private final PubSubCommands<Notification> pub;\n"
"    private final PubSubCommands.RedisSubscriber subscriber;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:490
#, no-wrap
msgid ""
"    public MySubscriber(RedisDataSource ds) {\n"
"        pub = ds.pubsub(Notification.class);\n"
"        subscriber = pub.subscribe(\"notifications\", this);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:495
#, no-wrap
msgid ""
"    @Override\n"
"    public void accept(Notification notification) {\n"
"        // Receive the notification\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:501
#, no-wrap
msgid ""
"    @PreDestroy\n"
"    public void terminate() {\n"
"        subscriber.unsubscribe(); // Unsubscribe from all subscribed channels\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:504
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyCache {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:507
#, no-wrap
msgid ""
"    private final ValueCommands<String, BusinessObject> commands;\n"
"    private final PubSubCommands<Notification> pub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:512
#, no-wrap
msgid ""
"    public MyCache(RedisDataSource ds) {\n"
"        commands = ds.value(BusinessObject.class);\n"
"        pub = ds.pubsub(Notification.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:522
#, no-wrap
msgid ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.set(key, bo);\n"
"        pub.publish(\"notifications\", new Notification(key, bo));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:524
#, fuzzy, no-wrap
msgid "Redis transactions"
msgstr "使用交易"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:528
#, fuzzy
msgid "Redis transactions are slightly different from relational database transactions.  Redis transactions are a batch of commands executed altogether."
msgstr "Redis事务与关系型数据库事务略有不同。Redis事务是一批完全执行的命令。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:530
#, fuzzy
msgid "A Redis transaction can _watch_ a set of keys, which would _discard_ the transaction is one of these keys are updated during the transaction execution."
msgstr "一个Redis事务可以 _监视_ 一组键，如果这些键中的一个在事务执行过程中被更新，它将 _放弃_ 该事务。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:535
#, fuzzy
msgid "Commands enqueued in a transaction are not executed before the whole transaction is executed.  It means that you cannot retrieve a result during the transaction.  Results are accumulated in a `TransactionResult` object you will access after the completion of the transaction.  This object contains whether the transaction succeeded or was discarded, and in the former case the result of each command (indexed by the command order)."
msgstr "在一个事务中排队的命令在整个事务执行之前不会被执行。这意味着在交易过程中你不能检索到一个结果。结果被积累在一个 `TransactionResult` 对象中，你将在事务完成后访问。这个对象包含了交易是否成功或被放弃，以及在前者的情况下，每个命令的结果（以命令顺序为索引）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:539
#, fuzzy
msgid "To start a transaction, you use the `withTransaction` method.  This method receives a `Consumer<TransactionalRedisDataSource>`, which follows the same API as the regular `RedisDataSource` except that the commands return `void` (`Uni<Void>` for the reactive variant).  When that consumer returns, the transaction is _executed_."
msgstr "要启动一个事务，你要使用 `withTransaction` 方法。这个方法接收一个 `Consumer<TransactionalRedisDataSource>` ，它遵循与常规 `RedisDataSource` 相同的API，只是命令返回 `void` （反应式变体为 `Uni<Void>` ）。当该消费者返回时，事务被 _执行_ 。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:541
#, fuzzy
msgid "The following snippet shows how to create a transaction executing two related _writes_:"
msgstr "下面的片段显示了如何创建一个事务，执行两个相关的 _写操作_ 。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:545
#, no-wrap
msgid "@Inject RedisDataSource ds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:547
#: upstream/_guides/redis-reference.adoc:565
#: upstream/_guides/redis-reference.adoc:646
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:553
#, no-wrap
msgid ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"        TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        hash.hset(KEY, \"field-1\", \"hello\");\n"
"        hash.hset(KEY, \"field-2\", \"hello\");\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:557
#, fuzzy
msgid "The received `tx` object can also be used to _discard_ the transaction, using: `tx.discard();`.  The returned `TransactionResult` lets you retrieve the result of each command."
msgstr "收到的 `tx` 对象也可以用来 _放弃_ 交易，使用： `tx.discard();` 。返回的 `TransactionResult` ，让你检索每个命令的结果。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:559
#, fuzzy
msgid "When using the reactive variant of the data source, the passed callback is a `Function<ReactiveTransactionalRedisDataSource, Uni<Void>>`:"
msgstr "当使用数据源的反应式变体时，传递的回调是一个 `Function<ReactiveTransactionalRedisDataSource, Uni<Void>>` 。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:563
#: upstream/_guides/redis-reference.adoc:644
#, no-wrap
msgid "@Inject ReactiveRedisDataSource ds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:571
#, no-wrap
msgid ""
"Uni<TransactionResult> result = ds.withTransaction(tx -> {\n"
"        ReactiveTransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        return hash.hset(KEY, \"field-1\", \"hello\")\n"
"            .chain(() -> hash.hset(KEY, \"field-2\", \"hello\"));\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:576
#, fuzzy
msgid "Transaction execution can be conditioned by _keys_.  When a passed key gets modified during the execution of a transaction, the transaction is discarded.  The keys are passed as `String` as a second parameter to the `withTransaction` method:"
msgstr "事务的执行可以 _由键_ 来决定。当一个传递的键在事务执行过程中被修改时，该事务就会被丢弃。键被作为 `String` ，作为第二个参数传给 `withTransaction` 方法。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:584
#, no-wrap
msgid ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"    TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"    hash.hset(KEY, \"field-1\", \"hello\");\n"
"    hash.hset(KEY, \"field-2\", \"hello\");\n"
"}, KEY);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:587
#, fuzzy
msgid "You cannot use the pub/sub feature from within a transaction."
msgstr "你不能在一个交易中使用pub/sub功能。"

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:588
#, fuzzy, no-wrap
msgid "Optimistic locking"
msgstr "使用乐观的锁定"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:592
#, fuzzy
msgid "To use optimistic locking, you need to use a variant of the `withTransaction` method, allowing the execution of code before the transaction starts.  In other words, it will be executed as follows:"
msgstr "为了使用乐观锁，你需要使用 `withTransaction` 方法的一个变体，允许在事务开始之前执行代码。换句话说，它将被执行，如下所示。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:596
#, no-wrap
msgid "WATCH key\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:600
#, no-wrap
msgid ""
"// Pre-transaction block\n"
"// ....\n"
"// Produce a result\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:604
#, no-wrap
msgid ""
"MULTI\n"
"  // In transaction code, receive the result produced by the pre-transaction block.\n"
"EXEC\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:607
#, fuzzy
msgid "For example, if you need to update a value in a hash only if the field exists, you will use the following API:"
msgstr "例如，如果你需要更新一个哈希值，只有当该字段存在时，你将使用以下API。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:623
#, no-wrap
msgid ""
"OptimisticLockingTransactionResult<Boolean> result = blocking.withTransaction(ds -> {\n"
"    // The pre-transaction block:\n"
"    HashCommands<String, String, String> hashCommands = ds.hash(String.class);\n"
"    return hashCommands.hexists(key, \"field\"); // Produce a result (boolean in this case)\n"
"},\n"
" (exists, tx) -> { // The transactional block, receives the result and the transactional data source\n"
"        if (exists) {\n"
"            tx.hash(String.class).hset(key, \"field\", \"new value\");\n"
"        } else {\n"
"            tx.discard();\n"
"        }\n"
" },\n"
"  key); // The watched key\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:629
#, fuzzy
msgid "If one of the watched keys is touched before or during the execution of the pre-transaction or transactional blocks, the transaction is aborted.  The pre-transactional block produces a result that the transactional block can use.  This construct is necessary because, within a transaction, the commands do not produce a result.  Results can only be retrieved after the execution of the transaction."
msgstr "如果在执行预交易区块或交易区块之前或期间，有一个被监视的键被触动，交易就会被中止。预交易块产生一个结果，交易块可以使用。这种结构是必要的，因为在一个事务中，命令不产生结果。结果只能在交易执行后被检索到。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:634
#, fuzzy
msgid "The pre-transaction and transactional blocks are invoked on the same Redis connection.  Consequently, the pre-transaction block must use the passed data source to execute commands.  Thus, the commands are emitted from that connection.  These commands must not modify the watched keys."
msgstr "预交易块和交易块是在同一个Redis连接上调用的。因此，预交易块必须使用传递的数据源来执行命令。因此，这些命令是从该连接中发出的。这些命令不得修改被监视的键。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:636
#, fuzzy
msgid "The transaction is aborted if the pre-transaction block throws an exception (or produces a failure when using the reactive API)."
msgstr "如果预交易块抛出一个异常（或者在使用反应式API时产生一个失败），交易就会被中止。"

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:637
#, fuzzy, no-wrap
msgid "Execute custom commands"
msgstr "执行自定义命令"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:640
#, fuzzy
msgid "To execute a custom command, or a command not supported by the API, use the following approach:"
msgstr "要执行一个自定义的命令，或一个API不支持的命令，请使用以下方法。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:648
#, no-wrap
msgid "Response response = ds.execute(\"my-command\", param1, param2, param3);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:654
#, fuzzy
msgid "The `execute` method sends the command to Redis and retrieves the `Response`.  The command name is passed as first parameters.  You can add an arbitrary number of **String** parameters to your command.  The result is wrapped into a `Response` object."
msgstr " `execute` 方法将命令发送到Redis并检索 `Response` 。命令名称作为第一个参数传递。你可以为你的命令添加任意数量的 *String* 参数。结果被包装成一个 `Response` 对象。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:656
#, fuzzy
msgid "The reactive variant returns a `Uni<Response>`."
msgstr "反应式变体返回一个 `Uni<Response>` 。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:658
#, fuzzy
msgid "You can also execute custom command in a transaction."
msgstr "你也可以在一个事务中执行自定义命令。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:659
#, fuzzy, no-wrap
msgid "Preload data into Redis"
msgstr "预装数据到Redis"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:662
#, fuzzy
msgid "On startup, you can configure the Redis client to preload data into the Redis database."
msgstr "在启动时，你可以配置Redis客户端将数据预加载到Redis数据库。"

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:663
#, fuzzy, no-wrap
msgid "Load scripts"
msgstr "加载脚本"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:666
#, fuzzy
msgid "Specify the _load script_ you want to load using:"
msgstr "指定你要使用的 _加载脚本_ 。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:671
#, no-wrap
msgid ""
"quarkus.redis.load-script=import.sql # import.sql is the default in dev, no-file is the default in prod\n"
"quarkus.redis.my-redis.load-script=actors.redis, movies.redis\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:674
#, fuzzy
msgid "`load-script` is a build time property than cannot be overridden at runtime."
msgstr " `load-script` 是一个构建时的属性，在运行时不能被重写。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:677
#, fuzzy
msgid "Note that each client can have a different script, even a list of scripts.  In the case of a list, the data is imported in the list order (for example, first `actors.redis`, then `movies.redis` for the `my-redis` client)."
msgstr "请注意，每个客户都可以有不同的脚本，甚至是一个脚本的列表。在列表的情况下，数据是按照列表的顺序导入的（例如，首先是 `actors.redis` ，然后是 `movies.redis` ，用于 `my-redis` 客户端）。"

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:678
#, fuzzy, no-wrap
msgid "Load Script format"
msgstr "加载脚本格式"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:681
#, fuzzy
msgid "The `.redis` file follows a _one command per line_ format:"
msgstr " `.redis` 文件遵循 _每行一个命令_ 的格式。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:685
#, no-wrap
msgid "# Line starting with # and -- are ignored, as well as empty lines\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:688
#, no-wrap
msgid ""
"-- One command per line:\n"
"HSET foo field1 abc field2 123\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:691
#, no-wrap
msgid ""
"-- Parameters with spaces must be wrapped into single or double quotes\n"
"HSET bar field1 \"abc def\" field2 '123 456 '\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:695
#, no-wrap
msgid ""
"-- Parameters with double quotes must be wrapped into single quotes and the opposite\n"
"SET key1 'A value using \"double-quotes\"'\n"
"SET key2 \"A value using 'single-quotes'\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:700
#, fuzzy
msgid "Quarkus batches all the commands from a single file and sends all the commands.  The loading process fails if there is any error, but the previous instructions may have been executed.  To avoid that, you can wrap your command into a Redis _transaction_:"
msgstr "Quarkus将所有的指令从一个文件中分批发送，并发送所有的指令。如果有任何错误，加载过程就会失败，但之前的指令可能已经被执行。为了避免这种情况，你可以把你的命令包装成一个Redis _事务_ 。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:709
#, no-wrap
msgid ""
"-- Run inside a transaction\n"
"MULTI\n"
"SET key value\n"
"SET space:key 'another value'\n"
"INCR counter\n"
"EXEC\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:711
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "配置"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:716
#, fuzzy
msgid "The data is loaded when the application starts.  By default, it drops the whole database before importing.  You can prevent this using `quarkus.redis.flush-before-load=false`."
msgstr "数据在应用程序启动时被加载。默认情况下，它在导入前会丢弃整个数据库。你可以使用 `quarkus.redis.flush-before-load=false` 来防止这一点。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:719
#, fuzzy
msgid "Also, the import process only runs if the database is empty (no key).  You can force to import even if there is data using the `quarkus.redis.load-only-if-empty=false`"
msgstr "另外，导入过程只在数据库是空的（没有键）时运行。你可以在有数据的情况下强制导入，使用 `quarkus.redis.load-only-if-empty=false` "

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:720
#, fuzzy, no-wrap
msgid "Dev/Test vs. Prod"
msgstr "开发/测试与生产"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:724
#, fuzzy
msgid "As mentioned above, in dev and test modes, Quarkus tries to import data by looking for the `src/main/resources/import.redis`.  This behavior is disabled in _prod_ mode, and if you want to import even in production, add:"
msgstr "如上所述，在开发和测试模式下，Quarkus试图通过寻找 `src/main/resources/import.redis` 。这种行为在 _prod_ 模式下被禁用，如果你想在生产中也能导入，请添加。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:728
#, no-wrap
msgid "%prod.quarkus.redis.load-script=import.redis\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:731
#, fuzzy
msgid "Before importing in _prod_ mode, mae sure you configured `quarkus.redis.flush-before-load` accordingly."
msgstr "在以 _prod_ 模式导入之前，确保你相应地配置了 `quarkus.redis.flush-before-load` 。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:733
#, fuzzy
msgid "In dev mode, to reload the content of the `.redis` load scripts, you need to add: `%dev.quarkus.vertx.caching=false`"
msgstr "在开发模式下，为了重新加载 `.redis` 加载脚本的内容，你需要添加。 `%dev.quarkus.vertx.caching=false` "

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:734
#, fuzzy, no-wrap
msgid "Vert.x Redis Client"
msgstr "Vert.x Redis客户端"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:738
#, fuzzy
msgid "In addition to the high-level API, you can use the Vertx Redis clients directly in your code.  The documentation of the Vert.x Redis Client is available on the https://vertx.io/docs/vertx-redis-client/java/[Vert.x Web Site]."
msgstr "除了高层的API，你还可以在你的代码中直接使用Vertx Redis客户端。Vert.x Redis客户端的文档可以在 link:https://vertx.io/docs/vertx-redis-client/java/[Vert.x网站] 上找到。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:739
#, fuzzy, no-wrap
msgid "Redis Health Check"
msgstr "Redis健康检查"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:742
#, fuzzy
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-redis` will automatically add a readiness health check to validate the connection to the Redis server."
msgstr "如果你使用 `quarkus-smallrye-health` 扩展， `quarkus-redis` 将自动添加一个准备就绪健康检查，以验证与Redis服务器的连接。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:744
#, fuzzy
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr "因此，当你访问你的应用程序的 `/q/health/ready` 端点时，你将有关于连接验证状态的信息。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:746
#, fuzzy
msgid "This behavior can be disabled by setting the `quarkus.redis.health.enabled` property to `false` in your `application.properties`."
msgstr " `false` 这种行为可以通过在你的 `application.properties` 中设置 `quarkus.redis.health.enabled` 属性来禁用。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:747
#, fuzzy, no-wrap
msgid "Programmatic Redis Hosts"
msgstr "程序化的Redis主机"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:751
#, fuzzy
msgid "The `RedisHostsProvider` programmatically provides redis hosts.  This allows for configuration of properties like redis connection password coming from other sources."
msgstr " `RedisHostsProvider` ，以编程方式提供redis主机。这允许对来自其他来源的redis连接密码等属性进行配置。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:755
#, fuzzy
msgid "This is useful as it removes the need to store sensitive data in application.properties."
msgstr "这很有用，因为它消除了在application.properties中存储敏感数据的需要。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:769
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Identifier(\"hosts-provider\") // the name of the host provider\n"
"public class ExampleRedisHostProvider implements RedisHostsProvider {\n"
"    @Override\n"
"    public Set<URI> getHosts() {\n"
"        // do stuff to get the host\n"
"        String host = \"redis://localhost:6379/3\";\n"
"        return Collections.singleton(URI.create(host));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:772
#, fuzzy
msgid "The host provider can be used to configure the redis client like shown below"
msgstr "主机提供者可以用来配置redis客户端，如下图所示"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:776
#, no-wrap
msgid "quarkus.redis.hosts-provider-name=hosts-provider\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:778
#, fuzzy, no-wrap
msgid "Customize the Redis options programmatically"
msgstr "以编程方式提供Redis主机"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:782
#, fuzzy
msgid "You can expose a bean implementing the `io.quarkus.redis.client.RedisOptionsCustomizer` interface to customize the Redis client options.  The bean is called for each configured Redis client:"
msgstr "你可以公开一个实现 `io.quarkus.redis.client.RedisOptionsCustomizer` 接口的Bean，以定制Redis客户端选项。每个配置的Redis客户端都会调用该Bean。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:787
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyExampleCustomizer implements RedisOptionsCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:798
#, no-wrap
msgid ""
"    @Override\n"
"    public void customize(String clientName, RedisOptions options) {\n"
"        if (clientName.equalsIgnoreCase(\"my-redis\")\n"
"                || clientName.equalsIgnoreCase(RedisConfig.DEFAULT_CLIENT_NAME)) {\n"
"            // modify the given options\n"
"        } else {\n"
"            throw new IllegalStateException(\"Unknown client name: \" + clientName);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:801
#, fuzzy, no-wrap
msgid "Dev Services"
msgstr "开发服务"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:804
#, fuzzy
msgid "See xref:redis-dev-services.adoc[Redis Dev Service]."
msgstr "见 link:redis-dev-services.html[Redis Dev Service] 。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:805
#, fuzzy, no-wrap
msgid "Redis client metrics"
msgstr "Redis客户端指标"

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:807
#, fuzzy, no-wrap
msgid "Enable metrics collection"
msgstr "启用指标收集"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:811
#, fuzzy
msgid "Redis client metrics are automatically enabled when the application also uses the xref:micrometer.adoc[`quarkus-micrometer`] extension.  Micrometer collects the metrics of all the Redis clients implemented by the application."
msgstr "当应用程序也使用了Redis的 link:micrometer.html[`quarkus-micrometer`] 扩展。Micrometer会收集应用程序实现的所有Redis客户端的指标。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:813
#, fuzzy
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr "举例来说，如果你把指标导出到Prometheus，你会得到。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:861
#, no-wrap
msgid ""
"# HELP redis_commands_duration_seconds The duration of the operations (commands of batches\n"
"# TYPE redis_commands_duration_seconds summary\n"
"redis_commands_duration_seconds_count{client_name=\"<default>\",} 3.0\n"
"redis_commands_duration_seconds_sum{client_name=\"<default>\",} 0.047500042\n"
"# HELP redis_commands_duration_seconds_max The duration of the operations (commands of batches\n"
"# TYPE redis_commands_duration_seconds_max gauge\n"
"redis_commands_duration_seconds_max{client_name=\"<default>\",} 0.033273167\n"
"# HELP redis_pool_active The number of resources from the pool currently used\n"
"# TYPE redis_pool_active gauge\n"
"redis_pool_active{pool_name=\"<default>\",pool_type=\"redis\",} 0.0\n"
"# HELP redis_pool_ratio Pool usage ratio\n"
"# TYPE redis_pool_ratio gauge\n"
"redis_pool_ratio{pool_name=\"<default>\",pool_type=\"redis\",} 0.0\n"
"# HELP redis_pool_queue_size Number of pending elements in the waiting queue\n"
"# TYPE redis_pool_queue_size gauge\n"
"redis_pool_queue_size{pool_name=\"<default>\",pool_type=\"redis\",} 0.0\n"
"# HELP redis_commands_failure_total The number of operations (commands or batches) that have been failed\n"
"# TYPE redis_commands_failure_total counter\n"
"redis_commands_failure_total{client_name=\"<default>\",} 0.0\n"
"# HELP redis_commands_success_total The number of operations (commands or batches) that have been executed successfully\n"
"# TYPE redis_commands_success_total counter\n"
"redis_commands_success_total{client_name=\"<default>\",} 3.0\n"
"# HELP redis_pool_idle The number of resources from the pool currently used\n"
"# TYPE redis_pool_idle gauge\n"
"redis_pool_idle{pool_name=\"<default>\",pool_type=\"redis\",} 6.0\n"
"# HELP redis_pool_completed_total Number of times resources from the pool have been acquired\n"
"# TYPE redis_pool_completed_total counter\n"
"redis_pool_completed_total{pool_name=\"<default>\",pool_type=\"redis\",} 3.0\n"
"# HELP redis_commands_count_total The number of operations (commands or batches) executed\n"
"# TYPE redis_commands_count_total counter\n"
"redis_commands_count_total{client_name=\"<default>\",} 3.0\n"
"# HELP redis_pool_usage_seconds Time spent using resources from the pool\n"
"# TYPE redis_pool_usage_seconds summary\n"
"redis_pool_usage_seconds_count{pool_name=\"<default>\",pool_type=\"redis\",} 3.0\n"
"redis_pool_usage_seconds_sum{pool_name=\"<default>\",pool_type=\"redis\",} 0.024381375\n"
"# HELP redis_pool_usage_seconds_max Time spent using resources from the pool\n"
"# TYPE redis_pool_usage_seconds_max gauge\n"
"redis_pool_usage_seconds_max{pool_name=\"<default>\",pool_type=\"redis\",} 0.010671542\n"
"# HELP redis_pool_queue_delay_seconds Time spent in the waiting queue before being processed\n"
"# TYPE redis_pool_queue_delay_seconds summary\n"
"redis_pool_queue_delay_seconds_count{pool_name=\"<default>\",pool_type=\"redis\",} 3.0\n"
"redis_pool_queue_delay_seconds_sum{pool_name=\"<default>\",pool_type=\"redis\",} 0.022341249\n"
"# HELP redis_pool_queue_delay_seconds_max Time spent in the waiting queue before being processed\n"
"# TYPE redis_pool_queue_delay_seconds_max gauge\n"
"redis_pool_queue_delay_seconds_max{pool_name=\"<default>\",pool_type=\"redis\",} 0.021926083\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:864
#, fuzzy
msgid "The Redis client name can be found in the _tags_."
msgstr "Redis客户端的名称可以在 _标签_ 中找到。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:866
msgid "The metrics contain both the Redis connection pool metrics (`redis_pool_*`) and the metrics about the command execution (`redis_commands_*`) such as the number of command, successes, failures, and durations."
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:867
#, no-wrap
msgid "Disable metrics collection"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:870
msgid "To disable the Redis client metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:874
#, no-wrap
msgid "quarkus.micrometer.binder.redis.enabled=false\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:877
#, no-wrap
msgid "Configuration reference"
msgstr ""

#, fuzzy
#~ msgid "When using `@RedisClientName`, you can omit the `@Inject` annotation."
#~ msgstr "当使用 `@RedisClientName` ，你可以省略 `@Inject` 的注释。"

#, fuzzy
#~ msgid "Using the high-level clients (data sources)"
#~ msgstr "使用高层客户（数据源）。"

#, fuzzy
#~ msgid "auto-suggest - `.autosuggest()` (requires the https://redis.com/modules/redis-search/[RedisSearch] module on the server side).O These commands are marked as experimental, as we would need feedback before making them stable."
#~ msgstr "graph - `.graph()` （需要服务器端的 link:https://redis.com/modules/redis-graph/[redis-graph] 模块，该模块也提供graph命令）这些命令被标记为实验性的，因为我们在使其稳定之前需要反馈。"

#, fuzzy
#~ msgid "Caching values"
#~ msgstr "缓存值"

#, fuzzy
#~ msgid "Using pub/sub"
#~ msgstr "使用pub/sub"

#, fuzzy
#~ msgid "Providing Redis Hosts Programmatically"
#~ msgstr "以编程方式提供Redis主机"

#, fuzzy
#~ msgid "How to use custom Redis Commands"
#~ msgstr "如何使用自定义Redis命令"

#, fuzzy
#~ msgid "As the list of commands which are supported out-of-box by both https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] and https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] depends on what is available in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`], then there might be case when you need a command which is not (yet) available via https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]."
#~ msgstr "作为一个命令列表，在开箱时就被支持的命令有 link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] 和 link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] 都支持的命令列表取决于在 link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] 中的内容，那么可能会有这样的情况，即你需要的命令（还）不能通过 link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] ."

#, fuzzy
#~ msgid "In such case (if you don't want to wait for the new command to be supported in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]), you can implement it in either https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] or https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`].  In order to do so, you will need:"
#~ msgstr "在这种情况下（如果你不想等待新的命令被支持在 link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] 中支持），你可以把它实现在 link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] 或 link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] .为了做到这一点，你将需要。"

#, fuzzy
#~ msgid "Generate a new `Command` based on the nodejs code available in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] repository:"
#~ msgstr "根据资料库中的nodejs代码生成一个新的 `Command` 。 link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] 仓库中的代码，生成一个新的。"

#, fuzzy
#~ msgid "If you don't have a Redis service running locally, you can run Redis in a Docker container:"
#~ msgstr "如果你没有本地运行的Redis服务，你可以在Docker容器中运行Redis。"

#, fuzzy
#~ msgid "Next, while being in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] root folder execute:"
#~ msgstr "接下来，当在 link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] 根目录下执行。"

#, fuzzy
#~ msgid "The above sequence of commands should update the https://github.com/vert-x3/vertx-redis-client/blob/master/src/main/java/io/vertx/redis/client/Command.java[`Command.java`] file, so it includes all the possible commands supported by a particular Redis version."
#~ msgstr "以上的命令序列应该更新 link:https://github.com/vert-x3/vertx-redis-client/blob/master/src/main/java/io/vertx/redis/client/Command.java[`Command.java`] 文件，使其包括特定 Redis 版本所支持的所有可能的命令。"

#, fuzzy
#~ msgid "This definition is very important as we will have to use it in the service.  Once we have this `Command` we can start to update the redis-client extension by:"
#~ msgstr "这个定义非常重要，因为我们必须在服务中使用它。一旦我们有了这个 `Command` ，我们就可以开始更新redis-client扩展。"

#, fuzzy
#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] interface, i.e.:"
#~ msgstr "更新 link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] 接口，即。"

#, fuzzy
#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientImpl.java[`RedisClientImpl`], i.e.:"
#~ msgstr "更新了 link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientImpl.java[`RedisClientImpl`] ，即：。"
