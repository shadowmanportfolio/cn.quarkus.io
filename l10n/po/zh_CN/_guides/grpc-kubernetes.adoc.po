# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/grpc-kubernetes.adoc:6
#, fuzzy, no-wrap
msgid "Deploying your gRPC Service in Kubernetes"
msgstr "在Kubernetes中部署你的gRPC服务"

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:15
#, fuzzy
msgid "This page explains how to deploy your gRPC service in Quarkus in Kubernetes.  We'll continue with the example from xref:grpc-getting-started.adoc[the Getting Started gRPC guide]."
msgstr "本页解释了如何在Kubernetes的Quarkus中部署你的gRPC服务。我们将继续使用 link:grpc-getting-started.html[Getting Started gRPC指南] 中的例子。"

#. type: Title ==
#: upstream/_guides/grpc-kubernetes.adoc:16
#, fuzzy, no-wrap
msgid "Configuring your project to use the Quarkus Kubernetes extension"
msgstr "配置你的项目以使用Quarkus Kubernetes扩展"

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:19
#, fuzzy
msgid "Add the Quarkus Kubernetes extension to your build file:"
msgstr "将Quarkus Kubernetes扩展添加到你的构建文件中："

#. type: Block title
#: upstream/_guides/grpc-kubernetes.adoc:21
#: upstream/_guides/grpc-kubernetes.adoc:71
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/grpc-kubernetes.adoc:27
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/grpc-kubernetes.adoc:30
#: upstream/_guides/grpc-kubernetes.adoc:80
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/grpc-kubernetes.adoc:33
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-kubernetes\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:36
#, fuzzy
msgid "Next, we want to expose our application using the Kubernetes Ingress resource:"
msgstr "接下来，我们要使用Kubernetes Ingress资源来暴露我们的应用程序："

#. type: delimited block -
#: upstream/_guides/grpc-kubernetes.adoc:40
#, no-wrap
msgid "quarkus.kubernetes.ingress.expose=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:43
#, fuzzy
msgid "The Quarkus Kubernetes will bind the HTTP server using the port name `http` and the gRPC server using the port name `grpc`. By default, the Quarkus application will only expose the port name `http`, so only the HTTP server will be publicly accessible. To expose the gRPC server instead, set the `quarkus.kubernetes.ingress.target-port=grpc` property in your application.properties:"
msgstr "Quarkus Kubernetes将使用端口名 `http` 来绑定HTTP服务器，使用端口名 `grpc` 来绑定gRPC服务器。默认情况下，Quarkus应用程序将只公开端口名称 `http` ，所以只有HTTP服务器可以公开访问。要想公开 gRPC 服务器，请在 application.properties 中设置 `quarkus.kubernetes.ingress.target-port=grpc` 属性："

#. type: delimited block -
#: upstream/_guides/grpc-kubernetes.adoc:47
#, no-wrap
msgid "quarkus.kubernetes.ingress.target-port=grpc\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:50
#, fuzzy
msgid "If you configure Quarkus to use the same port for both HTTP and gRPC servers with the property `quarkus.grpc.server.use-separate-server=false`, then you don't need to change the default `target-port`."
msgstr "如果你将Quarkus配置为HTTP和gRPC服务器使用相同的端口，其属性为 `quarkus.grpc.server.use-separate-server=false` ，那么你就不需要改变默认的 `target-port` 。"

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:52
#, fuzzy
msgid "Finally, we need to generate the Kubernetes manifests by running the command in a terminal:"
msgstr "最后，我们需要通过在终端运行命令来生成Kubernetes清单："

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:56
#, fuzzy
msgid "Once generated, you can look at the `target/kubernetes` directory:"
msgstr "一旦生成，你可以查看 `target/kubernetes` 目录："

#. type: delimited block -
#: upstream/_guides/grpc-kubernetes.adoc:62
#, no-wrap
msgid ""
"target/kubernetes\n"
"└── kubernetes.json\n"
"└── kubernetes.yml\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:65
#, fuzzy
msgid "You can find more information about how to deploy the application in Kubernetes in the xref:deploying-to-kubernetes.adoc#deployment[the Kubernetes guide]."
msgstr "你可以在 link:deploying-to-kubernetes.html#deployment[Kubernetes指南] 中找到更多关于如何在Kubernetes中部署应用程序的信息。"

#. type: Title ==
#: upstream/_guides/grpc-kubernetes.adoc:66
#, fuzzy, no-wrap
msgid "Using gRPC Health probes"
msgstr "使用gRPC健康探针"

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:69
#, fuzzy
msgid "By default, the Kubernetes resources do not contain readiness and liveness probes. To add them, import the Smallrye Health extension to your build file:"
msgstr "默认情况下，Kubernetes资源不包含准备度和有效性探测。要添加它们，请将Smallrye Health扩展导入到你的构建文件中："

#. type: delimited block -
#: upstream/_guides/grpc-kubernetes.adoc:77
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-health</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-kubernetes.adoc:83
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-health\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:86
#, fuzzy
msgid "More information about the health extension can be found in xref:microprofile-health.adoc[the Microprofile Health guide]."
msgstr "关于健康扩展的更多信息可以在 link:microprofile-health.html[Microprofile健康指南] 中找到。"

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:88
msgid "By the default, this extension will configure the probes to use the HTTP server (which is provided by some extensions like the Quarkus RESTEasy reactive extension). Internally, this probe will also use xref:grpc-service-implementation.adoc#health[the generated gRPC Health services]."
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-kubernetes.adoc:90
msgid "If your application does not use any Quarkus extension that exposes an HTTP server, you can still configure the probes to directly use the gRPC Health service by adding the property `quarkus.kubernetes.readiness-probe.grpc-action-enabled=true` into your configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-kubernetes.adoc:94
#, no-wrap
msgid "quarkus.kubernetes.readiness-probe.grpc-action-enabled=true\n"
msgstr ""
