# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-02-10 15:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/stork-kubernetes.adoc:6
#, fuzzy, no-wrap
msgid "Using Stork with Kubernetes"
msgstr "在Kubernetes中使用Stork"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:12
#, fuzzy
msgid "This guide explains how to use Stork with Kubernetes for service discovery and load balancing."
msgstr "本指南解释了如何使用Stork与Kubernetes进行服务发现和负载平衡。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:14
#, fuzzy
msgid "If you are new to Stork, please read the xref:stork.adoc[Stork Getting Started Guide]."
msgstr "如果你是第一次使用Stork，请阅读 link:stork.html[Stork入门指南] 。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:17
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:22
#, fuzzy
msgid "Access to a Kubernetes cluster (Minikube is a viable option)"
msgstr "访问一个Kubernetes集群（Minikube是一个可行的选择）"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:23
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:26
#, fuzzy
msgid "In this guide, we will work with a few components deployed in a Kubernetes cluster:"
msgstr "在本指南中，我们将与部署在Kubernetes集群中的几个组件一起工作。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:28
#, fuzzy
msgid "A simple blue service."
msgstr "一个简单的蓝色服务。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:29
#, fuzzy
msgid "A simple red service."
msgstr "一个简单的红色服务。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:30
#, fuzzy
msgid "The `color-service` is the Kubernetes service which is the entry point to the Blue and Red instances."
msgstr " `color-service` 是Kubernetes服务，是蓝色和红色实例的入口。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:31
#, fuzzy
msgid "A client service using a REST client to call the blue or the red service. Service discovery and selection are delegated to Stork."
msgstr "一个使用REST客户端调用蓝色或红色服务的客户端服务。服务的发现和选择被委托给Stork。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/stork-kubernetes.adoc:32
#, fuzzy, no-wrap
msgid "Architecture of the application"
msgstr "应用程序的架构"

#. type: Target for macro image
#: upstream/_guides/stork-kubernetes.adoc:32
#, no-wrap
msgid "stork-kubernetes-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:35
#, fuzzy
msgid "For the sake of simplicity, everything will be deployed in the same namespace of the Kubernetes cluster."
msgstr "为了简单起见，一切都将部署在Kubernetes集群的同一个命名空间。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:36
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:40
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the applications step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:42
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:44
#, fuzzy
msgid "The solution is located in the `stork-kubernetes-quickstart` {quickstarts-tree-url}/stork-kubernetes-quickstart[directory]."
msgstr "该解决方案位于 `stork-kubernetes-quickstart` {quickstarts-treeurl}/stork-kubernetes-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:45
#, fuzzy, no-wrap
msgid "Discovery and selection"
msgstr "发现和选择"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:48
#, fuzzy
msgid "Before going further, we need to discuss discovery vs. selection."
msgstr "在进一步讨论之前，我们需要讨论发现与选择。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:51
#, fuzzy
msgid "Service discovery is the process of locating service instances.  It produces a list of service instances that is potentially empty (if no service matches the request) or contains multiple service instances."
msgstr "服务发现是定位服务实例的过程。它产生一个服务实例的列表，该列表可能是空的（如果没有与请求相匹配的服务）或包含多个服务实例。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:54
#, fuzzy
msgid "Service selection, also called load-balancing, chooses the best instance from the list returned by the discovery process.  The result is a single service instance or an exception when no suitable instance can be found."
msgstr "服务选择，也称为负载平衡，从发现过程返回的列表中选择最佳实例。其结果是一个单一的服务实例，或者在找不到合适的实例时出现异常。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:58
#, fuzzy
msgid "Stork handles both discovery and selection.  However, it does not handle the communication with the service but only provides a service instance.  The various integrations in Quarkus extract the location of the service from that service instance."
msgstr "Stork同时处理发现和选择。然而，它并不处理与服务的通信，而只是提供一个服务实例。Quarkus的各种集成从该服务实例中提取服务的位置。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:60
#, fuzzy, no-wrap
msgid "Bootstrapping the project"
msgstr "引导项目"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:63
#, fuzzy
msgid "Create a Quarkus project importing the quarkus-rest-client-reactive and quarkus-resteasy-reactive extensions using your favorite approach:"
msgstr "使用你喜欢的方法创建一个Quarkus项目，导入quarkus-rest-client-reactive和quarkus-resteasy-reactive扩展。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:69
#, fuzzy
msgid "In the generated project, also add the following dependencies:"
msgstr "在生成的项目中，还要添加以下依赖项。"

#. type: Block title
#: upstream/_guides/stork-kubernetes.adoc:71
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:93
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.stork</groupId>\n"
"    <artifactId>stork-service-discovery-kubernetes</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"      <groupId>io.smallrye.stork</groupId>\n"
"      <artifactId>stork-load-balancer-random</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-container-image-jib</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/stork-kubernetes.adoc:96
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:103
#, no-wrap
msgid ""
"implementation(\"io.smallrye.stork:stork-service-discovery-kubernetes\")\n"
"implementation(\"io.smallrye.stork:stork-load-balancer-random\")\n"
"implementation(\"io.quarkus:quarkus-kubernetes\")\n"
"implementation(\"io.quarkus:quarkus-kubernetes-client\")\n"
"implementation(\"io.quarkus:quarkus-container-image-jib\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:106
#, fuzzy
msgid "`stork-service-discovery-kubernetes` provides an implementation of service discovery for Kubernetes. `stork-load-balancer-random` provides an implementation of random load balancer. `quarkus-kubernetes` enables the generation of Kubernetes manifests each time we perform a build. The `quarkuks-kubernetes-client` extension enables the use of the Fabric8 Kubernetes Client in native mode. And `quarkus-container-image-jib` enables the build of a container image using https://github.com/GoogleContainerTools/jib[Jib]."
msgstr " `stork-service-discovery-kubernetes` `stork-load-balancer-random` ，为Kubernetes提供了一个服务发现的实现。 ，使我们每次执行构建时都能生成Kubernetes清单。 扩展使Fabric8 Kubernetes客户端可以在本地模式下使用。而 ，可以使用 `quarkus-kubernetes` `quarkuks-kubernetes-client` `quarkus-container-image-jib` link:https://github.com/GoogleContainerTools/jib[Jib] 构建容器镜像。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:107
#, fuzzy, no-wrap
msgid "The Blue and Red services"
msgstr "蓝色和红色服务"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:110
#, fuzzy
msgid "Let's start with the very beginning: the service we will discover, select and call."
msgstr "让我们从最开始说起：我们将发现、选择和调用的服务。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:112
#, fuzzy
msgid "The Red and Blue are two simple REST services serving an endpoint responding `Hello from Red!` and `Hello from Blue!` respectively. The code of both applications has been developed following the https://quarkus.io/guides/getting-started[Getting Started Guide]."
msgstr "红色和蓝色是两个简单的REST服务，分别服务于响应 `Hello from Red!` 和 `Hello from Blue!` 的终端。这两个应用程序的代码都是按照《 link:https://quarkus.io/guides/getting-started[入门指南》] 开发的。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:114
#, fuzzy
msgid "As the goal of this guide is to show how to use Stork Kubernetes service discovery, we won't provide the specifics steps for the Red and Blue services. Their container images are already built and available in a public registry:"
msgstr "由于本指南的目标是展示如何使用Stork Kubernetes服务发现，我们将不提供Red和Blue服务的具体步骤。他们的容器镜像已经建立并在公共注册表中可用。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:116
#, fuzzy
msgid "https://quay.io/repository/quarkus/blue-service[Blue service container image]"
msgstr "link:https://quay.io/repository/quarkus/blue-service[蓝色服务容器图像]"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:117
#, fuzzy
msgid "https://quay.io/repository/quarkus/red-service[Red service container image]"
msgstr "link:https://quay.io/repository/quarkus/red-service[红色服务容器图像]"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:119
#, fuzzy, no-wrap
msgid "Deploy the Blue and Red services in Kubernetes"
msgstr "在Kubernetes中部署蓝色和红色服务"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:122
#, fuzzy
msgid "Now that we have our service container images available in a public registry, we need to deploy them into the Kubernetes cluster."
msgstr "现在我们有了公共注册表中的服务容器镜像，我们需要将它们部署到Kubernetes集群中。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:124
#, fuzzy
msgid "The following file contains all the Kubernetes resources needed to deploy the Blue and Red services in the cluster and make them accessible:"
msgstr "下面的文件包含了在集群中部署Blue和Red服务所需的所有Kubernetes资源，并使它们可以被访问。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:136
#, no-wrap
msgid ""
"kind: Role\n"
"apiVersion: rbac.authorization.k8s.io/v1\n"
"metadata:\n"
"  namespace: development\n"
"  name: endpoints-reader\n"
"rules:\n"
"  - apiGroups: [\"\"] # \"\" indicates the core API group\n"
"    resources: [\"endpoints\", \"pods\"]\n"
"    verbs: [\"get\", \"list\"]\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:152
#, no-wrap
msgid ""
"apiVersion: rbac.authorization.k8s.io/v1\n"
"kind: RoleBinding\n"
"metadata:\n"
"  name: stork-rb\n"
"  namespace: development\n"
"subjects:\n"
"  - kind: ServiceAccount\n"
"    # Reference to upper's `metadata.name`\n"
"    name: default\n"
"    # Reference to upper's `metadata.namespace`\n"
"    namespace: development\n"
"roleRef:\n"
"  kind: Role\n"
"  name: endpoints-reader\n"
"  apiGroup: rbac.authorization.k8s.io\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:172
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: Service\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:36:56 +0000\n"
"  labels:\n"
"    app.kubernetes.io/name: color-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"  name: color-service //<1>\n"
"spec:\n"
"  ports:\n"
"    - name: http\n"
"      port: 80\n"
"      targetPort: 8080\n"
"  selector:\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"    type: color-service\n"
"  type: ClusterIP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:215
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:36:56 +0000\n"
"  labels:\n"
"    color: blue\n"
"    type: color-service\n"
"    app.kubernetes.io/name: blue-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"  name: blue-service //<2>\n"
"spec:\n"
"  replicas: 1\n"
"  selector:\n"
"    matchLabels:\n"
"      app.kubernetes.io/name: blue-service\n"
"      app.kubernetes.io/version: \"1.0\"\n"
"  template:\n"
"    metadata:\n"
"      annotations:\n"
"        app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"        app.quarkus.io/build-timestamp: 2022-03-31 - 10:36:56 +0000\n"
"      labels:\n"
"        color: blue\n"
"        type: color-service\n"
"        app.kubernetes.io/name: blue-service\n"
"        app.kubernetes.io/version: \"1.0\"\n"
"    spec:\n"
"      containers:\n"
"        - env:\n"
"            - name: KUBERNETES_NAMESPACE\n"
"              valueFrom:\n"
"                fieldRef:\n"
"                  fieldPath: metadata.namespace\n"
"          image: quay.io/quarkus/blue-service:1.0\n"
"          imagePullPolicy: Always\n"
"          name: blue-service\n"
"          ports:\n"
"            - containerPort: 8080\n"
"              name: http\n"
"              protocol: TCP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:258
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: 27be03414510f776ca70d70d859b33e134570443\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:38:54 +0000\n"
"  labels:\n"
"    color: red\n"
"    type: color-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"    app.kubernetes.io/name: red-service\n"
"  name: red-service //<2>\n"
"spec:\n"
"  replicas: 1\n"
"  selector:\n"
"    matchLabels:\n"
"      app.kubernetes.io/version: \"1.0\"\n"
"      app.kubernetes.io/name: red-service\n"
"  template:\n"
"    metadata:\n"
"      annotations:\n"
"        app.quarkus.io/commit-id: 27be03414510f776ca70d70d859b33e134570443\n"
"        app.quarkus.io/build-timestamp: 2022-03-31 - 10:38:54 +0000\n"
"      labels:\n"
"        color: red\n"
"        type: color-service\n"
"        app.kubernetes.io/version: \"1.0\"\n"
"        app.kubernetes.io/name: red-service\n"
"    spec:\n"
"      containers:\n"
"        - env:\n"
"            - name: KUBERNETES_NAMESPACE\n"
"              valueFrom:\n"
"                fieldRef:\n"
"                  fieldPath: metadata.namespace\n"
"          image: quay.io/quarkus/red-service:1.0\n"
"          imagePullPolicy: Always\n"
"          name: red-service\n"
"          ports:\n"
"            - containerPort: 8080\n"
"              name: http\n"
"              protocol: TCP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:283
#, no-wrap
msgid ""
"apiVersion: networking.k8s.io/v1\n"
"kind: Ingress //<3>\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:46:19 +0000\n"
"  labels:\n"
"    app.kubernetes.io/name: color-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"    color: blue\n"
"    type: color-service\n"
"  name: color-service\n"
"spec:\n"
"  rules:\n"
"    - host: color-service.127.0.0.1.nip.io\n"
"      http:\n"
"        paths:\n"
"          - backend:\n"
"              service:\n"
"                name: color-service\n"
"                port:\n"
"                  name: http\n"
"            path: /\n"
"            pathType: Prefix\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:287
#, fuzzy
msgid "There are a few interesting parts in this listing:"
msgstr "在这份清单中，有几个有趣的部分。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:289
#, fuzzy
msgid "The Kubernetes Service resource, `color-service`, that Stork will discover."
msgstr "Kubernetes服务资源， `color-service` ，Stork将发现该资源。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:290
#, fuzzy
msgid "The Red and Blue service instances behind the `color-service` Kubernetes service."
msgstr " `color-service` Kubernetes服务背后的红色和蓝色服务实例。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:291
#, fuzzy
msgid "A Kubernetes Ingress resource making the `color-service` accessible from the outside of the cluster at the `color-service.127.0.0.1.nip.io` url. Not that the Ingress is not needed for Stork however, it helps to check that the architecture is in place."
msgstr "一个Kubernetes Ingress资源，使 `color-service` ，可从集群外部的 `color-service.127.0.0.1.nip.io` url。不是说Ingress对Stork不需要，但是，它有助于检查架构是否到位。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:293
#, fuzzy
msgid "Create a file named `kubernetes-setup.yml` with the content above at the root of the project and run the following commands to deploy all the resources in the Kubernetes cluster. Don't forget to create a dedicated namespace:"
msgstr "在项目的根部创建一个名为 `kubernetes-setup.yml` 的文件，其中包含上述内容，并运行以下命令来部署Kubernetes集群中的所有资源。不要忘记创建一个专用的命名空间。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:298
#, no-wrap
msgid ""
"kubectl create namespace development\n"
"kubectl apply -f kubernetes-setup.yml -n=development\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:301
#, fuzzy
msgid "If everything went well the Color service is accessible on http://color-service.127.0.0.1.nip.io. You should have `Hello from Red!` and `Hello from Blue!` response randomly."
msgstr "如果一切顺利，Color服务可以在 http://color-service.127.0.0.1.nip.io 你应该有 `Hello from Red!` 和 `Hello from Blue!` 的随机响应。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:303
#, fuzzy
msgid "Stork is not limited to Kubernetes and integrates with other service discovery mechanisms."
msgstr "Stork并不局限于Kubernetes，而是与其他服务发现机制集成。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:305
#, fuzzy, no-wrap
msgid "The REST Client interface and the front end API"
msgstr "REST客户接口和前端API"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:308
#, fuzzy
msgid "So far, we didn't use Stork; we just deployed the services we will be discovering, selecting, and calling."
msgstr "到目前为止，我们没有使用Stork；我们只是部署了我们将发现、选择和调用的服务。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:311
#, fuzzy
msgid "We will call the services using the Reactive REST Client.  Create the `src/main/java/org/acme/MyService.java` file with the following content:"
msgstr "我们将使用Reactive REST客户端调用这些服务。创建 `src/main/java/org/acme/MyService.java` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:315
#: upstream/_guides/stork-kubernetes.adoc:348
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:317
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:321
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:331
#, no-wrap
msgid ""
"/**\n"
" * The REST Client interface.\n"
" *\n"
" * Notice the `baseUri`. It uses `stork://` as URL scheme indicating that the called service uses Stork to locate and\n"
" * select the service instance. The `my-service` part is the service name. This is used to configure Stork discovery\n"
" * and selection in the `application.properties` file.\n"
" */\n"
"@RegisterRestClient(baseUri = \"stork://my-service\")\n"
"public interface MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:336
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String get();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:339
#, fuzzy
msgid "It's a straightforward REST client interface containing a single method. However, note the `baseUri` attribute:"
msgstr "这是一个直接的REST客户接口，包含一个单一的方法。然而，请注意 `baseUri` 的属性。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:340
#, fuzzy
msgid "the `stork://` suffix instructs the REST client to delegate the discovery and selection of the service instances to Stork,"
msgstr " `stork://` 后缀指示REST客户端将服务实例的发现和选择委托给Stork。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:341
#, fuzzy
msgid "the `my-service` part of the URI is the service name we will be using in the application configuration."
msgstr "URI的 `my-service` 部分是我们将在应用程序配置中使用的服务名称。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:344
#, fuzzy
msgid "It does not change how the REST client is used.  Create the `src/main/java/org/acme/FrontendApi.java` file with the following content:"
msgstr "它不会改变REST客户端的使用方式。创建 `src/main/java/org/acme/FrontendApi.java` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:350
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:355
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:361
#, no-wrap
msgid ""
"/**\n"
" * A frontend API using our REST Client (which uses Stork to locate and select the service instance on each call).\n"
" */\n"
"@Path(\"/api\")\n"
"public class FrontendApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:363
#, no-wrap
msgid "    @RestClient MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:369
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String invoke() {\n"
"        return service.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:371
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:374
#, fuzzy
msgid "It injects and uses the REST client as usual."
msgstr "它像往常一样注入并使用REST客户端。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:375
#, fuzzy, no-wrap
msgid "Stork configuration"
msgstr "鹳鸟配置"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:378
#, fuzzy
msgid "Now we need to configure Stork for using Kubernetes to discover the red and blue instances of the service."
msgstr "现在我们需要配置Stork，以便使用Kubernetes来发现服务的红色和蓝色实例。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:380
#, fuzzy
msgid "In the `src/main/resources/application.properties`, add:"
msgstr "在 `src/main/resources/application.properties` ，添加。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:387
#, no-wrap
msgid ""
"quarkus.stork.my-service.service-discovery.type=kubernetes\n"
"quarkus.stork.my-service.service-discovery.k8s-namespace=development\n"
"quarkus.stork.my-service.service-discovery.application=color-service\n"
"quarkus.stork.my-service.load-balancer.type=random\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:394
#, fuzzy
msgid "`stork.my-service.service-discovery` indicates which type of service discovery we will be using to locate the `my-service` service.  In our case, it's `kubernetes`.  If your access to the Kubernetes cluster is configured via Kube config file, you don't need to configure the access to it. Otherwise, set the proper Kubernetes url using the `quarkus.stork.my-service.service-discovery.k8s-host` property.  `quarkus.stork.my-service.service-discovery.application` contains the name of the Kubernetes service Stork is going to ask for. In our case, this is the `color-service` corresponding to the kubernetes service backed by the Red and Blue instances.  Finally, `quarkus.stork.my-service.load-balancer.type` configures the service selection. In our case, we use a `random` Load Balancer."
msgstr " `stork.my-service.service-discovery` 表示我们将使用哪种类型的服务发现来定位 服务。在我们的例子中，它是 。如果你对Kubernetes集群的访问是通过Kube配置文件配置的，你不需要配置对它的访问。否则，使用 属性设置适当的Kubernetes网址。 包含Stork将要求的Kubernetes服务的名称。在我们的例子中，这是对应于由Red和Blue实例支持的Kubernetes服务的 。最后， 配置服务选择。在我们的案例中，我们使用 负载平衡器。 `my-service` `kubernetes` `quarkus.stork.my-service.service-discovery.k8s-host` `quarkus.stork.my-service.service-discovery.application` `color-service` `quarkus.stork.my-service.load-balancer.type` `random` "

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:395
#, fuzzy, no-wrap
msgid "Deploy the REST Client interface and the front end API in the Kubernetes cluster"
msgstr "在Kubernetes集群中部署REST客户端接口和前端API"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:399
#, fuzzy
msgid "The system is almost complete. We only need to deploy the REST Client interface and the client service to the cluster.  In the `src/main/resources/application.properties`, add:"
msgstr "该系统几乎已经完成。我们只需要将REST客户端接口和客户端服务部署到集群上。在 `src/main/resources/application.properties` ，添加。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:406
#, no-wrap
msgid ""
"quarkus.container-image.registry=<public registry>\n"
"quarkus.kubernetes-client.trust-certs=true\n"
"quarkus.kubernetes.ingress.expose=true\n"
"quarkus.kubernetes.ingress.host=my-service.127.0.0.1.nip.io\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:411
#, fuzzy
msgid "The `quarkus.container-image.registry` contains the container registry to use.  The `quarkus.kubernetes.ingress.expose` indicates that the service will be accessible from the outside of the cluster.  The `quarkus.kubernetes.ingress.host` contains the url to access the service. We are using https://nip.io/[nip.io] wildcard for IP address mappings."
msgstr " `quarkus.container-image.registry` 包含要使用的容器注册表。 `quarkus.kubernetes.ingress.expose` 表示该服务可以从集群的外部访问。 `quarkus.kubernetes.ingress.host` 包含访问该服务的URL。我们使用 link:https://nip.io/[nip.io] 通配符进行IP地址映射。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:413
#, fuzzy
msgid "For a more customized configuration you can check the https://quarkus.io/guides/deploying-to-kubernetes[Deploying to Kubernetes guide]"
msgstr "对于更多的自定义配置，你可以查看 link:https://quarkus.io/guides/deploying-to-kubernetes[部署到Kubernetes的指南] 。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:414
#, fuzzy, no-wrap
msgid "Build and push the container image"
msgstr "构建并推送容器镜像"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:417
#, fuzzy
msgid "Thanks to the extensions we are using, we can perform the build of a container image using Jib and also enabling the generation of Kubernetes manifests while building the application. For example, the following command will generate a Kubernetes manifest in the `target/kubernetes/` directory and also build and push a container image for the project:"
msgstr "感谢我们正在使用的扩展，我们可以使用Jib执行容器镜像的构建，并且在构建应用程序的同时启用Kubernetes清单的生成。例如，下面的命令将在 `target/kubernetes/` 目录中生成Kubernetes清单，同时为项目构建和推送一个容器镜像。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:421
#, no-wrap
msgid "./mvnw package -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:423
#, fuzzy, no-wrap
msgid "Deploy client service to the Kubernetes cluster"
msgstr "将客户端服务部署到Kubernetes集群上"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:426
#, fuzzy
msgid "The generated manifest can be applied to the cluster from the project root using kubectl:"
msgstr "生成的清单可以使用kubectl从项目根部应用到集群。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:430
#, no-wrap
msgid "kubectl apply -f target/kubernetes/kubernetes.yml -n=development\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/stork-kubernetes.adoc:436
#, fuzzy
msgid "Please note that if you use Elliptic Curve keys with Stork and are getting exceptions like `java.lang.ClassNotFoundException: org.bouncycastle.jce.provider.BouncyCastleProvider`, then adding a BouncyCastle PKIX dependency (`org.bouncycastle:bcpkix-jdk15on`) is required."
msgstr "请注意，如果你用Stork的椭圆曲线钥匙，并得到像 `java.lang.ClassNotFoundException: org.bouncycastle.jce.provider.BouncyCastleProvider` ，那么需要添加BouncyCastle PKIX的依赖性( `org.bouncycastle:bcpkix-jdk15on` )。"

#. type: delimited block =
#: upstream/_guides/stork-kubernetes.adoc:438
#, fuzzy
msgid "Note that internally an `org.bouncycastle.jce.provider.BouncyCastleProvider` provider will be registered if it has not already been registered."
msgstr "请注意，在内部，如果一个 `org.bouncycastle.jce.provider.BouncyCastleProvider` 提供者还没有被注册，它将被注册。"

#. type: delimited block =
#: upstream/_guides/stork-kubernetes.adoc:440
#, fuzzy
msgid "You can have this provider registered as described in the xref:security-customization.adoc#bouncy-castle[BouncyCastle] or xref:security-customization.adoc#bouncy-castle-fips[BouncyCastle FIPS] sections."
msgstr "您可以按照 link:security-customization.html#bouncy-castle[BouncyCastle] 或 link:security-customization.html#bouncy-castle-fips[BouncyCastle FIPS] 部分所述，让该提供商注册。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:444
#, fuzzy
msgid "We're done! So, let's see if it works."
msgstr "我们完成了!那么，让我们看看它是否有效。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:446
#, fuzzy
msgid "Open a browser and navigate to http://my-service.127.0.0.1.nip.io/api."
msgstr "打开一个浏览器，并浏览到 http://my-service.127.0.0.1.nip.io/api "

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:448
#, fuzzy
msgid "Or if you prefer, in another terminal, run:"
msgstr "或者，如果你愿意，在另一个终端，运行。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:457
#, no-wrap
msgid ""
"> curl http://my-service.127.0.0.1.nip.io/api\n"
"...\n"
"> curl http://my-service.127.0.0.1.nip.io/api\n"
"...\n"
"> curl http://my-service.127.0.0.1.nip.io/api\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:460
#, fuzzy
msgid "The responses should alternate randomly between `Hello from Red!` and `Hello from Blue!`."
msgstr "回答应该在 `Hello from Red!` 和 `Hello from Blue!` 之间随机交替进行。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:462
#, fuzzy
msgid "You can compile this application into a native executable:"
msgstr "你可以将这个应用程序编译成一个本地可执行文件。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:466
#, fuzzy
msgid "Then, you need to build a container image based on the native executable. For this use the corresponding Dockerfile:"
msgstr "然后，你需要在本地可执行文件的基础上建立一个容器镜像。为此，请使用相应的Docker文件。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:470
#, no-wrap
msgid "> docker build -f src/main/docker/Dockerfile.native -t quarkus/stork-kubernetes-quickstart .\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:473
#, fuzzy
msgid "After publishing the new image to the container registry. You can redeploy the Kubernetes manifest to the cluster."
msgstr "将新镜像发布到容器注册表后。你可以将Kubernetes清单重新部署到集群上。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:474
#, no-wrap
msgid "Going further"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:478
msgid "This guide has shown how to use SmallRye Stork to discover and select your services.  You can find more about Stork in:"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:480
msgid "the xref:stork-reference.adoc[Stork reference guide],"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:481
msgid "the xref:stork.adoc[Stork with Consul reference guide],"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:481
msgid "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."
msgstr ""

#, fuzzy
#~ msgid "Getting Started with SmallRye Stork"
#~ msgstr "开始使用SmallRye Stork"

#, fuzzy
#~ msgid "The essence of distributed systems resides in the interaction between services.  In modern architecture, you often have multiple instances of your service to share the load or improve the resilience by redundancy.  But how do you select the best instance of your service? That's where https://smallrye.io/smallrye-stork[SmallRye Stork] helps.  Stork is going to choose the most appropriate instance.  It offers:"
#~ msgstr "分布式系统的本质在于服务之间的互动。在现代架构中，你经常有多个服务实例来分担负载或通过冗余来提高弹性。但你如何选择你的服务的最佳实例？这就是 link:https://smallrye.io/smallrye-stork[SmallRye Stork] 的帮助所在。Stork要选择最合适的实例。它提供。"

#, fuzzy
#~ msgid "Extensible service discovery mechanisms"
#~ msgstr "可扩展的服务发现机制"

#, fuzzy
#~ msgid "Built-in support for Consul and Kubernetes"
#~ msgstr "对Consul和Kubernetes的内置支持"

#, fuzzy
#~ msgid "Customizable client load-balancing strategies"
#~ msgstr "可定制的客户端负载平衡策略"
